scchart VVIPacemaker{
/*input signals */
input signal
Vsense,
Asense,
AVI_ex,
PVARP_ex,
AEI_ex,
VRP_ex,
LRI_ex,
URI_ex;

/*output signals */
output signal
stop_URI,
stop_VRP,
stop_PVARP,
stop_AVI,
start_AVI,
stop_LRI,
stop_AEI,
Vpace,
start_PVARP,
start_AEI,
Apace,
start_VRP,
start_LRI,
start_URI,
AVI_counting,
PVARP_counting,
VRP_counting,
AEI_counting,
LRI_counting,
URI_counting,
AR,
VR,
URI_waiting,
reset_LRI;
initial state TOP
{
   
  region AVI:
 
  initial state waitURIandAVI
  {
    region waitAVI:
   
    initial state init
-->PVARP_done with PVARP_ex;
   
   
   
    state PVARP_done
    -->connect with Asense
    -->connect with Apace;
   
    connector state connect
    -->waitAVI immediate with /start_AVI;
   
   
    state waitAVI
    --> waitURI with AVI_ex    
    -->init with Vsense/stop_AVI
    -->init with Vpace/stop_AVI;
   
   
    state waitURI
    --> init immediate with !URI_counting/Vpace
-->waitURI with URI_counting;

  };
 
 
  region AEI:
 
  initial state idle
  --> connect with Vpace
  --> connect with Vsense;
 
  connector state connect
  --> waitPVARP immediate with /start_AEI;
 
  state waitPVARP
  --> waitAEI with PVARP_ex;
 
  state waitAEI
  --> idle with Asense/stop_AEI
  --> idle with AEI_ex/Apace;
 
  region PVARP:
 
  initial state idle
  --> connect with Vsense
  --> connect with Vpace;
 
  connector state connect
  --> waitVRP immediate with /start_PVARP;
 
  state waitVRP
  --> waitPVARP with VRP_ex
  -->waitVRP with Asense/AR;
 
  state waitPVARP
  --> connect1 with Vsense
  --> connect1 with Vpace
  --> idle with PVARP_ex
  -->waitPVARP with Asense/AR;
 
  connector state connect1
  --> connect immediate with /stop_PVARP;
 
  region VRP:
 
  initial state idle
  --> connect with Vsense
  --> connect with Vpace;
 
  connector state connect
  --> waitVRP immediate with /start_VRP;
 
  state waitVRP
  --> idle with VRP_ex
  -->waitVRP with Vsense/VR;
 
  region LRI:
 
  initial state idle
  --> waitVRP with Vsense/start_LRI;
 
  state waitVRP
  --> waitLRI with VRP_ex;
 
  state waitLRI
  -->reinit with Vsense/reset_LRI
  -->reinit with Vpace/stop_LRI
  -->connect1 with LRI_ex;
  
  connector state connect1
  --> reinit immediate with /Vpace;stop_LRI;
  
  state reinit
  -->waitVRP immediate with /start_LRI;
 
 
  region URI:
 
  initial state idle
  --> connect with Vsense
  --> connect with Vpace;
 
  connector state connect
  --> waitVRP immediate with /start_URI;
 
 
  state waitVRP
  --> waitURI with VRP_ex;
 
  connector state connect1
  -->waitVRP with URI_ex/Vpace;
 
  state waitURI
  -->connect1 with AVI_ex
  --> connect with Vsense/stop_URI
  --> reinit2 immediate with URI_ex
  --> reinit with Vpace /stop_URI;
 

  state reinit2
  -->waitVRP with Vpace/start_URI
  -->waitVRP with Vsense/start_URI;  
 
  state reinit
  -->waitVRP immediate with /start_URI;
 

/*
* Timer timers
*
*
*
*
*
*
*/
  region AVI_timer:
 
  initial state idle
  -->counting with start_AVI;
 
  state counting
  -->idle with AVI_ex
  -->counting with /AVI_counting
  -->idle immediate with stop_AVI;
 
  region PVARP_timer:
 
  initial state idle
  -->counting with start_PVARP;
 
  state counting
  -->idle with PVARP_ex
  -->counting with /PVARP_counting
  -->idle with stop_PVARP;

   
  region AEI_timer:
 
  initial state idle
  -->counting with start_AEI;
 
  state counting
  -->idle with AEI_ex
  -->counting with /AEI_counting
  -->idle immediate with stop_AEI;
 
  region LRI_timer:
 
  initial state idle
  -->counting with start_LRI;

 connector state connect 
 --> counting with start_LRI;
 
  state counting
  -->counting with /LRI_counting
  -->idle  with LRI_ex
  -->connect immediate with stop_LRI
  -->idle with reset_LRI;

   
  region URI_timer:
 
  initial state idle
  -->counting with start_URI;
 
  state counting
  -->idle with URI_ex
  -->counting with /URI_counting
  -->idle immediate with stop_URI;
 
  region VRP_timer:
 
  initial state idle
  -->counting with start_VRP;
 
  state counting
  -->idle with VRP_ex
  -->counting with /VRP_counting
  -->idle with stop_VRP;

};

}