
Traffic_controller.elf:     file format elf32-littlenios2
Traffic_controller.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00013008 memsz 0x00013008 flags r-x
    LOAD off    0x00014028 vaddr 0x00813028 paddr 0x00814d3c align 2**12
         filesz 0x00001d14 memsz 0x00001d14 flags rw-
    LOAD off    0x00016a50 vaddr 0x00816a50 paddr 0x00816a50 align 2**12
         filesz 0x00000000 memsz 0x00000238 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012678  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000076c  008128bc  008128bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d14  00813028  00814d3c  00014028  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000238  00816a50  00816a50  00016a50  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00816c88  00816c88  00015d3c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  00015d3c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015d3c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000011c0  00000000  00000000  00015d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002d9b5  00000000  00000000  00016f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b893  00000000  00000000  000448d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000df85  00000000  00000000  00050168  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002988  00000000  00000000  0005e0f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004309  00000000  00000000  00060a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018b9f  00000000  00000000  00064d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007d920  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ac0  00000000  00000000  0007d980  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000830da  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  000830dd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000830e0  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000830e1  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000830e2  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000830e6  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000830ea  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000830ee  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000830f7  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00083100  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00083109  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  00083115  2**0
                  CONTENTS, READONLY
 30 .jdi          00004152  00000000  00000000  00083141  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006b318  00000000  00000000  00087293  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008128bc l    d  .rodata	00000000 .rodata
00813028 l    d  .rwdata	00000000 .rwdata
00816a50 l    d  .bss	00000000 .bss
00816c88 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Traffic_controller_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Traffic_Controller.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
00801c70 l     F .text	00000008 __fp_unlock
00801c84 l     F .text	0000019c __sinit.part.1
00801e20 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
0081305c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00803764 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00812be2 l     O .rodata	00000010 zeroes.4404
00805e18 l     F .text	000000bc __sbprintf
00812bf2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00806234 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
008138a8 l     O .rwdata	00000020 lc_ctype_charset
00813888 l     O .rwdata	00000020 lc_message_charset
008138c8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00812c20 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080a42c l     F .text	000000fc __sprint_r.part.0
00812d54 l     O .rodata	00000010 blanks.4348
00812d44 l     O .rodata	00000010 zeroes.4349
0080b9b8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0080e744 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080e850 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080e87c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080eae8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080ebc8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080ecb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
0080ee88 l     F .text	0000003c alt_get_errno
0080eec4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
0080f0dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00814d28 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
0080f4cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080f600 l     F .text	00000034 alt_dev_reg
00813aa8 l     O .rwdata	00001060 jtag_uart
00814b08 l     O .rwdata	00000120 lcd
00814c28 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080f92c l     F .text	0000020c altera_avalon_jtag_uart_irq
0080fb38 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00814d34 l     O .rwdata	00000004 colstart
00810170 l     F .text	000000b8 lcd_write_command
00810228 l     F .text	000000d8 lcd_write_data
00810300 l     F .text	000000d0 lcd_clear_screen
008103d0 l     F .text	000001ec lcd_repaint_screen
008105bc l     F .text	000000cc lcd_scroll_up
00810688 l     F .text	000002ac lcd_handle_escape
00810e0c l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0081104c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008112fc l     F .text	0000009c altera_avalon_uart_irq
00811398 l     F .text	000000e4 altera_avalon_uart_rxirq
0081147c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00811618 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00811830 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00811a60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00812110 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00812ea7 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00816ab4 g     O .bss	00000004 alt_instruction_exception_handler
00809ba0 g     F .text	00000074 _mprec_log10
00809c8c g     F .text	0000008c __any_on
00808804 g     F .text	00000054 _isatty_r
00812c2c g     O .rodata	00000028 __mprec_tinytens
0080edc4 g     F .text	0000007c alt_main
00800bd0 g     F .text	000001dc change_mode_routine
00803690 g     F .text	000000c0 _puts_r
00816b88 g     O .bss	00000100 alt_irq
00808934 g     F .text	00000060 _lseek_r
00816a74 g     O .bss	00000004 tick3
00814d3c g       *ABS*	00000000 __flash_rwdata_start
00807e68 g     F .text	000000ac __sflags
0080d284 g     F .text	00000088 .hidden __eqdf2
00816a64 g     O .bss	00000004 pedEW
00816c88 g       *ABS*	00000000 __alt_heap_start
008034ec g     F .text	0000003c printf
0080bd40 g     F .text	0000009c _wcrtomb_r
00803b08 g     F .text	0000005c __sseek
00801fc0 g     F .text	00000010 __sinit
00805ed4 g     F .text	00000140 __swbuf_r
00816a78 g     O .bss	00000004 lcd
00808858 g     F .text	0000007c _setlocale_r
00801e28 g     F .text	00000068 __sfmoreglue
0080ee64 g     F .text	00000024 __malloc_unlock
00808bc0 g     F .text	0000015c memmove
00801fa8 g     F .text	00000018 _cleanup
00808d1c g     F .text	000000a8 _Balloc
0080d30c g     F .text	000000dc .hidden __gtdf2
00812280 g     F .text	00000024 altera_nios2_gen2_irq_init
00816ae0 g     O .bss	00000018 timer_traffic_light
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
00800998 g     F .text	00000238 get_timeout_values
00802688 g     F .text	0000005c _fstat_r
00816a50 g     O .bss	00000004 currentIndex
00816a80 g     O .bss	00000004 errno
008039c8 g     F .text	00000014 __srget
00803a84 g     F .text	00000008 __seofread
00816aa4 g     O .bss	00000004 alt_argv
0081ccec g       *ABS*	00000000 _gp
00812250 g     F .text	00000030 usleep
00800310 g     F .text	00000208 tlc_timer_isr
00813928 g     O .rwdata	00000180 alt_fd_list
00811c00 g     F .text	00000090 alt_find_dev
00808a78 g     F .text	00000148 memcpy
00801c78 g     F .text	0000000c _cleanup_r
00801a38 g     F .text	000000dc .hidden __floatsidf
008121d4 g     F .text	0000007c alt_io_redirect
0080d3e8 g     F .text	000000f4 .hidden __ltdf2
00816a70 g     O .bss	00000004 tick2
00816a60 g     O .bss	00000004 pedNS
008128bc g       *ABS*	00000000 __DTOR_END__
00803750 g     F .text	00000014 puts
0081248c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0080a2dc g     F .text	00000074 __fpclassifyd
00809afc g     F .text	000000a4 __ratio
0080b99c g     F .text	0000001c __vfiprintf_internal
0080fd30 g     F .text	0000021c altera_avalon_jtag_uart_read
008034bc g     F .text	00000030 _printf_r
00801094 g     F .text	00000064 .hidden __udivsi3
0080eb24 g     F .text	000000a4 isatty
00812c7c g     O .rodata	000000c8 __mprec_tens
008088d4 g     F .text	0000000c __locale_charset
008123fc g     F .text	00000090 alt_icache_flush
00816a8c g     O .bss	00000004 __malloc_top_pad
00814d04 g     O .rwdata	00000004 __mb_cur_max
00808904 g     F .text	0000000c _localeconv_r
00809128 g     F .text	0000003c __i2b
00808348 g     F .text	000004bc __sfvwrite_r
008039dc g     F .text	00000054 _sbrk_r
00809d18 g     F .text	00000060 _read_r
00814d1c g     O .rwdata	00000004 alt_max_fd
00807abc g     F .text	000000f0 _fclose_r
00807e38 g     F .text	00000030 fflush
00816a88 g     O .bss	00000004 __malloc_max_sbrked_mem
0080e968 g     F .text	00000180 alt_irq_register
00801b78 g     F .text	00000070 _fgetc_r
0080c9d8 g     F .text	000008ac .hidden __adddf3
00814cf0 g     O .rwdata	00000004 carEntered
008098a4 g     F .text	0000010c __b2d
0080c4a0 g     F .text	00000538 .hidden __umoddi3
0080ecf0 g     F .text	000000d4 lseek
00814cf4 g     O .rwdata	00000004 _global_impure_ptr
00809d78 g     F .text	00000564 _realloc_r
00816c88 g       *ABS*	00000000 __bss_end
00812020 g     F .text	000000f0 alt_iic_isr_register
00813040 g     O .rwdata	0000001c trafficLight
0080f3c4 g     F .text	00000108 alt_tick
0080bf28 g     F .text	00000578 .hidden __udivdi3
0080bc9c g     F .text	00000024 _fputwc_r
00812c54 g     O .rodata	00000028 __mprec_bigtens
00808f0c g     F .text	00000104 __s2b
0080e570 g     F .text	000000a8 .hidden __floatunsidf
008095e4 g     F .text	00000060 __mcmp
00811250 g     F .text	000000ac altera_avalon_uart_init
00801fe0 g     F .text	00000018 __fp_lock_all
00811fd4 g     F .text	0000004c alt_ic_irq_enabled
00814cec g     O .rwdata	00000004 state
0080f328 g     F .text	0000009c alt_alarm_stop
00816a9c g     O .bss	00000004 alt_irq_active
00802228 g     F .text	00000444 _fseeko_r
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00813900 g     O .rwdata	00000028 alt_dev_null
00811a18 g     F .text	00000048 alt_dcache_flush_all
00809010 g     F .text	00000068 __hi0bits
0080e4f0 g     F .text	00000080 .hidden __fixdfsi
00814d3c g       *ABS*	00000000 __ram_rwdata_end
00814d14 g     O .rwdata	00000008 alt_dev_list
00802168 g     F .text	00000044 _fputc_r
0080f508 g     F .text	000000f8 write
00803528 g     F .text	000000a0 _putc_r
00813028 g       *ABS*	00000000 __ram_rodata_end
0080e8b8 g     F .text	000000b0 fstat
00802144 g     F .text	00000024 fprintf
0080d3e8 g     F .text	000000f4 .hidden __ledf2
0080935c g     F .text	00000140 __pow5mult
0080a540 g     F .text	0000145c ___vfiprintf_internal_r
00816a98 g     O .bss	00000004 __nlocale_changed
008010f8 g     F .text	00000058 .hidden __umodsi3
00816c88 g       *ABS*	00000000 end
00810934 g     F .text	000004d8 altera_avalon_lcd_16207_write
0080266c g     F .text	0000001c fseeko
00816a58 g     O .bss	00000004 mode
0081186c g     F .text	000001ac altera_avalon_uart_write
0080220c g     F .text	0000001c fseek
0080f86c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
008128bc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
008110c4 g     F .text	0000007c alt_avalon_timer_sc_init
008111a0 g     F .text	00000060 altera_avalon_uart_write_fd
00801b14 g     F .text	00000064 .hidden __clzsi2
00811200 g     F .text	00000050 altera_avalon_uart_close_fd
0080ff4c g     F .text	00000224 altera_avalon_jtag_uart_write
00801fd0 g     F .text	00000004 __sfp_lock_acquire
00808994 g     F .text	000000e4 memchr
00803c04 g     F .text	000021f8 ___vfprintf_internal_r
00808038 g     F .text	00000310 _free_r
008088e0 g     F .text	00000010 __locale_mb_cur_max
00812708 g     F .text	00000180 __call_exitprocs
00803954 g     F .text	00000074 __srget_r
00816a94 g     O .bss	00000004 __mlocale_changed
00814cfc g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00816aac g     O .bss	00000004 _alt_tick_rate
0080949c g     F .text	00000148 __lshift
00816ab0 g     O .bss	00000004 _alt_nticks
0080f118 g     F .text	000000fc read
0080f66c g     F .text	0000009c alt_sys_init
0080345c g     F .text	00000060 _open_r
008125f0 g     F .text	00000118 __register_exitproc
00816af8 g     O .bss	00000078 buffer
00809164 g     F .text	000001f8 __multiply
0080fbd8 g     F .text	00000068 altera_avalon_jtag_uart_close
00813028 g       *ABS*	00000000 __ram_rwdata_start
008128bc g       *ABS*	00000000 __ram_rodata_start
00816ab8 g     O .bss	00000028 __malloc_current_mallinfo
008099b0 g     F .text	0000014c __d2b
0080f708 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00811d98 g     F .text	000000a4 alt_get_fd
008122a4 g     F .text	00000158 alt_busy_sleep
008061e0 g     F .text	00000054 _close_r
00812574 g     F .text	0000007c memcmp
0080f7c8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00816c88 g       *ABS*	00000000 __alt_stack_base
0080f818 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0080286c g     F .text	000000cc _fwrite_r
0080608c g     F .text	00000154 __swsetup_r
00801150 g     F .text	000008e8 .hidden __divdf3
00801e90 g     F .text	00000118 __sfp
00809c14 g     F .text	00000078 __copybits
00813480 g     O .rwdata	00000408 __malloc_av_
00801fdc g     F .text	00000004 __sinit_lock_release
0080d4dc g     F .text	00000718 .hidden __muldf3
00803a30 g     F .text	00000054 __sread
00811c90 g     F .text	00000108 alt_find_file
00811a9c g     F .text	000000a4 alt_dev_llist_insert
0080ee40 g     F .text	00000024 __malloc_lock
0080211c g     F .text	00000028 _fprintf_r
0080f278 g     F .text	000000b0 sbrk
00807ddc g     F .text	0000005c _fflush_r
0080ba74 g     F .text	000000c4 _calloc_r
00802104 g     F .text	00000018 fopen
00816a50 g       *ABS*	00000000 __bss_start
00803334 g     F .text	00000128 memset
00800dac g     F .text	000001f0 main
00816aa8 g     O .bss	00000004 alt_envp
00816a84 g     O .bss	00000004 __malloc_max_total_mem
0080f768 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00806014 g     F .text	00000018 __swbuf
00810eb8 g     F .text	00000134 altera_avalon_lcd_16207_init
00803b64 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00807bac g     F .text	00000014 fclose
00806434 g     F .text	00001688 _dtoa_r
00802b28 g     F .text	0000080c _malloc_r
0080be9c g     F .text	00000030 __ascii_wctomb
00814d20 g     O .rwdata	00000004 alt_errno
00816a5c g     O .bss	00000004 swicthValue
00800518 g     F .text	00000358 NSEW_ped_isr
008026e4 g     F .text	000000c4 _fwalk
008035c8 g     F .text	000000c8 putc
00800f9c g     F .text	00000084 .hidden __divsi3
00807f14 g     F .text	00000124 _malloc_trim_r
008128bc g       *ABS*	00000000 __CTOR_END__
0080a350 g     F .text	000000dc strcmp
00816a6c g     O .bss	00000004 tick1
008128bc g       *ABS*	00000000 __flash_rodata_start
008128bc g       *ABS*	00000000 __DTOR_LIST__
0080d284 g     F .text	00000088 .hidden __nedf2
008002c8 g     F .text	00000048 tlc_camera_timer_isr
0080f634 g     F .text	00000038 alt_irq_init
0080f214 g     F .text	00000064 alt_release_fd
00801be8 g     F .text	00000088 fgetc
00812a96 g     O .rodata	00000100 .hidden __clz_tab
00816a90 g     O .bss	00000004 _PathLocale
00812528 g     F .text	00000014 atexit
0080602c g     F .text	00000060 _write_r
00816a68 g     O .bss	00000004 occupied
00808910 g     F .text	00000018 setlocale
00814cf8 g     O .rwdata	00000004 _impure_ptr
00816aa0 g     O .bss	00000004 alt_argc
00807bc0 g     F .text	0000021c __sflush_r
00811ba0 g     F .text	00000060 _do_dtors
008088fc g     F .text	00000008 __locale_cjk_lang
00802208 g     F .text	00000004 _fseek_r
00803780 g     F .text	000001d4 __srefill_r
00816a54 g     O .bss	00000004 nextIndex
00800020 g       .exceptions	00000000 alt_irq_entry
00809840 g     F .text	00000064 __ulp
00801ff8 g     F .text	00000018 __fp_unlock_all
00810fec g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008021ac g     F .text	0000005c fputc
00814d0c g     O .rwdata	00000008 alt_fs_list
00813028 g     O .rwdata	00000018 timerExpiresAt
00800020 g       *ABS*	00000000 __ram_exceptions_start
00808928 g     F .text	0000000c localeconv
00811e70 g     F .text	00000050 alt_ic_isr_register
00802938 g     F .text	00000034 fwrite
00814d3c g       *ABS*	00000000 _edata
00811140 g     F .text	00000060 altera_avalon_uart_read_fd
00800290 g     F .text	00000038 TS
00816c88 g       *ABS*	00000000 _end
00816b70 g     O .bss	00000018 timer_camera
0080bb38 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
0080fc40 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00811f48 g     F .text	0000008c alt_ic_irq_disable
00803a8c g     F .text	0000007c __swrite
00814d00 g     O .rwdata	00000004 __malloc_trim_threshold
008088f0 g     F .text	0000000c __locale_msgcharset
0081253c g     F .text	00000038 exit
008027a8 g     F .text	000000c4 _fwalk_reent
00809644 g     F .text	000001fc __mdiff
00801020 g     F .text	00000074 .hidden __modsi3
00814d38 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00816a7c g     O .bss	00000004 uart
00801fd4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00812da6 g     O .rodata	00000101 _ctype_
008115c4 g     F .text	00000054 altera_avalon_uart_close
00802010 g     F .text	000000f4 _fopen_r
00812888 g     F .text	00000034 _exit
0080e618 g     F .text	0000012c alt_alarm_start
0080296c g     F .text	000001bc __smakebuf_r
00803b6c g     F .text	00000098 strlen
0080ef88 g     F .text	00000154 open
0080d30c g     F .text	000000dc .hidden __gedf2
00814d08 g     O .rwdata	00000004 __wctomb
0080a528 g     F .text	00000018 __sprint_r
00811e3c g     F .text	00000034 alt_icache_flush_all
00800870 g     F .text	00000128 parse_input
00814d24 g     O .rwdata	00000004 alt_priority_mask
00811ec0 g     F .text	00000088 alt_ic_irq_enable
00805dfc g     F .text	0000001c __vfprintf_internal
00811654 g     F .text	000001dc altera_avalon_uart_read
0080becc g     F .text	0000005c _wctomb_r
0080dbf4 g     F .text	000008fc .hidden __subdf3
00809078 g     F .text	000000b0 __lo0bits
00814d2c g     O .rwdata	00000008 alt_alarm_list
00811b40 g     F .text	00000060 _do_ctors
0080bddc g     F .text	000000c0 wcrtomb
0080e780 g     F .text	000000d0 close
0080ec30 g     F .text	00000084 alt_load
0080bcc0 g     F .text	00000080 fputwc
00801fd8 g     F .text	00000004 __sinit_lock_acquire
00808dec g     F .text	00000120 __multadd
00808dc4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109ae204 	addi	r2,r2,27528
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109ae204 	addi	r2,r2,27528
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a77217 	ldw	r2,-25144(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a77217 	ldw	r2,-25144(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b33b14 	ori	gp,gp,52460
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	109a9414 	ori	r2,r2,27216

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18db2214 	ori	r3,r3,27784

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	080ec300 	call	80ec30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	080edc40 	call	80edc4 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <TS>:
/*
 * This method ensures that only one ISR has access
 * to variables "pedNS" or "pedEW" at a time
 */
void TS(int *code)
{
  800290:	defffe04 	addi	sp,sp,-8
  800294:	df000115 	stw	fp,4(sp)
  800298:	df000104 	addi	fp,sp,4
  80029c:	e13fff15 	stw	r4,-4(fp)
	*code = occupied;
  8002a0:	d0e75f17 	ldw	r3,-25220(gp)
  8002a4:	e0bfff17 	ldw	r2,-4(fp)
  8002a8:	10c00015 	stw	r3,0(r2)
	occupied = 1;
  8002ac:	00800044 	movi	r2,1
  8002b0:	d0a75f15 	stw	r2,-25220(gp)
}
  8002b4:	0001883a 	nop
  8002b8:	e037883a 	mov	sp,fp
  8002bc:	df000017 	ldw	fp,0(sp)
  8002c0:	dec00104 	addi	sp,sp,4
  8002c4:	f800283a 	ret

008002c8 <tlc_camera_timer_isr>:

/*
 * this timer isr trigger after 2 second when a car enters the intersection on yellow light.
 */
alt_u32 tlc_camera_timer_isr(void* context)
{
  8002c8:	defffd04 	addi	sp,sp,-12
  8002cc:	dfc00215 	stw	ra,8(sp)
  8002d0:	df000115 	stw	fp,4(sp)
  8002d4:	df000104 	addi	fp,sp,4
  8002d8:	e13fff15 	stw	r4,-4(fp)
	fprintf(uart,"Shot taken\n\r");
  8002dc:	d0a76417 	ldw	r2,-25200(gp)
  8002e0:	100f883a 	mov	r7,r2
  8002e4:	01800304 	movi	r6,12
  8002e8:	01400044 	movi	r5,1
  8002ec:	01002074 	movhi	r4,129
  8002f0:	210a2f04 	addi	r4,r4,10428
  8002f4:	08029380 	call	802938 <fwrite>
	return 0;
  8002f8:	0005883a 	mov	r2,zero
}
  8002fc:	e037883a 	mov	sp,fp
  800300:	dfc00117 	ldw	ra,4(sp)
  800304:	df000017 	ldw	fp,0(sp)
  800308:	dec00204 	addi	sp,sp,8
  80030c:	f800283a 	ret

00800310 <tlc_timer_isr>:

/*
 * this timer isr cycles though the fsm states of the traffic light
 */
alt_u32 tlc_timer_isr(void* context)
{
  800310:	defffa04 	addi	sp,sp,-24
  800314:	dfc00515 	stw	ra,20(sp)
  800318:	df000415 	stw	fp,16(sp)
  80031c:	df000404 	addi	fp,sp,16
  800320:	e13fff15 	stw	r4,-4(fp)
	int code;
	//------------------------------- Mode 1 starts
	currentIndex = nextIndex;
  800324:	d0a75a17 	ldw	r2,-25240(gp)
  800328:	d0a75915 	stw	r2,-25244(gp)
	nextIndex = (++nextIndex)%7; // cycles through the traffic light fsm states
  80032c:	d0a75a17 	ldw	r2,-25240(gp)
  800330:	10800044 	addi	r2,r2,1
  800334:	d0a75a15 	stw	r2,-25240(gp)
  800338:	d0a75a17 	ldw	r2,-25240(gp)
  80033c:	014001c4 	movi	r5,7
  800340:	1009883a 	mov	r4,r2
  800344:	08010200 	call	801020 <__modsi3>
  800348:	d0a75a15 	stw	r2,-25240(gp)
	//sets and clears green leds for correct EW & NS traffic lights
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, trafficLight[currentIndex]);
  80034c:	d0e75917 	ldw	r3,-25244(gp)
  800350:	00802074 	movhi	r2,129
  800354:	108c1004 	addi	r2,r2,12352
  800358:	18c7883a 	add	r3,r3,r3
  80035c:	18c7883a 	add	r3,r3,r3
  800360:	10c5883a 	add	r2,r2,r3
  800364:	10c00017 	ldw	r3,0(r2)
  800368:	00804434 	movhi	r2,272
  80036c:	10841c04 	addi	r2,r2,4208
  800370:	10c00035 	stwio	r3,0(r2)
	//------------------------------- Mode 1 end

	//******************************** Mode 2 starts
	// enable mode 2 capabilities when the mode is 2,3 or 4
	if((mode == 0b0010) || (mode == 0b0100) || (mode == 0b1000))
  800374:	d0a75b17 	ldw	r2,-25236(gp)
  800378:	108000a0 	cmpeqi	r2,r2,2
  80037c:	1000061e 	bne	r2,zero,800398 <tlc_timer_isr+0x88>
  800380:	d0a75b17 	ldw	r2,-25236(gp)
  800384:	10800120 	cmpeqi	r2,r2,4
  800388:	1000031e 	bne	r2,zero,800398 <tlc_timer_isr+0x88>
  80038c:	d0a75b17 	ldw	r2,-25236(gp)
  800390:	10800218 	cmpnei	r2,r2,8
  800394:	10003d1e 	bne	r2,zero,80048c <tlc_timer_isr+0x17c>
	{

		if(currentIndex == 1 && pedNS == 1) // handles the NS pedestrian lights
  800398:	d0a75917 	ldw	r2,-25244(gp)
  80039c:	10800058 	cmpnei	r2,r2,1
  8003a0:	10001c1e 	bne	r2,zero,800414 <tlc_timer_isr+0x104>
  8003a4:	d0a75d17 	ldw	r2,-25228(gp)
  8003a8:	10800058 	cmpnei	r2,r2,1
  8003ac:	1000191e 	bne	r2,zero,800414 <tlc_timer_isr+0x104>
		{

			// to ensure no race condition when accessing pedNS
			TS(&code);
  8003b0:	e0bffe04 	addi	r2,fp,-8
  8003b4:	1009883a 	mov	r4,r2
  8003b8:	08002900 	call	800290 <TS>
			while(code)
  8003bc:	00000306 	br	8003cc <tlc_timer_isr+0xbc>
			{
				TS(&code);
  8003c0:	e0bffe04 	addi	r2,fp,-8
  8003c4:	1009883a 	mov	r4,r2
  8003c8:	08002900 	call	800290 <TS>
		if(currentIndex == 1 && pedNS == 1) // handles the NS pedestrian lights
		{

			// to ensure no race condition when accessing pedNS
			TS(&code);
			while(code)
  8003cc:	e0bffe17 	ldw	r2,-8(fp)
  8003d0:	103ffb1e 	bne	r2,zero,8003c0 <__alt_mem_onchip_mem+0xff7803c0>
			{
				TS(&code);
			}
			pedNS = 0;
  8003d4:	d0275d15 	stw	zero,-25228(gp)
			occupied = 0; // release access to pedNS
  8003d8:	d0275f15 	stw	zero,-25220(gp)


			int redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  8003dc:	00804434 	movhi	r2,272
  8003e0:	10842004 	addi	r2,r2,4224
  8003e4:	10800037 	ldwio	r2,0(r2)
  8003e8:	e0bffc15 	stw	r2,-16(fp)
			//clears red led - pedestrian handled
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, redLEDs & 0b10);
  8003ec:	e0bffc17 	ldw	r2,-16(fp)
  8003f0:	10c0008c 	andi	r3,r2,2
  8003f4:	00804434 	movhi	r2,272
  8003f8:	10842004 	addi	r2,r2,4224
  8003fc:	10c00035 	stwio	r3,0(r2)
			//set green led - NS pedestrian green lights and NS green and EW red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, NSPED_GREEN);
  800400:	00c01844 	movi	r3,97
  800404:	00804434 	movhi	r2,272
  800408:	10841c04 	addi	r2,r2,4208
  80040c:	10c00035 	stwio	r3,0(r2)
	// enable mode 2 capabilities when the mode is 2,3 or 4
	if((mode == 0b0010) || (mode == 0b0100) || (mode == 0b1000))
	{

		if(currentIndex == 1 && pedNS == 1) // handles the NS pedestrian lights
		{
  800410:	00001e06 	br	80048c <tlc_timer_isr+0x17c>
			//clears red led - pedestrian handled
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, redLEDs & 0b10);
			//set green led - NS pedestrian green lights and NS green and EW red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, NSPED_GREEN);
		}
		else if(currentIndex == 4 && pedEW == 1)// handles the NS pedestrian lights
  800414:	d0a75917 	ldw	r2,-25244(gp)
  800418:	10800118 	cmpnei	r2,r2,4
  80041c:	10001b1e 	bne	r2,zero,80048c <tlc_timer_isr+0x17c>
  800420:	d0a75e17 	ldw	r2,-25224(gp)
  800424:	10800058 	cmpnei	r2,r2,1
  800428:	1000181e 	bne	r2,zero,80048c <tlc_timer_isr+0x17c>
		{
			// to ensure no race condition when accessing pedEW
			TS(&code);
  80042c:	e0bffe04 	addi	r2,fp,-8
  800430:	1009883a 	mov	r4,r2
  800434:	08002900 	call	800290 <TS>
			while(code)
  800438:	00000306 	br	800448 <tlc_timer_isr+0x138>
			{
				TS(&code);
  80043c:	e0bffe04 	addi	r2,fp,-8
  800440:	1009883a 	mov	r4,r2
  800444:	08002900 	call	800290 <TS>
		}
		else if(currentIndex == 4 && pedEW == 1)// handles the NS pedestrian lights
		{
			// to ensure no race condition when accessing pedEW
			TS(&code);
			while(code)
  800448:	e0bffe17 	ldw	r2,-8(fp)
  80044c:	103ffb1e 	bne	r2,zero,80043c <__alt_mem_onchip_mem+0xff78043c>
			{
				TS(&code);
			}
			pedEW = 0;
  800450:	d0275e15 	stw	zero,-25224(gp)
			occupied = 0; // release access to pedEW
  800454:	d0275f15 	stw	zero,-25220(gp)


			int redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
  800458:	00804434 	movhi	r2,272
  80045c:	10842004 	addi	r2,r2,4224
  800460:	10800037 	ldwio	r2,0(r2)
  800464:	e0bffd15 	stw	r2,-12(fp)
			//clears red led - pedestrian handled
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, redLEDs & 0b01);
  800468:	e0bffd17 	ldw	r2,-12(fp)
  80046c:	10c0004c 	andi	r3,r2,1
  800470:	00804434 	movhi	r2,272
  800474:	10842004 	addi	r2,r2,4224
  800478:	10c00035 	stwio	r3,0(r2)
			//set green led - EW pedestrian green lights and EW green and NS red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, EWPED_GREEN);
  80047c:	00c02304 	movi	r3,140
  800480:	00804434 	movhi	r2,272
  800484:	10841c04 	addi	r2,r2,4208
  800488:	10c00035 	stwio	r3,0(r2)
		}
	}
	//********************************** Mode 2 end

	//---------------------------------- Mode 4 starts
	if(carEntered == 2 && (currentIndex == 2 || currentIndex == 5))
  80048c:	d0a00117 	ldw	r2,-32764(gp)
  800490:	10800098 	cmpnei	r2,r2,2
  800494:	1000141e 	bne	r2,zero,8004e8 <tlc_timer_isr+0x1d8>
  800498:	d0a75917 	ldw	r2,-25244(gp)
  80049c:	108000a0 	cmpeqi	r2,r2,2
  8004a0:	1000031e 	bne	r2,zero,8004b0 <tlc_timer_isr+0x1a0>
  8004a4:	d0a75917 	ldw	r2,-25244(gp)
  8004a8:	10800158 	cmpnei	r2,r2,5
  8004ac:	10000e1e 	bne	r2,zero,8004e8 <tlc_timer_isr+0x1d8>
	{
		// start a 2 sec timer before taking a shot
		alt_alarm_start(&timer_camera, 2000, tlc_camera_timer_isr, NULL);
  8004b0:	000f883a 	mov	r7,zero
  8004b4:	01802034 	movhi	r6,128
  8004b8:	3180b204 	addi	r6,r6,712
  8004bc:	0141f404 	movi	r5,2000
  8004c0:	01002074 	movhi	r4,129
  8004c4:	211adc04 	addi	r4,r4,27504
  8004c8:	080e6180 	call	80e618 <alt_alarm_start>
		fprintf(uart,"Camera activated\n\r");
  8004cc:	d0a76417 	ldw	r2,-25200(gp)
  8004d0:	100f883a 	mov	r7,r2
  8004d4:	01800484 	movi	r6,18
  8004d8:	01400044 	movi	r5,1
  8004dc:	01002074 	movhi	r4,129
  8004e0:	210a3304 	addi	r4,r4,10444
  8004e4:	08029380 	call	802938 <fwrite>
	}
	//---------------------------------- Mode 4 ends
	return timerExpiresAt[currentIndex];
  8004e8:	d0e75917 	ldw	r3,-25244(gp)
  8004ec:	00802074 	movhi	r2,129
  8004f0:	108c0a04 	addi	r2,r2,12328
  8004f4:	18c7883a 	add	r3,r3,r3
  8004f8:	18c7883a 	add	r3,r3,r3
  8004fc:	10c5883a 	add	r2,r2,r3
  800500:	10800017 	ldw	r2,0(r2)
}
  800504:	e037883a 	mov	sp,fp
  800508:	dfc00117 	ldw	ra,4(sp)
  80050c:	df000017 	ldw	fp,0(sp)
  800510:	dec00204 	addi	sp,sp,8
  800514:	f800283a 	ret

00800518 <NSEW_ped_isr>:
/*
 * handles pedestrian buttons(i.e buttons 0 and 1) pressed.
 * also handles car entering and leaving functionality(i.e button 2 being pressed)for mode 4.
 */
void NSEW_ped_isr (void* context, alt_u32 ID)
{
  800518:	defff904 	addi	sp,sp,-28
  80051c:	dfc00615 	stw	ra,24(sp)
  800520:	df000515 	stw	fp,20(sp)
  800524:	dc000415 	stw	r16,16(sp)
  800528:	df000504 	addi	fp,sp,20
  80052c:	e13ffd15 	stw	r4,-12(fp)
  800530:	e17ffe15 	stw	r5,-8(fp)
	int code;
	int buttonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  800534:	00804434 	movhi	r2,272
  800538:	10842804 	addi	r2,r2,4256
  80053c:	10800037 	ldwio	r2,0(r2)
  800540:	e0bffb15 	stw	r2,-20(fp)

	if(buttonsValue == 0b110)// NS ped pressed
  800544:	e0bffb17 	ldw	r2,-20(fp)
  800548:	10800198 	cmpnei	r2,r2,6
  80054c:	1000141e 	bne	r2,zero,8005a0 <NSEW_ped_isr+0x88>
	{
		// to ensure no race condition when accessing pedEW
		TS(&code);
  800550:	e0bffc04 	addi	r2,fp,-16
  800554:	1009883a 	mov	r4,r2
  800558:	08002900 	call	800290 <TS>
		while(code)
  80055c:	00000306 	br	80056c <NSEW_ped_isr+0x54>
		{
			TS(&code);
  800560:	e0bffc04 	addi	r2,fp,-16
  800564:	1009883a 	mov	r4,r2
  800568:	08002900 	call	800290 <TS>

	if(buttonsValue == 0b110)// NS ped pressed
	{
		// to ensure no race condition when accessing pedEW
		TS(&code);
		while(code)
  80056c:	e0bffc17 	ldw	r2,-16(fp)
  800570:	103ffb1e 	bne	r2,zero,800560 <__alt_mem_onchip_mem+0xff780560>
		{
			TS(&code);
		}
		pedNS = 1;
  800574:	00800044 	movi	r2,1
  800578:	d0a75d15 	stw	r2,-25228(gp)
		occupied = 0; // release access to pedNS
  80057c:	d0275f15 	stw	zero,-25220(gp)

		// set led to acknowledged NS ped pressed
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b01);
  800580:	00804434 	movhi	r2,272
  800584:	10842004 	addi	r2,r2,4224
  800588:	10800037 	ldwio	r2,0(r2)
  80058c:	10c00054 	ori	r3,r2,1
  800590:	00804434 	movhi	r2,272
  800594:	10842004 	addi	r2,r2,4224
  800598:	10c00035 	stwio	r3,0(r2)
  80059c:	0000a906 	br	800844 <NSEW_ped_isr+0x32c>

	}
	else if(buttonsValue == 0b101)// EW ped pressed
  8005a0:	e0bffb17 	ldw	r2,-20(fp)
  8005a4:	10800158 	cmpnei	r2,r2,5
  8005a8:	1000141e 	bne	r2,zero,8005fc <NSEW_ped_isr+0xe4>
	{
		// to ensure no race condition when accessing pedEW
		TS(&code);
  8005ac:	e0bffc04 	addi	r2,fp,-16
  8005b0:	1009883a 	mov	r4,r2
  8005b4:	08002900 	call	800290 <TS>
		while(code)
  8005b8:	00000306 	br	8005c8 <NSEW_ped_isr+0xb0>
		{
			TS(&code);
  8005bc:	e0bffc04 	addi	r2,fp,-16
  8005c0:	1009883a 	mov	r4,r2
  8005c4:	08002900 	call	800290 <TS>
	}
	else if(buttonsValue == 0b101)// EW ped pressed
	{
		// to ensure no race condition when accessing pedEW
		TS(&code);
		while(code)
  8005c8:	e0bffc17 	ldw	r2,-16(fp)
  8005cc:	103ffb1e 	bne	r2,zero,8005bc <__alt_mem_onchip_mem+0xff7805bc>
		{
			TS(&code);
		}
		pedEW = 1;
  8005d0:	00800044 	movi	r2,1
  8005d4:	d0a75e15 	stw	r2,-25224(gp)
		occupied = 0; // release access to pedEW
  8005d8:	d0275f15 	stw	zero,-25220(gp)

		// set led to acknowledged EW ped pressed
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b10);
  8005dc:	00804434 	movhi	r2,272
  8005e0:	10842004 	addi	r2,r2,4224
  8005e4:	10800037 	ldwio	r2,0(r2)
  8005e8:	10c00094 	ori	r3,r2,2
  8005ec:	00804434 	movhi	r2,272
  8005f0:	10842004 	addi	r2,r2,4224
  8005f4:	10c00035 	stwio	r3,0(r2)
  8005f8:	00009206 	br	800844 <NSEW_ped_isr+0x32c>

	}
	else if(buttonsValue == 0b100)// NS & EW peds pressed
  8005fc:	e0bffb17 	ldw	r2,-20(fp)
  800600:	10800118 	cmpnei	r2,r2,4
  800604:	1000161e 	bne	r2,zero,800660 <NSEW_ped_isr+0x148>
	{
			// to ensure no race condition when accessing pedEW
			TS(&code);
  800608:	e0bffc04 	addi	r2,fp,-16
  80060c:	1009883a 	mov	r4,r2
  800610:	08002900 	call	800290 <TS>
			while(code)
  800614:	00000306 	br	800624 <NSEW_ped_isr+0x10c>
			{
				TS(&code);
  800618:	e0bffc04 	addi	r2,fp,-16
  80061c:	1009883a 	mov	r4,r2
  800620:	08002900 	call	800290 <TS>
	}
	else if(buttonsValue == 0b100)// NS & EW peds pressed
	{
			// to ensure no race condition when accessing pedEW
			TS(&code);
			while(code)
  800624:	e0bffc17 	ldw	r2,-16(fp)
  800628:	103ffb1e 	bne	r2,zero,800618 <__alt_mem_onchip_mem+0xff780618>
			{
				TS(&code);
			}
			pedNS = 1;
  80062c:	00800044 	movi	r2,1
  800630:	d0a75d15 	stw	r2,-25228(gp)
			pedEW = 1;
  800634:	00800044 	movi	r2,1
  800638:	d0a75e15 	stw	r2,-25224(gp)
			occupied = 0; // release access to pedEW and pedNS
  80063c:	d0275f15 	stw	zero,-25220(gp)

			// set led to acknowledged NS & EW ped pressed
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b11);
  800640:	00804434 	movhi	r2,272
  800644:	10842004 	addi	r2,r2,4224
  800648:	10800037 	ldwio	r2,0(r2)
  80064c:	10c000d4 	ori	r3,r2,3
  800650:	00804434 	movhi	r2,272
  800654:	10842004 	addi	r2,r2,4224
  800658:	10c00035 	stwio	r3,0(r2)
  80065c:	00007906 	br	800844 <NSEW_ped_isr+0x32c>

	}
	// button 2 pressed - car entering or leaving 0b010
	else if((buttonsValue == 0b011 || buttonsValue == 0b001 || buttonsValue == 0b000 || buttonsValue == 0b010 )
  800660:	e0bffb17 	ldw	r2,-20(fp)
  800664:	108000e0 	cmpeqi	r2,r2,3
  800668:	1000081e 	bne	r2,zero,80068c <NSEW_ped_isr+0x174>
  80066c:	e0bffb17 	ldw	r2,-20(fp)
  800670:	10800060 	cmpeqi	r2,r2,1
  800674:	1000051e 	bne	r2,zero,80068c <NSEW_ped_isr+0x174>
  800678:	e0bffb17 	ldw	r2,-20(fp)
  80067c:	10000326 	beq	r2,zero,80068c <NSEW_ped_isr+0x174>
  800680:	e0bffb17 	ldw	r2,-20(fp)
  800684:	10800098 	cmpnei	r2,r2,2
  800688:	10006e1e 	bne	r2,zero,800844 <NSEW_ped_isr+0x32c>
			&& mode == 0b1000)
  80068c:	d0a75b17 	ldw	r2,-25236(gp)
  800690:	10800218 	cmpnei	r2,r2,8
  800694:	10006b1e 	bne	r2,zero,800844 <NSEW_ped_isr+0x32c>
	{
		if(carEntered == 1) // handles car entering
  800698:	d0a00117 	ldw	r2,-32764(gp)
  80069c:	10800058 	cmpnei	r2,r2,1
  8006a0:	10003c1e 	bne	r2,zero,800794 <NSEW_ped_isr+0x27c>
		{
			// turns on red led to indicate car entering
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b100);
  8006a4:	00804434 	movhi	r2,272
  8006a8:	10842004 	addi	r2,r2,4224
  8006ac:	10800037 	ldwio	r2,0(r2)
  8006b0:	10c00114 	ori	r3,r2,4
  8006b4:	00804434 	movhi	r2,272
  8006b8:	10842004 	addi	r2,r2,4224
  8006bc:	10c00035 	stwio	r3,0(r2)
			if(currentIndex == 2 || currentIndex == 5) // handles car entering on Yellow light
  8006c0:	d0a75917 	ldw	r2,-25244(gp)
  8006c4:	108000a0 	cmpeqi	r2,r2,2
  8006c8:	1000031e 	bne	r2,zero,8006d8 <NSEW_ped_isr+0x1c0>
  8006cc:	d0a75917 	ldw	r2,-25244(gp)
  8006d0:	10800158 	cmpnei	r2,r2,5
  8006d4:	1000131e 	bne	r2,zero,800724 <NSEW_ped_isr+0x20c>
			{
				// start a 2 sec timer before taking a shot
				alt_alarm_start(&timer_camera, 2000, tlc_camera_timer_isr, NULL);
  8006d8:	000f883a 	mov	r7,zero
  8006dc:	01802034 	movhi	r6,128
  8006e0:	3180b204 	addi	r6,r6,712
  8006e4:	0141f404 	movi	r5,2000
  8006e8:	01002074 	movhi	r4,129
  8006ec:	211adc04 	addi	r4,r4,27504
  8006f0:	080e6180 	call	80e618 <alt_alarm_start>
				fprintf(uart,"Camera activated\n\r");
  8006f4:	d0a76417 	ldw	r2,-25200(gp)
  8006f8:	100f883a 	mov	r7,r2
  8006fc:	01800484 	movi	r6,18
  800700:	01400044 	movi	r5,1
  800704:	01002074 	movhi	r4,129
  800708:	210a3304 	addi	r4,r4,10444
  80070c:	08029380 	call	802938 <fwrite>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  800710:	d0a77117 	ldw	r2,-25148(gp)
				tick1 = alt_nticks(); // records time when the car enters
  800714:	d0a76015 	stw	r2,-25216(gp)
				carEntered = 2;
  800718:	00800084 	movi	r2,2
  80071c:	d0a00115 	stw	r2,-32764(gp)
  800720:	00004806 	br	800844 <NSEW_ped_isr+0x32c>
			}
			else if(currentIndex == 1 || currentIndex == 4) // handles car entering on Green light
  800724:	d0a75917 	ldw	r2,-25244(gp)
  800728:	10800060 	cmpeqi	r2,r2,1
  80072c:	1000031e 	bne	r2,zero,80073c <NSEW_ped_isr+0x224>
  800730:	d0a75917 	ldw	r2,-25244(gp)
  800734:	10800118 	cmpnei	r2,r2,4
  800738:	1000051e 	bne	r2,zero,800750 <NSEW_ped_isr+0x238>
  80073c:	d0a77117 	ldw	r2,-25148(gp)
			{
				tick1 = alt_nticks(); // records time when the car enters
  800740:	d0a76015 	stw	r2,-25216(gp)
				carEntered = 2;
  800744:	00800084 	movi	r2,2
  800748:	d0a00115 	stw	r2,-32764(gp)
  80074c:	00003d06 	br	800844 <NSEW_ped_isr+0x32c>
			}
			else if(currentIndex == 0 || currentIndex == 3)// handles car entering on Red light
  800750:	d0a75917 	ldw	r2,-25244(gp)
  800754:	10000326 	beq	r2,zero,800764 <NSEW_ped_isr+0x24c>
  800758:	d0a75917 	ldw	r2,-25244(gp)
  80075c:	108000d8 	cmpnei	r2,r2,3
  800760:	1000381e 	bne	r2,zero,800844 <NSEW_ped_isr+0x32c>
			{
				fprintf(uart,"Shot taken\n\r");
  800764:	d0a76417 	ldw	r2,-25200(gp)
  800768:	100f883a 	mov	r7,r2
  80076c:	01800304 	movi	r6,12
  800770:	01400044 	movi	r5,1
  800774:	01002074 	movhi	r4,129
  800778:	210a2f04 	addi	r4,r4,10428
  80077c:	08029380 	call	802938 <fwrite>
  800780:	d0a77117 	ldw	r2,-25148(gp)
				tick1 = alt_nticks(); // records time when the car enters
  800784:	d0a76015 	stw	r2,-25216(gp)
				carEntered = 2;
  800788:	00800084 	movi	r2,2
  80078c:	d0a00115 	stw	r2,-32764(gp)
  800790:	00002c06 	br	800844 <NSEW_ped_isr+0x32c>
			}

		}
		else if(carEntered == 2) // handles car leaving
  800794:	d0a00117 	ldw	r2,-32764(gp)
  800798:	10800098 	cmpnei	r2,r2,2
  80079c:	1000291e 	bne	r2,zero,800844 <NSEW_ped_isr+0x32c>
		{
			//clears red led - pedestrian handled
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) & ~(1<<2));
  8007a0:	00804434 	movhi	r2,272
  8007a4:	10842004 	addi	r2,r2,4224
  8007a8:	10c00037 	ldwio	r3,0(r2)
  8007ac:	00bffec4 	movi	r2,-5
  8007b0:	1886703a 	and	r3,r3,r2
  8007b4:	00804434 	movhi	r2,272
  8007b8:	10842004 	addi	r2,r2,4224
  8007bc:	10c00035 	stwio	r3,0(r2)
			alt_alarm_stop(&timer_camera); // stop timer as car leaves
  8007c0:	01002074 	movhi	r4,129
  8007c4:	211adc04 	addi	r4,r4,27504
  8007c8:	080f3280 	call	80f328 <alt_alarm_stop>
  8007cc:	d0a77117 	ldw	r2,-25148(gp)
			tick2 = alt_nticks(); // records when the car leaves
  8007d0:	d0a76115 	stw	r2,-25212(gp)
			tick3 = tick2 - tick1;
  8007d4:	d0e76117 	ldw	r3,-25212(gp)
  8007d8:	d0a76017 	ldw	r2,-25216(gp)
  8007dc:	1885c83a 	sub	r2,r3,r2
  8007e0:	d0a76215 	stw	r2,-25208(gp)
			carEntered = 1;
  8007e4:	00800044 	movi	r2,1
  8007e8:	d0a00115 	stw	r2,-32764(gp)
			fprintf(uart,"Vehicle left | Time in the intersection:%.4f\n\r",(tick3*1.0)/1000);
  8007ec:	d4276417 	ldw	r16,-25200(gp)
  8007f0:	d0a76217 	ldw	r2,-25208(gp)
  8007f4:	1009883a 	mov	r4,r2
  8007f8:	0801a380 	call	801a38 <__floatsidf>
  8007fc:	1011883a 	mov	r8,r2
  800800:	1813883a 	mov	r9,r3
  800804:	000d883a 	mov	r6,zero
  800808:	01d023f4 	movhi	r7,16527
  80080c:	39d00004 	addi	r7,r7,16384
  800810:	4009883a 	mov	r4,r8
  800814:	480b883a 	mov	r5,r9
  800818:	08011500 	call	801150 <__divdf3>
  80081c:	1009883a 	mov	r4,r2
  800820:	180b883a 	mov	r5,r3
  800824:	2005883a 	mov	r2,r4
  800828:	2807883a 	mov	r3,r5
  80082c:	100d883a 	mov	r6,r2
  800830:	180f883a 	mov	r7,r3
  800834:	01402074 	movhi	r5,129
  800838:	294a3804 	addi	r5,r5,10464
  80083c:	8009883a 	mov	r4,r16
  800840:	08021440 	call	802144 <fprintf>
		}
	}

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800844:	0007883a 	mov	r3,zero
  800848:	00804434 	movhi	r2,272
  80084c:	10842b04 	addi	r2,r2,4268
  800850:	10c00035 	stwio	r3,0(r2)
}
  800854:	0001883a 	nop
  800858:	e6ffff04 	addi	sp,fp,-4
  80085c:	dfc00217 	ldw	ra,8(sp)
  800860:	df000117 	ldw	fp,4(sp)
  800864:	dc000017 	ldw	r16,0(sp)
  800868:	dec00304 	addi	sp,sp,12
  80086c:	f800283a 	ret

00800870 <parse_input>:

/*
 * Parses input buffer array values from ascii to numeric values.
 */
void parse_input(int indx, int buffer[])
{
  800870:	defff904 	addi	sp,sp,-28
  800874:	df000615 	stw	fp,24(sp)
  800878:	df000604 	addi	fp,sp,24
  80087c:	e13ffe15 	stw	r4,-8(fp)
  800880:	e17fff15 	stw	r5,-4(fp)
	int multiple = 1;
  800884:	00800044 	movi	r2,1
  800888:	e0bffa15 	stw	r2,-24(fp)
	int value = 0;
  80088c:	e03ffb15 	stw	zero,-20(fp)
	int newTimeoutIndx = 5;
  800890:	00800144 	movi	r2,5
  800894:	e0bffc15 	stw	r2,-16(fp)
	for(int i = indx-2; i >= 0 ; i--) // start at the last value of input buffer
  800898:	e0bffe17 	ldw	r2,-8(fp)
  80089c:	10bfff84 	addi	r2,r2,-2
  8008a0:	e0bffd15 	stw	r2,-12(fp)
  8008a4:	00003506 	br	80097c <parse_input+0x10c>
	{

		if(buffer[i] == 44) // if buffer value is "," then total set value of "value" to a new timeout
  8008a8:	e0bffd17 	ldw	r2,-12(fp)
  8008ac:	1085883a 	add	r2,r2,r2
  8008b0:	1085883a 	add	r2,r2,r2
  8008b4:	1007883a 	mov	r3,r2
  8008b8:	e0bfff17 	ldw	r2,-4(fp)
  8008bc:	10c5883a 	add	r2,r2,r3
  8008c0:	10800017 	ldw	r2,0(r2)
  8008c4:	10800b18 	cmpnei	r2,r2,44
  8008c8:	10000f1e 	bne	r2,zero,800908 <parse_input+0x98>
		{
			  timerExpiresAt[newTimeoutIndx] = value;
  8008cc:	00802074 	movhi	r2,129
  8008d0:	108c0a04 	addi	r2,r2,12328
  8008d4:	e0fffc17 	ldw	r3,-16(fp)
  8008d8:	18c7883a 	add	r3,r3,r3
  8008dc:	18c7883a 	add	r3,r3,r3
  8008e0:	10c5883a 	add	r2,r2,r3
  8008e4:	e0fffb17 	ldw	r3,-20(fp)
  8008e8:	10c00015 	stw	r3,0(r2)
			  newTimeoutIndx--;
  8008ec:	e0bffc17 	ldw	r2,-16(fp)
  8008f0:	10bfffc4 	addi	r2,r2,-1
  8008f4:	e0bffc15 	stw	r2,-16(fp)
			  multiple = 1;
  8008f8:	00800044 	movi	r2,1
  8008fc:	e0bffa15 	stw	r2,-24(fp)
			  value = 0;
  800900:	e03ffb15 	stw	zero,-20(fp)
  800904:	00001a06 	br	800970 <parse_input+0x100>
		}
	    else
	    {
	    	  // get the numerical value of the buffer at index "i" and multiplies the place value
		      value =  value + multiple*(buffer[i] - 48);
  800908:	e0bffd17 	ldw	r2,-12(fp)
  80090c:	1085883a 	add	r2,r2,r2
  800910:	1085883a 	add	r2,r2,r2
  800914:	1007883a 	mov	r3,r2
  800918:	e0bfff17 	ldw	r2,-4(fp)
  80091c:	10c5883a 	add	r2,r2,r3
  800920:	10800017 	ldw	r2,0(r2)
  800924:	10fff404 	addi	r3,r2,-48
  800928:	e0bffa17 	ldw	r2,-24(fp)
  80092c:	1885383a 	mul	r2,r3,r2
  800930:	e0fffb17 	ldw	r3,-20(fp)
  800934:	1885883a 	add	r2,r3,r2
  800938:	e0bffb15 	stw	r2,-20(fp)
		      // moves through place values (ones , tens ....)
			  multiple = multiple*10;
  80093c:	e0bffa17 	ldw	r2,-24(fp)
  800940:	108002a4 	muli	r2,r2,10
  800944:	e0bffa15 	stw	r2,-24(fp)

				  if(i == 0)
  800948:	e0bffd17 	ldw	r2,-12(fp)
  80094c:	1000081e 	bne	r2,zero,800970 <parse_input+0x100>
				  {
				    timerExpiresAt[newTimeoutIndx] = value;
  800950:	00802074 	movhi	r2,129
  800954:	108c0a04 	addi	r2,r2,12328
  800958:	e0fffc17 	ldw	r3,-16(fp)
  80095c:	18c7883a 	add	r3,r3,r3
  800960:	18c7883a 	add	r3,r3,r3
  800964:	10c5883a 	add	r2,r2,r3
  800968:	e0fffb17 	ldw	r3,-20(fp)
  80096c:	10c00015 	stw	r3,0(r2)
void parse_input(int indx, int buffer[])
{
	int multiple = 1;
	int value = 0;
	int newTimeoutIndx = 5;
	for(int i = indx-2; i >= 0 ; i--) // start at the last value of input buffer
  800970:	e0bffd17 	ldw	r2,-12(fp)
  800974:	10bfffc4 	addi	r2,r2,-1
  800978:	e0bffd15 	stw	r2,-12(fp)
  80097c:	e0bffd17 	ldw	r2,-12(fp)
  800980:	103fc90e 	bge	r2,zero,8008a8 <__alt_mem_onchip_mem+0xff7808a8>
				  }
	    }

	}

}
  800984:	0001883a 	nop
  800988:	e037883a 	mov	sp,fp
  80098c:	df000017 	ldw	fp,0(sp)
  800990:	dec00104 	addi	sp,sp,4
  800994:	f800283a 	ret

00800998 <get_timeout_values>:
/*
 * 	takes the new timeout values from uart inputs
 *  returns the last index of the input buffer array
 */
int get_timeout_values(void)
{
  800998:	defff904 	addi	sp,sp,-28
  80099c:	dfc00615 	stw	ra,24(sp)
  8009a0:	df000515 	stw	fp,20(sp)
  8009a4:	df000504 	addi	fp,sp,20
	fprintf(uart,"Enter new Timeout values: ");
  8009a8:	d0a76417 	ldw	r2,-25200(gp)
  8009ac:	100f883a 	mov	r7,r2
  8009b0:	01800684 	movi	r6,26
  8009b4:	01400044 	movi	r5,1
  8009b8:	01002074 	movhi	r4,129
  8009bc:	210a4404 	addi	r4,r4,10512
  8009c0:	08029380 	call	802938 <fwrite>
	int input;
	int prevInput = -1;
  8009c4:	00bfffc4 	movi	r2,-1
  8009c8:	e0bffb15 	stw	r2,-20(fp)
	int indx = 0;
  8009cc:	e03ffc15 	stw	zero,-16(fp)
	int sepCount = 0;
  8009d0:	e03ffd15 	stw	zero,-12(fp)
	int digitCount = 0;
  8009d4:	e03ffe15 	stw	zero,-8(fp)
	do {
			input =  fgetc (uart); // read the typed value on uart file
  8009d8:	d0a76417 	ldw	r2,-25200(gp)
  8009dc:	1009883a 	mov	r4,r2
  8009e0:	0801be80 	call	801be8 <fgetc>
  8009e4:	e0bfff15 	stw	r2,-4(fp)

			// validates the input - only takes 0-9 and characters "," and "/n"(i.e enter)
			if(!((input >= 48 && input <= 57) || input == 44 || input == 13)
  8009e8:	e0bfff17 	ldw	r2,-4(fp)
  8009ec:	10800c10 	cmplti	r2,r2,48
  8009f0:	1000031e 	bne	r2,zero,800a00 <get_timeout_values+0x68>
  8009f4:	e0bfff17 	ldw	r2,-4(fp)
  8009f8:	10800e90 	cmplti	r2,r2,58
  8009fc:	1000061e 	bne	r2,zero,800a18 <get_timeout_values+0x80>
  800a00:	e0bfff17 	ldw	r2,-4(fp)
  800a04:	10800b20 	cmpeqi	r2,r2,44
  800a08:	1000031e 	bne	r2,zero,800a18 <get_timeout_values+0x80>
  800a0c:	e0bfff17 	ldw	r2,-4(fp)
  800a10:	10800358 	cmpnei	r2,r2,13
  800a14:	1000291e 	bne	r2,zero,800abc <get_timeout_values+0x124>
				||(indx == 0 && input == 44) ||(prevInput == input && input == 44)
  800a18:	e0bffc17 	ldw	r2,-16(fp)
  800a1c:	1000031e 	bne	r2,zero,800a2c <get_timeout_values+0x94>
  800a20:	e0bfff17 	ldw	r2,-4(fp)
  800a24:	10800b20 	cmpeqi	r2,r2,44
  800a28:	1000241e 	bne	r2,zero,800abc <get_timeout_values+0x124>
  800a2c:	e0fffb17 	ldw	r3,-20(fp)
  800a30:	e0bfff17 	ldw	r2,-4(fp)
  800a34:	1880031e 	bne	r3,r2,800a44 <get_timeout_values+0xac>
  800a38:	e0bfff17 	ldw	r2,-4(fp)
  800a3c:	10800b20 	cmpeqi	r2,r2,44
  800a40:	10001e1e 	bne	r2,zero,800abc <get_timeout_values+0x124>
				|| (digitCount == 5 && input != 44 && input != 13)|| (sepCount == 5 && prevInput == 44 && input == 13)
  800a44:	e0bffe17 	ldw	r2,-8(fp)
  800a48:	10800158 	cmpnei	r2,r2,5
  800a4c:	1000061e 	bne	r2,zero,800a68 <get_timeout_values+0xd0>
  800a50:	e0bfff17 	ldw	r2,-4(fp)
  800a54:	10800b20 	cmpeqi	r2,r2,44
  800a58:	1000031e 	bne	r2,zero,800a68 <get_timeout_values+0xd0>
  800a5c:	e0bfff17 	ldw	r2,-4(fp)
  800a60:	10800358 	cmpnei	r2,r2,13
  800a64:	1000151e 	bne	r2,zero,800abc <get_timeout_values+0x124>
  800a68:	e0bffd17 	ldw	r2,-12(fp)
  800a6c:	10800158 	cmpnei	r2,r2,5
  800a70:	1000061e 	bne	r2,zero,800a8c <get_timeout_values+0xf4>
  800a74:	e0bffb17 	ldw	r2,-20(fp)
  800a78:	10800b18 	cmpnei	r2,r2,44
  800a7c:	1000031e 	bne	r2,zero,800a8c <get_timeout_values+0xf4>
  800a80:	e0bfff17 	ldw	r2,-4(fp)
  800a84:	10800360 	cmpeqi	r2,r2,13
  800a88:	10000c1e 	bne	r2,zero,800abc <get_timeout_values+0x124>
				|| (input == 13 && sepCount < 5) || (sepCount == 5 && input == 44))
  800a8c:	e0bfff17 	ldw	r2,-4(fp)
  800a90:	10800358 	cmpnei	r2,r2,13
  800a94:	1000031e 	bne	r2,zero,800aa4 <get_timeout_values+0x10c>
  800a98:	e0bffd17 	ldw	r2,-12(fp)
  800a9c:	10800150 	cmplti	r2,r2,5
  800aa0:	1000061e 	bne	r2,zero,800abc <get_timeout_values+0x124>
  800aa4:	e0bffd17 	ldw	r2,-12(fp)
  800aa8:	10800158 	cmpnei	r2,r2,5
  800aac:	1000171e 	bne	r2,zero,800b0c <get_timeout_values+0x174>
  800ab0:	e0bfff17 	ldw	r2,-4(fp)
  800ab4:	10800b18 	cmpnei	r2,r2,44
  800ab8:	1000141e 	bne	r2,zero,800b0c <get_timeout_values+0x174>
			{
				fprintf(uart ,"Error ---------------->Invalid Input\n\r");
  800abc:	d0a76417 	ldw	r2,-25200(gp)
  800ac0:	100f883a 	mov	r7,r2
  800ac4:	01800984 	movi	r6,38
  800ac8:	01400044 	movi	r5,1
  800acc:	01002074 	movhi	r4,129
  800ad0:	210a4b04 	addi	r4,r4,10540
  800ad4:	08029380 	call	802938 <fwrite>
				sepCount = 0;
  800ad8:	e03ffd15 	stw	zero,-12(fp)
				digitCount = 0;
  800adc:	e03ffe15 	stw	zero,-8(fp)
				indx = 0;
  800ae0:	e03ffc15 	stw	zero,-16(fp)
				prevInput = -1;
  800ae4:	00bfffc4 	movi	r2,-1
  800ae8:	e0bffb15 	stw	r2,-20(fp)
				fprintf(uart,"Enter new Timeout values: \n\r");
  800aec:	d0a76417 	ldw	r2,-25200(gp)
  800af0:	100f883a 	mov	r7,r2
  800af4:	01800704 	movi	r6,28
  800af8:	01400044 	movi	r5,1
  800afc:	01002074 	movhi	r4,129
  800b00:	210a5504 	addi	r4,r4,10580
  800b04:	08029380 	call	802938 <fwrite>
  800b08:	00001706 	br	800b68 <get_timeout_values+0x1d0>
			}
		    else
		    {

				if(input == 44) // if input is ","
  800b0c:	e0bfff17 	ldw	r2,-4(fp)
  800b10:	10800b18 	cmpnei	r2,r2,44
  800b14:	1000041e 	bne	r2,zero,800b28 <get_timeout_values+0x190>
				{
				  sepCount++;
  800b18:	e0bffd17 	ldw	r2,-12(fp)
  800b1c:	10800044 	addi	r2,r2,1
  800b20:	e0bffd15 	stw	r2,-12(fp)
				  digitCount = 0;
  800b24:	e03ffe15 	stw	zero,-8(fp)
				}

				digitCount++;
  800b28:	e0bffe17 	ldw	r2,-8(fp)
  800b2c:	10800044 	addi	r2,r2,1
  800b30:	e0bffe15 	stw	r2,-8(fp)
				prevInput = input;
  800b34:	e0bfff17 	ldw	r2,-4(fp)
  800b38:	e0bffb15 	stw	r2,-20(fp)
				buffer[indx] = input;
  800b3c:	00802074 	movhi	r2,129
  800b40:	109abe04 	addi	r2,r2,27384
  800b44:	e0fffc17 	ldw	r3,-16(fp)
  800b48:	18c7883a 	add	r3,r3,r3
  800b4c:	18c7883a 	add	r3,r3,r3
  800b50:	10c5883a 	add	r2,r2,r3
  800b54:	e0ffff17 	ldw	r3,-4(fp)
  800b58:	10c00015 	stw	r3,0(r2)
				indx++;
  800b5c:	e0bffc17 	ldw	r2,-16(fp)
  800b60:	10800044 	addi	r2,r2,1
  800b64:	e0bffc15 	stw	r2,-16(fp)

		    }
		// end input scanning when enter is pressed and 5 "," characters are in the buffer.
		// input validation above ensures that atleast 1 digit is in between the 5th "," and "\n"(i.e enter)
		} while (!(input == 13 && sepCount == 5));
  800b68:	e0bfff17 	ldw	r2,-4(fp)
  800b6c:	10800358 	cmpnei	r2,r2,13
  800b70:	103f991e 	bne	r2,zero,8009d8 <__alt_mem_onchip_mem+0xff7809d8>
  800b74:	e0bffd17 	ldw	r2,-12(fp)
  800b78:	10800158 	cmpnei	r2,r2,5
  800b7c:	103f961e 	bne	r2,zero,8009d8 <__alt_mem_onchip_mem+0xff7809d8>

	fprintf(uart,"Timeout values reconfiguration success!\n\r");
  800b80:	d0a76417 	ldw	r2,-25200(gp)
  800b84:	100f883a 	mov	r7,r2
  800b88:	01800a44 	movi	r6,41
  800b8c:	01400044 	movi	r5,1
  800b90:	01002074 	movhi	r4,129
  800b94:	210a5d04 	addi	r4,r4,10612
  800b98:	08029380 	call	802938 <fwrite>
	fprintf(uart,"Set SW17 low on DE-115 board to continue\n\r");
  800b9c:	d0a76417 	ldw	r2,-25200(gp)
  800ba0:	100f883a 	mov	r7,r2
  800ba4:	01800a84 	movi	r6,42
  800ba8:	01400044 	movi	r5,1
  800bac:	01002074 	movhi	r4,129
  800bb0:	210a6804 	addi	r4,r4,10656
  800bb4:	08029380 	call	802938 <fwrite>
	return indx;
  800bb8:	e0bffc17 	ldw	r2,-16(fp)

}
  800bbc:	e037883a 	mov	sp,fp
  800bc0:	dfc00117 	ldw	ra,4(sp)
  800bc4:	df000017 	ldw	fp,0(sp)
  800bc8:	dec00204 	addi	sp,sp,8
  800bcc:	f800283a 	ret

00800bd0 <change_mode_routine>:
 * And resets the timeout values as mode chages
 * from mode 3 to mode 1.
 * It also disables button interupts depending on the mode
 */
void change_mode_routine(void)
{
  800bd0:	defffe04 	addi	sp,sp,-8
  800bd4:	dfc00115 	stw	ra,4(sp)
  800bd8:	df000015 	stw	fp,0(sp)
  800bdc:	d839883a 	mov	fp,sp
	mode = swicthValue;
  800be0:	d0a75c17 	ldw	r2,-25232(gp)
  800be4:	d0a75b15 	stw	r2,-25236(gp)
	switch(mode)
  800be8:	d0a75b17 	ldw	r2,-25236(gp)
  800bec:	10c000a0 	cmpeqi	r3,r2,2
  800bf0:	1800381e 	bne	r3,zero,800cd4 <change_mode_routine+0x104>
  800bf4:	10c000c8 	cmpgei	r3,r2,3
  800bf8:	1800031e 	bne	r3,zero,800c08 <change_mode_routine+0x38>
  800bfc:	10800060 	cmpeqi	r2,r2,1
  800c00:	1000061e 	bne	r2,zero,800c1c <change_mode_routine+0x4c>
			//enable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);
			break;
	}

}
  800c04:	00006306 	br	800d94 <change_mode_routine+0x1c4>
 * It also disables button interupts depending on the mode
 */
void change_mode_routine(void)
{
	mode = swicthValue;
	switch(mode)
  800c08:	10c00120 	cmpeqi	r3,r2,4
  800c0c:	1800411e 	bne	r3,zero,800d14 <change_mode_routine+0x144>
  800c10:	10800220 	cmpeqi	r2,r2,8
  800c14:	10004f1e 	bne	r2,zero,800d54 <change_mode_routine+0x184>
			//enable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);
			break;
	}

}
  800c18:	00005e06 	br	800d94 <change_mode_routine+0x1c4>
{
	mode = swicthValue;
	switch(mode)
	{
		case 0b0001: // if mode 1
			fprintf(lcd , "Mode 1\n");
  800c1c:	d0a76317 	ldw	r2,-25204(gp)
  800c20:	100f883a 	mov	r7,r2
  800c24:	018001c4 	movi	r6,7
  800c28:	01400044 	movi	r5,1
  800c2c:	01002074 	movhi	r4,129
  800c30:	210a7304 	addi	r4,r4,10700
  800c34:	08029380 	call	802938 <fwrite>
			fprintf(lcd , "\n");
  800c38:	d0a76317 	ldw	r2,-25204(gp)
  800c3c:	100b883a 	mov	r5,r2
  800c40:	01000284 	movi	r4,10
  800c44:	08021ac0 	call	8021ac <fputc>
			//reset to hardcoded timeout values
			timerExpiresAt[0] = 500;timerExpiresAt[1] = 6000; timerExpiresAt[2] = 2000;
  800c48:	00802074 	movhi	r2,129
  800c4c:	108c0a04 	addi	r2,r2,12328
  800c50:	00c07d04 	movi	r3,500
  800c54:	10c00015 	stw	r3,0(r2)
  800c58:	00802074 	movhi	r2,129
  800c5c:	108c0a04 	addi	r2,r2,12328
  800c60:	00c5dc04 	movi	r3,6000
  800c64:	10c00115 	stw	r3,4(r2)
  800c68:	00802074 	movhi	r2,129
  800c6c:	108c0a04 	addi	r2,r2,12328
  800c70:	00c1f404 	movi	r3,2000
  800c74:	10c00215 	stw	r3,8(r2)
			timerExpiresAt[3] = 500; timerExpiresAt[4] = 6000; timerExpiresAt[5] = 2000;
  800c78:	00802074 	movhi	r2,129
  800c7c:	108c0a04 	addi	r2,r2,12328
  800c80:	00c07d04 	movi	r3,500
  800c84:	10c00315 	stw	r3,12(r2)
  800c88:	00802074 	movhi	r2,129
  800c8c:	108c0a04 	addi	r2,r2,12328
  800c90:	00c5dc04 	movi	r3,6000
  800c94:	10c00415 	stw	r3,16(r2)
  800c98:	00802074 	movhi	r2,129
  800c9c:	108c0a04 	addi	r2,r2,12328
  800ca0:	00c1f404 	movi	r3,2000
  800ca4:	10c00515 	stw	r3,20(r2)
			//disable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b000);
  800ca8:	0007883a 	mov	r3,zero
  800cac:	00804434 	movhi	r2,272
  800cb0:	10842a04 	addi	r2,r2,4264
  800cb4:	10c00035 	stwio	r3,0(r2)
			//turn off red ped ligths and make sure ped shared variables are reset
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b00);pedNS = 0;pedEW = 0;
  800cb8:	0007883a 	mov	r3,zero
  800cbc:	00804434 	movhi	r2,272
  800cc0:	10842004 	addi	r2,r2,4224
  800cc4:	10c00035 	stwio	r3,0(r2)
  800cc8:	d0275d15 	stw	zero,-25228(gp)
  800ccc:	d0275e15 	stw	zero,-25224(gp)
			break;
  800cd0:	00003006 	br	800d94 <change_mode_routine+0x1c4>
		case 0b0010:// if mode 2
			fprintf(lcd , "Mode 2\n");
  800cd4:	d0a76317 	ldw	r2,-25204(gp)
  800cd8:	100f883a 	mov	r7,r2
  800cdc:	018001c4 	movi	r6,7
  800ce0:	01400044 	movi	r5,1
  800ce4:	01002074 	movhi	r4,129
  800ce8:	210a7504 	addi	r4,r4,10708
  800cec:	08029380 	call	802938 <fwrite>
			fprintf(lcd , "\n");
  800cf0:	d0a76317 	ldw	r2,-25204(gp)
  800cf4:	100b883a 	mov	r5,r2
  800cf8:	01000284 	movi	r4,10
  800cfc:	08021ac0 	call	8021ac <fputc>
			//disable buttons interupt for mode 3(button 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b011);
  800d00:	00c000c4 	movi	r3,3
  800d04:	00804434 	movhi	r2,272
  800d08:	10842a04 	addi	r2,r2,4264
  800d0c:	10c00035 	stwio	r3,0(r2)
			break;
  800d10:	00002006 	br	800d94 <change_mode_routine+0x1c4>
		case 0b0100:// if mode 3
			fprintf(lcd , "Mode 3\n");
  800d14:	d0a76317 	ldw	r2,-25204(gp)
  800d18:	100f883a 	mov	r7,r2
  800d1c:	018001c4 	movi	r6,7
  800d20:	01400044 	movi	r5,1
  800d24:	01002074 	movhi	r4,129
  800d28:	210a7704 	addi	r4,r4,10716
  800d2c:	08029380 	call	802938 <fwrite>
			fprintf(lcd , "\n");
  800d30:	d0a76317 	ldw	r2,-25204(gp)
  800d34:	100b883a 	mov	r5,r2
  800d38:	01000284 	movi	r4,10
  800d3c:	08021ac0 	call	8021ac <fputc>
			//enable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);
  800d40:	00c001c4 	movi	r3,7
  800d44:	00804434 	movhi	r2,272
  800d48:	10842a04 	addi	r2,r2,4264
  800d4c:	10c00035 	stwio	r3,0(r2)
			break;
  800d50:	00001006 	br	800d94 <change_mode_routine+0x1c4>
		case 0b1000:// if mode 4
			fprintf(lcd , "Mode 4\n");
  800d54:	d0a76317 	ldw	r2,-25204(gp)
  800d58:	100f883a 	mov	r7,r2
  800d5c:	018001c4 	movi	r6,7
  800d60:	01400044 	movi	r5,1
  800d64:	01002074 	movhi	r4,129
  800d68:	210a7904 	addi	r4,r4,10724
  800d6c:	08029380 	call	802938 <fwrite>
			fprintf(lcd , "\n");
  800d70:	d0a76317 	ldw	r2,-25204(gp)
  800d74:	100b883a 	mov	r5,r2
  800d78:	01000284 	movi	r4,10
  800d7c:	08021ac0 	call	8021ac <fputc>
			//enable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);
  800d80:	00c001c4 	movi	r3,7
  800d84:	00804434 	movhi	r2,272
  800d88:	10842a04 	addi	r2,r2,4264
  800d8c:	10c00035 	stwio	r3,0(r2)
			break;
  800d90:	0001883a 	nop
	}

}
  800d94:	0001883a 	nop
  800d98:	e037883a 	mov	sp,fp
  800d9c:	dfc00117 	ldw	ra,4(sp)
  800da0:	df000017 	ldw	fp,0(sp)
  800da4:	dec00204 	addi	sp,sp,8
  800da8:	f800283a 	ret

00800dac <main>:

/*
 * Program 1st entry
 */
int main()
{
  800dac:	defffc04 	addi	sp,sp,-16
  800db0:	dfc00315 	stw	ra,12(sp)
  800db4:	df000215 	stw	fp,8(sp)
  800db8:	df000204 	addi	fp,sp,8
   uart = fopen(UART_NAME , "r+");
  800dbc:	01402074 	movhi	r5,129
  800dc0:	294a7b04 	addi	r5,r5,10732
  800dc4:	01002074 	movhi	r4,129
  800dc8:	210a7c04 	addi	r4,r4,10736
  800dcc:	08021040 	call	802104 <fopen>
  800dd0:	d0a76415 	stw	r2,-25200(gp)
   lcd = fopen(LCD_NAME, "w");
  800dd4:	01402074 	movhi	r5,129
  800dd8:	294a7f04 	addi	r5,r5,10748
  800ddc:	01002074 	movhi	r4,129
  800de0:	210a8004 	addi	r4,r4,10752
  800de4:	08021040 	call	802104 <fopen>
  800de8:	d0a76315 	stw	r2,-25204(gp)
   if(uart == NULL || lcd == NULL)
  800dec:	d0a76417 	ldw	r2,-25200(gp)
  800df0:	10000226 	beq	r2,zero,800dfc <main+0x50>
  800df4:	d0a76317 	ldw	r2,-25204(gp)
  800df8:	10001a1e 	bne	r2,zero,800e64 <main+0xb8>
   {
	   printf("Error ---------> uart or lcd can't be opened\n\r");
  800dfc:	01002074 	movhi	r4,129
  800e00:	210a8304 	addi	r4,r4,10764
  800e04:	08034ec0 	call	8034ec <printf>
	   printf("Attemting to re-open...\n\r");
  800e08:	01002074 	movhi	r4,129
  800e0c:	210a8f04 	addi	r4,r4,10812
  800e10:	08034ec0 	call	8034ec <printf>
	   while(uart == NULL || lcd == NULL)
  800e14:	00000c06 	br	800e48 <main+0x9c>
	   {
		   uart = fopen(UART_NAME , "r+");
  800e18:	01402074 	movhi	r5,129
  800e1c:	294a7b04 	addi	r5,r5,10732
  800e20:	01002074 	movhi	r4,129
  800e24:	210a7c04 	addi	r4,r4,10736
  800e28:	08021040 	call	802104 <fopen>
  800e2c:	d0a76415 	stw	r2,-25200(gp)
		   lcd = fopen(LCD_NAME, "w");
  800e30:	01402074 	movhi	r5,129
  800e34:	294a7f04 	addi	r5,r5,10748
  800e38:	01002074 	movhi	r4,129
  800e3c:	210a8004 	addi	r4,r4,10752
  800e40:	08021040 	call	802104 <fopen>
  800e44:	d0a76315 	stw	r2,-25204(gp)
   lcd = fopen(LCD_NAME, "w");
   if(uart == NULL || lcd == NULL)
   {
	   printf("Error ---------> uart or lcd can't be opened\n\r");
	   printf("Attemting to re-open...\n\r");
	   while(uart == NULL || lcd == NULL)
  800e48:	d0a76417 	ldw	r2,-25200(gp)
  800e4c:	103ff226 	beq	r2,zero,800e18 <__alt_mem_onchip_mem+0xff780e18>
  800e50:	d0a76317 	ldw	r2,-25204(gp)
  800e54:	103ff026 	beq	r2,zero,800e18 <__alt_mem_onchip_mem+0xff780e18>
	   {
		   uart = fopen(UART_NAME , "r+");
		   lcd = fopen(LCD_NAME, "w");
	   }
	   printf("uart and lcd both opened...resuming programme\n\r");
  800e58:	01002074 	movhi	r4,129
  800e5c:	210a9604 	addi	r4,r4,10840
  800e60:	08034ec0 	call	8034ec <printf>
   }

   // start the timer isr
   alt_alarm_start(&timer_traffic_light, 0, tlc_timer_isr, NULL);
  800e64:	000f883a 	mov	r7,zero
  800e68:	01802034 	movhi	r6,128
  800e6c:	3180c404 	addi	r6,r6,784
  800e70:	000b883a 	mov	r5,zero
  800e74:	01002074 	movhi	r4,129
  800e78:	211ab804 	addi	r4,r4,27360
  800e7c:	080e6180 	call	80e618 <alt_alarm_start>

   // initialize button isr - clear the buttons edge capture register
   IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800e80:	0007883a 	mov	r3,zero
  800e84:	00804434 	movhi	r2,272
  800e88:	10842b04 	addi	r2,r2,4268
  800e8c:	10c00035 	stwio	r3,0(r2)
   // initialize button isr - register button ISR
   alt_irq_register (BUTTONS_IRQ, NULL , NSEW_ped_isr);
  800e90:	01802034 	movhi	r6,128
  800e94:	31814604 	addi	r6,r6,1304
  800e98:	000b883a 	mov	r5,zero
  800e9c:	01000104 	movi	r4,4
  800ea0:	080e9680 	call	80e968 <alt_irq_register>


  while(1)
  {
	  swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800ea4:	00804434 	movhi	r2,272
  800ea8:	10842404 	addi	r2,r2,4240
  800eac:	10800037 	ldwio	r2,0(r2)
  800eb0:	d0a75c15 	stw	r2,-25232(gp)
	  if((mode != swicthValue) && (currentIndex == 0 || currentIndex == 3)) // only switch mode if in RR state
  800eb4:	d0e75b17 	ldw	r3,-25236(gp)
  800eb8:	d0a75c17 	ldw	r2,-25232(gp)
  800ebc:	18bff926 	beq	r3,r2,800ea4 <__alt_mem_onchip_mem+0xff780ea4>
  800ec0:	d0a75917 	ldw	r2,-25244(gp)
  800ec4:	10000326 	beq	r2,zero,800ed4 <main+0x128>
  800ec8:	d0a75917 	ldw	r2,-25244(gp)
  800ecc:	108000d8 	cmpnei	r2,r2,3
  800ed0:	103ff41e 	bne	r2,zero,800ea4 <__alt_mem_onchip_mem+0xff780ea4>
	  {
		  printf("Changing mode\n");
  800ed4:	01002074 	movhi	r4,129
  800ed8:	210aa204 	addi	r4,r4,10888
  800edc:	08037500 	call	803750 <puts>
		  change_mode_routine();
  800ee0:	0800bd00 	call	800bd0 <change_mode_routine>
		  //if switch 17 is high and system mode is 3 then start getting new timeout values
		  if((mode & (1 << 17)) && ((mode & (1 << 2))|| (mode & (1 << 3))))
  800ee4:	d0a75b17 	ldw	r2,-25236(gp)
  800ee8:	108000ac 	andhi	r2,r2,2
  800eec:	103fed26 	beq	r2,zero,800ea4 <__alt_mem_onchip_mem+0xff780ea4>
  800ef0:	d0a75b17 	ldw	r2,-25236(gp)
  800ef4:	1080010c 	andi	r2,r2,4
  800ef8:	1000031e 	bne	r2,zero,800f08 <main+0x15c>
  800efc:	d0a75b17 	ldw	r2,-25236(gp)
  800f00:	1080020c 	andi	r2,r2,8
  800f04:	103fe726 	beq	r2,zero,800ea4 <__alt_mem_onchip_mem+0xff780ea4>
		  {
			   int redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800f08:	00804434 	movhi	r2,272
  800f0c:	10841c04 	addi	r2,r2,4208
  800f10:	10800037 	ldwio	r2,0(r2)
  800f14:	e0bffe15 	stw	r2,-8(fp)
			   while(!(redLEDs == 0b100100))
  800f18:	00000406 	br	800f2c <main+0x180>
			   {
				   redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
  800f1c:	00804434 	movhi	r2,272
  800f20:	10841c04 	addi	r2,r2,4208
  800f24:	10800037 	ldwio	r2,0(r2)
  800f28:	e0bffe15 	stw	r2,-8(fp)
		  change_mode_routine();
		  //if switch 17 is high and system mode is 3 then start getting new timeout values
		  if((mode & (1 << 17)) && ((mode & (1 << 2))|| (mode & (1 << 3))))
		  {
			   int redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
			   while(!(redLEDs == 0b100100))
  800f2c:	e0bffe17 	ldw	r2,-8(fp)
  800f30:	10800918 	cmpnei	r2,r2,36
  800f34:	103ff91e 	bne	r2,zero,800f1c <__alt_mem_onchip_mem+0xff780f1c>
			   {
				   redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
			   }
			   alt_alarm_stop(&timer_traffic_light); // stop traffic light isr while setting new timeout values
  800f38:	01002074 	movhi	r4,129
  800f3c:	211ab804 	addi	r4,r4,27360
  800f40:	080f3280 	call	80f328 <alt_alarm_stop>
			   int indx = get_timeout_values();
  800f44:	08009980 	call	800998 <get_timeout_values>
  800f48:	e0bfff15 	stw	r2,-4(fp)
			   parse_input(indx,buffer);
  800f4c:	01402074 	movhi	r5,129
  800f50:	295abe04 	addi	r5,r5,27384
  800f54:	e13fff17 	ldw	r4,-4(fp)
  800f58:	08008700 	call	800870 <parse_input>
			   //resume traffic light timer isr when switch 17 becomes low
			   while(swicthValue & (1 << 17))
  800f5c:	00000406 	br	800f70 <main+0x1c4>
			   {
			      swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
  800f60:	00804434 	movhi	r2,272
  800f64:	10842404 	addi	r2,r2,4240
  800f68:	10800037 	ldwio	r2,0(r2)
  800f6c:	d0a75c15 	stw	r2,-25232(gp)
			   }
			   alt_alarm_stop(&timer_traffic_light); // stop traffic light isr while setting new timeout values
			   int indx = get_timeout_values();
			   parse_input(indx,buffer);
			   //resume traffic light timer isr when switch 17 becomes low
			   while(swicthValue & (1 << 17))
  800f70:	d0a75c17 	ldw	r2,-25232(gp)
  800f74:	108000ac 	andhi	r2,r2,2
  800f78:	103ff91e 	bne	r2,zero,800f60 <__alt_mem_onchip_mem+0xff780f60>
			   {
			      swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
			   }
			   alt_alarm_start(&timer_traffic_light, 0 , tlc_timer_isr, NULL);
  800f7c:	000f883a 	mov	r7,zero
  800f80:	01802034 	movhi	r6,128
  800f84:	3180c404 	addi	r6,r6,784
  800f88:	000b883a 	mov	r5,zero
  800f8c:	01002074 	movhi	r4,129
  800f90:	211ab804 	addi	r4,r4,27360
  800f94:	080e6180 	call	80e618 <alt_alarm_start>
		  }
	  }
  }
  800f98:	003fc206 	br	800ea4 <__alt_mem_onchip_mem+0xff780ea4>

00800f9c <__divsi3>:
  800f9c:	20001b16 	blt	r4,zero,80100c <__divsi3+0x70>
  800fa0:	000f883a 	mov	r7,zero
  800fa4:	28001616 	blt	r5,zero,801000 <__divsi3+0x64>
  800fa8:	200d883a 	mov	r6,r4
  800fac:	29001a2e 	bgeu	r5,r4,801018 <__divsi3+0x7c>
  800fb0:	00800804 	movi	r2,32
  800fb4:	00c00044 	movi	r3,1
  800fb8:	00000106 	br	800fc0 <__divsi3+0x24>
  800fbc:	10000d26 	beq	r2,zero,800ff4 <__divsi3+0x58>
  800fc0:	294b883a 	add	r5,r5,r5
  800fc4:	10bfffc4 	addi	r2,r2,-1
  800fc8:	18c7883a 	add	r3,r3,r3
  800fcc:	293ffb36 	bltu	r5,r4,800fbc <__alt_mem_onchip_mem+0xff780fbc>
  800fd0:	0005883a 	mov	r2,zero
  800fd4:	18000726 	beq	r3,zero,800ff4 <__divsi3+0x58>
  800fd8:	0005883a 	mov	r2,zero
  800fdc:	31400236 	bltu	r6,r5,800fe8 <__divsi3+0x4c>
  800fe0:	314dc83a 	sub	r6,r6,r5
  800fe4:	10c4b03a 	or	r2,r2,r3
  800fe8:	1806d07a 	srli	r3,r3,1
  800fec:	280ad07a 	srli	r5,r5,1
  800ff0:	183ffa1e 	bne	r3,zero,800fdc <__alt_mem_onchip_mem+0xff780fdc>
  800ff4:	38000126 	beq	r7,zero,800ffc <__divsi3+0x60>
  800ff8:	0085c83a 	sub	r2,zero,r2
  800ffc:	f800283a 	ret
  801000:	014bc83a 	sub	r5,zero,r5
  801004:	39c0005c 	xori	r7,r7,1
  801008:	003fe706 	br	800fa8 <__alt_mem_onchip_mem+0xff780fa8>
  80100c:	0109c83a 	sub	r4,zero,r4
  801010:	01c00044 	movi	r7,1
  801014:	003fe306 	br	800fa4 <__alt_mem_onchip_mem+0xff780fa4>
  801018:	00c00044 	movi	r3,1
  80101c:	003fee06 	br	800fd8 <__alt_mem_onchip_mem+0xff780fd8>

00801020 <__modsi3>:
  801020:	20001716 	blt	r4,zero,801080 <__modsi3+0x60>
  801024:	000f883a 	mov	r7,zero
  801028:	2005883a 	mov	r2,r4
  80102c:	28001216 	blt	r5,zero,801078 <__modsi3+0x58>
  801030:	2900162e 	bgeu	r5,r4,80108c <__modsi3+0x6c>
  801034:	01800804 	movi	r6,32
  801038:	00c00044 	movi	r3,1
  80103c:	00000106 	br	801044 <__modsi3+0x24>
  801040:	30000a26 	beq	r6,zero,80106c <__modsi3+0x4c>
  801044:	294b883a 	add	r5,r5,r5
  801048:	31bfffc4 	addi	r6,r6,-1
  80104c:	18c7883a 	add	r3,r3,r3
  801050:	293ffb36 	bltu	r5,r4,801040 <__alt_mem_onchip_mem+0xff781040>
  801054:	18000526 	beq	r3,zero,80106c <__modsi3+0x4c>
  801058:	1806d07a 	srli	r3,r3,1
  80105c:	11400136 	bltu	r2,r5,801064 <__modsi3+0x44>
  801060:	1145c83a 	sub	r2,r2,r5
  801064:	280ad07a 	srli	r5,r5,1
  801068:	183ffb1e 	bne	r3,zero,801058 <__alt_mem_onchip_mem+0xff781058>
  80106c:	38000126 	beq	r7,zero,801074 <__modsi3+0x54>
  801070:	0085c83a 	sub	r2,zero,r2
  801074:	f800283a 	ret
  801078:	014bc83a 	sub	r5,zero,r5
  80107c:	003fec06 	br	801030 <__alt_mem_onchip_mem+0xff781030>
  801080:	0109c83a 	sub	r4,zero,r4
  801084:	01c00044 	movi	r7,1
  801088:	003fe706 	br	801028 <__alt_mem_onchip_mem+0xff781028>
  80108c:	00c00044 	movi	r3,1
  801090:	003ff106 	br	801058 <__alt_mem_onchip_mem+0xff781058>

00801094 <__udivsi3>:
  801094:	200d883a 	mov	r6,r4
  801098:	2900152e 	bgeu	r5,r4,8010f0 <__udivsi3+0x5c>
  80109c:	28001416 	blt	r5,zero,8010f0 <__udivsi3+0x5c>
  8010a0:	00800804 	movi	r2,32
  8010a4:	00c00044 	movi	r3,1
  8010a8:	00000206 	br	8010b4 <__udivsi3+0x20>
  8010ac:	10000e26 	beq	r2,zero,8010e8 <__udivsi3+0x54>
  8010b0:	28000516 	blt	r5,zero,8010c8 <__udivsi3+0x34>
  8010b4:	294b883a 	add	r5,r5,r5
  8010b8:	10bfffc4 	addi	r2,r2,-1
  8010bc:	18c7883a 	add	r3,r3,r3
  8010c0:	293ffa36 	bltu	r5,r4,8010ac <__alt_mem_onchip_mem+0xff7810ac>
  8010c4:	18000826 	beq	r3,zero,8010e8 <__udivsi3+0x54>
  8010c8:	0005883a 	mov	r2,zero
  8010cc:	31400236 	bltu	r6,r5,8010d8 <__udivsi3+0x44>
  8010d0:	314dc83a 	sub	r6,r6,r5
  8010d4:	10c4b03a 	or	r2,r2,r3
  8010d8:	1806d07a 	srli	r3,r3,1
  8010dc:	280ad07a 	srli	r5,r5,1
  8010e0:	183ffa1e 	bne	r3,zero,8010cc <__alt_mem_onchip_mem+0xff7810cc>
  8010e4:	f800283a 	ret
  8010e8:	0005883a 	mov	r2,zero
  8010ec:	f800283a 	ret
  8010f0:	00c00044 	movi	r3,1
  8010f4:	003ff406 	br	8010c8 <__alt_mem_onchip_mem+0xff7810c8>

008010f8 <__umodsi3>:
  8010f8:	2005883a 	mov	r2,r4
  8010fc:	2900122e 	bgeu	r5,r4,801148 <__umodsi3+0x50>
  801100:	28001116 	blt	r5,zero,801148 <__umodsi3+0x50>
  801104:	01800804 	movi	r6,32
  801108:	00c00044 	movi	r3,1
  80110c:	00000206 	br	801118 <__umodsi3+0x20>
  801110:	30000c26 	beq	r6,zero,801144 <__umodsi3+0x4c>
  801114:	28000516 	blt	r5,zero,80112c <__umodsi3+0x34>
  801118:	294b883a 	add	r5,r5,r5
  80111c:	31bfffc4 	addi	r6,r6,-1
  801120:	18c7883a 	add	r3,r3,r3
  801124:	293ffa36 	bltu	r5,r4,801110 <__alt_mem_onchip_mem+0xff781110>
  801128:	18000626 	beq	r3,zero,801144 <__umodsi3+0x4c>
  80112c:	1806d07a 	srli	r3,r3,1
  801130:	11400136 	bltu	r2,r5,801138 <__umodsi3+0x40>
  801134:	1145c83a 	sub	r2,r2,r5
  801138:	280ad07a 	srli	r5,r5,1
  80113c:	183ffb1e 	bne	r3,zero,80112c <__alt_mem_onchip_mem+0xff78112c>
  801140:	f800283a 	ret
  801144:	f800283a 	ret
  801148:	00c00044 	movi	r3,1
  80114c:	003ff706 	br	80112c <__alt_mem_onchip_mem+0xff78112c>

00801150 <__divdf3>:
  801150:	defff204 	addi	sp,sp,-56
  801154:	dd400915 	stw	r21,36(sp)
  801158:	282ad53a 	srli	r21,r5,20
  80115c:	dd000815 	stw	r20,32(sp)
  801160:	2828d7fa 	srli	r20,r5,31
  801164:	dc000415 	stw	r16,16(sp)
  801168:	04000434 	movhi	r16,16
  80116c:	df000c15 	stw	fp,48(sp)
  801170:	843fffc4 	addi	r16,r16,-1
  801174:	dfc00d15 	stw	ra,52(sp)
  801178:	ddc00b15 	stw	r23,44(sp)
  80117c:	dd800a15 	stw	r22,40(sp)
  801180:	dcc00715 	stw	r19,28(sp)
  801184:	dc800615 	stw	r18,24(sp)
  801188:	dc400515 	stw	r17,20(sp)
  80118c:	ad41ffcc 	andi	r21,r21,2047
  801190:	2c20703a 	and	r16,r5,r16
  801194:	a7003fcc 	andi	fp,r20,255
  801198:	a8006126 	beq	r21,zero,801320 <__divdf3+0x1d0>
  80119c:	0081ffc4 	movi	r2,2047
  8011a0:	2025883a 	mov	r18,r4
  8011a4:	a8803726 	beq	r21,r2,801284 <__divdf3+0x134>
  8011a8:	80800434 	orhi	r2,r16,16
  8011ac:	100490fa 	slli	r2,r2,3
  8011b0:	2020d77a 	srli	r16,r4,29
  8011b4:	202490fa 	slli	r18,r4,3
  8011b8:	ad7f0044 	addi	r21,r21,-1023
  8011bc:	80a0b03a 	or	r16,r16,r2
  8011c0:	0027883a 	mov	r19,zero
  8011c4:	0013883a 	mov	r9,zero
  8011c8:	3804d53a 	srli	r2,r7,20
  8011cc:	382cd7fa 	srli	r22,r7,31
  8011d0:	04400434 	movhi	r17,16
  8011d4:	8c7fffc4 	addi	r17,r17,-1
  8011d8:	1081ffcc 	andi	r2,r2,2047
  8011dc:	3011883a 	mov	r8,r6
  8011e0:	3c62703a 	and	r17,r7,r17
  8011e4:	b5c03fcc 	andi	r23,r22,255
  8011e8:	10006c26 	beq	r2,zero,80139c <__divdf3+0x24c>
  8011ec:	00c1ffc4 	movi	r3,2047
  8011f0:	10c06426 	beq	r2,r3,801384 <__divdf3+0x234>
  8011f4:	88c00434 	orhi	r3,r17,16
  8011f8:	180690fa 	slli	r3,r3,3
  8011fc:	3022d77a 	srli	r17,r6,29
  801200:	301090fa 	slli	r8,r6,3
  801204:	10bf0044 	addi	r2,r2,-1023
  801208:	88e2b03a 	or	r17,r17,r3
  80120c:	000f883a 	mov	r7,zero
  801210:	a58cf03a 	xor	r6,r20,r22
  801214:	3cc8b03a 	or	r4,r7,r19
  801218:	a8abc83a 	sub	r21,r21,r2
  80121c:	008003c4 	movi	r2,15
  801220:	3007883a 	mov	r3,r6
  801224:	34c03fcc 	andi	r19,r6,255
  801228:	11009036 	bltu	r2,r4,80146c <__divdf3+0x31c>
  80122c:	200890ba 	slli	r4,r4,2
  801230:	00802034 	movhi	r2,128
  801234:	10849104 	addi	r2,r2,4676
  801238:	2089883a 	add	r4,r4,r2
  80123c:	20800017 	ldw	r2,0(r4)
  801240:	1000683a 	jmp	r2
  801244:	0080146c 	andhi	r2,zero,81
  801248:	008012bc 	xorhi	r2,zero,74
  80124c:	0080145c 	xori	r2,zero,81
  801250:	008012b0 	cmpltui	r2,zero,74
  801254:	0080145c 	xori	r2,zero,81
  801258:	00801430 	cmpltui	r2,zero,80
  80125c:	0080145c 	xori	r2,zero,81
  801260:	008012b0 	cmpltui	r2,zero,74
  801264:	008012bc 	xorhi	r2,zero,74
  801268:	008012bc 	xorhi	r2,zero,74
  80126c:	00801430 	cmpltui	r2,zero,80
  801270:	008012b0 	cmpltui	r2,zero,74
  801274:	008012a0 	cmpeqi	r2,zero,74
  801278:	008012a0 	cmpeqi	r2,zero,74
  80127c:	008012a0 	cmpeqi	r2,zero,74
  801280:	00801750 	cmplti	r2,zero,93
  801284:	2404b03a 	or	r2,r4,r16
  801288:	1000661e 	bne	r2,zero,801424 <__divdf3+0x2d4>
  80128c:	04c00204 	movi	r19,8
  801290:	0021883a 	mov	r16,zero
  801294:	0025883a 	mov	r18,zero
  801298:	02400084 	movi	r9,2
  80129c:	003fca06 	br	8011c8 <__alt_mem_onchip_mem+0xff7811c8>
  8012a0:	8023883a 	mov	r17,r16
  8012a4:	9011883a 	mov	r8,r18
  8012a8:	e02f883a 	mov	r23,fp
  8012ac:	480f883a 	mov	r7,r9
  8012b0:	00800084 	movi	r2,2
  8012b4:	3881311e 	bne	r7,r2,80177c <__divdf3+0x62c>
  8012b8:	b827883a 	mov	r19,r23
  8012bc:	98c0004c 	andi	r3,r19,1
  8012c0:	0081ffc4 	movi	r2,2047
  8012c4:	000b883a 	mov	r5,zero
  8012c8:	0025883a 	mov	r18,zero
  8012cc:	1004953a 	slli	r2,r2,20
  8012d0:	18c03fcc 	andi	r3,r3,255
  8012d4:	04400434 	movhi	r17,16
  8012d8:	8c7fffc4 	addi	r17,r17,-1
  8012dc:	180697fa 	slli	r3,r3,31
  8012e0:	2c4a703a 	and	r5,r5,r17
  8012e4:	288ab03a 	or	r5,r5,r2
  8012e8:	28c6b03a 	or	r3,r5,r3
  8012ec:	9005883a 	mov	r2,r18
  8012f0:	dfc00d17 	ldw	ra,52(sp)
  8012f4:	df000c17 	ldw	fp,48(sp)
  8012f8:	ddc00b17 	ldw	r23,44(sp)
  8012fc:	dd800a17 	ldw	r22,40(sp)
  801300:	dd400917 	ldw	r21,36(sp)
  801304:	dd000817 	ldw	r20,32(sp)
  801308:	dcc00717 	ldw	r19,28(sp)
  80130c:	dc800617 	ldw	r18,24(sp)
  801310:	dc400517 	ldw	r17,20(sp)
  801314:	dc000417 	ldw	r16,16(sp)
  801318:	dec00e04 	addi	sp,sp,56
  80131c:	f800283a 	ret
  801320:	2404b03a 	or	r2,r4,r16
  801324:	2027883a 	mov	r19,r4
  801328:	10003926 	beq	r2,zero,801410 <__divdf3+0x2c0>
  80132c:	80012e26 	beq	r16,zero,8017e8 <__divdf3+0x698>
  801330:	8009883a 	mov	r4,r16
  801334:	d9800315 	stw	r6,12(sp)
  801338:	d9c00215 	stw	r7,8(sp)
  80133c:	0801b140 	call	801b14 <__clzsi2>
  801340:	d9800317 	ldw	r6,12(sp)
  801344:	d9c00217 	ldw	r7,8(sp)
  801348:	113ffd44 	addi	r4,r2,-11
  80134c:	00c00704 	movi	r3,28
  801350:	19012116 	blt	r3,r4,8017d8 <__divdf3+0x688>
  801354:	00c00744 	movi	r3,29
  801358:	147ffe04 	addi	r17,r2,-8
  80135c:	1907c83a 	sub	r3,r3,r4
  801360:	8460983a 	sll	r16,r16,r17
  801364:	98c6d83a 	srl	r3,r19,r3
  801368:	9c64983a 	sll	r18,r19,r17
  80136c:	1c20b03a 	or	r16,r3,r16
  801370:	1080fcc4 	addi	r2,r2,1011
  801374:	00abc83a 	sub	r21,zero,r2
  801378:	0027883a 	mov	r19,zero
  80137c:	0013883a 	mov	r9,zero
  801380:	003f9106 	br	8011c8 <__alt_mem_onchip_mem+0xff7811c8>
  801384:	3446b03a 	or	r3,r6,r17
  801388:	18001f1e 	bne	r3,zero,801408 <__divdf3+0x2b8>
  80138c:	0023883a 	mov	r17,zero
  801390:	0011883a 	mov	r8,zero
  801394:	01c00084 	movi	r7,2
  801398:	003f9d06 	br	801210 <__alt_mem_onchip_mem+0xff781210>
  80139c:	3446b03a 	or	r3,r6,r17
  8013a0:	18001526 	beq	r3,zero,8013f8 <__divdf3+0x2a8>
  8013a4:	88011b26 	beq	r17,zero,801814 <__divdf3+0x6c4>
  8013a8:	8809883a 	mov	r4,r17
  8013ac:	d9800315 	stw	r6,12(sp)
  8013b0:	da400115 	stw	r9,4(sp)
  8013b4:	0801b140 	call	801b14 <__clzsi2>
  8013b8:	d9800317 	ldw	r6,12(sp)
  8013bc:	da400117 	ldw	r9,4(sp)
  8013c0:	113ffd44 	addi	r4,r2,-11
  8013c4:	00c00704 	movi	r3,28
  8013c8:	19010e16 	blt	r3,r4,801804 <__divdf3+0x6b4>
  8013cc:	00c00744 	movi	r3,29
  8013d0:	123ffe04 	addi	r8,r2,-8
  8013d4:	1907c83a 	sub	r3,r3,r4
  8013d8:	8a22983a 	sll	r17,r17,r8
  8013dc:	30c6d83a 	srl	r3,r6,r3
  8013e0:	3210983a 	sll	r8,r6,r8
  8013e4:	1c62b03a 	or	r17,r3,r17
  8013e8:	1080fcc4 	addi	r2,r2,1011
  8013ec:	0085c83a 	sub	r2,zero,r2
  8013f0:	000f883a 	mov	r7,zero
  8013f4:	003f8606 	br	801210 <__alt_mem_onchip_mem+0xff781210>
  8013f8:	0023883a 	mov	r17,zero
  8013fc:	0011883a 	mov	r8,zero
  801400:	01c00044 	movi	r7,1
  801404:	003f8206 	br	801210 <__alt_mem_onchip_mem+0xff781210>
  801408:	01c000c4 	movi	r7,3
  80140c:	003f8006 	br	801210 <__alt_mem_onchip_mem+0xff781210>
  801410:	04c00104 	movi	r19,4
  801414:	0021883a 	mov	r16,zero
  801418:	0025883a 	mov	r18,zero
  80141c:	02400044 	movi	r9,1
  801420:	003f6906 	br	8011c8 <__alt_mem_onchip_mem+0xff7811c8>
  801424:	04c00304 	movi	r19,12
  801428:	024000c4 	movi	r9,3
  80142c:	003f6606 	br	8011c8 <__alt_mem_onchip_mem+0xff7811c8>
  801430:	01400434 	movhi	r5,16
  801434:	0007883a 	mov	r3,zero
  801438:	297fffc4 	addi	r5,r5,-1
  80143c:	04bfffc4 	movi	r18,-1
  801440:	0081ffc4 	movi	r2,2047
  801444:	003fa106 	br	8012cc <__alt_mem_onchip_mem+0xff7812cc>
  801448:	00c00044 	movi	r3,1
  80144c:	1887c83a 	sub	r3,r3,r2
  801450:	01000e04 	movi	r4,56
  801454:	20c1210e 	bge	r4,r3,8018dc <__divdf3+0x78c>
  801458:	98c0004c 	andi	r3,r19,1
  80145c:	0005883a 	mov	r2,zero
  801460:	000b883a 	mov	r5,zero
  801464:	0025883a 	mov	r18,zero
  801468:	003f9806 	br	8012cc <__alt_mem_onchip_mem+0xff7812cc>
  80146c:	8c00fd36 	bltu	r17,r16,801864 <__divdf3+0x714>
  801470:	8440fb26 	beq	r16,r17,801860 <__divdf3+0x710>
  801474:	8007883a 	mov	r3,r16
  801478:	ad7fffc4 	addi	r21,r21,-1
  80147c:	0021883a 	mov	r16,zero
  801480:	4004d63a 	srli	r2,r8,24
  801484:	8822923a 	slli	r17,r17,8
  801488:	1809883a 	mov	r4,r3
  80148c:	402c923a 	slli	r22,r8,8
  801490:	88b8b03a 	or	fp,r17,r2
  801494:	e028d43a 	srli	r20,fp,16
  801498:	d8c00015 	stw	r3,0(sp)
  80149c:	e5ffffcc 	andi	r23,fp,65535
  8014a0:	a00b883a 	mov	r5,r20
  8014a4:	08010940 	call	801094 <__udivsi3>
  8014a8:	d8c00017 	ldw	r3,0(sp)
  8014ac:	a00b883a 	mov	r5,r20
  8014b0:	d8800315 	stw	r2,12(sp)
  8014b4:	1809883a 	mov	r4,r3
  8014b8:	08010f80 	call	8010f8 <__umodsi3>
  8014bc:	d9800317 	ldw	r6,12(sp)
  8014c0:	1006943a 	slli	r3,r2,16
  8014c4:	9004d43a 	srli	r2,r18,16
  8014c8:	b9a3383a 	mul	r17,r23,r6
  8014cc:	10c4b03a 	or	r2,r2,r3
  8014d0:	1440062e 	bgeu	r2,r17,8014ec <__divdf3+0x39c>
  8014d4:	1705883a 	add	r2,r2,fp
  8014d8:	30ffffc4 	addi	r3,r6,-1
  8014dc:	1700ee36 	bltu	r2,fp,801898 <__divdf3+0x748>
  8014e0:	1440ed2e 	bgeu	r2,r17,801898 <__divdf3+0x748>
  8014e4:	31bfff84 	addi	r6,r6,-2
  8014e8:	1705883a 	add	r2,r2,fp
  8014ec:	1463c83a 	sub	r17,r2,r17
  8014f0:	a00b883a 	mov	r5,r20
  8014f4:	8809883a 	mov	r4,r17
  8014f8:	d9800315 	stw	r6,12(sp)
  8014fc:	08010940 	call	801094 <__udivsi3>
  801500:	a00b883a 	mov	r5,r20
  801504:	8809883a 	mov	r4,r17
  801508:	d8800215 	stw	r2,8(sp)
  80150c:	08010f80 	call	8010f8 <__umodsi3>
  801510:	d9c00217 	ldw	r7,8(sp)
  801514:	1004943a 	slli	r2,r2,16
  801518:	94bfffcc 	andi	r18,r18,65535
  80151c:	b9d1383a 	mul	r8,r23,r7
  801520:	90a4b03a 	or	r18,r18,r2
  801524:	d9800317 	ldw	r6,12(sp)
  801528:	9200062e 	bgeu	r18,r8,801544 <__divdf3+0x3f4>
  80152c:	9725883a 	add	r18,r18,fp
  801530:	38bfffc4 	addi	r2,r7,-1
  801534:	9700d636 	bltu	r18,fp,801890 <__divdf3+0x740>
  801538:	9200d52e 	bgeu	r18,r8,801890 <__divdf3+0x740>
  80153c:	39ffff84 	addi	r7,r7,-2
  801540:	9725883a 	add	r18,r18,fp
  801544:	3004943a 	slli	r2,r6,16
  801548:	b012d43a 	srli	r9,r22,16
  80154c:	b1bfffcc 	andi	r6,r22,65535
  801550:	11e2b03a 	or	r17,r2,r7
  801554:	8806d43a 	srli	r3,r17,16
  801558:	893fffcc 	andi	r4,r17,65535
  80155c:	218b383a 	mul	r5,r4,r6
  801560:	30c5383a 	mul	r2,r6,r3
  801564:	2249383a 	mul	r4,r4,r9
  801568:	280ed43a 	srli	r7,r5,16
  80156c:	9225c83a 	sub	r18,r18,r8
  801570:	2089883a 	add	r4,r4,r2
  801574:	3909883a 	add	r4,r7,r4
  801578:	1a47383a 	mul	r3,r3,r9
  80157c:	2080022e 	bgeu	r4,r2,801588 <__divdf3+0x438>
  801580:	00800074 	movhi	r2,1
  801584:	1887883a 	add	r3,r3,r2
  801588:	2004d43a 	srli	r2,r4,16
  80158c:	2008943a 	slli	r4,r4,16
  801590:	297fffcc 	andi	r5,r5,65535
  801594:	10c7883a 	add	r3,r2,r3
  801598:	2149883a 	add	r4,r4,r5
  80159c:	90c0a536 	bltu	r18,r3,801834 <__divdf3+0x6e4>
  8015a0:	90c0bf26 	beq	r18,r3,8018a0 <__divdf3+0x750>
  8015a4:	90c7c83a 	sub	r3,r18,r3
  8015a8:	810fc83a 	sub	r7,r16,r4
  8015ac:	81e5803a 	cmpltu	r18,r16,r7
  8015b0:	1ca5c83a 	sub	r18,r3,r18
  8015b4:	e480c126 	beq	fp,r18,8018bc <__divdf3+0x76c>
  8015b8:	a00b883a 	mov	r5,r20
  8015bc:	9009883a 	mov	r4,r18
  8015c0:	d9800315 	stw	r6,12(sp)
  8015c4:	d9c00215 	stw	r7,8(sp)
  8015c8:	da400115 	stw	r9,4(sp)
  8015cc:	08010940 	call	801094 <__udivsi3>
  8015d0:	a00b883a 	mov	r5,r20
  8015d4:	9009883a 	mov	r4,r18
  8015d8:	d8800015 	stw	r2,0(sp)
  8015dc:	08010f80 	call	8010f8 <__umodsi3>
  8015e0:	d9c00217 	ldw	r7,8(sp)
  8015e4:	da000017 	ldw	r8,0(sp)
  8015e8:	1006943a 	slli	r3,r2,16
  8015ec:	3804d43a 	srli	r2,r7,16
  8015f0:	ba21383a 	mul	r16,r23,r8
  8015f4:	d9800317 	ldw	r6,12(sp)
  8015f8:	10c4b03a 	or	r2,r2,r3
  8015fc:	da400117 	ldw	r9,4(sp)
  801600:	1400062e 	bgeu	r2,r16,80161c <__divdf3+0x4cc>
  801604:	1705883a 	add	r2,r2,fp
  801608:	40ffffc4 	addi	r3,r8,-1
  80160c:	1700ad36 	bltu	r2,fp,8018c4 <__divdf3+0x774>
  801610:	1400ac2e 	bgeu	r2,r16,8018c4 <__divdf3+0x774>
  801614:	423fff84 	addi	r8,r8,-2
  801618:	1705883a 	add	r2,r2,fp
  80161c:	1421c83a 	sub	r16,r2,r16
  801620:	a00b883a 	mov	r5,r20
  801624:	8009883a 	mov	r4,r16
  801628:	d9800315 	stw	r6,12(sp)
  80162c:	d9c00215 	stw	r7,8(sp)
  801630:	da000015 	stw	r8,0(sp)
  801634:	da400115 	stw	r9,4(sp)
  801638:	08010940 	call	801094 <__udivsi3>
  80163c:	8009883a 	mov	r4,r16
  801640:	a00b883a 	mov	r5,r20
  801644:	1025883a 	mov	r18,r2
  801648:	08010f80 	call	8010f8 <__umodsi3>
  80164c:	d9c00217 	ldw	r7,8(sp)
  801650:	1004943a 	slli	r2,r2,16
  801654:	bcaf383a 	mul	r23,r23,r18
  801658:	393fffcc 	andi	r4,r7,65535
  80165c:	2088b03a 	or	r4,r4,r2
  801660:	d9800317 	ldw	r6,12(sp)
  801664:	da000017 	ldw	r8,0(sp)
  801668:	da400117 	ldw	r9,4(sp)
  80166c:	25c0062e 	bgeu	r4,r23,801688 <__divdf3+0x538>
  801670:	2709883a 	add	r4,r4,fp
  801674:	90bfffc4 	addi	r2,r18,-1
  801678:	27009436 	bltu	r4,fp,8018cc <__divdf3+0x77c>
  80167c:	25c0932e 	bgeu	r4,r23,8018cc <__divdf3+0x77c>
  801680:	94bfff84 	addi	r18,r18,-2
  801684:	2709883a 	add	r4,r4,fp
  801688:	4004943a 	slli	r2,r8,16
  80168c:	25efc83a 	sub	r23,r4,r23
  801690:	1490b03a 	or	r8,r2,r18
  801694:	4008d43a 	srli	r4,r8,16
  801698:	40ffffcc 	andi	r3,r8,65535
  80169c:	30c5383a 	mul	r2,r6,r3
  8016a0:	1a47383a 	mul	r3,r3,r9
  8016a4:	310d383a 	mul	r6,r6,r4
  8016a8:	100ad43a 	srli	r5,r2,16
  8016ac:	4913383a 	mul	r9,r9,r4
  8016b0:	1987883a 	add	r3,r3,r6
  8016b4:	28c7883a 	add	r3,r5,r3
  8016b8:	1980022e 	bgeu	r3,r6,8016c4 <__divdf3+0x574>
  8016bc:	01000074 	movhi	r4,1
  8016c0:	4913883a 	add	r9,r9,r4
  8016c4:	1808d43a 	srli	r4,r3,16
  8016c8:	1806943a 	slli	r3,r3,16
  8016cc:	10bfffcc 	andi	r2,r2,65535
  8016d0:	2253883a 	add	r9,r4,r9
  8016d4:	1887883a 	add	r3,r3,r2
  8016d8:	ba403836 	bltu	r23,r9,8017bc <__divdf3+0x66c>
  8016dc:	ba403626 	beq	r23,r9,8017b8 <__divdf3+0x668>
  8016e0:	42000054 	ori	r8,r8,1
  8016e4:	a880ffc4 	addi	r2,r21,1023
  8016e8:	00bf570e 	bge	zero,r2,801448 <__alt_mem_onchip_mem+0xff781448>
  8016ec:	40c001cc 	andi	r3,r8,7
  8016f0:	18000726 	beq	r3,zero,801710 <__divdf3+0x5c0>
  8016f4:	40c003cc 	andi	r3,r8,15
  8016f8:	01000104 	movi	r4,4
  8016fc:	19000426 	beq	r3,r4,801710 <__divdf3+0x5c0>
  801700:	4107883a 	add	r3,r8,r4
  801704:	1a11803a 	cmpltu	r8,r3,r8
  801708:	8a23883a 	add	r17,r17,r8
  80170c:	1811883a 	mov	r8,r3
  801710:	88c0402c 	andhi	r3,r17,256
  801714:	18000426 	beq	r3,zero,801728 <__divdf3+0x5d8>
  801718:	00ffc034 	movhi	r3,65280
  80171c:	18ffffc4 	addi	r3,r3,-1
  801720:	a8810004 	addi	r2,r21,1024
  801724:	88e2703a 	and	r17,r17,r3
  801728:	00c1ff84 	movi	r3,2046
  80172c:	18bee316 	blt	r3,r2,8012bc <__alt_mem_onchip_mem+0xff7812bc>
  801730:	8824977a 	slli	r18,r17,29
  801734:	4010d0fa 	srli	r8,r8,3
  801738:	8822927a 	slli	r17,r17,9
  80173c:	1081ffcc 	andi	r2,r2,2047
  801740:	9224b03a 	or	r18,r18,r8
  801744:	880ad33a 	srli	r5,r17,12
  801748:	98c0004c 	andi	r3,r19,1
  80174c:	003edf06 	br	8012cc <__alt_mem_onchip_mem+0xff7812cc>
  801750:	8080022c 	andhi	r2,r16,8
  801754:	10001226 	beq	r2,zero,8017a0 <__divdf3+0x650>
  801758:	8880022c 	andhi	r2,r17,8
  80175c:	1000101e 	bne	r2,zero,8017a0 <__divdf3+0x650>
  801760:	00800434 	movhi	r2,16
  801764:	89400234 	orhi	r5,r17,8
  801768:	10bfffc4 	addi	r2,r2,-1
  80176c:	b007883a 	mov	r3,r22
  801770:	288a703a 	and	r5,r5,r2
  801774:	4025883a 	mov	r18,r8
  801778:	003f3106 	br	801440 <__alt_mem_onchip_mem+0xff781440>
  80177c:	008000c4 	movi	r2,3
  801780:	3880a626 	beq	r7,r2,801a1c <__divdf3+0x8cc>
  801784:	00800044 	movi	r2,1
  801788:	3880521e 	bne	r7,r2,8018d4 <__divdf3+0x784>
  80178c:	b807883a 	mov	r3,r23
  801790:	0005883a 	mov	r2,zero
  801794:	000b883a 	mov	r5,zero
  801798:	0025883a 	mov	r18,zero
  80179c:	003ecb06 	br	8012cc <__alt_mem_onchip_mem+0xff7812cc>
  8017a0:	00800434 	movhi	r2,16
  8017a4:	81400234 	orhi	r5,r16,8
  8017a8:	10bfffc4 	addi	r2,r2,-1
  8017ac:	a007883a 	mov	r3,r20
  8017b0:	288a703a 	and	r5,r5,r2
  8017b4:	003f2206 	br	801440 <__alt_mem_onchip_mem+0xff781440>
  8017b8:	183fca26 	beq	r3,zero,8016e4 <__alt_mem_onchip_mem+0xff7816e4>
  8017bc:	e5ef883a 	add	r23,fp,r23
  8017c0:	40bfffc4 	addi	r2,r8,-1
  8017c4:	bf00392e 	bgeu	r23,fp,8018ac <__divdf3+0x75c>
  8017c8:	1011883a 	mov	r8,r2
  8017cc:	ba7fc41e 	bne	r23,r9,8016e0 <__alt_mem_onchip_mem+0xff7816e0>
  8017d0:	b0ffc31e 	bne	r22,r3,8016e0 <__alt_mem_onchip_mem+0xff7816e0>
  8017d4:	003fc306 	br	8016e4 <__alt_mem_onchip_mem+0xff7816e4>
  8017d8:	143ff604 	addi	r16,r2,-40
  8017dc:	9c20983a 	sll	r16,r19,r16
  8017e0:	0025883a 	mov	r18,zero
  8017e4:	003ee206 	br	801370 <__alt_mem_onchip_mem+0xff781370>
  8017e8:	d9800315 	stw	r6,12(sp)
  8017ec:	d9c00215 	stw	r7,8(sp)
  8017f0:	0801b140 	call	801b14 <__clzsi2>
  8017f4:	10800804 	addi	r2,r2,32
  8017f8:	d9c00217 	ldw	r7,8(sp)
  8017fc:	d9800317 	ldw	r6,12(sp)
  801800:	003ed106 	br	801348 <__alt_mem_onchip_mem+0xff781348>
  801804:	147ff604 	addi	r17,r2,-40
  801808:	3462983a 	sll	r17,r6,r17
  80180c:	0011883a 	mov	r8,zero
  801810:	003ef506 	br	8013e8 <__alt_mem_onchip_mem+0xff7813e8>
  801814:	3009883a 	mov	r4,r6
  801818:	d9800315 	stw	r6,12(sp)
  80181c:	da400115 	stw	r9,4(sp)
  801820:	0801b140 	call	801b14 <__clzsi2>
  801824:	10800804 	addi	r2,r2,32
  801828:	da400117 	ldw	r9,4(sp)
  80182c:	d9800317 	ldw	r6,12(sp)
  801830:	003ee306 	br	8013c0 <__alt_mem_onchip_mem+0xff7813c0>
  801834:	85a1883a 	add	r16,r16,r22
  801838:	8585803a 	cmpltu	r2,r16,r22
  80183c:	1705883a 	add	r2,r2,fp
  801840:	14a5883a 	add	r18,r2,r18
  801844:	88bfffc4 	addi	r2,r17,-1
  801848:	e4800c2e 	bgeu	fp,r18,80187c <__divdf3+0x72c>
  80184c:	90c03e36 	bltu	r18,r3,801948 <__divdf3+0x7f8>
  801850:	1c806926 	beq	r3,r18,8019f8 <__divdf3+0x8a8>
  801854:	90c7c83a 	sub	r3,r18,r3
  801858:	1023883a 	mov	r17,r2
  80185c:	003f5206 	br	8015a8 <__alt_mem_onchip_mem+0xff7815a8>
  801860:	923f0436 	bltu	r18,r8,801474 <__alt_mem_onchip_mem+0xff781474>
  801864:	800897fa 	slli	r4,r16,31
  801868:	9004d07a 	srli	r2,r18,1
  80186c:	8006d07a 	srli	r3,r16,1
  801870:	902097fa 	slli	r16,r18,31
  801874:	20a4b03a 	or	r18,r4,r2
  801878:	003f0106 	br	801480 <__alt_mem_onchip_mem+0xff781480>
  80187c:	e4bff51e 	bne	fp,r18,801854 <__alt_mem_onchip_mem+0xff781854>
  801880:	85bff22e 	bgeu	r16,r22,80184c <__alt_mem_onchip_mem+0xff78184c>
  801884:	e0c7c83a 	sub	r3,fp,r3
  801888:	1023883a 	mov	r17,r2
  80188c:	003f4606 	br	8015a8 <__alt_mem_onchip_mem+0xff7815a8>
  801890:	100f883a 	mov	r7,r2
  801894:	003f2b06 	br	801544 <__alt_mem_onchip_mem+0xff781544>
  801898:	180d883a 	mov	r6,r3
  80189c:	003f1306 	br	8014ec <__alt_mem_onchip_mem+0xff7814ec>
  8018a0:	813fe436 	bltu	r16,r4,801834 <__alt_mem_onchip_mem+0xff781834>
  8018a4:	0007883a 	mov	r3,zero
  8018a8:	003f3f06 	br	8015a8 <__alt_mem_onchip_mem+0xff7815a8>
  8018ac:	ba402c36 	bltu	r23,r9,801960 <__divdf3+0x810>
  8018b0:	4dc05426 	beq	r9,r23,801a04 <__divdf3+0x8b4>
  8018b4:	1011883a 	mov	r8,r2
  8018b8:	003f8906 	br	8016e0 <__alt_mem_onchip_mem+0xff7816e0>
  8018bc:	023fffc4 	movi	r8,-1
  8018c0:	003f8806 	br	8016e4 <__alt_mem_onchip_mem+0xff7816e4>
  8018c4:	1811883a 	mov	r8,r3
  8018c8:	003f5406 	br	80161c <__alt_mem_onchip_mem+0xff78161c>
  8018cc:	1025883a 	mov	r18,r2
  8018d0:	003f6d06 	br	801688 <__alt_mem_onchip_mem+0xff781688>
  8018d4:	b827883a 	mov	r19,r23
  8018d8:	003f8206 	br	8016e4 <__alt_mem_onchip_mem+0xff7816e4>
  8018dc:	010007c4 	movi	r4,31
  8018e0:	20c02616 	blt	r4,r3,80197c <__divdf3+0x82c>
  8018e4:	00800804 	movi	r2,32
  8018e8:	10c5c83a 	sub	r2,r2,r3
  8018ec:	888a983a 	sll	r5,r17,r2
  8018f0:	40c8d83a 	srl	r4,r8,r3
  8018f4:	4084983a 	sll	r2,r8,r2
  8018f8:	88e2d83a 	srl	r17,r17,r3
  8018fc:	2906b03a 	or	r3,r5,r4
  801900:	1004c03a 	cmpne	r2,r2,zero
  801904:	1886b03a 	or	r3,r3,r2
  801908:	188001cc 	andi	r2,r3,7
  80190c:	10000726 	beq	r2,zero,80192c <__divdf3+0x7dc>
  801910:	188003cc 	andi	r2,r3,15
  801914:	01000104 	movi	r4,4
  801918:	11000426 	beq	r2,r4,80192c <__divdf3+0x7dc>
  80191c:	1805883a 	mov	r2,r3
  801920:	10c00104 	addi	r3,r2,4
  801924:	1885803a 	cmpltu	r2,r3,r2
  801928:	88a3883a 	add	r17,r17,r2
  80192c:	8880202c 	andhi	r2,r17,128
  801930:	10002726 	beq	r2,zero,8019d0 <__divdf3+0x880>
  801934:	98c0004c 	andi	r3,r19,1
  801938:	00800044 	movi	r2,1
  80193c:	000b883a 	mov	r5,zero
  801940:	0025883a 	mov	r18,zero
  801944:	003e6106 	br	8012cc <__alt_mem_onchip_mem+0xff7812cc>
  801948:	85a1883a 	add	r16,r16,r22
  80194c:	8585803a 	cmpltu	r2,r16,r22
  801950:	1705883a 	add	r2,r2,fp
  801954:	14a5883a 	add	r18,r2,r18
  801958:	8c7fff84 	addi	r17,r17,-2
  80195c:	003f1106 	br	8015a4 <__alt_mem_onchip_mem+0xff7815a4>
  801960:	b589883a 	add	r4,r22,r22
  801964:	25ad803a 	cmpltu	r22,r4,r22
  801968:	b739883a 	add	fp,r22,fp
  80196c:	40bfff84 	addi	r2,r8,-2
  801970:	bf2f883a 	add	r23,r23,fp
  801974:	202d883a 	mov	r22,r4
  801978:	003f9306 	br	8017c8 <__alt_mem_onchip_mem+0xff7817c8>
  80197c:	013ff844 	movi	r4,-31
  801980:	2085c83a 	sub	r2,r4,r2
  801984:	8888d83a 	srl	r4,r17,r2
  801988:	00800804 	movi	r2,32
  80198c:	18802126 	beq	r3,r2,801a14 <__divdf3+0x8c4>
  801990:	00801004 	movi	r2,64
  801994:	10c5c83a 	sub	r2,r2,r3
  801998:	8884983a 	sll	r2,r17,r2
  80199c:	1204b03a 	or	r2,r2,r8
  8019a0:	1004c03a 	cmpne	r2,r2,zero
  8019a4:	2084b03a 	or	r2,r4,r2
  8019a8:	144001cc 	andi	r17,r2,7
  8019ac:	88000d1e 	bne	r17,zero,8019e4 <__divdf3+0x894>
  8019b0:	000b883a 	mov	r5,zero
  8019b4:	1024d0fa 	srli	r18,r2,3
  8019b8:	98c0004c 	andi	r3,r19,1
  8019bc:	0005883a 	mov	r2,zero
  8019c0:	9464b03a 	or	r18,r18,r17
  8019c4:	003e4106 	br	8012cc <__alt_mem_onchip_mem+0xff7812cc>
  8019c8:	1007883a 	mov	r3,r2
  8019cc:	0023883a 	mov	r17,zero
  8019d0:	880a927a 	slli	r5,r17,9
  8019d4:	1805883a 	mov	r2,r3
  8019d8:	8822977a 	slli	r17,r17,29
  8019dc:	280ad33a 	srli	r5,r5,12
  8019e0:	003ff406 	br	8019b4 <__alt_mem_onchip_mem+0xff7819b4>
  8019e4:	10c003cc 	andi	r3,r2,15
  8019e8:	01000104 	movi	r4,4
  8019ec:	193ff626 	beq	r3,r4,8019c8 <__alt_mem_onchip_mem+0xff7819c8>
  8019f0:	0023883a 	mov	r17,zero
  8019f4:	003fca06 	br	801920 <__alt_mem_onchip_mem+0xff781920>
  8019f8:	813fd336 	bltu	r16,r4,801948 <__alt_mem_onchip_mem+0xff781948>
  8019fc:	1023883a 	mov	r17,r2
  801a00:	003fa806 	br	8018a4 <__alt_mem_onchip_mem+0xff7818a4>
  801a04:	b0ffd636 	bltu	r22,r3,801960 <__alt_mem_onchip_mem+0xff781960>
  801a08:	1011883a 	mov	r8,r2
  801a0c:	b0ff341e 	bne	r22,r3,8016e0 <__alt_mem_onchip_mem+0xff7816e0>
  801a10:	003f3406 	br	8016e4 <__alt_mem_onchip_mem+0xff7816e4>
  801a14:	0005883a 	mov	r2,zero
  801a18:	003fe006 	br	80199c <__alt_mem_onchip_mem+0xff78199c>
  801a1c:	00800434 	movhi	r2,16
  801a20:	89400234 	orhi	r5,r17,8
  801a24:	10bfffc4 	addi	r2,r2,-1
  801a28:	b807883a 	mov	r3,r23
  801a2c:	288a703a 	and	r5,r5,r2
  801a30:	4025883a 	mov	r18,r8
  801a34:	003e8206 	br	801440 <__alt_mem_onchip_mem+0xff781440>

00801a38 <__floatsidf>:
  801a38:	defffd04 	addi	sp,sp,-12
  801a3c:	dfc00215 	stw	ra,8(sp)
  801a40:	dc400115 	stw	r17,4(sp)
  801a44:	dc000015 	stw	r16,0(sp)
  801a48:	20002b26 	beq	r4,zero,801af8 <__floatsidf+0xc0>
  801a4c:	2023883a 	mov	r17,r4
  801a50:	2020d7fa 	srli	r16,r4,31
  801a54:	20002d16 	blt	r4,zero,801b0c <__floatsidf+0xd4>
  801a58:	8809883a 	mov	r4,r17
  801a5c:	0801b140 	call	801b14 <__clzsi2>
  801a60:	01410784 	movi	r5,1054
  801a64:	288bc83a 	sub	r5,r5,r2
  801a68:	01010cc4 	movi	r4,1075
  801a6c:	2149c83a 	sub	r4,r4,r5
  801a70:	00c007c4 	movi	r3,31
  801a74:	1900160e 	bge	r3,r4,801ad0 <__floatsidf+0x98>
  801a78:	00c104c4 	movi	r3,1043
  801a7c:	1947c83a 	sub	r3,r3,r5
  801a80:	88c6983a 	sll	r3,r17,r3
  801a84:	00800434 	movhi	r2,16
  801a88:	10bfffc4 	addi	r2,r2,-1
  801a8c:	1886703a 	and	r3,r3,r2
  801a90:	2941ffcc 	andi	r5,r5,2047
  801a94:	800d883a 	mov	r6,r16
  801a98:	0005883a 	mov	r2,zero
  801a9c:	280a953a 	slli	r5,r5,20
  801aa0:	31803fcc 	andi	r6,r6,255
  801aa4:	01000434 	movhi	r4,16
  801aa8:	300c97fa 	slli	r6,r6,31
  801aac:	213fffc4 	addi	r4,r4,-1
  801ab0:	1906703a 	and	r3,r3,r4
  801ab4:	1946b03a 	or	r3,r3,r5
  801ab8:	1986b03a 	or	r3,r3,r6
  801abc:	dfc00217 	ldw	ra,8(sp)
  801ac0:	dc400117 	ldw	r17,4(sp)
  801ac4:	dc000017 	ldw	r16,0(sp)
  801ac8:	dec00304 	addi	sp,sp,12
  801acc:	f800283a 	ret
  801ad0:	00c002c4 	movi	r3,11
  801ad4:	1887c83a 	sub	r3,r3,r2
  801ad8:	88c6d83a 	srl	r3,r17,r3
  801adc:	8904983a 	sll	r2,r17,r4
  801ae0:	01000434 	movhi	r4,16
  801ae4:	213fffc4 	addi	r4,r4,-1
  801ae8:	2941ffcc 	andi	r5,r5,2047
  801aec:	1906703a 	and	r3,r3,r4
  801af0:	800d883a 	mov	r6,r16
  801af4:	003fe906 	br	801a9c <__alt_mem_onchip_mem+0xff781a9c>
  801af8:	000d883a 	mov	r6,zero
  801afc:	000b883a 	mov	r5,zero
  801b00:	0007883a 	mov	r3,zero
  801b04:	0005883a 	mov	r2,zero
  801b08:	003fe406 	br	801a9c <__alt_mem_onchip_mem+0xff781a9c>
  801b0c:	0123c83a 	sub	r17,zero,r4
  801b10:	003fd106 	br	801a58 <__alt_mem_onchip_mem+0xff781a58>

00801b14 <__clzsi2>:
  801b14:	00bfffd4 	movui	r2,65535
  801b18:	11000536 	bltu	r2,r4,801b30 <__clzsi2+0x1c>
  801b1c:	00803fc4 	movi	r2,255
  801b20:	11000f36 	bltu	r2,r4,801b60 <__clzsi2+0x4c>
  801b24:	00800804 	movi	r2,32
  801b28:	0007883a 	mov	r3,zero
  801b2c:	00000506 	br	801b44 <__clzsi2+0x30>
  801b30:	00804034 	movhi	r2,256
  801b34:	10bfffc4 	addi	r2,r2,-1
  801b38:	11000c2e 	bgeu	r2,r4,801b6c <__clzsi2+0x58>
  801b3c:	00800204 	movi	r2,8
  801b40:	00c00604 	movi	r3,24
  801b44:	20c8d83a 	srl	r4,r4,r3
  801b48:	00c02074 	movhi	r3,129
  801b4c:	18caa584 	addi	r3,r3,10902
  801b50:	1909883a 	add	r4,r3,r4
  801b54:	20c00003 	ldbu	r3,0(r4)
  801b58:	10c5c83a 	sub	r2,r2,r3
  801b5c:	f800283a 	ret
  801b60:	00800604 	movi	r2,24
  801b64:	00c00204 	movi	r3,8
  801b68:	003ff606 	br	801b44 <__alt_mem_onchip_mem+0xff781b44>
  801b6c:	00800404 	movi	r2,16
  801b70:	1007883a 	mov	r3,r2
  801b74:	003ff306 	br	801b44 <__alt_mem_onchip_mem+0xff781b44>

00801b78 <_fgetc_r>:
  801b78:	defffd04 	addi	sp,sp,-12
  801b7c:	dc000115 	stw	r16,4(sp)
  801b80:	dfc00215 	stw	ra,8(sp)
  801b84:	2021883a 	mov	r16,r4
  801b88:	20000226 	beq	r4,zero,801b94 <_fgetc_r+0x1c>
  801b8c:	20800e17 	ldw	r2,56(r4)
  801b90:	10000c26 	beq	r2,zero,801bc4 <_fgetc_r+0x4c>
  801b94:	28800117 	ldw	r2,4(r5)
  801b98:	10bfffc4 	addi	r2,r2,-1
  801b9c:	28800115 	stw	r2,4(r5)
  801ba0:	10000c16 	blt	r2,zero,801bd4 <_fgetc_r+0x5c>
  801ba4:	28800017 	ldw	r2,0(r5)
  801ba8:	10c00044 	addi	r3,r2,1
  801bac:	28c00015 	stw	r3,0(r5)
  801bb0:	10800003 	ldbu	r2,0(r2)
  801bb4:	dfc00217 	ldw	ra,8(sp)
  801bb8:	dc000117 	ldw	r16,4(sp)
  801bbc:	dec00304 	addi	sp,sp,12
  801bc0:	f800283a 	ret
  801bc4:	d9400015 	stw	r5,0(sp)
  801bc8:	0801fc00 	call	801fc0 <__sinit>
  801bcc:	d9400017 	ldw	r5,0(sp)
  801bd0:	003ff006 	br	801b94 <__alt_mem_onchip_mem+0xff781b94>
  801bd4:	8009883a 	mov	r4,r16
  801bd8:	dfc00217 	ldw	ra,8(sp)
  801bdc:	dc000117 	ldw	r16,4(sp)
  801be0:	dec00304 	addi	sp,sp,12
  801be4:	08039541 	jmpi	803954 <__srget_r>

00801be8 <fgetc>:
  801be8:	00802074 	movhi	r2,129
  801bec:	defffd04 	addi	sp,sp,-12
  801bf0:	10933e04 	addi	r2,r2,19704
  801bf4:	dc400115 	stw	r17,4(sp)
  801bf8:	14400017 	ldw	r17,0(r2)
  801bfc:	dc000015 	stw	r16,0(sp)
  801c00:	dfc00215 	stw	ra,8(sp)
  801c04:	2021883a 	mov	r16,r4
  801c08:	88000226 	beq	r17,zero,801c14 <fgetc+0x2c>
  801c0c:	88800e17 	ldw	r2,56(r17)
  801c10:	10000d26 	beq	r2,zero,801c48 <fgetc+0x60>
  801c14:	80800117 	ldw	r2,4(r16)
  801c18:	10bfffc4 	addi	r2,r2,-1
  801c1c:	80800115 	stw	r2,4(r16)
  801c20:	10000c16 	blt	r2,zero,801c54 <fgetc+0x6c>
  801c24:	80800017 	ldw	r2,0(r16)
  801c28:	10c00044 	addi	r3,r2,1
  801c2c:	80c00015 	stw	r3,0(r16)
  801c30:	10800003 	ldbu	r2,0(r2)
  801c34:	dfc00217 	ldw	ra,8(sp)
  801c38:	dc400117 	ldw	r17,4(sp)
  801c3c:	dc000017 	ldw	r16,0(sp)
  801c40:	dec00304 	addi	sp,sp,12
  801c44:	f800283a 	ret
  801c48:	8809883a 	mov	r4,r17
  801c4c:	0801fc00 	call	801fc0 <__sinit>
  801c50:	003ff006 	br	801c14 <__alt_mem_onchip_mem+0xff781c14>
  801c54:	800b883a 	mov	r5,r16
  801c58:	8809883a 	mov	r4,r17
  801c5c:	dfc00217 	ldw	ra,8(sp)
  801c60:	dc400117 	ldw	r17,4(sp)
  801c64:	dc000017 	ldw	r16,0(sp)
  801c68:	dec00304 	addi	sp,sp,12
  801c6c:	08039541 	jmpi	803954 <__srget_r>

00801c70 <__fp_unlock>:
  801c70:	0005883a 	mov	r2,zero
  801c74:	f800283a 	ret

00801c78 <_cleanup_r>:
  801c78:	01402034 	movhi	r5,128
  801c7c:	295eaf04 	addi	r5,r5,31420
  801c80:	08027a81 	jmpi	8027a8 <_fwalk_reent>

00801c84 <__sinit.part.1>:
  801c84:	defff704 	addi	sp,sp,-36
  801c88:	00c02034 	movhi	r3,128
  801c8c:	dfc00815 	stw	ra,32(sp)
  801c90:	ddc00715 	stw	r23,28(sp)
  801c94:	dd800615 	stw	r22,24(sp)
  801c98:	dd400515 	stw	r21,20(sp)
  801c9c:	dd000415 	stw	r20,16(sp)
  801ca0:	dcc00315 	stw	r19,12(sp)
  801ca4:	dc800215 	stw	r18,8(sp)
  801ca8:	dc400115 	stw	r17,4(sp)
  801cac:	dc000015 	stw	r16,0(sp)
  801cb0:	18c71e04 	addi	r3,r3,7288
  801cb4:	24000117 	ldw	r16,4(r4)
  801cb8:	20c00f15 	stw	r3,60(r4)
  801cbc:	2080bb04 	addi	r2,r4,748
  801cc0:	00c000c4 	movi	r3,3
  801cc4:	20c0b915 	stw	r3,740(r4)
  801cc8:	2080ba15 	stw	r2,744(r4)
  801ccc:	2000b815 	stw	zero,736(r4)
  801cd0:	05c00204 	movi	r23,8
  801cd4:	00800104 	movi	r2,4
  801cd8:	2025883a 	mov	r18,r4
  801cdc:	b80d883a 	mov	r6,r23
  801ce0:	81001704 	addi	r4,r16,92
  801ce4:	000b883a 	mov	r5,zero
  801ce8:	80000015 	stw	zero,0(r16)
  801cec:	80000115 	stw	zero,4(r16)
  801cf0:	80000215 	stw	zero,8(r16)
  801cf4:	8080030d 	sth	r2,12(r16)
  801cf8:	80001915 	stw	zero,100(r16)
  801cfc:	8000038d 	sth	zero,14(r16)
  801d00:	80000415 	stw	zero,16(r16)
  801d04:	80000515 	stw	zero,20(r16)
  801d08:	80000615 	stw	zero,24(r16)
  801d0c:	08033340 	call	803334 <memset>
  801d10:	05802034 	movhi	r22,128
  801d14:	94400217 	ldw	r17,8(r18)
  801d18:	05402034 	movhi	r21,128
  801d1c:	05002034 	movhi	r20,128
  801d20:	04c02034 	movhi	r19,128
  801d24:	b58e8c04 	addi	r22,r22,14896
  801d28:	ad4ea304 	addi	r21,r21,14988
  801d2c:	a50ec204 	addi	r20,r20,15112
  801d30:	9cced904 	addi	r19,r19,15204
  801d34:	85800815 	stw	r22,32(r16)
  801d38:	85400915 	stw	r21,36(r16)
  801d3c:	85000a15 	stw	r20,40(r16)
  801d40:	84c00b15 	stw	r19,44(r16)
  801d44:	84000715 	stw	r16,28(r16)
  801d48:	00800284 	movi	r2,10
  801d4c:	8880030d 	sth	r2,12(r17)
  801d50:	00800044 	movi	r2,1
  801d54:	b80d883a 	mov	r6,r23
  801d58:	89001704 	addi	r4,r17,92
  801d5c:	000b883a 	mov	r5,zero
  801d60:	88000015 	stw	zero,0(r17)
  801d64:	88000115 	stw	zero,4(r17)
  801d68:	88000215 	stw	zero,8(r17)
  801d6c:	88001915 	stw	zero,100(r17)
  801d70:	8880038d 	sth	r2,14(r17)
  801d74:	88000415 	stw	zero,16(r17)
  801d78:	88000515 	stw	zero,20(r17)
  801d7c:	88000615 	stw	zero,24(r17)
  801d80:	08033340 	call	803334 <memset>
  801d84:	94000317 	ldw	r16,12(r18)
  801d88:	00800484 	movi	r2,18
  801d8c:	8c400715 	stw	r17,28(r17)
  801d90:	8d800815 	stw	r22,32(r17)
  801d94:	8d400915 	stw	r21,36(r17)
  801d98:	8d000a15 	stw	r20,40(r17)
  801d9c:	8cc00b15 	stw	r19,44(r17)
  801da0:	8080030d 	sth	r2,12(r16)
  801da4:	00800084 	movi	r2,2
  801da8:	80000015 	stw	zero,0(r16)
  801dac:	80000115 	stw	zero,4(r16)
  801db0:	80000215 	stw	zero,8(r16)
  801db4:	80001915 	stw	zero,100(r16)
  801db8:	8080038d 	sth	r2,14(r16)
  801dbc:	80000415 	stw	zero,16(r16)
  801dc0:	80000515 	stw	zero,20(r16)
  801dc4:	80000615 	stw	zero,24(r16)
  801dc8:	b80d883a 	mov	r6,r23
  801dcc:	000b883a 	mov	r5,zero
  801dd0:	81001704 	addi	r4,r16,92
  801dd4:	08033340 	call	803334 <memset>
  801dd8:	00800044 	movi	r2,1
  801ddc:	84000715 	stw	r16,28(r16)
  801de0:	85800815 	stw	r22,32(r16)
  801de4:	85400915 	stw	r21,36(r16)
  801de8:	85000a15 	stw	r20,40(r16)
  801dec:	84c00b15 	stw	r19,44(r16)
  801df0:	90800e15 	stw	r2,56(r18)
  801df4:	dfc00817 	ldw	ra,32(sp)
  801df8:	ddc00717 	ldw	r23,28(sp)
  801dfc:	dd800617 	ldw	r22,24(sp)
  801e00:	dd400517 	ldw	r21,20(sp)
  801e04:	dd000417 	ldw	r20,16(sp)
  801e08:	dcc00317 	ldw	r19,12(sp)
  801e0c:	dc800217 	ldw	r18,8(sp)
  801e10:	dc400117 	ldw	r17,4(sp)
  801e14:	dc000017 	ldw	r16,0(sp)
  801e18:	dec00904 	addi	sp,sp,36
  801e1c:	f800283a 	ret

00801e20 <__fp_lock>:
  801e20:	0005883a 	mov	r2,zero
  801e24:	f800283a 	ret

00801e28 <__sfmoreglue>:
  801e28:	defffc04 	addi	sp,sp,-16
  801e2c:	dc400115 	stw	r17,4(sp)
  801e30:	2c7fffc4 	addi	r17,r5,-1
  801e34:	8c401a24 	muli	r17,r17,104
  801e38:	dc800215 	stw	r18,8(sp)
  801e3c:	2825883a 	mov	r18,r5
  801e40:	89401d04 	addi	r5,r17,116
  801e44:	dc000015 	stw	r16,0(sp)
  801e48:	dfc00315 	stw	ra,12(sp)
  801e4c:	0802b280 	call	802b28 <_malloc_r>
  801e50:	1021883a 	mov	r16,r2
  801e54:	10000726 	beq	r2,zero,801e74 <__sfmoreglue+0x4c>
  801e58:	11000304 	addi	r4,r2,12
  801e5c:	10000015 	stw	zero,0(r2)
  801e60:	14800115 	stw	r18,4(r2)
  801e64:	11000215 	stw	r4,8(r2)
  801e68:	89801a04 	addi	r6,r17,104
  801e6c:	000b883a 	mov	r5,zero
  801e70:	08033340 	call	803334 <memset>
  801e74:	8005883a 	mov	r2,r16
  801e78:	dfc00317 	ldw	ra,12(sp)
  801e7c:	dc800217 	ldw	r18,8(sp)
  801e80:	dc400117 	ldw	r17,4(sp)
  801e84:	dc000017 	ldw	r16,0(sp)
  801e88:	dec00404 	addi	sp,sp,16
  801e8c:	f800283a 	ret

00801e90 <__sfp>:
  801e90:	defffb04 	addi	sp,sp,-20
  801e94:	dc000015 	stw	r16,0(sp)
  801e98:	04002074 	movhi	r16,129
  801e9c:	84133d04 	addi	r16,r16,19700
  801ea0:	dcc00315 	stw	r19,12(sp)
  801ea4:	2027883a 	mov	r19,r4
  801ea8:	81000017 	ldw	r4,0(r16)
  801eac:	dfc00415 	stw	ra,16(sp)
  801eb0:	dc800215 	stw	r18,8(sp)
  801eb4:	20800e17 	ldw	r2,56(r4)
  801eb8:	dc400115 	stw	r17,4(sp)
  801ebc:	1000021e 	bne	r2,zero,801ec8 <__sfp+0x38>
  801ec0:	0801c840 	call	801c84 <__sinit.part.1>
  801ec4:	81000017 	ldw	r4,0(r16)
  801ec8:	2480b804 	addi	r18,r4,736
  801ecc:	047fffc4 	movi	r17,-1
  801ed0:	91000117 	ldw	r4,4(r18)
  801ed4:	94000217 	ldw	r16,8(r18)
  801ed8:	213fffc4 	addi	r4,r4,-1
  801edc:	20000a16 	blt	r4,zero,801f08 <__sfp+0x78>
  801ee0:	8080030f 	ldh	r2,12(r16)
  801ee4:	10000c26 	beq	r2,zero,801f18 <__sfp+0x88>
  801ee8:	80c01d04 	addi	r3,r16,116
  801eec:	00000206 	br	801ef8 <__sfp+0x68>
  801ef0:	18bfe60f 	ldh	r2,-104(r3)
  801ef4:	10000826 	beq	r2,zero,801f18 <__sfp+0x88>
  801ef8:	213fffc4 	addi	r4,r4,-1
  801efc:	1c3ffd04 	addi	r16,r3,-12
  801f00:	18c01a04 	addi	r3,r3,104
  801f04:	247ffa1e 	bne	r4,r17,801ef0 <__alt_mem_onchip_mem+0xff781ef0>
  801f08:	90800017 	ldw	r2,0(r18)
  801f0c:	10001d26 	beq	r2,zero,801f84 <__sfp+0xf4>
  801f10:	1025883a 	mov	r18,r2
  801f14:	003fee06 	br	801ed0 <__alt_mem_onchip_mem+0xff781ed0>
  801f18:	00bfffc4 	movi	r2,-1
  801f1c:	8080038d 	sth	r2,14(r16)
  801f20:	00800044 	movi	r2,1
  801f24:	8080030d 	sth	r2,12(r16)
  801f28:	80001915 	stw	zero,100(r16)
  801f2c:	80000015 	stw	zero,0(r16)
  801f30:	80000215 	stw	zero,8(r16)
  801f34:	80000115 	stw	zero,4(r16)
  801f38:	80000415 	stw	zero,16(r16)
  801f3c:	80000515 	stw	zero,20(r16)
  801f40:	80000615 	stw	zero,24(r16)
  801f44:	01800204 	movi	r6,8
  801f48:	000b883a 	mov	r5,zero
  801f4c:	81001704 	addi	r4,r16,92
  801f50:	08033340 	call	803334 <memset>
  801f54:	8005883a 	mov	r2,r16
  801f58:	80000c15 	stw	zero,48(r16)
  801f5c:	80000d15 	stw	zero,52(r16)
  801f60:	80001115 	stw	zero,68(r16)
  801f64:	80001215 	stw	zero,72(r16)
  801f68:	dfc00417 	ldw	ra,16(sp)
  801f6c:	dcc00317 	ldw	r19,12(sp)
  801f70:	dc800217 	ldw	r18,8(sp)
  801f74:	dc400117 	ldw	r17,4(sp)
  801f78:	dc000017 	ldw	r16,0(sp)
  801f7c:	dec00504 	addi	sp,sp,20
  801f80:	f800283a 	ret
  801f84:	01400104 	movi	r5,4
  801f88:	9809883a 	mov	r4,r19
  801f8c:	0801e280 	call	801e28 <__sfmoreglue>
  801f90:	90800015 	stw	r2,0(r18)
  801f94:	103fde1e 	bne	r2,zero,801f10 <__alt_mem_onchip_mem+0xff781f10>
  801f98:	00800304 	movi	r2,12
  801f9c:	98800015 	stw	r2,0(r19)
  801fa0:	0005883a 	mov	r2,zero
  801fa4:	003ff006 	br	801f68 <__alt_mem_onchip_mem+0xff781f68>

00801fa8 <_cleanup>:
  801fa8:	00802074 	movhi	r2,129
  801fac:	10933d04 	addi	r2,r2,19700
  801fb0:	11000017 	ldw	r4,0(r2)
  801fb4:	01402034 	movhi	r5,128
  801fb8:	295eaf04 	addi	r5,r5,31420
  801fbc:	08027a81 	jmpi	8027a8 <_fwalk_reent>

00801fc0 <__sinit>:
  801fc0:	20800e17 	ldw	r2,56(r4)
  801fc4:	10000126 	beq	r2,zero,801fcc <__sinit+0xc>
  801fc8:	f800283a 	ret
  801fcc:	0801c841 	jmpi	801c84 <__sinit.part.1>

00801fd0 <__sfp_lock_acquire>:
  801fd0:	f800283a 	ret

00801fd4 <__sfp_lock_release>:
  801fd4:	f800283a 	ret

00801fd8 <__sinit_lock_acquire>:
  801fd8:	f800283a 	ret

00801fdc <__sinit_lock_release>:
  801fdc:	f800283a 	ret

00801fe0 <__fp_lock_all>:
  801fe0:	00802074 	movhi	r2,129
  801fe4:	10933e04 	addi	r2,r2,19704
  801fe8:	11000017 	ldw	r4,0(r2)
  801fec:	01402034 	movhi	r5,128
  801ff0:	29478804 	addi	r5,r5,7712
  801ff4:	08026e41 	jmpi	8026e4 <_fwalk>

00801ff8 <__fp_unlock_all>:
  801ff8:	00802074 	movhi	r2,129
  801ffc:	10933e04 	addi	r2,r2,19704
  802000:	11000017 	ldw	r4,0(r2)
  802004:	01402034 	movhi	r5,128
  802008:	29471c04 	addi	r5,r5,7280
  80200c:	08026e41 	jmpi	8026e4 <_fwalk>

00802010 <_fopen_r>:
  802010:	defffa04 	addi	sp,sp,-24
  802014:	3005883a 	mov	r2,r6
  802018:	dcc00415 	stw	r19,16(sp)
  80201c:	d80d883a 	mov	r6,sp
  802020:	2827883a 	mov	r19,r5
  802024:	100b883a 	mov	r5,r2
  802028:	dc800315 	stw	r18,12(sp)
  80202c:	dfc00515 	stw	ra,20(sp)
  802030:	dc400215 	stw	r17,8(sp)
  802034:	dc000115 	stw	r16,4(sp)
  802038:	2025883a 	mov	r18,r4
  80203c:	0807e680 	call	807e68 <__sflags>
  802040:	10002726 	beq	r2,zero,8020e0 <_fopen_r+0xd0>
  802044:	9009883a 	mov	r4,r18
  802048:	1023883a 	mov	r17,r2
  80204c:	0801e900 	call	801e90 <__sfp>
  802050:	1021883a 	mov	r16,r2
  802054:	10002226 	beq	r2,zero,8020e0 <_fopen_r+0xd0>
  802058:	d9800017 	ldw	r6,0(sp)
  80205c:	01c06d84 	movi	r7,438
  802060:	980b883a 	mov	r5,r19
  802064:	9009883a 	mov	r4,r18
  802068:	080345c0 	call	80345c <_open_r>
  80206c:	10001916 	blt	r2,zero,8020d4 <_fopen_r+0xc4>
  802070:	8080038d 	sth	r2,14(r16)
  802074:	00802034 	movhi	r2,128
  802078:	108e8c04 	addi	r2,r2,14896
  80207c:	80800815 	stw	r2,32(r16)
  802080:	00802034 	movhi	r2,128
  802084:	108ea304 	addi	r2,r2,14988
  802088:	80800915 	stw	r2,36(r16)
  80208c:	00802034 	movhi	r2,128
  802090:	108ec204 	addi	r2,r2,15112
  802094:	80800a15 	stw	r2,40(r16)
  802098:	00802034 	movhi	r2,128
  80209c:	108ed904 	addi	r2,r2,15204
  8020a0:	8440030d 	sth	r17,12(r16)
  8020a4:	84000715 	stw	r16,28(r16)
  8020a8:	80800b15 	stw	r2,44(r16)
  8020ac:	8c40400c 	andi	r17,r17,256
  8020b0:	88000d1e 	bne	r17,zero,8020e8 <_fopen_r+0xd8>
  8020b4:	8005883a 	mov	r2,r16
  8020b8:	dfc00517 	ldw	ra,20(sp)
  8020bc:	dcc00417 	ldw	r19,16(sp)
  8020c0:	dc800317 	ldw	r18,12(sp)
  8020c4:	dc400217 	ldw	r17,8(sp)
  8020c8:	dc000117 	ldw	r16,4(sp)
  8020cc:	dec00604 	addi	sp,sp,24
  8020d0:	f800283a 	ret
  8020d4:	0801fd00 	call	801fd0 <__sfp_lock_acquire>
  8020d8:	8000030d 	sth	zero,12(r16)
  8020dc:	0801fd40 	call	801fd4 <__sfp_lock_release>
  8020e0:	0005883a 	mov	r2,zero
  8020e4:	003ff406 	br	8020b8 <__alt_mem_onchip_mem+0xff7820b8>
  8020e8:	01c00084 	movi	r7,2
  8020ec:	000d883a 	mov	r6,zero
  8020f0:	800b883a 	mov	r5,r16
  8020f4:	9009883a 	mov	r4,r18
  8020f8:	08022080 	call	802208 <_fseek_r>
  8020fc:	8005883a 	mov	r2,r16
  802100:	003fed06 	br	8020b8 <__alt_mem_onchip_mem+0xff7820b8>

00802104 <fopen>:
  802104:	00802074 	movhi	r2,129
  802108:	10933e04 	addi	r2,r2,19704
  80210c:	280d883a 	mov	r6,r5
  802110:	200b883a 	mov	r5,r4
  802114:	11000017 	ldw	r4,0(r2)
  802118:	08020101 	jmpi	802010 <_fopen_r>

0080211c <_fprintf_r>:
  80211c:	defffe04 	addi	sp,sp,-8
  802120:	2809883a 	mov	r4,r5
  802124:	300b883a 	mov	r5,r6
  802128:	dfc00015 	stw	ra,0(sp)
  80212c:	d9c00115 	stw	r7,4(sp)
  802130:	d9800104 	addi	r6,sp,4
  802134:	0805dfc0 	call	805dfc <__vfprintf_internal>
  802138:	dfc00017 	ldw	ra,0(sp)
  80213c:	dec00204 	addi	sp,sp,8
  802140:	f800283a 	ret

00802144 <fprintf>:
  802144:	defffd04 	addi	sp,sp,-12
  802148:	dfc00015 	stw	ra,0(sp)
  80214c:	d9800115 	stw	r6,4(sp)
  802150:	d9c00215 	stw	r7,8(sp)
  802154:	d9800104 	addi	r6,sp,4
  802158:	0805dfc0 	call	805dfc <__vfprintf_internal>
  80215c:	dfc00017 	ldw	ra,0(sp)
  802160:	dec00304 	addi	sp,sp,12
  802164:	f800283a 	ret

00802168 <_fputc_r>:
  802168:	defffc04 	addi	sp,sp,-16
  80216c:	dc000215 	stw	r16,8(sp)
  802170:	dfc00315 	stw	ra,12(sp)
  802174:	2021883a 	mov	r16,r4
  802178:	20000726 	beq	r4,zero,802198 <_fputc_r+0x30>
  80217c:	20800e17 	ldw	r2,56(r4)
  802180:	1000051e 	bne	r2,zero,802198 <_fputc_r+0x30>
  802184:	d9400015 	stw	r5,0(sp)
  802188:	d9800115 	stw	r6,4(sp)
  80218c:	0801fc00 	call	801fc0 <__sinit>
  802190:	d9800117 	ldw	r6,4(sp)
  802194:	d9400017 	ldw	r5,0(sp)
  802198:	8009883a 	mov	r4,r16
  80219c:	dfc00317 	ldw	ra,12(sp)
  8021a0:	dc000217 	ldw	r16,8(sp)
  8021a4:	dec00404 	addi	sp,sp,16
  8021a8:	08035281 	jmpi	803528 <_putc_r>

008021ac <fputc>:
  8021ac:	00802074 	movhi	r2,129
  8021b0:	defffc04 	addi	sp,sp,-16
  8021b4:	10933e04 	addi	r2,r2,19704
  8021b8:	dc000115 	stw	r16,4(sp)
  8021bc:	14000017 	ldw	r16,0(r2)
  8021c0:	dc400215 	stw	r17,8(sp)
  8021c4:	dfc00315 	stw	ra,12(sp)
  8021c8:	2023883a 	mov	r17,r4
  8021cc:	80000626 	beq	r16,zero,8021e8 <fputc+0x3c>
  8021d0:	80800e17 	ldw	r2,56(r16)
  8021d4:	1000041e 	bne	r2,zero,8021e8 <fputc+0x3c>
  8021d8:	8009883a 	mov	r4,r16
  8021dc:	d9400015 	stw	r5,0(sp)
  8021e0:	0801fc00 	call	801fc0 <__sinit>
  8021e4:	d9400017 	ldw	r5,0(sp)
  8021e8:	280d883a 	mov	r6,r5
  8021ec:	8009883a 	mov	r4,r16
  8021f0:	880b883a 	mov	r5,r17
  8021f4:	dfc00317 	ldw	ra,12(sp)
  8021f8:	dc400217 	ldw	r17,8(sp)
  8021fc:	dc000117 	ldw	r16,4(sp)
  802200:	dec00404 	addi	sp,sp,16
  802204:	08035281 	jmpi	803528 <_putc_r>

00802208 <_fseek_r>:
  802208:	08022281 	jmpi	802228 <_fseeko_r>

0080220c <fseek>:
  80220c:	00802074 	movhi	r2,129
  802210:	10933e04 	addi	r2,r2,19704
  802214:	300f883a 	mov	r7,r6
  802218:	280d883a 	mov	r6,r5
  80221c:	200b883a 	mov	r5,r4
  802220:	11000017 	ldw	r4,0(r2)
  802224:	08022281 	jmpi	802228 <_fseeko_r>

00802228 <_fseeko_r>:
  802228:	deffe804 	addi	sp,sp,-96
  80222c:	dd401415 	stw	r21,80(sp)
  802230:	dc801115 	stw	r18,68(sp)
  802234:	dc401015 	stw	r17,64(sp)
  802238:	dc000f15 	stw	r16,60(sp)
  80223c:	dfc01715 	stw	ra,92(sp)
  802240:	ddc01615 	stw	r23,88(sp)
  802244:	dd801515 	stw	r22,84(sp)
  802248:	dd001315 	stw	r20,76(sp)
  80224c:	dcc01215 	stw	r19,72(sp)
  802250:	2023883a 	mov	r17,r4
  802254:	2821883a 	mov	r16,r5
  802258:	302b883a 	mov	r21,r6
  80225c:	3825883a 	mov	r18,r7
  802260:	20000226 	beq	r4,zero,80226c <_fseeko_r+0x44>
  802264:	20800e17 	ldw	r2,56(r4)
  802268:	10005a26 	beq	r2,zero,8023d4 <_fseeko_r+0x1ac>
  80226c:	8080030b 	ldhu	r2,12(r16)
  802270:	00c04204 	movi	r3,264
  802274:	1080420c 	andi	r2,r2,264
  802278:	10c05b26 	beq	r2,r3,8023e8 <_fseeko_r+0x1c0>
  80227c:	85000a17 	ldw	r20,40(r16)
  802280:	a000f626 	beq	r20,zero,80265c <_fseeko_r+0x434>
  802284:	00800044 	movi	r2,1
  802288:	90803e26 	beq	r18,r2,802384 <_fseeko_r+0x15c>
  80228c:	00800084 	movi	r2,2
  802290:	90801026 	beq	r18,r2,8022d4 <_fseeko_r+0xac>
  802294:	90000f26 	beq	r18,zero,8022d4 <_fseeko_r+0xac>
  802298:	00800584 	movi	r2,22
  80229c:	88800015 	stw	r2,0(r17)
  8022a0:	04ffffc4 	movi	r19,-1
  8022a4:	9805883a 	mov	r2,r19
  8022a8:	dfc01717 	ldw	ra,92(sp)
  8022ac:	ddc01617 	ldw	r23,88(sp)
  8022b0:	dd801517 	ldw	r22,84(sp)
  8022b4:	dd401417 	ldw	r21,80(sp)
  8022b8:	dd001317 	ldw	r20,76(sp)
  8022bc:	dcc01217 	ldw	r19,72(sp)
  8022c0:	dc801117 	ldw	r18,68(sp)
  8022c4:	dc401017 	ldw	r17,64(sp)
  8022c8:	dc000f17 	ldw	r16,60(sp)
  8022cc:	dec01804 	addi	sp,sp,96
  8022d0:	f800283a 	ret
  8022d4:	80800417 	ldw	r2,16(r16)
  8022d8:	002f883a 	mov	r23,zero
  8022dc:	0027883a 	mov	r19,zero
  8022e0:	1000cb26 	beq	r2,zero,802610 <_fseeko_r+0x3e8>
  8022e4:	8080030b 	ldhu	r2,12(r16)
  8022e8:	10c2068c 	andi	r3,r2,2074
  8022ec:	1800071e 	bne	r3,zero,80230c <_fseeko_r+0xe4>
  8022f0:	10c1000c 	andi	r3,r2,1024
  8022f4:	1800451e 	bne	r3,zero,80240c <_fseeko_r+0x1e4>
  8022f8:	00c02034 	movhi	r3,128
  8022fc:	18cec204 	addi	r3,r3,15112
  802300:	a0c0b726 	beq	r20,r3,8025e0 <_fseeko_r+0x3b8>
  802304:	10820014 	ori	r2,r2,2048
  802308:	8080030d 	sth	r2,12(r16)
  80230c:	800b883a 	mov	r5,r16
  802310:	8809883a 	mov	r4,r17
  802314:	0807ddc0 	call	807ddc <_fflush_r>
  802318:	1027883a 	mov	r19,r2
  80231c:	103fe01e 	bne	r2,zero,8022a0 <__alt_mem_onchip_mem+0xff7822a0>
  802320:	81400717 	ldw	r5,28(r16)
  802324:	900f883a 	mov	r7,r18
  802328:	a80d883a 	mov	r6,r21
  80232c:	8809883a 	mov	r4,r17
  802330:	a03ee83a 	callr	r20
  802334:	00ffffc4 	movi	r3,-1
  802338:	10ffd926 	beq	r2,r3,8022a0 <__alt_mem_onchip_mem+0xff7822a0>
  80233c:	81400c17 	ldw	r5,48(r16)
  802340:	28000526 	beq	r5,zero,802358 <_fseeko_r+0x130>
  802344:	80801004 	addi	r2,r16,64
  802348:	28800226 	beq	r5,r2,802354 <_fseeko_r+0x12c>
  80234c:	8809883a 	mov	r4,r17
  802350:	08080380 	call	808038 <_free_r>
  802354:	80000c15 	stw	zero,48(r16)
  802358:	8080030b 	ldhu	r2,12(r16)
  80235c:	80c00417 	ldw	r3,16(r16)
  802360:	80000115 	stw	zero,4(r16)
  802364:	10bdf7cc 	andi	r2,r2,63455
  802368:	80c00015 	stw	r3,0(r16)
  80236c:	8080030d 	sth	r2,12(r16)
  802370:	01800204 	movi	r6,8
  802374:	000b883a 	mov	r5,zero
  802378:	81001704 	addi	r4,r16,92
  80237c:	08033340 	call	803334 <memset>
  802380:	003fc806 	br	8022a4 <__alt_mem_onchip_mem+0xff7822a4>
  802384:	800b883a 	mov	r5,r16
  802388:	8809883a 	mov	r4,r17
  80238c:	0807ddc0 	call	807ddc <_fflush_r>
  802390:	8080030b 	ldhu	r2,12(r16)
  802394:	10c4000c 	andi	r3,r2,4096
  802398:	18008726 	beq	r3,zero,8025b8 <_fseeko_r+0x390>
  80239c:	84c01417 	ldw	r19,80(r16)
  8023a0:	10c0010c 	andi	r3,r2,4
  8023a4:	1800431e 	bne	r3,zero,8024b4 <_fseeko_r+0x28c>
  8023a8:	1080020c 	andi	r2,r2,8
  8023ac:	10008026 	beq	r2,zero,8025b0 <_fseeko_r+0x388>
  8023b0:	80c00017 	ldw	r3,0(r16)
  8023b4:	80800417 	ldw	r2,16(r16)
  8023b8:	18000226 	beq	r3,zero,8023c4 <_fseeko_r+0x19c>
  8023bc:	1887c83a 	sub	r3,r3,r2
  8023c0:	98e7883a 	add	r19,r19,r3
  8023c4:	aceb883a 	add	r21,r21,r19
  8023c8:	05c00044 	movi	r23,1
  8023cc:	0025883a 	mov	r18,zero
  8023d0:	003fc306 	br	8022e0 <__alt_mem_onchip_mem+0xff7822e0>
  8023d4:	0801fc00 	call	801fc0 <__sinit>
  8023d8:	8080030b 	ldhu	r2,12(r16)
  8023dc:	00c04204 	movi	r3,264
  8023e0:	1080420c 	andi	r2,r2,264
  8023e4:	10ffa51e 	bne	r2,r3,80227c <__alt_mem_onchip_mem+0xff78227c>
  8023e8:	800b883a 	mov	r5,r16
  8023ec:	8809883a 	mov	r4,r17
  8023f0:	0807ddc0 	call	807ddc <_fflush_r>
  8023f4:	003fa106 	br	80227c <__alt_mem_onchip_mem+0xff78227c>
  8023f8:	8080030b 	ldhu	r2,12(r16)
  8023fc:	00c10004 	movi	r3,1024
  802400:	80c01315 	stw	r3,76(r16)
  802404:	10c4b03a 	or	r2,r2,r3
  802408:	8080030d 	sth	r2,12(r16)
  80240c:	9000311e 	bne	r18,zero,8024d4 <_fseeko_r+0x2ac>
  802410:	a82d883a 	mov	r22,r21
  802414:	b800371e 	bne	r23,zero,8024f4 <_fseeko_r+0x2cc>
  802418:	8080030b 	ldhu	r2,12(r16)
  80241c:	1084000c 	andi	r2,r2,4096
  802420:	10007f26 	beq	r2,zero,802620 <_fseeko_r+0x3f8>
  802424:	80801417 	ldw	r2,80(r16)
  802428:	81800117 	ldw	r6,4(r16)
  80242c:	81400c17 	ldw	r5,48(r16)
  802430:	11a7c83a 	sub	r19,r2,r6
  802434:	28008226 	beq	r5,zero,802640 <_fseeko_r+0x418>
  802438:	81c00f17 	ldw	r7,60(r16)
  80243c:	99e7c83a 	sub	r19,r19,r7
  802440:	81000e17 	ldw	r4,56(r16)
  802444:	80800417 	ldw	r2,16(r16)
  802448:	99a7883a 	add	r19,r19,r6
  80244c:	2087c83a 	sub	r3,r4,r2
  802450:	98e7c83a 	sub	r19,r19,r3
  802454:	38c7883a 	add	r3,r7,r3
  802458:	b4c02b16 	blt	r22,r19,802508 <_fseeko_r+0x2e0>
  80245c:	98c9883a 	add	r4,r19,r3
  802460:	b100292e 	bgeu	r22,r4,802508 <_fseeko_r+0x2e0>
  802464:	b4e7c83a 	sub	r19,r22,r19
  802468:	14c5883a 	add	r2,r2,r19
  80246c:	1ce7c83a 	sub	r19,r3,r19
  802470:	80800015 	stw	r2,0(r16)
  802474:	84c00115 	stw	r19,4(r16)
  802478:	28000526 	beq	r5,zero,802490 <_fseeko_r+0x268>
  80247c:	80801004 	addi	r2,r16,64
  802480:	28800226 	beq	r5,r2,80248c <_fseeko_r+0x264>
  802484:	8809883a 	mov	r4,r17
  802488:	08080380 	call	808038 <_free_r>
  80248c:	80000c15 	stw	zero,48(r16)
  802490:	8080030b 	ldhu	r2,12(r16)
  802494:	01800204 	movi	r6,8
  802498:	000b883a 	mov	r5,zero
  80249c:	10bff7cc 	andi	r2,r2,65503
  8024a0:	8080030d 	sth	r2,12(r16)
  8024a4:	81001704 	addi	r4,r16,92
  8024a8:	08033340 	call	803334 <memset>
  8024ac:	0027883a 	mov	r19,zero
  8024b0:	003f7c06 	br	8022a4 <__alt_mem_onchip_mem+0xff7822a4>
  8024b4:	80c00117 	ldw	r3,4(r16)
  8024b8:	80800c17 	ldw	r2,48(r16)
  8024bc:	98e7c83a 	sub	r19,r19,r3
  8024c0:	10003b26 	beq	r2,zero,8025b0 <_fseeko_r+0x388>
  8024c4:	80c00f17 	ldw	r3,60(r16)
  8024c8:	80800417 	ldw	r2,16(r16)
  8024cc:	98e7c83a 	sub	r19,r19,r3
  8024d0:	003fbc06 	br	8023c4 <__alt_mem_onchip_mem+0xff7823c4>
  8024d4:	8140038f 	ldh	r5,14(r16)
  8024d8:	d80d883a 	mov	r6,sp
  8024dc:	8809883a 	mov	r4,r17
  8024e0:	08026880 	call	802688 <_fstat_r>
  8024e4:	103f891e 	bne	r2,zero,80230c <__alt_mem_onchip_mem+0xff78230c>
  8024e8:	dd800417 	ldw	r22,16(sp)
  8024ec:	adad883a 	add	r22,r21,r22
  8024f0:	b83fc926 	beq	r23,zero,802418 <__alt_mem_onchip_mem+0xff782418>
  8024f4:	81400c17 	ldw	r5,48(r16)
  8024f8:	81800117 	ldw	r6,4(r16)
  8024fc:	28005026 	beq	r5,zero,802640 <_fseeko_r+0x418>
  802500:	81c00f17 	ldw	r7,60(r16)
  802504:	003fce06 	br	802440 <__alt_mem_onchip_mem+0xff782440>
  802508:	84c01317 	ldw	r19,76(r16)
  80250c:	81400717 	ldw	r5,28(r16)
  802510:	000f883a 	mov	r7,zero
  802514:	04e7c83a 	sub	r19,zero,r19
  802518:	9da6703a 	and	r19,r19,r22
  80251c:	980d883a 	mov	r6,r19
  802520:	8809883a 	mov	r4,r17
  802524:	a03ee83a 	callr	r20
  802528:	00ffffc4 	movi	r3,-1
  80252c:	10ff7726 	beq	r2,r3,80230c <__alt_mem_onchip_mem+0xff78230c>
  802530:	80800417 	ldw	r2,16(r16)
  802534:	81400c17 	ldw	r5,48(r16)
  802538:	80000115 	stw	zero,4(r16)
  80253c:	80800015 	stw	r2,0(r16)
  802540:	28000526 	beq	r5,zero,802558 <_fseeko_r+0x330>
  802544:	80801004 	addi	r2,r16,64
  802548:	28800226 	beq	r5,r2,802554 <_fseeko_r+0x32c>
  80254c:	8809883a 	mov	r4,r17
  802550:	08080380 	call	808038 <_free_r>
  802554:	80000c15 	stw	zero,48(r16)
  802558:	8080030b 	ldhu	r2,12(r16)
  80255c:	b4e7c83a 	sub	r19,r22,r19
  802560:	10bff7cc 	andi	r2,r2,65503
  802564:	8080030d 	sth	r2,12(r16)
  802568:	98000b26 	beq	r19,zero,802598 <_fseeko_r+0x370>
  80256c:	800b883a 	mov	r5,r16
  802570:	8809883a 	mov	r4,r17
  802574:	08037800 	call	803780 <__srefill_r>
  802578:	103f641e 	bne	r2,zero,80230c <__alt_mem_onchip_mem+0xff78230c>
  80257c:	80800117 	ldw	r2,4(r16)
  802580:	14ff6236 	bltu	r2,r19,80230c <__alt_mem_onchip_mem+0xff78230c>
  802584:	80c00017 	ldw	r3,0(r16)
  802588:	14c5c83a 	sub	r2,r2,r19
  80258c:	80800115 	stw	r2,4(r16)
  802590:	1ce7883a 	add	r19,r3,r19
  802594:	84c00015 	stw	r19,0(r16)
  802598:	01800204 	movi	r6,8
  80259c:	000b883a 	mov	r5,zero
  8025a0:	81001704 	addi	r4,r16,92
  8025a4:	08033340 	call	803334 <memset>
  8025a8:	0027883a 	mov	r19,zero
  8025ac:	003f3d06 	br	8022a4 <__alt_mem_onchip_mem+0xff7822a4>
  8025b0:	80800417 	ldw	r2,16(r16)
  8025b4:	003f8306 	br	8023c4 <__alt_mem_onchip_mem+0xff7823c4>
  8025b8:	81400717 	ldw	r5,28(r16)
  8025bc:	900f883a 	mov	r7,r18
  8025c0:	000d883a 	mov	r6,zero
  8025c4:	8809883a 	mov	r4,r17
  8025c8:	a03ee83a 	callr	r20
  8025cc:	1027883a 	mov	r19,r2
  8025d0:	00bfffc4 	movi	r2,-1
  8025d4:	98bf3226 	beq	r19,r2,8022a0 <__alt_mem_onchip_mem+0xff7822a0>
  8025d8:	8080030b 	ldhu	r2,12(r16)
  8025dc:	003f7006 	br	8023a0 <__alt_mem_onchip_mem+0xff7823a0>
  8025e0:	8140038f 	ldh	r5,14(r16)
  8025e4:	283f4716 	blt	r5,zero,802304 <__alt_mem_onchip_mem+0xff782304>
  8025e8:	d80d883a 	mov	r6,sp
  8025ec:	8809883a 	mov	r4,r17
  8025f0:	08026880 	call	802688 <_fstat_r>
  8025f4:	1000041e 	bne	r2,zero,802608 <_fseeko_r+0x3e0>
  8025f8:	d8800117 	ldw	r2,4(sp)
  8025fc:	00e00014 	movui	r3,32768
  802600:	10bc000c 	andi	r2,r2,61440
  802604:	10ff7c26 	beq	r2,r3,8023f8 <__alt_mem_onchip_mem+0xff7823f8>
  802608:	8080030b 	ldhu	r2,12(r16)
  80260c:	003f3d06 	br	802304 <__alt_mem_onchip_mem+0xff782304>
  802610:	800b883a 	mov	r5,r16
  802614:	8809883a 	mov	r4,r17
  802618:	080296c0 	call	80296c <__smakebuf_r>
  80261c:	003f3106 	br	8022e4 <__alt_mem_onchip_mem+0xff7822e4>
  802620:	81400717 	ldw	r5,28(r16)
  802624:	01c00044 	movi	r7,1
  802628:	000d883a 	mov	r6,zero
  80262c:	8809883a 	mov	r4,r17
  802630:	a03ee83a 	callr	r20
  802634:	00ffffc4 	movi	r3,-1
  802638:	10ff7b1e 	bne	r2,r3,802428 <__alt_mem_onchip_mem+0xff782428>
  80263c:	003f3306 	br	80230c <__alt_mem_onchip_mem+0xff78230c>
  802640:	80c00017 	ldw	r3,0(r16)
  802644:	80800417 	ldw	r2,16(r16)
  802648:	000b883a 	mov	r5,zero
  80264c:	1887c83a 	sub	r3,r3,r2
  802650:	98e7c83a 	sub	r19,r19,r3
  802654:	30c7883a 	add	r3,r6,r3
  802658:	003f7f06 	br	802458 <__alt_mem_onchip_mem+0xff782458>
  80265c:	00800744 	movi	r2,29
  802660:	88800015 	stw	r2,0(r17)
  802664:	04ffffc4 	movi	r19,-1
  802668:	003f0e06 	br	8022a4 <__alt_mem_onchip_mem+0xff7822a4>

0080266c <fseeko>:
  80266c:	00802074 	movhi	r2,129
  802670:	10933e04 	addi	r2,r2,19704
  802674:	300f883a 	mov	r7,r6
  802678:	280d883a 	mov	r6,r5
  80267c:	200b883a 	mov	r5,r4
  802680:	11000017 	ldw	r4,0(r2)
  802684:	08022281 	jmpi	802228 <_fseeko_r>

00802688 <_fstat_r>:
  802688:	defffd04 	addi	sp,sp,-12
  80268c:	2805883a 	mov	r2,r5
  802690:	dc000015 	stw	r16,0(sp)
  802694:	04002074 	movhi	r16,129
  802698:	dc400115 	stw	r17,4(sp)
  80269c:	841aa004 	addi	r16,r16,27264
  8026a0:	2023883a 	mov	r17,r4
  8026a4:	300b883a 	mov	r5,r6
  8026a8:	1009883a 	mov	r4,r2
  8026ac:	dfc00215 	stw	ra,8(sp)
  8026b0:	80000015 	stw	zero,0(r16)
  8026b4:	080e8b80 	call	80e8b8 <fstat>
  8026b8:	00ffffc4 	movi	r3,-1
  8026bc:	10c00526 	beq	r2,r3,8026d4 <_fstat_r+0x4c>
  8026c0:	dfc00217 	ldw	ra,8(sp)
  8026c4:	dc400117 	ldw	r17,4(sp)
  8026c8:	dc000017 	ldw	r16,0(sp)
  8026cc:	dec00304 	addi	sp,sp,12
  8026d0:	f800283a 	ret
  8026d4:	80c00017 	ldw	r3,0(r16)
  8026d8:	183ff926 	beq	r3,zero,8026c0 <__alt_mem_onchip_mem+0xff7826c0>
  8026dc:	88c00015 	stw	r3,0(r17)
  8026e0:	003ff706 	br	8026c0 <__alt_mem_onchip_mem+0xff7826c0>

008026e4 <_fwalk>:
  8026e4:	defff704 	addi	sp,sp,-36
  8026e8:	dd000415 	stw	r20,16(sp)
  8026ec:	dfc00815 	stw	ra,32(sp)
  8026f0:	ddc00715 	stw	r23,28(sp)
  8026f4:	dd800615 	stw	r22,24(sp)
  8026f8:	dd400515 	stw	r21,20(sp)
  8026fc:	dcc00315 	stw	r19,12(sp)
  802700:	dc800215 	stw	r18,8(sp)
  802704:	dc400115 	stw	r17,4(sp)
  802708:	dc000015 	stw	r16,0(sp)
  80270c:	2500b804 	addi	r20,r4,736
  802710:	a0002326 	beq	r20,zero,8027a0 <_fwalk+0xbc>
  802714:	282b883a 	mov	r21,r5
  802718:	002f883a 	mov	r23,zero
  80271c:	05800044 	movi	r22,1
  802720:	04ffffc4 	movi	r19,-1
  802724:	a4400117 	ldw	r17,4(r20)
  802728:	a4800217 	ldw	r18,8(r20)
  80272c:	8c7fffc4 	addi	r17,r17,-1
  802730:	88000d16 	blt	r17,zero,802768 <_fwalk+0x84>
  802734:	94000304 	addi	r16,r18,12
  802738:	94800384 	addi	r18,r18,14
  80273c:	8080000b 	ldhu	r2,0(r16)
  802740:	8c7fffc4 	addi	r17,r17,-1
  802744:	813ffd04 	addi	r4,r16,-12
  802748:	b080042e 	bgeu	r22,r2,80275c <_fwalk+0x78>
  80274c:	9080000f 	ldh	r2,0(r18)
  802750:	14c00226 	beq	r2,r19,80275c <_fwalk+0x78>
  802754:	a83ee83a 	callr	r21
  802758:	b8aeb03a 	or	r23,r23,r2
  80275c:	84001a04 	addi	r16,r16,104
  802760:	94801a04 	addi	r18,r18,104
  802764:	8cfff51e 	bne	r17,r19,80273c <__alt_mem_onchip_mem+0xff78273c>
  802768:	a5000017 	ldw	r20,0(r20)
  80276c:	a03fed1e 	bne	r20,zero,802724 <__alt_mem_onchip_mem+0xff782724>
  802770:	b805883a 	mov	r2,r23
  802774:	dfc00817 	ldw	ra,32(sp)
  802778:	ddc00717 	ldw	r23,28(sp)
  80277c:	dd800617 	ldw	r22,24(sp)
  802780:	dd400517 	ldw	r21,20(sp)
  802784:	dd000417 	ldw	r20,16(sp)
  802788:	dcc00317 	ldw	r19,12(sp)
  80278c:	dc800217 	ldw	r18,8(sp)
  802790:	dc400117 	ldw	r17,4(sp)
  802794:	dc000017 	ldw	r16,0(sp)
  802798:	dec00904 	addi	sp,sp,36
  80279c:	f800283a 	ret
  8027a0:	002f883a 	mov	r23,zero
  8027a4:	003ff206 	br	802770 <__alt_mem_onchip_mem+0xff782770>

008027a8 <_fwalk_reent>:
  8027a8:	defff704 	addi	sp,sp,-36
  8027ac:	dd000415 	stw	r20,16(sp)
  8027b0:	dfc00815 	stw	ra,32(sp)
  8027b4:	ddc00715 	stw	r23,28(sp)
  8027b8:	dd800615 	stw	r22,24(sp)
  8027bc:	dd400515 	stw	r21,20(sp)
  8027c0:	dcc00315 	stw	r19,12(sp)
  8027c4:	dc800215 	stw	r18,8(sp)
  8027c8:	dc400115 	stw	r17,4(sp)
  8027cc:	dc000015 	stw	r16,0(sp)
  8027d0:	2500b804 	addi	r20,r4,736
  8027d4:	a0002326 	beq	r20,zero,802864 <_fwalk_reent+0xbc>
  8027d8:	282b883a 	mov	r21,r5
  8027dc:	2027883a 	mov	r19,r4
  8027e0:	002f883a 	mov	r23,zero
  8027e4:	05800044 	movi	r22,1
  8027e8:	04bfffc4 	movi	r18,-1
  8027ec:	a4400117 	ldw	r17,4(r20)
  8027f0:	a4000217 	ldw	r16,8(r20)
  8027f4:	8c7fffc4 	addi	r17,r17,-1
  8027f8:	88000c16 	blt	r17,zero,80282c <_fwalk_reent+0x84>
  8027fc:	84000304 	addi	r16,r16,12
  802800:	8080000b 	ldhu	r2,0(r16)
  802804:	8c7fffc4 	addi	r17,r17,-1
  802808:	817ffd04 	addi	r5,r16,-12
  80280c:	b080052e 	bgeu	r22,r2,802824 <_fwalk_reent+0x7c>
  802810:	8080008f 	ldh	r2,2(r16)
  802814:	9809883a 	mov	r4,r19
  802818:	14800226 	beq	r2,r18,802824 <_fwalk_reent+0x7c>
  80281c:	a83ee83a 	callr	r21
  802820:	b8aeb03a 	or	r23,r23,r2
  802824:	84001a04 	addi	r16,r16,104
  802828:	8cbff51e 	bne	r17,r18,802800 <__alt_mem_onchip_mem+0xff782800>
  80282c:	a5000017 	ldw	r20,0(r20)
  802830:	a03fee1e 	bne	r20,zero,8027ec <__alt_mem_onchip_mem+0xff7827ec>
  802834:	b805883a 	mov	r2,r23
  802838:	dfc00817 	ldw	ra,32(sp)
  80283c:	ddc00717 	ldw	r23,28(sp)
  802840:	dd800617 	ldw	r22,24(sp)
  802844:	dd400517 	ldw	r21,20(sp)
  802848:	dd000417 	ldw	r20,16(sp)
  80284c:	dcc00317 	ldw	r19,12(sp)
  802850:	dc800217 	ldw	r18,8(sp)
  802854:	dc400117 	ldw	r17,4(sp)
  802858:	dc000017 	ldw	r16,0(sp)
  80285c:	dec00904 	addi	sp,sp,36
  802860:	f800283a 	ret
  802864:	002f883a 	mov	r23,zero
  802868:	003ff206 	br	802834 <__alt_mem_onchip_mem+0xff782834>

0080286c <_fwrite_r>:
  80286c:	defff504 	addi	sp,sp,-44
  802870:	dc800815 	stw	r18,32(sp)
  802874:	39a5383a 	mul	r18,r7,r6
  802878:	d8800304 	addi	r2,sp,12
  80287c:	d8800015 	stw	r2,0(sp)
  802880:	00800044 	movi	r2,1
  802884:	dcc00915 	stw	r19,36(sp)
  802888:	dc400715 	stw	r17,28(sp)
  80288c:	dc000615 	stw	r16,24(sp)
  802890:	d9400315 	stw	r5,12(sp)
  802894:	dfc00a15 	stw	ra,40(sp)
  802898:	dc800415 	stw	r18,16(sp)
  80289c:	dc800215 	stw	r18,8(sp)
  8028a0:	d8800115 	stw	r2,4(sp)
  8028a4:	3027883a 	mov	r19,r6
  8028a8:	3821883a 	mov	r16,r7
  8028ac:	2023883a 	mov	r17,r4
  8028b0:	d9400b17 	ldw	r5,44(sp)
  8028b4:	20000226 	beq	r4,zero,8028c0 <_fwrite_r+0x54>
  8028b8:	20800e17 	ldw	r2,56(r4)
  8028bc:	10001a26 	beq	r2,zero,802928 <_fwrite_r+0xbc>
  8028c0:	2880030b 	ldhu	r2,12(r5)
  8028c4:	10c8000c 	andi	r3,r2,8192
  8028c8:	1800061e 	bne	r3,zero,8028e4 <_fwrite_r+0x78>
  8028cc:	29001917 	ldw	r4,100(r5)
  8028d0:	00f7ffc4 	movi	r3,-8193
  8028d4:	10880014 	ori	r2,r2,8192
  8028d8:	20c6703a 	and	r3,r4,r3
  8028dc:	2880030d 	sth	r2,12(r5)
  8028e0:	28c01915 	stw	r3,100(r5)
  8028e4:	d80d883a 	mov	r6,sp
  8028e8:	8809883a 	mov	r4,r17
  8028ec:	08083480 	call	808348 <__sfvwrite_r>
  8028f0:	10000b26 	beq	r2,zero,802920 <_fwrite_r+0xb4>
  8028f4:	d9000217 	ldw	r4,8(sp)
  8028f8:	980b883a 	mov	r5,r19
  8028fc:	9109c83a 	sub	r4,r18,r4
  802900:	08010940 	call	801094 <__udivsi3>
  802904:	dfc00a17 	ldw	ra,40(sp)
  802908:	dcc00917 	ldw	r19,36(sp)
  80290c:	dc800817 	ldw	r18,32(sp)
  802910:	dc400717 	ldw	r17,28(sp)
  802914:	dc000617 	ldw	r16,24(sp)
  802918:	dec00b04 	addi	sp,sp,44
  80291c:	f800283a 	ret
  802920:	8005883a 	mov	r2,r16
  802924:	003ff706 	br	802904 <__alt_mem_onchip_mem+0xff782904>
  802928:	d9400515 	stw	r5,20(sp)
  80292c:	0801fc00 	call	801fc0 <__sinit>
  802930:	d9400517 	ldw	r5,20(sp)
  802934:	003fe206 	br	8028c0 <__alt_mem_onchip_mem+0xff7828c0>

00802938 <fwrite>:
  802938:	defffe04 	addi	sp,sp,-8
  80293c:	00802074 	movhi	r2,129
  802940:	d9c00015 	stw	r7,0(sp)
  802944:	10933e04 	addi	r2,r2,19704
  802948:	300f883a 	mov	r7,r6
  80294c:	280d883a 	mov	r6,r5
  802950:	200b883a 	mov	r5,r4
  802954:	11000017 	ldw	r4,0(r2)
  802958:	dfc00115 	stw	ra,4(sp)
  80295c:	080286c0 	call	80286c <_fwrite_r>
  802960:	dfc00117 	ldw	ra,4(sp)
  802964:	dec00204 	addi	sp,sp,8
  802968:	f800283a 	ret

0080296c <__smakebuf_r>:
  80296c:	2880030b 	ldhu	r2,12(r5)
  802970:	10c0008c 	andi	r3,r2,2
  802974:	1800411e 	bne	r3,zero,802a7c <__smakebuf_r+0x110>
  802978:	deffec04 	addi	sp,sp,-80
  80297c:	dc000f15 	stw	r16,60(sp)
  802980:	2821883a 	mov	r16,r5
  802984:	2940038f 	ldh	r5,14(r5)
  802988:	dc401015 	stw	r17,64(sp)
  80298c:	dfc01315 	stw	ra,76(sp)
  802990:	dcc01215 	stw	r19,72(sp)
  802994:	dc801115 	stw	r18,68(sp)
  802998:	2023883a 	mov	r17,r4
  80299c:	28001c16 	blt	r5,zero,802a10 <__smakebuf_r+0xa4>
  8029a0:	d80d883a 	mov	r6,sp
  8029a4:	08026880 	call	802688 <_fstat_r>
  8029a8:	10001816 	blt	r2,zero,802a0c <__smakebuf_r+0xa0>
  8029ac:	d8800117 	ldw	r2,4(sp)
  8029b0:	00e00014 	movui	r3,32768
  8029b4:	10bc000c 	andi	r2,r2,61440
  8029b8:	14c80020 	cmpeqi	r19,r2,8192
  8029bc:	10c03726 	beq	r2,r3,802a9c <__smakebuf_r+0x130>
  8029c0:	80c0030b 	ldhu	r3,12(r16)
  8029c4:	18c20014 	ori	r3,r3,2048
  8029c8:	80c0030d 	sth	r3,12(r16)
  8029cc:	00c80004 	movi	r3,8192
  8029d0:	10c0521e 	bne	r2,r3,802b1c <__smakebuf_r+0x1b0>
  8029d4:	8140038f 	ldh	r5,14(r16)
  8029d8:	8809883a 	mov	r4,r17
  8029dc:	08088040 	call	808804 <_isatty_r>
  8029e0:	10004c26 	beq	r2,zero,802b14 <__smakebuf_r+0x1a8>
  8029e4:	8080030b 	ldhu	r2,12(r16)
  8029e8:	80c010c4 	addi	r3,r16,67
  8029ec:	80c00015 	stw	r3,0(r16)
  8029f0:	10800054 	ori	r2,r2,1
  8029f4:	8080030d 	sth	r2,12(r16)
  8029f8:	00800044 	movi	r2,1
  8029fc:	80c00415 	stw	r3,16(r16)
  802a00:	80800515 	stw	r2,20(r16)
  802a04:	04810004 	movi	r18,1024
  802a08:	00000706 	br	802a28 <__smakebuf_r+0xbc>
  802a0c:	8080030b 	ldhu	r2,12(r16)
  802a10:	10c0200c 	andi	r3,r2,128
  802a14:	18001f1e 	bne	r3,zero,802a94 <__smakebuf_r+0x128>
  802a18:	04810004 	movi	r18,1024
  802a1c:	10820014 	ori	r2,r2,2048
  802a20:	8080030d 	sth	r2,12(r16)
  802a24:	0027883a 	mov	r19,zero
  802a28:	900b883a 	mov	r5,r18
  802a2c:	8809883a 	mov	r4,r17
  802a30:	0802b280 	call	802b28 <_malloc_r>
  802a34:	10002c26 	beq	r2,zero,802ae8 <__smakebuf_r+0x17c>
  802a38:	80c0030b 	ldhu	r3,12(r16)
  802a3c:	01002034 	movhi	r4,128
  802a40:	21071e04 	addi	r4,r4,7288
  802a44:	89000f15 	stw	r4,60(r17)
  802a48:	18c02014 	ori	r3,r3,128
  802a4c:	80c0030d 	sth	r3,12(r16)
  802a50:	80800015 	stw	r2,0(r16)
  802a54:	80800415 	stw	r2,16(r16)
  802a58:	84800515 	stw	r18,20(r16)
  802a5c:	98001a1e 	bne	r19,zero,802ac8 <__smakebuf_r+0x15c>
  802a60:	dfc01317 	ldw	ra,76(sp)
  802a64:	dcc01217 	ldw	r19,72(sp)
  802a68:	dc801117 	ldw	r18,68(sp)
  802a6c:	dc401017 	ldw	r17,64(sp)
  802a70:	dc000f17 	ldw	r16,60(sp)
  802a74:	dec01404 	addi	sp,sp,80
  802a78:	f800283a 	ret
  802a7c:	288010c4 	addi	r2,r5,67
  802a80:	28800015 	stw	r2,0(r5)
  802a84:	28800415 	stw	r2,16(r5)
  802a88:	00800044 	movi	r2,1
  802a8c:	28800515 	stw	r2,20(r5)
  802a90:	f800283a 	ret
  802a94:	04801004 	movi	r18,64
  802a98:	003fe006 	br	802a1c <__alt_mem_onchip_mem+0xff782a1c>
  802a9c:	81000a17 	ldw	r4,40(r16)
  802aa0:	00c02034 	movhi	r3,128
  802aa4:	18cec204 	addi	r3,r3,15112
  802aa8:	20ffc51e 	bne	r4,r3,8029c0 <__alt_mem_onchip_mem+0xff7829c0>
  802aac:	8080030b 	ldhu	r2,12(r16)
  802ab0:	04810004 	movi	r18,1024
  802ab4:	84801315 	stw	r18,76(r16)
  802ab8:	1484b03a 	or	r2,r2,r18
  802abc:	8080030d 	sth	r2,12(r16)
  802ac0:	0027883a 	mov	r19,zero
  802ac4:	003fd806 	br	802a28 <__alt_mem_onchip_mem+0xff782a28>
  802ac8:	8140038f 	ldh	r5,14(r16)
  802acc:	8809883a 	mov	r4,r17
  802ad0:	08088040 	call	808804 <_isatty_r>
  802ad4:	103fe226 	beq	r2,zero,802a60 <__alt_mem_onchip_mem+0xff782a60>
  802ad8:	8080030b 	ldhu	r2,12(r16)
  802adc:	10800054 	ori	r2,r2,1
  802ae0:	8080030d 	sth	r2,12(r16)
  802ae4:	003fde06 	br	802a60 <__alt_mem_onchip_mem+0xff782a60>
  802ae8:	8080030b 	ldhu	r2,12(r16)
  802aec:	10c0800c 	andi	r3,r2,512
  802af0:	183fdb1e 	bne	r3,zero,802a60 <__alt_mem_onchip_mem+0xff782a60>
  802af4:	10800094 	ori	r2,r2,2
  802af8:	80c010c4 	addi	r3,r16,67
  802afc:	8080030d 	sth	r2,12(r16)
  802b00:	00800044 	movi	r2,1
  802b04:	80c00015 	stw	r3,0(r16)
  802b08:	80c00415 	stw	r3,16(r16)
  802b0c:	80800515 	stw	r2,20(r16)
  802b10:	003fd306 	br	802a60 <__alt_mem_onchip_mem+0xff782a60>
  802b14:	04810004 	movi	r18,1024
  802b18:	003fc306 	br	802a28 <__alt_mem_onchip_mem+0xff782a28>
  802b1c:	0027883a 	mov	r19,zero
  802b20:	04810004 	movi	r18,1024
  802b24:	003fc006 	br	802a28 <__alt_mem_onchip_mem+0xff782a28>

00802b28 <_malloc_r>:
  802b28:	defff504 	addi	sp,sp,-44
  802b2c:	dc800315 	stw	r18,12(sp)
  802b30:	dfc00a15 	stw	ra,40(sp)
  802b34:	df000915 	stw	fp,36(sp)
  802b38:	ddc00815 	stw	r23,32(sp)
  802b3c:	dd800715 	stw	r22,28(sp)
  802b40:	dd400615 	stw	r21,24(sp)
  802b44:	dd000515 	stw	r20,20(sp)
  802b48:	dcc00415 	stw	r19,16(sp)
  802b4c:	dc400215 	stw	r17,8(sp)
  802b50:	dc000115 	stw	r16,4(sp)
  802b54:	288002c4 	addi	r2,r5,11
  802b58:	00c00584 	movi	r3,22
  802b5c:	2025883a 	mov	r18,r4
  802b60:	18807f2e 	bgeu	r3,r2,802d60 <_malloc_r+0x238>
  802b64:	047ffe04 	movi	r17,-8
  802b68:	1462703a 	and	r17,r2,r17
  802b6c:	8800a316 	blt	r17,zero,802dfc <_malloc_r+0x2d4>
  802b70:	8940a236 	bltu	r17,r5,802dfc <_malloc_r+0x2d4>
  802b74:	080ee400 	call	80ee40 <__malloc_lock>
  802b78:	00807dc4 	movi	r2,503
  802b7c:	1441e92e 	bgeu	r2,r17,803324 <_malloc_r+0x7fc>
  802b80:	8804d27a 	srli	r2,r17,9
  802b84:	1000a126 	beq	r2,zero,802e0c <_malloc_r+0x2e4>
  802b88:	00c00104 	movi	r3,4
  802b8c:	18811e36 	bltu	r3,r2,803008 <_malloc_r+0x4e0>
  802b90:	8804d1ba 	srli	r2,r17,6
  802b94:	12000e44 	addi	r8,r2,57
  802b98:	11c00e04 	addi	r7,r2,56
  802b9c:	4209883a 	add	r4,r8,r8
  802ba0:	04c02074 	movhi	r19,129
  802ba4:	2109883a 	add	r4,r4,r4
  802ba8:	9ccd2004 	addi	r19,r19,13440
  802bac:	2109883a 	add	r4,r4,r4
  802bb0:	9909883a 	add	r4,r19,r4
  802bb4:	24000117 	ldw	r16,4(r4)
  802bb8:	213ffe04 	addi	r4,r4,-8
  802bbc:	24009726 	beq	r4,r16,802e1c <_malloc_r+0x2f4>
  802bc0:	80800117 	ldw	r2,4(r16)
  802bc4:	01bfff04 	movi	r6,-4
  802bc8:	014003c4 	movi	r5,15
  802bcc:	1184703a 	and	r2,r2,r6
  802bd0:	1447c83a 	sub	r3,r2,r17
  802bd4:	28c00716 	blt	r5,r3,802bf4 <_malloc_r+0xcc>
  802bd8:	1800920e 	bge	r3,zero,802e24 <_malloc_r+0x2fc>
  802bdc:	84000317 	ldw	r16,12(r16)
  802be0:	24008e26 	beq	r4,r16,802e1c <_malloc_r+0x2f4>
  802be4:	80800117 	ldw	r2,4(r16)
  802be8:	1184703a 	and	r2,r2,r6
  802bec:	1447c83a 	sub	r3,r2,r17
  802bf0:	28fff90e 	bge	r5,r3,802bd8 <__alt_mem_onchip_mem+0xff782bd8>
  802bf4:	3809883a 	mov	r4,r7
  802bf8:	01802074 	movhi	r6,129
  802bfc:	9c000417 	ldw	r16,16(r19)
  802c00:	318d2004 	addi	r6,r6,13440
  802c04:	32000204 	addi	r8,r6,8
  802c08:	82013426 	beq	r16,r8,8030dc <_malloc_r+0x5b4>
  802c0c:	80c00117 	ldw	r3,4(r16)
  802c10:	00bfff04 	movi	r2,-4
  802c14:	188e703a 	and	r7,r3,r2
  802c18:	3c45c83a 	sub	r2,r7,r17
  802c1c:	00c003c4 	movi	r3,15
  802c20:	18811f16 	blt	r3,r2,8030a0 <_malloc_r+0x578>
  802c24:	32000515 	stw	r8,20(r6)
  802c28:	32000415 	stw	r8,16(r6)
  802c2c:	10007f0e 	bge	r2,zero,802e2c <_malloc_r+0x304>
  802c30:	00807fc4 	movi	r2,511
  802c34:	11c0fd36 	bltu	r2,r7,80302c <_malloc_r+0x504>
  802c38:	3806d0fa 	srli	r3,r7,3
  802c3c:	01c00044 	movi	r7,1
  802c40:	30800117 	ldw	r2,4(r6)
  802c44:	19400044 	addi	r5,r3,1
  802c48:	294b883a 	add	r5,r5,r5
  802c4c:	1807d0ba 	srai	r3,r3,2
  802c50:	294b883a 	add	r5,r5,r5
  802c54:	294b883a 	add	r5,r5,r5
  802c58:	298b883a 	add	r5,r5,r6
  802c5c:	38c6983a 	sll	r3,r7,r3
  802c60:	29c00017 	ldw	r7,0(r5)
  802c64:	2a7ffe04 	addi	r9,r5,-8
  802c68:	1886b03a 	or	r3,r3,r2
  802c6c:	82400315 	stw	r9,12(r16)
  802c70:	81c00215 	stw	r7,8(r16)
  802c74:	30c00115 	stw	r3,4(r6)
  802c78:	2c000015 	stw	r16,0(r5)
  802c7c:	3c000315 	stw	r16,12(r7)
  802c80:	2005d0ba 	srai	r2,r4,2
  802c84:	01400044 	movi	r5,1
  802c88:	288a983a 	sll	r5,r5,r2
  802c8c:	19406f36 	bltu	r3,r5,802e4c <_malloc_r+0x324>
  802c90:	28c4703a 	and	r2,r5,r3
  802c94:	10000a1e 	bne	r2,zero,802cc0 <_malloc_r+0x198>
  802c98:	00bfff04 	movi	r2,-4
  802c9c:	294b883a 	add	r5,r5,r5
  802ca0:	2088703a 	and	r4,r4,r2
  802ca4:	28c4703a 	and	r2,r5,r3
  802ca8:	21000104 	addi	r4,r4,4
  802cac:	1000041e 	bne	r2,zero,802cc0 <_malloc_r+0x198>
  802cb0:	294b883a 	add	r5,r5,r5
  802cb4:	28c4703a 	and	r2,r5,r3
  802cb8:	21000104 	addi	r4,r4,4
  802cbc:	103ffc26 	beq	r2,zero,802cb0 <__alt_mem_onchip_mem+0xff782cb0>
  802cc0:	02bfff04 	movi	r10,-4
  802cc4:	024003c4 	movi	r9,15
  802cc8:	21800044 	addi	r6,r4,1
  802ccc:	318d883a 	add	r6,r6,r6
  802cd0:	318d883a 	add	r6,r6,r6
  802cd4:	318d883a 	add	r6,r6,r6
  802cd8:	998d883a 	add	r6,r19,r6
  802cdc:	333ffe04 	addi	r12,r6,-8
  802ce0:	2017883a 	mov	r11,r4
  802ce4:	31800104 	addi	r6,r6,4
  802ce8:	34000017 	ldw	r16,0(r6)
  802cec:	31fffd04 	addi	r7,r6,-12
  802cf0:	81c0041e 	bne	r16,r7,802d04 <_malloc_r+0x1dc>
  802cf4:	0000fb06 	br	8030e4 <_malloc_r+0x5bc>
  802cf8:	1801030e 	bge	r3,zero,803108 <_malloc_r+0x5e0>
  802cfc:	84000317 	ldw	r16,12(r16)
  802d00:	81c0f826 	beq	r16,r7,8030e4 <_malloc_r+0x5bc>
  802d04:	80800117 	ldw	r2,4(r16)
  802d08:	1284703a 	and	r2,r2,r10
  802d0c:	1447c83a 	sub	r3,r2,r17
  802d10:	48fff90e 	bge	r9,r3,802cf8 <__alt_mem_onchip_mem+0xff782cf8>
  802d14:	80800317 	ldw	r2,12(r16)
  802d18:	81000217 	ldw	r4,8(r16)
  802d1c:	89400054 	ori	r5,r17,1
  802d20:	81400115 	stw	r5,4(r16)
  802d24:	20800315 	stw	r2,12(r4)
  802d28:	11000215 	stw	r4,8(r2)
  802d2c:	8463883a 	add	r17,r16,r17
  802d30:	9c400515 	stw	r17,20(r19)
  802d34:	9c400415 	stw	r17,16(r19)
  802d38:	18800054 	ori	r2,r3,1
  802d3c:	88800115 	stw	r2,4(r17)
  802d40:	8a000315 	stw	r8,12(r17)
  802d44:	8a000215 	stw	r8,8(r17)
  802d48:	88e3883a 	add	r17,r17,r3
  802d4c:	88c00015 	stw	r3,0(r17)
  802d50:	9009883a 	mov	r4,r18
  802d54:	080ee640 	call	80ee64 <__malloc_unlock>
  802d58:	80800204 	addi	r2,r16,8
  802d5c:	00001b06 	br	802dcc <_malloc_r+0x2a4>
  802d60:	04400404 	movi	r17,16
  802d64:	89402536 	bltu	r17,r5,802dfc <_malloc_r+0x2d4>
  802d68:	080ee400 	call	80ee40 <__malloc_lock>
  802d6c:	00800184 	movi	r2,6
  802d70:	01000084 	movi	r4,2
  802d74:	04c02074 	movhi	r19,129
  802d78:	1085883a 	add	r2,r2,r2
  802d7c:	9ccd2004 	addi	r19,r19,13440
  802d80:	1085883a 	add	r2,r2,r2
  802d84:	9885883a 	add	r2,r19,r2
  802d88:	14000117 	ldw	r16,4(r2)
  802d8c:	10fffe04 	addi	r3,r2,-8
  802d90:	80c0d926 	beq	r16,r3,8030f8 <_malloc_r+0x5d0>
  802d94:	80c00117 	ldw	r3,4(r16)
  802d98:	81000317 	ldw	r4,12(r16)
  802d9c:	00bfff04 	movi	r2,-4
  802da0:	1884703a 	and	r2,r3,r2
  802da4:	81400217 	ldw	r5,8(r16)
  802da8:	8085883a 	add	r2,r16,r2
  802dac:	10c00117 	ldw	r3,4(r2)
  802db0:	29000315 	stw	r4,12(r5)
  802db4:	21400215 	stw	r5,8(r4)
  802db8:	18c00054 	ori	r3,r3,1
  802dbc:	10c00115 	stw	r3,4(r2)
  802dc0:	9009883a 	mov	r4,r18
  802dc4:	080ee640 	call	80ee64 <__malloc_unlock>
  802dc8:	80800204 	addi	r2,r16,8
  802dcc:	dfc00a17 	ldw	ra,40(sp)
  802dd0:	df000917 	ldw	fp,36(sp)
  802dd4:	ddc00817 	ldw	r23,32(sp)
  802dd8:	dd800717 	ldw	r22,28(sp)
  802ddc:	dd400617 	ldw	r21,24(sp)
  802de0:	dd000517 	ldw	r20,20(sp)
  802de4:	dcc00417 	ldw	r19,16(sp)
  802de8:	dc800317 	ldw	r18,12(sp)
  802dec:	dc400217 	ldw	r17,8(sp)
  802df0:	dc000117 	ldw	r16,4(sp)
  802df4:	dec00b04 	addi	sp,sp,44
  802df8:	f800283a 	ret
  802dfc:	00800304 	movi	r2,12
  802e00:	90800015 	stw	r2,0(r18)
  802e04:	0005883a 	mov	r2,zero
  802e08:	003ff006 	br	802dcc <__alt_mem_onchip_mem+0xff782dcc>
  802e0c:	01002004 	movi	r4,128
  802e10:	02001004 	movi	r8,64
  802e14:	01c00fc4 	movi	r7,63
  802e18:	003f6106 	br	802ba0 <__alt_mem_onchip_mem+0xff782ba0>
  802e1c:	4009883a 	mov	r4,r8
  802e20:	003f7506 	br	802bf8 <__alt_mem_onchip_mem+0xff782bf8>
  802e24:	81000317 	ldw	r4,12(r16)
  802e28:	003fde06 	br	802da4 <__alt_mem_onchip_mem+0xff782da4>
  802e2c:	81c5883a 	add	r2,r16,r7
  802e30:	11400117 	ldw	r5,4(r2)
  802e34:	9009883a 	mov	r4,r18
  802e38:	29400054 	ori	r5,r5,1
  802e3c:	11400115 	stw	r5,4(r2)
  802e40:	080ee640 	call	80ee64 <__malloc_unlock>
  802e44:	80800204 	addi	r2,r16,8
  802e48:	003fe006 	br	802dcc <__alt_mem_onchip_mem+0xff782dcc>
  802e4c:	9c000217 	ldw	r16,8(r19)
  802e50:	00bfff04 	movi	r2,-4
  802e54:	85800117 	ldw	r22,4(r16)
  802e58:	b0ac703a 	and	r22,r22,r2
  802e5c:	b4400336 	bltu	r22,r17,802e6c <_malloc_r+0x344>
  802e60:	b445c83a 	sub	r2,r22,r17
  802e64:	00c003c4 	movi	r3,15
  802e68:	18805d16 	blt	r3,r2,802fe0 <_malloc_r+0x4b8>
  802e6c:	05c02074 	movhi	r23,129
  802e70:	00802074 	movhi	r2,129
  802e74:	109aa304 	addi	r2,r2,27276
  802e78:	bdd33f04 	addi	r23,r23,19708
  802e7c:	15400017 	ldw	r21,0(r2)
  802e80:	b8c00017 	ldw	r3,0(r23)
  802e84:	00bfffc4 	movi	r2,-1
  802e88:	858d883a 	add	r6,r16,r22
  802e8c:	8d6b883a 	add	r21,r17,r21
  802e90:	1880ea26 	beq	r3,r2,80323c <_malloc_r+0x714>
  802e94:	ad4403c4 	addi	r21,r21,4111
  802e98:	00bc0004 	movi	r2,-4096
  802e9c:	a8aa703a 	and	r21,r21,r2
  802ea0:	a80b883a 	mov	r5,r21
  802ea4:	9009883a 	mov	r4,r18
  802ea8:	d9800015 	stw	r6,0(sp)
  802eac:	08039dc0 	call	8039dc <_sbrk_r>
  802eb0:	1029883a 	mov	r20,r2
  802eb4:	00bfffc4 	movi	r2,-1
  802eb8:	d9800017 	ldw	r6,0(sp)
  802ebc:	a080e826 	beq	r20,r2,803260 <_malloc_r+0x738>
  802ec0:	a180a636 	bltu	r20,r6,80315c <_malloc_r+0x634>
  802ec4:	07002074 	movhi	fp,129
  802ec8:	e71aae04 	addi	fp,fp,27320
  802ecc:	e0800017 	ldw	r2,0(fp)
  802ed0:	a887883a 	add	r3,r21,r2
  802ed4:	e0c00015 	stw	r3,0(fp)
  802ed8:	3500e626 	beq	r6,r20,803274 <_malloc_r+0x74c>
  802edc:	b9000017 	ldw	r4,0(r23)
  802ee0:	00bfffc4 	movi	r2,-1
  802ee4:	2080ee26 	beq	r4,r2,8032a0 <_malloc_r+0x778>
  802ee8:	a185c83a 	sub	r2,r20,r6
  802eec:	10c5883a 	add	r2,r2,r3
  802ef0:	e0800015 	stw	r2,0(fp)
  802ef4:	a0c001cc 	andi	r3,r20,7
  802ef8:	1800bc26 	beq	r3,zero,8031ec <_malloc_r+0x6c4>
  802efc:	a0e9c83a 	sub	r20,r20,r3
  802f00:	00840204 	movi	r2,4104
  802f04:	a5000204 	addi	r20,r20,8
  802f08:	10c7c83a 	sub	r3,r2,r3
  802f0c:	a545883a 	add	r2,r20,r21
  802f10:	1083ffcc 	andi	r2,r2,4095
  802f14:	18abc83a 	sub	r21,r3,r2
  802f18:	a80b883a 	mov	r5,r21
  802f1c:	9009883a 	mov	r4,r18
  802f20:	08039dc0 	call	8039dc <_sbrk_r>
  802f24:	00ffffc4 	movi	r3,-1
  802f28:	10c0e126 	beq	r2,r3,8032b0 <_malloc_r+0x788>
  802f2c:	1505c83a 	sub	r2,r2,r20
  802f30:	1545883a 	add	r2,r2,r21
  802f34:	10800054 	ori	r2,r2,1
  802f38:	e0c00017 	ldw	r3,0(fp)
  802f3c:	9d000215 	stw	r20,8(r19)
  802f40:	a0800115 	stw	r2,4(r20)
  802f44:	a8c7883a 	add	r3,r21,r3
  802f48:	e0c00015 	stw	r3,0(fp)
  802f4c:	84c00e26 	beq	r16,r19,802f88 <_malloc_r+0x460>
  802f50:	018003c4 	movi	r6,15
  802f54:	3580a72e 	bgeu	r6,r22,8031f4 <_malloc_r+0x6cc>
  802f58:	81400117 	ldw	r5,4(r16)
  802f5c:	013ffe04 	movi	r4,-8
  802f60:	b0bffd04 	addi	r2,r22,-12
  802f64:	1104703a 	and	r2,r2,r4
  802f68:	2900004c 	andi	r4,r5,1
  802f6c:	2088b03a 	or	r4,r4,r2
  802f70:	81000115 	stw	r4,4(r16)
  802f74:	01400144 	movi	r5,5
  802f78:	8089883a 	add	r4,r16,r2
  802f7c:	21400115 	stw	r5,4(r4)
  802f80:	21400215 	stw	r5,8(r4)
  802f84:	3080cd36 	bltu	r6,r2,8032bc <_malloc_r+0x794>
  802f88:	00802074 	movhi	r2,129
  802f8c:	109aa204 	addi	r2,r2,27272
  802f90:	11000017 	ldw	r4,0(r2)
  802f94:	20c0012e 	bgeu	r4,r3,802f9c <_malloc_r+0x474>
  802f98:	10c00015 	stw	r3,0(r2)
  802f9c:	00802074 	movhi	r2,129
  802fa0:	109aa104 	addi	r2,r2,27268
  802fa4:	11000017 	ldw	r4,0(r2)
  802fa8:	9c000217 	ldw	r16,8(r19)
  802fac:	20c0012e 	bgeu	r4,r3,802fb4 <_malloc_r+0x48c>
  802fb0:	10c00015 	stw	r3,0(r2)
  802fb4:	80c00117 	ldw	r3,4(r16)
  802fb8:	00bfff04 	movi	r2,-4
  802fbc:	1886703a 	and	r3,r3,r2
  802fc0:	1c45c83a 	sub	r2,r3,r17
  802fc4:	1c400236 	bltu	r3,r17,802fd0 <_malloc_r+0x4a8>
  802fc8:	00c003c4 	movi	r3,15
  802fcc:	18800416 	blt	r3,r2,802fe0 <_malloc_r+0x4b8>
  802fd0:	9009883a 	mov	r4,r18
  802fd4:	080ee640 	call	80ee64 <__malloc_unlock>
  802fd8:	0005883a 	mov	r2,zero
  802fdc:	003f7b06 	br	802dcc <__alt_mem_onchip_mem+0xff782dcc>
  802fe0:	88c00054 	ori	r3,r17,1
  802fe4:	80c00115 	stw	r3,4(r16)
  802fe8:	8463883a 	add	r17,r16,r17
  802fec:	10800054 	ori	r2,r2,1
  802ff0:	9c400215 	stw	r17,8(r19)
  802ff4:	88800115 	stw	r2,4(r17)
  802ff8:	9009883a 	mov	r4,r18
  802ffc:	080ee640 	call	80ee64 <__malloc_unlock>
  803000:	80800204 	addi	r2,r16,8
  803004:	003f7106 	br	802dcc <__alt_mem_onchip_mem+0xff782dcc>
  803008:	00c00504 	movi	r3,20
  80300c:	18804a2e 	bgeu	r3,r2,803138 <_malloc_r+0x610>
  803010:	00c01504 	movi	r3,84
  803014:	18806e36 	bltu	r3,r2,8031d0 <_malloc_r+0x6a8>
  803018:	8804d33a 	srli	r2,r17,12
  80301c:	12001bc4 	addi	r8,r2,111
  803020:	11c01b84 	addi	r7,r2,110
  803024:	4209883a 	add	r4,r8,r8
  803028:	003edd06 	br	802ba0 <__alt_mem_onchip_mem+0xff782ba0>
  80302c:	3804d27a 	srli	r2,r7,9
  803030:	00c00104 	movi	r3,4
  803034:	1880442e 	bgeu	r3,r2,803148 <_malloc_r+0x620>
  803038:	00c00504 	movi	r3,20
  80303c:	18808136 	bltu	r3,r2,803244 <_malloc_r+0x71c>
  803040:	11401704 	addi	r5,r2,92
  803044:	10c016c4 	addi	r3,r2,91
  803048:	294b883a 	add	r5,r5,r5
  80304c:	294b883a 	add	r5,r5,r5
  803050:	294b883a 	add	r5,r5,r5
  803054:	994b883a 	add	r5,r19,r5
  803058:	28800017 	ldw	r2,0(r5)
  80305c:	01802074 	movhi	r6,129
  803060:	297ffe04 	addi	r5,r5,-8
  803064:	318d2004 	addi	r6,r6,13440
  803068:	28806526 	beq	r5,r2,803200 <_malloc_r+0x6d8>
  80306c:	01bfff04 	movi	r6,-4
  803070:	10c00117 	ldw	r3,4(r2)
  803074:	1986703a 	and	r3,r3,r6
  803078:	38c0022e 	bgeu	r7,r3,803084 <_malloc_r+0x55c>
  80307c:	10800217 	ldw	r2,8(r2)
  803080:	28bffb1e 	bne	r5,r2,803070 <__alt_mem_onchip_mem+0xff783070>
  803084:	11400317 	ldw	r5,12(r2)
  803088:	98c00117 	ldw	r3,4(r19)
  80308c:	81400315 	stw	r5,12(r16)
  803090:	80800215 	stw	r2,8(r16)
  803094:	2c000215 	stw	r16,8(r5)
  803098:	14000315 	stw	r16,12(r2)
  80309c:	003ef806 	br	802c80 <__alt_mem_onchip_mem+0xff782c80>
  8030a0:	88c00054 	ori	r3,r17,1
  8030a4:	80c00115 	stw	r3,4(r16)
  8030a8:	8463883a 	add	r17,r16,r17
  8030ac:	34400515 	stw	r17,20(r6)
  8030b0:	34400415 	stw	r17,16(r6)
  8030b4:	10c00054 	ori	r3,r2,1
  8030b8:	8a000315 	stw	r8,12(r17)
  8030bc:	8a000215 	stw	r8,8(r17)
  8030c0:	88c00115 	stw	r3,4(r17)
  8030c4:	88a3883a 	add	r17,r17,r2
  8030c8:	88800015 	stw	r2,0(r17)
  8030cc:	9009883a 	mov	r4,r18
  8030d0:	080ee640 	call	80ee64 <__malloc_unlock>
  8030d4:	80800204 	addi	r2,r16,8
  8030d8:	003f3c06 	br	802dcc <__alt_mem_onchip_mem+0xff782dcc>
  8030dc:	30c00117 	ldw	r3,4(r6)
  8030e0:	003ee706 	br	802c80 <__alt_mem_onchip_mem+0xff782c80>
  8030e4:	5ac00044 	addi	r11,r11,1
  8030e8:	588000cc 	andi	r2,r11,3
  8030ec:	31800204 	addi	r6,r6,8
  8030f0:	103efd1e 	bne	r2,zero,802ce8 <__alt_mem_onchip_mem+0xff782ce8>
  8030f4:	00002406 	br	803188 <_malloc_r+0x660>
  8030f8:	14000317 	ldw	r16,12(r2)
  8030fc:	143f251e 	bne	r2,r16,802d94 <__alt_mem_onchip_mem+0xff782d94>
  803100:	21000084 	addi	r4,r4,2
  803104:	003ebc06 	br	802bf8 <__alt_mem_onchip_mem+0xff782bf8>
  803108:	8085883a 	add	r2,r16,r2
  80310c:	10c00117 	ldw	r3,4(r2)
  803110:	81000317 	ldw	r4,12(r16)
  803114:	81400217 	ldw	r5,8(r16)
  803118:	18c00054 	ori	r3,r3,1
  80311c:	10c00115 	stw	r3,4(r2)
  803120:	29000315 	stw	r4,12(r5)
  803124:	21400215 	stw	r5,8(r4)
  803128:	9009883a 	mov	r4,r18
  80312c:	080ee640 	call	80ee64 <__malloc_unlock>
  803130:	80800204 	addi	r2,r16,8
  803134:	003f2506 	br	802dcc <__alt_mem_onchip_mem+0xff782dcc>
  803138:	12001704 	addi	r8,r2,92
  80313c:	11c016c4 	addi	r7,r2,91
  803140:	4209883a 	add	r4,r8,r8
  803144:	003e9606 	br	802ba0 <__alt_mem_onchip_mem+0xff782ba0>
  803148:	3804d1ba 	srli	r2,r7,6
  80314c:	11400e44 	addi	r5,r2,57
  803150:	10c00e04 	addi	r3,r2,56
  803154:	294b883a 	add	r5,r5,r5
  803158:	003fbc06 	br	80304c <__alt_mem_onchip_mem+0xff78304c>
  80315c:	84ff5926 	beq	r16,r19,802ec4 <__alt_mem_onchip_mem+0xff782ec4>
  803160:	00802074 	movhi	r2,129
  803164:	108d2004 	addi	r2,r2,13440
  803168:	14000217 	ldw	r16,8(r2)
  80316c:	00bfff04 	movi	r2,-4
  803170:	80c00117 	ldw	r3,4(r16)
  803174:	1886703a 	and	r3,r3,r2
  803178:	003f9106 	br	802fc0 <__alt_mem_onchip_mem+0xff782fc0>
  80317c:	60800217 	ldw	r2,8(r12)
  803180:	213fffc4 	addi	r4,r4,-1
  803184:	1300651e 	bne	r2,r12,80331c <_malloc_r+0x7f4>
  803188:	208000cc 	andi	r2,r4,3
  80318c:	633ffe04 	addi	r12,r12,-8
  803190:	103ffa1e 	bne	r2,zero,80317c <__alt_mem_onchip_mem+0xff78317c>
  803194:	98800117 	ldw	r2,4(r19)
  803198:	0146303a 	nor	r3,zero,r5
  80319c:	1884703a 	and	r2,r3,r2
  8031a0:	98800115 	stw	r2,4(r19)
  8031a4:	294b883a 	add	r5,r5,r5
  8031a8:	117f2836 	bltu	r2,r5,802e4c <__alt_mem_onchip_mem+0xff782e4c>
  8031ac:	283f2726 	beq	r5,zero,802e4c <__alt_mem_onchip_mem+0xff782e4c>
  8031b0:	2886703a 	and	r3,r5,r2
  8031b4:	5809883a 	mov	r4,r11
  8031b8:	183ec31e 	bne	r3,zero,802cc8 <__alt_mem_onchip_mem+0xff782cc8>
  8031bc:	294b883a 	add	r5,r5,r5
  8031c0:	2886703a 	and	r3,r5,r2
  8031c4:	21000104 	addi	r4,r4,4
  8031c8:	183ffc26 	beq	r3,zero,8031bc <__alt_mem_onchip_mem+0xff7831bc>
  8031cc:	003ebe06 	br	802cc8 <__alt_mem_onchip_mem+0xff782cc8>
  8031d0:	00c05504 	movi	r3,340
  8031d4:	18801236 	bltu	r3,r2,803220 <_malloc_r+0x6f8>
  8031d8:	8804d3fa 	srli	r2,r17,15
  8031dc:	12001e04 	addi	r8,r2,120
  8031e0:	11c01dc4 	addi	r7,r2,119
  8031e4:	4209883a 	add	r4,r8,r8
  8031e8:	003e6d06 	br	802ba0 <__alt_mem_onchip_mem+0xff782ba0>
  8031ec:	00c40004 	movi	r3,4096
  8031f0:	003f4606 	br	802f0c <__alt_mem_onchip_mem+0xff782f0c>
  8031f4:	00800044 	movi	r2,1
  8031f8:	a0800115 	stw	r2,4(r20)
  8031fc:	003f7406 	br	802fd0 <__alt_mem_onchip_mem+0xff782fd0>
  803200:	1805d0ba 	srai	r2,r3,2
  803204:	01c00044 	movi	r7,1
  803208:	30c00117 	ldw	r3,4(r6)
  80320c:	388e983a 	sll	r7,r7,r2
  803210:	2805883a 	mov	r2,r5
  803214:	38c6b03a 	or	r3,r7,r3
  803218:	30c00115 	stw	r3,4(r6)
  80321c:	003f9b06 	br	80308c <__alt_mem_onchip_mem+0xff78308c>
  803220:	00c15504 	movi	r3,1364
  803224:	18801a36 	bltu	r3,r2,803290 <_malloc_r+0x768>
  803228:	8804d4ba 	srli	r2,r17,18
  80322c:	12001f44 	addi	r8,r2,125
  803230:	11c01f04 	addi	r7,r2,124
  803234:	4209883a 	add	r4,r8,r8
  803238:	003e5906 	br	802ba0 <__alt_mem_onchip_mem+0xff782ba0>
  80323c:	ad400404 	addi	r21,r21,16
  803240:	003f1706 	br	802ea0 <__alt_mem_onchip_mem+0xff782ea0>
  803244:	00c01504 	movi	r3,84
  803248:	18802336 	bltu	r3,r2,8032d8 <_malloc_r+0x7b0>
  80324c:	3804d33a 	srli	r2,r7,12
  803250:	11401bc4 	addi	r5,r2,111
  803254:	10c01b84 	addi	r3,r2,110
  803258:	294b883a 	add	r5,r5,r5
  80325c:	003f7b06 	br	80304c <__alt_mem_onchip_mem+0xff78304c>
  803260:	9c000217 	ldw	r16,8(r19)
  803264:	00bfff04 	movi	r2,-4
  803268:	80c00117 	ldw	r3,4(r16)
  80326c:	1886703a 	and	r3,r3,r2
  803270:	003f5306 	br	802fc0 <__alt_mem_onchip_mem+0xff782fc0>
  803274:	3083ffcc 	andi	r2,r6,4095
  803278:	103f181e 	bne	r2,zero,802edc <__alt_mem_onchip_mem+0xff782edc>
  80327c:	99000217 	ldw	r4,8(r19)
  803280:	b545883a 	add	r2,r22,r21
  803284:	10800054 	ori	r2,r2,1
  803288:	20800115 	stw	r2,4(r4)
  80328c:	003f3e06 	br	802f88 <__alt_mem_onchip_mem+0xff782f88>
  803290:	01003f84 	movi	r4,254
  803294:	02001fc4 	movi	r8,127
  803298:	01c01f84 	movi	r7,126
  80329c:	003e4006 	br	802ba0 <__alt_mem_onchip_mem+0xff782ba0>
  8032a0:	00802074 	movhi	r2,129
  8032a4:	10933f04 	addi	r2,r2,19708
  8032a8:	15000015 	stw	r20,0(r2)
  8032ac:	003f1106 	br	802ef4 <__alt_mem_onchip_mem+0xff782ef4>
  8032b0:	00800044 	movi	r2,1
  8032b4:	002b883a 	mov	r21,zero
  8032b8:	003f1f06 	br	802f38 <__alt_mem_onchip_mem+0xff782f38>
  8032bc:	81400204 	addi	r5,r16,8
  8032c0:	9009883a 	mov	r4,r18
  8032c4:	08080380 	call	808038 <_free_r>
  8032c8:	00802074 	movhi	r2,129
  8032cc:	109aae04 	addi	r2,r2,27320
  8032d0:	10c00017 	ldw	r3,0(r2)
  8032d4:	003f2c06 	br	802f88 <__alt_mem_onchip_mem+0xff782f88>
  8032d8:	00c05504 	movi	r3,340
  8032dc:	18800536 	bltu	r3,r2,8032f4 <_malloc_r+0x7cc>
  8032e0:	3804d3fa 	srli	r2,r7,15
  8032e4:	11401e04 	addi	r5,r2,120
  8032e8:	10c01dc4 	addi	r3,r2,119
  8032ec:	294b883a 	add	r5,r5,r5
  8032f0:	003f5606 	br	80304c <__alt_mem_onchip_mem+0xff78304c>
  8032f4:	00c15504 	movi	r3,1364
  8032f8:	18800536 	bltu	r3,r2,803310 <_malloc_r+0x7e8>
  8032fc:	3804d4ba 	srli	r2,r7,18
  803300:	11401f44 	addi	r5,r2,125
  803304:	10c01f04 	addi	r3,r2,124
  803308:	294b883a 	add	r5,r5,r5
  80330c:	003f4f06 	br	80304c <__alt_mem_onchip_mem+0xff78304c>
  803310:	01403f84 	movi	r5,254
  803314:	00c01f84 	movi	r3,126
  803318:	003f4c06 	br	80304c <__alt_mem_onchip_mem+0xff78304c>
  80331c:	98800117 	ldw	r2,4(r19)
  803320:	003fa006 	br	8031a4 <__alt_mem_onchip_mem+0xff7831a4>
  803324:	8808d0fa 	srli	r4,r17,3
  803328:	20800044 	addi	r2,r4,1
  80332c:	1085883a 	add	r2,r2,r2
  803330:	003e9006 	br	802d74 <__alt_mem_onchip_mem+0xff782d74>

00803334 <memset>:
  803334:	20c000cc 	andi	r3,r4,3
  803338:	2005883a 	mov	r2,r4
  80333c:	18004426 	beq	r3,zero,803450 <memset+0x11c>
  803340:	31ffffc4 	addi	r7,r6,-1
  803344:	30004026 	beq	r6,zero,803448 <memset+0x114>
  803348:	2813883a 	mov	r9,r5
  80334c:	200d883a 	mov	r6,r4
  803350:	2007883a 	mov	r3,r4
  803354:	00000406 	br	803368 <memset+0x34>
  803358:	3a3fffc4 	addi	r8,r7,-1
  80335c:	31800044 	addi	r6,r6,1
  803360:	38003926 	beq	r7,zero,803448 <memset+0x114>
  803364:	400f883a 	mov	r7,r8
  803368:	18c00044 	addi	r3,r3,1
  80336c:	32400005 	stb	r9,0(r6)
  803370:	1a0000cc 	andi	r8,r3,3
  803374:	403ff81e 	bne	r8,zero,803358 <__alt_mem_onchip_mem+0xff783358>
  803378:	010000c4 	movi	r4,3
  80337c:	21c02d2e 	bgeu	r4,r7,803434 <memset+0x100>
  803380:	29003fcc 	andi	r4,r5,255
  803384:	200c923a 	slli	r6,r4,8
  803388:	3108b03a 	or	r4,r6,r4
  80338c:	200c943a 	slli	r6,r4,16
  803390:	218cb03a 	or	r6,r4,r6
  803394:	010003c4 	movi	r4,15
  803398:	21c0182e 	bgeu	r4,r7,8033fc <memset+0xc8>
  80339c:	3b3ffc04 	addi	r12,r7,-16
  8033a0:	6018d13a 	srli	r12,r12,4
  8033a4:	1a000104 	addi	r8,r3,4
  8033a8:	1ac00204 	addi	r11,r3,8
  8033ac:	6008913a 	slli	r4,r12,4
  8033b0:	1a800304 	addi	r10,r3,12
  8033b4:	1813883a 	mov	r9,r3
  8033b8:	21000504 	addi	r4,r4,20
  8033bc:	1909883a 	add	r4,r3,r4
  8033c0:	49800015 	stw	r6,0(r9)
  8033c4:	41800015 	stw	r6,0(r8)
  8033c8:	59800015 	stw	r6,0(r11)
  8033cc:	51800015 	stw	r6,0(r10)
  8033d0:	42000404 	addi	r8,r8,16
  8033d4:	4a400404 	addi	r9,r9,16
  8033d8:	5ac00404 	addi	r11,r11,16
  8033dc:	52800404 	addi	r10,r10,16
  8033e0:	413ff71e 	bne	r8,r4,8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  8033e4:	63000044 	addi	r12,r12,1
  8033e8:	6018913a 	slli	r12,r12,4
  8033ec:	39c003cc 	andi	r7,r7,15
  8033f0:	010000c4 	movi	r4,3
  8033f4:	1b07883a 	add	r3,r3,r12
  8033f8:	21c00e2e 	bgeu	r4,r7,803434 <memset+0x100>
  8033fc:	1813883a 	mov	r9,r3
  803400:	3811883a 	mov	r8,r7
  803404:	010000c4 	movi	r4,3
  803408:	49800015 	stw	r6,0(r9)
  80340c:	423fff04 	addi	r8,r8,-4
  803410:	4a400104 	addi	r9,r9,4
  803414:	223ffc36 	bltu	r4,r8,803408 <__alt_mem_onchip_mem+0xff783408>
  803418:	393fff04 	addi	r4,r7,-4
  80341c:	2008d0ba 	srli	r4,r4,2
  803420:	39c000cc 	andi	r7,r7,3
  803424:	21000044 	addi	r4,r4,1
  803428:	2109883a 	add	r4,r4,r4
  80342c:	2109883a 	add	r4,r4,r4
  803430:	1907883a 	add	r3,r3,r4
  803434:	38000526 	beq	r7,zero,80344c <memset+0x118>
  803438:	19cf883a 	add	r7,r3,r7
  80343c:	19400005 	stb	r5,0(r3)
  803440:	18c00044 	addi	r3,r3,1
  803444:	38fffd1e 	bne	r7,r3,80343c <__alt_mem_onchip_mem+0xff78343c>
  803448:	f800283a 	ret
  80344c:	f800283a 	ret
  803450:	2007883a 	mov	r3,r4
  803454:	300f883a 	mov	r7,r6
  803458:	003fc706 	br	803378 <__alt_mem_onchip_mem+0xff783378>

0080345c <_open_r>:
  80345c:	defffd04 	addi	sp,sp,-12
  803460:	2805883a 	mov	r2,r5
  803464:	dc000015 	stw	r16,0(sp)
  803468:	04002074 	movhi	r16,129
  80346c:	dc400115 	stw	r17,4(sp)
  803470:	300b883a 	mov	r5,r6
  803474:	841aa004 	addi	r16,r16,27264
  803478:	2023883a 	mov	r17,r4
  80347c:	380d883a 	mov	r6,r7
  803480:	1009883a 	mov	r4,r2
  803484:	dfc00215 	stw	ra,8(sp)
  803488:	80000015 	stw	zero,0(r16)
  80348c:	080ef880 	call	80ef88 <open>
  803490:	00ffffc4 	movi	r3,-1
  803494:	10c00526 	beq	r2,r3,8034ac <_open_r+0x50>
  803498:	dfc00217 	ldw	ra,8(sp)
  80349c:	dc400117 	ldw	r17,4(sp)
  8034a0:	dc000017 	ldw	r16,0(sp)
  8034a4:	dec00304 	addi	sp,sp,12
  8034a8:	f800283a 	ret
  8034ac:	80c00017 	ldw	r3,0(r16)
  8034b0:	183ff926 	beq	r3,zero,803498 <__alt_mem_onchip_mem+0xff783498>
  8034b4:	88c00015 	stw	r3,0(r17)
  8034b8:	003ff706 	br	803498 <__alt_mem_onchip_mem+0xff783498>

008034bc <_printf_r>:
  8034bc:	defffd04 	addi	sp,sp,-12
  8034c0:	2805883a 	mov	r2,r5
  8034c4:	dfc00015 	stw	ra,0(sp)
  8034c8:	d9800115 	stw	r6,4(sp)
  8034cc:	d9c00215 	stw	r7,8(sp)
  8034d0:	21400217 	ldw	r5,8(r4)
  8034d4:	d9c00104 	addi	r7,sp,4
  8034d8:	100d883a 	mov	r6,r2
  8034dc:	0803c040 	call	803c04 <___vfprintf_internal_r>
  8034e0:	dfc00017 	ldw	ra,0(sp)
  8034e4:	dec00304 	addi	sp,sp,12
  8034e8:	f800283a 	ret

008034ec <printf>:
  8034ec:	defffc04 	addi	sp,sp,-16
  8034f0:	dfc00015 	stw	ra,0(sp)
  8034f4:	d9400115 	stw	r5,4(sp)
  8034f8:	d9800215 	stw	r6,8(sp)
  8034fc:	d9c00315 	stw	r7,12(sp)
  803500:	00802074 	movhi	r2,129
  803504:	10933e04 	addi	r2,r2,19704
  803508:	10800017 	ldw	r2,0(r2)
  80350c:	200b883a 	mov	r5,r4
  803510:	d9800104 	addi	r6,sp,4
  803514:	11000217 	ldw	r4,8(r2)
  803518:	0805dfc0 	call	805dfc <__vfprintf_internal>
  80351c:	dfc00017 	ldw	ra,0(sp)
  803520:	dec00404 	addi	sp,sp,16
  803524:	f800283a 	ret

00803528 <_putc_r>:
  803528:	defffc04 	addi	sp,sp,-16
  80352c:	dc000215 	stw	r16,8(sp)
  803530:	dfc00315 	stw	ra,12(sp)
  803534:	2021883a 	mov	r16,r4
  803538:	20000226 	beq	r4,zero,803544 <_putc_r+0x1c>
  80353c:	20800e17 	ldw	r2,56(r4)
  803540:	10001b26 	beq	r2,zero,8035b0 <_putc_r+0x88>
  803544:	30800217 	ldw	r2,8(r6)
  803548:	10bfffc4 	addi	r2,r2,-1
  80354c:	30800215 	stw	r2,8(r6)
  803550:	10000a16 	blt	r2,zero,80357c <_putc_r+0x54>
  803554:	30800017 	ldw	r2,0(r6)
  803558:	11400005 	stb	r5,0(r2)
  80355c:	30800017 	ldw	r2,0(r6)
  803560:	10c00044 	addi	r3,r2,1
  803564:	30c00015 	stw	r3,0(r6)
  803568:	10800003 	ldbu	r2,0(r2)
  80356c:	dfc00317 	ldw	ra,12(sp)
  803570:	dc000217 	ldw	r16,8(sp)
  803574:	dec00404 	addi	sp,sp,16
  803578:	f800283a 	ret
  80357c:	30c00617 	ldw	r3,24(r6)
  803580:	10c00616 	blt	r2,r3,80359c <_putc_r+0x74>
  803584:	30800017 	ldw	r2,0(r6)
  803588:	00c00284 	movi	r3,10
  80358c:	11400005 	stb	r5,0(r2)
  803590:	30800017 	ldw	r2,0(r6)
  803594:	11400003 	ldbu	r5,0(r2)
  803598:	28fff11e 	bne	r5,r3,803560 <__alt_mem_onchip_mem+0xff783560>
  80359c:	8009883a 	mov	r4,r16
  8035a0:	dfc00317 	ldw	ra,12(sp)
  8035a4:	dc000217 	ldw	r16,8(sp)
  8035a8:	dec00404 	addi	sp,sp,16
  8035ac:	0805ed41 	jmpi	805ed4 <__swbuf_r>
  8035b0:	d9400015 	stw	r5,0(sp)
  8035b4:	d9800115 	stw	r6,4(sp)
  8035b8:	0801fc00 	call	801fc0 <__sinit>
  8035bc:	d9800117 	ldw	r6,4(sp)
  8035c0:	d9400017 	ldw	r5,0(sp)
  8035c4:	003fdf06 	br	803544 <__alt_mem_onchip_mem+0xff783544>

008035c8 <putc>:
  8035c8:	00802074 	movhi	r2,129
  8035cc:	defffc04 	addi	sp,sp,-16
  8035d0:	10933e04 	addi	r2,r2,19704
  8035d4:	dc000115 	stw	r16,4(sp)
  8035d8:	14000017 	ldw	r16,0(r2)
  8035dc:	dc400215 	stw	r17,8(sp)
  8035e0:	dfc00315 	stw	ra,12(sp)
  8035e4:	2023883a 	mov	r17,r4
  8035e8:	80000226 	beq	r16,zero,8035f4 <putc+0x2c>
  8035ec:	80800e17 	ldw	r2,56(r16)
  8035f0:	10001a26 	beq	r2,zero,80365c <putc+0x94>
  8035f4:	28800217 	ldw	r2,8(r5)
  8035f8:	10bfffc4 	addi	r2,r2,-1
  8035fc:	28800215 	stw	r2,8(r5)
  803600:	10000b16 	blt	r2,zero,803630 <putc+0x68>
  803604:	28800017 	ldw	r2,0(r5)
  803608:	14400005 	stb	r17,0(r2)
  80360c:	28800017 	ldw	r2,0(r5)
  803610:	10c00044 	addi	r3,r2,1
  803614:	28c00015 	stw	r3,0(r5)
  803618:	10800003 	ldbu	r2,0(r2)
  80361c:	dfc00317 	ldw	ra,12(sp)
  803620:	dc400217 	ldw	r17,8(sp)
  803624:	dc000117 	ldw	r16,4(sp)
  803628:	dec00404 	addi	sp,sp,16
  80362c:	f800283a 	ret
  803630:	28c00617 	ldw	r3,24(r5)
  803634:	10c00e16 	blt	r2,r3,803670 <putc+0xa8>
  803638:	28800017 	ldw	r2,0(r5)
  80363c:	01000284 	movi	r4,10
  803640:	14400005 	stb	r17,0(r2)
  803644:	28800017 	ldw	r2,0(r5)
  803648:	10c00003 	ldbu	r3,0(r2)
  80364c:	193ff01e 	bne	r3,r4,803610 <__alt_mem_onchip_mem+0xff783610>
  803650:	280d883a 	mov	r6,r5
  803654:	180b883a 	mov	r5,r3
  803658:	00000706 	br	803678 <putc+0xb0>
  80365c:	8009883a 	mov	r4,r16
  803660:	d9400015 	stw	r5,0(sp)
  803664:	0801fc00 	call	801fc0 <__sinit>
  803668:	d9400017 	ldw	r5,0(sp)
  80366c:	003fe106 	br	8035f4 <__alt_mem_onchip_mem+0xff7835f4>
  803670:	280d883a 	mov	r6,r5
  803674:	880b883a 	mov	r5,r17
  803678:	8009883a 	mov	r4,r16
  80367c:	dfc00317 	ldw	ra,12(sp)
  803680:	dc400217 	ldw	r17,8(sp)
  803684:	dc000117 	ldw	r16,4(sp)
  803688:	dec00404 	addi	sp,sp,16
  80368c:	0805ed41 	jmpi	805ed4 <__swbuf_r>

00803690 <_puts_r>:
  803690:	defff604 	addi	sp,sp,-40
  803694:	dc000715 	stw	r16,28(sp)
  803698:	2021883a 	mov	r16,r4
  80369c:	2809883a 	mov	r4,r5
  8036a0:	dc400815 	stw	r17,32(sp)
  8036a4:	dfc00915 	stw	ra,36(sp)
  8036a8:	2823883a 	mov	r17,r5
  8036ac:	0803b6c0 	call	803b6c <strlen>
  8036b0:	10c00044 	addi	r3,r2,1
  8036b4:	d8800115 	stw	r2,4(sp)
  8036b8:	00802074 	movhi	r2,129
  8036bc:	108ae704 	addi	r2,r2,11164
  8036c0:	d8800215 	stw	r2,8(sp)
  8036c4:	00800044 	movi	r2,1
  8036c8:	d8800315 	stw	r2,12(sp)
  8036cc:	00800084 	movi	r2,2
  8036d0:	dc400015 	stw	r17,0(sp)
  8036d4:	d8c00615 	stw	r3,24(sp)
  8036d8:	dec00415 	stw	sp,16(sp)
  8036dc:	d8800515 	stw	r2,20(sp)
  8036e0:	80000226 	beq	r16,zero,8036ec <_puts_r+0x5c>
  8036e4:	80800e17 	ldw	r2,56(r16)
  8036e8:	10001426 	beq	r2,zero,80373c <_puts_r+0xac>
  8036ec:	81400217 	ldw	r5,8(r16)
  8036f0:	2880030b 	ldhu	r2,12(r5)
  8036f4:	10c8000c 	andi	r3,r2,8192
  8036f8:	1800061e 	bne	r3,zero,803714 <_puts_r+0x84>
  8036fc:	29001917 	ldw	r4,100(r5)
  803700:	00f7ffc4 	movi	r3,-8193
  803704:	10880014 	ori	r2,r2,8192
  803708:	20c6703a 	and	r3,r4,r3
  80370c:	2880030d 	sth	r2,12(r5)
  803710:	28c01915 	stw	r3,100(r5)
  803714:	d9800404 	addi	r6,sp,16
  803718:	8009883a 	mov	r4,r16
  80371c:	08083480 	call	808348 <__sfvwrite_r>
  803720:	1000091e 	bne	r2,zero,803748 <_puts_r+0xb8>
  803724:	00800284 	movi	r2,10
  803728:	dfc00917 	ldw	ra,36(sp)
  80372c:	dc400817 	ldw	r17,32(sp)
  803730:	dc000717 	ldw	r16,28(sp)
  803734:	dec00a04 	addi	sp,sp,40
  803738:	f800283a 	ret
  80373c:	8009883a 	mov	r4,r16
  803740:	0801fc00 	call	801fc0 <__sinit>
  803744:	003fe906 	br	8036ec <__alt_mem_onchip_mem+0xff7836ec>
  803748:	00bfffc4 	movi	r2,-1
  80374c:	003ff606 	br	803728 <__alt_mem_onchip_mem+0xff783728>

00803750 <puts>:
  803750:	00802074 	movhi	r2,129
  803754:	10933e04 	addi	r2,r2,19704
  803758:	200b883a 	mov	r5,r4
  80375c:	11000017 	ldw	r4,0(r2)
  803760:	08036901 	jmpi	803690 <_puts_r>

00803764 <lflush>:
  803764:	2080030b 	ldhu	r2,12(r4)
  803768:	00c00244 	movi	r3,9
  80376c:	1080024c 	andi	r2,r2,9
  803770:	10c00226 	beq	r2,r3,80377c <lflush+0x18>
  803774:	0005883a 	mov	r2,zero
  803778:	f800283a 	ret
  80377c:	0807e381 	jmpi	807e38 <fflush>

00803780 <__srefill_r>:
  803780:	defffc04 	addi	sp,sp,-16
  803784:	dc400115 	stw	r17,4(sp)
  803788:	dc000015 	stw	r16,0(sp)
  80378c:	dfc00315 	stw	ra,12(sp)
  803790:	dc800215 	stw	r18,8(sp)
  803794:	2023883a 	mov	r17,r4
  803798:	2821883a 	mov	r16,r5
  80379c:	20000226 	beq	r4,zero,8037a8 <__srefill_r+0x28>
  8037a0:	20800e17 	ldw	r2,56(r4)
  8037a4:	10003c26 	beq	r2,zero,803898 <__srefill_r+0x118>
  8037a8:	80c0030b 	ldhu	r3,12(r16)
  8037ac:	1908000c 	andi	r4,r3,8192
  8037b0:	1805883a 	mov	r2,r3
  8037b4:	2000071e 	bne	r4,zero,8037d4 <__srefill_r+0x54>
  8037b8:	81001917 	ldw	r4,100(r16)
  8037bc:	18880014 	ori	r2,r3,8192
  8037c0:	00f7ffc4 	movi	r3,-8193
  8037c4:	20c8703a 	and	r4,r4,r3
  8037c8:	8080030d 	sth	r2,12(r16)
  8037cc:	1007883a 	mov	r3,r2
  8037d0:	81001915 	stw	r4,100(r16)
  8037d4:	80000115 	stw	zero,4(r16)
  8037d8:	1100080c 	andi	r4,r2,32
  8037dc:	2000571e 	bne	r4,zero,80393c <__srefill_r+0x1bc>
  8037e0:	1100010c 	andi	r4,r2,4
  8037e4:	20001f26 	beq	r4,zero,803864 <__srefill_r+0xe4>
  8037e8:	81400c17 	ldw	r5,48(r16)
  8037ec:	28000826 	beq	r5,zero,803810 <__srefill_r+0x90>
  8037f0:	80801004 	addi	r2,r16,64
  8037f4:	28800226 	beq	r5,r2,803800 <__srefill_r+0x80>
  8037f8:	8809883a 	mov	r4,r17
  8037fc:	08080380 	call	808038 <_free_r>
  803800:	80800f17 	ldw	r2,60(r16)
  803804:	80000c15 	stw	zero,48(r16)
  803808:	80800115 	stw	r2,4(r16)
  80380c:	1000391e 	bne	r2,zero,8038f4 <__srefill_r+0x174>
  803810:	80800417 	ldw	r2,16(r16)
  803814:	10004b26 	beq	r2,zero,803944 <__srefill_r+0x1c4>
  803818:	8480030b 	ldhu	r18,12(r16)
  80381c:	908000cc 	andi	r2,r18,3
  803820:	10001f1e 	bne	r2,zero,8038a0 <__srefill_r+0x120>
  803824:	81800417 	ldw	r6,16(r16)
  803828:	80800817 	ldw	r2,32(r16)
  80382c:	81c00517 	ldw	r7,20(r16)
  803830:	81400717 	ldw	r5,28(r16)
  803834:	81800015 	stw	r6,0(r16)
  803838:	8809883a 	mov	r4,r17
  80383c:	103ee83a 	callr	r2
  803840:	80800115 	stw	r2,4(r16)
  803844:	00800e0e 	bge	zero,r2,803880 <__srefill_r+0x100>
  803848:	0005883a 	mov	r2,zero
  80384c:	dfc00317 	ldw	ra,12(sp)
  803850:	dc800217 	ldw	r18,8(sp)
  803854:	dc400117 	ldw	r17,4(sp)
  803858:	dc000017 	ldw	r16,0(sp)
  80385c:	dec00404 	addi	sp,sp,16
  803860:	f800283a 	ret
  803864:	1100040c 	andi	r4,r2,16
  803868:	20003026 	beq	r4,zero,80392c <__srefill_r+0x1ac>
  80386c:	1080020c 	andi	r2,r2,8
  803870:	1000241e 	bne	r2,zero,803904 <__srefill_r+0x184>
  803874:	18c00114 	ori	r3,r3,4
  803878:	80c0030d 	sth	r3,12(r16)
  80387c:	003fe406 	br	803810 <__alt_mem_onchip_mem+0xff783810>
  803880:	80c0030b 	ldhu	r3,12(r16)
  803884:	1000161e 	bne	r2,zero,8038e0 <__srefill_r+0x160>
  803888:	18c00814 	ori	r3,r3,32
  80388c:	00bfffc4 	movi	r2,-1
  803890:	80c0030d 	sth	r3,12(r16)
  803894:	003fed06 	br	80384c <__alt_mem_onchip_mem+0xff78384c>
  803898:	0801fc00 	call	801fc0 <__sinit>
  80389c:	003fc206 	br	8037a8 <__alt_mem_onchip_mem+0xff7837a8>
  8038a0:	00802074 	movhi	r2,129
  8038a4:	10933d04 	addi	r2,r2,19700
  8038a8:	11000017 	ldw	r4,0(r2)
  8038ac:	01402034 	movhi	r5,128
  8038b0:	00800044 	movi	r2,1
  8038b4:	294dd904 	addi	r5,r5,14180
  8038b8:	8080030d 	sth	r2,12(r16)
  8038bc:	08026e40 	call	8026e4 <_fwalk>
  8038c0:	00800244 	movi	r2,9
  8038c4:	8480030d 	sth	r18,12(r16)
  8038c8:	9480024c 	andi	r18,r18,9
  8038cc:	90bfd51e 	bne	r18,r2,803824 <__alt_mem_onchip_mem+0xff783824>
  8038d0:	800b883a 	mov	r5,r16
  8038d4:	8809883a 	mov	r4,r17
  8038d8:	0807bc00 	call	807bc0 <__sflush_r>
  8038dc:	003fd106 	br	803824 <__alt_mem_onchip_mem+0xff783824>
  8038e0:	18c01014 	ori	r3,r3,64
  8038e4:	80000115 	stw	zero,4(r16)
  8038e8:	00bfffc4 	movi	r2,-1
  8038ec:	80c0030d 	sth	r3,12(r16)
  8038f0:	003fd606 	br	80384c <__alt_mem_onchip_mem+0xff78384c>
  8038f4:	80c00e17 	ldw	r3,56(r16)
  8038f8:	0005883a 	mov	r2,zero
  8038fc:	80c00015 	stw	r3,0(r16)
  803900:	003fd206 	br	80384c <__alt_mem_onchip_mem+0xff78384c>
  803904:	800b883a 	mov	r5,r16
  803908:	8809883a 	mov	r4,r17
  80390c:	0807ddc0 	call	807ddc <_fflush_r>
  803910:	10000a1e 	bne	r2,zero,80393c <__srefill_r+0x1bc>
  803914:	8080030b 	ldhu	r2,12(r16)
  803918:	00fffdc4 	movi	r3,-9
  80391c:	80000215 	stw	zero,8(r16)
  803920:	1886703a 	and	r3,r3,r2
  803924:	80000615 	stw	zero,24(r16)
  803928:	003fd206 	br	803874 <__alt_mem_onchip_mem+0xff783874>
  80392c:	00800244 	movi	r2,9
  803930:	88800015 	stw	r2,0(r17)
  803934:	18c01014 	ori	r3,r3,64
  803938:	80c0030d 	sth	r3,12(r16)
  80393c:	00bfffc4 	movi	r2,-1
  803940:	003fc206 	br	80384c <__alt_mem_onchip_mem+0xff78384c>
  803944:	800b883a 	mov	r5,r16
  803948:	8809883a 	mov	r4,r17
  80394c:	080296c0 	call	80296c <__smakebuf_r>
  803950:	003fb106 	br	803818 <__alt_mem_onchip_mem+0xff783818>

00803954 <__srget_r>:
  803954:	defffd04 	addi	sp,sp,-12
  803958:	dc400115 	stw	r17,4(sp)
  80395c:	dc000015 	stw	r16,0(sp)
  803960:	dfc00215 	stw	ra,8(sp)
  803964:	2023883a 	mov	r17,r4
  803968:	2821883a 	mov	r16,r5
  80396c:	20000226 	beq	r4,zero,803978 <__srget_r+0x24>
  803970:	20800e17 	ldw	r2,56(r4)
  803974:	10001026 	beq	r2,zero,8039b8 <__srget_r+0x64>
  803978:	800b883a 	mov	r5,r16
  80397c:	8809883a 	mov	r4,r17
  803980:	08037800 	call	803780 <__srefill_r>
  803984:	10000e1e 	bne	r2,zero,8039c0 <__srget_r+0x6c>
  803988:	80c00017 	ldw	r3,0(r16)
  80398c:	80800117 	ldw	r2,4(r16)
  803990:	19000044 	addi	r4,r3,1
  803994:	10bfffc4 	addi	r2,r2,-1
  803998:	80800115 	stw	r2,4(r16)
  80399c:	81000015 	stw	r4,0(r16)
  8039a0:	18800003 	ldbu	r2,0(r3)
  8039a4:	dfc00217 	ldw	ra,8(sp)
  8039a8:	dc400117 	ldw	r17,4(sp)
  8039ac:	dc000017 	ldw	r16,0(sp)
  8039b0:	dec00304 	addi	sp,sp,12
  8039b4:	f800283a 	ret
  8039b8:	0801fc00 	call	801fc0 <__sinit>
  8039bc:	003fee06 	br	803978 <__alt_mem_onchip_mem+0xff783978>
  8039c0:	00bfffc4 	movi	r2,-1
  8039c4:	003ff706 	br	8039a4 <__alt_mem_onchip_mem+0xff7839a4>

008039c8 <__srget>:
  8039c8:	00802074 	movhi	r2,129
  8039cc:	10933e04 	addi	r2,r2,19704
  8039d0:	200b883a 	mov	r5,r4
  8039d4:	11000017 	ldw	r4,0(r2)
  8039d8:	08039541 	jmpi	803954 <__srget_r>

008039dc <_sbrk_r>:
  8039dc:	defffd04 	addi	sp,sp,-12
  8039e0:	dc000015 	stw	r16,0(sp)
  8039e4:	04002074 	movhi	r16,129
  8039e8:	dc400115 	stw	r17,4(sp)
  8039ec:	841aa004 	addi	r16,r16,27264
  8039f0:	2023883a 	mov	r17,r4
  8039f4:	2809883a 	mov	r4,r5
  8039f8:	dfc00215 	stw	ra,8(sp)
  8039fc:	80000015 	stw	zero,0(r16)
  803a00:	080f2780 	call	80f278 <sbrk>
  803a04:	00ffffc4 	movi	r3,-1
  803a08:	10c00526 	beq	r2,r3,803a20 <_sbrk_r+0x44>
  803a0c:	dfc00217 	ldw	ra,8(sp)
  803a10:	dc400117 	ldw	r17,4(sp)
  803a14:	dc000017 	ldw	r16,0(sp)
  803a18:	dec00304 	addi	sp,sp,12
  803a1c:	f800283a 	ret
  803a20:	80c00017 	ldw	r3,0(r16)
  803a24:	183ff926 	beq	r3,zero,803a0c <__alt_mem_onchip_mem+0xff783a0c>
  803a28:	88c00015 	stw	r3,0(r17)
  803a2c:	003ff706 	br	803a0c <__alt_mem_onchip_mem+0xff783a0c>

00803a30 <__sread>:
  803a30:	defffe04 	addi	sp,sp,-8
  803a34:	dc000015 	stw	r16,0(sp)
  803a38:	2821883a 	mov	r16,r5
  803a3c:	2940038f 	ldh	r5,14(r5)
  803a40:	dfc00115 	stw	ra,4(sp)
  803a44:	0809d180 	call	809d18 <_read_r>
  803a48:	10000716 	blt	r2,zero,803a68 <__sread+0x38>
  803a4c:	80c01417 	ldw	r3,80(r16)
  803a50:	1887883a 	add	r3,r3,r2
  803a54:	80c01415 	stw	r3,80(r16)
  803a58:	dfc00117 	ldw	ra,4(sp)
  803a5c:	dc000017 	ldw	r16,0(sp)
  803a60:	dec00204 	addi	sp,sp,8
  803a64:	f800283a 	ret
  803a68:	80c0030b 	ldhu	r3,12(r16)
  803a6c:	18fbffcc 	andi	r3,r3,61439
  803a70:	80c0030d 	sth	r3,12(r16)
  803a74:	dfc00117 	ldw	ra,4(sp)
  803a78:	dc000017 	ldw	r16,0(sp)
  803a7c:	dec00204 	addi	sp,sp,8
  803a80:	f800283a 	ret

00803a84 <__seofread>:
  803a84:	0005883a 	mov	r2,zero
  803a88:	f800283a 	ret

00803a8c <__swrite>:
  803a8c:	2880030b 	ldhu	r2,12(r5)
  803a90:	defffb04 	addi	sp,sp,-20
  803a94:	dcc00315 	stw	r19,12(sp)
  803a98:	dc800215 	stw	r18,8(sp)
  803a9c:	dc400115 	stw	r17,4(sp)
  803aa0:	dc000015 	stw	r16,0(sp)
  803aa4:	dfc00415 	stw	ra,16(sp)
  803aa8:	10c0400c 	andi	r3,r2,256
  803aac:	2821883a 	mov	r16,r5
  803ab0:	2023883a 	mov	r17,r4
  803ab4:	3025883a 	mov	r18,r6
  803ab8:	3827883a 	mov	r19,r7
  803abc:	18000526 	beq	r3,zero,803ad4 <__swrite+0x48>
  803ac0:	2940038f 	ldh	r5,14(r5)
  803ac4:	01c00084 	movi	r7,2
  803ac8:	000d883a 	mov	r6,zero
  803acc:	08089340 	call	808934 <_lseek_r>
  803ad0:	8080030b 	ldhu	r2,12(r16)
  803ad4:	8140038f 	ldh	r5,14(r16)
  803ad8:	10bbffcc 	andi	r2,r2,61439
  803adc:	980f883a 	mov	r7,r19
  803ae0:	900d883a 	mov	r6,r18
  803ae4:	8809883a 	mov	r4,r17
  803ae8:	8080030d 	sth	r2,12(r16)
  803aec:	dfc00417 	ldw	ra,16(sp)
  803af0:	dcc00317 	ldw	r19,12(sp)
  803af4:	dc800217 	ldw	r18,8(sp)
  803af8:	dc400117 	ldw	r17,4(sp)
  803afc:	dc000017 	ldw	r16,0(sp)
  803b00:	dec00504 	addi	sp,sp,20
  803b04:	080602c1 	jmpi	80602c <_write_r>

00803b08 <__sseek>:
  803b08:	defffe04 	addi	sp,sp,-8
  803b0c:	dc000015 	stw	r16,0(sp)
  803b10:	2821883a 	mov	r16,r5
  803b14:	2940038f 	ldh	r5,14(r5)
  803b18:	dfc00115 	stw	ra,4(sp)
  803b1c:	08089340 	call	808934 <_lseek_r>
  803b20:	00ffffc4 	movi	r3,-1
  803b24:	10c00826 	beq	r2,r3,803b48 <__sseek+0x40>
  803b28:	80c0030b 	ldhu	r3,12(r16)
  803b2c:	80801415 	stw	r2,80(r16)
  803b30:	18c40014 	ori	r3,r3,4096
  803b34:	80c0030d 	sth	r3,12(r16)
  803b38:	dfc00117 	ldw	ra,4(sp)
  803b3c:	dc000017 	ldw	r16,0(sp)
  803b40:	dec00204 	addi	sp,sp,8
  803b44:	f800283a 	ret
  803b48:	80c0030b 	ldhu	r3,12(r16)
  803b4c:	18fbffcc 	andi	r3,r3,61439
  803b50:	80c0030d 	sth	r3,12(r16)
  803b54:	dfc00117 	ldw	ra,4(sp)
  803b58:	dc000017 	ldw	r16,0(sp)
  803b5c:	dec00204 	addi	sp,sp,8
  803b60:	f800283a 	ret

00803b64 <__sclose>:
  803b64:	2940038f 	ldh	r5,14(r5)
  803b68:	08061e01 	jmpi	8061e0 <_close_r>

00803b6c <strlen>:
  803b6c:	208000cc 	andi	r2,r4,3
  803b70:	10002026 	beq	r2,zero,803bf4 <strlen+0x88>
  803b74:	20800007 	ldb	r2,0(r4)
  803b78:	10002026 	beq	r2,zero,803bfc <strlen+0x90>
  803b7c:	2005883a 	mov	r2,r4
  803b80:	00000206 	br	803b8c <strlen+0x20>
  803b84:	10c00007 	ldb	r3,0(r2)
  803b88:	18001826 	beq	r3,zero,803bec <strlen+0x80>
  803b8c:	10800044 	addi	r2,r2,1
  803b90:	10c000cc 	andi	r3,r2,3
  803b94:	183ffb1e 	bne	r3,zero,803b84 <__alt_mem_onchip_mem+0xff783b84>
  803b98:	10c00017 	ldw	r3,0(r2)
  803b9c:	01ffbff4 	movhi	r7,65279
  803ba0:	39ffbfc4 	addi	r7,r7,-257
  803ba4:	00ca303a 	nor	r5,zero,r3
  803ba8:	01a02074 	movhi	r6,32897
  803bac:	19c7883a 	add	r3,r3,r7
  803bb0:	31a02004 	addi	r6,r6,-32640
  803bb4:	1946703a 	and	r3,r3,r5
  803bb8:	1986703a 	and	r3,r3,r6
  803bbc:	1800091e 	bne	r3,zero,803be4 <strlen+0x78>
  803bc0:	10800104 	addi	r2,r2,4
  803bc4:	10c00017 	ldw	r3,0(r2)
  803bc8:	19cb883a 	add	r5,r3,r7
  803bcc:	00c6303a 	nor	r3,zero,r3
  803bd0:	28c6703a 	and	r3,r5,r3
  803bd4:	1986703a 	and	r3,r3,r6
  803bd8:	183ff926 	beq	r3,zero,803bc0 <__alt_mem_onchip_mem+0xff783bc0>
  803bdc:	00000106 	br	803be4 <strlen+0x78>
  803be0:	10800044 	addi	r2,r2,1
  803be4:	10c00007 	ldb	r3,0(r2)
  803be8:	183ffd1e 	bne	r3,zero,803be0 <__alt_mem_onchip_mem+0xff783be0>
  803bec:	1105c83a 	sub	r2,r2,r4
  803bf0:	f800283a 	ret
  803bf4:	2005883a 	mov	r2,r4
  803bf8:	003fe706 	br	803b98 <__alt_mem_onchip_mem+0xff783b98>
  803bfc:	0005883a 	mov	r2,zero
  803c00:	f800283a 	ret

00803c04 <___vfprintf_internal_r>:
  803c04:	deffb804 	addi	sp,sp,-288
  803c08:	dfc04715 	stw	ra,284(sp)
  803c0c:	ddc04515 	stw	r23,276(sp)
  803c10:	dd404315 	stw	r21,268(sp)
  803c14:	d9002c15 	stw	r4,176(sp)
  803c18:	282f883a 	mov	r23,r5
  803c1c:	302b883a 	mov	r21,r6
  803c20:	d9c02d15 	stw	r7,180(sp)
  803c24:	df004615 	stw	fp,280(sp)
  803c28:	dd804415 	stw	r22,272(sp)
  803c2c:	dd004215 	stw	r20,264(sp)
  803c30:	dcc04115 	stw	r19,260(sp)
  803c34:	dc804015 	stw	r18,256(sp)
  803c38:	dc403f15 	stw	r17,252(sp)
  803c3c:	dc003e15 	stw	r16,248(sp)
  803c40:	08089040 	call	808904 <_localeconv_r>
  803c44:	10800017 	ldw	r2,0(r2)
  803c48:	1009883a 	mov	r4,r2
  803c4c:	d8803415 	stw	r2,208(sp)
  803c50:	0803b6c0 	call	803b6c <strlen>
  803c54:	d8803715 	stw	r2,220(sp)
  803c58:	d8802c17 	ldw	r2,176(sp)
  803c5c:	10000226 	beq	r2,zero,803c68 <___vfprintf_internal_r+0x64>
  803c60:	10800e17 	ldw	r2,56(r2)
  803c64:	1000f926 	beq	r2,zero,80404c <___vfprintf_internal_r+0x448>
  803c68:	b880030b 	ldhu	r2,12(r23)
  803c6c:	10c8000c 	andi	r3,r2,8192
  803c70:	1800061e 	bne	r3,zero,803c8c <___vfprintf_internal_r+0x88>
  803c74:	b9001917 	ldw	r4,100(r23)
  803c78:	00f7ffc4 	movi	r3,-8193
  803c7c:	10880014 	ori	r2,r2,8192
  803c80:	20c6703a 	and	r3,r4,r3
  803c84:	b880030d 	sth	r2,12(r23)
  803c88:	b8c01915 	stw	r3,100(r23)
  803c8c:	10c0020c 	andi	r3,r2,8
  803c90:	1800c126 	beq	r3,zero,803f98 <___vfprintf_internal_r+0x394>
  803c94:	b8c00417 	ldw	r3,16(r23)
  803c98:	1800bf26 	beq	r3,zero,803f98 <___vfprintf_internal_r+0x394>
  803c9c:	1080068c 	andi	r2,r2,26
  803ca0:	00c00284 	movi	r3,10
  803ca4:	10c0c426 	beq	r2,r3,803fb8 <___vfprintf_internal_r+0x3b4>
  803ca8:	d8c00404 	addi	r3,sp,16
  803cac:	05002074 	movhi	r20,129
  803cb0:	d9001e04 	addi	r4,sp,120
  803cb4:	a50af884 	addi	r20,r20,11234
  803cb8:	d8c01e15 	stw	r3,120(sp)
  803cbc:	d8002015 	stw	zero,128(sp)
  803cc0:	d8001f15 	stw	zero,124(sp)
  803cc4:	d8003315 	stw	zero,204(sp)
  803cc8:	d8003615 	stw	zero,216(sp)
  803ccc:	d8003815 	stw	zero,224(sp)
  803cd0:	1811883a 	mov	r8,r3
  803cd4:	d8003915 	stw	zero,228(sp)
  803cd8:	d8003a15 	stw	zero,232(sp)
  803cdc:	d8002f15 	stw	zero,188(sp)
  803ce0:	d9002815 	stw	r4,160(sp)
  803ce4:	a8800007 	ldb	r2,0(r21)
  803ce8:	10027b26 	beq	r2,zero,8046d8 <___vfprintf_internal_r+0xad4>
  803cec:	00c00944 	movi	r3,37
  803cf0:	a821883a 	mov	r16,r21
  803cf4:	10c0021e 	bne	r2,r3,803d00 <___vfprintf_internal_r+0xfc>
  803cf8:	00001406 	br	803d4c <___vfprintf_internal_r+0x148>
  803cfc:	10c00326 	beq	r2,r3,803d0c <___vfprintf_internal_r+0x108>
  803d00:	84000044 	addi	r16,r16,1
  803d04:	80800007 	ldb	r2,0(r16)
  803d08:	103ffc1e 	bne	r2,zero,803cfc <__alt_mem_onchip_mem+0xff783cfc>
  803d0c:	8563c83a 	sub	r17,r16,r21
  803d10:	88000e26 	beq	r17,zero,803d4c <___vfprintf_internal_r+0x148>
  803d14:	d8c02017 	ldw	r3,128(sp)
  803d18:	d8801f17 	ldw	r2,124(sp)
  803d1c:	45400015 	stw	r21,0(r8)
  803d20:	1c47883a 	add	r3,r3,r17
  803d24:	10800044 	addi	r2,r2,1
  803d28:	d8c02015 	stw	r3,128(sp)
  803d2c:	44400115 	stw	r17,4(r8)
  803d30:	d8801f15 	stw	r2,124(sp)
  803d34:	00c001c4 	movi	r3,7
  803d38:	1880a716 	blt	r3,r2,803fd8 <___vfprintf_internal_r+0x3d4>
  803d3c:	42000204 	addi	r8,r8,8
  803d40:	d9402f17 	ldw	r5,188(sp)
  803d44:	2c4b883a 	add	r5,r5,r17
  803d48:	d9402f15 	stw	r5,188(sp)
  803d4c:	80800007 	ldb	r2,0(r16)
  803d50:	1000a826 	beq	r2,zero,803ff4 <___vfprintf_internal_r+0x3f0>
  803d54:	84400047 	ldb	r17,1(r16)
  803d58:	00bfffc4 	movi	r2,-1
  803d5c:	85400044 	addi	r21,r16,1
  803d60:	d8002785 	stb	zero,158(sp)
  803d64:	0007883a 	mov	r3,zero
  803d68:	000f883a 	mov	r7,zero
  803d6c:	d8802915 	stw	r2,164(sp)
  803d70:	d8003115 	stw	zero,196(sp)
  803d74:	0025883a 	mov	r18,zero
  803d78:	01401604 	movi	r5,88
  803d7c:	01800244 	movi	r6,9
  803d80:	02800a84 	movi	r10,42
  803d84:	02401b04 	movi	r9,108
  803d88:	ad400044 	addi	r21,r21,1
  803d8c:	88bff804 	addi	r2,r17,-32
  803d90:	28830436 	bltu	r5,r2,8049a4 <___vfprintf_internal_r+0xda0>
  803d94:	100490ba 	slli	r2,r2,2
  803d98:	01002034 	movhi	r4,128
  803d9c:	210f6b04 	addi	r4,r4,15788
  803da0:	1105883a 	add	r2,r2,r4
  803da4:	10800017 	ldw	r2,0(r2)
  803da8:	1000683a 	jmp	r2
  803dac:	008048c4 	movi	r2,291
  803db0:	008049a4 	muli	r2,zero,294
  803db4:	008049a4 	muli	r2,zero,294
  803db8:	008048e4 	muli	r2,zero,291
  803dbc:	008049a4 	muli	r2,zero,294
  803dc0:	008049a4 	muli	r2,zero,294
  803dc4:	008049a4 	muli	r2,zero,294
  803dc8:	008049a4 	muli	r2,zero,294
  803dcc:	008049a4 	muli	r2,zero,294
  803dd0:	008049a4 	muli	r2,zero,294
  803dd4:	00804058 	cmpnei	r2,zero,257
  803dd8:	00804800 	call	80480 <__reset-0x77fb80>
  803ddc:	008049a4 	muli	r2,zero,294
  803de0:	00803f20 	cmpeqi	r2,zero,252
  803de4:	00804080 	call	80408 <__reset-0x77fbf8>
  803de8:	008049a4 	muli	r2,zero,294
  803dec:	008040c0 	call	8040c <__reset-0x77fbf4>
  803df0:	008040cc 	andi	r2,zero,259
  803df4:	008040cc 	andi	r2,zero,259
  803df8:	008040cc 	andi	r2,zero,259
  803dfc:	008040cc 	andi	r2,zero,259
  803e00:	008040cc 	andi	r2,zero,259
  803e04:	008040cc 	andi	r2,zero,259
  803e08:	008040cc 	andi	r2,zero,259
  803e0c:	008040cc 	andi	r2,zero,259
  803e10:	008040cc 	andi	r2,zero,259
  803e14:	008049a4 	muli	r2,zero,294
  803e18:	008049a4 	muli	r2,zero,294
  803e1c:	008049a4 	muli	r2,zero,294
  803e20:	008049a4 	muli	r2,zero,294
  803e24:	008049a4 	muli	r2,zero,294
  803e28:	008049a4 	muli	r2,zero,294
  803e2c:	008049a4 	muli	r2,zero,294
  803e30:	008049a4 	muli	r2,zero,294
  803e34:	008049a4 	muli	r2,zero,294
  803e38:	008049a4 	muli	r2,zero,294
  803e3c:	00804100 	call	80410 <__reset-0x77fbf0>
  803e40:	008041bc 	xorhi	r2,zero,262
  803e44:	008049a4 	muli	r2,zero,294
  803e48:	008041bc 	xorhi	r2,zero,262
  803e4c:	008049a4 	muli	r2,zero,294
  803e50:	008049a4 	muli	r2,zero,294
  803e54:	008049a4 	muli	r2,zero,294
  803e58:	008049a4 	muli	r2,zero,294
  803e5c:	0080425c 	xori	r2,zero,265
  803e60:	008049a4 	muli	r2,zero,294
  803e64:	008049a4 	muli	r2,zero,294
  803e68:	00804268 	cmpgeui	r2,zero,265
  803e6c:	008049a4 	muli	r2,zero,294
  803e70:	008049a4 	muli	r2,zero,294
  803e74:	008049a4 	muli	r2,zero,294
  803e78:	008049a4 	muli	r2,zero,294
  803e7c:	008049a4 	muli	r2,zero,294
  803e80:	008046e0 	cmpeqi	r2,zero,283
  803e84:	008049a4 	muli	r2,zero,294
  803e88:	008049a4 	muli	r2,zero,294
  803e8c:	00804740 	call	80474 <__reset-0x77fb8c>
  803e90:	008049a4 	muli	r2,zero,294
  803e94:	008049a4 	muli	r2,zero,294
  803e98:	008049a4 	muli	r2,zero,294
  803e9c:	008049a4 	muli	r2,zero,294
  803ea0:	008049a4 	muli	r2,zero,294
  803ea4:	008049a4 	muli	r2,zero,294
  803ea8:	008049a4 	muli	r2,zero,294
  803eac:	008049a4 	muli	r2,zero,294
  803eb0:	008049a4 	muli	r2,zero,294
  803eb4:	008049a4 	muli	r2,zero,294
  803eb8:	00804950 	cmplti	r2,zero,293
  803ebc:	008048f0 	cmpltui	r2,zero,291
  803ec0:	008041bc 	xorhi	r2,zero,262
  803ec4:	008041bc 	xorhi	r2,zero,262
  803ec8:	008041bc 	xorhi	r2,zero,262
  803ecc:	00804900 	call	80490 <__reset-0x77fb70>
  803ed0:	008048f0 	cmpltui	r2,zero,291
  803ed4:	008049a4 	muli	r2,zero,294
  803ed8:	008049a4 	muli	r2,zero,294
  803edc:	0080490c 	andi	r2,zero,292
  803ee0:	008049a4 	muli	r2,zero,294
  803ee4:	0080491c 	xori	r2,zero,292
  803ee8:	008047f0 	cmpltui	r2,zero,287
  803eec:	00803f2c 	andhi	r2,zero,252
  803ef0:	00804810 	cmplti	r2,zero,288
  803ef4:	008049a4 	muli	r2,zero,294
  803ef8:	0080481c 	xori	r2,zero,288
  803efc:	008049a4 	muli	r2,zero,294
  803f00:	00804878 	rdprs	r2,zero,289
  803f04:	008049a4 	muli	r2,zero,294
  803f08:	008049a4 	muli	r2,zero,294
  803f0c:	00804888 	cmpgei	r2,zero,290
  803f10:	d9003117 	ldw	r4,196(sp)
  803f14:	d8802d15 	stw	r2,180(sp)
  803f18:	0109c83a 	sub	r4,zero,r4
  803f1c:	d9003115 	stw	r4,196(sp)
  803f20:	94800114 	ori	r18,r18,4
  803f24:	ac400007 	ldb	r17,0(r21)
  803f28:	003f9706 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  803f2c:	00800c04 	movi	r2,48
  803f30:	d9002d17 	ldw	r4,180(sp)
  803f34:	d9402917 	ldw	r5,164(sp)
  803f38:	d8802705 	stb	r2,156(sp)
  803f3c:	00801e04 	movi	r2,120
  803f40:	d8802745 	stb	r2,157(sp)
  803f44:	d8002785 	stb	zero,158(sp)
  803f48:	20c00104 	addi	r3,r4,4
  803f4c:	24c00017 	ldw	r19,0(r4)
  803f50:	002d883a 	mov	r22,zero
  803f54:	90800094 	ori	r2,r18,2
  803f58:	28029a16 	blt	r5,zero,8049c4 <___vfprintf_internal_r+0xdc0>
  803f5c:	00bfdfc4 	movi	r2,-129
  803f60:	90a4703a 	and	r18,r18,r2
  803f64:	d8c02d15 	stw	r3,180(sp)
  803f68:	94800094 	ori	r18,r18,2
  803f6c:	9802871e 	bne	r19,zero,80498c <___vfprintf_internal_r+0xd88>
  803f70:	00802074 	movhi	r2,129
  803f74:	108af104 	addi	r2,r2,11204
  803f78:	d8803915 	stw	r2,228(sp)
  803f7c:	04401e04 	movi	r17,120
  803f80:	d8802917 	ldw	r2,164(sp)
  803f84:	0039883a 	mov	fp,zero
  803f88:	1001e926 	beq	r2,zero,804730 <___vfprintf_internal_r+0xb2c>
  803f8c:	0027883a 	mov	r19,zero
  803f90:	002d883a 	mov	r22,zero
  803f94:	00020506 	br	8047ac <___vfprintf_internal_r+0xba8>
  803f98:	d9002c17 	ldw	r4,176(sp)
  803f9c:	b80b883a 	mov	r5,r23
  803fa0:	080608c0 	call	80608c <__swsetup_r>
  803fa4:	1005ac1e 	bne	r2,zero,805658 <___vfprintf_internal_r+0x1a54>
  803fa8:	b880030b 	ldhu	r2,12(r23)
  803fac:	00c00284 	movi	r3,10
  803fb0:	1080068c 	andi	r2,r2,26
  803fb4:	10ff3c1e 	bne	r2,r3,803ca8 <__alt_mem_onchip_mem+0xff783ca8>
  803fb8:	b880038f 	ldh	r2,14(r23)
  803fbc:	103f3a16 	blt	r2,zero,803ca8 <__alt_mem_onchip_mem+0xff783ca8>
  803fc0:	d9c02d17 	ldw	r7,180(sp)
  803fc4:	d9002c17 	ldw	r4,176(sp)
  803fc8:	a80d883a 	mov	r6,r21
  803fcc:	b80b883a 	mov	r5,r23
  803fd0:	0805e180 	call	805e18 <__sbprintf>
  803fd4:	00001106 	br	80401c <___vfprintf_internal_r+0x418>
  803fd8:	d9002c17 	ldw	r4,176(sp)
  803fdc:	d9801e04 	addi	r6,sp,120
  803fe0:	b80b883a 	mov	r5,r23
  803fe4:	080a5280 	call	80a528 <__sprint_r>
  803fe8:	1000081e 	bne	r2,zero,80400c <___vfprintf_internal_r+0x408>
  803fec:	da000404 	addi	r8,sp,16
  803ff0:	003f5306 	br	803d40 <__alt_mem_onchip_mem+0xff783d40>
  803ff4:	d8802017 	ldw	r2,128(sp)
  803ff8:	10000426 	beq	r2,zero,80400c <___vfprintf_internal_r+0x408>
  803ffc:	d9002c17 	ldw	r4,176(sp)
  804000:	d9801e04 	addi	r6,sp,120
  804004:	b80b883a 	mov	r5,r23
  804008:	080a5280 	call	80a528 <__sprint_r>
  80400c:	b880030b 	ldhu	r2,12(r23)
  804010:	1080100c 	andi	r2,r2,64
  804014:	1005901e 	bne	r2,zero,805658 <___vfprintf_internal_r+0x1a54>
  804018:	d8802f17 	ldw	r2,188(sp)
  80401c:	dfc04717 	ldw	ra,284(sp)
  804020:	df004617 	ldw	fp,280(sp)
  804024:	ddc04517 	ldw	r23,276(sp)
  804028:	dd804417 	ldw	r22,272(sp)
  80402c:	dd404317 	ldw	r21,268(sp)
  804030:	dd004217 	ldw	r20,264(sp)
  804034:	dcc04117 	ldw	r19,260(sp)
  804038:	dc804017 	ldw	r18,256(sp)
  80403c:	dc403f17 	ldw	r17,252(sp)
  804040:	dc003e17 	ldw	r16,248(sp)
  804044:	dec04804 	addi	sp,sp,288
  804048:	f800283a 	ret
  80404c:	d9002c17 	ldw	r4,176(sp)
  804050:	0801fc00 	call	801fc0 <__sinit>
  804054:	003f0406 	br	803c68 <__alt_mem_onchip_mem+0xff783c68>
  804058:	d8802d17 	ldw	r2,180(sp)
  80405c:	d9002d17 	ldw	r4,180(sp)
  804060:	10800017 	ldw	r2,0(r2)
  804064:	d8803115 	stw	r2,196(sp)
  804068:	20800104 	addi	r2,r4,4
  80406c:	d9003117 	ldw	r4,196(sp)
  804070:	203fa716 	blt	r4,zero,803f10 <__alt_mem_onchip_mem+0xff783f10>
  804074:	d8802d15 	stw	r2,180(sp)
  804078:	ac400007 	ldb	r17,0(r21)
  80407c:	003f4206 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  804080:	ac400007 	ldb	r17,0(r21)
  804084:	aac00044 	addi	r11,r21,1
  804088:	8a872826 	beq	r17,r10,805d2c <___vfprintf_internal_r+0x2128>
  80408c:	88bff404 	addi	r2,r17,-48
  804090:	0009883a 	mov	r4,zero
  804094:	30867d36 	bltu	r6,r2,805a8c <___vfprintf_internal_r+0x1e88>
  804098:	5c400007 	ldb	r17,0(r11)
  80409c:	210002a4 	muli	r4,r4,10
  8040a0:	5d400044 	addi	r21,r11,1
  8040a4:	a817883a 	mov	r11,r21
  8040a8:	2089883a 	add	r4,r4,r2
  8040ac:	88bff404 	addi	r2,r17,-48
  8040b0:	30bff92e 	bgeu	r6,r2,804098 <__alt_mem_onchip_mem+0xff784098>
  8040b4:	2005c916 	blt	r4,zero,8057dc <___vfprintf_internal_r+0x1bd8>
  8040b8:	d9002915 	stw	r4,164(sp)
  8040bc:	003f3306 	br	803d8c <__alt_mem_onchip_mem+0xff783d8c>
  8040c0:	94802014 	ori	r18,r18,128
  8040c4:	ac400007 	ldb	r17,0(r21)
  8040c8:	003f2f06 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  8040cc:	a809883a 	mov	r4,r21
  8040d0:	d8003115 	stw	zero,196(sp)
  8040d4:	88bff404 	addi	r2,r17,-48
  8040d8:	0017883a 	mov	r11,zero
  8040dc:	24400007 	ldb	r17,0(r4)
  8040e0:	5ac002a4 	muli	r11,r11,10
  8040e4:	ad400044 	addi	r21,r21,1
  8040e8:	a809883a 	mov	r4,r21
  8040ec:	12d7883a 	add	r11,r2,r11
  8040f0:	88bff404 	addi	r2,r17,-48
  8040f4:	30bff92e 	bgeu	r6,r2,8040dc <__alt_mem_onchip_mem+0xff7840dc>
  8040f8:	dac03115 	stw	r11,196(sp)
  8040fc:	003f2306 	br	803d8c <__alt_mem_onchip_mem+0xff783d8c>
  804100:	18c03fcc 	andi	r3,r3,255
  804104:	18072b1e 	bne	r3,zero,805db4 <___vfprintf_internal_r+0x21b0>
  804108:	94800414 	ori	r18,r18,16
  80410c:	9080080c 	andi	r2,r18,32
  804110:	10037b26 	beq	r2,zero,804f00 <___vfprintf_internal_r+0x12fc>
  804114:	d9402d17 	ldw	r5,180(sp)
  804118:	28800117 	ldw	r2,4(r5)
  80411c:	2cc00017 	ldw	r19,0(r5)
  804120:	29400204 	addi	r5,r5,8
  804124:	d9402d15 	stw	r5,180(sp)
  804128:	102d883a 	mov	r22,r2
  80412c:	10044b16 	blt	r2,zero,80525c <___vfprintf_internal_r+0x1658>
  804130:	d9402917 	ldw	r5,164(sp)
  804134:	df002783 	ldbu	fp,158(sp)
  804138:	2803bc16 	blt	r5,zero,80502c <___vfprintf_internal_r+0x1428>
  80413c:	00ffdfc4 	movi	r3,-129
  804140:	9d84b03a 	or	r2,r19,r22
  804144:	90e4703a 	and	r18,r18,r3
  804148:	10017726 	beq	r2,zero,804728 <___vfprintf_internal_r+0xb24>
  80414c:	b0038326 	beq	r22,zero,804f5c <___vfprintf_internal_r+0x1358>
  804150:	dc402a15 	stw	r17,168(sp)
  804154:	dc001e04 	addi	r16,sp,120
  804158:	b023883a 	mov	r17,r22
  80415c:	402d883a 	mov	r22,r8
  804160:	9809883a 	mov	r4,r19
  804164:	880b883a 	mov	r5,r17
  804168:	01800284 	movi	r6,10
  80416c:	000f883a 	mov	r7,zero
  804170:	080c4a00 	call	80c4a0 <__umoddi3>
  804174:	10800c04 	addi	r2,r2,48
  804178:	843fffc4 	addi	r16,r16,-1
  80417c:	9809883a 	mov	r4,r19
  804180:	880b883a 	mov	r5,r17
  804184:	80800005 	stb	r2,0(r16)
  804188:	01800284 	movi	r6,10
  80418c:	000f883a 	mov	r7,zero
  804190:	080bf280 	call	80bf28 <__udivdi3>
  804194:	1027883a 	mov	r19,r2
  804198:	10c4b03a 	or	r2,r2,r3
  80419c:	1823883a 	mov	r17,r3
  8041a0:	103fef1e 	bne	r2,zero,804160 <__alt_mem_onchip_mem+0xff784160>
  8041a4:	d8c02817 	ldw	r3,160(sp)
  8041a8:	dc402a17 	ldw	r17,168(sp)
  8041ac:	b011883a 	mov	r8,r22
  8041b0:	1c07c83a 	sub	r3,r3,r16
  8041b4:	d8c02e15 	stw	r3,184(sp)
  8041b8:	00005906 	br	804320 <___vfprintf_internal_r+0x71c>
  8041bc:	18c03fcc 	andi	r3,r3,255
  8041c0:	1806fa1e 	bne	r3,zero,805dac <___vfprintf_internal_r+0x21a8>
  8041c4:	9080020c 	andi	r2,r18,8
  8041c8:	10048a26 	beq	r2,zero,8053f4 <___vfprintf_internal_r+0x17f0>
  8041cc:	d8c02d17 	ldw	r3,180(sp)
  8041d0:	d9002d17 	ldw	r4,180(sp)
  8041d4:	d9402d17 	ldw	r5,180(sp)
  8041d8:	18c00017 	ldw	r3,0(r3)
  8041dc:	21000117 	ldw	r4,4(r4)
  8041e0:	29400204 	addi	r5,r5,8
  8041e4:	d8c03615 	stw	r3,216(sp)
  8041e8:	d9003815 	stw	r4,224(sp)
  8041ec:	d9402d15 	stw	r5,180(sp)
  8041f0:	d9003617 	ldw	r4,216(sp)
  8041f4:	d9403817 	ldw	r5,224(sp)
  8041f8:	da003d15 	stw	r8,244(sp)
  8041fc:	04000044 	movi	r16,1
  804200:	080a2dc0 	call	80a2dc <__fpclassifyd>
  804204:	da003d17 	ldw	r8,244(sp)
  804208:	14041f1e 	bne	r2,r16,805288 <___vfprintf_internal_r+0x1684>
  80420c:	d9003617 	ldw	r4,216(sp)
  804210:	d9403817 	ldw	r5,224(sp)
  804214:	000d883a 	mov	r6,zero
  804218:	000f883a 	mov	r7,zero
  80421c:	080d3e80 	call	80d3e8 <__ledf2>
  804220:	da003d17 	ldw	r8,244(sp)
  804224:	1005be16 	blt	r2,zero,805920 <___vfprintf_internal_r+0x1d1c>
  804228:	df002783 	ldbu	fp,158(sp)
  80422c:	008011c4 	movi	r2,71
  804230:	1445330e 	bge	r2,r17,805700 <___vfprintf_internal_r+0x1afc>
  804234:	04002074 	movhi	r16,129
  804238:	840ae904 	addi	r16,r16,11172
  80423c:	00c000c4 	movi	r3,3
  804240:	00bfdfc4 	movi	r2,-129
  804244:	d8c02a15 	stw	r3,168(sp)
  804248:	90a4703a 	and	r18,r18,r2
  80424c:	d8c02e15 	stw	r3,184(sp)
  804250:	d8002915 	stw	zero,164(sp)
  804254:	d8003215 	stw	zero,200(sp)
  804258:	00003706 	br	804338 <___vfprintf_internal_r+0x734>
  80425c:	94800214 	ori	r18,r18,8
  804260:	ac400007 	ldb	r17,0(r21)
  804264:	003ec806 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  804268:	18c03fcc 	andi	r3,r3,255
  80426c:	1806db1e 	bne	r3,zero,805ddc <___vfprintf_internal_r+0x21d8>
  804270:	94800414 	ori	r18,r18,16
  804274:	9080080c 	andi	r2,r18,32
  804278:	1002d826 	beq	r2,zero,804ddc <___vfprintf_internal_r+0x11d8>
  80427c:	d9402d17 	ldw	r5,180(sp)
  804280:	d8c02917 	ldw	r3,164(sp)
  804284:	d8002785 	stb	zero,158(sp)
  804288:	28800204 	addi	r2,r5,8
  80428c:	2cc00017 	ldw	r19,0(r5)
  804290:	2d800117 	ldw	r22,4(r5)
  804294:	18048f16 	blt	r3,zero,8054d4 <___vfprintf_internal_r+0x18d0>
  804298:	013fdfc4 	movi	r4,-129
  80429c:	9d86b03a 	or	r3,r19,r22
  8042a0:	d8802d15 	stw	r2,180(sp)
  8042a4:	9124703a 	and	r18,r18,r4
  8042a8:	1802d91e 	bne	r3,zero,804e10 <___vfprintf_internal_r+0x120c>
  8042ac:	d8c02917 	ldw	r3,164(sp)
  8042b0:	0039883a 	mov	fp,zero
  8042b4:	1805c326 	beq	r3,zero,8059c4 <___vfprintf_internal_r+0x1dc0>
  8042b8:	0027883a 	mov	r19,zero
  8042bc:	002d883a 	mov	r22,zero
  8042c0:	dc001e04 	addi	r16,sp,120
  8042c4:	9806d0fa 	srli	r3,r19,3
  8042c8:	b008977a 	slli	r4,r22,29
  8042cc:	b02cd0fa 	srli	r22,r22,3
  8042d0:	9cc001cc 	andi	r19,r19,7
  8042d4:	98800c04 	addi	r2,r19,48
  8042d8:	843fffc4 	addi	r16,r16,-1
  8042dc:	20e6b03a 	or	r19,r4,r3
  8042e0:	80800005 	stb	r2,0(r16)
  8042e4:	9d86b03a 	or	r3,r19,r22
  8042e8:	183ff61e 	bne	r3,zero,8042c4 <__alt_mem_onchip_mem+0xff7842c4>
  8042ec:	90c0004c 	andi	r3,r18,1
  8042f0:	18013b26 	beq	r3,zero,8047e0 <___vfprintf_internal_r+0xbdc>
  8042f4:	10803fcc 	andi	r2,r2,255
  8042f8:	1080201c 	xori	r2,r2,128
  8042fc:	10bfe004 	addi	r2,r2,-128
  804300:	00c00c04 	movi	r3,48
  804304:	10c13626 	beq	r2,r3,8047e0 <___vfprintf_internal_r+0xbdc>
  804308:	80ffffc5 	stb	r3,-1(r16)
  80430c:	d8c02817 	ldw	r3,160(sp)
  804310:	80bfffc4 	addi	r2,r16,-1
  804314:	1021883a 	mov	r16,r2
  804318:	1887c83a 	sub	r3,r3,r2
  80431c:	d8c02e15 	stw	r3,184(sp)
  804320:	d8802e17 	ldw	r2,184(sp)
  804324:	d9002917 	ldw	r4,164(sp)
  804328:	1100010e 	bge	r2,r4,804330 <___vfprintf_internal_r+0x72c>
  80432c:	2005883a 	mov	r2,r4
  804330:	d8802a15 	stw	r2,168(sp)
  804334:	d8003215 	stw	zero,200(sp)
  804338:	e7003fcc 	andi	fp,fp,255
  80433c:	e700201c 	xori	fp,fp,128
  804340:	e73fe004 	addi	fp,fp,-128
  804344:	e0000326 	beq	fp,zero,804354 <___vfprintf_internal_r+0x750>
  804348:	d8c02a17 	ldw	r3,168(sp)
  80434c:	18c00044 	addi	r3,r3,1
  804350:	d8c02a15 	stw	r3,168(sp)
  804354:	90c0008c 	andi	r3,r18,2
  804358:	d8c02b15 	stw	r3,172(sp)
  80435c:	18000326 	beq	r3,zero,80436c <___vfprintf_internal_r+0x768>
  804360:	d8c02a17 	ldw	r3,168(sp)
  804364:	18c00084 	addi	r3,r3,2
  804368:	d8c02a15 	stw	r3,168(sp)
  80436c:	90c0210c 	andi	r3,r18,132
  804370:	d8c03015 	stw	r3,192(sp)
  804374:	1801a31e 	bne	r3,zero,804a04 <___vfprintf_internal_r+0xe00>
  804378:	d9003117 	ldw	r4,196(sp)
  80437c:	d8c02a17 	ldw	r3,168(sp)
  804380:	20e7c83a 	sub	r19,r4,r3
  804384:	04c19f0e 	bge	zero,r19,804a04 <___vfprintf_internal_r+0xe00>
  804388:	02400404 	movi	r9,16
  80438c:	d8c02017 	ldw	r3,128(sp)
  804390:	d8801f17 	ldw	r2,124(sp)
  804394:	4cc50d0e 	bge	r9,r19,8057cc <___vfprintf_internal_r+0x1bc8>
  804398:	01402074 	movhi	r5,129
  80439c:	294afc84 	addi	r5,r5,11250
  8043a0:	dc403b15 	stw	r17,236(sp)
  8043a4:	d9403515 	stw	r5,212(sp)
  8043a8:	9823883a 	mov	r17,r19
  8043ac:	482d883a 	mov	r22,r9
  8043b0:	9027883a 	mov	r19,r18
  8043b4:	070001c4 	movi	fp,7
  8043b8:	8025883a 	mov	r18,r16
  8043bc:	dc002c17 	ldw	r16,176(sp)
  8043c0:	00000306 	br	8043d0 <___vfprintf_internal_r+0x7cc>
  8043c4:	8c7ffc04 	addi	r17,r17,-16
  8043c8:	42000204 	addi	r8,r8,8
  8043cc:	b440130e 	bge	r22,r17,80441c <___vfprintf_internal_r+0x818>
  8043d0:	01002074 	movhi	r4,129
  8043d4:	18c00404 	addi	r3,r3,16
  8043d8:	10800044 	addi	r2,r2,1
  8043dc:	210afc84 	addi	r4,r4,11250
  8043e0:	41000015 	stw	r4,0(r8)
  8043e4:	45800115 	stw	r22,4(r8)
  8043e8:	d8c02015 	stw	r3,128(sp)
  8043ec:	d8801f15 	stw	r2,124(sp)
  8043f0:	e0bff40e 	bge	fp,r2,8043c4 <__alt_mem_onchip_mem+0xff7843c4>
  8043f4:	d9801e04 	addi	r6,sp,120
  8043f8:	b80b883a 	mov	r5,r23
  8043fc:	8009883a 	mov	r4,r16
  804400:	080a5280 	call	80a528 <__sprint_r>
  804404:	103f011e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804408:	8c7ffc04 	addi	r17,r17,-16
  80440c:	d8c02017 	ldw	r3,128(sp)
  804410:	d8801f17 	ldw	r2,124(sp)
  804414:	da000404 	addi	r8,sp,16
  804418:	b47fed16 	blt	r22,r17,8043d0 <__alt_mem_onchip_mem+0xff7843d0>
  80441c:	9021883a 	mov	r16,r18
  804420:	9825883a 	mov	r18,r19
  804424:	8827883a 	mov	r19,r17
  804428:	dc403b17 	ldw	r17,236(sp)
  80442c:	d9403517 	ldw	r5,212(sp)
  804430:	98c7883a 	add	r3,r19,r3
  804434:	10800044 	addi	r2,r2,1
  804438:	41400015 	stw	r5,0(r8)
  80443c:	44c00115 	stw	r19,4(r8)
  804440:	d8c02015 	stw	r3,128(sp)
  804444:	d8801f15 	stw	r2,124(sp)
  804448:	010001c4 	movi	r4,7
  80444c:	2082a316 	blt	r4,r2,804edc <___vfprintf_internal_r+0x12d8>
  804450:	df002787 	ldb	fp,158(sp)
  804454:	42000204 	addi	r8,r8,8
  804458:	e0000c26 	beq	fp,zero,80448c <___vfprintf_internal_r+0x888>
  80445c:	d8801f17 	ldw	r2,124(sp)
  804460:	d9002784 	addi	r4,sp,158
  804464:	18c00044 	addi	r3,r3,1
  804468:	10800044 	addi	r2,r2,1
  80446c:	41000015 	stw	r4,0(r8)
  804470:	01000044 	movi	r4,1
  804474:	41000115 	stw	r4,4(r8)
  804478:	d8c02015 	stw	r3,128(sp)
  80447c:	d8801f15 	stw	r2,124(sp)
  804480:	010001c4 	movi	r4,7
  804484:	20823c16 	blt	r4,r2,804d78 <___vfprintf_internal_r+0x1174>
  804488:	42000204 	addi	r8,r8,8
  80448c:	d8802b17 	ldw	r2,172(sp)
  804490:	10000c26 	beq	r2,zero,8044c4 <___vfprintf_internal_r+0x8c0>
  804494:	d8801f17 	ldw	r2,124(sp)
  804498:	d9002704 	addi	r4,sp,156
  80449c:	18c00084 	addi	r3,r3,2
  8044a0:	10800044 	addi	r2,r2,1
  8044a4:	41000015 	stw	r4,0(r8)
  8044a8:	01000084 	movi	r4,2
  8044ac:	41000115 	stw	r4,4(r8)
  8044b0:	d8c02015 	stw	r3,128(sp)
  8044b4:	d8801f15 	stw	r2,124(sp)
  8044b8:	010001c4 	movi	r4,7
  8044bc:	20823616 	blt	r4,r2,804d98 <___vfprintf_internal_r+0x1194>
  8044c0:	42000204 	addi	r8,r8,8
  8044c4:	d9003017 	ldw	r4,192(sp)
  8044c8:	00802004 	movi	r2,128
  8044cc:	20819926 	beq	r4,r2,804b34 <___vfprintf_internal_r+0xf30>
  8044d0:	d9402917 	ldw	r5,164(sp)
  8044d4:	d8802e17 	ldw	r2,184(sp)
  8044d8:	28adc83a 	sub	r22,r5,r2
  8044dc:	0580310e 	bge	zero,r22,8045a4 <___vfprintf_internal_r+0x9a0>
  8044e0:	07000404 	movi	fp,16
  8044e4:	d8801f17 	ldw	r2,124(sp)
  8044e8:	e584140e 	bge	fp,r22,80553c <___vfprintf_internal_r+0x1938>
  8044ec:	01402074 	movhi	r5,129
  8044f0:	294af884 	addi	r5,r5,11234
  8044f4:	dc402915 	stw	r17,164(sp)
  8044f8:	d9402b15 	stw	r5,172(sp)
  8044fc:	b023883a 	mov	r17,r22
  804500:	04c001c4 	movi	r19,7
  804504:	a82d883a 	mov	r22,r21
  804508:	902b883a 	mov	r21,r18
  80450c:	8025883a 	mov	r18,r16
  804510:	dc002c17 	ldw	r16,176(sp)
  804514:	00000306 	br	804524 <___vfprintf_internal_r+0x920>
  804518:	8c7ffc04 	addi	r17,r17,-16
  80451c:	42000204 	addi	r8,r8,8
  804520:	e440110e 	bge	fp,r17,804568 <___vfprintf_internal_r+0x964>
  804524:	18c00404 	addi	r3,r3,16
  804528:	10800044 	addi	r2,r2,1
  80452c:	45000015 	stw	r20,0(r8)
  804530:	47000115 	stw	fp,4(r8)
  804534:	d8c02015 	stw	r3,128(sp)
  804538:	d8801f15 	stw	r2,124(sp)
  80453c:	98bff60e 	bge	r19,r2,804518 <__alt_mem_onchip_mem+0xff784518>
  804540:	d9801e04 	addi	r6,sp,120
  804544:	b80b883a 	mov	r5,r23
  804548:	8009883a 	mov	r4,r16
  80454c:	080a5280 	call	80a528 <__sprint_r>
  804550:	103eae1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804554:	8c7ffc04 	addi	r17,r17,-16
  804558:	d8c02017 	ldw	r3,128(sp)
  80455c:	d8801f17 	ldw	r2,124(sp)
  804560:	da000404 	addi	r8,sp,16
  804564:	e47fef16 	blt	fp,r17,804524 <__alt_mem_onchip_mem+0xff784524>
  804568:	9021883a 	mov	r16,r18
  80456c:	a825883a 	mov	r18,r21
  804570:	b02b883a 	mov	r21,r22
  804574:	882d883a 	mov	r22,r17
  804578:	dc402917 	ldw	r17,164(sp)
  80457c:	d9002b17 	ldw	r4,172(sp)
  804580:	1d87883a 	add	r3,r3,r22
  804584:	10800044 	addi	r2,r2,1
  804588:	41000015 	stw	r4,0(r8)
  80458c:	45800115 	stw	r22,4(r8)
  804590:	d8c02015 	stw	r3,128(sp)
  804594:	d8801f15 	stw	r2,124(sp)
  804598:	010001c4 	movi	r4,7
  80459c:	2081ee16 	blt	r4,r2,804d58 <___vfprintf_internal_r+0x1154>
  8045a0:	42000204 	addi	r8,r8,8
  8045a4:	9080400c 	andi	r2,r18,256
  8045a8:	1001181e 	bne	r2,zero,804a0c <___vfprintf_internal_r+0xe08>
  8045ac:	d9402e17 	ldw	r5,184(sp)
  8045b0:	d8801f17 	ldw	r2,124(sp)
  8045b4:	44000015 	stw	r16,0(r8)
  8045b8:	1947883a 	add	r3,r3,r5
  8045bc:	10800044 	addi	r2,r2,1
  8045c0:	41400115 	stw	r5,4(r8)
  8045c4:	d8c02015 	stw	r3,128(sp)
  8045c8:	d8801f15 	stw	r2,124(sp)
  8045cc:	010001c4 	movi	r4,7
  8045d0:	2081d316 	blt	r4,r2,804d20 <___vfprintf_internal_r+0x111c>
  8045d4:	42000204 	addi	r8,r8,8
  8045d8:	9480010c 	andi	r18,r18,4
  8045dc:	90003226 	beq	r18,zero,8046a8 <___vfprintf_internal_r+0xaa4>
  8045e0:	d9403117 	ldw	r5,196(sp)
  8045e4:	d8802a17 	ldw	r2,168(sp)
  8045e8:	28a1c83a 	sub	r16,r5,r2
  8045ec:	04002e0e 	bge	zero,r16,8046a8 <___vfprintf_internal_r+0xaa4>
  8045f0:	04400404 	movi	r17,16
  8045f4:	d8801f17 	ldw	r2,124(sp)
  8045f8:	8c04a20e 	bge	r17,r16,805884 <___vfprintf_internal_r+0x1c80>
  8045fc:	01402074 	movhi	r5,129
  804600:	294afc84 	addi	r5,r5,11250
  804604:	d9403515 	stw	r5,212(sp)
  804608:	048001c4 	movi	r18,7
  80460c:	dcc02c17 	ldw	r19,176(sp)
  804610:	00000306 	br	804620 <___vfprintf_internal_r+0xa1c>
  804614:	843ffc04 	addi	r16,r16,-16
  804618:	42000204 	addi	r8,r8,8
  80461c:	8c00130e 	bge	r17,r16,80466c <___vfprintf_internal_r+0xa68>
  804620:	01002074 	movhi	r4,129
  804624:	18c00404 	addi	r3,r3,16
  804628:	10800044 	addi	r2,r2,1
  80462c:	210afc84 	addi	r4,r4,11250
  804630:	41000015 	stw	r4,0(r8)
  804634:	44400115 	stw	r17,4(r8)
  804638:	d8c02015 	stw	r3,128(sp)
  80463c:	d8801f15 	stw	r2,124(sp)
  804640:	90bff40e 	bge	r18,r2,804614 <__alt_mem_onchip_mem+0xff784614>
  804644:	d9801e04 	addi	r6,sp,120
  804648:	b80b883a 	mov	r5,r23
  80464c:	9809883a 	mov	r4,r19
  804650:	080a5280 	call	80a528 <__sprint_r>
  804654:	103e6d1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804658:	843ffc04 	addi	r16,r16,-16
  80465c:	d8c02017 	ldw	r3,128(sp)
  804660:	d8801f17 	ldw	r2,124(sp)
  804664:	da000404 	addi	r8,sp,16
  804668:	8c3fed16 	blt	r17,r16,804620 <__alt_mem_onchip_mem+0xff784620>
  80466c:	d9403517 	ldw	r5,212(sp)
  804670:	1c07883a 	add	r3,r3,r16
  804674:	10800044 	addi	r2,r2,1
  804678:	41400015 	stw	r5,0(r8)
  80467c:	44000115 	stw	r16,4(r8)
  804680:	d8c02015 	stw	r3,128(sp)
  804684:	d8801f15 	stw	r2,124(sp)
  804688:	010001c4 	movi	r4,7
  80468c:	2080060e 	bge	r4,r2,8046a8 <___vfprintf_internal_r+0xaa4>
  804690:	d9002c17 	ldw	r4,176(sp)
  804694:	d9801e04 	addi	r6,sp,120
  804698:	b80b883a 	mov	r5,r23
  80469c:	080a5280 	call	80a528 <__sprint_r>
  8046a0:	103e5a1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  8046a4:	d8c02017 	ldw	r3,128(sp)
  8046a8:	d8803117 	ldw	r2,196(sp)
  8046ac:	d9002a17 	ldw	r4,168(sp)
  8046b0:	1100010e 	bge	r2,r4,8046b8 <___vfprintf_internal_r+0xab4>
  8046b4:	2005883a 	mov	r2,r4
  8046b8:	d9402f17 	ldw	r5,188(sp)
  8046bc:	288b883a 	add	r5,r5,r2
  8046c0:	d9402f15 	stw	r5,188(sp)
  8046c4:	18019e1e 	bne	r3,zero,804d40 <___vfprintf_internal_r+0x113c>
  8046c8:	a8800007 	ldb	r2,0(r21)
  8046cc:	d8001f15 	stw	zero,124(sp)
  8046d0:	da000404 	addi	r8,sp,16
  8046d4:	103d851e 	bne	r2,zero,803cec <__alt_mem_onchip_mem+0xff783cec>
  8046d8:	a821883a 	mov	r16,r21
  8046dc:	003d9b06 	br	803d4c <__alt_mem_onchip_mem+0xff783d4c>
  8046e0:	18c03fcc 	andi	r3,r3,255
  8046e4:	1805c11e 	bne	r3,zero,805dec <___vfprintf_internal_r+0x21e8>
  8046e8:	94800414 	ori	r18,r18,16
  8046ec:	9080080c 	andi	r2,r18,32
  8046f0:	10020c26 	beq	r2,zero,804f24 <___vfprintf_internal_r+0x1320>
  8046f4:	d8802d17 	ldw	r2,180(sp)
  8046f8:	d9002917 	ldw	r4,164(sp)
  8046fc:	d8002785 	stb	zero,158(sp)
  804700:	10c00204 	addi	r3,r2,8
  804704:	14c00017 	ldw	r19,0(r2)
  804708:	15800117 	ldw	r22,4(r2)
  80470c:	20040f16 	blt	r4,zero,80574c <___vfprintf_internal_r+0x1b48>
  804710:	013fdfc4 	movi	r4,-129
  804714:	9d84b03a 	or	r2,r19,r22
  804718:	d8c02d15 	stw	r3,180(sp)
  80471c:	9124703a 	and	r18,r18,r4
  804720:	0039883a 	mov	fp,zero
  804724:	103e891e 	bne	r2,zero,80414c <__alt_mem_onchip_mem+0xff78414c>
  804728:	d9002917 	ldw	r4,164(sp)
  80472c:	2002c11e 	bne	r4,zero,805234 <___vfprintf_internal_r+0x1630>
  804730:	d8002915 	stw	zero,164(sp)
  804734:	d8002e15 	stw	zero,184(sp)
  804738:	dc001e04 	addi	r16,sp,120
  80473c:	003ef806 	br	804320 <__alt_mem_onchip_mem+0xff784320>
  804740:	18c03fcc 	andi	r3,r3,255
  804744:	18059d1e 	bne	r3,zero,805dbc <___vfprintf_internal_r+0x21b8>
  804748:	01402074 	movhi	r5,129
  80474c:	294aec04 	addi	r5,r5,11184
  804750:	d9403915 	stw	r5,228(sp)
  804754:	9080080c 	andi	r2,r18,32
  804758:	10005226 	beq	r2,zero,8048a4 <___vfprintf_internal_r+0xca0>
  80475c:	d8802d17 	ldw	r2,180(sp)
  804760:	14c00017 	ldw	r19,0(r2)
  804764:	15800117 	ldw	r22,4(r2)
  804768:	10800204 	addi	r2,r2,8
  80476c:	d8802d15 	stw	r2,180(sp)
  804770:	9080004c 	andi	r2,r18,1
  804774:	10019026 	beq	r2,zero,804db8 <___vfprintf_internal_r+0x11b4>
  804778:	9d84b03a 	or	r2,r19,r22
  80477c:	10036926 	beq	r2,zero,805524 <___vfprintf_internal_r+0x1920>
  804780:	d8c02917 	ldw	r3,164(sp)
  804784:	00800c04 	movi	r2,48
  804788:	d8802705 	stb	r2,156(sp)
  80478c:	dc402745 	stb	r17,157(sp)
  804790:	d8002785 	stb	zero,158(sp)
  804794:	90800094 	ori	r2,r18,2
  804798:	18045d16 	blt	r3,zero,805910 <___vfprintf_internal_r+0x1d0c>
  80479c:	00bfdfc4 	movi	r2,-129
  8047a0:	90a4703a 	and	r18,r18,r2
  8047a4:	94800094 	ori	r18,r18,2
  8047a8:	0039883a 	mov	fp,zero
  8047ac:	d9003917 	ldw	r4,228(sp)
  8047b0:	dc001e04 	addi	r16,sp,120
  8047b4:	988003cc 	andi	r2,r19,15
  8047b8:	b006973a 	slli	r3,r22,28
  8047bc:	2085883a 	add	r2,r4,r2
  8047c0:	9826d13a 	srli	r19,r19,4
  8047c4:	10800003 	ldbu	r2,0(r2)
  8047c8:	b02cd13a 	srli	r22,r22,4
  8047cc:	843fffc4 	addi	r16,r16,-1
  8047d0:	1ce6b03a 	or	r19,r3,r19
  8047d4:	80800005 	stb	r2,0(r16)
  8047d8:	9d84b03a 	or	r2,r19,r22
  8047dc:	103ff51e 	bne	r2,zero,8047b4 <__alt_mem_onchip_mem+0xff7847b4>
  8047e0:	d8c02817 	ldw	r3,160(sp)
  8047e4:	1c07c83a 	sub	r3,r3,r16
  8047e8:	d8c02e15 	stw	r3,184(sp)
  8047ec:	003ecc06 	br	804320 <__alt_mem_onchip_mem+0xff784320>
  8047f0:	18c03fcc 	andi	r3,r3,255
  8047f4:	183e9f26 	beq	r3,zero,804274 <__alt_mem_onchip_mem+0xff784274>
  8047f8:	d9c02785 	stb	r7,158(sp)
  8047fc:	003e9d06 	br	804274 <__alt_mem_onchip_mem+0xff784274>
  804800:	00c00044 	movi	r3,1
  804804:	01c00ac4 	movi	r7,43
  804808:	ac400007 	ldb	r17,0(r21)
  80480c:	003d5e06 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  804810:	94800814 	ori	r18,r18,32
  804814:	ac400007 	ldb	r17,0(r21)
  804818:	003d5b06 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  80481c:	d8c02d17 	ldw	r3,180(sp)
  804820:	d8002785 	stb	zero,158(sp)
  804824:	1c000017 	ldw	r16,0(r3)
  804828:	1cc00104 	addi	r19,r3,4
  80482c:	80041926 	beq	r16,zero,805894 <___vfprintf_internal_r+0x1c90>
  804830:	d9002917 	ldw	r4,164(sp)
  804834:	2003d016 	blt	r4,zero,805778 <___vfprintf_internal_r+0x1b74>
  804838:	200d883a 	mov	r6,r4
  80483c:	000b883a 	mov	r5,zero
  804840:	8009883a 	mov	r4,r16
  804844:	da003d15 	stw	r8,244(sp)
  804848:	08089940 	call	808994 <memchr>
  80484c:	da003d17 	ldw	r8,244(sp)
  804850:	10045426 	beq	r2,zero,8059a4 <___vfprintf_internal_r+0x1da0>
  804854:	1405c83a 	sub	r2,r2,r16
  804858:	d8802e15 	stw	r2,184(sp)
  80485c:	1003cc16 	blt	r2,zero,805790 <___vfprintf_internal_r+0x1b8c>
  804860:	df002783 	ldbu	fp,158(sp)
  804864:	d8802a15 	stw	r2,168(sp)
  804868:	dcc02d15 	stw	r19,180(sp)
  80486c:	d8002915 	stw	zero,164(sp)
  804870:	d8003215 	stw	zero,200(sp)
  804874:	003eb006 	br	804338 <__alt_mem_onchip_mem+0xff784338>
  804878:	18c03fcc 	andi	r3,r3,255
  80487c:	183f9b26 	beq	r3,zero,8046ec <__alt_mem_onchip_mem+0xff7846ec>
  804880:	d9c02785 	stb	r7,158(sp)
  804884:	003f9906 	br	8046ec <__alt_mem_onchip_mem+0xff7846ec>
  804888:	18c03fcc 	andi	r3,r3,255
  80488c:	1805551e 	bne	r3,zero,805de4 <___vfprintf_internal_r+0x21e0>
  804890:	01402074 	movhi	r5,129
  804894:	294af104 	addi	r5,r5,11204
  804898:	d9403915 	stw	r5,228(sp)
  80489c:	9080080c 	andi	r2,r18,32
  8048a0:	103fae1e 	bne	r2,zero,80475c <__alt_mem_onchip_mem+0xff78475c>
  8048a4:	9080040c 	andi	r2,r18,16
  8048a8:	1002de26 	beq	r2,zero,805424 <___vfprintf_internal_r+0x1820>
  8048ac:	d8c02d17 	ldw	r3,180(sp)
  8048b0:	002d883a 	mov	r22,zero
  8048b4:	1cc00017 	ldw	r19,0(r3)
  8048b8:	18c00104 	addi	r3,r3,4
  8048bc:	d8c02d15 	stw	r3,180(sp)
  8048c0:	003fab06 	br	804770 <__alt_mem_onchip_mem+0xff784770>
  8048c4:	38803fcc 	andi	r2,r7,255
  8048c8:	1080201c 	xori	r2,r2,128
  8048cc:	10bfe004 	addi	r2,r2,-128
  8048d0:	1002d21e 	bne	r2,zero,80541c <___vfprintf_internal_r+0x1818>
  8048d4:	00c00044 	movi	r3,1
  8048d8:	01c00804 	movi	r7,32
  8048dc:	ac400007 	ldb	r17,0(r21)
  8048e0:	003d2906 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  8048e4:	94800054 	ori	r18,r18,1
  8048e8:	ac400007 	ldb	r17,0(r21)
  8048ec:	003d2606 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  8048f0:	18c03fcc 	andi	r3,r3,255
  8048f4:	183e0526 	beq	r3,zero,80410c <__alt_mem_onchip_mem+0xff78410c>
  8048f8:	d9c02785 	stb	r7,158(sp)
  8048fc:	003e0306 	br	80410c <__alt_mem_onchip_mem+0xff78410c>
  804900:	94801014 	ori	r18,r18,64
  804904:	ac400007 	ldb	r17,0(r21)
  804908:	003d1f06 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  80490c:	ac400007 	ldb	r17,0(r21)
  804910:	8a438726 	beq	r17,r9,805730 <___vfprintf_internal_r+0x1b2c>
  804914:	94800414 	ori	r18,r18,16
  804918:	003d1b06 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  80491c:	18c03fcc 	andi	r3,r3,255
  804920:	1805341e 	bne	r3,zero,805df4 <___vfprintf_internal_r+0x21f0>
  804924:	9080080c 	andi	r2,r18,32
  804928:	1002cd26 	beq	r2,zero,805460 <___vfprintf_internal_r+0x185c>
  80492c:	d9402d17 	ldw	r5,180(sp)
  804930:	d9002f17 	ldw	r4,188(sp)
  804934:	28800017 	ldw	r2,0(r5)
  804938:	2007d7fa 	srai	r3,r4,31
  80493c:	29400104 	addi	r5,r5,4
  804940:	d9402d15 	stw	r5,180(sp)
  804944:	11000015 	stw	r4,0(r2)
  804948:	10c00115 	stw	r3,4(r2)
  80494c:	003ce506 	br	803ce4 <__alt_mem_onchip_mem+0xff783ce4>
  804950:	d8c02d17 	ldw	r3,180(sp)
  804954:	d9002d17 	ldw	r4,180(sp)
  804958:	d8002785 	stb	zero,158(sp)
  80495c:	18800017 	ldw	r2,0(r3)
  804960:	21000104 	addi	r4,r4,4
  804964:	00c00044 	movi	r3,1
  804968:	d8c02a15 	stw	r3,168(sp)
  80496c:	d8801405 	stb	r2,80(sp)
  804970:	d9002d15 	stw	r4,180(sp)
  804974:	d8c02e15 	stw	r3,184(sp)
  804978:	d8002915 	stw	zero,164(sp)
  80497c:	d8003215 	stw	zero,200(sp)
  804980:	dc001404 	addi	r16,sp,80
  804984:	0039883a 	mov	fp,zero
  804988:	003e7206 	br	804354 <__alt_mem_onchip_mem+0xff784354>
  80498c:	01002074 	movhi	r4,129
  804990:	210af104 	addi	r4,r4,11204
  804994:	0039883a 	mov	fp,zero
  804998:	d9003915 	stw	r4,228(sp)
  80499c:	04401e04 	movi	r17,120
  8049a0:	003f8206 	br	8047ac <__alt_mem_onchip_mem+0xff7847ac>
  8049a4:	18c03fcc 	andi	r3,r3,255
  8049a8:	1805061e 	bne	r3,zero,805dc4 <___vfprintf_internal_r+0x21c0>
  8049ac:	883d9126 	beq	r17,zero,803ff4 <__alt_mem_onchip_mem+0xff783ff4>
  8049b0:	00c00044 	movi	r3,1
  8049b4:	d8c02a15 	stw	r3,168(sp)
  8049b8:	dc401405 	stb	r17,80(sp)
  8049bc:	d8002785 	stb	zero,158(sp)
  8049c0:	003fec06 	br	804974 <__alt_mem_onchip_mem+0xff784974>
  8049c4:	01402074 	movhi	r5,129
  8049c8:	294af104 	addi	r5,r5,11204
  8049cc:	d9403915 	stw	r5,228(sp)
  8049d0:	d8c02d15 	stw	r3,180(sp)
  8049d4:	1025883a 	mov	r18,r2
  8049d8:	04401e04 	movi	r17,120
  8049dc:	9d84b03a 	or	r2,r19,r22
  8049e0:	1000fc1e 	bne	r2,zero,804dd4 <___vfprintf_internal_r+0x11d0>
  8049e4:	0039883a 	mov	fp,zero
  8049e8:	00800084 	movi	r2,2
  8049ec:	10803fcc 	andi	r2,r2,255
  8049f0:	00c00044 	movi	r3,1
  8049f4:	10c20f26 	beq	r2,r3,805234 <___vfprintf_internal_r+0x1630>
  8049f8:	00c00084 	movi	r3,2
  8049fc:	10fd6326 	beq	r2,r3,803f8c <__alt_mem_onchip_mem+0xff783f8c>
  804a00:	003e2d06 	br	8042b8 <__alt_mem_onchip_mem+0xff7842b8>
  804a04:	d8c02017 	ldw	r3,128(sp)
  804a08:	003e9306 	br	804458 <__alt_mem_onchip_mem+0xff784458>
  804a0c:	00801944 	movi	r2,101
  804a10:	14407e0e 	bge	r2,r17,804c0c <___vfprintf_internal_r+0x1008>
  804a14:	d9003617 	ldw	r4,216(sp)
  804a18:	d9403817 	ldw	r5,224(sp)
  804a1c:	000d883a 	mov	r6,zero
  804a20:	000f883a 	mov	r7,zero
  804a24:	d8c03c15 	stw	r3,240(sp)
  804a28:	da003d15 	stw	r8,244(sp)
  804a2c:	080d2840 	call	80d284 <__eqdf2>
  804a30:	d8c03c17 	ldw	r3,240(sp)
  804a34:	da003d17 	ldw	r8,244(sp)
  804a38:	1000f71e 	bne	r2,zero,804e18 <___vfprintf_internal_r+0x1214>
  804a3c:	d8801f17 	ldw	r2,124(sp)
  804a40:	01002074 	movhi	r4,129
  804a44:	210af804 	addi	r4,r4,11232
  804a48:	18c00044 	addi	r3,r3,1
  804a4c:	10800044 	addi	r2,r2,1
  804a50:	41000015 	stw	r4,0(r8)
  804a54:	01000044 	movi	r4,1
  804a58:	41000115 	stw	r4,4(r8)
  804a5c:	d8c02015 	stw	r3,128(sp)
  804a60:	d8801f15 	stw	r2,124(sp)
  804a64:	010001c4 	movi	r4,7
  804a68:	2082b816 	blt	r4,r2,80554c <___vfprintf_internal_r+0x1948>
  804a6c:	42000204 	addi	r8,r8,8
  804a70:	d8802617 	ldw	r2,152(sp)
  804a74:	d9403317 	ldw	r5,204(sp)
  804a78:	11400216 	blt	r2,r5,804a84 <___vfprintf_internal_r+0xe80>
  804a7c:	9080004c 	andi	r2,r18,1
  804a80:	103ed526 	beq	r2,zero,8045d8 <__alt_mem_onchip_mem+0xff7845d8>
  804a84:	d8803717 	ldw	r2,220(sp)
  804a88:	d9003417 	ldw	r4,208(sp)
  804a8c:	d9403717 	ldw	r5,220(sp)
  804a90:	1887883a 	add	r3,r3,r2
  804a94:	d8801f17 	ldw	r2,124(sp)
  804a98:	41000015 	stw	r4,0(r8)
  804a9c:	41400115 	stw	r5,4(r8)
  804aa0:	10800044 	addi	r2,r2,1
  804aa4:	d8c02015 	stw	r3,128(sp)
  804aa8:	d8801f15 	stw	r2,124(sp)
  804aac:	010001c4 	movi	r4,7
  804ab0:	20832916 	blt	r4,r2,805758 <___vfprintf_internal_r+0x1b54>
  804ab4:	42000204 	addi	r8,r8,8
  804ab8:	d8803317 	ldw	r2,204(sp)
  804abc:	143fffc4 	addi	r16,r2,-1
  804ac0:	043ec50e 	bge	zero,r16,8045d8 <__alt_mem_onchip_mem+0xff7845d8>
  804ac4:	04400404 	movi	r17,16
  804ac8:	d8801f17 	ldw	r2,124(sp)
  804acc:	8c00880e 	bge	r17,r16,804cf0 <___vfprintf_internal_r+0x10ec>
  804ad0:	01402074 	movhi	r5,129
  804ad4:	294af884 	addi	r5,r5,11234
  804ad8:	d9402b15 	stw	r5,172(sp)
  804adc:	058001c4 	movi	r22,7
  804ae0:	dcc02c17 	ldw	r19,176(sp)
  804ae4:	00000306 	br	804af4 <___vfprintf_internal_r+0xef0>
  804ae8:	42000204 	addi	r8,r8,8
  804aec:	843ffc04 	addi	r16,r16,-16
  804af0:	8c00820e 	bge	r17,r16,804cfc <___vfprintf_internal_r+0x10f8>
  804af4:	18c00404 	addi	r3,r3,16
  804af8:	10800044 	addi	r2,r2,1
  804afc:	45000015 	stw	r20,0(r8)
  804b00:	44400115 	stw	r17,4(r8)
  804b04:	d8c02015 	stw	r3,128(sp)
  804b08:	d8801f15 	stw	r2,124(sp)
  804b0c:	b0bff60e 	bge	r22,r2,804ae8 <__alt_mem_onchip_mem+0xff784ae8>
  804b10:	d9801e04 	addi	r6,sp,120
  804b14:	b80b883a 	mov	r5,r23
  804b18:	9809883a 	mov	r4,r19
  804b1c:	080a5280 	call	80a528 <__sprint_r>
  804b20:	103d3a1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804b24:	d8c02017 	ldw	r3,128(sp)
  804b28:	d8801f17 	ldw	r2,124(sp)
  804b2c:	da000404 	addi	r8,sp,16
  804b30:	003fee06 	br	804aec <__alt_mem_onchip_mem+0xff784aec>
  804b34:	d9403117 	ldw	r5,196(sp)
  804b38:	d8802a17 	ldw	r2,168(sp)
  804b3c:	28adc83a 	sub	r22,r5,r2
  804b40:	05be630e 	bge	zero,r22,8044d0 <__alt_mem_onchip_mem+0xff7844d0>
  804b44:	07000404 	movi	fp,16
  804b48:	d8801f17 	ldw	r2,124(sp)
  804b4c:	e5838f0e 	bge	fp,r22,80598c <___vfprintf_internal_r+0x1d88>
  804b50:	01402074 	movhi	r5,129
  804b54:	294af884 	addi	r5,r5,11234
  804b58:	dc403015 	stw	r17,192(sp)
  804b5c:	d9402b15 	stw	r5,172(sp)
  804b60:	b023883a 	mov	r17,r22
  804b64:	04c001c4 	movi	r19,7
  804b68:	a82d883a 	mov	r22,r21
  804b6c:	902b883a 	mov	r21,r18
  804b70:	8025883a 	mov	r18,r16
  804b74:	dc002c17 	ldw	r16,176(sp)
  804b78:	00000306 	br	804b88 <___vfprintf_internal_r+0xf84>
  804b7c:	8c7ffc04 	addi	r17,r17,-16
  804b80:	42000204 	addi	r8,r8,8
  804b84:	e440110e 	bge	fp,r17,804bcc <___vfprintf_internal_r+0xfc8>
  804b88:	18c00404 	addi	r3,r3,16
  804b8c:	10800044 	addi	r2,r2,1
  804b90:	45000015 	stw	r20,0(r8)
  804b94:	47000115 	stw	fp,4(r8)
  804b98:	d8c02015 	stw	r3,128(sp)
  804b9c:	d8801f15 	stw	r2,124(sp)
  804ba0:	98bff60e 	bge	r19,r2,804b7c <__alt_mem_onchip_mem+0xff784b7c>
  804ba4:	d9801e04 	addi	r6,sp,120
  804ba8:	b80b883a 	mov	r5,r23
  804bac:	8009883a 	mov	r4,r16
  804bb0:	080a5280 	call	80a528 <__sprint_r>
  804bb4:	103d151e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804bb8:	8c7ffc04 	addi	r17,r17,-16
  804bbc:	d8c02017 	ldw	r3,128(sp)
  804bc0:	d8801f17 	ldw	r2,124(sp)
  804bc4:	da000404 	addi	r8,sp,16
  804bc8:	e47fef16 	blt	fp,r17,804b88 <__alt_mem_onchip_mem+0xff784b88>
  804bcc:	9021883a 	mov	r16,r18
  804bd0:	a825883a 	mov	r18,r21
  804bd4:	b02b883a 	mov	r21,r22
  804bd8:	882d883a 	mov	r22,r17
  804bdc:	dc403017 	ldw	r17,192(sp)
  804be0:	d9002b17 	ldw	r4,172(sp)
  804be4:	1d87883a 	add	r3,r3,r22
  804be8:	10800044 	addi	r2,r2,1
  804bec:	41000015 	stw	r4,0(r8)
  804bf0:	45800115 	stw	r22,4(r8)
  804bf4:	d8c02015 	stw	r3,128(sp)
  804bf8:	d8801f15 	stw	r2,124(sp)
  804bfc:	010001c4 	movi	r4,7
  804c00:	20818e16 	blt	r4,r2,80523c <___vfprintf_internal_r+0x1638>
  804c04:	42000204 	addi	r8,r8,8
  804c08:	003e3106 	br	8044d0 <__alt_mem_onchip_mem+0xff7844d0>
  804c0c:	d9403317 	ldw	r5,204(sp)
  804c10:	00800044 	movi	r2,1
  804c14:	18c00044 	addi	r3,r3,1
  804c18:	1141530e 	bge	r2,r5,805168 <___vfprintf_internal_r+0x1564>
  804c1c:	dc401f17 	ldw	r17,124(sp)
  804c20:	00800044 	movi	r2,1
  804c24:	40800115 	stw	r2,4(r8)
  804c28:	8c400044 	addi	r17,r17,1
  804c2c:	44000015 	stw	r16,0(r8)
  804c30:	d8c02015 	stw	r3,128(sp)
  804c34:	dc401f15 	stw	r17,124(sp)
  804c38:	008001c4 	movi	r2,7
  804c3c:	14416b16 	blt	r2,r17,8051ec <___vfprintf_internal_r+0x15e8>
  804c40:	42000204 	addi	r8,r8,8
  804c44:	d8803717 	ldw	r2,220(sp)
  804c48:	d9003417 	ldw	r4,208(sp)
  804c4c:	8c400044 	addi	r17,r17,1
  804c50:	10c7883a 	add	r3,r2,r3
  804c54:	40800115 	stw	r2,4(r8)
  804c58:	41000015 	stw	r4,0(r8)
  804c5c:	d8c02015 	stw	r3,128(sp)
  804c60:	dc401f15 	stw	r17,124(sp)
  804c64:	008001c4 	movi	r2,7
  804c68:	14416916 	blt	r2,r17,805210 <___vfprintf_internal_r+0x160c>
  804c6c:	45800204 	addi	r22,r8,8
  804c70:	d9003617 	ldw	r4,216(sp)
  804c74:	d9403817 	ldw	r5,224(sp)
  804c78:	000d883a 	mov	r6,zero
  804c7c:	000f883a 	mov	r7,zero
  804c80:	d8c03c15 	stw	r3,240(sp)
  804c84:	080d2840 	call	80d284 <__eqdf2>
  804c88:	d8c03c17 	ldw	r3,240(sp)
  804c8c:	1000bc26 	beq	r2,zero,804f80 <___vfprintf_internal_r+0x137c>
  804c90:	d9403317 	ldw	r5,204(sp)
  804c94:	84000044 	addi	r16,r16,1
  804c98:	8c400044 	addi	r17,r17,1
  804c9c:	28bfffc4 	addi	r2,r5,-1
  804ca0:	1887883a 	add	r3,r3,r2
  804ca4:	b0800115 	stw	r2,4(r22)
  804ca8:	b4000015 	stw	r16,0(r22)
  804cac:	d8c02015 	stw	r3,128(sp)
  804cb0:	dc401f15 	stw	r17,124(sp)
  804cb4:	008001c4 	movi	r2,7
  804cb8:	14414316 	blt	r2,r17,8051c8 <___vfprintf_internal_r+0x15c4>
  804cbc:	b5800204 	addi	r22,r22,8
  804cc0:	d9003a17 	ldw	r4,232(sp)
  804cc4:	df0022c4 	addi	fp,sp,139
  804cc8:	8c400044 	addi	r17,r17,1
  804ccc:	20c7883a 	add	r3,r4,r3
  804cd0:	b7000015 	stw	fp,0(r22)
  804cd4:	b1000115 	stw	r4,4(r22)
  804cd8:	d8c02015 	stw	r3,128(sp)
  804cdc:	dc401f15 	stw	r17,124(sp)
  804ce0:	008001c4 	movi	r2,7
  804ce4:	14400e16 	blt	r2,r17,804d20 <___vfprintf_internal_r+0x111c>
  804ce8:	b2000204 	addi	r8,r22,8
  804cec:	003e3a06 	br	8045d8 <__alt_mem_onchip_mem+0xff7845d8>
  804cf0:	01002074 	movhi	r4,129
  804cf4:	210af884 	addi	r4,r4,11234
  804cf8:	d9002b15 	stw	r4,172(sp)
  804cfc:	d9002b17 	ldw	r4,172(sp)
  804d00:	1c07883a 	add	r3,r3,r16
  804d04:	44000115 	stw	r16,4(r8)
  804d08:	41000015 	stw	r4,0(r8)
  804d0c:	10800044 	addi	r2,r2,1
  804d10:	d8c02015 	stw	r3,128(sp)
  804d14:	d8801f15 	stw	r2,124(sp)
  804d18:	010001c4 	movi	r4,7
  804d1c:	20be2d0e 	bge	r4,r2,8045d4 <__alt_mem_onchip_mem+0xff7845d4>
  804d20:	d9002c17 	ldw	r4,176(sp)
  804d24:	d9801e04 	addi	r6,sp,120
  804d28:	b80b883a 	mov	r5,r23
  804d2c:	080a5280 	call	80a528 <__sprint_r>
  804d30:	103cb61e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804d34:	d8c02017 	ldw	r3,128(sp)
  804d38:	da000404 	addi	r8,sp,16
  804d3c:	003e2606 	br	8045d8 <__alt_mem_onchip_mem+0xff7845d8>
  804d40:	d9002c17 	ldw	r4,176(sp)
  804d44:	d9801e04 	addi	r6,sp,120
  804d48:	b80b883a 	mov	r5,r23
  804d4c:	080a5280 	call	80a528 <__sprint_r>
  804d50:	103e5d26 	beq	r2,zero,8046c8 <__alt_mem_onchip_mem+0xff7846c8>
  804d54:	003cad06 	br	80400c <__alt_mem_onchip_mem+0xff78400c>
  804d58:	d9002c17 	ldw	r4,176(sp)
  804d5c:	d9801e04 	addi	r6,sp,120
  804d60:	b80b883a 	mov	r5,r23
  804d64:	080a5280 	call	80a528 <__sprint_r>
  804d68:	103ca81e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804d6c:	d8c02017 	ldw	r3,128(sp)
  804d70:	da000404 	addi	r8,sp,16
  804d74:	003e0b06 	br	8045a4 <__alt_mem_onchip_mem+0xff7845a4>
  804d78:	d9002c17 	ldw	r4,176(sp)
  804d7c:	d9801e04 	addi	r6,sp,120
  804d80:	b80b883a 	mov	r5,r23
  804d84:	080a5280 	call	80a528 <__sprint_r>
  804d88:	103ca01e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804d8c:	d8c02017 	ldw	r3,128(sp)
  804d90:	da000404 	addi	r8,sp,16
  804d94:	003dbd06 	br	80448c <__alt_mem_onchip_mem+0xff78448c>
  804d98:	d9002c17 	ldw	r4,176(sp)
  804d9c:	d9801e04 	addi	r6,sp,120
  804da0:	b80b883a 	mov	r5,r23
  804da4:	080a5280 	call	80a528 <__sprint_r>
  804da8:	103c981e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804dac:	d8c02017 	ldw	r3,128(sp)
  804db0:	da000404 	addi	r8,sp,16
  804db4:	003dc306 	br	8044c4 <__alt_mem_onchip_mem+0xff7844c4>
  804db8:	d8802917 	ldw	r2,164(sp)
  804dbc:	d8002785 	stb	zero,158(sp)
  804dc0:	103f0616 	blt	r2,zero,8049dc <__alt_mem_onchip_mem+0xff7849dc>
  804dc4:	00ffdfc4 	movi	r3,-129
  804dc8:	9d84b03a 	or	r2,r19,r22
  804dcc:	90e4703a 	and	r18,r18,r3
  804dd0:	103c6b26 	beq	r2,zero,803f80 <__alt_mem_onchip_mem+0xff783f80>
  804dd4:	0039883a 	mov	fp,zero
  804dd8:	003e7406 	br	8047ac <__alt_mem_onchip_mem+0xff7847ac>
  804ddc:	9080040c 	andi	r2,r18,16
  804de0:	1001b326 	beq	r2,zero,8054b0 <___vfprintf_internal_r+0x18ac>
  804de4:	d9002d17 	ldw	r4,180(sp)
  804de8:	d9402917 	ldw	r5,164(sp)
  804dec:	d8002785 	stb	zero,158(sp)
  804df0:	20800104 	addi	r2,r4,4
  804df4:	24c00017 	ldw	r19,0(r4)
  804df8:	002d883a 	mov	r22,zero
  804dfc:	2801b516 	blt	r5,zero,8054d4 <___vfprintf_internal_r+0x18d0>
  804e00:	00ffdfc4 	movi	r3,-129
  804e04:	d8802d15 	stw	r2,180(sp)
  804e08:	90e4703a 	and	r18,r18,r3
  804e0c:	983d2726 	beq	r19,zero,8042ac <__alt_mem_onchip_mem+0xff7842ac>
  804e10:	0039883a 	mov	fp,zero
  804e14:	003d2a06 	br	8042c0 <__alt_mem_onchip_mem+0xff7842c0>
  804e18:	dc402617 	ldw	r17,152(sp)
  804e1c:	0441d30e 	bge	zero,r17,80556c <___vfprintf_internal_r+0x1968>
  804e20:	dc403217 	ldw	r17,200(sp)
  804e24:	d8803317 	ldw	r2,204(sp)
  804e28:	1440010e 	bge	r2,r17,804e30 <___vfprintf_internal_r+0x122c>
  804e2c:	1023883a 	mov	r17,r2
  804e30:	04400a0e 	bge	zero,r17,804e5c <___vfprintf_internal_r+0x1258>
  804e34:	d8801f17 	ldw	r2,124(sp)
  804e38:	1c47883a 	add	r3,r3,r17
  804e3c:	44000015 	stw	r16,0(r8)
  804e40:	10800044 	addi	r2,r2,1
  804e44:	44400115 	stw	r17,4(r8)
  804e48:	d8c02015 	stw	r3,128(sp)
  804e4c:	d8801f15 	stw	r2,124(sp)
  804e50:	010001c4 	movi	r4,7
  804e54:	20826516 	blt	r4,r2,8057ec <___vfprintf_internal_r+0x1be8>
  804e58:	42000204 	addi	r8,r8,8
  804e5c:	88026116 	blt	r17,zero,8057e4 <___vfprintf_internal_r+0x1be0>
  804e60:	d9003217 	ldw	r4,200(sp)
  804e64:	2463c83a 	sub	r17,r4,r17
  804e68:	04407b0e 	bge	zero,r17,805058 <___vfprintf_internal_r+0x1454>
  804e6c:	05800404 	movi	r22,16
  804e70:	d8801f17 	ldw	r2,124(sp)
  804e74:	b4419d0e 	bge	r22,r17,8054ec <___vfprintf_internal_r+0x18e8>
  804e78:	01002074 	movhi	r4,129
  804e7c:	210af884 	addi	r4,r4,11234
  804e80:	d9002b15 	stw	r4,172(sp)
  804e84:	070001c4 	movi	fp,7
  804e88:	dcc02c17 	ldw	r19,176(sp)
  804e8c:	00000306 	br	804e9c <___vfprintf_internal_r+0x1298>
  804e90:	42000204 	addi	r8,r8,8
  804e94:	8c7ffc04 	addi	r17,r17,-16
  804e98:	b441970e 	bge	r22,r17,8054f8 <___vfprintf_internal_r+0x18f4>
  804e9c:	18c00404 	addi	r3,r3,16
  804ea0:	10800044 	addi	r2,r2,1
  804ea4:	45000015 	stw	r20,0(r8)
  804ea8:	45800115 	stw	r22,4(r8)
  804eac:	d8c02015 	stw	r3,128(sp)
  804eb0:	d8801f15 	stw	r2,124(sp)
  804eb4:	e0bff60e 	bge	fp,r2,804e90 <__alt_mem_onchip_mem+0xff784e90>
  804eb8:	d9801e04 	addi	r6,sp,120
  804ebc:	b80b883a 	mov	r5,r23
  804ec0:	9809883a 	mov	r4,r19
  804ec4:	080a5280 	call	80a528 <__sprint_r>
  804ec8:	103c501e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804ecc:	d8c02017 	ldw	r3,128(sp)
  804ed0:	d8801f17 	ldw	r2,124(sp)
  804ed4:	da000404 	addi	r8,sp,16
  804ed8:	003fee06 	br	804e94 <__alt_mem_onchip_mem+0xff784e94>
  804edc:	d9002c17 	ldw	r4,176(sp)
  804ee0:	d9801e04 	addi	r6,sp,120
  804ee4:	b80b883a 	mov	r5,r23
  804ee8:	080a5280 	call	80a528 <__sprint_r>
  804eec:	103c471e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804ef0:	d8c02017 	ldw	r3,128(sp)
  804ef4:	df002787 	ldb	fp,158(sp)
  804ef8:	da000404 	addi	r8,sp,16
  804efc:	003d5606 	br	804458 <__alt_mem_onchip_mem+0xff784458>
  804f00:	9080040c 	andi	r2,r18,16
  804f04:	10016126 	beq	r2,zero,80548c <___vfprintf_internal_r+0x1888>
  804f08:	d8802d17 	ldw	r2,180(sp)
  804f0c:	14c00017 	ldw	r19,0(r2)
  804f10:	10800104 	addi	r2,r2,4
  804f14:	d8802d15 	stw	r2,180(sp)
  804f18:	982dd7fa 	srai	r22,r19,31
  804f1c:	b005883a 	mov	r2,r22
  804f20:	003c8206 	br	80412c <__alt_mem_onchip_mem+0xff78412c>
  804f24:	9080040c 	andi	r2,r18,16
  804f28:	10003526 	beq	r2,zero,805000 <___vfprintf_internal_r+0x13fc>
  804f2c:	d9402d17 	ldw	r5,180(sp)
  804f30:	d8c02917 	ldw	r3,164(sp)
  804f34:	d8002785 	stb	zero,158(sp)
  804f38:	28800104 	addi	r2,r5,4
  804f3c:	2cc00017 	ldw	r19,0(r5)
  804f40:	002d883a 	mov	r22,zero
  804f44:	18003716 	blt	r3,zero,805024 <___vfprintf_internal_r+0x1420>
  804f48:	00ffdfc4 	movi	r3,-129
  804f4c:	d8802d15 	stw	r2,180(sp)
  804f50:	90e4703a 	and	r18,r18,r3
  804f54:	0039883a 	mov	fp,zero
  804f58:	983df326 	beq	r19,zero,804728 <__alt_mem_onchip_mem+0xff784728>
  804f5c:	00800244 	movi	r2,9
  804f60:	14fc7b36 	bltu	r2,r19,804150 <__alt_mem_onchip_mem+0xff784150>
  804f64:	d8c02817 	ldw	r3,160(sp)
  804f68:	dc001dc4 	addi	r16,sp,119
  804f6c:	9cc00c04 	addi	r19,r19,48
  804f70:	1c07c83a 	sub	r3,r3,r16
  804f74:	dcc01dc5 	stb	r19,119(sp)
  804f78:	d8c02e15 	stw	r3,184(sp)
  804f7c:	003ce806 	br	804320 <__alt_mem_onchip_mem+0xff784320>
  804f80:	d8803317 	ldw	r2,204(sp)
  804f84:	143fffc4 	addi	r16,r2,-1
  804f88:	043f4d0e 	bge	zero,r16,804cc0 <__alt_mem_onchip_mem+0xff784cc0>
  804f8c:	07000404 	movi	fp,16
  804f90:	e400810e 	bge	fp,r16,805198 <___vfprintf_internal_r+0x1594>
  804f94:	01402074 	movhi	r5,129
  804f98:	294af884 	addi	r5,r5,11234
  804f9c:	d9402b15 	stw	r5,172(sp)
  804fa0:	01c001c4 	movi	r7,7
  804fa4:	dcc02c17 	ldw	r19,176(sp)
  804fa8:	00000306 	br	804fb8 <___vfprintf_internal_r+0x13b4>
  804fac:	b5800204 	addi	r22,r22,8
  804fb0:	843ffc04 	addi	r16,r16,-16
  804fb4:	e4007b0e 	bge	fp,r16,8051a4 <___vfprintf_internal_r+0x15a0>
  804fb8:	18c00404 	addi	r3,r3,16
  804fbc:	8c400044 	addi	r17,r17,1
  804fc0:	b5000015 	stw	r20,0(r22)
  804fc4:	b7000115 	stw	fp,4(r22)
  804fc8:	d8c02015 	stw	r3,128(sp)
  804fcc:	dc401f15 	stw	r17,124(sp)
  804fd0:	3c7ff60e 	bge	r7,r17,804fac <__alt_mem_onchip_mem+0xff784fac>
  804fd4:	d9801e04 	addi	r6,sp,120
  804fd8:	b80b883a 	mov	r5,r23
  804fdc:	9809883a 	mov	r4,r19
  804fe0:	d9c03c15 	stw	r7,240(sp)
  804fe4:	080a5280 	call	80a528 <__sprint_r>
  804fe8:	d9c03c17 	ldw	r7,240(sp)
  804fec:	103c071e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  804ff0:	d8c02017 	ldw	r3,128(sp)
  804ff4:	dc401f17 	ldw	r17,124(sp)
  804ff8:	dd800404 	addi	r22,sp,16
  804ffc:	003fec06 	br	804fb0 <__alt_mem_onchip_mem+0xff784fb0>
  805000:	9080100c 	andi	r2,r18,64
  805004:	d8002785 	stb	zero,158(sp)
  805008:	10010e26 	beq	r2,zero,805444 <___vfprintf_internal_r+0x1840>
  80500c:	d9002d17 	ldw	r4,180(sp)
  805010:	d9402917 	ldw	r5,164(sp)
  805014:	002d883a 	mov	r22,zero
  805018:	20800104 	addi	r2,r4,4
  80501c:	24c0000b 	ldhu	r19,0(r4)
  805020:	283fc90e 	bge	r5,zero,804f48 <__alt_mem_onchip_mem+0xff784f48>
  805024:	d8802d15 	stw	r2,180(sp)
  805028:	0039883a 	mov	fp,zero
  80502c:	9d84b03a 	or	r2,r19,r22
  805030:	103c461e 	bne	r2,zero,80414c <__alt_mem_onchip_mem+0xff78414c>
  805034:	00800044 	movi	r2,1
  805038:	003e6c06 	br	8049ec <__alt_mem_onchip_mem+0xff7849ec>
  80503c:	d9002c17 	ldw	r4,176(sp)
  805040:	d9801e04 	addi	r6,sp,120
  805044:	b80b883a 	mov	r5,r23
  805048:	080a5280 	call	80a528 <__sprint_r>
  80504c:	103bef1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805050:	d8c02017 	ldw	r3,128(sp)
  805054:	da000404 	addi	r8,sp,16
  805058:	d9003217 	ldw	r4,200(sp)
  80505c:	d8802617 	ldw	r2,152(sp)
  805060:	d9403317 	ldw	r5,204(sp)
  805064:	8123883a 	add	r17,r16,r4
  805068:	11400216 	blt	r2,r5,805074 <___vfprintf_internal_r+0x1470>
  80506c:	9100004c 	andi	r4,r18,1
  805070:	20000d26 	beq	r4,zero,8050a8 <___vfprintf_internal_r+0x14a4>
  805074:	d9003717 	ldw	r4,220(sp)
  805078:	d9403417 	ldw	r5,208(sp)
  80507c:	1907883a 	add	r3,r3,r4
  805080:	d9001f17 	ldw	r4,124(sp)
  805084:	41400015 	stw	r5,0(r8)
  805088:	d9403717 	ldw	r5,220(sp)
  80508c:	21000044 	addi	r4,r4,1
  805090:	d8c02015 	stw	r3,128(sp)
  805094:	41400115 	stw	r5,4(r8)
  805098:	d9001f15 	stw	r4,124(sp)
  80509c:	014001c4 	movi	r5,7
  8050a0:	2901e816 	blt	r5,r4,805844 <___vfprintf_internal_r+0x1c40>
  8050a4:	42000204 	addi	r8,r8,8
  8050a8:	d9003317 	ldw	r4,204(sp)
  8050ac:	8121883a 	add	r16,r16,r4
  8050b0:	2085c83a 	sub	r2,r4,r2
  8050b4:	8461c83a 	sub	r16,r16,r17
  8050b8:	1400010e 	bge	r2,r16,8050c0 <___vfprintf_internal_r+0x14bc>
  8050bc:	1021883a 	mov	r16,r2
  8050c0:	04000a0e 	bge	zero,r16,8050ec <___vfprintf_internal_r+0x14e8>
  8050c4:	d9001f17 	ldw	r4,124(sp)
  8050c8:	1c07883a 	add	r3,r3,r16
  8050cc:	44400015 	stw	r17,0(r8)
  8050d0:	21000044 	addi	r4,r4,1
  8050d4:	44000115 	stw	r16,4(r8)
  8050d8:	d8c02015 	stw	r3,128(sp)
  8050dc:	d9001f15 	stw	r4,124(sp)
  8050e0:	014001c4 	movi	r5,7
  8050e4:	2901fb16 	blt	r5,r4,8058d4 <___vfprintf_internal_r+0x1cd0>
  8050e8:	42000204 	addi	r8,r8,8
  8050ec:	8001f716 	blt	r16,zero,8058cc <___vfprintf_internal_r+0x1cc8>
  8050f0:	1421c83a 	sub	r16,r2,r16
  8050f4:	043d380e 	bge	zero,r16,8045d8 <__alt_mem_onchip_mem+0xff7845d8>
  8050f8:	04400404 	movi	r17,16
  8050fc:	d8801f17 	ldw	r2,124(sp)
  805100:	8c3efb0e 	bge	r17,r16,804cf0 <__alt_mem_onchip_mem+0xff784cf0>
  805104:	01402074 	movhi	r5,129
  805108:	294af884 	addi	r5,r5,11234
  80510c:	d9402b15 	stw	r5,172(sp)
  805110:	058001c4 	movi	r22,7
  805114:	dcc02c17 	ldw	r19,176(sp)
  805118:	00000306 	br	805128 <___vfprintf_internal_r+0x1524>
  80511c:	42000204 	addi	r8,r8,8
  805120:	843ffc04 	addi	r16,r16,-16
  805124:	8c3ef50e 	bge	r17,r16,804cfc <__alt_mem_onchip_mem+0xff784cfc>
  805128:	18c00404 	addi	r3,r3,16
  80512c:	10800044 	addi	r2,r2,1
  805130:	45000015 	stw	r20,0(r8)
  805134:	44400115 	stw	r17,4(r8)
  805138:	d8c02015 	stw	r3,128(sp)
  80513c:	d8801f15 	stw	r2,124(sp)
  805140:	b0bff60e 	bge	r22,r2,80511c <__alt_mem_onchip_mem+0xff78511c>
  805144:	d9801e04 	addi	r6,sp,120
  805148:	b80b883a 	mov	r5,r23
  80514c:	9809883a 	mov	r4,r19
  805150:	080a5280 	call	80a528 <__sprint_r>
  805154:	103bad1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805158:	d8c02017 	ldw	r3,128(sp)
  80515c:	d8801f17 	ldw	r2,124(sp)
  805160:	da000404 	addi	r8,sp,16
  805164:	003fee06 	br	805120 <__alt_mem_onchip_mem+0xff785120>
  805168:	9088703a 	and	r4,r18,r2
  80516c:	203eab1e 	bne	r4,zero,804c1c <__alt_mem_onchip_mem+0xff784c1c>
  805170:	dc401f17 	ldw	r17,124(sp)
  805174:	40800115 	stw	r2,4(r8)
  805178:	44000015 	stw	r16,0(r8)
  80517c:	8c400044 	addi	r17,r17,1
  805180:	d8c02015 	stw	r3,128(sp)
  805184:	dc401f15 	stw	r17,124(sp)
  805188:	008001c4 	movi	r2,7
  80518c:	14400e16 	blt	r2,r17,8051c8 <___vfprintf_internal_r+0x15c4>
  805190:	45800204 	addi	r22,r8,8
  805194:	003eca06 	br	804cc0 <__alt_mem_onchip_mem+0xff784cc0>
  805198:	01002074 	movhi	r4,129
  80519c:	210af884 	addi	r4,r4,11234
  8051a0:	d9002b15 	stw	r4,172(sp)
  8051a4:	d8802b17 	ldw	r2,172(sp)
  8051a8:	1c07883a 	add	r3,r3,r16
  8051ac:	8c400044 	addi	r17,r17,1
  8051b0:	b0800015 	stw	r2,0(r22)
  8051b4:	b4000115 	stw	r16,4(r22)
  8051b8:	d8c02015 	stw	r3,128(sp)
  8051bc:	dc401f15 	stw	r17,124(sp)
  8051c0:	008001c4 	movi	r2,7
  8051c4:	147ebd0e 	bge	r2,r17,804cbc <__alt_mem_onchip_mem+0xff784cbc>
  8051c8:	d9002c17 	ldw	r4,176(sp)
  8051cc:	d9801e04 	addi	r6,sp,120
  8051d0:	b80b883a 	mov	r5,r23
  8051d4:	080a5280 	call	80a528 <__sprint_r>
  8051d8:	103b8c1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  8051dc:	d8c02017 	ldw	r3,128(sp)
  8051e0:	dc401f17 	ldw	r17,124(sp)
  8051e4:	dd800404 	addi	r22,sp,16
  8051e8:	003eb506 	br	804cc0 <__alt_mem_onchip_mem+0xff784cc0>
  8051ec:	d9002c17 	ldw	r4,176(sp)
  8051f0:	d9801e04 	addi	r6,sp,120
  8051f4:	b80b883a 	mov	r5,r23
  8051f8:	080a5280 	call	80a528 <__sprint_r>
  8051fc:	103b831e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805200:	d8c02017 	ldw	r3,128(sp)
  805204:	dc401f17 	ldw	r17,124(sp)
  805208:	da000404 	addi	r8,sp,16
  80520c:	003e8d06 	br	804c44 <__alt_mem_onchip_mem+0xff784c44>
  805210:	d9002c17 	ldw	r4,176(sp)
  805214:	d9801e04 	addi	r6,sp,120
  805218:	b80b883a 	mov	r5,r23
  80521c:	080a5280 	call	80a528 <__sprint_r>
  805220:	103b7a1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805224:	d8c02017 	ldw	r3,128(sp)
  805228:	dc401f17 	ldw	r17,124(sp)
  80522c:	dd800404 	addi	r22,sp,16
  805230:	003e8f06 	br	804c70 <__alt_mem_onchip_mem+0xff784c70>
  805234:	0027883a 	mov	r19,zero
  805238:	003f4a06 	br	804f64 <__alt_mem_onchip_mem+0xff784f64>
  80523c:	d9002c17 	ldw	r4,176(sp)
  805240:	d9801e04 	addi	r6,sp,120
  805244:	b80b883a 	mov	r5,r23
  805248:	080a5280 	call	80a528 <__sprint_r>
  80524c:	103b6f1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805250:	d8c02017 	ldw	r3,128(sp)
  805254:	da000404 	addi	r8,sp,16
  805258:	003c9d06 	br	8044d0 <__alt_mem_onchip_mem+0xff7844d0>
  80525c:	04e7c83a 	sub	r19,zero,r19
  805260:	9804c03a 	cmpne	r2,r19,zero
  805264:	05adc83a 	sub	r22,zero,r22
  805268:	b0adc83a 	sub	r22,r22,r2
  80526c:	d8802917 	ldw	r2,164(sp)
  805270:	07000b44 	movi	fp,45
  805274:	df002785 	stb	fp,158(sp)
  805278:	10017b16 	blt	r2,zero,805868 <___vfprintf_internal_r+0x1c64>
  80527c:	00bfdfc4 	movi	r2,-129
  805280:	90a4703a 	and	r18,r18,r2
  805284:	003bb106 	br	80414c <__alt_mem_onchip_mem+0xff78414c>
  805288:	d9003617 	ldw	r4,216(sp)
  80528c:	d9403817 	ldw	r5,224(sp)
  805290:	da003d15 	stw	r8,244(sp)
  805294:	080a2dc0 	call	80a2dc <__fpclassifyd>
  805298:	da003d17 	ldw	r8,244(sp)
  80529c:	1000f026 	beq	r2,zero,805660 <___vfprintf_internal_r+0x1a5c>
  8052a0:	d9002917 	ldw	r4,164(sp)
  8052a4:	05bff7c4 	movi	r22,-33
  8052a8:	00bfffc4 	movi	r2,-1
  8052ac:	8dac703a 	and	r22,r17,r22
  8052b0:	20820026 	beq	r4,r2,805ab4 <___vfprintf_internal_r+0x1eb0>
  8052b4:	008011c4 	movi	r2,71
  8052b8:	b081f726 	beq	r22,r2,805a98 <___vfprintf_internal_r+0x1e94>
  8052bc:	d9003817 	ldw	r4,224(sp)
  8052c0:	90c04014 	ori	r3,r18,256
  8052c4:	d8c02b15 	stw	r3,172(sp)
  8052c8:	20021516 	blt	r4,zero,805b20 <___vfprintf_internal_r+0x1f1c>
  8052cc:	dcc03817 	ldw	r19,224(sp)
  8052d0:	d8002a05 	stb	zero,168(sp)
  8052d4:	00801984 	movi	r2,102
  8052d8:	8881f926 	beq	r17,r2,805ac0 <___vfprintf_internal_r+0x1ebc>
  8052dc:	00801184 	movi	r2,70
  8052e0:	88821c26 	beq	r17,r2,805b54 <___vfprintf_internal_r+0x1f50>
  8052e4:	00801144 	movi	r2,69
  8052e8:	b081ef26 	beq	r22,r2,805aa8 <___vfprintf_internal_r+0x1ea4>
  8052ec:	d8c02917 	ldw	r3,164(sp)
  8052f0:	d8802104 	addi	r2,sp,132
  8052f4:	d8800315 	stw	r2,12(sp)
  8052f8:	d9403617 	ldw	r5,216(sp)
  8052fc:	d8802504 	addi	r2,sp,148
  805300:	d9002c17 	ldw	r4,176(sp)
  805304:	d8800215 	stw	r2,8(sp)
  805308:	d8802604 	addi	r2,sp,152
  80530c:	d8c00015 	stw	r3,0(sp)
  805310:	d8800115 	stw	r2,4(sp)
  805314:	01c00084 	movi	r7,2
  805318:	980d883a 	mov	r6,r19
  80531c:	d8c03c15 	stw	r3,240(sp)
  805320:	da003d15 	stw	r8,244(sp)
  805324:	08064340 	call	806434 <_dtoa_r>
  805328:	1021883a 	mov	r16,r2
  80532c:	008019c4 	movi	r2,103
  805330:	d8c03c17 	ldw	r3,240(sp)
  805334:	da003d17 	ldw	r8,244(sp)
  805338:	88817126 	beq	r17,r2,805900 <___vfprintf_internal_r+0x1cfc>
  80533c:	008011c4 	movi	r2,71
  805340:	88829226 	beq	r17,r2,805d8c <___vfprintf_internal_r+0x2188>
  805344:	80f9883a 	add	fp,r16,r3
  805348:	d9003617 	ldw	r4,216(sp)
  80534c:	000d883a 	mov	r6,zero
  805350:	000f883a 	mov	r7,zero
  805354:	980b883a 	mov	r5,r19
  805358:	da003d15 	stw	r8,244(sp)
  80535c:	080d2840 	call	80d284 <__eqdf2>
  805360:	da003d17 	ldw	r8,244(sp)
  805364:	10018d26 	beq	r2,zero,80599c <___vfprintf_internal_r+0x1d98>
  805368:	d8802117 	ldw	r2,132(sp)
  80536c:	1700062e 	bgeu	r2,fp,805388 <___vfprintf_internal_r+0x1784>
  805370:	01000c04 	movi	r4,48
  805374:	10c00044 	addi	r3,r2,1
  805378:	d8c02115 	stw	r3,132(sp)
  80537c:	11000005 	stb	r4,0(r2)
  805380:	d8802117 	ldw	r2,132(sp)
  805384:	173ffb36 	bltu	r2,fp,805374 <__alt_mem_onchip_mem+0xff785374>
  805388:	1405c83a 	sub	r2,r2,r16
  80538c:	d8803315 	stw	r2,204(sp)
  805390:	008011c4 	movi	r2,71
  805394:	b0817626 	beq	r22,r2,805970 <___vfprintf_internal_r+0x1d6c>
  805398:	00801944 	movi	r2,101
  80539c:	1442810e 	bge	r2,r17,805da4 <___vfprintf_internal_r+0x21a0>
  8053a0:	d8c02617 	ldw	r3,152(sp)
  8053a4:	00801984 	movi	r2,102
  8053a8:	d8c03215 	stw	r3,200(sp)
  8053ac:	8881fe26 	beq	r17,r2,805ba8 <___vfprintf_internal_r+0x1fa4>
  8053b0:	d8c03217 	ldw	r3,200(sp)
  8053b4:	d9003317 	ldw	r4,204(sp)
  8053b8:	1901dd16 	blt	r3,r4,805b30 <___vfprintf_internal_r+0x1f2c>
  8053bc:	9480004c 	andi	r18,r18,1
  8053c0:	90022b1e 	bne	r18,zero,805c70 <___vfprintf_internal_r+0x206c>
  8053c4:	1805883a 	mov	r2,r3
  8053c8:	18028016 	blt	r3,zero,805dcc <___vfprintf_internal_r+0x21c8>
  8053cc:	d8c03217 	ldw	r3,200(sp)
  8053d0:	044019c4 	movi	r17,103
  8053d4:	d8c02e15 	stw	r3,184(sp)
  8053d8:	df002a07 	ldb	fp,168(sp)
  8053dc:	e001531e 	bne	fp,zero,80592c <___vfprintf_internal_r+0x1d28>
  8053e0:	df002783 	ldbu	fp,158(sp)
  8053e4:	d8802a15 	stw	r2,168(sp)
  8053e8:	dc802b17 	ldw	r18,172(sp)
  8053ec:	d8002915 	stw	zero,164(sp)
  8053f0:	003bd106 	br	804338 <__alt_mem_onchip_mem+0xff784338>
  8053f4:	d8802d17 	ldw	r2,180(sp)
  8053f8:	d8c02d17 	ldw	r3,180(sp)
  8053fc:	d9002d17 	ldw	r4,180(sp)
  805400:	10800017 	ldw	r2,0(r2)
  805404:	18c00117 	ldw	r3,4(r3)
  805408:	21000204 	addi	r4,r4,8
  80540c:	d8803615 	stw	r2,216(sp)
  805410:	d8c03815 	stw	r3,224(sp)
  805414:	d9002d15 	stw	r4,180(sp)
  805418:	003b7506 	br	8041f0 <__alt_mem_onchip_mem+0xff7841f0>
  80541c:	ac400007 	ldb	r17,0(r21)
  805420:	003a5906 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  805424:	9080100c 	andi	r2,r18,64
  805428:	1000a826 	beq	r2,zero,8056cc <___vfprintf_internal_r+0x1ac8>
  80542c:	d9002d17 	ldw	r4,180(sp)
  805430:	002d883a 	mov	r22,zero
  805434:	24c0000b 	ldhu	r19,0(r4)
  805438:	21000104 	addi	r4,r4,4
  80543c:	d9002d15 	stw	r4,180(sp)
  805440:	003ccb06 	br	804770 <__alt_mem_onchip_mem+0xff784770>
  805444:	d8c02d17 	ldw	r3,180(sp)
  805448:	d9002917 	ldw	r4,164(sp)
  80544c:	002d883a 	mov	r22,zero
  805450:	18800104 	addi	r2,r3,4
  805454:	1cc00017 	ldw	r19,0(r3)
  805458:	203ebb0e 	bge	r4,zero,804f48 <__alt_mem_onchip_mem+0xff784f48>
  80545c:	003ef106 	br	805024 <__alt_mem_onchip_mem+0xff785024>
  805460:	9080040c 	andi	r2,r18,16
  805464:	1000921e 	bne	r2,zero,8056b0 <___vfprintf_internal_r+0x1aac>
  805468:	9480100c 	andi	r18,r18,64
  80546c:	90013926 	beq	r18,zero,805954 <___vfprintf_internal_r+0x1d50>
  805470:	d9002d17 	ldw	r4,180(sp)
  805474:	d9402f17 	ldw	r5,188(sp)
  805478:	20800017 	ldw	r2,0(r4)
  80547c:	21000104 	addi	r4,r4,4
  805480:	d9002d15 	stw	r4,180(sp)
  805484:	1140000d 	sth	r5,0(r2)
  805488:	003a1606 	br	803ce4 <__alt_mem_onchip_mem+0xff783ce4>
  80548c:	9080100c 	andi	r2,r18,64
  805490:	10008026 	beq	r2,zero,805694 <___vfprintf_internal_r+0x1a90>
  805494:	d8c02d17 	ldw	r3,180(sp)
  805498:	1cc0000f 	ldh	r19,0(r3)
  80549c:	18c00104 	addi	r3,r3,4
  8054a0:	d8c02d15 	stw	r3,180(sp)
  8054a4:	982dd7fa 	srai	r22,r19,31
  8054a8:	b005883a 	mov	r2,r22
  8054ac:	003b1f06 	br	80412c <__alt_mem_onchip_mem+0xff78412c>
  8054b0:	9080100c 	andi	r2,r18,64
  8054b4:	d8002785 	stb	zero,158(sp)
  8054b8:	10008a1e 	bne	r2,zero,8056e4 <___vfprintf_internal_r+0x1ae0>
  8054bc:	d9402d17 	ldw	r5,180(sp)
  8054c0:	d8c02917 	ldw	r3,164(sp)
  8054c4:	002d883a 	mov	r22,zero
  8054c8:	28800104 	addi	r2,r5,4
  8054cc:	2cc00017 	ldw	r19,0(r5)
  8054d0:	183e4b0e 	bge	r3,zero,804e00 <__alt_mem_onchip_mem+0xff784e00>
  8054d4:	9d86b03a 	or	r3,r19,r22
  8054d8:	d8802d15 	stw	r2,180(sp)
  8054dc:	183e4c1e 	bne	r3,zero,804e10 <__alt_mem_onchip_mem+0xff784e10>
  8054e0:	0039883a 	mov	fp,zero
  8054e4:	0005883a 	mov	r2,zero
  8054e8:	003d4006 	br	8049ec <__alt_mem_onchip_mem+0xff7849ec>
  8054ec:	01402074 	movhi	r5,129
  8054f0:	294af884 	addi	r5,r5,11234
  8054f4:	d9402b15 	stw	r5,172(sp)
  8054f8:	d9402b17 	ldw	r5,172(sp)
  8054fc:	1c47883a 	add	r3,r3,r17
  805500:	10800044 	addi	r2,r2,1
  805504:	41400015 	stw	r5,0(r8)
  805508:	44400115 	stw	r17,4(r8)
  80550c:	d8c02015 	stw	r3,128(sp)
  805510:	d8801f15 	stw	r2,124(sp)
  805514:	010001c4 	movi	r4,7
  805518:	20bec816 	blt	r4,r2,80503c <__alt_mem_onchip_mem+0xff78503c>
  80551c:	42000204 	addi	r8,r8,8
  805520:	003ecd06 	br	805058 <__alt_mem_onchip_mem+0xff785058>
  805524:	d9002917 	ldw	r4,164(sp)
  805528:	d8002785 	stb	zero,158(sp)
  80552c:	203d2d16 	blt	r4,zero,8049e4 <__alt_mem_onchip_mem+0xff7849e4>
  805530:	00bfdfc4 	movi	r2,-129
  805534:	90a4703a 	and	r18,r18,r2
  805538:	003a9106 	br	803f80 <__alt_mem_onchip_mem+0xff783f80>
  80553c:	01002074 	movhi	r4,129
  805540:	210af884 	addi	r4,r4,11234
  805544:	d9002b15 	stw	r4,172(sp)
  805548:	003c0c06 	br	80457c <__alt_mem_onchip_mem+0xff78457c>
  80554c:	d9002c17 	ldw	r4,176(sp)
  805550:	d9801e04 	addi	r6,sp,120
  805554:	b80b883a 	mov	r5,r23
  805558:	080a5280 	call	80a528 <__sprint_r>
  80555c:	103aab1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805560:	d8c02017 	ldw	r3,128(sp)
  805564:	da000404 	addi	r8,sp,16
  805568:	003d4106 	br	804a70 <__alt_mem_onchip_mem+0xff784a70>
  80556c:	d8801f17 	ldw	r2,124(sp)
  805570:	01402074 	movhi	r5,129
  805574:	01000044 	movi	r4,1
  805578:	18c00044 	addi	r3,r3,1
  80557c:	10800044 	addi	r2,r2,1
  805580:	294af804 	addi	r5,r5,11232
  805584:	41000115 	stw	r4,4(r8)
  805588:	41400015 	stw	r5,0(r8)
  80558c:	d8c02015 	stw	r3,128(sp)
  805590:	d8801f15 	stw	r2,124(sp)
  805594:	010001c4 	movi	r4,7
  805598:	20805c16 	blt	r4,r2,80570c <___vfprintf_internal_r+0x1b08>
  80559c:	42000204 	addi	r8,r8,8
  8055a0:	8800041e 	bne	r17,zero,8055b4 <___vfprintf_internal_r+0x19b0>
  8055a4:	d8803317 	ldw	r2,204(sp)
  8055a8:	1000021e 	bne	r2,zero,8055b4 <___vfprintf_internal_r+0x19b0>
  8055ac:	9080004c 	andi	r2,r18,1
  8055b0:	103c0926 	beq	r2,zero,8045d8 <__alt_mem_onchip_mem+0xff7845d8>
  8055b4:	d9003717 	ldw	r4,220(sp)
  8055b8:	d8801f17 	ldw	r2,124(sp)
  8055bc:	d9403417 	ldw	r5,208(sp)
  8055c0:	20c7883a 	add	r3,r4,r3
  8055c4:	10800044 	addi	r2,r2,1
  8055c8:	41000115 	stw	r4,4(r8)
  8055cc:	41400015 	stw	r5,0(r8)
  8055d0:	d8c02015 	stw	r3,128(sp)
  8055d4:	d8801f15 	stw	r2,124(sp)
  8055d8:	010001c4 	movi	r4,7
  8055dc:	20812116 	blt	r4,r2,805a64 <___vfprintf_internal_r+0x1e60>
  8055e0:	42000204 	addi	r8,r8,8
  8055e4:	0463c83a 	sub	r17,zero,r17
  8055e8:	0440730e 	bge	zero,r17,8057b8 <___vfprintf_internal_r+0x1bb4>
  8055ec:	05800404 	movi	r22,16
  8055f0:	b440860e 	bge	r22,r17,80580c <___vfprintf_internal_r+0x1c08>
  8055f4:	01402074 	movhi	r5,129
  8055f8:	294af884 	addi	r5,r5,11234
  8055fc:	d9402b15 	stw	r5,172(sp)
  805600:	070001c4 	movi	fp,7
  805604:	dcc02c17 	ldw	r19,176(sp)
  805608:	00000306 	br	805618 <___vfprintf_internal_r+0x1a14>
  80560c:	42000204 	addi	r8,r8,8
  805610:	8c7ffc04 	addi	r17,r17,-16
  805614:	b440800e 	bge	r22,r17,805818 <___vfprintf_internal_r+0x1c14>
  805618:	18c00404 	addi	r3,r3,16
  80561c:	10800044 	addi	r2,r2,1
  805620:	45000015 	stw	r20,0(r8)
  805624:	45800115 	stw	r22,4(r8)
  805628:	d8c02015 	stw	r3,128(sp)
  80562c:	d8801f15 	stw	r2,124(sp)
  805630:	e0bff60e 	bge	fp,r2,80560c <__alt_mem_onchip_mem+0xff78560c>
  805634:	d9801e04 	addi	r6,sp,120
  805638:	b80b883a 	mov	r5,r23
  80563c:	9809883a 	mov	r4,r19
  805640:	080a5280 	call	80a528 <__sprint_r>
  805644:	103a711e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805648:	d8c02017 	ldw	r3,128(sp)
  80564c:	d8801f17 	ldw	r2,124(sp)
  805650:	da000404 	addi	r8,sp,16
  805654:	003fee06 	br	805610 <__alt_mem_onchip_mem+0xff785610>
  805658:	00bfffc4 	movi	r2,-1
  80565c:	003a6f06 	br	80401c <__alt_mem_onchip_mem+0xff78401c>
  805660:	008011c4 	movi	r2,71
  805664:	1440b816 	blt	r2,r17,805948 <___vfprintf_internal_r+0x1d44>
  805668:	04002074 	movhi	r16,129
  80566c:	840aea04 	addi	r16,r16,11176
  805670:	00c000c4 	movi	r3,3
  805674:	00bfdfc4 	movi	r2,-129
  805678:	d8c02a15 	stw	r3,168(sp)
  80567c:	90a4703a 	and	r18,r18,r2
  805680:	df002783 	ldbu	fp,158(sp)
  805684:	d8c02e15 	stw	r3,184(sp)
  805688:	d8002915 	stw	zero,164(sp)
  80568c:	d8003215 	stw	zero,200(sp)
  805690:	003b2906 	br	804338 <__alt_mem_onchip_mem+0xff784338>
  805694:	d9002d17 	ldw	r4,180(sp)
  805698:	24c00017 	ldw	r19,0(r4)
  80569c:	21000104 	addi	r4,r4,4
  8056a0:	d9002d15 	stw	r4,180(sp)
  8056a4:	982dd7fa 	srai	r22,r19,31
  8056a8:	b005883a 	mov	r2,r22
  8056ac:	003a9f06 	br	80412c <__alt_mem_onchip_mem+0xff78412c>
  8056b0:	d9402d17 	ldw	r5,180(sp)
  8056b4:	d8c02f17 	ldw	r3,188(sp)
  8056b8:	28800017 	ldw	r2,0(r5)
  8056bc:	29400104 	addi	r5,r5,4
  8056c0:	d9402d15 	stw	r5,180(sp)
  8056c4:	10c00015 	stw	r3,0(r2)
  8056c8:	00398606 	br	803ce4 <__alt_mem_onchip_mem+0xff783ce4>
  8056cc:	d9402d17 	ldw	r5,180(sp)
  8056d0:	002d883a 	mov	r22,zero
  8056d4:	2cc00017 	ldw	r19,0(r5)
  8056d8:	29400104 	addi	r5,r5,4
  8056dc:	d9402d15 	stw	r5,180(sp)
  8056e0:	003c2306 	br	804770 <__alt_mem_onchip_mem+0xff784770>
  8056e4:	d8c02d17 	ldw	r3,180(sp)
  8056e8:	d9002917 	ldw	r4,164(sp)
  8056ec:	002d883a 	mov	r22,zero
  8056f0:	18800104 	addi	r2,r3,4
  8056f4:	1cc0000b 	ldhu	r19,0(r3)
  8056f8:	203dc10e 	bge	r4,zero,804e00 <__alt_mem_onchip_mem+0xff784e00>
  8056fc:	003f7506 	br	8054d4 <__alt_mem_onchip_mem+0xff7854d4>
  805700:	04002074 	movhi	r16,129
  805704:	840ae804 	addi	r16,r16,11168
  805708:	003acc06 	br	80423c <__alt_mem_onchip_mem+0xff78423c>
  80570c:	d9002c17 	ldw	r4,176(sp)
  805710:	d9801e04 	addi	r6,sp,120
  805714:	b80b883a 	mov	r5,r23
  805718:	080a5280 	call	80a528 <__sprint_r>
  80571c:	103a3b1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805720:	dc402617 	ldw	r17,152(sp)
  805724:	d8c02017 	ldw	r3,128(sp)
  805728:	da000404 	addi	r8,sp,16
  80572c:	003f9c06 	br	8055a0 <__alt_mem_onchip_mem+0xff7855a0>
  805730:	ac400043 	ldbu	r17,1(r21)
  805734:	94800814 	ori	r18,r18,32
  805738:	ad400044 	addi	r21,r21,1
  80573c:	8c403fcc 	andi	r17,r17,255
  805740:	8c40201c 	xori	r17,r17,128
  805744:	8c7fe004 	addi	r17,r17,-128
  805748:	00398f06 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  80574c:	d8c02d15 	stw	r3,180(sp)
  805750:	0039883a 	mov	fp,zero
  805754:	003e3506 	br	80502c <__alt_mem_onchip_mem+0xff78502c>
  805758:	d9002c17 	ldw	r4,176(sp)
  80575c:	d9801e04 	addi	r6,sp,120
  805760:	b80b883a 	mov	r5,r23
  805764:	080a5280 	call	80a528 <__sprint_r>
  805768:	103a281e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  80576c:	d8c02017 	ldw	r3,128(sp)
  805770:	da000404 	addi	r8,sp,16
  805774:	003cd006 	br	804ab8 <__alt_mem_onchip_mem+0xff784ab8>
  805778:	8009883a 	mov	r4,r16
  80577c:	da003d15 	stw	r8,244(sp)
  805780:	0803b6c0 	call	803b6c <strlen>
  805784:	d8802e15 	stw	r2,184(sp)
  805788:	da003d17 	ldw	r8,244(sp)
  80578c:	103c340e 	bge	r2,zero,804860 <__alt_mem_onchip_mem+0xff784860>
  805790:	0005883a 	mov	r2,zero
  805794:	003c3206 	br	804860 <__alt_mem_onchip_mem+0xff784860>
  805798:	d9002c17 	ldw	r4,176(sp)
  80579c:	d9801e04 	addi	r6,sp,120
  8057a0:	b80b883a 	mov	r5,r23
  8057a4:	080a5280 	call	80a528 <__sprint_r>
  8057a8:	103a181e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  8057ac:	d8c02017 	ldw	r3,128(sp)
  8057b0:	d8801f17 	ldw	r2,124(sp)
  8057b4:	da000404 	addi	r8,sp,16
  8057b8:	d9403317 	ldw	r5,204(sp)
  8057bc:	10800044 	addi	r2,r2,1
  8057c0:	44000015 	stw	r16,0(r8)
  8057c4:	28c7883a 	add	r3,r5,r3
  8057c8:	003b7d06 	br	8045c0 <__alt_mem_onchip_mem+0xff7845c0>
  8057cc:	01002074 	movhi	r4,129
  8057d0:	210afc84 	addi	r4,r4,11250
  8057d4:	d9003515 	stw	r4,212(sp)
  8057d8:	003b1406 	br	80442c <__alt_mem_onchip_mem+0xff78442c>
  8057dc:	013fffc4 	movi	r4,-1
  8057e0:	003a3506 	br	8040b8 <__alt_mem_onchip_mem+0xff7840b8>
  8057e4:	0023883a 	mov	r17,zero
  8057e8:	003d9d06 	br	804e60 <__alt_mem_onchip_mem+0xff784e60>
  8057ec:	d9002c17 	ldw	r4,176(sp)
  8057f0:	d9801e04 	addi	r6,sp,120
  8057f4:	b80b883a 	mov	r5,r23
  8057f8:	080a5280 	call	80a528 <__sprint_r>
  8057fc:	103a031e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805800:	d8c02017 	ldw	r3,128(sp)
  805804:	da000404 	addi	r8,sp,16
  805808:	003d9406 	br	804e5c <__alt_mem_onchip_mem+0xff784e5c>
  80580c:	01002074 	movhi	r4,129
  805810:	210af884 	addi	r4,r4,11234
  805814:	d9002b15 	stw	r4,172(sp)
  805818:	d9002b17 	ldw	r4,172(sp)
  80581c:	1c47883a 	add	r3,r3,r17
  805820:	10800044 	addi	r2,r2,1
  805824:	41000015 	stw	r4,0(r8)
  805828:	44400115 	stw	r17,4(r8)
  80582c:	d8c02015 	stw	r3,128(sp)
  805830:	d8801f15 	stw	r2,124(sp)
  805834:	010001c4 	movi	r4,7
  805838:	20bfd716 	blt	r4,r2,805798 <__alt_mem_onchip_mem+0xff785798>
  80583c:	42000204 	addi	r8,r8,8
  805840:	003fdd06 	br	8057b8 <__alt_mem_onchip_mem+0xff7857b8>
  805844:	d9002c17 	ldw	r4,176(sp)
  805848:	d9801e04 	addi	r6,sp,120
  80584c:	b80b883a 	mov	r5,r23
  805850:	080a5280 	call	80a528 <__sprint_r>
  805854:	1039ed1e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805858:	d8802617 	ldw	r2,152(sp)
  80585c:	d8c02017 	ldw	r3,128(sp)
  805860:	da000404 	addi	r8,sp,16
  805864:	003e1006 	br	8050a8 <__alt_mem_onchip_mem+0xff7850a8>
  805868:	00800044 	movi	r2,1
  80586c:	10803fcc 	andi	r2,r2,255
  805870:	00c00044 	movi	r3,1
  805874:	10fa3526 	beq	r2,r3,80414c <__alt_mem_onchip_mem+0xff78414c>
  805878:	00c00084 	movi	r3,2
  80587c:	10fbcb26 	beq	r2,r3,8047ac <__alt_mem_onchip_mem+0xff7847ac>
  805880:	003a8f06 	br	8042c0 <__alt_mem_onchip_mem+0xff7842c0>
  805884:	01002074 	movhi	r4,129
  805888:	210afc84 	addi	r4,r4,11250
  80588c:	d9003515 	stw	r4,212(sp)
  805890:	003b7606 	br	80466c <__alt_mem_onchip_mem+0xff78466c>
  805894:	d8802917 	ldw	r2,164(sp)
  805898:	00c00184 	movi	r3,6
  80589c:	1880012e 	bgeu	r3,r2,8058a4 <___vfprintf_internal_r+0x1ca0>
  8058a0:	1805883a 	mov	r2,r3
  8058a4:	d8802e15 	stw	r2,184(sp)
  8058a8:	1000ef16 	blt	r2,zero,805c68 <___vfprintf_internal_r+0x2064>
  8058ac:	04002074 	movhi	r16,129
  8058b0:	d8802a15 	stw	r2,168(sp)
  8058b4:	dcc02d15 	stw	r19,180(sp)
  8058b8:	d8002915 	stw	zero,164(sp)
  8058bc:	d8003215 	stw	zero,200(sp)
  8058c0:	840af604 	addi	r16,r16,11224
  8058c4:	0039883a 	mov	fp,zero
  8058c8:	003aa206 	br	804354 <__alt_mem_onchip_mem+0xff784354>
  8058cc:	0021883a 	mov	r16,zero
  8058d0:	003e0706 	br	8050f0 <__alt_mem_onchip_mem+0xff7850f0>
  8058d4:	d9002c17 	ldw	r4,176(sp)
  8058d8:	d9801e04 	addi	r6,sp,120
  8058dc:	b80b883a 	mov	r5,r23
  8058e0:	080a5280 	call	80a528 <__sprint_r>
  8058e4:	1039c91e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  8058e8:	d8802617 	ldw	r2,152(sp)
  8058ec:	d9403317 	ldw	r5,204(sp)
  8058f0:	d8c02017 	ldw	r3,128(sp)
  8058f4:	da000404 	addi	r8,sp,16
  8058f8:	2885c83a 	sub	r2,r5,r2
  8058fc:	003dfb06 	br	8050ec <__alt_mem_onchip_mem+0xff7850ec>
  805900:	9080004c 	andi	r2,r18,1
  805904:	103e8f1e 	bne	r2,zero,805344 <__alt_mem_onchip_mem+0xff785344>
  805908:	d8802117 	ldw	r2,132(sp)
  80590c:	003e9e06 	br	805388 <__alt_mem_onchip_mem+0xff785388>
  805910:	1025883a 	mov	r18,r2
  805914:	0039883a 	mov	fp,zero
  805918:	00800084 	movi	r2,2
  80591c:	003fd306 	br	80586c <__alt_mem_onchip_mem+0xff78586c>
  805920:	07000b44 	movi	fp,45
  805924:	df002785 	stb	fp,158(sp)
  805928:	003a4006 	br	80422c <__alt_mem_onchip_mem+0xff78422c>
  80592c:	00c00b44 	movi	r3,45
  805930:	d8c02785 	stb	r3,158(sp)
  805934:	d8802a15 	stw	r2,168(sp)
  805938:	dc802b17 	ldw	r18,172(sp)
  80593c:	d8002915 	stw	zero,164(sp)
  805940:	07000b44 	movi	fp,45
  805944:	003a8006 	br	804348 <__alt_mem_onchip_mem+0xff784348>
  805948:	04002074 	movhi	r16,129
  80594c:	840aeb04 	addi	r16,r16,11180
  805950:	003f4706 	br	805670 <__alt_mem_onchip_mem+0xff785670>
  805954:	d8c02d17 	ldw	r3,180(sp)
  805958:	d9002f17 	ldw	r4,188(sp)
  80595c:	18800017 	ldw	r2,0(r3)
  805960:	18c00104 	addi	r3,r3,4
  805964:	d8c02d15 	stw	r3,180(sp)
  805968:	11000015 	stw	r4,0(r2)
  80596c:	0038dd06 	br	803ce4 <__alt_mem_onchip_mem+0xff783ce4>
  805970:	dd802617 	ldw	r22,152(sp)
  805974:	00bfff44 	movi	r2,-3
  805978:	b0801c16 	blt	r22,r2,8059ec <___vfprintf_internal_r+0x1de8>
  80597c:	d9402917 	ldw	r5,164(sp)
  805980:	2d801a16 	blt	r5,r22,8059ec <___vfprintf_internal_r+0x1de8>
  805984:	dd803215 	stw	r22,200(sp)
  805988:	003e8906 	br	8053b0 <__alt_mem_onchip_mem+0xff7853b0>
  80598c:	01002074 	movhi	r4,129
  805990:	210af884 	addi	r4,r4,11234
  805994:	d9002b15 	stw	r4,172(sp)
  805998:	003c9106 	br	804be0 <__alt_mem_onchip_mem+0xff784be0>
  80599c:	e005883a 	mov	r2,fp
  8059a0:	003e7906 	br	805388 <__alt_mem_onchip_mem+0xff785388>
  8059a4:	d9402917 	ldw	r5,164(sp)
  8059a8:	df002783 	ldbu	fp,158(sp)
  8059ac:	dcc02d15 	stw	r19,180(sp)
  8059b0:	d9402a15 	stw	r5,168(sp)
  8059b4:	d9402e15 	stw	r5,184(sp)
  8059b8:	d8002915 	stw	zero,164(sp)
  8059bc:	d8003215 	stw	zero,200(sp)
  8059c0:	003a5d06 	br	804338 <__alt_mem_onchip_mem+0xff784338>
  8059c4:	9080004c 	andi	r2,r18,1
  8059c8:	0039883a 	mov	fp,zero
  8059cc:	10000426 	beq	r2,zero,8059e0 <___vfprintf_internal_r+0x1ddc>
  8059d0:	00800c04 	movi	r2,48
  8059d4:	dc001dc4 	addi	r16,sp,119
  8059d8:	d8801dc5 	stb	r2,119(sp)
  8059dc:	003b8006 	br	8047e0 <__alt_mem_onchip_mem+0xff7847e0>
  8059e0:	d8002e15 	stw	zero,184(sp)
  8059e4:	dc001e04 	addi	r16,sp,120
  8059e8:	003a4d06 	br	804320 <__alt_mem_onchip_mem+0xff784320>
  8059ec:	8c7fff84 	addi	r17,r17,-2
  8059f0:	b5bfffc4 	addi	r22,r22,-1
  8059f4:	dd802615 	stw	r22,152(sp)
  8059f8:	dc4022c5 	stb	r17,139(sp)
  8059fc:	b000bf16 	blt	r22,zero,805cfc <___vfprintf_internal_r+0x20f8>
  805a00:	00800ac4 	movi	r2,43
  805a04:	d8802305 	stb	r2,140(sp)
  805a08:	00800244 	movi	r2,9
  805a0c:	15807016 	blt	r2,r22,805bd0 <___vfprintf_internal_r+0x1fcc>
  805a10:	00800c04 	movi	r2,48
  805a14:	b5800c04 	addi	r22,r22,48
  805a18:	d8802345 	stb	r2,141(sp)
  805a1c:	dd802385 	stb	r22,142(sp)
  805a20:	d88023c4 	addi	r2,sp,143
  805a24:	df0022c4 	addi	fp,sp,139
  805a28:	d8c03317 	ldw	r3,204(sp)
  805a2c:	1739c83a 	sub	fp,r2,fp
  805a30:	d9003317 	ldw	r4,204(sp)
  805a34:	e0c7883a 	add	r3,fp,r3
  805a38:	df003a15 	stw	fp,232(sp)
  805a3c:	d8c02e15 	stw	r3,184(sp)
  805a40:	00800044 	movi	r2,1
  805a44:	1100b30e 	bge	r2,r4,805d14 <___vfprintf_internal_r+0x2110>
  805a48:	d8c02e17 	ldw	r3,184(sp)
  805a4c:	18c00044 	addi	r3,r3,1
  805a50:	d8c02e15 	stw	r3,184(sp)
  805a54:	1805883a 	mov	r2,r3
  805a58:	1800ac16 	blt	r3,zero,805d0c <___vfprintf_internal_r+0x2108>
  805a5c:	d8003215 	stw	zero,200(sp)
  805a60:	003e5d06 	br	8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805a64:	d9002c17 	ldw	r4,176(sp)
  805a68:	d9801e04 	addi	r6,sp,120
  805a6c:	b80b883a 	mov	r5,r23
  805a70:	080a5280 	call	80a528 <__sprint_r>
  805a74:	1039651e 	bne	r2,zero,80400c <__alt_mem_onchip_mem+0xff78400c>
  805a78:	dc402617 	ldw	r17,152(sp)
  805a7c:	d8c02017 	ldw	r3,128(sp)
  805a80:	d8801f17 	ldw	r2,124(sp)
  805a84:	da000404 	addi	r8,sp,16
  805a88:	003ed606 	br	8055e4 <__alt_mem_onchip_mem+0xff7855e4>
  805a8c:	582b883a 	mov	r21,r11
  805a90:	d8002915 	stw	zero,164(sp)
  805a94:	0038bd06 	br	803d8c <__alt_mem_onchip_mem+0xff783d8c>
  805a98:	d8802917 	ldw	r2,164(sp)
  805a9c:	103e071e 	bne	r2,zero,8052bc <__alt_mem_onchip_mem+0xff7852bc>
  805aa0:	dc002915 	stw	r16,164(sp)
  805aa4:	003e0506 	br	8052bc <__alt_mem_onchip_mem+0xff7852bc>
  805aa8:	d9002917 	ldw	r4,164(sp)
  805aac:	20c00044 	addi	r3,r4,1
  805ab0:	003e0f06 	br	8052f0 <__alt_mem_onchip_mem+0xff7852f0>
  805ab4:	01400184 	movi	r5,6
  805ab8:	d9402915 	stw	r5,164(sp)
  805abc:	003dff06 	br	8052bc <__alt_mem_onchip_mem+0xff7852bc>
  805ac0:	d8802104 	addi	r2,sp,132
  805ac4:	d8800315 	stw	r2,12(sp)
  805ac8:	d8802504 	addi	r2,sp,148
  805acc:	d8800215 	stw	r2,8(sp)
  805ad0:	d8802604 	addi	r2,sp,152
  805ad4:	d8800115 	stw	r2,4(sp)
  805ad8:	d8802917 	ldw	r2,164(sp)
  805adc:	d9403617 	ldw	r5,216(sp)
  805ae0:	d9002c17 	ldw	r4,176(sp)
  805ae4:	d8800015 	stw	r2,0(sp)
  805ae8:	01c000c4 	movi	r7,3
  805aec:	980d883a 	mov	r6,r19
  805af0:	da003d15 	stw	r8,244(sp)
  805af4:	08064340 	call	806434 <_dtoa_r>
  805af8:	d8c02917 	ldw	r3,164(sp)
  805afc:	da003d17 	ldw	r8,244(sp)
  805b00:	1021883a 	mov	r16,r2
  805b04:	10f9883a 	add	fp,r2,r3
  805b08:	81000007 	ldb	r4,0(r16)
  805b0c:	00800c04 	movi	r2,48
  805b10:	20805e26 	beq	r4,r2,805c8c <___vfprintf_internal_r+0x2088>
  805b14:	d8c02617 	ldw	r3,152(sp)
  805b18:	e0f9883a 	add	fp,fp,r3
  805b1c:	003e0a06 	br	805348 <__alt_mem_onchip_mem+0xff785348>
  805b20:	00c00b44 	movi	r3,45
  805b24:	24e0003c 	xorhi	r19,r4,32768
  805b28:	d8c02a05 	stb	r3,168(sp)
  805b2c:	003de906 	br	8052d4 <__alt_mem_onchip_mem+0xff7852d4>
  805b30:	d8c03217 	ldw	r3,200(sp)
  805b34:	00c07a0e 	bge	zero,r3,805d20 <___vfprintf_internal_r+0x211c>
  805b38:	00800044 	movi	r2,1
  805b3c:	d9003317 	ldw	r4,204(sp)
  805b40:	1105883a 	add	r2,r2,r4
  805b44:	d8802e15 	stw	r2,184(sp)
  805b48:	10004e16 	blt	r2,zero,805c84 <___vfprintf_internal_r+0x2080>
  805b4c:	044019c4 	movi	r17,103
  805b50:	003e2106 	br	8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805b54:	d9002917 	ldw	r4,164(sp)
  805b58:	d8802104 	addi	r2,sp,132
  805b5c:	d8800315 	stw	r2,12(sp)
  805b60:	d9000015 	stw	r4,0(sp)
  805b64:	d8802504 	addi	r2,sp,148
  805b68:	d9403617 	ldw	r5,216(sp)
  805b6c:	d9002c17 	ldw	r4,176(sp)
  805b70:	d8800215 	stw	r2,8(sp)
  805b74:	d8802604 	addi	r2,sp,152
  805b78:	d8800115 	stw	r2,4(sp)
  805b7c:	01c000c4 	movi	r7,3
  805b80:	980d883a 	mov	r6,r19
  805b84:	da003d15 	stw	r8,244(sp)
  805b88:	08064340 	call	806434 <_dtoa_r>
  805b8c:	d8c02917 	ldw	r3,164(sp)
  805b90:	da003d17 	ldw	r8,244(sp)
  805b94:	1021883a 	mov	r16,r2
  805b98:	00801184 	movi	r2,70
  805b9c:	80f9883a 	add	fp,r16,r3
  805ba0:	88bfd926 	beq	r17,r2,805b08 <__alt_mem_onchip_mem+0xff785b08>
  805ba4:	003de806 	br	805348 <__alt_mem_onchip_mem+0xff785348>
  805ba8:	d9002917 	ldw	r4,164(sp)
  805bac:	00c04d0e 	bge	zero,r3,805ce4 <___vfprintf_internal_r+0x20e0>
  805bb0:	2000441e 	bne	r4,zero,805cc4 <___vfprintf_internal_r+0x20c0>
  805bb4:	9480004c 	andi	r18,r18,1
  805bb8:	9000421e 	bne	r18,zero,805cc4 <___vfprintf_internal_r+0x20c0>
  805bbc:	1805883a 	mov	r2,r3
  805bc0:	18007016 	blt	r3,zero,805d84 <___vfprintf_internal_r+0x2180>
  805bc4:	d8c03217 	ldw	r3,200(sp)
  805bc8:	d8c02e15 	stw	r3,184(sp)
  805bcc:	003e0206 	br	8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805bd0:	df0022c4 	addi	fp,sp,139
  805bd4:	dc002915 	stw	r16,164(sp)
  805bd8:	4027883a 	mov	r19,r8
  805bdc:	e021883a 	mov	r16,fp
  805be0:	b009883a 	mov	r4,r22
  805be4:	01400284 	movi	r5,10
  805be8:	08010200 	call	801020 <__modsi3>
  805bec:	10800c04 	addi	r2,r2,48
  805bf0:	843fffc4 	addi	r16,r16,-1
  805bf4:	b009883a 	mov	r4,r22
  805bf8:	01400284 	movi	r5,10
  805bfc:	80800005 	stb	r2,0(r16)
  805c00:	0800f9c0 	call	800f9c <__divsi3>
  805c04:	102d883a 	mov	r22,r2
  805c08:	00800244 	movi	r2,9
  805c0c:	15bff416 	blt	r2,r22,805be0 <__alt_mem_onchip_mem+0xff785be0>
  805c10:	9811883a 	mov	r8,r19
  805c14:	b0800c04 	addi	r2,r22,48
  805c18:	8027883a 	mov	r19,r16
  805c1c:	997fffc4 	addi	r5,r19,-1
  805c20:	98bfffc5 	stb	r2,-1(r19)
  805c24:	dc002917 	ldw	r16,164(sp)
  805c28:	2f006a2e 	bgeu	r5,fp,805dd4 <___vfprintf_internal_r+0x21d0>
  805c2c:	d9c02384 	addi	r7,sp,142
  805c30:	3ccfc83a 	sub	r7,r7,r19
  805c34:	d9002344 	addi	r4,sp,141
  805c38:	e1cf883a 	add	r7,fp,r7
  805c3c:	00000106 	br	805c44 <___vfprintf_internal_r+0x2040>
  805c40:	28800003 	ldbu	r2,0(r5)
  805c44:	20800005 	stb	r2,0(r4)
  805c48:	21000044 	addi	r4,r4,1
  805c4c:	29400044 	addi	r5,r5,1
  805c50:	393ffb1e 	bne	r7,r4,805c40 <__alt_mem_onchip_mem+0xff785c40>
  805c54:	d8802304 	addi	r2,sp,140
  805c58:	14c5c83a 	sub	r2,r2,r19
  805c5c:	d8c02344 	addi	r3,sp,141
  805c60:	1885883a 	add	r2,r3,r2
  805c64:	003f7006 	br	805a28 <__alt_mem_onchip_mem+0xff785a28>
  805c68:	0005883a 	mov	r2,zero
  805c6c:	003f0f06 	br	8058ac <__alt_mem_onchip_mem+0xff7858ac>
  805c70:	d8c03217 	ldw	r3,200(sp)
  805c74:	18c00044 	addi	r3,r3,1
  805c78:	d8c02e15 	stw	r3,184(sp)
  805c7c:	1805883a 	mov	r2,r3
  805c80:	183fb20e 	bge	r3,zero,805b4c <__alt_mem_onchip_mem+0xff785b4c>
  805c84:	0005883a 	mov	r2,zero
  805c88:	003fb006 	br	805b4c <__alt_mem_onchip_mem+0xff785b4c>
  805c8c:	d9003617 	ldw	r4,216(sp)
  805c90:	000d883a 	mov	r6,zero
  805c94:	000f883a 	mov	r7,zero
  805c98:	980b883a 	mov	r5,r19
  805c9c:	d8c03c15 	stw	r3,240(sp)
  805ca0:	da003d15 	stw	r8,244(sp)
  805ca4:	080d2840 	call	80d284 <__eqdf2>
  805ca8:	d8c03c17 	ldw	r3,240(sp)
  805cac:	da003d17 	ldw	r8,244(sp)
  805cb0:	103f9826 	beq	r2,zero,805b14 <__alt_mem_onchip_mem+0xff785b14>
  805cb4:	00800044 	movi	r2,1
  805cb8:	10c7c83a 	sub	r3,r2,r3
  805cbc:	d8c02615 	stw	r3,152(sp)
  805cc0:	003f9506 	br	805b18 <__alt_mem_onchip_mem+0xff785b18>
  805cc4:	d9002917 	ldw	r4,164(sp)
  805cc8:	d8c03217 	ldw	r3,200(sp)
  805ccc:	20800044 	addi	r2,r4,1
  805cd0:	1885883a 	add	r2,r3,r2
  805cd4:	d8802e15 	stw	r2,184(sp)
  805cd8:	103dbf0e 	bge	r2,zero,8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805cdc:	0005883a 	mov	r2,zero
  805ce0:	003dbd06 	br	8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805ce4:	2000211e 	bne	r4,zero,805d6c <___vfprintf_internal_r+0x2168>
  805ce8:	9480004c 	andi	r18,r18,1
  805cec:	90001f1e 	bne	r18,zero,805d6c <___vfprintf_internal_r+0x2168>
  805cf0:	00800044 	movi	r2,1
  805cf4:	d8802e15 	stw	r2,184(sp)
  805cf8:	003db706 	br	8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805cfc:	00800b44 	movi	r2,45
  805d00:	05adc83a 	sub	r22,zero,r22
  805d04:	d8802305 	stb	r2,140(sp)
  805d08:	003f3f06 	br	805a08 <__alt_mem_onchip_mem+0xff785a08>
  805d0c:	0005883a 	mov	r2,zero
  805d10:	003f5206 	br	805a5c <__alt_mem_onchip_mem+0xff785a5c>
  805d14:	90a4703a 	and	r18,r18,r2
  805d18:	903f4e26 	beq	r18,zero,805a54 <__alt_mem_onchip_mem+0xff785a54>
  805d1c:	003f4a06 	br	805a48 <__alt_mem_onchip_mem+0xff785a48>
  805d20:	00800084 	movi	r2,2
  805d24:	10c5c83a 	sub	r2,r2,r3
  805d28:	003f8406 	br	805b3c <__alt_mem_onchip_mem+0xff785b3c>
  805d2c:	d8802d17 	ldw	r2,180(sp)
  805d30:	d9002d17 	ldw	r4,180(sp)
  805d34:	ac400043 	ldbu	r17,1(r21)
  805d38:	10800017 	ldw	r2,0(r2)
  805d3c:	582b883a 	mov	r21,r11
  805d40:	d8802915 	stw	r2,164(sp)
  805d44:	20800104 	addi	r2,r4,4
  805d48:	d9002917 	ldw	r4,164(sp)
  805d4c:	d8802d15 	stw	r2,180(sp)
  805d50:	203e7a0e 	bge	r4,zero,80573c <__alt_mem_onchip_mem+0xff78573c>
  805d54:	8c403fcc 	andi	r17,r17,255
  805d58:	00bfffc4 	movi	r2,-1
  805d5c:	8c40201c 	xori	r17,r17,128
  805d60:	d8802915 	stw	r2,164(sp)
  805d64:	8c7fe004 	addi	r17,r17,-128
  805d68:	00380706 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  805d6c:	d8c02917 	ldw	r3,164(sp)
  805d70:	18c00084 	addi	r3,r3,2
  805d74:	d8c02e15 	stw	r3,184(sp)
  805d78:	1805883a 	mov	r2,r3
  805d7c:	183d960e 	bge	r3,zero,8053d8 <__alt_mem_onchip_mem+0xff7853d8>
  805d80:	003fd606 	br	805cdc <__alt_mem_onchip_mem+0xff785cdc>
  805d84:	0005883a 	mov	r2,zero
  805d88:	003f8e06 	br	805bc4 <__alt_mem_onchip_mem+0xff785bc4>
  805d8c:	9080004c 	andi	r2,r18,1
  805d90:	103f811e 	bne	r2,zero,805b98 <__alt_mem_onchip_mem+0xff785b98>
  805d94:	d8802117 	ldw	r2,132(sp)
  805d98:	1405c83a 	sub	r2,r2,r16
  805d9c:	d8803315 	stw	r2,204(sp)
  805da0:	b47ef326 	beq	r22,r17,805970 <__alt_mem_onchip_mem+0xff785970>
  805da4:	dd802617 	ldw	r22,152(sp)
  805da8:	003f1106 	br	8059f0 <__alt_mem_onchip_mem+0xff7859f0>
  805dac:	d9c02785 	stb	r7,158(sp)
  805db0:	00390406 	br	8041c4 <__alt_mem_onchip_mem+0xff7841c4>
  805db4:	d9c02785 	stb	r7,158(sp)
  805db8:	0038d306 	br	804108 <__alt_mem_onchip_mem+0xff784108>
  805dbc:	d9c02785 	stb	r7,158(sp)
  805dc0:	003a6106 	br	804748 <__alt_mem_onchip_mem+0xff784748>
  805dc4:	d9c02785 	stb	r7,158(sp)
  805dc8:	003af806 	br	8049ac <__alt_mem_onchip_mem+0xff7849ac>
  805dcc:	0005883a 	mov	r2,zero
  805dd0:	003d7e06 	br	8053cc <__alt_mem_onchip_mem+0xff7853cc>
  805dd4:	d8802344 	addi	r2,sp,141
  805dd8:	003f1306 	br	805a28 <__alt_mem_onchip_mem+0xff785a28>
  805ddc:	d9c02785 	stb	r7,158(sp)
  805de0:	00392306 	br	804270 <__alt_mem_onchip_mem+0xff784270>
  805de4:	d9c02785 	stb	r7,158(sp)
  805de8:	003aa906 	br	804890 <__alt_mem_onchip_mem+0xff784890>
  805dec:	d9c02785 	stb	r7,158(sp)
  805df0:	003a3d06 	br	8046e8 <__alt_mem_onchip_mem+0xff7846e8>
  805df4:	d9c02785 	stb	r7,158(sp)
  805df8:	003aca06 	br	804924 <__alt_mem_onchip_mem+0xff784924>

00805dfc <__vfprintf_internal>:
  805dfc:	00802074 	movhi	r2,129
  805e00:	10933e04 	addi	r2,r2,19704
  805e04:	300f883a 	mov	r7,r6
  805e08:	280d883a 	mov	r6,r5
  805e0c:	200b883a 	mov	r5,r4
  805e10:	11000017 	ldw	r4,0(r2)
  805e14:	0803c041 	jmpi	803c04 <___vfprintf_internal_r>

00805e18 <__sbprintf>:
  805e18:	2880030b 	ldhu	r2,12(r5)
  805e1c:	2ac01917 	ldw	r11,100(r5)
  805e20:	2a80038b 	ldhu	r10,14(r5)
  805e24:	2a400717 	ldw	r9,28(r5)
  805e28:	2a000917 	ldw	r8,36(r5)
  805e2c:	defee204 	addi	sp,sp,-1144
  805e30:	00c10004 	movi	r3,1024
  805e34:	dc011a15 	stw	r16,1128(sp)
  805e38:	10bfff4c 	andi	r2,r2,65533
  805e3c:	2821883a 	mov	r16,r5
  805e40:	d8cb883a 	add	r5,sp,r3
  805e44:	dc811c15 	stw	r18,1136(sp)
  805e48:	dc411b15 	stw	r17,1132(sp)
  805e4c:	dfc11d15 	stw	ra,1140(sp)
  805e50:	2025883a 	mov	r18,r4
  805e54:	d881030d 	sth	r2,1036(sp)
  805e58:	dac11915 	stw	r11,1124(sp)
  805e5c:	da81038d 	sth	r10,1038(sp)
  805e60:	da410715 	stw	r9,1052(sp)
  805e64:	da010915 	stw	r8,1060(sp)
  805e68:	dec10015 	stw	sp,1024(sp)
  805e6c:	dec10415 	stw	sp,1040(sp)
  805e70:	d8c10215 	stw	r3,1032(sp)
  805e74:	d8c10515 	stw	r3,1044(sp)
  805e78:	d8010615 	stw	zero,1048(sp)
  805e7c:	0803c040 	call	803c04 <___vfprintf_internal_r>
  805e80:	1023883a 	mov	r17,r2
  805e84:	10000416 	blt	r2,zero,805e98 <__sbprintf+0x80>
  805e88:	d9410004 	addi	r5,sp,1024
  805e8c:	9009883a 	mov	r4,r18
  805e90:	0807ddc0 	call	807ddc <_fflush_r>
  805e94:	10000d1e 	bne	r2,zero,805ecc <__sbprintf+0xb4>
  805e98:	d881030b 	ldhu	r2,1036(sp)
  805e9c:	1080100c 	andi	r2,r2,64
  805ea0:	10000326 	beq	r2,zero,805eb0 <__sbprintf+0x98>
  805ea4:	8080030b 	ldhu	r2,12(r16)
  805ea8:	10801014 	ori	r2,r2,64
  805eac:	8080030d 	sth	r2,12(r16)
  805eb0:	8805883a 	mov	r2,r17
  805eb4:	dfc11d17 	ldw	ra,1140(sp)
  805eb8:	dc811c17 	ldw	r18,1136(sp)
  805ebc:	dc411b17 	ldw	r17,1132(sp)
  805ec0:	dc011a17 	ldw	r16,1128(sp)
  805ec4:	dec11e04 	addi	sp,sp,1144
  805ec8:	f800283a 	ret
  805ecc:	047fffc4 	movi	r17,-1
  805ed0:	003ff106 	br	805e98 <__alt_mem_onchip_mem+0xff785e98>

00805ed4 <__swbuf_r>:
  805ed4:	defffb04 	addi	sp,sp,-20
  805ed8:	dcc00315 	stw	r19,12(sp)
  805edc:	dc800215 	stw	r18,8(sp)
  805ee0:	dc000015 	stw	r16,0(sp)
  805ee4:	dfc00415 	stw	ra,16(sp)
  805ee8:	dc400115 	stw	r17,4(sp)
  805eec:	2025883a 	mov	r18,r4
  805ef0:	2827883a 	mov	r19,r5
  805ef4:	3021883a 	mov	r16,r6
  805ef8:	20000226 	beq	r4,zero,805f04 <__swbuf_r+0x30>
  805efc:	20800e17 	ldw	r2,56(r4)
  805f00:	10004226 	beq	r2,zero,80600c <__swbuf_r+0x138>
  805f04:	80800617 	ldw	r2,24(r16)
  805f08:	8100030b 	ldhu	r4,12(r16)
  805f0c:	80800215 	stw	r2,8(r16)
  805f10:	2080020c 	andi	r2,r4,8
  805f14:	10003626 	beq	r2,zero,805ff0 <__swbuf_r+0x11c>
  805f18:	80c00417 	ldw	r3,16(r16)
  805f1c:	18003426 	beq	r3,zero,805ff0 <__swbuf_r+0x11c>
  805f20:	2088000c 	andi	r2,r4,8192
  805f24:	9c403fcc 	andi	r17,r19,255
  805f28:	10001a26 	beq	r2,zero,805f94 <__swbuf_r+0xc0>
  805f2c:	80800017 	ldw	r2,0(r16)
  805f30:	81000517 	ldw	r4,20(r16)
  805f34:	10c7c83a 	sub	r3,r2,r3
  805f38:	1900200e 	bge	r3,r4,805fbc <__swbuf_r+0xe8>
  805f3c:	18c00044 	addi	r3,r3,1
  805f40:	81000217 	ldw	r4,8(r16)
  805f44:	11400044 	addi	r5,r2,1
  805f48:	81400015 	stw	r5,0(r16)
  805f4c:	213fffc4 	addi	r4,r4,-1
  805f50:	81000215 	stw	r4,8(r16)
  805f54:	14c00005 	stb	r19,0(r2)
  805f58:	80800517 	ldw	r2,20(r16)
  805f5c:	10c01e26 	beq	r2,r3,805fd8 <__swbuf_r+0x104>
  805f60:	8080030b 	ldhu	r2,12(r16)
  805f64:	1080004c 	andi	r2,r2,1
  805f68:	10000226 	beq	r2,zero,805f74 <__swbuf_r+0xa0>
  805f6c:	00800284 	movi	r2,10
  805f70:	88801926 	beq	r17,r2,805fd8 <__swbuf_r+0x104>
  805f74:	8805883a 	mov	r2,r17
  805f78:	dfc00417 	ldw	ra,16(sp)
  805f7c:	dcc00317 	ldw	r19,12(sp)
  805f80:	dc800217 	ldw	r18,8(sp)
  805f84:	dc400117 	ldw	r17,4(sp)
  805f88:	dc000017 	ldw	r16,0(sp)
  805f8c:	dec00504 	addi	sp,sp,20
  805f90:	f800283a 	ret
  805f94:	81401917 	ldw	r5,100(r16)
  805f98:	00b7ffc4 	movi	r2,-8193
  805f9c:	21080014 	ori	r4,r4,8192
  805fa0:	2884703a 	and	r2,r5,r2
  805fa4:	80801915 	stw	r2,100(r16)
  805fa8:	80800017 	ldw	r2,0(r16)
  805fac:	8100030d 	sth	r4,12(r16)
  805fb0:	81000517 	ldw	r4,20(r16)
  805fb4:	10c7c83a 	sub	r3,r2,r3
  805fb8:	193fe016 	blt	r3,r4,805f3c <__alt_mem_onchip_mem+0xff785f3c>
  805fbc:	800b883a 	mov	r5,r16
  805fc0:	9009883a 	mov	r4,r18
  805fc4:	0807ddc0 	call	807ddc <_fflush_r>
  805fc8:	1000071e 	bne	r2,zero,805fe8 <__swbuf_r+0x114>
  805fcc:	80800017 	ldw	r2,0(r16)
  805fd0:	00c00044 	movi	r3,1
  805fd4:	003fda06 	br	805f40 <__alt_mem_onchip_mem+0xff785f40>
  805fd8:	800b883a 	mov	r5,r16
  805fdc:	9009883a 	mov	r4,r18
  805fe0:	0807ddc0 	call	807ddc <_fflush_r>
  805fe4:	103fe326 	beq	r2,zero,805f74 <__alt_mem_onchip_mem+0xff785f74>
  805fe8:	00bfffc4 	movi	r2,-1
  805fec:	003fe206 	br	805f78 <__alt_mem_onchip_mem+0xff785f78>
  805ff0:	800b883a 	mov	r5,r16
  805ff4:	9009883a 	mov	r4,r18
  805ff8:	080608c0 	call	80608c <__swsetup_r>
  805ffc:	103ffa1e 	bne	r2,zero,805fe8 <__alt_mem_onchip_mem+0xff785fe8>
  806000:	8100030b 	ldhu	r4,12(r16)
  806004:	80c00417 	ldw	r3,16(r16)
  806008:	003fc506 	br	805f20 <__alt_mem_onchip_mem+0xff785f20>
  80600c:	0801fc00 	call	801fc0 <__sinit>
  806010:	003fbc06 	br	805f04 <__alt_mem_onchip_mem+0xff785f04>

00806014 <__swbuf>:
  806014:	00802074 	movhi	r2,129
  806018:	10933e04 	addi	r2,r2,19704
  80601c:	280d883a 	mov	r6,r5
  806020:	200b883a 	mov	r5,r4
  806024:	11000017 	ldw	r4,0(r2)
  806028:	0805ed41 	jmpi	805ed4 <__swbuf_r>

0080602c <_write_r>:
  80602c:	defffd04 	addi	sp,sp,-12
  806030:	2805883a 	mov	r2,r5
  806034:	dc000015 	stw	r16,0(sp)
  806038:	04002074 	movhi	r16,129
  80603c:	dc400115 	stw	r17,4(sp)
  806040:	300b883a 	mov	r5,r6
  806044:	841aa004 	addi	r16,r16,27264
  806048:	2023883a 	mov	r17,r4
  80604c:	380d883a 	mov	r6,r7
  806050:	1009883a 	mov	r4,r2
  806054:	dfc00215 	stw	ra,8(sp)
  806058:	80000015 	stw	zero,0(r16)
  80605c:	080f5080 	call	80f508 <write>
  806060:	00ffffc4 	movi	r3,-1
  806064:	10c00526 	beq	r2,r3,80607c <_write_r+0x50>
  806068:	dfc00217 	ldw	ra,8(sp)
  80606c:	dc400117 	ldw	r17,4(sp)
  806070:	dc000017 	ldw	r16,0(sp)
  806074:	dec00304 	addi	sp,sp,12
  806078:	f800283a 	ret
  80607c:	80c00017 	ldw	r3,0(r16)
  806080:	183ff926 	beq	r3,zero,806068 <__alt_mem_onchip_mem+0xff786068>
  806084:	88c00015 	stw	r3,0(r17)
  806088:	003ff706 	br	806068 <__alt_mem_onchip_mem+0xff786068>

0080608c <__swsetup_r>:
  80608c:	00802074 	movhi	r2,129
  806090:	defffd04 	addi	sp,sp,-12
  806094:	10933e04 	addi	r2,r2,19704
  806098:	dc400115 	stw	r17,4(sp)
  80609c:	2023883a 	mov	r17,r4
  8060a0:	11000017 	ldw	r4,0(r2)
  8060a4:	dc000015 	stw	r16,0(sp)
  8060a8:	dfc00215 	stw	ra,8(sp)
  8060ac:	2821883a 	mov	r16,r5
  8060b0:	20000226 	beq	r4,zero,8060bc <__swsetup_r+0x30>
  8060b4:	20800e17 	ldw	r2,56(r4)
  8060b8:	10003126 	beq	r2,zero,806180 <__swsetup_r+0xf4>
  8060bc:	8080030b 	ldhu	r2,12(r16)
  8060c0:	10c0020c 	andi	r3,r2,8
  8060c4:	1009883a 	mov	r4,r2
  8060c8:	18000f26 	beq	r3,zero,806108 <__swsetup_r+0x7c>
  8060cc:	80c00417 	ldw	r3,16(r16)
  8060d0:	18001526 	beq	r3,zero,806128 <__swsetup_r+0x9c>
  8060d4:	1100004c 	andi	r4,r2,1
  8060d8:	20001c1e 	bne	r4,zero,80614c <__swsetup_r+0xc0>
  8060dc:	1080008c 	andi	r2,r2,2
  8060e0:	1000291e 	bne	r2,zero,806188 <__swsetup_r+0xfc>
  8060e4:	80800517 	ldw	r2,20(r16)
  8060e8:	80800215 	stw	r2,8(r16)
  8060ec:	18001c26 	beq	r3,zero,806160 <__swsetup_r+0xd4>
  8060f0:	0005883a 	mov	r2,zero
  8060f4:	dfc00217 	ldw	ra,8(sp)
  8060f8:	dc400117 	ldw	r17,4(sp)
  8060fc:	dc000017 	ldw	r16,0(sp)
  806100:	dec00304 	addi	sp,sp,12
  806104:	f800283a 	ret
  806108:	2080040c 	andi	r2,r4,16
  80610c:	10002e26 	beq	r2,zero,8061c8 <__swsetup_r+0x13c>
  806110:	2080010c 	andi	r2,r4,4
  806114:	10001e1e 	bne	r2,zero,806190 <__swsetup_r+0x104>
  806118:	80c00417 	ldw	r3,16(r16)
  80611c:	20800214 	ori	r2,r4,8
  806120:	8080030d 	sth	r2,12(r16)
  806124:	183feb1e 	bne	r3,zero,8060d4 <__alt_mem_onchip_mem+0xff7860d4>
  806128:	1100a00c 	andi	r4,r2,640
  80612c:	01408004 	movi	r5,512
  806130:	217fe826 	beq	r4,r5,8060d4 <__alt_mem_onchip_mem+0xff7860d4>
  806134:	800b883a 	mov	r5,r16
  806138:	8809883a 	mov	r4,r17
  80613c:	080296c0 	call	80296c <__smakebuf_r>
  806140:	8080030b 	ldhu	r2,12(r16)
  806144:	80c00417 	ldw	r3,16(r16)
  806148:	003fe206 	br	8060d4 <__alt_mem_onchip_mem+0xff7860d4>
  80614c:	80800517 	ldw	r2,20(r16)
  806150:	80000215 	stw	zero,8(r16)
  806154:	0085c83a 	sub	r2,zero,r2
  806158:	80800615 	stw	r2,24(r16)
  80615c:	183fe41e 	bne	r3,zero,8060f0 <__alt_mem_onchip_mem+0xff7860f0>
  806160:	80c0030b 	ldhu	r3,12(r16)
  806164:	0005883a 	mov	r2,zero
  806168:	1900200c 	andi	r4,r3,128
  80616c:	203fe126 	beq	r4,zero,8060f4 <__alt_mem_onchip_mem+0xff7860f4>
  806170:	18c01014 	ori	r3,r3,64
  806174:	80c0030d 	sth	r3,12(r16)
  806178:	00bfffc4 	movi	r2,-1
  80617c:	003fdd06 	br	8060f4 <__alt_mem_onchip_mem+0xff7860f4>
  806180:	0801fc00 	call	801fc0 <__sinit>
  806184:	003fcd06 	br	8060bc <__alt_mem_onchip_mem+0xff7860bc>
  806188:	0005883a 	mov	r2,zero
  80618c:	003fd606 	br	8060e8 <__alt_mem_onchip_mem+0xff7860e8>
  806190:	81400c17 	ldw	r5,48(r16)
  806194:	28000626 	beq	r5,zero,8061b0 <__swsetup_r+0x124>
  806198:	80801004 	addi	r2,r16,64
  80619c:	28800326 	beq	r5,r2,8061ac <__swsetup_r+0x120>
  8061a0:	8809883a 	mov	r4,r17
  8061a4:	08080380 	call	808038 <_free_r>
  8061a8:	8100030b 	ldhu	r4,12(r16)
  8061ac:	80000c15 	stw	zero,48(r16)
  8061b0:	80c00417 	ldw	r3,16(r16)
  8061b4:	00bff6c4 	movi	r2,-37
  8061b8:	1108703a 	and	r4,r2,r4
  8061bc:	80000115 	stw	zero,4(r16)
  8061c0:	80c00015 	stw	r3,0(r16)
  8061c4:	003fd506 	br	80611c <__alt_mem_onchip_mem+0xff78611c>
  8061c8:	00800244 	movi	r2,9
  8061cc:	88800015 	stw	r2,0(r17)
  8061d0:	20801014 	ori	r2,r4,64
  8061d4:	8080030d 	sth	r2,12(r16)
  8061d8:	00bfffc4 	movi	r2,-1
  8061dc:	003fc506 	br	8060f4 <__alt_mem_onchip_mem+0xff7860f4>

008061e0 <_close_r>:
  8061e0:	defffd04 	addi	sp,sp,-12
  8061e4:	dc000015 	stw	r16,0(sp)
  8061e8:	04002074 	movhi	r16,129
  8061ec:	dc400115 	stw	r17,4(sp)
  8061f0:	841aa004 	addi	r16,r16,27264
  8061f4:	2023883a 	mov	r17,r4
  8061f8:	2809883a 	mov	r4,r5
  8061fc:	dfc00215 	stw	ra,8(sp)
  806200:	80000015 	stw	zero,0(r16)
  806204:	080e7800 	call	80e780 <close>
  806208:	00ffffc4 	movi	r3,-1
  80620c:	10c00526 	beq	r2,r3,806224 <_close_r+0x44>
  806210:	dfc00217 	ldw	ra,8(sp)
  806214:	dc400117 	ldw	r17,4(sp)
  806218:	dc000017 	ldw	r16,0(sp)
  80621c:	dec00304 	addi	sp,sp,12
  806220:	f800283a 	ret
  806224:	80c00017 	ldw	r3,0(r16)
  806228:	183ff926 	beq	r3,zero,806210 <__alt_mem_onchip_mem+0xff786210>
  80622c:	88c00015 	stw	r3,0(r17)
  806230:	003ff706 	br	806210 <__alt_mem_onchip_mem+0xff786210>

00806234 <quorem>:
  806234:	defff704 	addi	sp,sp,-36
  806238:	dc800215 	stw	r18,8(sp)
  80623c:	20800417 	ldw	r2,16(r4)
  806240:	2c800417 	ldw	r18,16(r5)
  806244:	dfc00815 	stw	ra,32(sp)
  806248:	ddc00715 	stw	r23,28(sp)
  80624c:	dd800615 	stw	r22,24(sp)
  806250:	dd400515 	stw	r21,20(sp)
  806254:	dd000415 	stw	r20,16(sp)
  806258:	dcc00315 	stw	r19,12(sp)
  80625c:	dc400115 	stw	r17,4(sp)
  806260:	dc000015 	stw	r16,0(sp)
  806264:	14807116 	blt	r2,r18,80642c <quorem+0x1f8>
  806268:	94bfffc4 	addi	r18,r18,-1
  80626c:	94ad883a 	add	r22,r18,r18
  806270:	b5ad883a 	add	r22,r22,r22
  806274:	2c400504 	addi	r17,r5,20
  806278:	8da9883a 	add	r20,r17,r22
  80627c:	25400504 	addi	r21,r4,20
  806280:	282f883a 	mov	r23,r5
  806284:	adad883a 	add	r22,r21,r22
  806288:	a1400017 	ldw	r5,0(r20)
  80628c:	2021883a 	mov	r16,r4
  806290:	b1000017 	ldw	r4,0(r22)
  806294:	29400044 	addi	r5,r5,1
  806298:	08010940 	call	801094 <__udivsi3>
  80629c:	1027883a 	mov	r19,r2
  8062a0:	10002c26 	beq	r2,zero,806354 <quorem+0x120>
  8062a4:	a813883a 	mov	r9,r21
  8062a8:	880b883a 	mov	r5,r17
  8062ac:	0009883a 	mov	r4,zero
  8062b0:	000d883a 	mov	r6,zero
  8062b4:	2a000017 	ldw	r8,0(r5)
  8062b8:	49c00017 	ldw	r7,0(r9)
  8062bc:	29400104 	addi	r5,r5,4
  8062c0:	40bfffcc 	andi	r2,r8,65535
  8062c4:	14c5383a 	mul	r2,r2,r19
  8062c8:	4010d43a 	srli	r8,r8,16
  8062cc:	38ffffcc 	andi	r3,r7,65535
  8062d0:	1105883a 	add	r2,r2,r4
  8062d4:	1008d43a 	srli	r4,r2,16
  8062d8:	44d1383a 	mul	r8,r8,r19
  8062dc:	198d883a 	add	r6,r3,r6
  8062e0:	10ffffcc 	andi	r3,r2,65535
  8062e4:	30c7c83a 	sub	r3,r6,r3
  8062e8:	380ed43a 	srli	r7,r7,16
  8062ec:	4105883a 	add	r2,r8,r4
  8062f0:	180dd43a 	srai	r6,r3,16
  8062f4:	113fffcc 	andi	r4,r2,65535
  8062f8:	390fc83a 	sub	r7,r7,r4
  8062fc:	398d883a 	add	r6,r7,r6
  806300:	300e943a 	slli	r7,r6,16
  806304:	18ffffcc 	andi	r3,r3,65535
  806308:	1008d43a 	srli	r4,r2,16
  80630c:	38ceb03a 	or	r7,r7,r3
  806310:	49c00015 	stw	r7,0(r9)
  806314:	300dd43a 	srai	r6,r6,16
  806318:	4a400104 	addi	r9,r9,4
  80631c:	a17fe52e 	bgeu	r20,r5,8062b4 <__alt_mem_onchip_mem+0xff7862b4>
  806320:	b0800017 	ldw	r2,0(r22)
  806324:	10000b1e 	bne	r2,zero,806354 <quorem+0x120>
  806328:	b0bfff04 	addi	r2,r22,-4
  80632c:	a880082e 	bgeu	r21,r2,806350 <quorem+0x11c>
  806330:	b0ffff17 	ldw	r3,-4(r22)
  806334:	18000326 	beq	r3,zero,806344 <quorem+0x110>
  806338:	00000506 	br	806350 <quorem+0x11c>
  80633c:	10c00017 	ldw	r3,0(r2)
  806340:	1800031e 	bne	r3,zero,806350 <quorem+0x11c>
  806344:	10bfff04 	addi	r2,r2,-4
  806348:	94bfffc4 	addi	r18,r18,-1
  80634c:	a8bffb36 	bltu	r21,r2,80633c <__alt_mem_onchip_mem+0xff78633c>
  806350:	84800415 	stw	r18,16(r16)
  806354:	b80b883a 	mov	r5,r23
  806358:	8009883a 	mov	r4,r16
  80635c:	08095e40 	call	8095e4 <__mcmp>
  806360:	10002616 	blt	r2,zero,8063fc <quorem+0x1c8>
  806364:	9cc00044 	addi	r19,r19,1
  806368:	a805883a 	mov	r2,r21
  80636c:	000b883a 	mov	r5,zero
  806370:	11000017 	ldw	r4,0(r2)
  806374:	89800017 	ldw	r6,0(r17)
  806378:	10800104 	addi	r2,r2,4
  80637c:	20ffffcc 	andi	r3,r4,65535
  806380:	194b883a 	add	r5,r3,r5
  806384:	30ffffcc 	andi	r3,r6,65535
  806388:	28c7c83a 	sub	r3,r5,r3
  80638c:	300cd43a 	srli	r6,r6,16
  806390:	2008d43a 	srli	r4,r4,16
  806394:	180bd43a 	srai	r5,r3,16
  806398:	18ffffcc 	andi	r3,r3,65535
  80639c:	2189c83a 	sub	r4,r4,r6
  8063a0:	2149883a 	add	r4,r4,r5
  8063a4:	200c943a 	slli	r6,r4,16
  8063a8:	8c400104 	addi	r17,r17,4
  8063ac:	200bd43a 	srai	r5,r4,16
  8063b0:	30c6b03a 	or	r3,r6,r3
  8063b4:	10ffff15 	stw	r3,-4(r2)
  8063b8:	a47fed2e 	bgeu	r20,r17,806370 <__alt_mem_onchip_mem+0xff786370>
  8063bc:	9485883a 	add	r2,r18,r18
  8063c0:	1085883a 	add	r2,r2,r2
  8063c4:	a887883a 	add	r3,r21,r2
  8063c8:	18800017 	ldw	r2,0(r3)
  8063cc:	10000b1e 	bne	r2,zero,8063fc <quorem+0x1c8>
  8063d0:	18bfff04 	addi	r2,r3,-4
  8063d4:	a880082e 	bgeu	r21,r2,8063f8 <quorem+0x1c4>
  8063d8:	18ffff17 	ldw	r3,-4(r3)
  8063dc:	18000326 	beq	r3,zero,8063ec <quorem+0x1b8>
  8063e0:	00000506 	br	8063f8 <quorem+0x1c4>
  8063e4:	10c00017 	ldw	r3,0(r2)
  8063e8:	1800031e 	bne	r3,zero,8063f8 <quorem+0x1c4>
  8063ec:	10bfff04 	addi	r2,r2,-4
  8063f0:	94bfffc4 	addi	r18,r18,-1
  8063f4:	a8bffb36 	bltu	r21,r2,8063e4 <__alt_mem_onchip_mem+0xff7863e4>
  8063f8:	84800415 	stw	r18,16(r16)
  8063fc:	9805883a 	mov	r2,r19
  806400:	dfc00817 	ldw	ra,32(sp)
  806404:	ddc00717 	ldw	r23,28(sp)
  806408:	dd800617 	ldw	r22,24(sp)
  80640c:	dd400517 	ldw	r21,20(sp)
  806410:	dd000417 	ldw	r20,16(sp)
  806414:	dcc00317 	ldw	r19,12(sp)
  806418:	dc800217 	ldw	r18,8(sp)
  80641c:	dc400117 	ldw	r17,4(sp)
  806420:	dc000017 	ldw	r16,0(sp)
  806424:	dec00904 	addi	sp,sp,36
  806428:	f800283a 	ret
  80642c:	0005883a 	mov	r2,zero
  806430:	003ff306 	br	806400 <__alt_mem_onchip_mem+0xff786400>

00806434 <_dtoa_r>:
  806434:	20801017 	ldw	r2,64(r4)
  806438:	deffde04 	addi	sp,sp,-136
  80643c:	df002015 	stw	fp,128(sp)
  806440:	dcc01b15 	stw	r19,108(sp)
  806444:	dc801a15 	stw	r18,104(sp)
  806448:	dc401915 	stw	r17,100(sp)
  80644c:	dc001815 	stw	r16,96(sp)
  806450:	dfc02115 	stw	ra,132(sp)
  806454:	ddc01f15 	stw	r23,124(sp)
  806458:	dd801e15 	stw	r22,120(sp)
  80645c:	dd401d15 	stw	r21,116(sp)
  806460:	dd001c15 	stw	r20,112(sp)
  806464:	d9c00315 	stw	r7,12(sp)
  806468:	2039883a 	mov	fp,r4
  80646c:	3023883a 	mov	r17,r6
  806470:	2825883a 	mov	r18,r5
  806474:	dc002417 	ldw	r16,144(sp)
  806478:	3027883a 	mov	r19,r6
  80647c:	10000826 	beq	r2,zero,8064a0 <_dtoa_r+0x6c>
  806480:	21801117 	ldw	r6,68(r4)
  806484:	00c00044 	movi	r3,1
  806488:	100b883a 	mov	r5,r2
  80648c:	1986983a 	sll	r3,r3,r6
  806490:	11800115 	stw	r6,4(r2)
  806494:	10c00215 	stw	r3,8(r2)
  806498:	0808dc40 	call	808dc4 <_Bfree>
  80649c:	e0001015 	stw	zero,64(fp)
  8064a0:	88002e16 	blt	r17,zero,80655c <_dtoa_r+0x128>
  8064a4:	80000015 	stw	zero,0(r16)
  8064a8:	889ffc2c 	andhi	r2,r17,32752
  8064ac:	00dffc34 	movhi	r3,32752
  8064b0:	10c01c26 	beq	r2,r3,806524 <_dtoa_r+0xf0>
  8064b4:	000d883a 	mov	r6,zero
  8064b8:	000f883a 	mov	r7,zero
  8064bc:	9009883a 	mov	r4,r18
  8064c0:	980b883a 	mov	r5,r19
  8064c4:	080d2840 	call	80d284 <__eqdf2>
  8064c8:	10002b1e 	bne	r2,zero,806578 <_dtoa_r+0x144>
  8064cc:	d9c02317 	ldw	r7,140(sp)
  8064d0:	00800044 	movi	r2,1
  8064d4:	38800015 	stw	r2,0(r7)
  8064d8:	d8802517 	ldw	r2,148(sp)
  8064dc:	10019e26 	beq	r2,zero,806b58 <_dtoa_r+0x724>
  8064e0:	d8c02517 	ldw	r3,148(sp)
  8064e4:	00802074 	movhi	r2,129
  8064e8:	108af844 	addi	r2,r2,11233
  8064ec:	18800015 	stw	r2,0(r3)
  8064f0:	10bfffc4 	addi	r2,r2,-1
  8064f4:	dfc02117 	ldw	ra,132(sp)
  8064f8:	df002017 	ldw	fp,128(sp)
  8064fc:	ddc01f17 	ldw	r23,124(sp)
  806500:	dd801e17 	ldw	r22,120(sp)
  806504:	dd401d17 	ldw	r21,116(sp)
  806508:	dd001c17 	ldw	r20,112(sp)
  80650c:	dcc01b17 	ldw	r19,108(sp)
  806510:	dc801a17 	ldw	r18,104(sp)
  806514:	dc401917 	ldw	r17,100(sp)
  806518:	dc001817 	ldw	r16,96(sp)
  80651c:	dec02204 	addi	sp,sp,136
  806520:	f800283a 	ret
  806524:	d8c02317 	ldw	r3,140(sp)
  806528:	0089c3c4 	movi	r2,9999
  80652c:	18800015 	stw	r2,0(r3)
  806530:	90017726 	beq	r18,zero,806b10 <_dtoa_r+0x6dc>
  806534:	00802074 	movhi	r2,129
  806538:	108b0404 	addi	r2,r2,11280
  80653c:	d9002517 	ldw	r4,148(sp)
  806540:	203fec26 	beq	r4,zero,8064f4 <__alt_mem_onchip_mem+0xff7864f4>
  806544:	10c000c7 	ldb	r3,3(r2)
  806548:	1801781e 	bne	r3,zero,806b2c <_dtoa_r+0x6f8>
  80654c:	10c000c4 	addi	r3,r2,3
  806550:	d9802517 	ldw	r6,148(sp)
  806554:	30c00015 	stw	r3,0(r6)
  806558:	003fe606 	br	8064f4 <__alt_mem_onchip_mem+0xff7864f4>
  80655c:	04e00034 	movhi	r19,32768
  806560:	9cffffc4 	addi	r19,r19,-1
  806564:	00800044 	movi	r2,1
  806568:	8ce6703a 	and	r19,r17,r19
  80656c:	80800015 	stw	r2,0(r16)
  806570:	9823883a 	mov	r17,r19
  806574:	003fcc06 	br	8064a8 <__alt_mem_onchip_mem+0xff7864a8>
  806578:	d8800204 	addi	r2,sp,8
  80657c:	d8800015 	stw	r2,0(sp)
  806580:	d9c00104 	addi	r7,sp,4
  806584:	900b883a 	mov	r5,r18
  806588:	980d883a 	mov	r6,r19
  80658c:	e009883a 	mov	r4,fp
  806590:	8820d53a 	srli	r16,r17,20
  806594:	08099b00 	call	8099b0 <__d2b>
  806598:	d8800915 	stw	r2,36(sp)
  80659c:	8001651e 	bne	r16,zero,806b34 <_dtoa_r+0x700>
  8065a0:	dd800217 	ldw	r22,8(sp)
  8065a4:	dc000117 	ldw	r16,4(sp)
  8065a8:	00800804 	movi	r2,32
  8065ac:	b421883a 	add	r16,r22,r16
  8065b0:	80c10c84 	addi	r3,r16,1074
  8065b4:	10c2d10e 	bge	r2,r3,8070fc <_dtoa_r+0xcc8>
  8065b8:	00801004 	movi	r2,64
  8065bc:	81010484 	addi	r4,r16,1042
  8065c0:	10c7c83a 	sub	r3,r2,r3
  8065c4:	9108d83a 	srl	r4,r18,r4
  8065c8:	88e2983a 	sll	r17,r17,r3
  8065cc:	2448b03a 	or	r4,r4,r17
  8065d0:	080e5700 	call	80e570 <__floatunsidf>
  8065d4:	017f8434 	movhi	r5,65040
  8065d8:	01800044 	movi	r6,1
  8065dc:	1009883a 	mov	r4,r2
  8065e0:	194b883a 	add	r5,r3,r5
  8065e4:	843fffc4 	addi	r16,r16,-1
  8065e8:	d9801115 	stw	r6,68(sp)
  8065ec:	000d883a 	mov	r6,zero
  8065f0:	01cffe34 	movhi	r7,16376
  8065f4:	080dbf40 	call	80dbf4 <__subdf3>
  8065f8:	0198dbf4 	movhi	r6,25455
  8065fc:	01cff4f4 	movhi	r7,16339
  806600:	3190d844 	addi	r6,r6,17249
  806604:	39e1e9c4 	addi	r7,r7,-30809
  806608:	1009883a 	mov	r4,r2
  80660c:	180b883a 	mov	r5,r3
  806610:	080d4dc0 	call	80d4dc <__muldf3>
  806614:	01a2d874 	movhi	r6,35681
  806618:	01cff1f4 	movhi	r7,16327
  80661c:	31b22cc4 	addi	r6,r6,-14157
  806620:	39e28a04 	addi	r7,r7,-30168
  806624:	180b883a 	mov	r5,r3
  806628:	1009883a 	mov	r4,r2
  80662c:	080c9d80 	call	80c9d8 <__adddf3>
  806630:	8009883a 	mov	r4,r16
  806634:	1029883a 	mov	r20,r2
  806638:	1823883a 	mov	r17,r3
  80663c:	0801a380 	call	801a38 <__floatsidf>
  806640:	019427f4 	movhi	r6,20639
  806644:	01cff4f4 	movhi	r7,16339
  806648:	319e7ec4 	addi	r6,r6,31227
  80664c:	39d104c4 	addi	r7,r7,17427
  806650:	1009883a 	mov	r4,r2
  806654:	180b883a 	mov	r5,r3
  806658:	080d4dc0 	call	80d4dc <__muldf3>
  80665c:	100d883a 	mov	r6,r2
  806660:	180f883a 	mov	r7,r3
  806664:	a009883a 	mov	r4,r20
  806668:	880b883a 	mov	r5,r17
  80666c:	080c9d80 	call	80c9d8 <__adddf3>
  806670:	1009883a 	mov	r4,r2
  806674:	180b883a 	mov	r5,r3
  806678:	1029883a 	mov	r20,r2
  80667c:	1823883a 	mov	r17,r3
  806680:	080e4f00 	call	80e4f0 <__fixdfsi>
  806684:	000d883a 	mov	r6,zero
  806688:	000f883a 	mov	r7,zero
  80668c:	a009883a 	mov	r4,r20
  806690:	880b883a 	mov	r5,r17
  806694:	d8800515 	stw	r2,20(sp)
  806698:	080d3e80 	call	80d3e8 <__ledf2>
  80669c:	10028716 	blt	r2,zero,8070bc <_dtoa_r+0xc88>
  8066a0:	d8c00517 	ldw	r3,20(sp)
  8066a4:	00800584 	movi	r2,22
  8066a8:	10c27536 	bltu	r2,r3,807080 <_dtoa_r+0xc4c>
  8066ac:	180490fa 	slli	r2,r3,3
  8066b0:	00c02074 	movhi	r3,129
  8066b4:	18cb1f04 	addi	r3,r3,11388
  8066b8:	1885883a 	add	r2,r3,r2
  8066bc:	11000017 	ldw	r4,0(r2)
  8066c0:	11400117 	ldw	r5,4(r2)
  8066c4:	900d883a 	mov	r6,r18
  8066c8:	980f883a 	mov	r7,r19
  8066cc:	080d30c0 	call	80d30c <__gedf2>
  8066d0:	00828d0e 	bge	zero,r2,807108 <_dtoa_r+0xcd4>
  8066d4:	d9000517 	ldw	r4,20(sp)
  8066d8:	d8000e15 	stw	zero,56(sp)
  8066dc:	213fffc4 	addi	r4,r4,-1
  8066e0:	d9000515 	stw	r4,20(sp)
  8066e4:	b42dc83a 	sub	r22,r22,r16
  8066e8:	b5bfffc4 	addi	r22,r22,-1
  8066ec:	b0026f16 	blt	r22,zero,8070ac <_dtoa_r+0xc78>
  8066f0:	d8000815 	stw	zero,32(sp)
  8066f4:	d9c00517 	ldw	r7,20(sp)
  8066f8:	38026416 	blt	r7,zero,80708c <_dtoa_r+0xc58>
  8066fc:	b1ed883a 	add	r22,r22,r7
  806700:	d9c00d15 	stw	r7,52(sp)
  806704:	d8000a15 	stw	zero,40(sp)
  806708:	d9800317 	ldw	r6,12(sp)
  80670c:	00800244 	movi	r2,9
  806710:	11811436 	bltu	r2,r6,806b64 <_dtoa_r+0x730>
  806714:	00800144 	movi	r2,5
  806718:	1184e10e 	bge	r2,r6,807aa0 <_dtoa_r+0x166c>
  80671c:	31bfff04 	addi	r6,r6,-4
  806720:	d9800315 	stw	r6,12(sp)
  806724:	0023883a 	mov	r17,zero
  806728:	d9800317 	ldw	r6,12(sp)
  80672c:	008000c4 	movi	r2,3
  806730:	30836726 	beq	r6,r2,8074d0 <_dtoa_r+0x109c>
  806734:	1183410e 	bge	r2,r6,80743c <_dtoa_r+0x1008>
  806738:	d9c00317 	ldw	r7,12(sp)
  80673c:	00800104 	movi	r2,4
  806740:	38827c26 	beq	r7,r2,807134 <_dtoa_r+0xd00>
  806744:	00800144 	movi	r2,5
  806748:	3884c41e 	bne	r7,r2,807a5c <_dtoa_r+0x1628>
  80674c:	00800044 	movi	r2,1
  806750:	d8800b15 	stw	r2,44(sp)
  806754:	d8c00517 	ldw	r3,20(sp)
  806758:	d9002217 	ldw	r4,136(sp)
  80675c:	1907883a 	add	r3,r3,r4
  806760:	19800044 	addi	r6,r3,1
  806764:	d8c00c15 	stw	r3,48(sp)
  806768:	d9800615 	stw	r6,24(sp)
  80676c:	0183a40e 	bge	zero,r6,807600 <_dtoa_r+0x11cc>
  806770:	d9800617 	ldw	r6,24(sp)
  806774:	3021883a 	mov	r16,r6
  806778:	e0001115 	stw	zero,68(fp)
  80677c:	008005c4 	movi	r2,23
  806780:	1184c92e 	bgeu	r2,r6,807aa8 <_dtoa_r+0x1674>
  806784:	00c00044 	movi	r3,1
  806788:	00800104 	movi	r2,4
  80678c:	1085883a 	add	r2,r2,r2
  806790:	11000504 	addi	r4,r2,20
  806794:	180b883a 	mov	r5,r3
  806798:	18c00044 	addi	r3,r3,1
  80679c:	313ffb2e 	bgeu	r6,r4,80678c <__alt_mem_onchip_mem+0xff78678c>
  8067a0:	e1401115 	stw	r5,68(fp)
  8067a4:	e009883a 	mov	r4,fp
  8067a8:	0808d1c0 	call	808d1c <_Balloc>
  8067ac:	d8800715 	stw	r2,28(sp)
  8067b0:	e0801015 	stw	r2,64(fp)
  8067b4:	00800384 	movi	r2,14
  8067b8:	1400f736 	bltu	r2,r16,806b98 <_dtoa_r+0x764>
  8067bc:	8800f626 	beq	r17,zero,806b98 <_dtoa_r+0x764>
  8067c0:	d9c00517 	ldw	r7,20(sp)
  8067c4:	01c39a0e 	bge	zero,r7,807630 <_dtoa_r+0x11fc>
  8067c8:	388003cc 	andi	r2,r7,15
  8067cc:	100490fa 	slli	r2,r2,3
  8067d0:	382bd13a 	srai	r21,r7,4
  8067d4:	00c02074 	movhi	r3,129
  8067d8:	18cb1f04 	addi	r3,r3,11388
  8067dc:	1885883a 	add	r2,r3,r2
  8067e0:	a8c0040c 	andi	r3,r21,16
  8067e4:	12400017 	ldw	r9,0(r2)
  8067e8:	12000117 	ldw	r8,4(r2)
  8067ec:	18037926 	beq	r3,zero,8075d4 <_dtoa_r+0x11a0>
  8067f0:	00802074 	movhi	r2,129
  8067f4:	108b1504 	addi	r2,r2,11348
  8067f8:	11800817 	ldw	r6,32(r2)
  8067fc:	11c00917 	ldw	r7,36(r2)
  806800:	9009883a 	mov	r4,r18
  806804:	980b883a 	mov	r5,r19
  806808:	da001715 	stw	r8,92(sp)
  80680c:	da401615 	stw	r9,88(sp)
  806810:	08011500 	call	801150 <__divdf3>
  806814:	da001717 	ldw	r8,92(sp)
  806818:	da401617 	ldw	r9,88(sp)
  80681c:	ad4003cc 	andi	r21,r21,15
  806820:	040000c4 	movi	r16,3
  806824:	1023883a 	mov	r17,r2
  806828:	1829883a 	mov	r20,r3
  80682c:	a8001126 	beq	r21,zero,806874 <_dtoa_r+0x440>
  806830:	05c02074 	movhi	r23,129
  806834:	bdcb1504 	addi	r23,r23,11348
  806838:	4805883a 	mov	r2,r9
  80683c:	4007883a 	mov	r3,r8
  806840:	a980004c 	andi	r6,r21,1
  806844:	1009883a 	mov	r4,r2
  806848:	a82bd07a 	srai	r21,r21,1
  80684c:	180b883a 	mov	r5,r3
  806850:	30000426 	beq	r6,zero,806864 <_dtoa_r+0x430>
  806854:	b9800017 	ldw	r6,0(r23)
  806858:	b9c00117 	ldw	r7,4(r23)
  80685c:	84000044 	addi	r16,r16,1
  806860:	080d4dc0 	call	80d4dc <__muldf3>
  806864:	bdc00204 	addi	r23,r23,8
  806868:	a83ff51e 	bne	r21,zero,806840 <__alt_mem_onchip_mem+0xff786840>
  80686c:	1013883a 	mov	r9,r2
  806870:	1811883a 	mov	r8,r3
  806874:	480d883a 	mov	r6,r9
  806878:	400f883a 	mov	r7,r8
  80687c:	8809883a 	mov	r4,r17
  806880:	a00b883a 	mov	r5,r20
  806884:	08011500 	call	801150 <__divdf3>
  806888:	d8800f15 	stw	r2,60(sp)
  80688c:	d8c01015 	stw	r3,64(sp)
  806890:	d8c00e17 	ldw	r3,56(sp)
  806894:	18000626 	beq	r3,zero,8068b0 <_dtoa_r+0x47c>
  806898:	d9000f17 	ldw	r4,60(sp)
  80689c:	d9401017 	ldw	r5,64(sp)
  8068a0:	000d883a 	mov	r6,zero
  8068a4:	01cffc34 	movhi	r7,16368
  8068a8:	080d3e80 	call	80d3e8 <__ledf2>
  8068ac:	10040b16 	blt	r2,zero,8078dc <_dtoa_r+0x14a8>
  8068b0:	8009883a 	mov	r4,r16
  8068b4:	0801a380 	call	801a38 <__floatsidf>
  8068b8:	d9800f17 	ldw	r6,60(sp)
  8068bc:	d9c01017 	ldw	r7,64(sp)
  8068c0:	1009883a 	mov	r4,r2
  8068c4:	180b883a 	mov	r5,r3
  8068c8:	080d4dc0 	call	80d4dc <__muldf3>
  8068cc:	000d883a 	mov	r6,zero
  8068d0:	01d00734 	movhi	r7,16412
  8068d4:	1009883a 	mov	r4,r2
  8068d8:	180b883a 	mov	r5,r3
  8068dc:	080c9d80 	call	80c9d8 <__adddf3>
  8068e0:	1021883a 	mov	r16,r2
  8068e4:	d8800617 	ldw	r2,24(sp)
  8068e8:	047f3034 	movhi	r17,64704
  8068ec:	1c63883a 	add	r17,r3,r17
  8068f0:	10031826 	beq	r2,zero,807554 <_dtoa_r+0x1120>
  8068f4:	d8c00517 	ldw	r3,20(sp)
  8068f8:	db000617 	ldw	r12,24(sp)
  8068fc:	d8c01315 	stw	r3,76(sp)
  806900:	d9000b17 	ldw	r4,44(sp)
  806904:	20038f26 	beq	r4,zero,807744 <_dtoa_r+0x1310>
  806908:	60bfffc4 	addi	r2,r12,-1
  80690c:	100490fa 	slli	r2,r2,3
  806910:	00c02074 	movhi	r3,129
  806914:	18cb1f04 	addi	r3,r3,11388
  806918:	1885883a 	add	r2,r3,r2
  80691c:	11800017 	ldw	r6,0(r2)
  806920:	11c00117 	ldw	r7,4(r2)
  806924:	d8800717 	ldw	r2,28(sp)
  806928:	0009883a 	mov	r4,zero
  80692c:	014ff834 	movhi	r5,16352
  806930:	db001615 	stw	r12,88(sp)
  806934:	15c00044 	addi	r23,r2,1
  806938:	08011500 	call	801150 <__divdf3>
  80693c:	800d883a 	mov	r6,r16
  806940:	880f883a 	mov	r7,r17
  806944:	1009883a 	mov	r4,r2
  806948:	180b883a 	mov	r5,r3
  80694c:	080dbf40 	call	80dbf4 <__subdf3>
  806950:	d9401017 	ldw	r5,64(sp)
  806954:	d9000f17 	ldw	r4,60(sp)
  806958:	102b883a 	mov	r21,r2
  80695c:	d8c01215 	stw	r3,72(sp)
  806960:	080e4f00 	call	80e4f0 <__fixdfsi>
  806964:	1009883a 	mov	r4,r2
  806968:	1029883a 	mov	r20,r2
  80696c:	0801a380 	call	801a38 <__floatsidf>
  806970:	d9000f17 	ldw	r4,60(sp)
  806974:	d9401017 	ldw	r5,64(sp)
  806978:	100d883a 	mov	r6,r2
  80697c:	180f883a 	mov	r7,r3
  806980:	080dbf40 	call	80dbf4 <__subdf3>
  806984:	1823883a 	mov	r17,r3
  806988:	d8c00717 	ldw	r3,28(sp)
  80698c:	d9401217 	ldw	r5,72(sp)
  806990:	a2000c04 	addi	r8,r20,48
  806994:	1021883a 	mov	r16,r2
  806998:	1a000005 	stb	r8,0(r3)
  80699c:	800d883a 	mov	r6,r16
  8069a0:	880f883a 	mov	r7,r17
  8069a4:	a809883a 	mov	r4,r21
  8069a8:	4029883a 	mov	r20,r8
  8069ac:	080d30c0 	call	80d30c <__gedf2>
  8069b0:	00841d16 	blt	zero,r2,807a28 <_dtoa_r+0x15f4>
  8069b4:	800d883a 	mov	r6,r16
  8069b8:	880f883a 	mov	r7,r17
  8069bc:	0009883a 	mov	r4,zero
  8069c0:	014ffc34 	movhi	r5,16368
  8069c4:	080dbf40 	call	80dbf4 <__subdf3>
  8069c8:	d9401217 	ldw	r5,72(sp)
  8069cc:	100d883a 	mov	r6,r2
  8069d0:	180f883a 	mov	r7,r3
  8069d4:	a809883a 	mov	r4,r21
  8069d8:	080d30c0 	call	80d30c <__gedf2>
  8069dc:	db001617 	ldw	r12,88(sp)
  8069e0:	00840e16 	blt	zero,r2,807a1c <_dtoa_r+0x15e8>
  8069e4:	00800044 	movi	r2,1
  8069e8:	13006b0e 	bge	r2,r12,806b98 <_dtoa_r+0x764>
  8069ec:	d9000717 	ldw	r4,28(sp)
  8069f0:	dd800f15 	stw	r22,60(sp)
  8069f4:	dcc01015 	stw	r19,64(sp)
  8069f8:	2319883a 	add	r12,r4,r12
  8069fc:	dcc01217 	ldw	r19,72(sp)
  806a00:	602d883a 	mov	r22,r12
  806a04:	dc801215 	stw	r18,72(sp)
  806a08:	b825883a 	mov	r18,r23
  806a0c:	00000906 	br	806a34 <_dtoa_r+0x600>
  806a10:	080dbf40 	call	80dbf4 <__subdf3>
  806a14:	a80d883a 	mov	r6,r21
  806a18:	980f883a 	mov	r7,r19
  806a1c:	1009883a 	mov	r4,r2
  806a20:	180b883a 	mov	r5,r3
  806a24:	080d3e80 	call	80d3e8 <__ledf2>
  806a28:	1003e816 	blt	r2,zero,8079cc <_dtoa_r+0x1598>
  806a2c:	b825883a 	mov	r18,r23
  806a30:	bd83e926 	beq	r23,r22,8079d8 <_dtoa_r+0x15a4>
  806a34:	a809883a 	mov	r4,r21
  806a38:	980b883a 	mov	r5,r19
  806a3c:	000d883a 	mov	r6,zero
  806a40:	01d00934 	movhi	r7,16420
  806a44:	080d4dc0 	call	80d4dc <__muldf3>
  806a48:	000d883a 	mov	r6,zero
  806a4c:	01d00934 	movhi	r7,16420
  806a50:	8009883a 	mov	r4,r16
  806a54:	880b883a 	mov	r5,r17
  806a58:	102b883a 	mov	r21,r2
  806a5c:	1827883a 	mov	r19,r3
  806a60:	080d4dc0 	call	80d4dc <__muldf3>
  806a64:	180b883a 	mov	r5,r3
  806a68:	1009883a 	mov	r4,r2
  806a6c:	1821883a 	mov	r16,r3
  806a70:	1023883a 	mov	r17,r2
  806a74:	080e4f00 	call	80e4f0 <__fixdfsi>
  806a78:	1009883a 	mov	r4,r2
  806a7c:	1029883a 	mov	r20,r2
  806a80:	0801a380 	call	801a38 <__floatsidf>
  806a84:	8809883a 	mov	r4,r17
  806a88:	800b883a 	mov	r5,r16
  806a8c:	100d883a 	mov	r6,r2
  806a90:	180f883a 	mov	r7,r3
  806a94:	080dbf40 	call	80dbf4 <__subdf3>
  806a98:	a5000c04 	addi	r20,r20,48
  806a9c:	a80d883a 	mov	r6,r21
  806aa0:	980f883a 	mov	r7,r19
  806aa4:	1009883a 	mov	r4,r2
  806aa8:	180b883a 	mov	r5,r3
  806aac:	95000005 	stb	r20,0(r18)
  806ab0:	1021883a 	mov	r16,r2
  806ab4:	1823883a 	mov	r17,r3
  806ab8:	080d3e80 	call	80d3e8 <__ledf2>
  806abc:	bdc00044 	addi	r23,r23,1
  806ac0:	800d883a 	mov	r6,r16
  806ac4:	880f883a 	mov	r7,r17
  806ac8:	0009883a 	mov	r4,zero
  806acc:	014ffc34 	movhi	r5,16368
  806ad0:	103fcf0e 	bge	r2,zero,806a10 <__alt_mem_onchip_mem+0xff786a10>
  806ad4:	d8c01317 	ldw	r3,76(sp)
  806ad8:	d8c00515 	stw	r3,20(sp)
  806adc:	d9400917 	ldw	r5,36(sp)
  806ae0:	e009883a 	mov	r4,fp
  806ae4:	0808dc40 	call	808dc4 <_Bfree>
  806ae8:	d9000517 	ldw	r4,20(sp)
  806aec:	d9802317 	ldw	r6,140(sp)
  806af0:	d9c02517 	ldw	r7,148(sp)
  806af4:	b8000005 	stb	zero,0(r23)
  806af8:	20800044 	addi	r2,r4,1
  806afc:	30800015 	stw	r2,0(r6)
  806b00:	3802aa26 	beq	r7,zero,8075ac <_dtoa_r+0x1178>
  806b04:	3dc00015 	stw	r23,0(r7)
  806b08:	d8800717 	ldw	r2,28(sp)
  806b0c:	003e7906 	br	8064f4 <__alt_mem_onchip_mem+0xff7864f4>
  806b10:	00800434 	movhi	r2,16
  806b14:	10bfffc4 	addi	r2,r2,-1
  806b18:	88a2703a 	and	r17,r17,r2
  806b1c:	883e851e 	bne	r17,zero,806534 <__alt_mem_onchip_mem+0xff786534>
  806b20:	00802074 	movhi	r2,129
  806b24:	108b0104 	addi	r2,r2,11268
  806b28:	003e8406 	br	80653c <__alt_mem_onchip_mem+0xff78653c>
  806b2c:	10c00204 	addi	r3,r2,8
  806b30:	003e8706 	br	806550 <__alt_mem_onchip_mem+0xff786550>
  806b34:	01400434 	movhi	r5,16
  806b38:	297fffc4 	addi	r5,r5,-1
  806b3c:	994a703a 	and	r5,r19,r5
  806b40:	9009883a 	mov	r4,r18
  806b44:	843f0044 	addi	r16,r16,-1023
  806b48:	294ffc34 	orhi	r5,r5,16368
  806b4c:	dd800217 	ldw	r22,8(sp)
  806b50:	d8001115 	stw	zero,68(sp)
  806b54:	003ea506 	br	8065ec <__alt_mem_onchip_mem+0xff7865ec>
  806b58:	00802074 	movhi	r2,129
  806b5c:	108af804 	addi	r2,r2,11232
  806b60:	003e6406 	br	8064f4 <__alt_mem_onchip_mem+0xff7864f4>
  806b64:	e0001115 	stw	zero,68(fp)
  806b68:	000b883a 	mov	r5,zero
  806b6c:	e009883a 	mov	r4,fp
  806b70:	0808d1c0 	call	808d1c <_Balloc>
  806b74:	01bfffc4 	movi	r6,-1
  806b78:	01c00044 	movi	r7,1
  806b7c:	d8800715 	stw	r2,28(sp)
  806b80:	d9800c15 	stw	r6,48(sp)
  806b84:	e0801015 	stw	r2,64(fp)
  806b88:	d8000315 	stw	zero,12(sp)
  806b8c:	d9c00b15 	stw	r7,44(sp)
  806b90:	d9800615 	stw	r6,24(sp)
  806b94:	d8002215 	stw	zero,136(sp)
  806b98:	d8800117 	ldw	r2,4(sp)
  806b9c:	10008916 	blt	r2,zero,806dc4 <_dtoa_r+0x990>
  806ba0:	d9000517 	ldw	r4,20(sp)
  806ba4:	00c00384 	movi	r3,14
  806ba8:	19008616 	blt	r3,r4,806dc4 <_dtoa_r+0x990>
  806bac:	200490fa 	slli	r2,r4,3
  806bb0:	00c02074 	movhi	r3,129
  806bb4:	d9802217 	ldw	r6,136(sp)
  806bb8:	18cb1f04 	addi	r3,r3,11388
  806bbc:	1885883a 	add	r2,r3,r2
  806bc0:	14000017 	ldw	r16,0(r2)
  806bc4:	14400117 	ldw	r17,4(r2)
  806bc8:	30016316 	blt	r6,zero,807158 <_dtoa_r+0xd24>
  806bcc:	800d883a 	mov	r6,r16
  806bd0:	880f883a 	mov	r7,r17
  806bd4:	9009883a 	mov	r4,r18
  806bd8:	980b883a 	mov	r5,r19
  806bdc:	08011500 	call	801150 <__divdf3>
  806be0:	180b883a 	mov	r5,r3
  806be4:	1009883a 	mov	r4,r2
  806be8:	080e4f00 	call	80e4f0 <__fixdfsi>
  806bec:	1009883a 	mov	r4,r2
  806bf0:	102b883a 	mov	r21,r2
  806bf4:	0801a380 	call	801a38 <__floatsidf>
  806bf8:	800d883a 	mov	r6,r16
  806bfc:	880f883a 	mov	r7,r17
  806c00:	1009883a 	mov	r4,r2
  806c04:	180b883a 	mov	r5,r3
  806c08:	080d4dc0 	call	80d4dc <__muldf3>
  806c0c:	100d883a 	mov	r6,r2
  806c10:	180f883a 	mov	r7,r3
  806c14:	9009883a 	mov	r4,r18
  806c18:	980b883a 	mov	r5,r19
  806c1c:	080dbf40 	call	80dbf4 <__subdf3>
  806c20:	d9c00717 	ldw	r7,28(sp)
  806c24:	1009883a 	mov	r4,r2
  806c28:	a8800c04 	addi	r2,r21,48
  806c2c:	38800005 	stb	r2,0(r7)
  806c30:	3dc00044 	addi	r23,r7,1
  806c34:	d9c00617 	ldw	r7,24(sp)
  806c38:	01800044 	movi	r6,1
  806c3c:	180b883a 	mov	r5,r3
  806c40:	2005883a 	mov	r2,r4
  806c44:	39803826 	beq	r7,r6,806d28 <_dtoa_r+0x8f4>
  806c48:	000d883a 	mov	r6,zero
  806c4c:	01d00934 	movhi	r7,16420
  806c50:	080d4dc0 	call	80d4dc <__muldf3>
  806c54:	000d883a 	mov	r6,zero
  806c58:	000f883a 	mov	r7,zero
  806c5c:	1009883a 	mov	r4,r2
  806c60:	180b883a 	mov	r5,r3
  806c64:	1025883a 	mov	r18,r2
  806c68:	1827883a 	mov	r19,r3
  806c6c:	080d2840 	call	80d284 <__eqdf2>
  806c70:	103f9a26 	beq	r2,zero,806adc <__alt_mem_onchip_mem+0xff786adc>
  806c74:	d9c00617 	ldw	r7,24(sp)
  806c78:	d8c00717 	ldw	r3,28(sp)
  806c7c:	b829883a 	mov	r20,r23
  806c80:	38bfffc4 	addi	r2,r7,-1
  806c84:	18ad883a 	add	r22,r3,r2
  806c88:	00000a06 	br	806cb4 <_dtoa_r+0x880>
  806c8c:	080d4dc0 	call	80d4dc <__muldf3>
  806c90:	000d883a 	mov	r6,zero
  806c94:	000f883a 	mov	r7,zero
  806c98:	1009883a 	mov	r4,r2
  806c9c:	180b883a 	mov	r5,r3
  806ca0:	1025883a 	mov	r18,r2
  806ca4:	1827883a 	mov	r19,r3
  806ca8:	b829883a 	mov	r20,r23
  806cac:	080d2840 	call	80d284 <__eqdf2>
  806cb0:	103f8a26 	beq	r2,zero,806adc <__alt_mem_onchip_mem+0xff786adc>
  806cb4:	800d883a 	mov	r6,r16
  806cb8:	880f883a 	mov	r7,r17
  806cbc:	9009883a 	mov	r4,r18
  806cc0:	980b883a 	mov	r5,r19
  806cc4:	08011500 	call	801150 <__divdf3>
  806cc8:	180b883a 	mov	r5,r3
  806ccc:	1009883a 	mov	r4,r2
  806cd0:	080e4f00 	call	80e4f0 <__fixdfsi>
  806cd4:	1009883a 	mov	r4,r2
  806cd8:	102b883a 	mov	r21,r2
  806cdc:	0801a380 	call	801a38 <__floatsidf>
  806ce0:	800d883a 	mov	r6,r16
  806ce4:	880f883a 	mov	r7,r17
  806ce8:	1009883a 	mov	r4,r2
  806cec:	180b883a 	mov	r5,r3
  806cf0:	080d4dc0 	call	80d4dc <__muldf3>
  806cf4:	100d883a 	mov	r6,r2
  806cf8:	180f883a 	mov	r7,r3
  806cfc:	9009883a 	mov	r4,r18
  806d00:	980b883a 	mov	r5,r19
  806d04:	080dbf40 	call	80dbf4 <__subdf3>
  806d08:	aa000c04 	addi	r8,r21,48
  806d0c:	a2000005 	stb	r8,0(r20)
  806d10:	000d883a 	mov	r6,zero
  806d14:	01d00934 	movhi	r7,16420
  806d18:	1009883a 	mov	r4,r2
  806d1c:	180b883a 	mov	r5,r3
  806d20:	a5c00044 	addi	r23,r20,1
  806d24:	b53fd91e 	bne	r22,r20,806c8c <__alt_mem_onchip_mem+0xff786c8c>
  806d28:	100d883a 	mov	r6,r2
  806d2c:	180f883a 	mov	r7,r3
  806d30:	1009883a 	mov	r4,r2
  806d34:	180b883a 	mov	r5,r3
  806d38:	080c9d80 	call	80c9d8 <__adddf3>
  806d3c:	100d883a 	mov	r6,r2
  806d40:	180f883a 	mov	r7,r3
  806d44:	8009883a 	mov	r4,r16
  806d48:	880b883a 	mov	r5,r17
  806d4c:	1027883a 	mov	r19,r2
  806d50:	1825883a 	mov	r18,r3
  806d54:	080d3e80 	call	80d3e8 <__ledf2>
  806d58:	10000816 	blt	r2,zero,806d7c <_dtoa_r+0x948>
  806d5c:	980d883a 	mov	r6,r19
  806d60:	900f883a 	mov	r7,r18
  806d64:	8009883a 	mov	r4,r16
  806d68:	880b883a 	mov	r5,r17
  806d6c:	080d2840 	call	80d284 <__eqdf2>
  806d70:	103f5a1e 	bne	r2,zero,806adc <__alt_mem_onchip_mem+0xff786adc>
  806d74:	ad40004c 	andi	r21,r21,1
  806d78:	a83f5826 	beq	r21,zero,806adc <__alt_mem_onchip_mem+0xff786adc>
  806d7c:	bd3fffc3 	ldbu	r20,-1(r23)
  806d80:	b8bfffc4 	addi	r2,r23,-1
  806d84:	1007883a 	mov	r3,r2
  806d88:	01400e44 	movi	r5,57
  806d8c:	d9800717 	ldw	r6,28(sp)
  806d90:	00000506 	br	806da8 <_dtoa_r+0x974>
  806d94:	18ffffc4 	addi	r3,r3,-1
  806d98:	11824726 	beq	r2,r6,8076b8 <_dtoa_r+0x1284>
  806d9c:	1d000003 	ldbu	r20,0(r3)
  806da0:	102f883a 	mov	r23,r2
  806da4:	10bfffc4 	addi	r2,r2,-1
  806da8:	a1003fcc 	andi	r4,r20,255
  806dac:	2100201c 	xori	r4,r4,128
  806db0:	213fe004 	addi	r4,r4,-128
  806db4:	217ff726 	beq	r4,r5,806d94 <__alt_mem_onchip_mem+0xff786d94>
  806db8:	a2000044 	addi	r8,r20,1
  806dbc:	12000005 	stb	r8,0(r2)
  806dc0:	003f4606 	br	806adc <__alt_mem_onchip_mem+0xff786adc>
  806dc4:	d9000b17 	ldw	r4,44(sp)
  806dc8:	2000c826 	beq	r4,zero,8070ec <_dtoa_r+0xcb8>
  806dcc:	d9800317 	ldw	r6,12(sp)
  806dd0:	00c00044 	movi	r3,1
  806dd4:	1980f90e 	bge	r3,r6,8071bc <_dtoa_r+0xd88>
  806dd8:	d8800617 	ldw	r2,24(sp)
  806ddc:	d8c00a17 	ldw	r3,40(sp)
  806de0:	157fffc4 	addi	r21,r2,-1
  806de4:	1d41f316 	blt	r3,r21,8075b4 <_dtoa_r+0x1180>
  806de8:	1d6bc83a 	sub	r21,r3,r21
  806dec:	d9c00617 	ldw	r7,24(sp)
  806df0:	3802aa16 	blt	r7,zero,80789c <_dtoa_r+0x1468>
  806df4:	dd000817 	ldw	r20,32(sp)
  806df8:	d8800617 	ldw	r2,24(sp)
  806dfc:	d8c00817 	ldw	r3,32(sp)
  806e00:	01400044 	movi	r5,1
  806e04:	e009883a 	mov	r4,fp
  806e08:	1887883a 	add	r3,r3,r2
  806e0c:	d8c00815 	stw	r3,32(sp)
  806e10:	b0ad883a 	add	r22,r22,r2
  806e14:	08091280 	call	809128 <__i2b>
  806e18:	1023883a 	mov	r17,r2
  806e1c:	a0000826 	beq	r20,zero,806e40 <_dtoa_r+0xa0c>
  806e20:	0580070e 	bge	zero,r22,806e40 <_dtoa_r+0xa0c>
  806e24:	a005883a 	mov	r2,r20
  806e28:	b500b916 	blt	r22,r20,807110 <_dtoa_r+0xcdc>
  806e2c:	d9000817 	ldw	r4,32(sp)
  806e30:	a0a9c83a 	sub	r20,r20,r2
  806e34:	b0adc83a 	sub	r22,r22,r2
  806e38:	2089c83a 	sub	r4,r4,r2
  806e3c:	d9000815 	stw	r4,32(sp)
  806e40:	d9800a17 	ldw	r6,40(sp)
  806e44:	0181810e 	bge	zero,r6,80744c <_dtoa_r+0x1018>
  806e48:	d9c00b17 	ldw	r7,44(sp)
  806e4c:	3800b326 	beq	r7,zero,80711c <_dtoa_r+0xce8>
  806e50:	a800b226 	beq	r21,zero,80711c <_dtoa_r+0xce8>
  806e54:	880b883a 	mov	r5,r17
  806e58:	a80d883a 	mov	r6,r21
  806e5c:	e009883a 	mov	r4,fp
  806e60:	080935c0 	call	80935c <__pow5mult>
  806e64:	d9800917 	ldw	r6,36(sp)
  806e68:	100b883a 	mov	r5,r2
  806e6c:	e009883a 	mov	r4,fp
  806e70:	1023883a 	mov	r17,r2
  806e74:	08091640 	call	809164 <__multiply>
  806e78:	1021883a 	mov	r16,r2
  806e7c:	d8800a17 	ldw	r2,40(sp)
  806e80:	d9400917 	ldw	r5,36(sp)
  806e84:	e009883a 	mov	r4,fp
  806e88:	1545c83a 	sub	r2,r2,r21
  806e8c:	d8800a15 	stw	r2,40(sp)
  806e90:	0808dc40 	call	808dc4 <_Bfree>
  806e94:	d8c00a17 	ldw	r3,40(sp)
  806e98:	18009f1e 	bne	r3,zero,807118 <_dtoa_r+0xce4>
  806e9c:	05c00044 	movi	r23,1
  806ea0:	e009883a 	mov	r4,fp
  806ea4:	b80b883a 	mov	r5,r23
  806ea8:	08091280 	call	809128 <__i2b>
  806eac:	d9000d17 	ldw	r4,52(sp)
  806eb0:	102b883a 	mov	r21,r2
  806eb4:	2000ce26 	beq	r4,zero,8071f0 <_dtoa_r+0xdbc>
  806eb8:	200d883a 	mov	r6,r4
  806ebc:	100b883a 	mov	r5,r2
  806ec0:	e009883a 	mov	r4,fp
  806ec4:	080935c0 	call	80935c <__pow5mult>
  806ec8:	d9800317 	ldw	r6,12(sp)
  806ecc:	102b883a 	mov	r21,r2
  806ed0:	b981810e 	bge	r23,r6,8074d8 <_dtoa_r+0x10a4>
  806ed4:	0027883a 	mov	r19,zero
  806ed8:	a8800417 	ldw	r2,16(r21)
  806edc:	05c00804 	movi	r23,32
  806ee0:	10800104 	addi	r2,r2,4
  806ee4:	1085883a 	add	r2,r2,r2
  806ee8:	1085883a 	add	r2,r2,r2
  806eec:	a885883a 	add	r2,r21,r2
  806ef0:	11000017 	ldw	r4,0(r2)
  806ef4:	08090100 	call	809010 <__hi0bits>
  806ef8:	b885c83a 	sub	r2,r23,r2
  806efc:	1585883a 	add	r2,r2,r22
  806f00:	108007cc 	andi	r2,r2,31
  806f04:	1000b326 	beq	r2,zero,8071d4 <_dtoa_r+0xda0>
  806f08:	00c00804 	movi	r3,32
  806f0c:	1887c83a 	sub	r3,r3,r2
  806f10:	01000104 	movi	r4,4
  806f14:	20c2cd0e 	bge	r4,r3,807a4c <_dtoa_r+0x1618>
  806f18:	00c00704 	movi	r3,28
  806f1c:	1885c83a 	sub	r2,r3,r2
  806f20:	d8c00817 	ldw	r3,32(sp)
  806f24:	a0a9883a 	add	r20,r20,r2
  806f28:	b0ad883a 	add	r22,r22,r2
  806f2c:	1887883a 	add	r3,r3,r2
  806f30:	d8c00815 	stw	r3,32(sp)
  806f34:	d9800817 	ldw	r6,32(sp)
  806f38:	0180040e 	bge	zero,r6,806f4c <_dtoa_r+0xb18>
  806f3c:	800b883a 	mov	r5,r16
  806f40:	e009883a 	mov	r4,fp
  806f44:	080949c0 	call	80949c <__lshift>
  806f48:	1021883a 	mov	r16,r2
  806f4c:	0580050e 	bge	zero,r22,806f64 <_dtoa_r+0xb30>
  806f50:	a80b883a 	mov	r5,r21
  806f54:	b00d883a 	mov	r6,r22
  806f58:	e009883a 	mov	r4,fp
  806f5c:	080949c0 	call	80949c <__lshift>
  806f60:	102b883a 	mov	r21,r2
  806f64:	d9c00e17 	ldw	r7,56(sp)
  806f68:	3801211e 	bne	r7,zero,8073f0 <_dtoa_r+0xfbc>
  806f6c:	d9800617 	ldw	r6,24(sp)
  806f70:	0181380e 	bge	zero,r6,807454 <_dtoa_r+0x1020>
  806f74:	d8c00b17 	ldw	r3,44(sp)
  806f78:	1800ab1e 	bne	r3,zero,807228 <_dtoa_r+0xdf4>
  806f7c:	dc800717 	ldw	r18,28(sp)
  806f80:	dcc00617 	ldw	r19,24(sp)
  806f84:	9029883a 	mov	r20,r18
  806f88:	00000206 	br	806f94 <_dtoa_r+0xb60>
  806f8c:	0808dec0 	call	808dec <__multadd>
  806f90:	1021883a 	mov	r16,r2
  806f94:	a80b883a 	mov	r5,r21
  806f98:	8009883a 	mov	r4,r16
  806f9c:	08062340 	call	806234 <quorem>
  806fa0:	10800c04 	addi	r2,r2,48
  806fa4:	90800005 	stb	r2,0(r18)
  806fa8:	94800044 	addi	r18,r18,1
  806fac:	9507c83a 	sub	r3,r18,r20
  806fb0:	000f883a 	mov	r7,zero
  806fb4:	01800284 	movi	r6,10
  806fb8:	800b883a 	mov	r5,r16
  806fbc:	e009883a 	mov	r4,fp
  806fc0:	1cfff216 	blt	r3,r19,806f8c <__alt_mem_onchip_mem+0xff786f8c>
  806fc4:	1011883a 	mov	r8,r2
  806fc8:	d8800617 	ldw	r2,24(sp)
  806fcc:	0082370e 	bge	zero,r2,8078ac <_dtoa_r+0x1478>
  806fd0:	d9000717 	ldw	r4,28(sp)
  806fd4:	0025883a 	mov	r18,zero
  806fd8:	20af883a 	add	r23,r4,r2
  806fdc:	01800044 	movi	r6,1
  806fe0:	800b883a 	mov	r5,r16
  806fe4:	e009883a 	mov	r4,fp
  806fe8:	da001715 	stw	r8,92(sp)
  806fec:	080949c0 	call	80949c <__lshift>
  806ff0:	a80b883a 	mov	r5,r21
  806ff4:	1009883a 	mov	r4,r2
  806ff8:	d8800915 	stw	r2,36(sp)
  806ffc:	08095e40 	call	8095e4 <__mcmp>
  807000:	da001717 	ldw	r8,92(sp)
  807004:	0081800e 	bge	zero,r2,807608 <_dtoa_r+0x11d4>
  807008:	b93fffc3 	ldbu	r4,-1(r23)
  80700c:	b8bfffc4 	addi	r2,r23,-1
  807010:	1007883a 	mov	r3,r2
  807014:	01800e44 	movi	r6,57
  807018:	d9c00717 	ldw	r7,28(sp)
  80701c:	00000506 	br	807034 <_dtoa_r+0xc00>
  807020:	18ffffc4 	addi	r3,r3,-1
  807024:	11c12326 	beq	r2,r7,8074b4 <_dtoa_r+0x1080>
  807028:	19000003 	ldbu	r4,0(r3)
  80702c:	102f883a 	mov	r23,r2
  807030:	10bfffc4 	addi	r2,r2,-1
  807034:	21403fcc 	andi	r5,r4,255
  807038:	2940201c 	xori	r5,r5,128
  80703c:	297fe004 	addi	r5,r5,-128
  807040:	29bff726 	beq	r5,r6,807020 <__alt_mem_onchip_mem+0xff787020>
  807044:	21000044 	addi	r4,r4,1
  807048:	11000005 	stb	r4,0(r2)
  80704c:	a80b883a 	mov	r5,r21
  807050:	e009883a 	mov	r4,fp
  807054:	0808dc40 	call	808dc4 <_Bfree>
  807058:	883ea026 	beq	r17,zero,806adc <__alt_mem_onchip_mem+0xff786adc>
  80705c:	90000426 	beq	r18,zero,807070 <_dtoa_r+0xc3c>
  807060:	94400326 	beq	r18,r17,807070 <_dtoa_r+0xc3c>
  807064:	900b883a 	mov	r5,r18
  807068:	e009883a 	mov	r4,fp
  80706c:	0808dc40 	call	808dc4 <_Bfree>
  807070:	880b883a 	mov	r5,r17
  807074:	e009883a 	mov	r4,fp
  807078:	0808dc40 	call	808dc4 <_Bfree>
  80707c:	003e9706 	br	806adc <__alt_mem_onchip_mem+0xff786adc>
  807080:	01800044 	movi	r6,1
  807084:	d9800e15 	stw	r6,56(sp)
  807088:	003d9606 	br	8066e4 <__alt_mem_onchip_mem+0xff7866e4>
  80708c:	d8800817 	ldw	r2,32(sp)
  807090:	d8c00517 	ldw	r3,20(sp)
  807094:	d8000d15 	stw	zero,52(sp)
  807098:	10c5c83a 	sub	r2,r2,r3
  80709c:	00c9c83a 	sub	r4,zero,r3
  8070a0:	d8800815 	stw	r2,32(sp)
  8070a4:	d9000a15 	stw	r4,40(sp)
  8070a8:	003d9706 	br	806708 <__alt_mem_onchip_mem+0xff786708>
  8070ac:	05adc83a 	sub	r22,zero,r22
  8070b0:	dd800815 	stw	r22,32(sp)
  8070b4:	002d883a 	mov	r22,zero
  8070b8:	003d8e06 	br	8066f4 <__alt_mem_onchip_mem+0xff7866f4>
  8070bc:	d9000517 	ldw	r4,20(sp)
  8070c0:	0801a380 	call	801a38 <__floatsidf>
  8070c4:	100d883a 	mov	r6,r2
  8070c8:	180f883a 	mov	r7,r3
  8070cc:	a009883a 	mov	r4,r20
  8070d0:	880b883a 	mov	r5,r17
  8070d4:	080d2840 	call	80d284 <__eqdf2>
  8070d8:	103d7126 	beq	r2,zero,8066a0 <__alt_mem_onchip_mem+0xff7866a0>
  8070dc:	d9c00517 	ldw	r7,20(sp)
  8070e0:	39ffffc4 	addi	r7,r7,-1
  8070e4:	d9c00515 	stw	r7,20(sp)
  8070e8:	003d6d06 	br	8066a0 <__alt_mem_onchip_mem+0xff7866a0>
  8070ec:	dd400a17 	ldw	r21,40(sp)
  8070f0:	dd000817 	ldw	r20,32(sp)
  8070f4:	0023883a 	mov	r17,zero
  8070f8:	003f4806 	br	806e1c <__alt_mem_onchip_mem+0xff786e1c>
  8070fc:	10e3c83a 	sub	r17,r2,r3
  807100:	9448983a 	sll	r4,r18,r17
  807104:	003d3206 	br	8065d0 <__alt_mem_onchip_mem+0xff7865d0>
  807108:	d8000e15 	stw	zero,56(sp)
  80710c:	003d7506 	br	8066e4 <__alt_mem_onchip_mem+0xff7866e4>
  807110:	b005883a 	mov	r2,r22
  807114:	003f4506 	br	806e2c <__alt_mem_onchip_mem+0xff786e2c>
  807118:	dc000915 	stw	r16,36(sp)
  80711c:	d9800a17 	ldw	r6,40(sp)
  807120:	d9400917 	ldw	r5,36(sp)
  807124:	e009883a 	mov	r4,fp
  807128:	080935c0 	call	80935c <__pow5mult>
  80712c:	1021883a 	mov	r16,r2
  807130:	003f5a06 	br	806e9c <__alt_mem_onchip_mem+0xff786e9c>
  807134:	01c00044 	movi	r7,1
  807138:	d9c00b15 	stw	r7,44(sp)
  80713c:	d8802217 	ldw	r2,136(sp)
  807140:	0081280e 	bge	zero,r2,8075e4 <_dtoa_r+0x11b0>
  807144:	100d883a 	mov	r6,r2
  807148:	1021883a 	mov	r16,r2
  80714c:	d8800c15 	stw	r2,48(sp)
  807150:	d8800615 	stw	r2,24(sp)
  807154:	003d8806 	br	806778 <__alt_mem_onchip_mem+0xff786778>
  807158:	d8800617 	ldw	r2,24(sp)
  80715c:	00be9b16 	blt	zero,r2,806bcc <__alt_mem_onchip_mem+0xff786bcc>
  807160:	10010f1e 	bne	r2,zero,8075a0 <_dtoa_r+0x116c>
  807164:	880b883a 	mov	r5,r17
  807168:	000d883a 	mov	r6,zero
  80716c:	01d00534 	movhi	r7,16404
  807170:	8009883a 	mov	r4,r16
  807174:	080d4dc0 	call	80d4dc <__muldf3>
  807178:	900d883a 	mov	r6,r18
  80717c:	980f883a 	mov	r7,r19
  807180:	1009883a 	mov	r4,r2
  807184:	180b883a 	mov	r5,r3
  807188:	080d30c0 	call	80d30c <__gedf2>
  80718c:	002b883a 	mov	r21,zero
  807190:	0023883a 	mov	r17,zero
  807194:	1000bf16 	blt	r2,zero,807494 <_dtoa_r+0x1060>
  807198:	d9802217 	ldw	r6,136(sp)
  80719c:	ddc00717 	ldw	r23,28(sp)
  8071a0:	018c303a 	nor	r6,zero,r6
  8071a4:	d9800515 	stw	r6,20(sp)
  8071a8:	a80b883a 	mov	r5,r21
  8071ac:	e009883a 	mov	r4,fp
  8071b0:	0808dc40 	call	808dc4 <_Bfree>
  8071b4:	883e4926 	beq	r17,zero,806adc <__alt_mem_onchip_mem+0xff786adc>
  8071b8:	003fad06 	br	807070 <__alt_mem_onchip_mem+0xff787070>
  8071bc:	d9c01117 	ldw	r7,68(sp)
  8071c0:	3801bc26 	beq	r7,zero,8078b4 <_dtoa_r+0x1480>
  8071c4:	10810cc4 	addi	r2,r2,1075
  8071c8:	dd400a17 	ldw	r21,40(sp)
  8071cc:	dd000817 	ldw	r20,32(sp)
  8071d0:	003f0a06 	br	806dfc <__alt_mem_onchip_mem+0xff786dfc>
  8071d4:	00800704 	movi	r2,28
  8071d8:	d9000817 	ldw	r4,32(sp)
  8071dc:	a0a9883a 	add	r20,r20,r2
  8071e0:	b0ad883a 	add	r22,r22,r2
  8071e4:	2089883a 	add	r4,r4,r2
  8071e8:	d9000815 	stw	r4,32(sp)
  8071ec:	003f5106 	br	806f34 <__alt_mem_onchip_mem+0xff786f34>
  8071f0:	d8c00317 	ldw	r3,12(sp)
  8071f4:	b8c1fc0e 	bge	r23,r3,8079e8 <_dtoa_r+0x15b4>
  8071f8:	0027883a 	mov	r19,zero
  8071fc:	b805883a 	mov	r2,r23
  807200:	003f3e06 	br	806efc <__alt_mem_onchip_mem+0xff786efc>
  807204:	880b883a 	mov	r5,r17
  807208:	e009883a 	mov	r4,fp
  80720c:	000f883a 	mov	r7,zero
  807210:	01800284 	movi	r6,10
  807214:	0808dec0 	call	808dec <__multadd>
  807218:	d9000c17 	ldw	r4,48(sp)
  80721c:	1023883a 	mov	r17,r2
  807220:	0102040e 	bge	zero,r4,807a34 <_dtoa_r+0x1600>
  807224:	d9000615 	stw	r4,24(sp)
  807228:	0500050e 	bge	zero,r20,807240 <_dtoa_r+0xe0c>
  80722c:	880b883a 	mov	r5,r17
  807230:	a00d883a 	mov	r6,r20
  807234:	e009883a 	mov	r4,fp
  807238:	080949c0 	call	80949c <__lshift>
  80723c:	1023883a 	mov	r17,r2
  807240:	9801241e 	bne	r19,zero,8076d4 <_dtoa_r+0x12a0>
  807244:	8829883a 	mov	r20,r17
  807248:	d9000617 	ldw	r4,24(sp)
  80724c:	dcc00717 	ldw	r19,28(sp)
  807250:	9480004c 	andi	r18,r18,1
  807254:	20bfffc4 	addi	r2,r4,-1
  807258:	9885883a 	add	r2,r19,r2
  80725c:	d8800415 	stw	r2,16(sp)
  807260:	dc800615 	stw	r18,24(sp)
  807264:	a80b883a 	mov	r5,r21
  807268:	8009883a 	mov	r4,r16
  80726c:	08062340 	call	806234 <quorem>
  807270:	880b883a 	mov	r5,r17
  807274:	8009883a 	mov	r4,r16
  807278:	102f883a 	mov	r23,r2
  80727c:	08095e40 	call	8095e4 <__mcmp>
  807280:	a80b883a 	mov	r5,r21
  807284:	a00d883a 	mov	r6,r20
  807288:	e009883a 	mov	r4,fp
  80728c:	102d883a 	mov	r22,r2
  807290:	08096440 	call	809644 <__mdiff>
  807294:	1007883a 	mov	r3,r2
  807298:	10800317 	ldw	r2,12(r2)
  80729c:	bc800c04 	addi	r18,r23,48
  8072a0:	180b883a 	mov	r5,r3
  8072a4:	10004e1e 	bne	r2,zero,8073e0 <_dtoa_r+0xfac>
  8072a8:	8009883a 	mov	r4,r16
  8072ac:	d8c01615 	stw	r3,88(sp)
  8072b0:	08095e40 	call	8095e4 <__mcmp>
  8072b4:	d8c01617 	ldw	r3,88(sp)
  8072b8:	e009883a 	mov	r4,fp
  8072bc:	d8801615 	stw	r2,88(sp)
  8072c0:	180b883a 	mov	r5,r3
  8072c4:	0808dc40 	call	808dc4 <_Bfree>
  8072c8:	d8801617 	ldw	r2,88(sp)
  8072cc:	1000041e 	bne	r2,zero,8072e0 <_dtoa_r+0xeac>
  8072d0:	d9800317 	ldw	r6,12(sp)
  8072d4:	3000021e 	bne	r6,zero,8072e0 <_dtoa_r+0xeac>
  8072d8:	d8c00617 	ldw	r3,24(sp)
  8072dc:	18003726 	beq	r3,zero,8073bc <_dtoa_r+0xf88>
  8072e0:	b0002016 	blt	r22,zero,807364 <_dtoa_r+0xf30>
  8072e4:	b000041e 	bne	r22,zero,8072f8 <_dtoa_r+0xec4>
  8072e8:	d9000317 	ldw	r4,12(sp)
  8072ec:	2000021e 	bne	r4,zero,8072f8 <_dtoa_r+0xec4>
  8072f0:	d8c00617 	ldw	r3,24(sp)
  8072f4:	18001b26 	beq	r3,zero,807364 <_dtoa_r+0xf30>
  8072f8:	00810716 	blt	zero,r2,807718 <_dtoa_r+0x12e4>
  8072fc:	d8c00417 	ldw	r3,16(sp)
  807300:	9d800044 	addi	r22,r19,1
  807304:	9c800005 	stb	r18,0(r19)
  807308:	b02f883a 	mov	r23,r22
  80730c:	98c10626 	beq	r19,r3,807728 <_dtoa_r+0x12f4>
  807310:	800b883a 	mov	r5,r16
  807314:	000f883a 	mov	r7,zero
  807318:	01800284 	movi	r6,10
  80731c:	e009883a 	mov	r4,fp
  807320:	0808dec0 	call	808dec <__multadd>
  807324:	1021883a 	mov	r16,r2
  807328:	000f883a 	mov	r7,zero
  80732c:	01800284 	movi	r6,10
  807330:	880b883a 	mov	r5,r17
  807334:	e009883a 	mov	r4,fp
  807338:	8d002526 	beq	r17,r20,8073d0 <_dtoa_r+0xf9c>
  80733c:	0808dec0 	call	808dec <__multadd>
  807340:	a00b883a 	mov	r5,r20
  807344:	000f883a 	mov	r7,zero
  807348:	01800284 	movi	r6,10
  80734c:	e009883a 	mov	r4,fp
  807350:	1023883a 	mov	r17,r2
  807354:	0808dec0 	call	808dec <__multadd>
  807358:	1029883a 	mov	r20,r2
  80735c:	b027883a 	mov	r19,r22
  807360:	003fc006 	br	807264 <__alt_mem_onchip_mem+0xff787264>
  807364:	9011883a 	mov	r8,r18
  807368:	00800e0e 	bge	zero,r2,8073a4 <_dtoa_r+0xf70>
  80736c:	800b883a 	mov	r5,r16
  807370:	01800044 	movi	r6,1
  807374:	e009883a 	mov	r4,fp
  807378:	da001715 	stw	r8,92(sp)
  80737c:	080949c0 	call	80949c <__lshift>
  807380:	a80b883a 	mov	r5,r21
  807384:	1009883a 	mov	r4,r2
  807388:	1021883a 	mov	r16,r2
  80738c:	08095e40 	call	8095e4 <__mcmp>
  807390:	da001717 	ldw	r8,92(sp)
  807394:	0081960e 	bge	zero,r2,8079f0 <_dtoa_r+0x15bc>
  807398:	00800e44 	movi	r2,57
  80739c:	40817026 	beq	r8,r2,807960 <_dtoa_r+0x152c>
  8073a0:	ba000c44 	addi	r8,r23,49
  8073a4:	8825883a 	mov	r18,r17
  8073a8:	9dc00044 	addi	r23,r19,1
  8073ac:	9a000005 	stb	r8,0(r19)
  8073b0:	a023883a 	mov	r17,r20
  8073b4:	dc000915 	stw	r16,36(sp)
  8073b8:	003f2406 	br	80704c <__alt_mem_onchip_mem+0xff78704c>
  8073bc:	00800e44 	movi	r2,57
  8073c0:	9011883a 	mov	r8,r18
  8073c4:	90816626 	beq	r18,r2,807960 <_dtoa_r+0x152c>
  8073c8:	05bff516 	blt	zero,r22,8073a0 <__alt_mem_onchip_mem+0xff7873a0>
  8073cc:	003ff506 	br	8073a4 <__alt_mem_onchip_mem+0xff7873a4>
  8073d0:	0808dec0 	call	808dec <__multadd>
  8073d4:	1023883a 	mov	r17,r2
  8073d8:	1029883a 	mov	r20,r2
  8073dc:	003fdf06 	br	80735c <__alt_mem_onchip_mem+0xff78735c>
  8073e0:	e009883a 	mov	r4,fp
  8073e4:	0808dc40 	call	808dc4 <_Bfree>
  8073e8:	00800044 	movi	r2,1
  8073ec:	003fbc06 	br	8072e0 <__alt_mem_onchip_mem+0xff7872e0>
  8073f0:	a80b883a 	mov	r5,r21
  8073f4:	8009883a 	mov	r4,r16
  8073f8:	08095e40 	call	8095e4 <__mcmp>
  8073fc:	103edb0e 	bge	r2,zero,806f6c <__alt_mem_onchip_mem+0xff786f6c>
  807400:	800b883a 	mov	r5,r16
  807404:	000f883a 	mov	r7,zero
  807408:	01800284 	movi	r6,10
  80740c:	e009883a 	mov	r4,fp
  807410:	0808dec0 	call	808dec <__multadd>
  807414:	1021883a 	mov	r16,r2
  807418:	d8800517 	ldw	r2,20(sp)
  80741c:	d8c00b17 	ldw	r3,44(sp)
  807420:	10bfffc4 	addi	r2,r2,-1
  807424:	d8800515 	stw	r2,20(sp)
  807428:	183f761e 	bne	r3,zero,807204 <__alt_mem_onchip_mem+0xff787204>
  80742c:	d9000c17 	ldw	r4,48(sp)
  807430:	0101730e 	bge	zero,r4,807a00 <_dtoa_r+0x15cc>
  807434:	d9000615 	stw	r4,24(sp)
  807438:	003ed006 	br	806f7c <__alt_mem_onchip_mem+0xff786f7c>
  80743c:	00800084 	movi	r2,2
  807440:	3081861e 	bne	r6,r2,807a5c <_dtoa_r+0x1628>
  807444:	d8000b15 	stw	zero,44(sp)
  807448:	003f3c06 	br	80713c <__alt_mem_onchip_mem+0xff78713c>
  80744c:	dc000917 	ldw	r16,36(sp)
  807450:	003e9206 	br	806e9c <__alt_mem_onchip_mem+0xff786e9c>
  807454:	d9c00317 	ldw	r7,12(sp)
  807458:	00800084 	movi	r2,2
  80745c:	11fec50e 	bge	r2,r7,806f74 <__alt_mem_onchip_mem+0xff786f74>
  807460:	d9000617 	ldw	r4,24(sp)
  807464:	20013c1e 	bne	r4,zero,807958 <_dtoa_r+0x1524>
  807468:	a80b883a 	mov	r5,r21
  80746c:	000f883a 	mov	r7,zero
  807470:	01800144 	movi	r6,5
  807474:	e009883a 	mov	r4,fp
  807478:	0808dec0 	call	808dec <__multadd>
  80747c:	100b883a 	mov	r5,r2
  807480:	8009883a 	mov	r4,r16
  807484:	102b883a 	mov	r21,r2
  807488:	08095e40 	call	8095e4 <__mcmp>
  80748c:	dc000915 	stw	r16,36(sp)
  807490:	00bf410e 	bge	zero,r2,807198 <__alt_mem_onchip_mem+0xff787198>
  807494:	d9c00717 	ldw	r7,28(sp)
  807498:	00800c44 	movi	r2,49
  80749c:	38800005 	stb	r2,0(r7)
  8074a0:	d8800517 	ldw	r2,20(sp)
  8074a4:	3dc00044 	addi	r23,r7,1
  8074a8:	10800044 	addi	r2,r2,1
  8074ac:	d8800515 	stw	r2,20(sp)
  8074b0:	003f3d06 	br	8071a8 <__alt_mem_onchip_mem+0xff7871a8>
  8074b4:	d9800517 	ldw	r6,20(sp)
  8074b8:	d9c00717 	ldw	r7,28(sp)
  8074bc:	00800c44 	movi	r2,49
  8074c0:	31800044 	addi	r6,r6,1
  8074c4:	d9800515 	stw	r6,20(sp)
  8074c8:	38800005 	stb	r2,0(r7)
  8074cc:	003edf06 	br	80704c <__alt_mem_onchip_mem+0xff78704c>
  8074d0:	d8000b15 	stw	zero,44(sp)
  8074d4:	003c9f06 	br	806754 <__alt_mem_onchip_mem+0xff786754>
  8074d8:	903e7e1e 	bne	r18,zero,806ed4 <__alt_mem_onchip_mem+0xff786ed4>
  8074dc:	00800434 	movhi	r2,16
  8074e0:	10bfffc4 	addi	r2,r2,-1
  8074e4:	9884703a 	and	r2,r19,r2
  8074e8:	1000ea1e 	bne	r2,zero,807894 <_dtoa_r+0x1460>
  8074ec:	9cdffc2c 	andhi	r19,r19,32752
  8074f0:	9800e826 	beq	r19,zero,807894 <_dtoa_r+0x1460>
  8074f4:	d9c00817 	ldw	r7,32(sp)
  8074f8:	b5800044 	addi	r22,r22,1
  8074fc:	04c00044 	movi	r19,1
  807500:	39c00044 	addi	r7,r7,1
  807504:	d9c00815 	stw	r7,32(sp)
  807508:	d8800d17 	ldw	r2,52(sp)
  80750c:	103e721e 	bne	r2,zero,806ed8 <__alt_mem_onchip_mem+0xff786ed8>
  807510:	00800044 	movi	r2,1
  807514:	003e7906 	br	806efc <__alt_mem_onchip_mem+0xff786efc>
  807518:	8009883a 	mov	r4,r16
  80751c:	0801a380 	call	801a38 <__floatsidf>
  807520:	d9800f17 	ldw	r6,60(sp)
  807524:	d9c01017 	ldw	r7,64(sp)
  807528:	1009883a 	mov	r4,r2
  80752c:	180b883a 	mov	r5,r3
  807530:	080d4dc0 	call	80d4dc <__muldf3>
  807534:	000d883a 	mov	r6,zero
  807538:	01d00734 	movhi	r7,16412
  80753c:	1009883a 	mov	r4,r2
  807540:	180b883a 	mov	r5,r3
  807544:	080c9d80 	call	80c9d8 <__adddf3>
  807548:	047f3034 	movhi	r17,64704
  80754c:	1021883a 	mov	r16,r2
  807550:	1c63883a 	add	r17,r3,r17
  807554:	d9000f17 	ldw	r4,60(sp)
  807558:	d9401017 	ldw	r5,64(sp)
  80755c:	000d883a 	mov	r6,zero
  807560:	01d00534 	movhi	r7,16404
  807564:	080dbf40 	call	80dbf4 <__subdf3>
  807568:	800d883a 	mov	r6,r16
  80756c:	880f883a 	mov	r7,r17
  807570:	1009883a 	mov	r4,r2
  807574:	180b883a 	mov	r5,r3
  807578:	102b883a 	mov	r21,r2
  80757c:	1829883a 	mov	r20,r3
  807580:	080d30c0 	call	80d30c <__gedf2>
  807584:	00806c16 	blt	zero,r2,807738 <_dtoa_r+0x1304>
  807588:	89e0003c 	xorhi	r7,r17,32768
  80758c:	800d883a 	mov	r6,r16
  807590:	a809883a 	mov	r4,r21
  807594:	a00b883a 	mov	r5,r20
  807598:	080d3e80 	call	80d3e8 <__ledf2>
  80759c:	103d7e0e 	bge	r2,zero,806b98 <__alt_mem_onchip_mem+0xff786b98>
  8075a0:	002b883a 	mov	r21,zero
  8075a4:	0023883a 	mov	r17,zero
  8075a8:	003efb06 	br	807198 <__alt_mem_onchip_mem+0xff787198>
  8075ac:	d8800717 	ldw	r2,28(sp)
  8075b0:	003bd006 	br	8064f4 <__alt_mem_onchip_mem+0xff7864f4>
  8075b4:	d9000a17 	ldw	r4,40(sp)
  8075b8:	d9800d17 	ldw	r6,52(sp)
  8075bc:	dd400a15 	stw	r21,40(sp)
  8075c0:	a905c83a 	sub	r2,r21,r4
  8075c4:	308d883a 	add	r6,r6,r2
  8075c8:	d9800d15 	stw	r6,52(sp)
  8075cc:	002b883a 	mov	r21,zero
  8075d0:	003e0606 	br	806dec <__alt_mem_onchip_mem+0xff786dec>
  8075d4:	9023883a 	mov	r17,r18
  8075d8:	9829883a 	mov	r20,r19
  8075dc:	04000084 	movi	r16,2
  8075e0:	003c9206 	br	80682c <__alt_mem_onchip_mem+0xff78682c>
  8075e4:	04000044 	movi	r16,1
  8075e8:	dc000c15 	stw	r16,48(sp)
  8075ec:	dc000615 	stw	r16,24(sp)
  8075f0:	dc002215 	stw	r16,136(sp)
  8075f4:	e0001115 	stw	zero,68(fp)
  8075f8:	000b883a 	mov	r5,zero
  8075fc:	003c6906 	br	8067a4 <__alt_mem_onchip_mem+0xff7867a4>
  807600:	3021883a 	mov	r16,r6
  807604:	003ffb06 	br	8075f4 <__alt_mem_onchip_mem+0xff7875f4>
  807608:	1000021e 	bne	r2,zero,807614 <_dtoa_r+0x11e0>
  80760c:	4200004c 	andi	r8,r8,1
  807610:	403e7d1e 	bne	r8,zero,807008 <__alt_mem_onchip_mem+0xff787008>
  807614:	01000c04 	movi	r4,48
  807618:	00000106 	br	807620 <_dtoa_r+0x11ec>
  80761c:	102f883a 	mov	r23,r2
  807620:	b8bfffc4 	addi	r2,r23,-1
  807624:	10c00007 	ldb	r3,0(r2)
  807628:	193ffc26 	beq	r3,r4,80761c <__alt_mem_onchip_mem+0xff78761c>
  80762c:	003e8706 	br	80704c <__alt_mem_onchip_mem+0xff78704c>
  807630:	d8800517 	ldw	r2,20(sp)
  807634:	00a3c83a 	sub	r17,zero,r2
  807638:	8800a426 	beq	r17,zero,8078cc <_dtoa_r+0x1498>
  80763c:	888003cc 	andi	r2,r17,15
  807640:	100490fa 	slli	r2,r2,3
  807644:	00c02074 	movhi	r3,129
  807648:	18cb1f04 	addi	r3,r3,11388
  80764c:	1885883a 	add	r2,r3,r2
  807650:	11800017 	ldw	r6,0(r2)
  807654:	11c00117 	ldw	r7,4(r2)
  807658:	9009883a 	mov	r4,r18
  80765c:	980b883a 	mov	r5,r19
  807660:	8823d13a 	srai	r17,r17,4
  807664:	080d4dc0 	call	80d4dc <__muldf3>
  807668:	d8800f15 	stw	r2,60(sp)
  80766c:	d8c01015 	stw	r3,64(sp)
  807670:	8800e826 	beq	r17,zero,807a14 <_dtoa_r+0x15e0>
  807674:	05002074 	movhi	r20,129
  807678:	a50b1504 	addi	r20,r20,11348
  80767c:	04000084 	movi	r16,2
  807680:	8980004c 	andi	r6,r17,1
  807684:	1009883a 	mov	r4,r2
  807688:	8823d07a 	srai	r17,r17,1
  80768c:	180b883a 	mov	r5,r3
  807690:	30000426 	beq	r6,zero,8076a4 <_dtoa_r+0x1270>
  807694:	a1800017 	ldw	r6,0(r20)
  807698:	a1c00117 	ldw	r7,4(r20)
  80769c:	84000044 	addi	r16,r16,1
  8076a0:	080d4dc0 	call	80d4dc <__muldf3>
  8076a4:	a5000204 	addi	r20,r20,8
  8076a8:	883ff51e 	bne	r17,zero,807680 <__alt_mem_onchip_mem+0xff787680>
  8076ac:	d8800f15 	stw	r2,60(sp)
  8076b0:	d8c01015 	stw	r3,64(sp)
  8076b4:	003c7606 	br	806890 <__alt_mem_onchip_mem+0xff786890>
  8076b8:	00c00c04 	movi	r3,48
  8076bc:	10c00005 	stb	r3,0(r2)
  8076c0:	d8c00517 	ldw	r3,20(sp)
  8076c4:	bd3fffc3 	ldbu	r20,-1(r23)
  8076c8:	18c00044 	addi	r3,r3,1
  8076cc:	d8c00515 	stw	r3,20(sp)
  8076d0:	003db906 	br	806db8 <__alt_mem_onchip_mem+0xff786db8>
  8076d4:	89400117 	ldw	r5,4(r17)
  8076d8:	e009883a 	mov	r4,fp
  8076dc:	0808d1c0 	call	808d1c <_Balloc>
  8076e0:	89800417 	ldw	r6,16(r17)
  8076e4:	89400304 	addi	r5,r17,12
  8076e8:	11000304 	addi	r4,r2,12
  8076ec:	31800084 	addi	r6,r6,2
  8076f0:	318d883a 	add	r6,r6,r6
  8076f4:	318d883a 	add	r6,r6,r6
  8076f8:	1027883a 	mov	r19,r2
  8076fc:	0808a780 	call	808a78 <memcpy>
  807700:	01800044 	movi	r6,1
  807704:	980b883a 	mov	r5,r19
  807708:	e009883a 	mov	r4,fp
  80770c:	080949c0 	call	80949c <__lshift>
  807710:	1029883a 	mov	r20,r2
  807714:	003ecc06 	br	807248 <__alt_mem_onchip_mem+0xff787248>
  807718:	00800e44 	movi	r2,57
  80771c:	90809026 	beq	r18,r2,807960 <_dtoa_r+0x152c>
  807720:	92000044 	addi	r8,r18,1
  807724:	003f1f06 	br	8073a4 <__alt_mem_onchip_mem+0xff7873a4>
  807728:	9011883a 	mov	r8,r18
  80772c:	8825883a 	mov	r18,r17
  807730:	a023883a 	mov	r17,r20
  807734:	003e2906 	br	806fdc <__alt_mem_onchip_mem+0xff786fdc>
  807738:	002b883a 	mov	r21,zero
  80773c:	0023883a 	mov	r17,zero
  807740:	003f5406 	br	807494 <__alt_mem_onchip_mem+0xff787494>
  807744:	61bfffc4 	addi	r6,r12,-1
  807748:	300490fa 	slli	r2,r6,3
  80774c:	00c02074 	movhi	r3,129
  807750:	18cb1f04 	addi	r3,r3,11388
  807754:	1885883a 	add	r2,r3,r2
  807758:	11000017 	ldw	r4,0(r2)
  80775c:	11400117 	ldw	r5,4(r2)
  807760:	d8800717 	ldw	r2,28(sp)
  807764:	880f883a 	mov	r7,r17
  807768:	d9801215 	stw	r6,72(sp)
  80776c:	800d883a 	mov	r6,r16
  807770:	db001615 	stw	r12,88(sp)
  807774:	15c00044 	addi	r23,r2,1
  807778:	080d4dc0 	call	80d4dc <__muldf3>
  80777c:	d9401017 	ldw	r5,64(sp)
  807780:	d9000f17 	ldw	r4,60(sp)
  807784:	d8c01515 	stw	r3,84(sp)
  807788:	d8801415 	stw	r2,80(sp)
  80778c:	080e4f00 	call	80e4f0 <__fixdfsi>
  807790:	1009883a 	mov	r4,r2
  807794:	1021883a 	mov	r16,r2
  807798:	0801a380 	call	801a38 <__floatsidf>
  80779c:	d9000f17 	ldw	r4,60(sp)
  8077a0:	d9401017 	ldw	r5,64(sp)
  8077a4:	100d883a 	mov	r6,r2
  8077a8:	180f883a 	mov	r7,r3
  8077ac:	080dbf40 	call	80dbf4 <__subdf3>
  8077b0:	1829883a 	mov	r20,r3
  8077b4:	d8c00717 	ldw	r3,28(sp)
  8077b8:	84000c04 	addi	r16,r16,48
  8077bc:	1023883a 	mov	r17,r2
  8077c0:	1c000005 	stb	r16,0(r3)
  8077c4:	db001617 	ldw	r12,88(sp)
  8077c8:	00800044 	movi	r2,1
  8077cc:	60802226 	beq	r12,r2,807858 <_dtoa_r+0x1424>
  8077d0:	d9c00717 	ldw	r7,28(sp)
  8077d4:	8805883a 	mov	r2,r17
  8077d8:	b82b883a 	mov	r21,r23
  8077dc:	3b19883a 	add	r12,r7,r12
  8077e0:	6023883a 	mov	r17,r12
  8077e4:	a007883a 	mov	r3,r20
  8077e8:	dc800f15 	stw	r18,60(sp)
  8077ec:	000d883a 	mov	r6,zero
  8077f0:	01d00934 	movhi	r7,16420
  8077f4:	1009883a 	mov	r4,r2
  8077f8:	180b883a 	mov	r5,r3
  8077fc:	080d4dc0 	call	80d4dc <__muldf3>
  807800:	180b883a 	mov	r5,r3
  807804:	1009883a 	mov	r4,r2
  807808:	1829883a 	mov	r20,r3
  80780c:	1025883a 	mov	r18,r2
  807810:	080e4f00 	call	80e4f0 <__fixdfsi>
  807814:	1009883a 	mov	r4,r2
  807818:	1021883a 	mov	r16,r2
  80781c:	0801a380 	call	801a38 <__floatsidf>
  807820:	100d883a 	mov	r6,r2
  807824:	180f883a 	mov	r7,r3
  807828:	9009883a 	mov	r4,r18
  80782c:	a00b883a 	mov	r5,r20
  807830:	84000c04 	addi	r16,r16,48
  807834:	080dbf40 	call	80dbf4 <__subdf3>
  807838:	ad400044 	addi	r21,r21,1
  80783c:	ac3fffc5 	stb	r16,-1(r21)
  807840:	ac7fea1e 	bne	r21,r17,8077ec <__alt_mem_onchip_mem+0xff7877ec>
  807844:	1023883a 	mov	r17,r2
  807848:	d8801217 	ldw	r2,72(sp)
  80784c:	dc800f17 	ldw	r18,60(sp)
  807850:	1829883a 	mov	r20,r3
  807854:	b8af883a 	add	r23,r23,r2
  807858:	d9001417 	ldw	r4,80(sp)
  80785c:	d9401517 	ldw	r5,84(sp)
  807860:	000d883a 	mov	r6,zero
  807864:	01cff834 	movhi	r7,16352
  807868:	080c9d80 	call	80c9d8 <__adddf3>
  80786c:	880d883a 	mov	r6,r17
  807870:	a00f883a 	mov	r7,r20
  807874:	1009883a 	mov	r4,r2
  807878:	180b883a 	mov	r5,r3
  80787c:	080d3e80 	call	80d3e8 <__ledf2>
  807880:	10003e0e 	bge	r2,zero,80797c <_dtoa_r+0x1548>
  807884:	d9001317 	ldw	r4,76(sp)
  807888:	bd3fffc3 	ldbu	r20,-1(r23)
  80788c:	d9000515 	stw	r4,20(sp)
  807890:	003d3b06 	br	806d80 <__alt_mem_onchip_mem+0xff786d80>
  807894:	0027883a 	mov	r19,zero
  807898:	003f1b06 	br	807508 <__alt_mem_onchip_mem+0xff787508>
  80789c:	d8800817 	ldw	r2,32(sp)
  8078a0:	11e9c83a 	sub	r20,r2,r7
  8078a4:	0005883a 	mov	r2,zero
  8078a8:	003d5406 	br	806dfc <__alt_mem_onchip_mem+0xff786dfc>
  8078ac:	00800044 	movi	r2,1
  8078b0:	003dc706 	br	806fd0 <__alt_mem_onchip_mem+0xff786fd0>
  8078b4:	d8c00217 	ldw	r3,8(sp)
  8078b8:	00800d84 	movi	r2,54
  8078bc:	dd400a17 	ldw	r21,40(sp)
  8078c0:	10c5c83a 	sub	r2,r2,r3
  8078c4:	dd000817 	ldw	r20,32(sp)
  8078c8:	003d4c06 	br	806dfc <__alt_mem_onchip_mem+0xff786dfc>
  8078cc:	dc800f15 	stw	r18,60(sp)
  8078d0:	dcc01015 	stw	r19,64(sp)
  8078d4:	04000084 	movi	r16,2
  8078d8:	003bed06 	br	806890 <__alt_mem_onchip_mem+0xff786890>
  8078dc:	d9000617 	ldw	r4,24(sp)
  8078e0:	203f0d26 	beq	r4,zero,807518 <__alt_mem_onchip_mem+0xff787518>
  8078e4:	d9800c17 	ldw	r6,48(sp)
  8078e8:	01bcab0e 	bge	zero,r6,806b98 <__alt_mem_onchip_mem+0xff786b98>
  8078ec:	d9401017 	ldw	r5,64(sp)
  8078f0:	d9000f17 	ldw	r4,60(sp)
  8078f4:	000d883a 	mov	r6,zero
  8078f8:	01d00934 	movhi	r7,16420
  8078fc:	080d4dc0 	call	80d4dc <__muldf3>
  807900:	81000044 	addi	r4,r16,1
  807904:	d8800f15 	stw	r2,60(sp)
  807908:	d8c01015 	stw	r3,64(sp)
  80790c:	0801a380 	call	801a38 <__floatsidf>
  807910:	d9800f17 	ldw	r6,60(sp)
  807914:	d9c01017 	ldw	r7,64(sp)
  807918:	1009883a 	mov	r4,r2
  80791c:	180b883a 	mov	r5,r3
  807920:	080d4dc0 	call	80d4dc <__muldf3>
  807924:	01d00734 	movhi	r7,16412
  807928:	000d883a 	mov	r6,zero
  80792c:	1009883a 	mov	r4,r2
  807930:	180b883a 	mov	r5,r3
  807934:	080c9d80 	call	80c9d8 <__adddf3>
  807938:	d9c00517 	ldw	r7,20(sp)
  80793c:	047f3034 	movhi	r17,64704
  807940:	1021883a 	mov	r16,r2
  807944:	39ffffc4 	addi	r7,r7,-1
  807948:	d9c01315 	stw	r7,76(sp)
  80794c:	1c63883a 	add	r17,r3,r17
  807950:	db000c17 	ldw	r12,48(sp)
  807954:	003bea06 	br	806900 <__alt_mem_onchip_mem+0xff786900>
  807958:	dc000915 	stw	r16,36(sp)
  80795c:	003e0e06 	br	807198 <__alt_mem_onchip_mem+0xff787198>
  807960:	01000e44 	movi	r4,57
  807964:	8825883a 	mov	r18,r17
  807968:	9dc00044 	addi	r23,r19,1
  80796c:	99000005 	stb	r4,0(r19)
  807970:	a023883a 	mov	r17,r20
  807974:	dc000915 	stw	r16,36(sp)
  807978:	003da406 	br	80700c <__alt_mem_onchip_mem+0xff78700c>
  80797c:	d9801417 	ldw	r6,80(sp)
  807980:	d9c01517 	ldw	r7,84(sp)
  807984:	0009883a 	mov	r4,zero
  807988:	014ff834 	movhi	r5,16352
  80798c:	080dbf40 	call	80dbf4 <__subdf3>
  807990:	880d883a 	mov	r6,r17
  807994:	a00f883a 	mov	r7,r20
  807998:	1009883a 	mov	r4,r2
  80799c:	180b883a 	mov	r5,r3
  8079a0:	080d30c0 	call	80d30c <__gedf2>
  8079a4:	00bc7c0e 	bge	zero,r2,806b98 <__alt_mem_onchip_mem+0xff786b98>
  8079a8:	01000c04 	movi	r4,48
  8079ac:	00000106 	br	8079b4 <_dtoa_r+0x1580>
  8079b0:	102f883a 	mov	r23,r2
  8079b4:	b8bfffc4 	addi	r2,r23,-1
  8079b8:	10c00007 	ldb	r3,0(r2)
  8079bc:	193ffc26 	beq	r3,r4,8079b0 <__alt_mem_onchip_mem+0xff7879b0>
  8079c0:	d9801317 	ldw	r6,76(sp)
  8079c4:	d9800515 	stw	r6,20(sp)
  8079c8:	003c4406 	br	806adc <__alt_mem_onchip_mem+0xff786adc>
  8079cc:	d9801317 	ldw	r6,76(sp)
  8079d0:	d9800515 	stw	r6,20(sp)
  8079d4:	003cea06 	br	806d80 <__alt_mem_onchip_mem+0xff786d80>
  8079d8:	dd800f17 	ldw	r22,60(sp)
  8079dc:	dcc01017 	ldw	r19,64(sp)
  8079e0:	dc801217 	ldw	r18,72(sp)
  8079e4:	003c6c06 	br	806b98 <__alt_mem_onchip_mem+0xff786b98>
  8079e8:	903e031e 	bne	r18,zero,8071f8 <__alt_mem_onchip_mem+0xff7871f8>
  8079ec:	003ebb06 	br	8074dc <__alt_mem_onchip_mem+0xff7874dc>
  8079f0:	103e6c1e 	bne	r2,zero,8073a4 <__alt_mem_onchip_mem+0xff7873a4>
  8079f4:	4080004c 	andi	r2,r8,1
  8079f8:	103e6a26 	beq	r2,zero,8073a4 <__alt_mem_onchip_mem+0xff7873a4>
  8079fc:	003e6606 	br	807398 <__alt_mem_onchip_mem+0xff787398>
  807a00:	d8c00317 	ldw	r3,12(sp)
  807a04:	00800084 	movi	r2,2
  807a08:	10c02916 	blt	r2,r3,807ab0 <_dtoa_r+0x167c>
  807a0c:	d9000c17 	ldw	r4,48(sp)
  807a10:	003e8806 	br	807434 <__alt_mem_onchip_mem+0xff787434>
  807a14:	04000084 	movi	r16,2
  807a18:	003b9d06 	br	806890 <__alt_mem_onchip_mem+0xff786890>
  807a1c:	d9001317 	ldw	r4,76(sp)
  807a20:	d9000515 	stw	r4,20(sp)
  807a24:	003cd606 	br	806d80 <__alt_mem_onchip_mem+0xff786d80>
  807a28:	d8801317 	ldw	r2,76(sp)
  807a2c:	d8800515 	stw	r2,20(sp)
  807a30:	003c2a06 	br	806adc <__alt_mem_onchip_mem+0xff786adc>
  807a34:	d9800317 	ldw	r6,12(sp)
  807a38:	00800084 	movi	r2,2
  807a3c:	11801516 	blt	r2,r6,807a94 <_dtoa_r+0x1660>
  807a40:	d9c00c17 	ldw	r7,48(sp)
  807a44:	d9c00615 	stw	r7,24(sp)
  807a48:	003df706 	br	807228 <__alt_mem_onchip_mem+0xff787228>
  807a4c:	193d3926 	beq	r3,r4,806f34 <__alt_mem_onchip_mem+0xff786f34>
  807a50:	00c00f04 	movi	r3,60
  807a54:	1885c83a 	sub	r2,r3,r2
  807a58:	003ddf06 	br	8071d8 <__alt_mem_onchip_mem+0xff7871d8>
  807a5c:	e009883a 	mov	r4,fp
  807a60:	e0001115 	stw	zero,68(fp)
  807a64:	000b883a 	mov	r5,zero
  807a68:	0808d1c0 	call	808d1c <_Balloc>
  807a6c:	d8800715 	stw	r2,28(sp)
  807a70:	d8c00717 	ldw	r3,28(sp)
  807a74:	00bfffc4 	movi	r2,-1
  807a78:	01000044 	movi	r4,1
  807a7c:	d8800c15 	stw	r2,48(sp)
  807a80:	e0c01015 	stw	r3,64(fp)
  807a84:	d9000b15 	stw	r4,44(sp)
  807a88:	d8800615 	stw	r2,24(sp)
  807a8c:	d8002215 	stw	zero,136(sp)
  807a90:	003c4106 	br	806b98 <__alt_mem_onchip_mem+0xff786b98>
  807a94:	d8c00c17 	ldw	r3,48(sp)
  807a98:	d8c00615 	stw	r3,24(sp)
  807a9c:	003e7006 	br	807460 <__alt_mem_onchip_mem+0xff787460>
  807aa0:	04400044 	movi	r17,1
  807aa4:	003b2006 	br	806728 <__alt_mem_onchip_mem+0xff786728>
  807aa8:	000b883a 	mov	r5,zero
  807aac:	003b3d06 	br	8067a4 <__alt_mem_onchip_mem+0xff7867a4>
  807ab0:	d8800c17 	ldw	r2,48(sp)
  807ab4:	d8800615 	stw	r2,24(sp)
  807ab8:	003e6906 	br	807460 <__alt_mem_onchip_mem+0xff787460>

00807abc <_fclose_r>:
  807abc:	28003926 	beq	r5,zero,807ba4 <_fclose_r+0xe8>
  807ac0:	defffc04 	addi	sp,sp,-16
  807ac4:	dc400115 	stw	r17,4(sp)
  807ac8:	dc000015 	stw	r16,0(sp)
  807acc:	dfc00315 	stw	ra,12(sp)
  807ad0:	dc800215 	stw	r18,8(sp)
  807ad4:	2023883a 	mov	r17,r4
  807ad8:	2821883a 	mov	r16,r5
  807adc:	20000226 	beq	r4,zero,807ae8 <_fclose_r+0x2c>
  807ae0:	20800e17 	ldw	r2,56(r4)
  807ae4:	10002726 	beq	r2,zero,807b84 <_fclose_r+0xc8>
  807ae8:	8080030f 	ldh	r2,12(r16)
  807aec:	1000071e 	bne	r2,zero,807b0c <_fclose_r+0x50>
  807af0:	0005883a 	mov	r2,zero
  807af4:	dfc00317 	ldw	ra,12(sp)
  807af8:	dc800217 	ldw	r18,8(sp)
  807afc:	dc400117 	ldw	r17,4(sp)
  807b00:	dc000017 	ldw	r16,0(sp)
  807b04:	dec00404 	addi	sp,sp,16
  807b08:	f800283a 	ret
  807b0c:	800b883a 	mov	r5,r16
  807b10:	8809883a 	mov	r4,r17
  807b14:	0807bc00 	call	807bc0 <__sflush_r>
  807b18:	1025883a 	mov	r18,r2
  807b1c:	80800b17 	ldw	r2,44(r16)
  807b20:	10000426 	beq	r2,zero,807b34 <_fclose_r+0x78>
  807b24:	81400717 	ldw	r5,28(r16)
  807b28:	8809883a 	mov	r4,r17
  807b2c:	103ee83a 	callr	r2
  807b30:	10001616 	blt	r2,zero,807b8c <_fclose_r+0xd0>
  807b34:	8080030b 	ldhu	r2,12(r16)
  807b38:	1080200c 	andi	r2,r2,128
  807b3c:	1000151e 	bne	r2,zero,807b94 <_fclose_r+0xd8>
  807b40:	81400c17 	ldw	r5,48(r16)
  807b44:	28000526 	beq	r5,zero,807b5c <_fclose_r+0xa0>
  807b48:	80801004 	addi	r2,r16,64
  807b4c:	28800226 	beq	r5,r2,807b58 <_fclose_r+0x9c>
  807b50:	8809883a 	mov	r4,r17
  807b54:	08080380 	call	808038 <_free_r>
  807b58:	80000c15 	stw	zero,48(r16)
  807b5c:	81401117 	ldw	r5,68(r16)
  807b60:	28000326 	beq	r5,zero,807b70 <_fclose_r+0xb4>
  807b64:	8809883a 	mov	r4,r17
  807b68:	08080380 	call	808038 <_free_r>
  807b6c:	80001115 	stw	zero,68(r16)
  807b70:	0801fd00 	call	801fd0 <__sfp_lock_acquire>
  807b74:	8000030d 	sth	zero,12(r16)
  807b78:	0801fd40 	call	801fd4 <__sfp_lock_release>
  807b7c:	9005883a 	mov	r2,r18
  807b80:	003fdc06 	br	807af4 <__alt_mem_onchip_mem+0xff787af4>
  807b84:	0801fc00 	call	801fc0 <__sinit>
  807b88:	003fd706 	br	807ae8 <__alt_mem_onchip_mem+0xff787ae8>
  807b8c:	04bfffc4 	movi	r18,-1
  807b90:	003fe806 	br	807b34 <__alt_mem_onchip_mem+0xff787b34>
  807b94:	81400417 	ldw	r5,16(r16)
  807b98:	8809883a 	mov	r4,r17
  807b9c:	08080380 	call	808038 <_free_r>
  807ba0:	003fe706 	br	807b40 <__alt_mem_onchip_mem+0xff787b40>
  807ba4:	0005883a 	mov	r2,zero
  807ba8:	f800283a 	ret

00807bac <fclose>:
  807bac:	00802074 	movhi	r2,129
  807bb0:	10933e04 	addi	r2,r2,19704
  807bb4:	200b883a 	mov	r5,r4
  807bb8:	11000017 	ldw	r4,0(r2)
  807bbc:	0807abc1 	jmpi	807abc <_fclose_r>

00807bc0 <__sflush_r>:
  807bc0:	2880030b 	ldhu	r2,12(r5)
  807bc4:	defffb04 	addi	sp,sp,-20
  807bc8:	dcc00315 	stw	r19,12(sp)
  807bcc:	dc400115 	stw	r17,4(sp)
  807bd0:	dfc00415 	stw	ra,16(sp)
  807bd4:	dc800215 	stw	r18,8(sp)
  807bd8:	dc000015 	stw	r16,0(sp)
  807bdc:	10c0020c 	andi	r3,r2,8
  807be0:	2823883a 	mov	r17,r5
  807be4:	2027883a 	mov	r19,r4
  807be8:	1800311e 	bne	r3,zero,807cb0 <__sflush_r+0xf0>
  807bec:	28c00117 	ldw	r3,4(r5)
  807bf0:	10820014 	ori	r2,r2,2048
  807bf4:	2880030d 	sth	r2,12(r5)
  807bf8:	00c04b0e 	bge	zero,r3,807d28 <__sflush_r+0x168>
  807bfc:	8a000a17 	ldw	r8,40(r17)
  807c00:	40002326 	beq	r8,zero,807c90 <__sflush_r+0xd0>
  807c04:	9c000017 	ldw	r16,0(r19)
  807c08:	10c4000c 	andi	r3,r2,4096
  807c0c:	98000015 	stw	zero,0(r19)
  807c10:	18004826 	beq	r3,zero,807d34 <__sflush_r+0x174>
  807c14:	89801417 	ldw	r6,80(r17)
  807c18:	10c0010c 	andi	r3,r2,4
  807c1c:	18000626 	beq	r3,zero,807c38 <__sflush_r+0x78>
  807c20:	88c00117 	ldw	r3,4(r17)
  807c24:	88800c17 	ldw	r2,48(r17)
  807c28:	30cdc83a 	sub	r6,r6,r3
  807c2c:	10000226 	beq	r2,zero,807c38 <__sflush_r+0x78>
  807c30:	88800f17 	ldw	r2,60(r17)
  807c34:	308dc83a 	sub	r6,r6,r2
  807c38:	89400717 	ldw	r5,28(r17)
  807c3c:	000f883a 	mov	r7,zero
  807c40:	9809883a 	mov	r4,r19
  807c44:	403ee83a 	callr	r8
  807c48:	00ffffc4 	movi	r3,-1
  807c4c:	10c04426 	beq	r2,r3,807d60 <__sflush_r+0x1a0>
  807c50:	88c0030b 	ldhu	r3,12(r17)
  807c54:	89000417 	ldw	r4,16(r17)
  807c58:	88000115 	stw	zero,4(r17)
  807c5c:	197dffcc 	andi	r5,r3,63487
  807c60:	8940030d 	sth	r5,12(r17)
  807c64:	89000015 	stw	r4,0(r17)
  807c68:	18c4000c 	andi	r3,r3,4096
  807c6c:	18002c1e 	bne	r3,zero,807d20 <__sflush_r+0x160>
  807c70:	89400c17 	ldw	r5,48(r17)
  807c74:	9c000015 	stw	r16,0(r19)
  807c78:	28000526 	beq	r5,zero,807c90 <__sflush_r+0xd0>
  807c7c:	88801004 	addi	r2,r17,64
  807c80:	28800226 	beq	r5,r2,807c8c <__sflush_r+0xcc>
  807c84:	9809883a 	mov	r4,r19
  807c88:	08080380 	call	808038 <_free_r>
  807c8c:	88000c15 	stw	zero,48(r17)
  807c90:	0005883a 	mov	r2,zero
  807c94:	dfc00417 	ldw	ra,16(sp)
  807c98:	dcc00317 	ldw	r19,12(sp)
  807c9c:	dc800217 	ldw	r18,8(sp)
  807ca0:	dc400117 	ldw	r17,4(sp)
  807ca4:	dc000017 	ldw	r16,0(sp)
  807ca8:	dec00504 	addi	sp,sp,20
  807cac:	f800283a 	ret
  807cb0:	2c800417 	ldw	r18,16(r5)
  807cb4:	903ff626 	beq	r18,zero,807c90 <__alt_mem_onchip_mem+0xff787c90>
  807cb8:	2c000017 	ldw	r16,0(r5)
  807cbc:	108000cc 	andi	r2,r2,3
  807cc0:	2c800015 	stw	r18,0(r5)
  807cc4:	84a1c83a 	sub	r16,r16,r18
  807cc8:	1000131e 	bne	r2,zero,807d18 <__sflush_r+0x158>
  807ccc:	28800517 	ldw	r2,20(r5)
  807cd0:	88800215 	stw	r2,8(r17)
  807cd4:	04000316 	blt	zero,r16,807ce4 <__sflush_r+0x124>
  807cd8:	003fed06 	br	807c90 <__alt_mem_onchip_mem+0xff787c90>
  807cdc:	90a5883a 	add	r18,r18,r2
  807ce0:	043feb0e 	bge	zero,r16,807c90 <__alt_mem_onchip_mem+0xff787c90>
  807ce4:	88800917 	ldw	r2,36(r17)
  807ce8:	89400717 	ldw	r5,28(r17)
  807cec:	800f883a 	mov	r7,r16
  807cf0:	900d883a 	mov	r6,r18
  807cf4:	9809883a 	mov	r4,r19
  807cf8:	103ee83a 	callr	r2
  807cfc:	80a1c83a 	sub	r16,r16,r2
  807d00:	00bff616 	blt	zero,r2,807cdc <__alt_mem_onchip_mem+0xff787cdc>
  807d04:	88c0030b 	ldhu	r3,12(r17)
  807d08:	00bfffc4 	movi	r2,-1
  807d0c:	18c01014 	ori	r3,r3,64
  807d10:	88c0030d 	sth	r3,12(r17)
  807d14:	003fdf06 	br	807c94 <__alt_mem_onchip_mem+0xff787c94>
  807d18:	0005883a 	mov	r2,zero
  807d1c:	003fec06 	br	807cd0 <__alt_mem_onchip_mem+0xff787cd0>
  807d20:	88801415 	stw	r2,80(r17)
  807d24:	003fd206 	br	807c70 <__alt_mem_onchip_mem+0xff787c70>
  807d28:	28c00f17 	ldw	r3,60(r5)
  807d2c:	00ffb316 	blt	zero,r3,807bfc <__alt_mem_onchip_mem+0xff787bfc>
  807d30:	003fd706 	br	807c90 <__alt_mem_onchip_mem+0xff787c90>
  807d34:	89400717 	ldw	r5,28(r17)
  807d38:	000d883a 	mov	r6,zero
  807d3c:	01c00044 	movi	r7,1
  807d40:	9809883a 	mov	r4,r19
  807d44:	403ee83a 	callr	r8
  807d48:	100d883a 	mov	r6,r2
  807d4c:	00bfffc4 	movi	r2,-1
  807d50:	30801426 	beq	r6,r2,807da4 <__sflush_r+0x1e4>
  807d54:	8880030b 	ldhu	r2,12(r17)
  807d58:	8a000a17 	ldw	r8,40(r17)
  807d5c:	003fae06 	br	807c18 <__alt_mem_onchip_mem+0xff787c18>
  807d60:	98c00017 	ldw	r3,0(r19)
  807d64:	183fba26 	beq	r3,zero,807c50 <__alt_mem_onchip_mem+0xff787c50>
  807d68:	01000744 	movi	r4,29
  807d6c:	19000626 	beq	r3,r4,807d88 <__sflush_r+0x1c8>
  807d70:	01000584 	movi	r4,22
  807d74:	19000426 	beq	r3,r4,807d88 <__sflush_r+0x1c8>
  807d78:	88c0030b 	ldhu	r3,12(r17)
  807d7c:	18c01014 	ori	r3,r3,64
  807d80:	88c0030d 	sth	r3,12(r17)
  807d84:	003fc306 	br	807c94 <__alt_mem_onchip_mem+0xff787c94>
  807d88:	8880030b 	ldhu	r2,12(r17)
  807d8c:	88c00417 	ldw	r3,16(r17)
  807d90:	88000115 	stw	zero,4(r17)
  807d94:	10bdffcc 	andi	r2,r2,63487
  807d98:	8880030d 	sth	r2,12(r17)
  807d9c:	88c00015 	stw	r3,0(r17)
  807da0:	003fb306 	br	807c70 <__alt_mem_onchip_mem+0xff787c70>
  807da4:	98800017 	ldw	r2,0(r19)
  807da8:	103fea26 	beq	r2,zero,807d54 <__alt_mem_onchip_mem+0xff787d54>
  807dac:	00c00744 	movi	r3,29
  807db0:	10c00226 	beq	r2,r3,807dbc <__sflush_r+0x1fc>
  807db4:	00c00584 	movi	r3,22
  807db8:	10c0031e 	bne	r2,r3,807dc8 <__sflush_r+0x208>
  807dbc:	9c000015 	stw	r16,0(r19)
  807dc0:	0005883a 	mov	r2,zero
  807dc4:	003fb306 	br	807c94 <__alt_mem_onchip_mem+0xff787c94>
  807dc8:	88c0030b 	ldhu	r3,12(r17)
  807dcc:	3005883a 	mov	r2,r6
  807dd0:	18c01014 	ori	r3,r3,64
  807dd4:	88c0030d 	sth	r3,12(r17)
  807dd8:	003fae06 	br	807c94 <__alt_mem_onchip_mem+0xff787c94>

00807ddc <_fflush_r>:
  807ddc:	defffd04 	addi	sp,sp,-12
  807de0:	dc000115 	stw	r16,4(sp)
  807de4:	dfc00215 	stw	ra,8(sp)
  807de8:	2021883a 	mov	r16,r4
  807dec:	20000226 	beq	r4,zero,807df8 <_fflush_r+0x1c>
  807df0:	20800e17 	ldw	r2,56(r4)
  807df4:	10000c26 	beq	r2,zero,807e28 <_fflush_r+0x4c>
  807df8:	2880030f 	ldh	r2,12(r5)
  807dfc:	1000051e 	bne	r2,zero,807e14 <_fflush_r+0x38>
  807e00:	0005883a 	mov	r2,zero
  807e04:	dfc00217 	ldw	ra,8(sp)
  807e08:	dc000117 	ldw	r16,4(sp)
  807e0c:	dec00304 	addi	sp,sp,12
  807e10:	f800283a 	ret
  807e14:	8009883a 	mov	r4,r16
  807e18:	dfc00217 	ldw	ra,8(sp)
  807e1c:	dc000117 	ldw	r16,4(sp)
  807e20:	dec00304 	addi	sp,sp,12
  807e24:	0807bc01 	jmpi	807bc0 <__sflush_r>
  807e28:	d9400015 	stw	r5,0(sp)
  807e2c:	0801fc00 	call	801fc0 <__sinit>
  807e30:	d9400017 	ldw	r5,0(sp)
  807e34:	003ff006 	br	807df8 <__alt_mem_onchip_mem+0xff787df8>

00807e38 <fflush>:
  807e38:	20000526 	beq	r4,zero,807e50 <fflush+0x18>
  807e3c:	00802074 	movhi	r2,129
  807e40:	10933e04 	addi	r2,r2,19704
  807e44:	200b883a 	mov	r5,r4
  807e48:	11000017 	ldw	r4,0(r2)
  807e4c:	0807ddc1 	jmpi	807ddc <_fflush_r>
  807e50:	00802074 	movhi	r2,129
  807e54:	10933d04 	addi	r2,r2,19700
  807e58:	11000017 	ldw	r4,0(r2)
  807e5c:	01402034 	movhi	r5,128
  807e60:	295f7704 	addi	r5,r5,32220
  807e64:	08027a81 	jmpi	8027a8 <_fwalk_reent>

00807e68 <__sflags>:
  807e68:	28800007 	ldb	r2,0(r5)
  807e6c:	00c01c84 	movi	r3,114
  807e70:	10c02426 	beq	r2,r3,807f04 <__sflags+0x9c>
  807e74:	00c01dc4 	movi	r3,119
  807e78:	10c01e26 	beq	r2,r3,807ef4 <__sflags+0x8c>
  807e7c:	00c01844 	movi	r3,97
  807e80:	10c00426 	beq	r2,r3,807e94 <__sflags+0x2c>
  807e84:	00800584 	movi	r2,22
  807e88:	20800015 	stw	r2,0(r4)
  807e8c:	0005883a 	mov	r2,zero
  807e90:	f800283a 	ret
  807e94:	02c08204 	movi	r11,520
  807e98:	01000044 	movi	r4,1
  807e9c:	00804204 	movi	r2,264
  807ea0:	01c00ac4 	movi	r7,43
  807ea4:	02bff8c4 	movi	r10,-29
  807ea8:	027fff04 	movi	r9,-4
  807eac:	02001e04 	movi	r8,120
  807eb0:	29400044 	addi	r5,r5,1
  807eb4:	28c00007 	ldb	r3,0(r5)
  807eb8:	18000626 	beq	r3,zero,807ed4 <__sflags+0x6c>
  807ebc:	19c00826 	beq	r3,r7,807ee0 <__sflags+0x78>
  807ec0:	1a3ffb1e 	bne	r3,r8,807eb0 <__alt_mem_onchip_mem+0xff787eb0>
  807ec4:	29400044 	addi	r5,r5,1
  807ec8:	28c00007 	ldb	r3,0(r5)
  807ecc:	21020014 	ori	r4,r4,2048
  807ed0:	183ffa1e 	bne	r3,zero,807ebc <__alt_mem_onchip_mem+0xff787ebc>
  807ed4:	22c8b03a 	or	r4,r4,r11
  807ed8:	31000015 	stw	r4,0(r6)
  807edc:	f800283a 	ret
  807ee0:	1284703a 	and	r2,r2,r10
  807ee4:	2248703a 	and	r4,r4,r9
  807ee8:	10800414 	ori	r2,r2,16
  807eec:	21000094 	ori	r4,r4,2
  807ef0:	003fef06 	br	807eb0 <__alt_mem_onchip_mem+0xff787eb0>
  807ef4:	02c18004 	movi	r11,1536
  807ef8:	01000044 	movi	r4,1
  807efc:	00800204 	movi	r2,8
  807f00:	003fe706 	br	807ea0 <__alt_mem_onchip_mem+0xff787ea0>
  807f04:	0017883a 	mov	r11,zero
  807f08:	0009883a 	mov	r4,zero
  807f0c:	00800104 	movi	r2,4
  807f10:	003fe306 	br	807ea0 <__alt_mem_onchip_mem+0xff787ea0>

00807f14 <_malloc_trim_r>:
  807f14:	defffb04 	addi	sp,sp,-20
  807f18:	dcc00315 	stw	r19,12(sp)
  807f1c:	04c02074 	movhi	r19,129
  807f20:	dc800215 	stw	r18,8(sp)
  807f24:	dc400115 	stw	r17,4(sp)
  807f28:	dc000015 	stw	r16,0(sp)
  807f2c:	dfc00415 	stw	ra,16(sp)
  807f30:	2821883a 	mov	r16,r5
  807f34:	9ccd2004 	addi	r19,r19,13440
  807f38:	2025883a 	mov	r18,r4
  807f3c:	080ee400 	call	80ee40 <__malloc_lock>
  807f40:	98800217 	ldw	r2,8(r19)
  807f44:	14400117 	ldw	r17,4(r2)
  807f48:	00bfff04 	movi	r2,-4
  807f4c:	88a2703a 	and	r17,r17,r2
  807f50:	8c21c83a 	sub	r16,r17,r16
  807f54:	8403fbc4 	addi	r16,r16,4079
  807f58:	8020d33a 	srli	r16,r16,12
  807f5c:	0083ffc4 	movi	r2,4095
  807f60:	843fffc4 	addi	r16,r16,-1
  807f64:	8020933a 	slli	r16,r16,12
  807f68:	1400060e 	bge	r2,r16,807f84 <_malloc_trim_r+0x70>
  807f6c:	000b883a 	mov	r5,zero
  807f70:	9009883a 	mov	r4,r18
  807f74:	08039dc0 	call	8039dc <_sbrk_r>
  807f78:	98c00217 	ldw	r3,8(r19)
  807f7c:	1c47883a 	add	r3,r3,r17
  807f80:	10c00a26 	beq	r2,r3,807fac <_malloc_trim_r+0x98>
  807f84:	9009883a 	mov	r4,r18
  807f88:	080ee640 	call	80ee64 <__malloc_unlock>
  807f8c:	0005883a 	mov	r2,zero
  807f90:	dfc00417 	ldw	ra,16(sp)
  807f94:	dcc00317 	ldw	r19,12(sp)
  807f98:	dc800217 	ldw	r18,8(sp)
  807f9c:	dc400117 	ldw	r17,4(sp)
  807fa0:	dc000017 	ldw	r16,0(sp)
  807fa4:	dec00504 	addi	sp,sp,20
  807fa8:	f800283a 	ret
  807fac:	040bc83a 	sub	r5,zero,r16
  807fb0:	9009883a 	mov	r4,r18
  807fb4:	08039dc0 	call	8039dc <_sbrk_r>
  807fb8:	00ffffc4 	movi	r3,-1
  807fbc:	10c00d26 	beq	r2,r3,807ff4 <_malloc_trim_r+0xe0>
  807fc0:	00c02074 	movhi	r3,129
  807fc4:	18daae04 	addi	r3,r3,27320
  807fc8:	18800017 	ldw	r2,0(r3)
  807fcc:	99000217 	ldw	r4,8(r19)
  807fd0:	8c23c83a 	sub	r17,r17,r16
  807fd4:	8c400054 	ori	r17,r17,1
  807fd8:	1421c83a 	sub	r16,r2,r16
  807fdc:	24400115 	stw	r17,4(r4)
  807fe0:	9009883a 	mov	r4,r18
  807fe4:	1c000015 	stw	r16,0(r3)
  807fe8:	080ee640 	call	80ee64 <__malloc_unlock>
  807fec:	00800044 	movi	r2,1
  807ff0:	003fe706 	br	807f90 <__alt_mem_onchip_mem+0xff787f90>
  807ff4:	000b883a 	mov	r5,zero
  807ff8:	9009883a 	mov	r4,r18
  807ffc:	08039dc0 	call	8039dc <_sbrk_r>
  808000:	99000217 	ldw	r4,8(r19)
  808004:	014003c4 	movi	r5,15
  808008:	1107c83a 	sub	r3,r2,r4
  80800c:	28ffdd0e 	bge	r5,r3,807f84 <__alt_mem_onchip_mem+0xff787f84>
  808010:	01402074 	movhi	r5,129
  808014:	29533f04 	addi	r5,r5,19708
  808018:	29400017 	ldw	r5,0(r5)
  80801c:	18c00054 	ori	r3,r3,1
  808020:	20c00115 	stw	r3,4(r4)
  808024:	00c02074 	movhi	r3,129
  808028:	1145c83a 	sub	r2,r2,r5
  80802c:	18daae04 	addi	r3,r3,27320
  808030:	18800015 	stw	r2,0(r3)
  808034:	003fd306 	br	807f84 <__alt_mem_onchip_mem+0xff787f84>

00808038 <_free_r>:
  808038:	28004126 	beq	r5,zero,808140 <_free_r+0x108>
  80803c:	defffd04 	addi	sp,sp,-12
  808040:	dc400115 	stw	r17,4(sp)
  808044:	dc000015 	stw	r16,0(sp)
  808048:	2023883a 	mov	r17,r4
  80804c:	2821883a 	mov	r16,r5
  808050:	dfc00215 	stw	ra,8(sp)
  808054:	080ee400 	call	80ee40 <__malloc_lock>
  808058:	81ffff17 	ldw	r7,-4(r16)
  80805c:	00bfff84 	movi	r2,-2
  808060:	01002074 	movhi	r4,129
  808064:	81bffe04 	addi	r6,r16,-8
  808068:	3884703a 	and	r2,r7,r2
  80806c:	210d2004 	addi	r4,r4,13440
  808070:	308b883a 	add	r5,r6,r2
  808074:	2a400117 	ldw	r9,4(r5)
  808078:	22000217 	ldw	r8,8(r4)
  80807c:	00ffff04 	movi	r3,-4
  808080:	48c6703a 	and	r3,r9,r3
  808084:	2a005726 	beq	r5,r8,8081e4 <_free_r+0x1ac>
  808088:	28c00115 	stw	r3,4(r5)
  80808c:	39c0004c 	andi	r7,r7,1
  808090:	3800091e 	bne	r7,zero,8080b8 <_free_r+0x80>
  808094:	823ffe17 	ldw	r8,-8(r16)
  808098:	22400204 	addi	r9,r4,8
  80809c:	320dc83a 	sub	r6,r6,r8
  8080a0:	31c00217 	ldw	r7,8(r6)
  8080a4:	1205883a 	add	r2,r2,r8
  8080a8:	3a406526 	beq	r7,r9,808240 <_free_r+0x208>
  8080ac:	32000317 	ldw	r8,12(r6)
  8080b0:	3a000315 	stw	r8,12(r7)
  8080b4:	41c00215 	stw	r7,8(r8)
  8080b8:	28cf883a 	add	r7,r5,r3
  8080bc:	39c00117 	ldw	r7,4(r7)
  8080c0:	39c0004c 	andi	r7,r7,1
  8080c4:	38003a26 	beq	r7,zero,8081b0 <_free_r+0x178>
  8080c8:	10c00054 	ori	r3,r2,1
  8080cc:	30c00115 	stw	r3,4(r6)
  8080d0:	3087883a 	add	r3,r6,r2
  8080d4:	18800015 	stw	r2,0(r3)
  8080d8:	00c07fc4 	movi	r3,511
  8080dc:	18801936 	bltu	r3,r2,808144 <_free_r+0x10c>
  8080e0:	1004d0fa 	srli	r2,r2,3
  8080e4:	01c00044 	movi	r7,1
  8080e8:	21400117 	ldw	r5,4(r4)
  8080ec:	10c00044 	addi	r3,r2,1
  8080f0:	18c7883a 	add	r3,r3,r3
  8080f4:	1005d0ba 	srai	r2,r2,2
  8080f8:	18c7883a 	add	r3,r3,r3
  8080fc:	18c7883a 	add	r3,r3,r3
  808100:	1907883a 	add	r3,r3,r4
  808104:	3884983a 	sll	r2,r7,r2
  808108:	19c00017 	ldw	r7,0(r3)
  80810c:	1a3ffe04 	addi	r8,r3,-8
  808110:	1144b03a 	or	r2,r2,r5
  808114:	32000315 	stw	r8,12(r6)
  808118:	31c00215 	stw	r7,8(r6)
  80811c:	20800115 	stw	r2,4(r4)
  808120:	19800015 	stw	r6,0(r3)
  808124:	39800315 	stw	r6,12(r7)
  808128:	8809883a 	mov	r4,r17
  80812c:	dfc00217 	ldw	ra,8(sp)
  808130:	dc400117 	ldw	r17,4(sp)
  808134:	dc000017 	ldw	r16,0(sp)
  808138:	dec00304 	addi	sp,sp,12
  80813c:	080ee641 	jmpi	80ee64 <__malloc_unlock>
  808140:	f800283a 	ret
  808144:	100ad27a 	srli	r5,r2,9
  808148:	00c00104 	movi	r3,4
  80814c:	19404a36 	bltu	r3,r5,808278 <_free_r+0x240>
  808150:	100ad1ba 	srli	r5,r2,6
  808154:	28c00e44 	addi	r3,r5,57
  808158:	18c7883a 	add	r3,r3,r3
  80815c:	29400e04 	addi	r5,r5,56
  808160:	18c7883a 	add	r3,r3,r3
  808164:	18c7883a 	add	r3,r3,r3
  808168:	1909883a 	add	r4,r3,r4
  80816c:	20c00017 	ldw	r3,0(r4)
  808170:	01c02074 	movhi	r7,129
  808174:	213ffe04 	addi	r4,r4,-8
  808178:	39cd2004 	addi	r7,r7,13440
  80817c:	20c04426 	beq	r4,r3,808290 <_free_r+0x258>
  808180:	01ffff04 	movi	r7,-4
  808184:	19400117 	ldw	r5,4(r3)
  808188:	29ca703a 	and	r5,r5,r7
  80818c:	1140022e 	bgeu	r2,r5,808198 <_free_r+0x160>
  808190:	18c00217 	ldw	r3,8(r3)
  808194:	20fffb1e 	bne	r4,r3,808184 <__alt_mem_onchip_mem+0xff788184>
  808198:	19000317 	ldw	r4,12(r3)
  80819c:	31000315 	stw	r4,12(r6)
  8081a0:	30c00215 	stw	r3,8(r6)
  8081a4:	21800215 	stw	r6,8(r4)
  8081a8:	19800315 	stw	r6,12(r3)
  8081ac:	003fde06 	br	808128 <__alt_mem_onchip_mem+0xff788128>
  8081b0:	29c00217 	ldw	r7,8(r5)
  8081b4:	10c5883a 	add	r2,r2,r3
  8081b8:	00c02074 	movhi	r3,129
  8081bc:	18cd2204 	addi	r3,r3,13448
  8081c0:	38c03b26 	beq	r7,r3,8082b0 <_free_r+0x278>
  8081c4:	2a000317 	ldw	r8,12(r5)
  8081c8:	11400054 	ori	r5,r2,1
  8081cc:	3087883a 	add	r3,r6,r2
  8081d0:	3a000315 	stw	r8,12(r7)
  8081d4:	41c00215 	stw	r7,8(r8)
  8081d8:	31400115 	stw	r5,4(r6)
  8081dc:	18800015 	stw	r2,0(r3)
  8081e0:	003fbd06 	br	8080d8 <__alt_mem_onchip_mem+0xff7880d8>
  8081e4:	39c0004c 	andi	r7,r7,1
  8081e8:	10c5883a 	add	r2,r2,r3
  8081ec:	3800071e 	bne	r7,zero,80820c <_free_r+0x1d4>
  8081f0:	81fffe17 	ldw	r7,-8(r16)
  8081f4:	31cdc83a 	sub	r6,r6,r7
  8081f8:	30c00317 	ldw	r3,12(r6)
  8081fc:	31400217 	ldw	r5,8(r6)
  808200:	11c5883a 	add	r2,r2,r7
  808204:	28c00315 	stw	r3,12(r5)
  808208:	19400215 	stw	r5,8(r3)
  80820c:	10c00054 	ori	r3,r2,1
  808210:	30c00115 	stw	r3,4(r6)
  808214:	00c02074 	movhi	r3,129
  808218:	18d34004 	addi	r3,r3,19712
  80821c:	18c00017 	ldw	r3,0(r3)
  808220:	21800215 	stw	r6,8(r4)
  808224:	10ffc036 	bltu	r2,r3,808128 <__alt_mem_onchip_mem+0xff788128>
  808228:	00802074 	movhi	r2,129
  80822c:	109aa304 	addi	r2,r2,27276
  808230:	11400017 	ldw	r5,0(r2)
  808234:	8809883a 	mov	r4,r17
  808238:	0807f140 	call	807f14 <_malloc_trim_r>
  80823c:	003fba06 	br	808128 <__alt_mem_onchip_mem+0xff788128>
  808240:	28c9883a 	add	r4,r5,r3
  808244:	21000117 	ldw	r4,4(r4)
  808248:	2100004c 	andi	r4,r4,1
  80824c:	2000391e 	bne	r4,zero,808334 <_free_r+0x2fc>
  808250:	29c00217 	ldw	r7,8(r5)
  808254:	29000317 	ldw	r4,12(r5)
  808258:	1885883a 	add	r2,r3,r2
  80825c:	10c00054 	ori	r3,r2,1
  808260:	39000315 	stw	r4,12(r7)
  808264:	21c00215 	stw	r7,8(r4)
  808268:	30c00115 	stw	r3,4(r6)
  80826c:	308d883a 	add	r6,r6,r2
  808270:	30800015 	stw	r2,0(r6)
  808274:	003fac06 	br	808128 <__alt_mem_onchip_mem+0xff788128>
  808278:	00c00504 	movi	r3,20
  80827c:	19401536 	bltu	r3,r5,8082d4 <_free_r+0x29c>
  808280:	28c01704 	addi	r3,r5,92
  808284:	18c7883a 	add	r3,r3,r3
  808288:	294016c4 	addi	r5,r5,91
  80828c:	003fb406 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  808290:	280bd0ba 	srai	r5,r5,2
  808294:	00c00044 	movi	r3,1
  808298:	38800117 	ldw	r2,4(r7)
  80829c:	194a983a 	sll	r5,r3,r5
  8082a0:	2007883a 	mov	r3,r4
  8082a4:	2884b03a 	or	r2,r5,r2
  8082a8:	38800115 	stw	r2,4(r7)
  8082ac:	003fbb06 	br	80819c <__alt_mem_onchip_mem+0xff78819c>
  8082b0:	21800515 	stw	r6,20(r4)
  8082b4:	21800415 	stw	r6,16(r4)
  8082b8:	10c00054 	ori	r3,r2,1
  8082bc:	31c00315 	stw	r7,12(r6)
  8082c0:	31c00215 	stw	r7,8(r6)
  8082c4:	30c00115 	stw	r3,4(r6)
  8082c8:	308d883a 	add	r6,r6,r2
  8082cc:	30800015 	stw	r2,0(r6)
  8082d0:	003f9506 	br	808128 <__alt_mem_onchip_mem+0xff788128>
  8082d4:	00c01504 	movi	r3,84
  8082d8:	19400536 	bltu	r3,r5,8082f0 <_free_r+0x2b8>
  8082dc:	100ad33a 	srli	r5,r2,12
  8082e0:	28c01bc4 	addi	r3,r5,111
  8082e4:	18c7883a 	add	r3,r3,r3
  8082e8:	29401b84 	addi	r5,r5,110
  8082ec:	003f9c06 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  8082f0:	00c05504 	movi	r3,340
  8082f4:	19400536 	bltu	r3,r5,80830c <_free_r+0x2d4>
  8082f8:	100ad3fa 	srli	r5,r2,15
  8082fc:	28c01e04 	addi	r3,r5,120
  808300:	18c7883a 	add	r3,r3,r3
  808304:	29401dc4 	addi	r5,r5,119
  808308:	003f9506 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  80830c:	00c15504 	movi	r3,1364
  808310:	19400536 	bltu	r3,r5,808328 <_free_r+0x2f0>
  808314:	100ad4ba 	srli	r5,r2,18
  808318:	28c01f44 	addi	r3,r5,125
  80831c:	18c7883a 	add	r3,r3,r3
  808320:	29401f04 	addi	r5,r5,124
  808324:	003f8e06 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  808328:	00c03f84 	movi	r3,254
  80832c:	01401f84 	movi	r5,126
  808330:	003f8b06 	br	808160 <__alt_mem_onchip_mem+0xff788160>
  808334:	10c00054 	ori	r3,r2,1
  808338:	30c00115 	stw	r3,4(r6)
  80833c:	308d883a 	add	r6,r6,r2
  808340:	30800015 	stw	r2,0(r6)
  808344:	003f7806 	br	808128 <__alt_mem_onchip_mem+0xff788128>

00808348 <__sfvwrite_r>:
  808348:	30800217 	ldw	r2,8(r6)
  80834c:	10006726 	beq	r2,zero,8084ec <__sfvwrite_r+0x1a4>
  808350:	28c0030b 	ldhu	r3,12(r5)
  808354:	defff404 	addi	sp,sp,-48
  808358:	dd400715 	stw	r21,28(sp)
  80835c:	dd000615 	stw	r20,24(sp)
  808360:	dc000215 	stw	r16,8(sp)
  808364:	dfc00b15 	stw	ra,44(sp)
  808368:	df000a15 	stw	fp,40(sp)
  80836c:	ddc00915 	stw	r23,36(sp)
  808370:	dd800815 	stw	r22,32(sp)
  808374:	dcc00515 	stw	r19,20(sp)
  808378:	dc800415 	stw	r18,16(sp)
  80837c:	dc400315 	stw	r17,12(sp)
  808380:	1880020c 	andi	r2,r3,8
  808384:	2821883a 	mov	r16,r5
  808388:	202b883a 	mov	r21,r4
  80838c:	3029883a 	mov	r20,r6
  808390:	10002726 	beq	r2,zero,808430 <__sfvwrite_r+0xe8>
  808394:	28800417 	ldw	r2,16(r5)
  808398:	10002526 	beq	r2,zero,808430 <__sfvwrite_r+0xe8>
  80839c:	1880008c 	andi	r2,r3,2
  8083a0:	a4400017 	ldw	r17,0(r20)
  8083a4:	10002a26 	beq	r2,zero,808450 <__sfvwrite_r+0x108>
  8083a8:	05a00034 	movhi	r22,32768
  8083ac:	0027883a 	mov	r19,zero
  8083b0:	0025883a 	mov	r18,zero
  8083b4:	b5bf0004 	addi	r22,r22,-1024
  8083b8:	980d883a 	mov	r6,r19
  8083bc:	a809883a 	mov	r4,r21
  8083c0:	90004626 	beq	r18,zero,8084dc <__sfvwrite_r+0x194>
  8083c4:	900f883a 	mov	r7,r18
  8083c8:	b480022e 	bgeu	r22,r18,8083d4 <__sfvwrite_r+0x8c>
  8083cc:	01e00034 	movhi	r7,32768
  8083d0:	39ff0004 	addi	r7,r7,-1024
  8083d4:	80800917 	ldw	r2,36(r16)
  8083d8:	81400717 	ldw	r5,28(r16)
  8083dc:	103ee83a 	callr	r2
  8083e0:	0080570e 	bge	zero,r2,808540 <__sfvwrite_r+0x1f8>
  8083e4:	a0c00217 	ldw	r3,8(r20)
  8083e8:	98a7883a 	add	r19,r19,r2
  8083ec:	90a5c83a 	sub	r18,r18,r2
  8083f0:	1885c83a 	sub	r2,r3,r2
  8083f4:	a0800215 	stw	r2,8(r20)
  8083f8:	103fef1e 	bne	r2,zero,8083b8 <__alt_mem_onchip_mem+0xff7883b8>
  8083fc:	0005883a 	mov	r2,zero
  808400:	dfc00b17 	ldw	ra,44(sp)
  808404:	df000a17 	ldw	fp,40(sp)
  808408:	ddc00917 	ldw	r23,36(sp)
  80840c:	dd800817 	ldw	r22,32(sp)
  808410:	dd400717 	ldw	r21,28(sp)
  808414:	dd000617 	ldw	r20,24(sp)
  808418:	dcc00517 	ldw	r19,20(sp)
  80841c:	dc800417 	ldw	r18,16(sp)
  808420:	dc400317 	ldw	r17,12(sp)
  808424:	dc000217 	ldw	r16,8(sp)
  808428:	dec00c04 	addi	sp,sp,48
  80842c:	f800283a 	ret
  808430:	800b883a 	mov	r5,r16
  808434:	a809883a 	mov	r4,r21
  808438:	080608c0 	call	80608c <__swsetup_r>
  80843c:	1000eb1e 	bne	r2,zero,8087ec <__sfvwrite_r+0x4a4>
  808440:	80c0030b 	ldhu	r3,12(r16)
  808444:	a4400017 	ldw	r17,0(r20)
  808448:	1880008c 	andi	r2,r3,2
  80844c:	103fd61e 	bne	r2,zero,8083a8 <__alt_mem_onchip_mem+0xff7883a8>
  808450:	1880004c 	andi	r2,r3,1
  808454:	10003f1e 	bne	r2,zero,808554 <__sfvwrite_r+0x20c>
  808458:	0039883a 	mov	fp,zero
  80845c:	0025883a 	mov	r18,zero
  808460:	90001a26 	beq	r18,zero,8084cc <__sfvwrite_r+0x184>
  808464:	1880800c 	andi	r2,r3,512
  808468:	84c00217 	ldw	r19,8(r16)
  80846c:	10002126 	beq	r2,zero,8084f4 <__sfvwrite_r+0x1ac>
  808470:	982f883a 	mov	r23,r19
  808474:	94c09336 	bltu	r18,r19,8086c4 <__sfvwrite_r+0x37c>
  808478:	1881200c 	andi	r2,r3,1152
  80847c:	10009e1e 	bne	r2,zero,8086f8 <__sfvwrite_r+0x3b0>
  808480:	81000017 	ldw	r4,0(r16)
  808484:	b80d883a 	mov	r6,r23
  808488:	e00b883a 	mov	r5,fp
  80848c:	0808bc00 	call	808bc0 <memmove>
  808490:	80c00217 	ldw	r3,8(r16)
  808494:	81000017 	ldw	r4,0(r16)
  808498:	9005883a 	mov	r2,r18
  80849c:	1ce7c83a 	sub	r19,r3,r19
  8084a0:	25cf883a 	add	r7,r4,r23
  8084a4:	84c00215 	stw	r19,8(r16)
  8084a8:	81c00015 	stw	r7,0(r16)
  8084ac:	a0c00217 	ldw	r3,8(r20)
  8084b0:	e0b9883a 	add	fp,fp,r2
  8084b4:	90a5c83a 	sub	r18,r18,r2
  8084b8:	18a7c83a 	sub	r19,r3,r2
  8084bc:	a4c00215 	stw	r19,8(r20)
  8084c0:	983fce26 	beq	r19,zero,8083fc <__alt_mem_onchip_mem+0xff7883fc>
  8084c4:	80c0030b 	ldhu	r3,12(r16)
  8084c8:	903fe61e 	bne	r18,zero,808464 <__alt_mem_onchip_mem+0xff788464>
  8084cc:	8f000017 	ldw	fp,0(r17)
  8084d0:	8c800117 	ldw	r18,4(r17)
  8084d4:	8c400204 	addi	r17,r17,8
  8084d8:	003fe106 	br	808460 <__alt_mem_onchip_mem+0xff788460>
  8084dc:	8cc00017 	ldw	r19,0(r17)
  8084e0:	8c800117 	ldw	r18,4(r17)
  8084e4:	8c400204 	addi	r17,r17,8
  8084e8:	003fb306 	br	8083b8 <__alt_mem_onchip_mem+0xff7883b8>
  8084ec:	0005883a 	mov	r2,zero
  8084f0:	f800283a 	ret
  8084f4:	81000017 	ldw	r4,0(r16)
  8084f8:	80800417 	ldw	r2,16(r16)
  8084fc:	11005736 	bltu	r2,r4,80865c <__sfvwrite_r+0x314>
  808500:	85c00517 	ldw	r23,20(r16)
  808504:	95c05536 	bltu	r18,r23,80865c <__sfvwrite_r+0x314>
  808508:	00a00034 	movhi	r2,32768
  80850c:	10bfffc4 	addi	r2,r2,-1
  808510:	9009883a 	mov	r4,r18
  808514:	1480012e 	bgeu	r2,r18,80851c <__sfvwrite_r+0x1d4>
  808518:	1009883a 	mov	r4,r2
  80851c:	b80b883a 	mov	r5,r23
  808520:	0800f9c0 	call	800f9c <__divsi3>
  808524:	15cf383a 	mul	r7,r2,r23
  808528:	81400717 	ldw	r5,28(r16)
  80852c:	80800917 	ldw	r2,36(r16)
  808530:	e00d883a 	mov	r6,fp
  808534:	a809883a 	mov	r4,r21
  808538:	103ee83a 	callr	r2
  80853c:	00bfdb16 	blt	zero,r2,8084ac <__alt_mem_onchip_mem+0xff7884ac>
  808540:	8080030b 	ldhu	r2,12(r16)
  808544:	10801014 	ori	r2,r2,64
  808548:	8080030d 	sth	r2,12(r16)
  80854c:	00bfffc4 	movi	r2,-1
  808550:	003fab06 	br	808400 <__alt_mem_onchip_mem+0xff788400>
  808554:	0027883a 	mov	r19,zero
  808558:	0011883a 	mov	r8,zero
  80855c:	0039883a 	mov	fp,zero
  808560:	0025883a 	mov	r18,zero
  808564:	90001f26 	beq	r18,zero,8085e4 <__sfvwrite_r+0x29c>
  808568:	40005a26 	beq	r8,zero,8086d4 <__sfvwrite_r+0x38c>
  80856c:	982d883a 	mov	r22,r19
  808570:	94c0012e 	bgeu	r18,r19,808578 <__sfvwrite_r+0x230>
  808574:	902d883a 	mov	r22,r18
  808578:	81000017 	ldw	r4,0(r16)
  80857c:	80800417 	ldw	r2,16(r16)
  808580:	b02f883a 	mov	r23,r22
  808584:	81c00517 	ldw	r7,20(r16)
  808588:	1100032e 	bgeu	r2,r4,808598 <__sfvwrite_r+0x250>
  80858c:	80c00217 	ldw	r3,8(r16)
  808590:	38c7883a 	add	r3,r7,r3
  808594:	1d801816 	blt	r3,r22,8085f8 <__sfvwrite_r+0x2b0>
  808598:	b1c03e16 	blt	r22,r7,808694 <__sfvwrite_r+0x34c>
  80859c:	80800917 	ldw	r2,36(r16)
  8085a0:	81400717 	ldw	r5,28(r16)
  8085a4:	e00d883a 	mov	r6,fp
  8085a8:	da000115 	stw	r8,4(sp)
  8085ac:	a809883a 	mov	r4,r21
  8085b0:	103ee83a 	callr	r2
  8085b4:	102f883a 	mov	r23,r2
  8085b8:	da000117 	ldw	r8,4(sp)
  8085bc:	00bfe00e 	bge	zero,r2,808540 <__alt_mem_onchip_mem+0xff788540>
  8085c0:	9de7c83a 	sub	r19,r19,r23
  8085c4:	98001f26 	beq	r19,zero,808644 <__sfvwrite_r+0x2fc>
  8085c8:	a0800217 	ldw	r2,8(r20)
  8085cc:	e5f9883a 	add	fp,fp,r23
  8085d0:	95e5c83a 	sub	r18,r18,r23
  8085d4:	15efc83a 	sub	r23,r2,r23
  8085d8:	a5c00215 	stw	r23,8(r20)
  8085dc:	b83f8726 	beq	r23,zero,8083fc <__alt_mem_onchip_mem+0xff7883fc>
  8085e0:	903fe11e 	bne	r18,zero,808568 <__alt_mem_onchip_mem+0xff788568>
  8085e4:	8f000017 	ldw	fp,0(r17)
  8085e8:	8c800117 	ldw	r18,4(r17)
  8085ec:	0011883a 	mov	r8,zero
  8085f0:	8c400204 	addi	r17,r17,8
  8085f4:	003fdb06 	br	808564 <__alt_mem_onchip_mem+0xff788564>
  8085f8:	180d883a 	mov	r6,r3
  8085fc:	e00b883a 	mov	r5,fp
  808600:	da000115 	stw	r8,4(sp)
  808604:	d8c00015 	stw	r3,0(sp)
  808608:	0808bc00 	call	808bc0 <memmove>
  80860c:	d8c00017 	ldw	r3,0(sp)
  808610:	80800017 	ldw	r2,0(r16)
  808614:	800b883a 	mov	r5,r16
  808618:	a809883a 	mov	r4,r21
  80861c:	10c5883a 	add	r2,r2,r3
  808620:	80800015 	stw	r2,0(r16)
  808624:	d8c00015 	stw	r3,0(sp)
  808628:	0807ddc0 	call	807ddc <_fflush_r>
  80862c:	d8c00017 	ldw	r3,0(sp)
  808630:	da000117 	ldw	r8,4(sp)
  808634:	103fc21e 	bne	r2,zero,808540 <__alt_mem_onchip_mem+0xff788540>
  808638:	182f883a 	mov	r23,r3
  80863c:	9de7c83a 	sub	r19,r19,r23
  808640:	983fe11e 	bne	r19,zero,8085c8 <__alt_mem_onchip_mem+0xff7885c8>
  808644:	800b883a 	mov	r5,r16
  808648:	a809883a 	mov	r4,r21
  80864c:	0807ddc0 	call	807ddc <_fflush_r>
  808650:	103fbb1e 	bne	r2,zero,808540 <__alt_mem_onchip_mem+0xff788540>
  808654:	0011883a 	mov	r8,zero
  808658:	003fdb06 	br	8085c8 <__alt_mem_onchip_mem+0xff7885c8>
  80865c:	94c0012e 	bgeu	r18,r19,808664 <__sfvwrite_r+0x31c>
  808660:	9027883a 	mov	r19,r18
  808664:	980d883a 	mov	r6,r19
  808668:	e00b883a 	mov	r5,fp
  80866c:	0808bc00 	call	808bc0 <memmove>
  808670:	80800217 	ldw	r2,8(r16)
  808674:	80c00017 	ldw	r3,0(r16)
  808678:	14c5c83a 	sub	r2,r2,r19
  80867c:	1cc7883a 	add	r3,r3,r19
  808680:	80800215 	stw	r2,8(r16)
  808684:	80c00015 	stw	r3,0(r16)
  808688:	10004326 	beq	r2,zero,808798 <__sfvwrite_r+0x450>
  80868c:	9805883a 	mov	r2,r19
  808690:	003f8606 	br	8084ac <__alt_mem_onchip_mem+0xff7884ac>
  808694:	b00d883a 	mov	r6,r22
  808698:	e00b883a 	mov	r5,fp
  80869c:	da000115 	stw	r8,4(sp)
  8086a0:	0808bc00 	call	808bc0 <memmove>
  8086a4:	80800217 	ldw	r2,8(r16)
  8086a8:	80c00017 	ldw	r3,0(r16)
  8086ac:	da000117 	ldw	r8,4(sp)
  8086b0:	1585c83a 	sub	r2,r2,r22
  8086b4:	1dad883a 	add	r22,r3,r22
  8086b8:	80800215 	stw	r2,8(r16)
  8086bc:	85800015 	stw	r22,0(r16)
  8086c0:	003fbf06 	br	8085c0 <__alt_mem_onchip_mem+0xff7885c0>
  8086c4:	81000017 	ldw	r4,0(r16)
  8086c8:	9027883a 	mov	r19,r18
  8086cc:	902f883a 	mov	r23,r18
  8086d0:	003f6c06 	br	808484 <__alt_mem_onchip_mem+0xff788484>
  8086d4:	900d883a 	mov	r6,r18
  8086d8:	01400284 	movi	r5,10
  8086dc:	e009883a 	mov	r4,fp
  8086e0:	08089940 	call	808994 <memchr>
  8086e4:	10003e26 	beq	r2,zero,8087e0 <__sfvwrite_r+0x498>
  8086e8:	10800044 	addi	r2,r2,1
  8086ec:	1727c83a 	sub	r19,r2,fp
  8086f0:	02000044 	movi	r8,1
  8086f4:	003f9d06 	br	80856c <__alt_mem_onchip_mem+0xff78856c>
  8086f8:	80800517 	ldw	r2,20(r16)
  8086fc:	81400417 	ldw	r5,16(r16)
  808700:	81c00017 	ldw	r7,0(r16)
  808704:	10a7883a 	add	r19,r2,r2
  808708:	9885883a 	add	r2,r19,r2
  80870c:	1026d7fa 	srli	r19,r2,31
  808710:	396dc83a 	sub	r22,r7,r5
  808714:	b1000044 	addi	r4,r22,1
  808718:	9885883a 	add	r2,r19,r2
  80871c:	1027d07a 	srai	r19,r2,1
  808720:	2485883a 	add	r2,r4,r18
  808724:	980d883a 	mov	r6,r19
  808728:	9880022e 	bgeu	r19,r2,808734 <__sfvwrite_r+0x3ec>
  80872c:	1027883a 	mov	r19,r2
  808730:	100d883a 	mov	r6,r2
  808734:	18c1000c 	andi	r3,r3,1024
  808738:	18001c26 	beq	r3,zero,8087ac <__sfvwrite_r+0x464>
  80873c:	300b883a 	mov	r5,r6
  808740:	a809883a 	mov	r4,r21
  808744:	0802b280 	call	802b28 <_malloc_r>
  808748:	102f883a 	mov	r23,r2
  80874c:	10002926 	beq	r2,zero,8087f4 <__sfvwrite_r+0x4ac>
  808750:	81400417 	ldw	r5,16(r16)
  808754:	b00d883a 	mov	r6,r22
  808758:	1009883a 	mov	r4,r2
  80875c:	0808a780 	call	808a78 <memcpy>
  808760:	8080030b 	ldhu	r2,12(r16)
  808764:	00fedfc4 	movi	r3,-1153
  808768:	10c4703a 	and	r2,r2,r3
  80876c:	10802014 	ori	r2,r2,128
  808770:	8080030d 	sth	r2,12(r16)
  808774:	bd89883a 	add	r4,r23,r22
  808778:	9d8fc83a 	sub	r7,r19,r22
  80877c:	85c00415 	stw	r23,16(r16)
  808780:	84c00515 	stw	r19,20(r16)
  808784:	81000015 	stw	r4,0(r16)
  808788:	9027883a 	mov	r19,r18
  80878c:	81c00215 	stw	r7,8(r16)
  808790:	902f883a 	mov	r23,r18
  808794:	003f3b06 	br	808484 <__alt_mem_onchip_mem+0xff788484>
  808798:	800b883a 	mov	r5,r16
  80879c:	a809883a 	mov	r4,r21
  8087a0:	0807ddc0 	call	807ddc <_fflush_r>
  8087a4:	103fb926 	beq	r2,zero,80868c <__alt_mem_onchip_mem+0xff78868c>
  8087a8:	003f6506 	br	808540 <__alt_mem_onchip_mem+0xff788540>
  8087ac:	a809883a 	mov	r4,r21
  8087b0:	0809d780 	call	809d78 <_realloc_r>
  8087b4:	102f883a 	mov	r23,r2
  8087b8:	103fee1e 	bne	r2,zero,808774 <__alt_mem_onchip_mem+0xff788774>
  8087bc:	81400417 	ldw	r5,16(r16)
  8087c0:	a809883a 	mov	r4,r21
  8087c4:	08080380 	call	808038 <_free_r>
  8087c8:	8080030b 	ldhu	r2,12(r16)
  8087cc:	00ffdfc4 	movi	r3,-129
  8087d0:	1884703a 	and	r2,r3,r2
  8087d4:	00c00304 	movi	r3,12
  8087d8:	a8c00015 	stw	r3,0(r21)
  8087dc:	003f5906 	br	808544 <__alt_mem_onchip_mem+0xff788544>
  8087e0:	94c00044 	addi	r19,r18,1
  8087e4:	02000044 	movi	r8,1
  8087e8:	003f6006 	br	80856c <__alt_mem_onchip_mem+0xff78856c>
  8087ec:	00bfffc4 	movi	r2,-1
  8087f0:	003f0306 	br	808400 <__alt_mem_onchip_mem+0xff788400>
  8087f4:	00800304 	movi	r2,12
  8087f8:	a8800015 	stw	r2,0(r21)
  8087fc:	8080030b 	ldhu	r2,12(r16)
  808800:	003f5006 	br	808544 <__alt_mem_onchip_mem+0xff788544>

00808804 <_isatty_r>:
  808804:	defffd04 	addi	sp,sp,-12
  808808:	dc000015 	stw	r16,0(sp)
  80880c:	04002074 	movhi	r16,129
  808810:	dc400115 	stw	r17,4(sp)
  808814:	841aa004 	addi	r16,r16,27264
  808818:	2023883a 	mov	r17,r4
  80881c:	2809883a 	mov	r4,r5
  808820:	dfc00215 	stw	ra,8(sp)
  808824:	80000015 	stw	zero,0(r16)
  808828:	080eb240 	call	80eb24 <isatty>
  80882c:	00ffffc4 	movi	r3,-1
  808830:	10c00526 	beq	r2,r3,808848 <_isatty_r+0x44>
  808834:	dfc00217 	ldw	ra,8(sp)
  808838:	dc400117 	ldw	r17,4(sp)
  80883c:	dc000017 	ldw	r16,0(sp)
  808840:	dec00304 	addi	sp,sp,12
  808844:	f800283a 	ret
  808848:	80c00017 	ldw	r3,0(r16)
  80884c:	183ff926 	beq	r3,zero,808834 <__alt_mem_onchip_mem+0xff788834>
  808850:	88c00015 	stw	r3,0(r17)
  808854:	003ff706 	br	808834 <__alt_mem_onchip_mem+0xff788834>

00808858 <_setlocale_r>:
  808858:	30001b26 	beq	r6,zero,8088c8 <_setlocale_r+0x70>
  80885c:	01402074 	movhi	r5,129
  808860:	defffe04 	addi	sp,sp,-8
  808864:	294b0504 	addi	r5,r5,11284
  808868:	3009883a 	mov	r4,r6
  80886c:	dc000015 	stw	r16,0(sp)
  808870:	dfc00115 	stw	ra,4(sp)
  808874:	3021883a 	mov	r16,r6
  808878:	080a3500 	call	80a350 <strcmp>
  80887c:	1000061e 	bne	r2,zero,808898 <_setlocale_r+0x40>
  808880:	00802074 	movhi	r2,129
  808884:	108ae604 	addi	r2,r2,11160
  808888:	dfc00117 	ldw	ra,4(sp)
  80888c:	dc000017 	ldw	r16,0(sp)
  808890:	dec00204 	addi	sp,sp,8
  808894:	f800283a 	ret
  808898:	01402074 	movhi	r5,129
  80889c:	294ae604 	addi	r5,r5,11160
  8088a0:	8009883a 	mov	r4,r16
  8088a4:	080a3500 	call	80a350 <strcmp>
  8088a8:	103ff526 	beq	r2,zero,808880 <__alt_mem_onchip_mem+0xff788880>
  8088ac:	01402074 	movhi	r5,129
  8088b0:	294af004 	addi	r5,r5,11200
  8088b4:	8009883a 	mov	r4,r16
  8088b8:	080a3500 	call	80a350 <strcmp>
  8088bc:	103ff026 	beq	r2,zero,808880 <__alt_mem_onchip_mem+0xff788880>
  8088c0:	0005883a 	mov	r2,zero
  8088c4:	003ff006 	br	808888 <__alt_mem_onchip_mem+0xff788888>
  8088c8:	00802074 	movhi	r2,129
  8088cc:	108ae604 	addi	r2,r2,11160
  8088d0:	f800283a 	ret

008088d4 <__locale_charset>:
  8088d4:	00802074 	movhi	r2,129
  8088d8:	108e2a04 	addi	r2,r2,14504
  8088dc:	f800283a 	ret

008088e0 <__locale_mb_cur_max>:
  8088e0:	00802074 	movhi	r2,129
  8088e4:	10934104 	addi	r2,r2,19716
  8088e8:	10800017 	ldw	r2,0(r2)
  8088ec:	f800283a 	ret

008088f0 <__locale_msgcharset>:
  8088f0:	00802074 	movhi	r2,129
  8088f4:	108e2204 	addi	r2,r2,14472
  8088f8:	f800283a 	ret

008088fc <__locale_cjk_lang>:
  8088fc:	0005883a 	mov	r2,zero
  808900:	f800283a 	ret

00808904 <_localeconv_r>:
  808904:	00802074 	movhi	r2,129
  808908:	108e3204 	addi	r2,r2,14536
  80890c:	f800283a 	ret

00808910 <setlocale>:
  808910:	00802074 	movhi	r2,129
  808914:	10933e04 	addi	r2,r2,19704
  808918:	280d883a 	mov	r6,r5
  80891c:	200b883a 	mov	r5,r4
  808920:	11000017 	ldw	r4,0(r2)
  808924:	08088581 	jmpi	808858 <_setlocale_r>

00808928 <localeconv>:
  808928:	00802074 	movhi	r2,129
  80892c:	108e3204 	addi	r2,r2,14536
  808930:	f800283a 	ret

00808934 <_lseek_r>:
  808934:	defffd04 	addi	sp,sp,-12
  808938:	2805883a 	mov	r2,r5
  80893c:	dc000015 	stw	r16,0(sp)
  808940:	04002074 	movhi	r16,129
  808944:	dc400115 	stw	r17,4(sp)
  808948:	300b883a 	mov	r5,r6
  80894c:	841aa004 	addi	r16,r16,27264
  808950:	2023883a 	mov	r17,r4
  808954:	380d883a 	mov	r6,r7
  808958:	1009883a 	mov	r4,r2
  80895c:	dfc00215 	stw	ra,8(sp)
  808960:	80000015 	stw	zero,0(r16)
  808964:	080ecf00 	call	80ecf0 <lseek>
  808968:	00ffffc4 	movi	r3,-1
  80896c:	10c00526 	beq	r2,r3,808984 <_lseek_r+0x50>
  808970:	dfc00217 	ldw	ra,8(sp)
  808974:	dc400117 	ldw	r17,4(sp)
  808978:	dc000017 	ldw	r16,0(sp)
  80897c:	dec00304 	addi	sp,sp,12
  808980:	f800283a 	ret
  808984:	80c00017 	ldw	r3,0(r16)
  808988:	183ff926 	beq	r3,zero,808970 <__alt_mem_onchip_mem+0xff788970>
  80898c:	88c00015 	stw	r3,0(r17)
  808990:	003ff706 	br	808970 <__alt_mem_onchip_mem+0xff788970>

00808994 <memchr>:
  808994:	208000cc 	andi	r2,r4,3
  808998:	280f883a 	mov	r7,r5
  80899c:	10003426 	beq	r2,zero,808a70 <memchr+0xdc>
  8089a0:	30bfffc4 	addi	r2,r6,-1
  8089a4:	30001a26 	beq	r6,zero,808a10 <memchr+0x7c>
  8089a8:	20c00003 	ldbu	r3,0(r4)
  8089ac:	29803fcc 	andi	r6,r5,255
  8089b0:	30c0051e 	bne	r6,r3,8089c8 <memchr+0x34>
  8089b4:	00001806 	br	808a18 <memchr+0x84>
  8089b8:	10001526 	beq	r2,zero,808a10 <memchr+0x7c>
  8089bc:	20c00003 	ldbu	r3,0(r4)
  8089c0:	10bfffc4 	addi	r2,r2,-1
  8089c4:	30c01426 	beq	r6,r3,808a18 <memchr+0x84>
  8089c8:	21000044 	addi	r4,r4,1
  8089cc:	20c000cc 	andi	r3,r4,3
  8089d0:	183ff91e 	bne	r3,zero,8089b8 <__alt_mem_onchip_mem+0xff7889b8>
  8089d4:	020000c4 	movi	r8,3
  8089d8:	40801136 	bltu	r8,r2,808a20 <memchr+0x8c>
  8089dc:	10000c26 	beq	r2,zero,808a10 <memchr+0x7c>
  8089e0:	20c00003 	ldbu	r3,0(r4)
  8089e4:	29403fcc 	andi	r5,r5,255
  8089e8:	28c00b26 	beq	r5,r3,808a18 <memchr+0x84>
  8089ec:	20c00044 	addi	r3,r4,1
  8089f0:	39803fcc 	andi	r6,r7,255
  8089f4:	2089883a 	add	r4,r4,r2
  8089f8:	00000306 	br	808a08 <memchr+0x74>
  8089fc:	18c00044 	addi	r3,r3,1
  808a00:	197fffc3 	ldbu	r5,-1(r3)
  808a04:	31400526 	beq	r6,r5,808a1c <memchr+0x88>
  808a08:	1805883a 	mov	r2,r3
  808a0c:	20fffb1e 	bne	r4,r3,8089fc <__alt_mem_onchip_mem+0xff7889fc>
  808a10:	0005883a 	mov	r2,zero
  808a14:	f800283a 	ret
  808a18:	2005883a 	mov	r2,r4
  808a1c:	f800283a 	ret
  808a20:	28c03fcc 	andi	r3,r5,255
  808a24:	1812923a 	slli	r9,r3,8
  808a28:	02ffbff4 	movhi	r11,65279
  808a2c:	02a02074 	movhi	r10,32897
  808a30:	48d2b03a 	or	r9,r9,r3
  808a34:	4806943a 	slli	r3,r9,16
  808a38:	5affbfc4 	addi	r11,r11,-257
  808a3c:	52a02004 	addi	r10,r10,-32640
  808a40:	48d2b03a 	or	r9,r9,r3
  808a44:	20c00017 	ldw	r3,0(r4)
  808a48:	48c6f03a 	xor	r3,r9,r3
  808a4c:	1acd883a 	add	r6,r3,r11
  808a50:	00c6303a 	nor	r3,zero,r3
  808a54:	30c6703a 	and	r3,r6,r3
  808a58:	1a86703a 	and	r3,r3,r10
  808a5c:	183fe01e 	bne	r3,zero,8089e0 <__alt_mem_onchip_mem+0xff7889e0>
  808a60:	10bfff04 	addi	r2,r2,-4
  808a64:	21000104 	addi	r4,r4,4
  808a68:	40bff636 	bltu	r8,r2,808a44 <__alt_mem_onchip_mem+0xff788a44>
  808a6c:	003fdb06 	br	8089dc <__alt_mem_onchip_mem+0xff7889dc>
  808a70:	3005883a 	mov	r2,r6
  808a74:	003fd706 	br	8089d4 <__alt_mem_onchip_mem+0xff7889d4>

00808a78 <memcpy>:
  808a78:	defffd04 	addi	sp,sp,-12
  808a7c:	dfc00215 	stw	ra,8(sp)
  808a80:	dc400115 	stw	r17,4(sp)
  808a84:	dc000015 	stw	r16,0(sp)
  808a88:	00c003c4 	movi	r3,15
  808a8c:	2005883a 	mov	r2,r4
  808a90:	1980452e 	bgeu	r3,r6,808ba8 <memcpy+0x130>
  808a94:	2906b03a 	or	r3,r5,r4
  808a98:	18c000cc 	andi	r3,r3,3
  808a9c:	1800441e 	bne	r3,zero,808bb0 <memcpy+0x138>
  808aa0:	347ffc04 	addi	r17,r6,-16
  808aa4:	8822d13a 	srli	r17,r17,4
  808aa8:	28c00104 	addi	r3,r5,4
  808aac:	23400104 	addi	r13,r4,4
  808ab0:	8820913a 	slli	r16,r17,4
  808ab4:	2b000204 	addi	r12,r5,8
  808ab8:	22c00204 	addi	r11,r4,8
  808abc:	84000504 	addi	r16,r16,20
  808ac0:	2a800304 	addi	r10,r5,12
  808ac4:	22400304 	addi	r9,r4,12
  808ac8:	2c21883a 	add	r16,r5,r16
  808acc:	2811883a 	mov	r8,r5
  808ad0:	200f883a 	mov	r7,r4
  808ad4:	41000017 	ldw	r4,0(r8)
  808ad8:	1fc00017 	ldw	ra,0(r3)
  808adc:	63c00017 	ldw	r15,0(r12)
  808ae0:	39000015 	stw	r4,0(r7)
  808ae4:	53800017 	ldw	r14,0(r10)
  808ae8:	6fc00015 	stw	ra,0(r13)
  808aec:	5bc00015 	stw	r15,0(r11)
  808af0:	4b800015 	stw	r14,0(r9)
  808af4:	18c00404 	addi	r3,r3,16
  808af8:	39c00404 	addi	r7,r7,16
  808afc:	42000404 	addi	r8,r8,16
  808b00:	6b400404 	addi	r13,r13,16
  808b04:	63000404 	addi	r12,r12,16
  808b08:	5ac00404 	addi	r11,r11,16
  808b0c:	52800404 	addi	r10,r10,16
  808b10:	4a400404 	addi	r9,r9,16
  808b14:	1c3fef1e 	bne	r3,r16,808ad4 <__alt_mem_onchip_mem+0xff788ad4>
  808b18:	89c00044 	addi	r7,r17,1
  808b1c:	380e913a 	slli	r7,r7,4
  808b20:	310003cc 	andi	r4,r6,15
  808b24:	02c000c4 	movi	r11,3
  808b28:	11c7883a 	add	r3,r2,r7
  808b2c:	29cb883a 	add	r5,r5,r7
  808b30:	5900212e 	bgeu	r11,r4,808bb8 <memcpy+0x140>
  808b34:	1813883a 	mov	r9,r3
  808b38:	2811883a 	mov	r8,r5
  808b3c:	200f883a 	mov	r7,r4
  808b40:	42800017 	ldw	r10,0(r8)
  808b44:	4a400104 	addi	r9,r9,4
  808b48:	39ffff04 	addi	r7,r7,-4
  808b4c:	4abfff15 	stw	r10,-4(r9)
  808b50:	42000104 	addi	r8,r8,4
  808b54:	59fffa36 	bltu	r11,r7,808b40 <__alt_mem_onchip_mem+0xff788b40>
  808b58:	213fff04 	addi	r4,r4,-4
  808b5c:	2008d0ba 	srli	r4,r4,2
  808b60:	318000cc 	andi	r6,r6,3
  808b64:	21000044 	addi	r4,r4,1
  808b68:	2109883a 	add	r4,r4,r4
  808b6c:	2109883a 	add	r4,r4,r4
  808b70:	1907883a 	add	r3,r3,r4
  808b74:	290b883a 	add	r5,r5,r4
  808b78:	30000626 	beq	r6,zero,808b94 <memcpy+0x11c>
  808b7c:	198d883a 	add	r6,r3,r6
  808b80:	29c00003 	ldbu	r7,0(r5)
  808b84:	18c00044 	addi	r3,r3,1
  808b88:	29400044 	addi	r5,r5,1
  808b8c:	19ffffc5 	stb	r7,-1(r3)
  808b90:	19bffb1e 	bne	r3,r6,808b80 <__alt_mem_onchip_mem+0xff788b80>
  808b94:	dfc00217 	ldw	ra,8(sp)
  808b98:	dc400117 	ldw	r17,4(sp)
  808b9c:	dc000017 	ldw	r16,0(sp)
  808ba0:	dec00304 	addi	sp,sp,12
  808ba4:	f800283a 	ret
  808ba8:	2007883a 	mov	r3,r4
  808bac:	003ff206 	br	808b78 <__alt_mem_onchip_mem+0xff788b78>
  808bb0:	2007883a 	mov	r3,r4
  808bb4:	003ff106 	br	808b7c <__alt_mem_onchip_mem+0xff788b7c>
  808bb8:	200d883a 	mov	r6,r4
  808bbc:	003fee06 	br	808b78 <__alt_mem_onchip_mem+0xff788b78>

00808bc0 <memmove>:
  808bc0:	2005883a 	mov	r2,r4
  808bc4:	29000b2e 	bgeu	r5,r4,808bf4 <memmove+0x34>
  808bc8:	298f883a 	add	r7,r5,r6
  808bcc:	21c0092e 	bgeu	r4,r7,808bf4 <memmove+0x34>
  808bd0:	2187883a 	add	r3,r4,r6
  808bd4:	198bc83a 	sub	r5,r3,r6
  808bd8:	30004826 	beq	r6,zero,808cfc <memmove+0x13c>
  808bdc:	39ffffc4 	addi	r7,r7,-1
  808be0:	39000003 	ldbu	r4,0(r7)
  808be4:	18ffffc4 	addi	r3,r3,-1
  808be8:	19000005 	stb	r4,0(r3)
  808bec:	28fffb1e 	bne	r5,r3,808bdc <__alt_mem_onchip_mem+0xff788bdc>
  808bf0:	f800283a 	ret
  808bf4:	00c003c4 	movi	r3,15
  808bf8:	1980412e 	bgeu	r3,r6,808d00 <memmove+0x140>
  808bfc:	2886b03a 	or	r3,r5,r2
  808c00:	18c000cc 	andi	r3,r3,3
  808c04:	1800401e 	bne	r3,zero,808d08 <memmove+0x148>
  808c08:	33fffc04 	addi	r15,r6,-16
  808c0c:	781ed13a 	srli	r15,r15,4
  808c10:	28c00104 	addi	r3,r5,4
  808c14:	13400104 	addi	r13,r2,4
  808c18:	781c913a 	slli	r14,r15,4
  808c1c:	2b000204 	addi	r12,r5,8
  808c20:	12c00204 	addi	r11,r2,8
  808c24:	73800504 	addi	r14,r14,20
  808c28:	2a800304 	addi	r10,r5,12
  808c2c:	12400304 	addi	r9,r2,12
  808c30:	2b9d883a 	add	r14,r5,r14
  808c34:	2811883a 	mov	r8,r5
  808c38:	100f883a 	mov	r7,r2
  808c3c:	41000017 	ldw	r4,0(r8)
  808c40:	39c00404 	addi	r7,r7,16
  808c44:	18c00404 	addi	r3,r3,16
  808c48:	393ffc15 	stw	r4,-16(r7)
  808c4c:	193ffc17 	ldw	r4,-16(r3)
  808c50:	6b400404 	addi	r13,r13,16
  808c54:	5ac00404 	addi	r11,r11,16
  808c58:	693ffc15 	stw	r4,-16(r13)
  808c5c:	61000017 	ldw	r4,0(r12)
  808c60:	4a400404 	addi	r9,r9,16
  808c64:	42000404 	addi	r8,r8,16
  808c68:	593ffc15 	stw	r4,-16(r11)
  808c6c:	51000017 	ldw	r4,0(r10)
  808c70:	63000404 	addi	r12,r12,16
  808c74:	52800404 	addi	r10,r10,16
  808c78:	493ffc15 	stw	r4,-16(r9)
  808c7c:	1bbfef1e 	bne	r3,r14,808c3c <__alt_mem_onchip_mem+0xff788c3c>
  808c80:	79000044 	addi	r4,r15,1
  808c84:	2008913a 	slli	r4,r4,4
  808c88:	328003cc 	andi	r10,r6,15
  808c8c:	02c000c4 	movi	r11,3
  808c90:	1107883a 	add	r3,r2,r4
  808c94:	290b883a 	add	r5,r5,r4
  808c98:	5a801e2e 	bgeu	r11,r10,808d14 <memmove+0x154>
  808c9c:	1813883a 	mov	r9,r3
  808ca0:	2811883a 	mov	r8,r5
  808ca4:	500f883a 	mov	r7,r10
  808ca8:	41000017 	ldw	r4,0(r8)
  808cac:	4a400104 	addi	r9,r9,4
  808cb0:	39ffff04 	addi	r7,r7,-4
  808cb4:	493fff15 	stw	r4,-4(r9)
  808cb8:	42000104 	addi	r8,r8,4
  808cbc:	59fffa36 	bltu	r11,r7,808ca8 <__alt_mem_onchip_mem+0xff788ca8>
  808cc0:	513fff04 	addi	r4,r10,-4
  808cc4:	2008d0ba 	srli	r4,r4,2
  808cc8:	318000cc 	andi	r6,r6,3
  808ccc:	21000044 	addi	r4,r4,1
  808cd0:	2109883a 	add	r4,r4,r4
  808cd4:	2109883a 	add	r4,r4,r4
  808cd8:	1907883a 	add	r3,r3,r4
  808cdc:	290b883a 	add	r5,r5,r4
  808ce0:	30000b26 	beq	r6,zero,808d10 <memmove+0x150>
  808ce4:	198d883a 	add	r6,r3,r6
  808ce8:	29c00003 	ldbu	r7,0(r5)
  808cec:	18c00044 	addi	r3,r3,1
  808cf0:	29400044 	addi	r5,r5,1
  808cf4:	19ffffc5 	stb	r7,-1(r3)
  808cf8:	19bffb1e 	bne	r3,r6,808ce8 <__alt_mem_onchip_mem+0xff788ce8>
  808cfc:	f800283a 	ret
  808d00:	1007883a 	mov	r3,r2
  808d04:	003ff606 	br	808ce0 <__alt_mem_onchip_mem+0xff788ce0>
  808d08:	1007883a 	mov	r3,r2
  808d0c:	003ff506 	br	808ce4 <__alt_mem_onchip_mem+0xff788ce4>
  808d10:	f800283a 	ret
  808d14:	500d883a 	mov	r6,r10
  808d18:	003ff106 	br	808ce0 <__alt_mem_onchip_mem+0xff788ce0>

00808d1c <_Balloc>:
  808d1c:	20801317 	ldw	r2,76(r4)
  808d20:	defffc04 	addi	sp,sp,-16
  808d24:	dc400115 	stw	r17,4(sp)
  808d28:	dc000015 	stw	r16,0(sp)
  808d2c:	dfc00315 	stw	ra,12(sp)
  808d30:	dc800215 	stw	r18,8(sp)
  808d34:	2023883a 	mov	r17,r4
  808d38:	2821883a 	mov	r16,r5
  808d3c:	10000f26 	beq	r2,zero,808d7c <_Balloc+0x60>
  808d40:	8407883a 	add	r3,r16,r16
  808d44:	18c7883a 	add	r3,r3,r3
  808d48:	10c7883a 	add	r3,r2,r3
  808d4c:	18800017 	ldw	r2,0(r3)
  808d50:	10001126 	beq	r2,zero,808d98 <_Balloc+0x7c>
  808d54:	11000017 	ldw	r4,0(r2)
  808d58:	19000015 	stw	r4,0(r3)
  808d5c:	10000415 	stw	zero,16(r2)
  808d60:	10000315 	stw	zero,12(r2)
  808d64:	dfc00317 	ldw	ra,12(sp)
  808d68:	dc800217 	ldw	r18,8(sp)
  808d6c:	dc400117 	ldw	r17,4(sp)
  808d70:	dc000017 	ldw	r16,0(sp)
  808d74:	dec00404 	addi	sp,sp,16
  808d78:	f800283a 	ret
  808d7c:	01800844 	movi	r6,33
  808d80:	01400104 	movi	r5,4
  808d84:	080ba740 	call	80ba74 <_calloc_r>
  808d88:	88801315 	stw	r2,76(r17)
  808d8c:	103fec1e 	bne	r2,zero,808d40 <__alt_mem_onchip_mem+0xff788d40>
  808d90:	0005883a 	mov	r2,zero
  808d94:	003ff306 	br	808d64 <__alt_mem_onchip_mem+0xff788d64>
  808d98:	01400044 	movi	r5,1
  808d9c:	2c24983a 	sll	r18,r5,r16
  808da0:	8809883a 	mov	r4,r17
  808da4:	91800144 	addi	r6,r18,5
  808da8:	318d883a 	add	r6,r6,r6
  808dac:	318d883a 	add	r6,r6,r6
  808db0:	080ba740 	call	80ba74 <_calloc_r>
  808db4:	103ff626 	beq	r2,zero,808d90 <__alt_mem_onchip_mem+0xff788d90>
  808db8:	14000115 	stw	r16,4(r2)
  808dbc:	14800215 	stw	r18,8(r2)
  808dc0:	003fe606 	br	808d5c <__alt_mem_onchip_mem+0xff788d5c>

00808dc4 <_Bfree>:
  808dc4:	28000826 	beq	r5,zero,808de8 <_Bfree+0x24>
  808dc8:	28c00117 	ldw	r3,4(r5)
  808dcc:	20801317 	ldw	r2,76(r4)
  808dd0:	18c7883a 	add	r3,r3,r3
  808dd4:	18c7883a 	add	r3,r3,r3
  808dd8:	10c5883a 	add	r2,r2,r3
  808ddc:	10c00017 	ldw	r3,0(r2)
  808de0:	28c00015 	stw	r3,0(r5)
  808de4:	11400015 	stw	r5,0(r2)
  808de8:	f800283a 	ret

00808dec <__multadd>:
  808dec:	defffa04 	addi	sp,sp,-24
  808df0:	dc800315 	stw	r18,12(sp)
  808df4:	dc400215 	stw	r17,8(sp)
  808df8:	dc000115 	stw	r16,4(sp)
  808dfc:	2823883a 	mov	r17,r5
  808e00:	2c000417 	ldw	r16,16(r5)
  808e04:	dfc00515 	stw	ra,20(sp)
  808e08:	dcc00415 	stw	r19,16(sp)
  808e0c:	2025883a 	mov	r18,r4
  808e10:	29400504 	addi	r5,r5,20
  808e14:	0011883a 	mov	r8,zero
  808e18:	28c00017 	ldw	r3,0(r5)
  808e1c:	29400104 	addi	r5,r5,4
  808e20:	42000044 	addi	r8,r8,1
  808e24:	18bfffcc 	andi	r2,r3,65535
  808e28:	1185383a 	mul	r2,r2,r6
  808e2c:	1806d43a 	srli	r3,r3,16
  808e30:	11cf883a 	add	r7,r2,r7
  808e34:	3808d43a 	srli	r4,r7,16
  808e38:	1987383a 	mul	r3,r3,r6
  808e3c:	38bfffcc 	andi	r2,r7,65535
  808e40:	1907883a 	add	r3,r3,r4
  808e44:	1808943a 	slli	r4,r3,16
  808e48:	180ed43a 	srli	r7,r3,16
  808e4c:	2085883a 	add	r2,r4,r2
  808e50:	28bfff15 	stw	r2,-4(r5)
  808e54:	443ff016 	blt	r8,r16,808e18 <__alt_mem_onchip_mem+0xff788e18>
  808e58:	38000926 	beq	r7,zero,808e80 <__multadd+0x94>
  808e5c:	88800217 	ldw	r2,8(r17)
  808e60:	80800f0e 	bge	r16,r2,808ea0 <__multadd+0xb4>
  808e64:	80800144 	addi	r2,r16,5
  808e68:	1085883a 	add	r2,r2,r2
  808e6c:	1085883a 	add	r2,r2,r2
  808e70:	8885883a 	add	r2,r17,r2
  808e74:	11c00015 	stw	r7,0(r2)
  808e78:	84000044 	addi	r16,r16,1
  808e7c:	8c000415 	stw	r16,16(r17)
  808e80:	8805883a 	mov	r2,r17
  808e84:	dfc00517 	ldw	ra,20(sp)
  808e88:	dcc00417 	ldw	r19,16(sp)
  808e8c:	dc800317 	ldw	r18,12(sp)
  808e90:	dc400217 	ldw	r17,8(sp)
  808e94:	dc000117 	ldw	r16,4(sp)
  808e98:	dec00604 	addi	sp,sp,24
  808e9c:	f800283a 	ret
  808ea0:	89400117 	ldw	r5,4(r17)
  808ea4:	9009883a 	mov	r4,r18
  808ea8:	d9c00015 	stw	r7,0(sp)
  808eac:	29400044 	addi	r5,r5,1
  808eb0:	0808d1c0 	call	808d1c <_Balloc>
  808eb4:	89800417 	ldw	r6,16(r17)
  808eb8:	89400304 	addi	r5,r17,12
  808ebc:	11000304 	addi	r4,r2,12
  808ec0:	31800084 	addi	r6,r6,2
  808ec4:	318d883a 	add	r6,r6,r6
  808ec8:	318d883a 	add	r6,r6,r6
  808ecc:	1027883a 	mov	r19,r2
  808ed0:	0808a780 	call	808a78 <memcpy>
  808ed4:	d9c00017 	ldw	r7,0(sp)
  808ed8:	88000a26 	beq	r17,zero,808f04 <__multadd+0x118>
  808edc:	88c00117 	ldw	r3,4(r17)
  808ee0:	90801317 	ldw	r2,76(r18)
  808ee4:	18c7883a 	add	r3,r3,r3
  808ee8:	18c7883a 	add	r3,r3,r3
  808eec:	10c5883a 	add	r2,r2,r3
  808ef0:	10c00017 	ldw	r3,0(r2)
  808ef4:	88c00015 	stw	r3,0(r17)
  808ef8:	14400015 	stw	r17,0(r2)
  808efc:	9823883a 	mov	r17,r19
  808f00:	003fd806 	br	808e64 <__alt_mem_onchip_mem+0xff788e64>
  808f04:	9823883a 	mov	r17,r19
  808f08:	003fd606 	br	808e64 <__alt_mem_onchip_mem+0xff788e64>

00808f0c <__s2b>:
  808f0c:	defff904 	addi	sp,sp,-28
  808f10:	dc400115 	stw	r17,4(sp)
  808f14:	dc000015 	stw	r16,0(sp)
  808f18:	2023883a 	mov	r17,r4
  808f1c:	2821883a 	mov	r16,r5
  808f20:	39000204 	addi	r4,r7,8
  808f24:	01400244 	movi	r5,9
  808f28:	dcc00315 	stw	r19,12(sp)
  808f2c:	dc800215 	stw	r18,8(sp)
  808f30:	dfc00615 	stw	ra,24(sp)
  808f34:	dd400515 	stw	r21,20(sp)
  808f38:	dd000415 	stw	r20,16(sp)
  808f3c:	3825883a 	mov	r18,r7
  808f40:	3027883a 	mov	r19,r6
  808f44:	0800f9c0 	call	800f9c <__divsi3>
  808f48:	00c00044 	movi	r3,1
  808f4c:	000b883a 	mov	r5,zero
  808f50:	1880030e 	bge	r3,r2,808f60 <__s2b+0x54>
  808f54:	18c7883a 	add	r3,r3,r3
  808f58:	29400044 	addi	r5,r5,1
  808f5c:	18bffd16 	blt	r3,r2,808f54 <__alt_mem_onchip_mem+0xff788f54>
  808f60:	8809883a 	mov	r4,r17
  808f64:	0808d1c0 	call	808d1c <_Balloc>
  808f68:	d8c00717 	ldw	r3,28(sp)
  808f6c:	10c00515 	stw	r3,20(r2)
  808f70:	00c00044 	movi	r3,1
  808f74:	10c00415 	stw	r3,16(r2)
  808f78:	00c00244 	movi	r3,9
  808f7c:	1cc0210e 	bge	r3,r19,809004 <__s2b+0xf8>
  808f80:	80eb883a 	add	r21,r16,r3
  808f84:	a829883a 	mov	r20,r21
  808f88:	84e1883a 	add	r16,r16,r19
  808f8c:	a1c00007 	ldb	r7,0(r20)
  808f90:	01800284 	movi	r6,10
  808f94:	a5000044 	addi	r20,r20,1
  808f98:	100b883a 	mov	r5,r2
  808f9c:	39fff404 	addi	r7,r7,-48
  808fa0:	8809883a 	mov	r4,r17
  808fa4:	0808dec0 	call	808dec <__multadd>
  808fa8:	a43ff81e 	bne	r20,r16,808f8c <__alt_mem_onchip_mem+0xff788f8c>
  808fac:	ace1883a 	add	r16,r21,r19
  808fb0:	843ffe04 	addi	r16,r16,-8
  808fb4:	9c800a0e 	bge	r19,r18,808fe0 <__s2b+0xd4>
  808fb8:	94e5c83a 	sub	r18,r18,r19
  808fbc:	84a5883a 	add	r18,r16,r18
  808fc0:	81c00007 	ldb	r7,0(r16)
  808fc4:	01800284 	movi	r6,10
  808fc8:	84000044 	addi	r16,r16,1
  808fcc:	100b883a 	mov	r5,r2
  808fd0:	39fff404 	addi	r7,r7,-48
  808fd4:	8809883a 	mov	r4,r17
  808fd8:	0808dec0 	call	808dec <__multadd>
  808fdc:	84bff81e 	bne	r16,r18,808fc0 <__alt_mem_onchip_mem+0xff788fc0>
  808fe0:	dfc00617 	ldw	ra,24(sp)
  808fe4:	dd400517 	ldw	r21,20(sp)
  808fe8:	dd000417 	ldw	r20,16(sp)
  808fec:	dcc00317 	ldw	r19,12(sp)
  808ff0:	dc800217 	ldw	r18,8(sp)
  808ff4:	dc400117 	ldw	r17,4(sp)
  808ff8:	dc000017 	ldw	r16,0(sp)
  808ffc:	dec00704 	addi	sp,sp,28
  809000:	f800283a 	ret
  809004:	84000284 	addi	r16,r16,10
  809008:	1827883a 	mov	r19,r3
  80900c:	003fe906 	br	808fb4 <__alt_mem_onchip_mem+0xff788fb4>

00809010 <__hi0bits>:
  809010:	20bfffec 	andhi	r2,r4,65535
  809014:	1000141e 	bne	r2,zero,809068 <__hi0bits+0x58>
  809018:	2008943a 	slli	r4,r4,16
  80901c:	00800404 	movi	r2,16
  809020:	20ffc02c 	andhi	r3,r4,65280
  809024:	1800021e 	bne	r3,zero,809030 <__hi0bits+0x20>
  809028:	2008923a 	slli	r4,r4,8
  80902c:	10800204 	addi	r2,r2,8
  809030:	20fc002c 	andhi	r3,r4,61440
  809034:	1800021e 	bne	r3,zero,809040 <__hi0bits+0x30>
  809038:	2008913a 	slli	r4,r4,4
  80903c:	10800104 	addi	r2,r2,4
  809040:	20f0002c 	andhi	r3,r4,49152
  809044:	1800031e 	bne	r3,zero,809054 <__hi0bits+0x44>
  809048:	2109883a 	add	r4,r4,r4
  80904c:	10800084 	addi	r2,r2,2
  809050:	2109883a 	add	r4,r4,r4
  809054:	20000316 	blt	r4,zero,809064 <__hi0bits+0x54>
  809058:	2110002c 	andhi	r4,r4,16384
  80905c:	2000041e 	bne	r4,zero,809070 <__hi0bits+0x60>
  809060:	00800804 	movi	r2,32
  809064:	f800283a 	ret
  809068:	0005883a 	mov	r2,zero
  80906c:	003fec06 	br	809020 <__alt_mem_onchip_mem+0xff789020>
  809070:	10800044 	addi	r2,r2,1
  809074:	f800283a 	ret

00809078 <__lo0bits>:
  809078:	20c00017 	ldw	r3,0(r4)
  80907c:	188001cc 	andi	r2,r3,7
  809080:	10000826 	beq	r2,zero,8090a4 <__lo0bits+0x2c>
  809084:	1880004c 	andi	r2,r3,1
  809088:	1000211e 	bne	r2,zero,809110 <__lo0bits+0x98>
  80908c:	1880008c 	andi	r2,r3,2
  809090:	1000211e 	bne	r2,zero,809118 <__lo0bits+0xa0>
  809094:	1806d0ba 	srli	r3,r3,2
  809098:	00800084 	movi	r2,2
  80909c:	20c00015 	stw	r3,0(r4)
  8090a0:	f800283a 	ret
  8090a4:	18bfffcc 	andi	r2,r3,65535
  8090a8:	10001326 	beq	r2,zero,8090f8 <__lo0bits+0x80>
  8090ac:	0005883a 	mov	r2,zero
  8090b0:	19403fcc 	andi	r5,r3,255
  8090b4:	2800021e 	bne	r5,zero,8090c0 <__lo0bits+0x48>
  8090b8:	1806d23a 	srli	r3,r3,8
  8090bc:	10800204 	addi	r2,r2,8
  8090c0:	194003cc 	andi	r5,r3,15
  8090c4:	2800021e 	bne	r5,zero,8090d0 <__lo0bits+0x58>
  8090c8:	1806d13a 	srli	r3,r3,4
  8090cc:	10800104 	addi	r2,r2,4
  8090d0:	194000cc 	andi	r5,r3,3
  8090d4:	2800021e 	bne	r5,zero,8090e0 <__lo0bits+0x68>
  8090d8:	1806d0ba 	srli	r3,r3,2
  8090dc:	10800084 	addi	r2,r2,2
  8090e0:	1940004c 	andi	r5,r3,1
  8090e4:	2800081e 	bne	r5,zero,809108 <__lo0bits+0x90>
  8090e8:	1806d07a 	srli	r3,r3,1
  8090ec:	1800051e 	bne	r3,zero,809104 <__lo0bits+0x8c>
  8090f0:	00800804 	movi	r2,32
  8090f4:	f800283a 	ret
  8090f8:	1806d43a 	srli	r3,r3,16
  8090fc:	00800404 	movi	r2,16
  809100:	003feb06 	br	8090b0 <__alt_mem_onchip_mem+0xff7890b0>
  809104:	10800044 	addi	r2,r2,1
  809108:	20c00015 	stw	r3,0(r4)
  80910c:	f800283a 	ret
  809110:	0005883a 	mov	r2,zero
  809114:	f800283a 	ret
  809118:	1806d07a 	srli	r3,r3,1
  80911c:	00800044 	movi	r2,1
  809120:	20c00015 	stw	r3,0(r4)
  809124:	f800283a 	ret

00809128 <__i2b>:
  809128:	defffd04 	addi	sp,sp,-12
  80912c:	dc000015 	stw	r16,0(sp)
  809130:	04000044 	movi	r16,1
  809134:	dc400115 	stw	r17,4(sp)
  809138:	2823883a 	mov	r17,r5
  80913c:	800b883a 	mov	r5,r16
  809140:	dfc00215 	stw	ra,8(sp)
  809144:	0808d1c0 	call	808d1c <_Balloc>
  809148:	14400515 	stw	r17,20(r2)
  80914c:	14000415 	stw	r16,16(r2)
  809150:	dfc00217 	ldw	ra,8(sp)
  809154:	dc400117 	ldw	r17,4(sp)
  809158:	dc000017 	ldw	r16,0(sp)
  80915c:	dec00304 	addi	sp,sp,12
  809160:	f800283a 	ret

00809164 <__multiply>:
  809164:	defffa04 	addi	sp,sp,-24
  809168:	dcc00315 	stw	r19,12(sp)
  80916c:	dc800215 	stw	r18,8(sp)
  809170:	34c00417 	ldw	r19,16(r6)
  809174:	2c800417 	ldw	r18,16(r5)
  809178:	dd000415 	stw	r20,16(sp)
  80917c:	dc400115 	stw	r17,4(sp)
  809180:	dfc00515 	stw	ra,20(sp)
  809184:	dc000015 	stw	r16,0(sp)
  809188:	2829883a 	mov	r20,r5
  80918c:	3023883a 	mov	r17,r6
  809190:	94c0050e 	bge	r18,r19,8091a8 <__multiply+0x44>
  809194:	9007883a 	mov	r3,r18
  809198:	3029883a 	mov	r20,r6
  80919c:	9825883a 	mov	r18,r19
  8091a0:	2823883a 	mov	r17,r5
  8091a4:	1827883a 	mov	r19,r3
  8091a8:	a0800217 	ldw	r2,8(r20)
  8091ac:	94e1883a 	add	r16,r18,r19
  8091b0:	a1400117 	ldw	r5,4(r20)
  8091b4:	1400010e 	bge	r2,r16,8091bc <__multiply+0x58>
  8091b8:	29400044 	addi	r5,r5,1
  8091bc:	0808d1c0 	call	808d1c <_Balloc>
  8091c0:	8415883a 	add	r10,r16,r16
  8091c4:	12c00504 	addi	r11,r2,20
  8091c8:	5295883a 	add	r10,r10,r10
  8091cc:	5a95883a 	add	r10,r11,r10
  8091d0:	5807883a 	mov	r3,r11
  8091d4:	5a80032e 	bgeu	r11,r10,8091e4 <__multiply+0x80>
  8091d8:	18000015 	stw	zero,0(r3)
  8091dc:	18c00104 	addi	r3,r3,4
  8091e0:	1abffd36 	bltu	r3,r10,8091d8 <__alt_mem_onchip_mem+0xff7891d8>
  8091e4:	9ce7883a 	add	r19,r19,r19
  8091e8:	94a5883a 	add	r18,r18,r18
  8091ec:	89800504 	addi	r6,r17,20
  8091f0:	9ce7883a 	add	r19,r19,r19
  8091f4:	a3400504 	addi	r13,r20,20
  8091f8:	94a5883a 	add	r18,r18,r18
  8091fc:	34d9883a 	add	r12,r6,r19
  809200:	6c93883a 	add	r9,r13,r18
  809204:	3300422e 	bgeu	r6,r12,809310 <__multiply+0x1ac>
  809208:	37c00017 	ldw	ra,0(r6)
  80920c:	fbffffcc 	andi	r15,ra,65535
  809210:	78001b26 	beq	r15,zero,809280 <__multiply+0x11c>
  809214:	5811883a 	mov	r8,r11
  809218:	681d883a 	mov	r14,r13
  80921c:	000f883a 	mov	r7,zero
  809220:	71000017 	ldw	r4,0(r14)
  809224:	40c00017 	ldw	r3,0(r8)
  809228:	73800104 	addi	r14,r14,4
  80922c:	217fffcc 	andi	r5,r4,65535
  809230:	2bcb383a 	mul	r5,r5,r15
  809234:	2008d43a 	srli	r4,r4,16
  809238:	1c7fffcc 	andi	r17,r3,65535
  80923c:	2c4b883a 	add	r5,r5,r17
  809240:	29cb883a 	add	r5,r5,r7
  809244:	23c9383a 	mul	r4,r4,r15
  809248:	1806d43a 	srli	r3,r3,16
  80924c:	280ed43a 	srli	r7,r5,16
  809250:	297fffcc 	andi	r5,r5,65535
  809254:	20c7883a 	add	r3,r4,r3
  809258:	19c7883a 	add	r3,r3,r7
  80925c:	1808943a 	slli	r4,r3,16
  809260:	4023883a 	mov	r17,r8
  809264:	180ed43a 	srli	r7,r3,16
  809268:	214ab03a 	or	r5,r4,r5
  80926c:	41400015 	stw	r5,0(r8)
  809270:	42000104 	addi	r8,r8,4
  809274:	727fea36 	bltu	r14,r9,809220 <__alt_mem_onchip_mem+0xff789220>
  809278:	89c00115 	stw	r7,4(r17)
  80927c:	37c00017 	ldw	ra,0(r6)
  809280:	f83ed43a 	srli	ra,ra,16
  809284:	f8001f26 	beq	ra,zero,809304 <__multiply+0x1a0>
  809288:	58c00017 	ldw	r3,0(r11)
  80928c:	681d883a 	mov	r14,r13
  809290:	581f883a 	mov	r15,r11
  809294:	1811883a 	mov	r8,r3
  809298:	5825883a 	mov	r18,r11
  80929c:	000f883a 	mov	r7,zero
  8092a0:	00000106 	br	8092a8 <__multiply+0x144>
  8092a4:	8825883a 	mov	r18,r17
  8092a8:	7140000b 	ldhu	r5,0(r14)
  8092ac:	4010d43a 	srli	r8,r8,16
  8092b0:	193fffcc 	andi	r4,r3,65535
  8092b4:	2fcb383a 	mul	r5,r5,ra
  8092b8:	7bc00104 	addi	r15,r15,4
  8092bc:	73800104 	addi	r14,r14,4
  8092c0:	2a0b883a 	add	r5,r5,r8
  8092c4:	29cb883a 	add	r5,r5,r7
  8092c8:	2806943a 	slli	r3,r5,16
  8092cc:	94400104 	addi	r17,r18,4
  8092d0:	280ad43a 	srli	r5,r5,16
  8092d4:	1908b03a 	or	r4,r3,r4
  8092d8:	793fff15 	stw	r4,-4(r15)
  8092dc:	70ffff17 	ldw	r3,-4(r14)
  8092e0:	8a000017 	ldw	r8,0(r17)
  8092e4:	1806d43a 	srli	r3,r3,16
  8092e8:	413fffcc 	andi	r4,r8,65535
  8092ec:	1fc7383a 	mul	r3,r3,ra
  8092f0:	1907883a 	add	r3,r3,r4
  8092f4:	1947883a 	add	r3,r3,r5
  8092f8:	180ed43a 	srli	r7,r3,16
  8092fc:	727fe936 	bltu	r14,r9,8092a4 <__alt_mem_onchip_mem+0xff7892a4>
  809300:	90c00115 	stw	r3,4(r18)
  809304:	31800104 	addi	r6,r6,4
  809308:	5ac00104 	addi	r11,r11,4
  80930c:	333fbe36 	bltu	r6,r12,809208 <__alt_mem_onchip_mem+0xff789208>
  809310:	0400090e 	bge	zero,r16,809338 <__multiply+0x1d4>
  809314:	50ffff17 	ldw	r3,-4(r10)
  809318:	52bfff04 	addi	r10,r10,-4
  80931c:	18000326 	beq	r3,zero,80932c <__multiply+0x1c8>
  809320:	00000506 	br	809338 <__multiply+0x1d4>
  809324:	50c00017 	ldw	r3,0(r10)
  809328:	1800031e 	bne	r3,zero,809338 <__multiply+0x1d4>
  80932c:	843fffc4 	addi	r16,r16,-1
  809330:	52bfff04 	addi	r10,r10,-4
  809334:	803ffb1e 	bne	r16,zero,809324 <__alt_mem_onchip_mem+0xff789324>
  809338:	14000415 	stw	r16,16(r2)
  80933c:	dfc00517 	ldw	ra,20(sp)
  809340:	dd000417 	ldw	r20,16(sp)
  809344:	dcc00317 	ldw	r19,12(sp)
  809348:	dc800217 	ldw	r18,8(sp)
  80934c:	dc400117 	ldw	r17,4(sp)
  809350:	dc000017 	ldw	r16,0(sp)
  809354:	dec00604 	addi	sp,sp,24
  809358:	f800283a 	ret

0080935c <__pow5mult>:
  80935c:	defffa04 	addi	sp,sp,-24
  809360:	dcc00315 	stw	r19,12(sp)
  809364:	dc000015 	stw	r16,0(sp)
  809368:	dfc00515 	stw	ra,20(sp)
  80936c:	dd000415 	stw	r20,16(sp)
  809370:	dc800215 	stw	r18,8(sp)
  809374:	dc400115 	stw	r17,4(sp)
  809378:	308000cc 	andi	r2,r6,3
  80937c:	3021883a 	mov	r16,r6
  809380:	2027883a 	mov	r19,r4
  809384:	10002f1e 	bne	r2,zero,809444 <__pow5mult+0xe8>
  809388:	2825883a 	mov	r18,r5
  80938c:	8021d0ba 	srai	r16,r16,2
  809390:	80001a26 	beq	r16,zero,8093fc <__pow5mult+0xa0>
  809394:	9c401217 	ldw	r17,72(r19)
  809398:	8800061e 	bne	r17,zero,8093b4 <__pow5mult+0x58>
  80939c:	00003406 	br	809470 <__pow5mult+0x114>
  8093a0:	8021d07a 	srai	r16,r16,1
  8093a4:	80001526 	beq	r16,zero,8093fc <__pow5mult+0xa0>
  8093a8:	88800017 	ldw	r2,0(r17)
  8093ac:	10001c26 	beq	r2,zero,809420 <__pow5mult+0xc4>
  8093b0:	1023883a 	mov	r17,r2
  8093b4:	8080004c 	andi	r2,r16,1
  8093b8:	103ff926 	beq	r2,zero,8093a0 <__alt_mem_onchip_mem+0xff7893a0>
  8093bc:	880d883a 	mov	r6,r17
  8093c0:	900b883a 	mov	r5,r18
  8093c4:	9809883a 	mov	r4,r19
  8093c8:	08091640 	call	809164 <__multiply>
  8093cc:	90001b26 	beq	r18,zero,80943c <__pow5mult+0xe0>
  8093d0:	91000117 	ldw	r4,4(r18)
  8093d4:	98c01317 	ldw	r3,76(r19)
  8093d8:	8021d07a 	srai	r16,r16,1
  8093dc:	2109883a 	add	r4,r4,r4
  8093e0:	2109883a 	add	r4,r4,r4
  8093e4:	1907883a 	add	r3,r3,r4
  8093e8:	19000017 	ldw	r4,0(r3)
  8093ec:	91000015 	stw	r4,0(r18)
  8093f0:	1c800015 	stw	r18,0(r3)
  8093f4:	1025883a 	mov	r18,r2
  8093f8:	803feb1e 	bne	r16,zero,8093a8 <__alt_mem_onchip_mem+0xff7893a8>
  8093fc:	9005883a 	mov	r2,r18
  809400:	dfc00517 	ldw	ra,20(sp)
  809404:	dd000417 	ldw	r20,16(sp)
  809408:	dcc00317 	ldw	r19,12(sp)
  80940c:	dc800217 	ldw	r18,8(sp)
  809410:	dc400117 	ldw	r17,4(sp)
  809414:	dc000017 	ldw	r16,0(sp)
  809418:	dec00604 	addi	sp,sp,24
  80941c:	f800283a 	ret
  809420:	880d883a 	mov	r6,r17
  809424:	880b883a 	mov	r5,r17
  809428:	9809883a 	mov	r4,r19
  80942c:	08091640 	call	809164 <__multiply>
  809430:	88800015 	stw	r2,0(r17)
  809434:	10000015 	stw	zero,0(r2)
  809438:	003fdd06 	br	8093b0 <__alt_mem_onchip_mem+0xff7893b0>
  80943c:	1025883a 	mov	r18,r2
  809440:	003fd706 	br	8093a0 <__alt_mem_onchip_mem+0xff7893a0>
  809444:	10bfffc4 	addi	r2,r2,-1
  809448:	1085883a 	add	r2,r2,r2
  80944c:	00c02074 	movhi	r3,129
  809450:	18cb0804 	addi	r3,r3,11296
  809454:	1085883a 	add	r2,r2,r2
  809458:	1885883a 	add	r2,r3,r2
  80945c:	11800017 	ldw	r6,0(r2)
  809460:	000f883a 	mov	r7,zero
  809464:	0808dec0 	call	808dec <__multadd>
  809468:	1025883a 	mov	r18,r2
  80946c:	003fc706 	br	80938c <__alt_mem_onchip_mem+0xff78938c>
  809470:	05000044 	movi	r20,1
  809474:	a00b883a 	mov	r5,r20
  809478:	9809883a 	mov	r4,r19
  80947c:	0808d1c0 	call	808d1c <_Balloc>
  809480:	1023883a 	mov	r17,r2
  809484:	00809c44 	movi	r2,625
  809488:	88800515 	stw	r2,20(r17)
  80948c:	8d000415 	stw	r20,16(r17)
  809490:	9c401215 	stw	r17,72(r19)
  809494:	88000015 	stw	zero,0(r17)
  809498:	003fc606 	br	8093b4 <__alt_mem_onchip_mem+0xff7893b4>

0080949c <__lshift>:
  80949c:	defff904 	addi	sp,sp,-28
  8094a0:	dd400515 	stw	r21,20(sp)
  8094a4:	dcc00315 	stw	r19,12(sp)
  8094a8:	302bd17a 	srai	r21,r6,5
  8094ac:	2cc00417 	ldw	r19,16(r5)
  8094b0:	28800217 	ldw	r2,8(r5)
  8094b4:	dd000415 	stw	r20,16(sp)
  8094b8:	ace7883a 	add	r19,r21,r19
  8094bc:	dc800215 	stw	r18,8(sp)
  8094c0:	dc400115 	stw	r17,4(sp)
  8094c4:	dc000015 	stw	r16,0(sp)
  8094c8:	dfc00615 	stw	ra,24(sp)
  8094cc:	9c000044 	addi	r16,r19,1
  8094d0:	2823883a 	mov	r17,r5
  8094d4:	3029883a 	mov	r20,r6
  8094d8:	2025883a 	mov	r18,r4
  8094dc:	29400117 	ldw	r5,4(r5)
  8094e0:	1400030e 	bge	r2,r16,8094f0 <__lshift+0x54>
  8094e4:	1085883a 	add	r2,r2,r2
  8094e8:	29400044 	addi	r5,r5,1
  8094ec:	143ffd16 	blt	r2,r16,8094e4 <__alt_mem_onchip_mem+0xff7894e4>
  8094f0:	9009883a 	mov	r4,r18
  8094f4:	0808d1c0 	call	808d1c <_Balloc>
  8094f8:	10c00504 	addi	r3,r2,20
  8094fc:	0540070e 	bge	zero,r21,80951c <__lshift+0x80>
  809500:	ad6b883a 	add	r21,r21,r21
  809504:	ad6b883a 	add	r21,r21,r21
  809508:	1809883a 	mov	r4,r3
  80950c:	1d47883a 	add	r3,r3,r21
  809510:	20000015 	stw	zero,0(r4)
  809514:	21000104 	addi	r4,r4,4
  809518:	193ffd1e 	bne	r3,r4,809510 <__alt_mem_onchip_mem+0xff789510>
  80951c:	8a000417 	ldw	r8,16(r17)
  809520:	89000504 	addi	r4,r17,20
  809524:	a18007cc 	andi	r6,r20,31
  809528:	4211883a 	add	r8,r8,r8
  80952c:	4211883a 	add	r8,r8,r8
  809530:	2211883a 	add	r8,r4,r8
  809534:	30002326 	beq	r6,zero,8095c4 <__lshift+0x128>
  809538:	02400804 	movi	r9,32
  80953c:	4993c83a 	sub	r9,r9,r6
  809540:	000b883a 	mov	r5,zero
  809544:	21c00017 	ldw	r7,0(r4)
  809548:	1815883a 	mov	r10,r3
  80954c:	18c00104 	addi	r3,r3,4
  809550:	398e983a 	sll	r7,r7,r6
  809554:	21000104 	addi	r4,r4,4
  809558:	394ab03a 	or	r5,r7,r5
  80955c:	197fff15 	stw	r5,-4(r3)
  809560:	217fff17 	ldw	r5,-4(r4)
  809564:	2a4ad83a 	srl	r5,r5,r9
  809568:	223ff636 	bltu	r4,r8,809544 <__alt_mem_onchip_mem+0xff789544>
  80956c:	51400115 	stw	r5,4(r10)
  809570:	28001a1e 	bne	r5,zero,8095dc <__lshift+0x140>
  809574:	843fffc4 	addi	r16,r16,-1
  809578:	14000415 	stw	r16,16(r2)
  80957c:	88000826 	beq	r17,zero,8095a0 <__lshift+0x104>
  809580:	89000117 	ldw	r4,4(r17)
  809584:	90c01317 	ldw	r3,76(r18)
  809588:	2109883a 	add	r4,r4,r4
  80958c:	2109883a 	add	r4,r4,r4
  809590:	1907883a 	add	r3,r3,r4
  809594:	19000017 	ldw	r4,0(r3)
  809598:	89000015 	stw	r4,0(r17)
  80959c:	1c400015 	stw	r17,0(r3)
  8095a0:	dfc00617 	ldw	ra,24(sp)
  8095a4:	dd400517 	ldw	r21,20(sp)
  8095a8:	dd000417 	ldw	r20,16(sp)
  8095ac:	dcc00317 	ldw	r19,12(sp)
  8095b0:	dc800217 	ldw	r18,8(sp)
  8095b4:	dc400117 	ldw	r17,4(sp)
  8095b8:	dc000017 	ldw	r16,0(sp)
  8095bc:	dec00704 	addi	sp,sp,28
  8095c0:	f800283a 	ret
  8095c4:	21400017 	ldw	r5,0(r4)
  8095c8:	18c00104 	addi	r3,r3,4
  8095cc:	21000104 	addi	r4,r4,4
  8095d0:	197fff15 	stw	r5,-4(r3)
  8095d4:	223ffb36 	bltu	r4,r8,8095c4 <__alt_mem_onchip_mem+0xff7895c4>
  8095d8:	003fe606 	br	809574 <__alt_mem_onchip_mem+0xff789574>
  8095dc:	9c000084 	addi	r16,r19,2
  8095e0:	003fe406 	br	809574 <__alt_mem_onchip_mem+0xff789574>

008095e4 <__mcmp>:
  8095e4:	20800417 	ldw	r2,16(r4)
  8095e8:	28c00417 	ldw	r3,16(r5)
  8095ec:	10c5c83a 	sub	r2,r2,r3
  8095f0:	1000111e 	bne	r2,zero,809638 <__mcmp+0x54>
  8095f4:	18c7883a 	add	r3,r3,r3
  8095f8:	18c7883a 	add	r3,r3,r3
  8095fc:	21000504 	addi	r4,r4,20
  809600:	29400504 	addi	r5,r5,20
  809604:	20c5883a 	add	r2,r4,r3
  809608:	28cb883a 	add	r5,r5,r3
  80960c:	00000106 	br	809614 <__mcmp+0x30>
  809610:	20800a2e 	bgeu	r4,r2,80963c <__mcmp+0x58>
  809614:	10bfff04 	addi	r2,r2,-4
  809618:	297fff04 	addi	r5,r5,-4
  80961c:	11800017 	ldw	r6,0(r2)
  809620:	28c00017 	ldw	r3,0(r5)
  809624:	30fffa26 	beq	r6,r3,809610 <__alt_mem_onchip_mem+0xff789610>
  809628:	30c00236 	bltu	r6,r3,809634 <__mcmp+0x50>
  80962c:	00800044 	movi	r2,1
  809630:	f800283a 	ret
  809634:	00bfffc4 	movi	r2,-1
  809638:	f800283a 	ret
  80963c:	0005883a 	mov	r2,zero
  809640:	f800283a 	ret

00809644 <__mdiff>:
  809644:	28c00417 	ldw	r3,16(r5)
  809648:	30800417 	ldw	r2,16(r6)
  80964c:	defffa04 	addi	sp,sp,-24
  809650:	dcc00315 	stw	r19,12(sp)
  809654:	dc800215 	stw	r18,8(sp)
  809658:	dfc00515 	stw	ra,20(sp)
  80965c:	dd000415 	stw	r20,16(sp)
  809660:	dc400115 	stw	r17,4(sp)
  809664:	dc000015 	stw	r16,0(sp)
  809668:	1887c83a 	sub	r3,r3,r2
  80966c:	2825883a 	mov	r18,r5
  809670:	3027883a 	mov	r19,r6
  809674:	1800141e 	bne	r3,zero,8096c8 <__mdiff+0x84>
  809678:	1085883a 	add	r2,r2,r2
  80967c:	1085883a 	add	r2,r2,r2
  809680:	2a000504 	addi	r8,r5,20
  809684:	34000504 	addi	r16,r6,20
  809688:	4087883a 	add	r3,r8,r2
  80968c:	8085883a 	add	r2,r16,r2
  809690:	00000106 	br	809698 <__mdiff+0x54>
  809694:	40c0592e 	bgeu	r8,r3,8097fc <__mdiff+0x1b8>
  809698:	18ffff04 	addi	r3,r3,-4
  80969c:	10bfff04 	addi	r2,r2,-4
  8096a0:	19c00017 	ldw	r7,0(r3)
  8096a4:	11400017 	ldw	r5,0(r2)
  8096a8:	397ffa26 	beq	r7,r5,809694 <__alt_mem_onchip_mem+0xff789694>
  8096ac:	3940592e 	bgeu	r7,r5,809814 <__mdiff+0x1d0>
  8096b0:	9005883a 	mov	r2,r18
  8096b4:	4023883a 	mov	r17,r8
  8096b8:	9825883a 	mov	r18,r19
  8096bc:	05000044 	movi	r20,1
  8096c0:	1027883a 	mov	r19,r2
  8096c4:	00000406 	br	8096d8 <__mdiff+0x94>
  8096c8:	18005616 	blt	r3,zero,809824 <__mdiff+0x1e0>
  8096cc:	34400504 	addi	r17,r6,20
  8096d0:	2c000504 	addi	r16,r5,20
  8096d4:	0029883a 	mov	r20,zero
  8096d8:	91400117 	ldw	r5,4(r18)
  8096dc:	0808d1c0 	call	808d1c <_Balloc>
  8096e0:	92400417 	ldw	r9,16(r18)
  8096e4:	9b000417 	ldw	r12,16(r19)
  8096e8:	12c00504 	addi	r11,r2,20
  8096ec:	4a51883a 	add	r8,r9,r9
  8096f0:	6319883a 	add	r12,r12,r12
  8096f4:	4211883a 	add	r8,r8,r8
  8096f8:	6319883a 	add	r12,r12,r12
  8096fc:	15000315 	stw	r20,12(r2)
  809700:	8211883a 	add	r8,r16,r8
  809704:	8b19883a 	add	r12,r17,r12
  809708:	0007883a 	mov	r3,zero
  80970c:	81400017 	ldw	r5,0(r16)
  809710:	89c00017 	ldw	r7,0(r17)
  809714:	59800104 	addi	r6,r11,4
  809718:	293fffcc 	andi	r4,r5,65535
  80971c:	20c7883a 	add	r3,r4,r3
  809720:	393fffcc 	andi	r4,r7,65535
  809724:	1909c83a 	sub	r4,r3,r4
  809728:	280ad43a 	srli	r5,r5,16
  80972c:	380ed43a 	srli	r7,r7,16
  809730:	2007d43a 	srai	r3,r4,16
  809734:	213fffcc 	andi	r4,r4,65535
  809738:	29cbc83a 	sub	r5,r5,r7
  80973c:	28c7883a 	add	r3,r5,r3
  809740:	180a943a 	slli	r5,r3,16
  809744:	8c400104 	addi	r17,r17,4
  809748:	84000104 	addi	r16,r16,4
  80974c:	2908b03a 	or	r4,r5,r4
  809750:	59000015 	stw	r4,0(r11)
  809754:	1807d43a 	srai	r3,r3,16
  809758:	3015883a 	mov	r10,r6
  80975c:	3017883a 	mov	r11,r6
  809760:	8b3fea36 	bltu	r17,r12,80970c <__alt_mem_onchip_mem+0xff78970c>
  809764:	8200162e 	bgeu	r16,r8,8097c0 <__mdiff+0x17c>
  809768:	8017883a 	mov	r11,r16
  80976c:	59400017 	ldw	r5,0(r11)
  809770:	31800104 	addi	r6,r6,4
  809774:	5ac00104 	addi	r11,r11,4
  809778:	293fffcc 	andi	r4,r5,65535
  80977c:	20c7883a 	add	r3,r4,r3
  809780:	280ed43a 	srli	r7,r5,16
  809784:	180bd43a 	srai	r5,r3,16
  809788:	193fffcc 	andi	r4,r3,65535
  80978c:	3947883a 	add	r3,r7,r5
  809790:	180a943a 	slli	r5,r3,16
  809794:	1807d43a 	srai	r3,r3,16
  809798:	2908b03a 	or	r4,r5,r4
  80979c:	313fff15 	stw	r4,-4(r6)
  8097a0:	5a3ff236 	bltu	r11,r8,80976c <__alt_mem_onchip_mem+0xff78976c>
  8097a4:	0406303a 	nor	r3,zero,r16
  8097a8:	1a07883a 	add	r3,r3,r8
  8097ac:	1806d0ba 	srli	r3,r3,2
  8097b0:	18c00044 	addi	r3,r3,1
  8097b4:	18c7883a 	add	r3,r3,r3
  8097b8:	18c7883a 	add	r3,r3,r3
  8097bc:	50d5883a 	add	r10,r10,r3
  8097c0:	50ffff04 	addi	r3,r10,-4
  8097c4:	2000041e 	bne	r4,zero,8097d8 <__mdiff+0x194>
  8097c8:	18ffff04 	addi	r3,r3,-4
  8097cc:	19000017 	ldw	r4,0(r3)
  8097d0:	4a7fffc4 	addi	r9,r9,-1
  8097d4:	203ffc26 	beq	r4,zero,8097c8 <__alt_mem_onchip_mem+0xff7897c8>
  8097d8:	12400415 	stw	r9,16(r2)
  8097dc:	dfc00517 	ldw	ra,20(sp)
  8097e0:	dd000417 	ldw	r20,16(sp)
  8097e4:	dcc00317 	ldw	r19,12(sp)
  8097e8:	dc800217 	ldw	r18,8(sp)
  8097ec:	dc400117 	ldw	r17,4(sp)
  8097f0:	dc000017 	ldw	r16,0(sp)
  8097f4:	dec00604 	addi	sp,sp,24
  8097f8:	f800283a 	ret
  8097fc:	000b883a 	mov	r5,zero
  809800:	0808d1c0 	call	808d1c <_Balloc>
  809804:	00c00044 	movi	r3,1
  809808:	10c00415 	stw	r3,16(r2)
  80980c:	10000515 	stw	zero,20(r2)
  809810:	003ff206 	br	8097dc <__alt_mem_onchip_mem+0xff7897dc>
  809814:	8023883a 	mov	r17,r16
  809818:	0029883a 	mov	r20,zero
  80981c:	4021883a 	mov	r16,r8
  809820:	003fad06 	br	8096d8 <__alt_mem_onchip_mem+0xff7896d8>
  809824:	9005883a 	mov	r2,r18
  809828:	94400504 	addi	r17,r18,20
  80982c:	9c000504 	addi	r16,r19,20
  809830:	9825883a 	mov	r18,r19
  809834:	05000044 	movi	r20,1
  809838:	1027883a 	mov	r19,r2
  80983c:	003fa606 	br	8096d8 <__alt_mem_onchip_mem+0xff7896d8>

00809840 <__ulp>:
  809840:	295ffc2c 	andhi	r5,r5,32752
  809844:	00bf3034 	movhi	r2,64704
  809848:	2887883a 	add	r3,r5,r2
  80984c:	00c0020e 	bge	zero,r3,809858 <__ulp+0x18>
  809850:	0005883a 	mov	r2,zero
  809854:	f800283a 	ret
  809858:	00c7c83a 	sub	r3,zero,r3
  80985c:	1807d53a 	srai	r3,r3,20
  809860:	008004c4 	movi	r2,19
  809864:	10c00b0e 	bge	r2,r3,809894 <__ulp+0x54>
  809868:	18bffb04 	addi	r2,r3,-20
  80986c:	01000784 	movi	r4,30
  809870:	0007883a 	mov	r3,zero
  809874:	20800516 	blt	r4,r2,80988c <__ulp+0x4c>
  809878:	010007c4 	movi	r4,31
  80987c:	2089c83a 	sub	r4,r4,r2
  809880:	00800044 	movi	r2,1
  809884:	1104983a 	sll	r2,r2,r4
  809888:	f800283a 	ret
  80988c:	00800044 	movi	r2,1
  809890:	f800283a 	ret
  809894:	01400234 	movhi	r5,8
  809898:	28c7d83a 	sra	r3,r5,r3
  80989c:	0005883a 	mov	r2,zero
  8098a0:	f800283a 	ret

008098a4 <__b2d>:
  8098a4:	defffa04 	addi	sp,sp,-24
  8098a8:	dc000015 	stw	r16,0(sp)
  8098ac:	24000417 	ldw	r16,16(r4)
  8098b0:	dc400115 	stw	r17,4(sp)
  8098b4:	24400504 	addi	r17,r4,20
  8098b8:	8421883a 	add	r16,r16,r16
  8098bc:	8421883a 	add	r16,r16,r16
  8098c0:	8c21883a 	add	r16,r17,r16
  8098c4:	dc800215 	stw	r18,8(sp)
  8098c8:	84bfff17 	ldw	r18,-4(r16)
  8098cc:	dd000415 	stw	r20,16(sp)
  8098d0:	dcc00315 	stw	r19,12(sp)
  8098d4:	9009883a 	mov	r4,r18
  8098d8:	2829883a 	mov	r20,r5
  8098dc:	dfc00515 	stw	ra,20(sp)
  8098e0:	08090100 	call	809010 <__hi0bits>
  8098e4:	00c00804 	movi	r3,32
  8098e8:	1889c83a 	sub	r4,r3,r2
  8098ec:	a1000015 	stw	r4,0(r20)
  8098f0:	01000284 	movi	r4,10
  8098f4:	84ffff04 	addi	r19,r16,-4
  8098f8:	20801216 	blt	r4,r2,809944 <__b2d+0xa0>
  8098fc:	018002c4 	movi	r6,11
  809900:	308dc83a 	sub	r6,r6,r2
  809904:	9186d83a 	srl	r3,r18,r6
  809908:	18cffc34 	orhi	r3,r3,16368
  80990c:	8cc0212e 	bgeu	r17,r19,809994 <__b2d+0xf0>
  809910:	813ffe17 	ldw	r4,-8(r16)
  809914:	218cd83a 	srl	r6,r4,r6
  809918:	10800544 	addi	r2,r2,21
  80991c:	9084983a 	sll	r2,r18,r2
  809920:	1184b03a 	or	r2,r2,r6
  809924:	dfc00517 	ldw	ra,20(sp)
  809928:	dd000417 	ldw	r20,16(sp)
  80992c:	dcc00317 	ldw	r19,12(sp)
  809930:	dc800217 	ldw	r18,8(sp)
  809934:	dc400117 	ldw	r17,4(sp)
  809938:	dc000017 	ldw	r16,0(sp)
  80993c:	dec00604 	addi	sp,sp,24
  809940:	f800283a 	ret
  809944:	8cc00f2e 	bgeu	r17,r19,809984 <__b2d+0xe0>
  809948:	117ffd44 	addi	r5,r2,-11
  80994c:	80bffe17 	ldw	r2,-8(r16)
  809950:	28000e26 	beq	r5,zero,80998c <__b2d+0xe8>
  809954:	1949c83a 	sub	r4,r3,r5
  809958:	9164983a 	sll	r18,r18,r5
  80995c:	1106d83a 	srl	r3,r2,r4
  809960:	81bffe04 	addi	r6,r16,-8
  809964:	948ffc34 	orhi	r18,r18,16368
  809968:	90c6b03a 	or	r3,r18,r3
  80996c:	89800e2e 	bgeu	r17,r6,8099a8 <__b2d+0x104>
  809970:	81bffd17 	ldw	r6,-12(r16)
  809974:	1144983a 	sll	r2,r2,r5
  809978:	310ad83a 	srl	r5,r6,r4
  80997c:	2884b03a 	or	r2,r5,r2
  809980:	003fe806 	br	809924 <__alt_mem_onchip_mem+0xff789924>
  809984:	10bffd44 	addi	r2,r2,-11
  809988:	1000041e 	bne	r2,zero,80999c <__b2d+0xf8>
  80998c:	90cffc34 	orhi	r3,r18,16368
  809990:	003fe406 	br	809924 <__alt_mem_onchip_mem+0xff789924>
  809994:	000d883a 	mov	r6,zero
  809998:	003fdf06 	br	809918 <__alt_mem_onchip_mem+0xff789918>
  80999c:	90a4983a 	sll	r18,r18,r2
  8099a0:	0005883a 	mov	r2,zero
  8099a4:	003ff906 	br	80998c <__alt_mem_onchip_mem+0xff78998c>
  8099a8:	1144983a 	sll	r2,r2,r5
  8099ac:	003fdd06 	br	809924 <__alt_mem_onchip_mem+0xff789924>

008099b0 <__d2b>:
  8099b0:	defff804 	addi	sp,sp,-32
  8099b4:	dc000215 	stw	r16,8(sp)
  8099b8:	3021883a 	mov	r16,r6
  8099bc:	dc400315 	stw	r17,12(sp)
  8099c0:	8022907a 	slli	r17,r16,1
  8099c4:	dd000615 	stw	r20,24(sp)
  8099c8:	2829883a 	mov	r20,r5
  8099cc:	01400044 	movi	r5,1
  8099d0:	dcc00515 	stw	r19,20(sp)
  8099d4:	dc800415 	stw	r18,16(sp)
  8099d8:	dfc00715 	stw	ra,28(sp)
  8099dc:	3825883a 	mov	r18,r7
  8099e0:	8822d57a 	srli	r17,r17,21
  8099e4:	0808d1c0 	call	808d1c <_Balloc>
  8099e8:	1027883a 	mov	r19,r2
  8099ec:	00800434 	movhi	r2,16
  8099f0:	10bfffc4 	addi	r2,r2,-1
  8099f4:	808c703a 	and	r6,r16,r2
  8099f8:	88000126 	beq	r17,zero,809a00 <__d2b+0x50>
  8099fc:	31800434 	orhi	r6,r6,16
  809a00:	d9800015 	stw	r6,0(sp)
  809a04:	a0002426 	beq	r20,zero,809a98 <__d2b+0xe8>
  809a08:	d9000104 	addi	r4,sp,4
  809a0c:	dd000115 	stw	r20,4(sp)
  809a10:	08090780 	call	809078 <__lo0bits>
  809a14:	d8c00017 	ldw	r3,0(sp)
  809a18:	10002f1e 	bne	r2,zero,809ad8 <__d2b+0x128>
  809a1c:	d9000117 	ldw	r4,4(sp)
  809a20:	99000515 	stw	r4,20(r19)
  809a24:	1821003a 	cmpeq	r16,r3,zero
  809a28:	01000084 	movi	r4,2
  809a2c:	2421c83a 	sub	r16,r4,r16
  809a30:	98c00615 	stw	r3,24(r19)
  809a34:	9c000415 	stw	r16,16(r19)
  809a38:	88001f1e 	bne	r17,zero,809ab8 <__d2b+0x108>
  809a3c:	10bef384 	addi	r2,r2,-1074
  809a40:	90800015 	stw	r2,0(r18)
  809a44:	00900034 	movhi	r2,16384
  809a48:	10bfffc4 	addi	r2,r2,-1
  809a4c:	8085883a 	add	r2,r16,r2
  809a50:	1085883a 	add	r2,r2,r2
  809a54:	1085883a 	add	r2,r2,r2
  809a58:	9885883a 	add	r2,r19,r2
  809a5c:	11000517 	ldw	r4,20(r2)
  809a60:	8020917a 	slli	r16,r16,5
  809a64:	08090100 	call	809010 <__hi0bits>
  809a68:	d8c00817 	ldw	r3,32(sp)
  809a6c:	8085c83a 	sub	r2,r16,r2
  809a70:	18800015 	stw	r2,0(r3)
  809a74:	9805883a 	mov	r2,r19
  809a78:	dfc00717 	ldw	ra,28(sp)
  809a7c:	dd000617 	ldw	r20,24(sp)
  809a80:	dcc00517 	ldw	r19,20(sp)
  809a84:	dc800417 	ldw	r18,16(sp)
  809a88:	dc400317 	ldw	r17,12(sp)
  809a8c:	dc000217 	ldw	r16,8(sp)
  809a90:	dec00804 	addi	sp,sp,32
  809a94:	f800283a 	ret
  809a98:	d809883a 	mov	r4,sp
  809a9c:	08090780 	call	809078 <__lo0bits>
  809aa0:	d8c00017 	ldw	r3,0(sp)
  809aa4:	04000044 	movi	r16,1
  809aa8:	9c000415 	stw	r16,16(r19)
  809aac:	98c00515 	stw	r3,20(r19)
  809ab0:	10800804 	addi	r2,r2,32
  809ab4:	883fe126 	beq	r17,zero,809a3c <__alt_mem_onchip_mem+0xff789a3c>
  809ab8:	00c00d44 	movi	r3,53
  809abc:	8c7ef344 	addi	r17,r17,-1075
  809ac0:	88a3883a 	add	r17,r17,r2
  809ac4:	1885c83a 	sub	r2,r3,r2
  809ac8:	d8c00817 	ldw	r3,32(sp)
  809acc:	94400015 	stw	r17,0(r18)
  809ad0:	18800015 	stw	r2,0(r3)
  809ad4:	003fe706 	br	809a74 <__alt_mem_onchip_mem+0xff789a74>
  809ad8:	01000804 	movi	r4,32
  809adc:	2089c83a 	sub	r4,r4,r2
  809ae0:	1908983a 	sll	r4,r3,r4
  809ae4:	d9400117 	ldw	r5,4(sp)
  809ae8:	1886d83a 	srl	r3,r3,r2
  809aec:	2148b03a 	or	r4,r4,r5
  809af0:	99000515 	stw	r4,20(r19)
  809af4:	d8c00015 	stw	r3,0(sp)
  809af8:	003fca06 	br	809a24 <__alt_mem_onchip_mem+0xff789a24>

00809afc <__ratio>:
  809afc:	defff904 	addi	sp,sp,-28
  809b00:	dc400315 	stw	r17,12(sp)
  809b04:	2823883a 	mov	r17,r5
  809b08:	d9400104 	addi	r5,sp,4
  809b0c:	dfc00615 	stw	ra,24(sp)
  809b10:	dcc00515 	stw	r19,20(sp)
  809b14:	dc800415 	stw	r18,16(sp)
  809b18:	2027883a 	mov	r19,r4
  809b1c:	dc000215 	stw	r16,8(sp)
  809b20:	08098a40 	call	8098a4 <__b2d>
  809b24:	d80b883a 	mov	r5,sp
  809b28:	8809883a 	mov	r4,r17
  809b2c:	1025883a 	mov	r18,r2
  809b30:	1821883a 	mov	r16,r3
  809b34:	08098a40 	call	8098a4 <__b2d>
  809b38:	8a000417 	ldw	r8,16(r17)
  809b3c:	99000417 	ldw	r4,16(r19)
  809b40:	d9400117 	ldw	r5,4(sp)
  809b44:	2209c83a 	sub	r4,r4,r8
  809b48:	2010917a 	slli	r8,r4,5
  809b4c:	d9000017 	ldw	r4,0(sp)
  809b50:	2909c83a 	sub	r4,r5,r4
  809b54:	4109883a 	add	r4,r8,r4
  809b58:	01000e0e 	bge	zero,r4,809b94 <__ratio+0x98>
  809b5c:	2008953a 	slli	r4,r4,20
  809b60:	2421883a 	add	r16,r4,r16
  809b64:	100d883a 	mov	r6,r2
  809b68:	180f883a 	mov	r7,r3
  809b6c:	9009883a 	mov	r4,r18
  809b70:	800b883a 	mov	r5,r16
  809b74:	08011500 	call	801150 <__divdf3>
  809b78:	dfc00617 	ldw	ra,24(sp)
  809b7c:	dcc00517 	ldw	r19,20(sp)
  809b80:	dc800417 	ldw	r18,16(sp)
  809b84:	dc400317 	ldw	r17,12(sp)
  809b88:	dc000217 	ldw	r16,8(sp)
  809b8c:	dec00704 	addi	sp,sp,28
  809b90:	f800283a 	ret
  809b94:	2008953a 	slli	r4,r4,20
  809b98:	1907c83a 	sub	r3,r3,r4
  809b9c:	003ff106 	br	809b64 <__alt_mem_onchip_mem+0xff789b64>

00809ba0 <_mprec_log10>:
  809ba0:	defffe04 	addi	sp,sp,-8
  809ba4:	dc000015 	stw	r16,0(sp)
  809ba8:	dfc00115 	stw	ra,4(sp)
  809bac:	008005c4 	movi	r2,23
  809bb0:	2021883a 	mov	r16,r4
  809bb4:	11000d0e 	bge	r2,r4,809bec <_mprec_log10+0x4c>
  809bb8:	0005883a 	mov	r2,zero
  809bbc:	00cffc34 	movhi	r3,16368
  809bc0:	843fffc4 	addi	r16,r16,-1
  809bc4:	000d883a 	mov	r6,zero
  809bc8:	01d00934 	movhi	r7,16420
  809bcc:	1009883a 	mov	r4,r2
  809bd0:	180b883a 	mov	r5,r3
  809bd4:	080d4dc0 	call	80d4dc <__muldf3>
  809bd8:	803ff91e 	bne	r16,zero,809bc0 <__alt_mem_onchip_mem+0xff789bc0>
  809bdc:	dfc00117 	ldw	ra,4(sp)
  809be0:	dc000017 	ldw	r16,0(sp)
  809be4:	dec00204 	addi	sp,sp,8
  809be8:	f800283a 	ret
  809bec:	202090fa 	slli	r16,r4,3
  809bf0:	00802074 	movhi	r2,129
  809bf4:	108b1f04 	addi	r2,r2,11388
  809bf8:	1421883a 	add	r16,r2,r16
  809bfc:	80800017 	ldw	r2,0(r16)
  809c00:	80c00117 	ldw	r3,4(r16)
  809c04:	dfc00117 	ldw	ra,4(sp)
  809c08:	dc000017 	ldw	r16,0(sp)
  809c0c:	dec00204 	addi	sp,sp,8
  809c10:	f800283a 	ret

00809c14 <__copybits>:
  809c14:	297fffc4 	addi	r5,r5,-1
  809c18:	280fd17a 	srai	r7,r5,5
  809c1c:	30c00417 	ldw	r3,16(r6)
  809c20:	30800504 	addi	r2,r6,20
  809c24:	39c00044 	addi	r7,r7,1
  809c28:	18c7883a 	add	r3,r3,r3
  809c2c:	39cf883a 	add	r7,r7,r7
  809c30:	18c7883a 	add	r3,r3,r3
  809c34:	39cf883a 	add	r7,r7,r7
  809c38:	10c7883a 	add	r3,r2,r3
  809c3c:	21cf883a 	add	r7,r4,r7
  809c40:	10c00d2e 	bgeu	r2,r3,809c78 <__copybits+0x64>
  809c44:	200b883a 	mov	r5,r4
  809c48:	12000017 	ldw	r8,0(r2)
  809c4c:	29400104 	addi	r5,r5,4
  809c50:	10800104 	addi	r2,r2,4
  809c54:	2a3fff15 	stw	r8,-4(r5)
  809c58:	10fffb36 	bltu	r2,r3,809c48 <__alt_mem_onchip_mem+0xff789c48>
  809c5c:	1985c83a 	sub	r2,r3,r6
  809c60:	10bffac4 	addi	r2,r2,-21
  809c64:	1004d0ba 	srli	r2,r2,2
  809c68:	10800044 	addi	r2,r2,1
  809c6c:	1085883a 	add	r2,r2,r2
  809c70:	1085883a 	add	r2,r2,r2
  809c74:	2089883a 	add	r4,r4,r2
  809c78:	21c0032e 	bgeu	r4,r7,809c88 <__copybits+0x74>
  809c7c:	20000015 	stw	zero,0(r4)
  809c80:	21000104 	addi	r4,r4,4
  809c84:	21fffd36 	bltu	r4,r7,809c7c <__alt_mem_onchip_mem+0xff789c7c>
  809c88:	f800283a 	ret

00809c8c <__any_on>:
  809c8c:	20c00417 	ldw	r3,16(r4)
  809c90:	2805d17a 	srai	r2,r5,5
  809c94:	21000504 	addi	r4,r4,20
  809c98:	18800d0e 	bge	r3,r2,809cd0 <__any_on+0x44>
  809c9c:	18c7883a 	add	r3,r3,r3
  809ca0:	18c7883a 	add	r3,r3,r3
  809ca4:	20c7883a 	add	r3,r4,r3
  809ca8:	20c0192e 	bgeu	r4,r3,809d10 <__any_on+0x84>
  809cac:	18bfff17 	ldw	r2,-4(r3)
  809cb0:	18ffff04 	addi	r3,r3,-4
  809cb4:	1000041e 	bne	r2,zero,809cc8 <__any_on+0x3c>
  809cb8:	20c0142e 	bgeu	r4,r3,809d0c <__any_on+0x80>
  809cbc:	18ffff04 	addi	r3,r3,-4
  809cc0:	19400017 	ldw	r5,0(r3)
  809cc4:	283ffc26 	beq	r5,zero,809cb8 <__alt_mem_onchip_mem+0xff789cb8>
  809cc8:	00800044 	movi	r2,1
  809ccc:	f800283a 	ret
  809cd0:	10c00a0e 	bge	r2,r3,809cfc <__any_on+0x70>
  809cd4:	1085883a 	add	r2,r2,r2
  809cd8:	1085883a 	add	r2,r2,r2
  809cdc:	294007cc 	andi	r5,r5,31
  809ce0:	2087883a 	add	r3,r4,r2
  809ce4:	283ff026 	beq	r5,zero,809ca8 <__alt_mem_onchip_mem+0xff789ca8>
  809ce8:	19800017 	ldw	r6,0(r3)
  809cec:	3144d83a 	srl	r2,r6,r5
  809cf0:	114a983a 	sll	r5,r2,r5
  809cf4:	317ff41e 	bne	r6,r5,809cc8 <__alt_mem_onchip_mem+0xff789cc8>
  809cf8:	003feb06 	br	809ca8 <__alt_mem_onchip_mem+0xff789ca8>
  809cfc:	1085883a 	add	r2,r2,r2
  809d00:	1085883a 	add	r2,r2,r2
  809d04:	2087883a 	add	r3,r4,r2
  809d08:	003fe706 	br	809ca8 <__alt_mem_onchip_mem+0xff789ca8>
  809d0c:	f800283a 	ret
  809d10:	0005883a 	mov	r2,zero
  809d14:	f800283a 	ret

00809d18 <_read_r>:
  809d18:	defffd04 	addi	sp,sp,-12
  809d1c:	2805883a 	mov	r2,r5
  809d20:	dc000015 	stw	r16,0(sp)
  809d24:	04002074 	movhi	r16,129
  809d28:	dc400115 	stw	r17,4(sp)
  809d2c:	300b883a 	mov	r5,r6
  809d30:	841aa004 	addi	r16,r16,27264
  809d34:	2023883a 	mov	r17,r4
  809d38:	380d883a 	mov	r6,r7
  809d3c:	1009883a 	mov	r4,r2
  809d40:	dfc00215 	stw	ra,8(sp)
  809d44:	80000015 	stw	zero,0(r16)
  809d48:	080f1180 	call	80f118 <read>
  809d4c:	00ffffc4 	movi	r3,-1
  809d50:	10c00526 	beq	r2,r3,809d68 <_read_r+0x50>
  809d54:	dfc00217 	ldw	ra,8(sp)
  809d58:	dc400117 	ldw	r17,4(sp)
  809d5c:	dc000017 	ldw	r16,0(sp)
  809d60:	dec00304 	addi	sp,sp,12
  809d64:	f800283a 	ret
  809d68:	80c00017 	ldw	r3,0(r16)
  809d6c:	183ff926 	beq	r3,zero,809d54 <__alt_mem_onchip_mem+0xff789d54>
  809d70:	88c00015 	stw	r3,0(r17)
  809d74:	003ff706 	br	809d54 <__alt_mem_onchip_mem+0xff789d54>

00809d78 <_realloc_r>:
  809d78:	defff604 	addi	sp,sp,-40
  809d7c:	dc800215 	stw	r18,8(sp)
  809d80:	dfc00915 	stw	ra,36(sp)
  809d84:	df000815 	stw	fp,32(sp)
  809d88:	ddc00715 	stw	r23,28(sp)
  809d8c:	dd800615 	stw	r22,24(sp)
  809d90:	dd400515 	stw	r21,20(sp)
  809d94:	dd000415 	stw	r20,16(sp)
  809d98:	dcc00315 	stw	r19,12(sp)
  809d9c:	dc400115 	stw	r17,4(sp)
  809da0:	dc000015 	stw	r16,0(sp)
  809da4:	3025883a 	mov	r18,r6
  809da8:	2800b726 	beq	r5,zero,80a088 <_realloc_r+0x310>
  809dac:	282b883a 	mov	r21,r5
  809db0:	2029883a 	mov	r20,r4
  809db4:	080ee400 	call	80ee40 <__malloc_lock>
  809db8:	a8bfff17 	ldw	r2,-4(r21)
  809dbc:	043fff04 	movi	r16,-4
  809dc0:	90c002c4 	addi	r3,r18,11
  809dc4:	01000584 	movi	r4,22
  809dc8:	acfffe04 	addi	r19,r21,-8
  809dcc:	1420703a 	and	r16,r2,r16
  809dd0:	20c0332e 	bgeu	r4,r3,809ea0 <_realloc_r+0x128>
  809dd4:	047ffe04 	movi	r17,-8
  809dd8:	1c62703a 	and	r17,r3,r17
  809ddc:	8807883a 	mov	r3,r17
  809de0:	88005816 	blt	r17,zero,809f44 <_realloc_r+0x1cc>
  809de4:	8c805736 	bltu	r17,r18,809f44 <_realloc_r+0x1cc>
  809de8:	80c0300e 	bge	r16,r3,809eac <_realloc_r+0x134>
  809dec:	07002074 	movhi	fp,129
  809df0:	e70d2004 	addi	fp,fp,13440
  809df4:	e1c00217 	ldw	r7,8(fp)
  809df8:	9c09883a 	add	r4,r19,r16
  809dfc:	22000117 	ldw	r8,4(r4)
  809e00:	21c06326 	beq	r4,r7,809f90 <_realloc_r+0x218>
  809e04:	017fff84 	movi	r5,-2
  809e08:	414a703a 	and	r5,r8,r5
  809e0c:	214b883a 	add	r5,r4,r5
  809e10:	29800117 	ldw	r6,4(r5)
  809e14:	3180004c 	andi	r6,r6,1
  809e18:	30003f26 	beq	r6,zero,809f18 <_realloc_r+0x1a0>
  809e1c:	1080004c 	andi	r2,r2,1
  809e20:	10008326 	beq	r2,zero,80a030 <_realloc_r+0x2b8>
  809e24:	900b883a 	mov	r5,r18
  809e28:	a009883a 	mov	r4,r20
  809e2c:	0802b280 	call	802b28 <_malloc_r>
  809e30:	1025883a 	mov	r18,r2
  809e34:	10011e26 	beq	r2,zero,80a2b0 <_realloc_r+0x538>
  809e38:	a93fff17 	ldw	r4,-4(r21)
  809e3c:	10fffe04 	addi	r3,r2,-8
  809e40:	00bfff84 	movi	r2,-2
  809e44:	2084703a 	and	r2,r4,r2
  809e48:	9885883a 	add	r2,r19,r2
  809e4c:	1880ee26 	beq	r3,r2,80a208 <_realloc_r+0x490>
  809e50:	81bfff04 	addi	r6,r16,-4
  809e54:	00800904 	movi	r2,36
  809e58:	1180b836 	bltu	r2,r6,80a13c <_realloc_r+0x3c4>
  809e5c:	00c004c4 	movi	r3,19
  809e60:	19809636 	bltu	r3,r6,80a0bc <_realloc_r+0x344>
  809e64:	9005883a 	mov	r2,r18
  809e68:	a807883a 	mov	r3,r21
  809e6c:	19000017 	ldw	r4,0(r3)
  809e70:	11000015 	stw	r4,0(r2)
  809e74:	19000117 	ldw	r4,4(r3)
  809e78:	11000115 	stw	r4,4(r2)
  809e7c:	18c00217 	ldw	r3,8(r3)
  809e80:	10c00215 	stw	r3,8(r2)
  809e84:	a80b883a 	mov	r5,r21
  809e88:	a009883a 	mov	r4,r20
  809e8c:	08080380 	call	808038 <_free_r>
  809e90:	a009883a 	mov	r4,r20
  809e94:	080ee640 	call	80ee64 <__malloc_unlock>
  809e98:	9005883a 	mov	r2,r18
  809e9c:	00001206 	br	809ee8 <_realloc_r+0x170>
  809ea0:	00c00404 	movi	r3,16
  809ea4:	1823883a 	mov	r17,r3
  809ea8:	003fce06 	br	809de4 <__alt_mem_onchip_mem+0xff789de4>
  809eac:	a825883a 	mov	r18,r21
  809eb0:	8445c83a 	sub	r2,r16,r17
  809eb4:	00c003c4 	movi	r3,15
  809eb8:	18802636 	bltu	r3,r2,809f54 <_realloc_r+0x1dc>
  809ebc:	99800117 	ldw	r6,4(r19)
  809ec0:	9c07883a 	add	r3,r19,r16
  809ec4:	3180004c 	andi	r6,r6,1
  809ec8:	3420b03a 	or	r16,r6,r16
  809ecc:	9c000115 	stw	r16,4(r19)
  809ed0:	18800117 	ldw	r2,4(r3)
  809ed4:	10800054 	ori	r2,r2,1
  809ed8:	18800115 	stw	r2,4(r3)
  809edc:	a009883a 	mov	r4,r20
  809ee0:	080ee640 	call	80ee64 <__malloc_unlock>
  809ee4:	9005883a 	mov	r2,r18
  809ee8:	dfc00917 	ldw	ra,36(sp)
  809eec:	df000817 	ldw	fp,32(sp)
  809ef0:	ddc00717 	ldw	r23,28(sp)
  809ef4:	dd800617 	ldw	r22,24(sp)
  809ef8:	dd400517 	ldw	r21,20(sp)
  809efc:	dd000417 	ldw	r20,16(sp)
  809f00:	dcc00317 	ldw	r19,12(sp)
  809f04:	dc800217 	ldw	r18,8(sp)
  809f08:	dc400117 	ldw	r17,4(sp)
  809f0c:	dc000017 	ldw	r16,0(sp)
  809f10:	dec00a04 	addi	sp,sp,40
  809f14:	f800283a 	ret
  809f18:	017fff04 	movi	r5,-4
  809f1c:	414a703a 	and	r5,r8,r5
  809f20:	814d883a 	add	r6,r16,r5
  809f24:	30c01f16 	blt	r6,r3,809fa4 <_realloc_r+0x22c>
  809f28:	20800317 	ldw	r2,12(r4)
  809f2c:	20c00217 	ldw	r3,8(r4)
  809f30:	a825883a 	mov	r18,r21
  809f34:	3021883a 	mov	r16,r6
  809f38:	18800315 	stw	r2,12(r3)
  809f3c:	10c00215 	stw	r3,8(r2)
  809f40:	003fdb06 	br	809eb0 <__alt_mem_onchip_mem+0xff789eb0>
  809f44:	00800304 	movi	r2,12
  809f48:	a0800015 	stw	r2,0(r20)
  809f4c:	0005883a 	mov	r2,zero
  809f50:	003fe506 	br	809ee8 <__alt_mem_onchip_mem+0xff789ee8>
  809f54:	98c00117 	ldw	r3,4(r19)
  809f58:	9c4b883a 	add	r5,r19,r17
  809f5c:	11000054 	ori	r4,r2,1
  809f60:	18c0004c 	andi	r3,r3,1
  809f64:	1c62b03a 	or	r17,r3,r17
  809f68:	9c400115 	stw	r17,4(r19)
  809f6c:	29000115 	stw	r4,4(r5)
  809f70:	2885883a 	add	r2,r5,r2
  809f74:	10c00117 	ldw	r3,4(r2)
  809f78:	29400204 	addi	r5,r5,8
  809f7c:	a009883a 	mov	r4,r20
  809f80:	18c00054 	ori	r3,r3,1
  809f84:	10c00115 	stw	r3,4(r2)
  809f88:	08080380 	call	808038 <_free_r>
  809f8c:	003fd306 	br	809edc <__alt_mem_onchip_mem+0xff789edc>
  809f90:	017fff04 	movi	r5,-4
  809f94:	414a703a 	and	r5,r8,r5
  809f98:	89800404 	addi	r6,r17,16
  809f9c:	8151883a 	add	r8,r16,r5
  809fa0:	4180590e 	bge	r8,r6,80a108 <_realloc_r+0x390>
  809fa4:	1080004c 	andi	r2,r2,1
  809fa8:	103f9e1e 	bne	r2,zero,809e24 <__alt_mem_onchip_mem+0xff789e24>
  809fac:	adbffe17 	ldw	r22,-8(r21)
  809fb0:	00bfff04 	movi	r2,-4
  809fb4:	9dadc83a 	sub	r22,r19,r22
  809fb8:	b1800117 	ldw	r6,4(r22)
  809fbc:	3084703a 	and	r2,r6,r2
  809fc0:	20002026 	beq	r4,zero,80a044 <_realloc_r+0x2cc>
  809fc4:	80af883a 	add	r23,r16,r2
  809fc8:	b96f883a 	add	r23,r23,r5
  809fcc:	21c05f26 	beq	r4,r7,80a14c <_realloc_r+0x3d4>
  809fd0:	b8c01c16 	blt	r23,r3,80a044 <_realloc_r+0x2cc>
  809fd4:	20800317 	ldw	r2,12(r4)
  809fd8:	20c00217 	ldw	r3,8(r4)
  809fdc:	81bfff04 	addi	r6,r16,-4
  809fe0:	01000904 	movi	r4,36
  809fe4:	18800315 	stw	r2,12(r3)
  809fe8:	10c00215 	stw	r3,8(r2)
  809fec:	b0c00217 	ldw	r3,8(r22)
  809ff0:	b0800317 	ldw	r2,12(r22)
  809ff4:	b4800204 	addi	r18,r22,8
  809ff8:	18800315 	stw	r2,12(r3)
  809ffc:	10c00215 	stw	r3,8(r2)
  80a000:	21801b36 	bltu	r4,r6,80a070 <_realloc_r+0x2f8>
  80a004:	008004c4 	movi	r2,19
  80a008:	1180352e 	bgeu	r2,r6,80a0e0 <_realloc_r+0x368>
  80a00c:	a8800017 	ldw	r2,0(r21)
  80a010:	b0800215 	stw	r2,8(r22)
  80a014:	a8800117 	ldw	r2,4(r21)
  80a018:	b0800315 	stw	r2,12(r22)
  80a01c:	008006c4 	movi	r2,27
  80a020:	11807f36 	bltu	r2,r6,80a220 <_realloc_r+0x4a8>
  80a024:	b0800404 	addi	r2,r22,16
  80a028:	ad400204 	addi	r21,r21,8
  80a02c:	00002d06 	br	80a0e4 <_realloc_r+0x36c>
  80a030:	adbffe17 	ldw	r22,-8(r21)
  80a034:	00bfff04 	movi	r2,-4
  80a038:	9dadc83a 	sub	r22,r19,r22
  80a03c:	b1000117 	ldw	r4,4(r22)
  80a040:	2084703a 	and	r2,r4,r2
  80a044:	b03f7726 	beq	r22,zero,809e24 <__alt_mem_onchip_mem+0xff789e24>
  80a048:	80af883a 	add	r23,r16,r2
  80a04c:	b8ff7516 	blt	r23,r3,809e24 <__alt_mem_onchip_mem+0xff789e24>
  80a050:	b0800317 	ldw	r2,12(r22)
  80a054:	b0c00217 	ldw	r3,8(r22)
  80a058:	81bfff04 	addi	r6,r16,-4
  80a05c:	01000904 	movi	r4,36
  80a060:	18800315 	stw	r2,12(r3)
  80a064:	10c00215 	stw	r3,8(r2)
  80a068:	b4800204 	addi	r18,r22,8
  80a06c:	21bfe52e 	bgeu	r4,r6,80a004 <__alt_mem_onchip_mem+0xff78a004>
  80a070:	a80b883a 	mov	r5,r21
  80a074:	9009883a 	mov	r4,r18
  80a078:	0808bc00 	call	808bc0 <memmove>
  80a07c:	b821883a 	mov	r16,r23
  80a080:	b027883a 	mov	r19,r22
  80a084:	003f8a06 	br	809eb0 <__alt_mem_onchip_mem+0xff789eb0>
  80a088:	300b883a 	mov	r5,r6
  80a08c:	dfc00917 	ldw	ra,36(sp)
  80a090:	df000817 	ldw	fp,32(sp)
  80a094:	ddc00717 	ldw	r23,28(sp)
  80a098:	dd800617 	ldw	r22,24(sp)
  80a09c:	dd400517 	ldw	r21,20(sp)
  80a0a0:	dd000417 	ldw	r20,16(sp)
  80a0a4:	dcc00317 	ldw	r19,12(sp)
  80a0a8:	dc800217 	ldw	r18,8(sp)
  80a0ac:	dc400117 	ldw	r17,4(sp)
  80a0b0:	dc000017 	ldw	r16,0(sp)
  80a0b4:	dec00a04 	addi	sp,sp,40
  80a0b8:	0802b281 	jmpi	802b28 <_malloc_r>
  80a0bc:	a8c00017 	ldw	r3,0(r21)
  80a0c0:	90c00015 	stw	r3,0(r18)
  80a0c4:	a8c00117 	ldw	r3,4(r21)
  80a0c8:	90c00115 	stw	r3,4(r18)
  80a0cc:	00c006c4 	movi	r3,27
  80a0d0:	19804536 	bltu	r3,r6,80a1e8 <_realloc_r+0x470>
  80a0d4:	90800204 	addi	r2,r18,8
  80a0d8:	a8c00204 	addi	r3,r21,8
  80a0dc:	003f6306 	br	809e6c <__alt_mem_onchip_mem+0xff789e6c>
  80a0e0:	9005883a 	mov	r2,r18
  80a0e4:	a8c00017 	ldw	r3,0(r21)
  80a0e8:	b821883a 	mov	r16,r23
  80a0ec:	b027883a 	mov	r19,r22
  80a0f0:	10c00015 	stw	r3,0(r2)
  80a0f4:	a8c00117 	ldw	r3,4(r21)
  80a0f8:	10c00115 	stw	r3,4(r2)
  80a0fc:	a8c00217 	ldw	r3,8(r21)
  80a100:	10c00215 	stw	r3,8(r2)
  80a104:	003f6a06 	br	809eb0 <__alt_mem_onchip_mem+0xff789eb0>
  80a108:	9c67883a 	add	r19,r19,r17
  80a10c:	4445c83a 	sub	r2,r8,r17
  80a110:	e4c00215 	stw	r19,8(fp)
  80a114:	10800054 	ori	r2,r2,1
  80a118:	98800115 	stw	r2,4(r19)
  80a11c:	a8bfff17 	ldw	r2,-4(r21)
  80a120:	a009883a 	mov	r4,r20
  80a124:	1080004c 	andi	r2,r2,1
  80a128:	1462b03a 	or	r17,r2,r17
  80a12c:	ac7fff15 	stw	r17,-4(r21)
  80a130:	080ee640 	call	80ee64 <__malloc_unlock>
  80a134:	a805883a 	mov	r2,r21
  80a138:	003f6b06 	br	809ee8 <__alt_mem_onchip_mem+0xff789ee8>
  80a13c:	a80b883a 	mov	r5,r21
  80a140:	9009883a 	mov	r4,r18
  80a144:	0808bc00 	call	808bc0 <memmove>
  80a148:	003f4e06 	br	809e84 <__alt_mem_onchip_mem+0xff789e84>
  80a14c:	89000404 	addi	r4,r17,16
  80a150:	b93fbc16 	blt	r23,r4,80a044 <__alt_mem_onchip_mem+0xff78a044>
  80a154:	b0800317 	ldw	r2,12(r22)
  80a158:	b0c00217 	ldw	r3,8(r22)
  80a15c:	81bfff04 	addi	r6,r16,-4
  80a160:	01000904 	movi	r4,36
  80a164:	18800315 	stw	r2,12(r3)
  80a168:	10c00215 	stw	r3,8(r2)
  80a16c:	b4800204 	addi	r18,r22,8
  80a170:	21804336 	bltu	r4,r6,80a280 <_realloc_r+0x508>
  80a174:	008004c4 	movi	r2,19
  80a178:	11803f2e 	bgeu	r2,r6,80a278 <_realloc_r+0x500>
  80a17c:	a8800017 	ldw	r2,0(r21)
  80a180:	b0800215 	stw	r2,8(r22)
  80a184:	a8800117 	ldw	r2,4(r21)
  80a188:	b0800315 	stw	r2,12(r22)
  80a18c:	008006c4 	movi	r2,27
  80a190:	11803f36 	bltu	r2,r6,80a290 <_realloc_r+0x518>
  80a194:	b0800404 	addi	r2,r22,16
  80a198:	ad400204 	addi	r21,r21,8
  80a19c:	a8c00017 	ldw	r3,0(r21)
  80a1a0:	10c00015 	stw	r3,0(r2)
  80a1a4:	a8c00117 	ldw	r3,4(r21)
  80a1a8:	10c00115 	stw	r3,4(r2)
  80a1ac:	a8c00217 	ldw	r3,8(r21)
  80a1b0:	10c00215 	stw	r3,8(r2)
  80a1b4:	b447883a 	add	r3,r22,r17
  80a1b8:	bc45c83a 	sub	r2,r23,r17
  80a1bc:	e0c00215 	stw	r3,8(fp)
  80a1c0:	10800054 	ori	r2,r2,1
  80a1c4:	18800115 	stw	r2,4(r3)
  80a1c8:	b0800117 	ldw	r2,4(r22)
  80a1cc:	a009883a 	mov	r4,r20
  80a1d0:	1080004c 	andi	r2,r2,1
  80a1d4:	1462b03a 	or	r17,r2,r17
  80a1d8:	b4400115 	stw	r17,4(r22)
  80a1dc:	080ee640 	call	80ee64 <__malloc_unlock>
  80a1e0:	9005883a 	mov	r2,r18
  80a1e4:	003f4006 	br	809ee8 <__alt_mem_onchip_mem+0xff789ee8>
  80a1e8:	a8c00217 	ldw	r3,8(r21)
  80a1ec:	90c00215 	stw	r3,8(r18)
  80a1f0:	a8c00317 	ldw	r3,12(r21)
  80a1f4:	90c00315 	stw	r3,12(r18)
  80a1f8:	30801126 	beq	r6,r2,80a240 <_realloc_r+0x4c8>
  80a1fc:	90800404 	addi	r2,r18,16
  80a200:	a8c00404 	addi	r3,r21,16
  80a204:	003f1906 	br	809e6c <__alt_mem_onchip_mem+0xff789e6c>
  80a208:	90ffff17 	ldw	r3,-4(r18)
  80a20c:	00bfff04 	movi	r2,-4
  80a210:	a825883a 	mov	r18,r21
  80a214:	1884703a 	and	r2,r3,r2
  80a218:	80a1883a 	add	r16,r16,r2
  80a21c:	003f2406 	br	809eb0 <__alt_mem_onchip_mem+0xff789eb0>
  80a220:	a8800217 	ldw	r2,8(r21)
  80a224:	b0800415 	stw	r2,16(r22)
  80a228:	a8800317 	ldw	r2,12(r21)
  80a22c:	b0800515 	stw	r2,20(r22)
  80a230:	31000a26 	beq	r6,r4,80a25c <_realloc_r+0x4e4>
  80a234:	b0800604 	addi	r2,r22,24
  80a238:	ad400404 	addi	r21,r21,16
  80a23c:	003fa906 	br	80a0e4 <__alt_mem_onchip_mem+0xff78a0e4>
  80a240:	a9000417 	ldw	r4,16(r21)
  80a244:	90800604 	addi	r2,r18,24
  80a248:	a8c00604 	addi	r3,r21,24
  80a24c:	91000415 	stw	r4,16(r18)
  80a250:	a9000517 	ldw	r4,20(r21)
  80a254:	91000515 	stw	r4,20(r18)
  80a258:	003f0406 	br	809e6c <__alt_mem_onchip_mem+0xff789e6c>
  80a25c:	a8c00417 	ldw	r3,16(r21)
  80a260:	ad400604 	addi	r21,r21,24
  80a264:	b0800804 	addi	r2,r22,32
  80a268:	b0c00615 	stw	r3,24(r22)
  80a26c:	a8ffff17 	ldw	r3,-4(r21)
  80a270:	b0c00715 	stw	r3,28(r22)
  80a274:	003f9b06 	br	80a0e4 <__alt_mem_onchip_mem+0xff78a0e4>
  80a278:	9005883a 	mov	r2,r18
  80a27c:	003fc706 	br	80a19c <__alt_mem_onchip_mem+0xff78a19c>
  80a280:	a80b883a 	mov	r5,r21
  80a284:	9009883a 	mov	r4,r18
  80a288:	0808bc00 	call	808bc0 <memmove>
  80a28c:	003fc906 	br	80a1b4 <__alt_mem_onchip_mem+0xff78a1b4>
  80a290:	a8800217 	ldw	r2,8(r21)
  80a294:	b0800415 	stw	r2,16(r22)
  80a298:	a8800317 	ldw	r2,12(r21)
  80a29c:	b0800515 	stw	r2,20(r22)
  80a2a0:	31000726 	beq	r6,r4,80a2c0 <_realloc_r+0x548>
  80a2a4:	b0800604 	addi	r2,r22,24
  80a2a8:	ad400404 	addi	r21,r21,16
  80a2ac:	003fbb06 	br	80a19c <__alt_mem_onchip_mem+0xff78a19c>
  80a2b0:	a009883a 	mov	r4,r20
  80a2b4:	080ee640 	call	80ee64 <__malloc_unlock>
  80a2b8:	0005883a 	mov	r2,zero
  80a2bc:	003f0a06 	br	809ee8 <__alt_mem_onchip_mem+0xff789ee8>
  80a2c0:	a8c00417 	ldw	r3,16(r21)
  80a2c4:	ad400604 	addi	r21,r21,24
  80a2c8:	b0800804 	addi	r2,r22,32
  80a2cc:	b0c00615 	stw	r3,24(r22)
  80a2d0:	a8ffff17 	ldw	r3,-4(r21)
  80a2d4:	b0c00715 	stw	r3,28(r22)
  80a2d8:	003fb006 	br	80a19c <__alt_mem_onchip_mem+0xff78a19c>

0080a2dc <__fpclassifyd>:
  80a2dc:	00a00034 	movhi	r2,32768
  80a2e0:	10bfffc4 	addi	r2,r2,-1
  80a2e4:	2884703a 	and	r2,r5,r2
  80a2e8:	10000726 	beq	r2,zero,80a308 <__fpclassifyd+0x2c>
  80a2ec:	00fffc34 	movhi	r3,65520
  80a2f0:	019ff834 	movhi	r6,32736
  80a2f4:	28c7883a 	add	r3,r5,r3
  80a2f8:	31bfffc4 	addi	r6,r6,-1
  80a2fc:	30c00536 	bltu	r6,r3,80a314 <__fpclassifyd+0x38>
  80a300:	00800104 	movi	r2,4
  80a304:	f800283a 	ret
  80a308:	2000021e 	bne	r4,zero,80a314 <__fpclassifyd+0x38>
  80a30c:	00800084 	movi	r2,2
  80a310:	f800283a 	ret
  80a314:	00dffc34 	movhi	r3,32752
  80a318:	019ff834 	movhi	r6,32736
  80a31c:	28cb883a 	add	r5,r5,r3
  80a320:	31bfffc4 	addi	r6,r6,-1
  80a324:	317ff62e 	bgeu	r6,r5,80a300 <__alt_mem_onchip_mem+0xff78a300>
  80a328:	01400434 	movhi	r5,16
  80a32c:	297fffc4 	addi	r5,r5,-1
  80a330:	28800236 	bltu	r5,r2,80a33c <__fpclassifyd+0x60>
  80a334:	008000c4 	movi	r2,3
  80a338:	f800283a 	ret
  80a33c:	10c00226 	beq	r2,r3,80a348 <__fpclassifyd+0x6c>
  80a340:	0005883a 	mov	r2,zero
  80a344:	f800283a 	ret
  80a348:	2005003a 	cmpeq	r2,r4,zero
  80a34c:	f800283a 	ret

0080a350 <strcmp>:
  80a350:	2144b03a 	or	r2,r4,r5
  80a354:	108000cc 	andi	r2,r2,3
  80a358:	1000171e 	bne	r2,zero,80a3b8 <strcmp+0x68>
  80a35c:	20800017 	ldw	r2,0(r4)
  80a360:	28c00017 	ldw	r3,0(r5)
  80a364:	10c0141e 	bne	r2,r3,80a3b8 <strcmp+0x68>
  80a368:	027fbff4 	movhi	r9,65279
  80a36c:	4a7fbfc4 	addi	r9,r9,-257
  80a370:	0086303a 	nor	r3,zero,r2
  80a374:	02202074 	movhi	r8,32897
  80a378:	1245883a 	add	r2,r2,r9
  80a37c:	42202004 	addi	r8,r8,-32640
  80a380:	10c4703a 	and	r2,r2,r3
  80a384:	1204703a 	and	r2,r2,r8
  80a388:	10000226 	beq	r2,zero,80a394 <strcmp+0x44>
  80a38c:	00002306 	br	80a41c <strcmp+0xcc>
  80a390:	1000221e 	bne	r2,zero,80a41c <strcmp+0xcc>
  80a394:	21000104 	addi	r4,r4,4
  80a398:	20c00017 	ldw	r3,0(r4)
  80a39c:	29400104 	addi	r5,r5,4
  80a3a0:	29800017 	ldw	r6,0(r5)
  80a3a4:	1a4f883a 	add	r7,r3,r9
  80a3a8:	00c4303a 	nor	r2,zero,r3
  80a3ac:	3884703a 	and	r2,r7,r2
  80a3b0:	1204703a 	and	r2,r2,r8
  80a3b4:	19bff626 	beq	r3,r6,80a390 <__alt_mem_onchip_mem+0xff78a390>
  80a3b8:	20800003 	ldbu	r2,0(r4)
  80a3bc:	10c03fcc 	andi	r3,r2,255
  80a3c0:	18c0201c 	xori	r3,r3,128
  80a3c4:	18ffe004 	addi	r3,r3,-128
  80a3c8:	18000c26 	beq	r3,zero,80a3fc <strcmp+0xac>
  80a3cc:	29800007 	ldb	r6,0(r5)
  80a3d0:	19800326 	beq	r3,r6,80a3e0 <strcmp+0x90>
  80a3d4:	00001306 	br	80a424 <strcmp+0xd4>
  80a3d8:	29800007 	ldb	r6,0(r5)
  80a3dc:	11800b1e 	bne	r2,r6,80a40c <strcmp+0xbc>
  80a3e0:	21000044 	addi	r4,r4,1
  80a3e4:	20c00003 	ldbu	r3,0(r4)
  80a3e8:	29400044 	addi	r5,r5,1
  80a3ec:	18803fcc 	andi	r2,r3,255
  80a3f0:	1080201c 	xori	r2,r2,128
  80a3f4:	10bfe004 	addi	r2,r2,-128
  80a3f8:	103ff71e 	bne	r2,zero,80a3d8 <__alt_mem_onchip_mem+0xff78a3d8>
  80a3fc:	0007883a 	mov	r3,zero
  80a400:	28800003 	ldbu	r2,0(r5)
  80a404:	1885c83a 	sub	r2,r3,r2
  80a408:	f800283a 	ret
  80a40c:	28800003 	ldbu	r2,0(r5)
  80a410:	18c03fcc 	andi	r3,r3,255
  80a414:	1885c83a 	sub	r2,r3,r2
  80a418:	f800283a 	ret
  80a41c:	0005883a 	mov	r2,zero
  80a420:	f800283a 	ret
  80a424:	10c03fcc 	andi	r3,r2,255
  80a428:	003ff506 	br	80a400 <__alt_mem_onchip_mem+0xff78a400>

0080a42c <__sprint_r.part.0>:
  80a42c:	28801917 	ldw	r2,100(r5)
  80a430:	defff604 	addi	sp,sp,-40
  80a434:	dd400515 	stw	r21,20(sp)
  80a438:	dfc00915 	stw	ra,36(sp)
  80a43c:	df000815 	stw	fp,32(sp)
  80a440:	ddc00715 	stw	r23,28(sp)
  80a444:	dd800615 	stw	r22,24(sp)
  80a448:	dd000415 	stw	r20,16(sp)
  80a44c:	dcc00315 	stw	r19,12(sp)
  80a450:	dc800215 	stw	r18,8(sp)
  80a454:	dc400115 	stw	r17,4(sp)
  80a458:	dc000015 	stw	r16,0(sp)
  80a45c:	1088000c 	andi	r2,r2,8192
  80a460:	302b883a 	mov	r21,r6
  80a464:	10002e26 	beq	r2,zero,80a520 <__sprint_r.part.0+0xf4>
  80a468:	30800217 	ldw	r2,8(r6)
  80a46c:	35800017 	ldw	r22,0(r6)
  80a470:	10002926 	beq	r2,zero,80a518 <__sprint_r.part.0+0xec>
  80a474:	2827883a 	mov	r19,r5
  80a478:	2029883a 	mov	r20,r4
  80a47c:	b5c00104 	addi	r23,r22,4
  80a480:	04bfffc4 	movi	r18,-1
  80a484:	bc400017 	ldw	r17,0(r23)
  80a488:	b4000017 	ldw	r16,0(r22)
  80a48c:	0039883a 	mov	fp,zero
  80a490:	8822d0ba 	srli	r17,r17,2
  80a494:	8800031e 	bne	r17,zero,80a4a4 <__sprint_r.part.0+0x78>
  80a498:	00001806 	br	80a4fc <__sprint_r.part.0+0xd0>
  80a49c:	84000104 	addi	r16,r16,4
  80a4a0:	8f001526 	beq	r17,fp,80a4f8 <__sprint_r.part.0+0xcc>
  80a4a4:	81400017 	ldw	r5,0(r16)
  80a4a8:	980d883a 	mov	r6,r19
  80a4ac:	a009883a 	mov	r4,r20
  80a4b0:	080bc9c0 	call	80bc9c <_fputwc_r>
  80a4b4:	e7000044 	addi	fp,fp,1
  80a4b8:	14bff81e 	bne	r2,r18,80a49c <__alt_mem_onchip_mem+0xff78a49c>
  80a4bc:	9005883a 	mov	r2,r18
  80a4c0:	a8000215 	stw	zero,8(r21)
  80a4c4:	a8000115 	stw	zero,4(r21)
  80a4c8:	dfc00917 	ldw	ra,36(sp)
  80a4cc:	df000817 	ldw	fp,32(sp)
  80a4d0:	ddc00717 	ldw	r23,28(sp)
  80a4d4:	dd800617 	ldw	r22,24(sp)
  80a4d8:	dd400517 	ldw	r21,20(sp)
  80a4dc:	dd000417 	ldw	r20,16(sp)
  80a4e0:	dcc00317 	ldw	r19,12(sp)
  80a4e4:	dc800217 	ldw	r18,8(sp)
  80a4e8:	dc400117 	ldw	r17,4(sp)
  80a4ec:	dc000017 	ldw	r16,0(sp)
  80a4f0:	dec00a04 	addi	sp,sp,40
  80a4f4:	f800283a 	ret
  80a4f8:	a8800217 	ldw	r2,8(r21)
  80a4fc:	8c63883a 	add	r17,r17,r17
  80a500:	8c63883a 	add	r17,r17,r17
  80a504:	1445c83a 	sub	r2,r2,r17
  80a508:	a8800215 	stw	r2,8(r21)
  80a50c:	b5800204 	addi	r22,r22,8
  80a510:	bdc00204 	addi	r23,r23,8
  80a514:	103fdb1e 	bne	r2,zero,80a484 <__alt_mem_onchip_mem+0xff78a484>
  80a518:	0005883a 	mov	r2,zero
  80a51c:	003fe806 	br	80a4c0 <__alt_mem_onchip_mem+0xff78a4c0>
  80a520:	08083480 	call	808348 <__sfvwrite_r>
  80a524:	003fe606 	br	80a4c0 <__alt_mem_onchip_mem+0xff78a4c0>

0080a528 <__sprint_r>:
  80a528:	30c00217 	ldw	r3,8(r6)
  80a52c:	18000126 	beq	r3,zero,80a534 <__sprint_r+0xc>
  80a530:	080a42c1 	jmpi	80a42c <__sprint_r.part.0>
  80a534:	30000115 	stw	zero,4(r6)
  80a538:	0005883a 	mov	r2,zero
  80a53c:	f800283a 	ret

0080a540 <___vfiprintf_internal_r>:
  80a540:	deffc904 	addi	sp,sp,-220
  80a544:	df003515 	stw	fp,212(sp)
  80a548:	dd003115 	stw	r20,196(sp)
  80a54c:	dfc03615 	stw	ra,216(sp)
  80a550:	ddc03415 	stw	r23,208(sp)
  80a554:	dd803315 	stw	r22,204(sp)
  80a558:	dd403215 	stw	r21,200(sp)
  80a55c:	dcc03015 	stw	r19,192(sp)
  80a560:	dc802f15 	stw	r18,188(sp)
  80a564:	dc402e15 	stw	r17,184(sp)
  80a568:	dc002d15 	stw	r16,180(sp)
  80a56c:	d9002015 	stw	r4,128(sp)
  80a570:	d9c02215 	stw	r7,136(sp)
  80a574:	2829883a 	mov	r20,r5
  80a578:	3039883a 	mov	fp,r6
  80a57c:	20000226 	beq	r4,zero,80a588 <___vfiprintf_internal_r+0x48>
  80a580:	20800e17 	ldw	r2,56(r4)
  80a584:	1000cf26 	beq	r2,zero,80a8c4 <___vfiprintf_internal_r+0x384>
  80a588:	a080030b 	ldhu	r2,12(r20)
  80a58c:	10c8000c 	andi	r3,r2,8192
  80a590:	1800061e 	bne	r3,zero,80a5ac <___vfiprintf_internal_r+0x6c>
  80a594:	a1001917 	ldw	r4,100(r20)
  80a598:	00f7ffc4 	movi	r3,-8193
  80a59c:	10880014 	ori	r2,r2,8192
  80a5a0:	20c6703a 	and	r3,r4,r3
  80a5a4:	a080030d 	sth	r2,12(r20)
  80a5a8:	a0c01915 	stw	r3,100(r20)
  80a5ac:	10c0020c 	andi	r3,r2,8
  80a5b0:	1800a926 	beq	r3,zero,80a858 <___vfiprintf_internal_r+0x318>
  80a5b4:	a0c00417 	ldw	r3,16(r20)
  80a5b8:	1800a726 	beq	r3,zero,80a858 <___vfiprintf_internal_r+0x318>
  80a5bc:	1080068c 	andi	r2,r2,26
  80a5c0:	00c00284 	movi	r3,10
  80a5c4:	10c0ac26 	beq	r2,r3,80a878 <___vfiprintf_internal_r+0x338>
  80a5c8:	da801a04 	addi	r10,sp,104
  80a5cc:	da801e15 	stw	r10,120(sp)
  80a5d0:	d8801e17 	ldw	r2,120(sp)
  80a5d4:	da8019c4 	addi	r10,sp,103
  80a5d8:	05802074 	movhi	r22,129
  80a5dc:	05c02074 	movhi	r23,129
  80a5e0:	da801f15 	stw	r10,124(sp)
  80a5e4:	1295c83a 	sub	r10,r2,r10
  80a5e8:	b58b5504 	addi	r22,r22,11604
  80a5ec:	bdcb5104 	addi	r23,r23,11588
  80a5f0:	dec01a15 	stw	sp,104(sp)
  80a5f4:	d8001c15 	stw	zero,112(sp)
  80a5f8:	d8001b15 	stw	zero,108(sp)
  80a5fc:	d8002615 	stw	zero,152(sp)
  80a600:	d8002315 	stw	zero,140(sp)
  80a604:	da802715 	stw	r10,156(sp)
  80a608:	d811883a 	mov	r8,sp
  80a60c:	dd002115 	stw	r20,132(sp)
  80a610:	e021883a 	mov	r16,fp
  80a614:	80800007 	ldb	r2,0(r16)
  80a618:	1003ea26 	beq	r2,zero,80b5c4 <___vfiprintf_internal_r+0x1084>
  80a61c:	00c00944 	movi	r3,37
  80a620:	8025883a 	mov	r18,r16
  80a624:	10c0021e 	bne	r2,r3,80a630 <___vfiprintf_internal_r+0xf0>
  80a628:	00001606 	br	80a684 <___vfiprintf_internal_r+0x144>
  80a62c:	10c00326 	beq	r2,r3,80a63c <___vfiprintf_internal_r+0xfc>
  80a630:	94800044 	addi	r18,r18,1
  80a634:	90800007 	ldb	r2,0(r18)
  80a638:	103ffc1e 	bne	r2,zero,80a62c <__alt_mem_onchip_mem+0xff78a62c>
  80a63c:	9423c83a 	sub	r17,r18,r16
  80a640:	88001026 	beq	r17,zero,80a684 <___vfiprintf_internal_r+0x144>
  80a644:	d8c01c17 	ldw	r3,112(sp)
  80a648:	d8801b17 	ldw	r2,108(sp)
  80a64c:	44000015 	stw	r16,0(r8)
  80a650:	88c7883a 	add	r3,r17,r3
  80a654:	10800044 	addi	r2,r2,1
  80a658:	44400115 	stw	r17,4(r8)
  80a65c:	d8c01c15 	stw	r3,112(sp)
  80a660:	d8801b15 	stw	r2,108(sp)
  80a664:	010001c4 	movi	r4,7
  80a668:	2080760e 	bge	r4,r2,80a844 <___vfiprintf_internal_r+0x304>
  80a66c:	1803821e 	bne	r3,zero,80b478 <___vfiprintf_internal_r+0xf38>
  80a670:	da802317 	ldw	r10,140(sp)
  80a674:	d8001b15 	stw	zero,108(sp)
  80a678:	d811883a 	mov	r8,sp
  80a67c:	5455883a 	add	r10,r10,r17
  80a680:	da802315 	stw	r10,140(sp)
  80a684:	90800007 	ldb	r2,0(r18)
  80a688:	10044626 	beq	r2,zero,80b7a4 <___vfiprintf_internal_r+0x1264>
  80a68c:	90c00047 	ldb	r3,1(r18)
  80a690:	94000044 	addi	r16,r18,1
  80a694:	d8001d85 	stb	zero,118(sp)
  80a698:	0009883a 	mov	r4,zero
  80a69c:	000f883a 	mov	r7,zero
  80a6a0:	027fffc4 	movi	r9,-1
  80a6a4:	0023883a 	mov	r17,zero
  80a6a8:	0029883a 	mov	r20,zero
  80a6ac:	01401604 	movi	r5,88
  80a6b0:	01800244 	movi	r6,9
  80a6b4:	03400a84 	movi	r13,42
  80a6b8:	03001b04 	movi	r12,108
  80a6bc:	84000044 	addi	r16,r16,1
  80a6c0:	18bff804 	addi	r2,r3,-32
  80a6c4:	28827336 	bltu	r5,r2,80b094 <___vfiprintf_internal_r+0xb54>
  80a6c8:	100490ba 	slli	r2,r2,2
  80a6cc:	02802074 	movhi	r10,129
  80a6d0:	52a9b804 	addi	r10,r10,-22816
  80a6d4:	1285883a 	add	r2,r2,r10
  80a6d8:	10800017 	ldw	r2,0(r2)
  80a6dc:	1000683a 	jmp	r2
  80a6e0:	0080adc8 	cmpgei	r2,zero,695
  80a6e4:	0080b094 	movui	r2,706
  80a6e8:	0080b094 	movui	r2,706
  80a6ec:	0080ade8 	cmpgeui	r2,zero,695
  80a6f0:	0080b094 	movui	r2,706
  80a6f4:	0080b094 	movui	r2,706
  80a6f8:	0080b094 	movui	r2,706
  80a6fc:	0080b094 	movui	r2,706
  80a700:	0080b094 	movui	r2,706
  80a704:	0080b094 	movui	r2,706
  80a708:	0080afd0 	cmplti	r2,zero,703
  80a70c:	0080afec 	andhi	r2,zero,703
  80a710:	0080b094 	movui	r2,706
  80a714:	0080a8d4 	movui	r2,675
  80a718:	0080affc 	xorhi	r2,zero,703
  80a71c:	0080b094 	movui	r2,706
  80a720:	0080adf4 	movhi	r2,695
  80a724:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a728:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a72c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a730:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a734:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a738:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a73c:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a740:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a744:	0080ae00 	call	80ae0 <__reset-0x77f520>
  80a748:	0080b094 	movui	r2,706
  80a74c:	0080b094 	movui	r2,706
  80a750:	0080b094 	movui	r2,706
  80a754:	0080b094 	movui	r2,706
  80a758:	0080b094 	movui	r2,706
  80a75c:	0080b094 	movui	r2,706
  80a760:	0080b094 	movui	r2,706
  80a764:	0080b094 	movui	r2,706
  80a768:	0080b094 	movui	r2,706
  80a76c:	0080b094 	movui	r2,706
  80a770:	0080ae2c 	andhi	r2,zero,696
  80a774:	0080b094 	movui	r2,706
  80a778:	0080b094 	movui	r2,706
  80a77c:	0080b094 	movui	r2,706
  80a780:	0080b094 	movui	r2,706
  80a784:	0080b094 	movui	r2,706
  80a788:	0080b094 	movui	r2,706
  80a78c:	0080b094 	movui	r2,706
  80a790:	0080b094 	movui	r2,706
  80a794:	0080b094 	movui	r2,706
  80a798:	0080b094 	movui	r2,706
  80a79c:	0080ae64 	muli	r2,zero,697
  80a7a0:	0080b094 	movui	r2,706
  80a7a4:	0080b094 	movui	r2,706
  80a7a8:	0080b094 	movui	r2,706
  80a7ac:	0080b094 	movui	r2,706
  80a7b0:	0080b094 	movui	r2,706
  80a7b4:	0080aebc 	xorhi	r2,zero,698
  80a7b8:	0080b094 	movui	r2,706
  80a7bc:	0080b094 	movui	r2,706
  80a7c0:	0080af2c 	andhi	r2,zero,700
  80a7c4:	0080b094 	movui	r2,706
  80a7c8:	0080b094 	movui	r2,706
  80a7cc:	0080b094 	movui	r2,706
  80a7d0:	0080b094 	movui	r2,706
  80a7d4:	0080b094 	movui	r2,706
  80a7d8:	0080b094 	movui	r2,706
  80a7dc:	0080b094 	movui	r2,706
  80a7e0:	0080b094 	movui	r2,706
  80a7e4:	0080b094 	movui	r2,706
  80a7e8:	0080b094 	movui	r2,706
  80a7ec:	0080acd8 	cmpnei	r2,zero,691
  80a7f0:	0080ad04 	movi	r2,692
  80a7f4:	0080b094 	movui	r2,706
  80a7f8:	0080b094 	movui	r2,706
  80a7fc:	0080b094 	movui	r2,706
  80a800:	0080b03c 	xorhi	r2,zero,704
  80a804:	0080ad04 	movi	r2,692
  80a808:	0080b094 	movui	r2,706
  80a80c:	0080b094 	movui	r2,706
  80a810:	0080ab98 	cmpnei	r2,zero,686
  80a814:	0080b094 	movui	r2,706
  80a818:	0080aba8 	cmpgeui	r2,zero,686
  80a81c:	0080abe4 	muli	r2,zero,687
  80a820:	0080a8e0 	cmpeqi	r2,zero,675
  80a824:	0080ab8c 	andi	r2,zero,686
  80a828:	0080b094 	movui	r2,706
  80a82c:	0080af68 	cmpgeui	r2,zero,701
  80a830:	0080b094 	movui	r2,706
  80a834:	0080afc0 	call	80afc <__reset-0x77f504>
  80a838:	0080b094 	movui	r2,706
  80a83c:	0080b094 	movui	r2,706
  80a840:	0080ac84 	movi	r2,690
  80a844:	42000204 	addi	r8,r8,8
  80a848:	da802317 	ldw	r10,140(sp)
  80a84c:	5455883a 	add	r10,r10,r17
  80a850:	da802315 	stw	r10,140(sp)
  80a854:	003f8b06 	br	80a684 <__alt_mem_onchip_mem+0xff78a684>
  80a858:	d9002017 	ldw	r4,128(sp)
  80a85c:	a00b883a 	mov	r5,r20
  80a860:	080608c0 	call	80608c <__swsetup_r>
  80a864:	1003b11e 	bne	r2,zero,80b72c <___vfiprintf_internal_r+0x11ec>
  80a868:	a080030b 	ldhu	r2,12(r20)
  80a86c:	00c00284 	movi	r3,10
  80a870:	1080068c 	andi	r2,r2,26
  80a874:	10ff541e 	bne	r2,r3,80a5c8 <__alt_mem_onchip_mem+0xff78a5c8>
  80a878:	a080038f 	ldh	r2,14(r20)
  80a87c:	103f5216 	blt	r2,zero,80a5c8 <__alt_mem_onchip_mem+0xff78a5c8>
  80a880:	d9c02217 	ldw	r7,136(sp)
  80a884:	d9002017 	ldw	r4,128(sp)
  80a888:	e00d883a 	mov	r6,fp
  80a88c:	a00b883a 	mov	r5,r20
  80a890:	080b9b80 	call	80b9b8 <__sbprintf>
  80a894:	dfc03617 	ldw	ra,216(sp)
  80a898:	df003517 	ldw	fp,212(sp)
  80a89c:	ddc03417 	ldw	r23,208(sp)
  80a8a0:	dd803317 	ldw	r22,204(sp)
  80a8a4:	dd403217 	ldw	r21,200(sp)
  80a8a8:	dd003117 	ldw	r20,196(sp)
  80a8ac:	dcc03017 	ldw	r19,192(sp)
  80a8b0:	dc802f17 	ldw	r18,188(sp)
  80a8b4:	dc402e17 	ldw	r17,184(sp)
  80a8b8:	dc002d17 	ldw	r16,180(sp)
  80a8bc:	dec03704 	addi	sp,sp,220
  80a8c0:	f800283a 	ret
  80a8c4:	0801fc00 	call	801fc0 <__sinit>
  80a8c8:	003f2f06 	br	80a588 <__alt_mem_onchip_mem+0xff78a588>
  80a8cc:	0463c83a 	sub	r17,zero,r17
  80a8d0:	d8802215 	stw	r2,136(sp)
  80a8d4:	a5000114 	ori	r20,r20,4
  80a8d8:	80c00007 	ldb	r3,0(r16)
  80a8dc:	003f7706 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80a8e0:	00800c04 	movi	r2,48
  80a8e4:	da802217 	ldw	r10,136(sp)
  80a8e8:	d8801d05 	stb	r2,116(sp)
  80a8ec:	00801e04 	movi	r2,120
  80a8f0:	d8801d45 	stb	r2,117(sp)
  80a8f4:	d8001d85 	stb	zero,118(sp)
  80a8f8:	50c00104 	addi	r3,r10,4
  80a8fc:	54800017 	ldw	r18,0(r10)
  80a900:	0027883a 	mov	r19,zero
  80a904:	a0800094 	ori	r2,r20,2
  80a908:	48030b16 	blt	r9,zero,80b538 <___vfiprintf_internal_r+0xff8>
  80a90c:	00bfdfc4 	movi	r2,-129
  80a910:	a096703a 	and	r11,r20,r2
  80a914:	d8c02215 	stw	r3,136(sp)
  80a918:	5d000094 	ori	r20,r11,2
  80a91c:	90032b1e 	bne	r18,zero,80b5cc <___vfiprintf_internal_r+0x108c>
  80a920:	00802074 	movhi	r2,129
  80a924:	108af104 	addi	r2,r2,11204
  80a928:	d8802615 	stw	r2,152(sp)
  80a92c:	0039883a 	mov	fp,zero
  80a930:	48017b1e 	bne	r9,zero,80af20 <___vfiprintf_internal_r+0x9e0>
  80a934:	0013883a 	mov	r9,zero
  80a938:	0027883a 	mov	r19,zero
  80a93c:	dd401a04 	addi	r21,sp,104
  80a940:	4825883a 	mov	r18,r9
  80a944:	4cc0010e 	bge	r9,r19,80a94c <___vfiprintf_internal_r+0x40c>
  80a948:	9825883a 	mov	r18,r19
  80a94c:	e7003fcc 	andi	fp,fp,255
  80a950:	e700201c 	xori	fp,fp,128
  80a954:	e73fe004 	addi	fp,fp,-128
  80a958:	e0000126 	beq	fp,zero,80a960 <___vfiprintf_internal_r+0x420>
  80a95c:	94800044 	addi	r18,r18,1
  80a960:	a380008c 	andi	r14,r20,2
  80a964:	70000126 	beq	r14,zero,80a96c <___vfiprintf_internal_r+0x42c>
  80a968:	94800084 	addi	r18,r18,2
  80a96c:	a700210c 	andi	fp,r20,132
  80a970:	e001df1e 	bne	fp,zero,80b0f0 <___vfiprintf_internal_r+0xbb0>
  80a974:	8c87c83a 	sub	r3,r17,r18
  80a978:	00c1dd0e 	bge	zero,r3,80b0f0 <___vfiprintf_internal_r+0xbb0>
  80a97c:	01c00404 	movi	r7,16
  80a980:	d8801c17 	ldw	r2,112(sp)
  80a984:	38c3ad0e 	bge	r7,r3,80b83c <___vfiprintf_internal_r+0x12fc>
  80a988:	02802074 	movhi	r10,129
  80a98c:	528b5504 	addi	r10,r10,11604
  80a990:	dc002915 	stw	r16,164(sp)
  80a994:	d9801b17 	ldw	r6,108(sp)
  80a998:	da802415 	stw	r10,144(sp)
  80a99c:	03c001c4 	movi	r15,7
  80a9a0:	da402515 	stw	r9,148(sp)
  80a9a4:	db802815 	stw	r14,160(sp)
  80a9a8:	1821883a 	mov	r16,r3
  80a9ac:	00000506 	br	80a9c4 <___vfiprintf_internal_r+0x484>
  80a9b0:	31400084 	addi	r5,r6,2
  80a9b4:	42000204 	addi	r8,r8,8
  80a9b8:	200d883a 	mov	r6,r4
  80a9bc:	843ffc04 	addi	r16,r16,-16
  80a9c0:	3c000d0e 	bge	r7,r16,80a9f8 <___vfiprintf_internal_r+0x4b8>
  80a9c4:	10800404 	addi	r2,r2,16
  80a9c8:	31000044 	addi	r4,r6,1
  80a9cc:	45800015 	stw	r22,0(r8)
  80a9d0:	41c00115 	stw	r7,4(r8)
  80a9d4:	d8801c15 	stw	r2,112(sp)
  80a9d8:	d9001b15 	stw	r4,108(sp)
  80a9dc:	793ff40e 	bge	r15,r4,80a9b0 <__alt_mem_onchip_mem+0xff78a9b0>
  80a9e0:	1001b51e 	bne	r2,zero,80b0b8 <___vfiprintf_internal_r+0xb78>
  80a9e4:	843ffc04 	addi	r16,r16,-16
  80a9e8:	000d883a 	mov	r6,zero
  80a9ec:	01400044 	movi	r5,1
  80a9f0:	d811883a 	mov	r8,sp
  80a9f4:	3c3ff316 	blt	r7,r16,80a9c4 <__alt_mem_onchip_mem+0xff78a9c4>
  80a9f8:	8007883a 	mov	r3,r16
  80a9fc:	da402517 	ldw	r9,148(sp)
  80aa00:	db802817 	ldw	r14,160(sp)
  80aa04:	dc002917 	ldw	r16,164(sp)
  80aa08:	da802417 	ldw	r10,144(sp)
  80aa0c:	1885883a 	add	r2,r3,r2
  80aa10:	40c00115 	stw	r3,4(r8)
  80aa14:	42800015 	stw	r10,0(r8)
  80aa18:	d8801c15 	stw	r2,112(sp)
  80aa1c:	d9401b15 	stw	r5,108(sp)
  80aa20:	00c001c4 	movi	r3,7
  80aa24:	19426016 	blt	r3,r5,80b3a8 <___vfiprintf_internal_r+0xe68>
  80aa28:	d8c01d87 	ldb	r3,118(sp)
  80aa2c:	42000204 	addi	r8,r8,8
  80aa30:	29000044 	addi	r4,r5,1
  80aa34:	1801b31e 	bne	r3,zero,80b104 <___vfiprintf_internal_r+0xbc4>
  80aa38:	7001c026 	beq	r14,zero,80b13c <___vfiprintf_internal_r+0xbfc>
  80aa3c:	d8c01d04 	addi	r3,sp,116
  80aa40:	10800084 	addi	r2,r2,2
  80aa44:	40c00015 	stw	r3,0(r8)
  80aa48:	00c00084 	movi	r3,2
  80aa4c:	40c00115 	stw	r3,4(r8)
  80aa50:	d8801c15 	stw	r2,112(sp)
  80aa54:	d9001b15 	stw	r4,108(sp)
  80aa58:	00c001c4 	movi	r3,7
  80aa5c:	1902650e 	bge	r3,r4,80b3f4 <___vfiprintf_internal_r+0xeb4>
  80aa60:	10029a1e 	bne	r2,zero,80b4cc <___vfiprintf_internal_r+0xf8c>
  80aa64:	00c02004 	movi	r3,128
  80aa68:	01000044 	movi	r4,1
  80aa6c:	000b883a 	mov	r5,zero
  80aa70:	d811883a 	mov	r8,sp
  80aa74:	e0c1b31e 	bne	fp,r3,80b144 <___vfiprintf_internal_r+0xc04>
  80aa78:	8cb9c83a 	sub	fp,r17,r18
  80aa7c:	0701b10e 	bge	zero,fp,80b144 <___vfiprintf_internal_r+0xc04>
  80aa80:	01c00404 	movi	r7,16
  80aa84:	3f03890e 	bge	r7,fp,80b8ac <___vfiprintf_internal_r+0x136c>
  80aa88:	00c02074 	movhi	r3,129
  80aa8c:	18cb5104 	addi	r3,r3,11588
  80aa90:	d8c02415 	stw	r3,144(sp)
  80aa94:	8007883a 	mov	r3,r16
  80aa98:	034001c4 	movi	r13,7
  80aa9c:	e021883a 	mov	r16,fp
  80aaa0:	da402515 	stw	r9,148(sp)
  80aaa4:	1839883a 	mov	fp,r3
  80aaa8:	00000506 	br	80aac0 <___vfiprintf_internal_r+0x580>
  80aaac:	29800084 	addi	r6,r5,2
  80aab0:	42000204 	addi	r8,r8,8
  80aab4:	180b883a 	mov	r5,r3
  80aab8:	843ffc04 	addi	r16,r16,-16
  80aabc:	3c000d0e 	bge	r7,r16,80aaf4 <___vfiprintf_internal_r+0x5b4>
  80aac0:	10800404 	addi	r2,r2,16
  80aac4:	28c00044 	addi	r3,r5,1
  80aac8:	45c00015 	stw	r23,0(r8)
  80aacc:	41c00115 	stw	r7,4(r8)
  80aad0:	d8801c15 	stw	r2,112(sp)
  80aad4:	d8c01b15 	stw	r3,108(sp)
  80aad8:	68fff40e 	bge	r13,r3,80aaac <__alt_mem_onchip_mem+0xff78aaac>
  80aadc:	1002241e 	bne	r2,zero,80b370 <___vfiprintf_internal_r+0xe30>
  80aae0:	843ffc04 	addi	r16,r16,-16
  80aae4:	01800044 	movi	r6,1
  80aae8:	000b883a 	mov	r5,zero
  80aaec:	d811883a 	mov	r8,sp
  80aaf0:	3c3ff316 	blt	r7,r16,80aac0 <__alt_mem_onchip_mem+0xff78aac0>
  80aaf4:	da402517 	ldw	r9,148(sp)
  80aaf8:	e007883a 	mov	r3,fp
  80aafc:	8039883a 	mov	fp,r16
  80ab00:	1821883a 	mov	r16,r3
  80ab04:	d8c02417 	ldw	r3,144(sp)
  80ab08:	1705883a 	add	r2,r2,fp
  80ab0c:	47000115 	stw	fp,4(r8)
  80ab10:	40c00015 	stw	r3,0(r8)
  80ab14:	d8801c15 	stw	r2,112(sp)
  80ab18:	d9801b15 	stw	r6,108(sp)
  80ab1c:	00c001c4 	movi	r3,7
  80ab20:	19827616 	blt	r3,r6,80b4fc <___vfiprintf_internal_r+0xfbc>
  80ab24:	4cf9c83a 	sub	fp,r9,r19
  80ab28:	42000204 	addi	r8,r8,8
  80ab2c:	31000044 	addi	r4,r6,1
  80ab30:	300b883a 	mov	r5,r6
  80ab34:	07018516 	blt	zero,fp,80b14c <___vfiprintf_internal_r+0xc0c>
  80ab38:	9885883a 	add	r2,r19,r2
  80ab3c:	45400015 	stw	r21,0(r8)
  80ab40:	44c00115 	stw	r19,4(r8)
  80ab44:	d8801c15 	stw	r2,112(sp)
  80ab48:	d9001b15 	stw	r4,108(sp)
  80ab4c:	00c001c4 	movi	r3,7
  80ab50:	1901dd0e 	bge	r3,r4,80b2c8 <___vfiprintf_internal_r+0xd88>
  80ab54:	1002401e 	bne	r2,zero,80b458 <___vfiprintf_internal_r+0xf18>
  80ab58:	d8001b15 	stw	zero,108(sp)
  80ab5c:	a2c0010c 	andi	r11,r20,4
  80ab60:	58000226 	beq	r11,zero,80ab6c <___vfiprintf_internal_r+0x62c>
  80ab64:	8ca7c83a 	sub	r19,r17,r18
  80ab68:	04c2f216 	blt	zero,r19,80b734 <___vfiprintf_internal_r+0x11f4>
  80ab6c:	8c80010e 	bge	r17,r18,80ab74 <___vfiprintf_internal_r+0x634>
  80ab70:	9023883a 	mov	r17,r18
  80ab74:	da802317 	ldw	r10,140(sp)
  80ab78:	5455883a 	add	r10,r10,r17
  80ab7c:	da802315 	stw	r10,140(sp)
  80ab80:	d8001b15 	stw	zero,108(sp)
  80ab84:	d811883a 	mov	r8,sp
  80ab88:	003ea206 	br	80a614 <__alt_mem_onchip_mem+0xff78a614>
  80ab8c:	a5000814 	ori	r20,r20,32
  80ab90:	80c00007 	ldb	r3,0(r16)
  80ab94:	003ec906 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80ab98:	80c00007 	ldb	r3,0(r16)
  80ab9c:	1b030926 	beq	r3,r12,80b7c4 <___vfiprintf_internal_r+0x1284>
  80aba0:	a5000414 	ori	r20,r20,16
  80aba4:	003ec506 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80aba8:	21003fcc 	andi	r4,r4,255
  80abac:	20035e1e 	bne	r4,zero,80b928 <___vfiprintf_internal_r+0x13e8>
  80abb0:	a080080c 	andi	r2,r20,32
  80abb4:	1002a526 	beq	r2,zero,80b64c <___vfiprintf_internal_r+0x110c>
  80abb8:	da802217 	ldw	r10,136(sp)
  80abbc:	50800017 	ldw	r2,0(r10)
  80abc0:	da802317 	ldw	r10,140(sp)
  80abc4:	5007d7fa 	srai	r3,r10,31
  80abc8:	da802217 	ldw	r10,136(sp)
  80abcc:	10c00115 	stw	r3,4(r2)
  80abd0:	52800104 	addi	r10,r10,4
  80abd4:	da802215 	stw	r10,136(sp)
  80abd8:	da802317 	ldw	r10,140(sp)
  80abdc:	12800015 	stw	r10,0(r2)
  80abe0:	003e8c06 	br	80a614 <__alt_mem_onchip_mem+0xff78a614>
  80abe4:	21003fcc 	andi	r4,r4,255
  80abe8:	2003511e 	bne	r4,zero,80b930 <___vfiprintf_internal_r+0x13f0>
  80abec:	a080080c 	andi	r2,r20,32
  80abf0:	1000a126 	beq	r2,zero,80ae78 <___vfiprintf_internal_r+0x938>
  80abf4:	da802217 	ldw	r10,136(sp)
  80abf8:	d8001d85 	stb	zero,118(sp)
  80abfc:	50800204 	addi	r2,r10,8
  80ac00:	54800017 	ldw	r18,0(r10)
  80ac04:	54c00117 	ldw	r19,4(r10)
  80ac08:	4802b416 	blt	r9,zero,80b6dc <___vfiprintf_internal_r+0x119c>
  80ac0c:	013fdfc4 	movi	r4,-129
  80ac10:	94c6b03a 	or	r3,r18,r19
  80ac14:	d8802215 	stw	r2,136(sp)
  80ac18:	a128703a 	and	r20,r20,r4
  80ac1c:	1800a226 	beq	r3,zero,80aea8 <___vfiprintf_internal_r+0x968>
  80ac20:	0039883a 	mov	fp,zero
  80ac24:	dd401a04 	addi	r21,sp,104
  80ac28:	9006d0fa 	srli	r3,r18,3
  80ac2c:	9808977a 	slli	r4,r19,29
  80ac30:	9826d0fa 	srli	r19,r19,3
  80ac34:	948001cc 	andi	r18,r18,7
  80ac38:	90800c04 	addi	r2,r18,48
  80ac3c:	ad7fffc4 	addi	r21,r21,-1
  80ac40:	20e4b03a 	or	r18,r4,r3
  80ac44:	a8800005 	stb	r2,0(r21)
  80ac48:	94c6b03a 	or	r3,r18,r19
  80ac4c:	183ff61e 	bne	r3,zero,80ac28 <__alt_mem_onchip_mem+0xff78ac28>
  80ac50:	a0c0004c 	andi	r3,r20,1
  80ac54:	18005926 	beq	r3,zero,80adbc <___vfiprintf_internal_r+0x87c>
  80ac58:	10803fcc 	andi	r2,r2,255
  80ac5c:	1080201c 	xori	r2,r2,128
  80ac60:	10bfe004 	addi	r2,r2,-128
  80ac64:	00c00c04 	movi	r3,48
  80ac68:	10c05426 	beq	r2,r3,80adbc <___vfiprintf_internal_r+0x87c>
  80ac6c:	da801e17 	ldw	r10,120(sp)
  80ac70:	a8bfffc4 	addi	r2,r21,-1
  80ac74:	a8ffffc5 	stb	r3,-1(r21)
  80ac78:	50a7c83a 	sub	r19,r10,r2
  80ac7c:	102b883a 	mov	r21,r2
  80ac80:	003f2f06 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80ac84:	21003fcc 	andi	r4,r4,255
  80ac88:	2003421e 	bne	r4,zero,80b994 <___vfiprintf_internal_r+0x1454>
  80ac8c:	00802074 	movhi	r2,129
  80ac90:	108af104 	addi	r2,r2,11204
  80ac94:	d8802615 	stw	r2,152(sp)
  80ac98:	a080080c 	andi	r2,r20,32
  80ac9c:	1000aa26 	beq	r2,zero,80af48 <___vfiprintf_internal_r+0xa08>
  80aca0:	da802217 	ldw	r10,136(sp)
  80aca4:	54800017 	ldw	r18,0(r10)
  80aca8:	54c00117 	ldw	r19,4(r10)
  80acac:	52800204 	addi	r10,r10,8
  80acb0:	da802215 	stw	r10,136(sp)
  80acb4:	a080004c 	andi	r2,r20,1
  80acb8:	1001d226 	beq	r2,zero,80b404 <___vfiprintf_internal_r+0xec4>
  80acbc:	94c4b03a 	or	r2,r18,r19
  80acc0:	1002351e 	bne	r2,zero,80b598 <___vfiprintf_internal_r+0x1058>
  80acc4:	d8001d85 	stb	zero,118(sp)
  80acc8:	48022216 	blt	r9,zero,80b554 <___vfiprintf_internal_r+0x1014>
  80accc:	00bfdfc4 	movi	r2,-129
  80acd0:	a0a8703a 	and	r20,r20,r2
  80acd4:	003f1506 	br	80a92c <__alt_mem_onchip_mem+0xff78a92c>
  80acd8:	da802217 	ldw	r10,136(sp)
  80acdc:	04800044 	movi	r18,1
  80ace0:	d8001d85 	stb	zero,118(sp)
  80ace4:	50800017 	ldw	r2,0(r10)
  80ace8:	52800104 	addi	r10,r10,4
  80acec:	da802215 	stw	r10,136(sp)
  80acf0:	d8801005 	stb	r2,64(sp)
  80acf4:	9027883a 	mov	r19,r18
  80acf8:	dd401004 	addi	r21,sp,64
  80acfc:	0013883a 	mov	r9,zero
  80ad00:	003f1706 	br	80a960 <__alt_mem_onchip_mem+0xff78a960>
  80ad04:	21003fcc 	andi	r4,r4,255
  80ad08:	2003201e 	bne	r4,zero,80b98c <___vfiprintf_internal_r+0x144c>
  80ad0c:	a080080c 	andi	r2,r20,32
  80ad10:	10004b26 	beq	r2,zero,80ae40 <___vfiprintf_internal_r+0x900>
  80ad14:	da802217 	ldw	r10,136(sp)
  80ad18:	50800117 	ldw	r2,4(r10)
  80ad1c:	54800017 	ldw	r18,0(r10)
  80ad20:	52800204 	addi	r10,r10,8
  80ad24:	da802215 	stw	r10,136(sp)
  80ad28:	1027883a 	mov	r19,r2
  80ad2c:	10022c16 	blt	r2,zero,80b5e0 <___vfiprintf_internal_r+0x10a0>
  80ad30:	df001d83 	ldbu	fp,118(sp)
  80ad34:	48007216 	blt	r9,zero,80af00 <___vfiprintf_internal_r+0x9c0>
  80ad38:	00ffdfc4 	movi	r3,-129
  80ad3c:	94c4b03a 	or	r2,r18,r19
  80ad40:	a0e8703a 	and	r20,r20,r3
  80ad44:	1000cc26 	beq	r2,zero,80b078 <___vfiprintf_internal_r+0xb38>
  80ad48:	98021026 	beq	r19,zero,80b58c <___vfiprintf_internal_r+0x104c>
  80ad4c:	dc402415 	stw	r17,144(sp)
  80ad50:	dc002515 	stw	r16,148(sp)
  80ad54:	9823883a 	mov	r17,r19
  80ad58:	9021883a 	mov	r16,r18
  80ad5c:	dd401a04 	addi	r21,sp,104
  80ad60:	4825883a 	mov	r18,r9
  80ad64:	4027883a 	mov	r19,r8
  80ad68:	8009883a 	mov	r4,r16
  80ad6c:	880b883a 	mov	r5,r17
  80ad70:	01800284 	movi	r6,10
  80ad74:	000f883a 	mov	r7,zero
  80ad78:	080c4a00 	call	80c4a0 <__umoddi3>
  80ad7c:	10800c04 	addi	r2,r2,48
  80ad80:	ad7fffc4 	addi	r21,r21,-1
  80ad84:	8009883a 	mov	r4,r16
  80ad88:	880b883a 	mov	r5,r17
  80ad8c:	a8800005 	stb	r2,0(r21)
  80ad90:	01800284 	movi	r6,10
  80ad94:	000f883a 	mov	r7,zero
  80ad98:	080bf280 	call	80bf28 <__udivdi3>
  80ad9c:	1021883a 	mov	r16,r2
  80ada0:	10c4b03a 	or	r2,r2,r3
  80ada4:	1823883a 	mov	r17,r3
  80ada8:	103fef1e 	bne	r2,zero,80ad68 <__alt_mem_onchip_mem+0xff78ad68>
  80adac:	dc402417 	ldw	r17,144(sp)
  80adb0:	dc002517 	ldw	r16,148(sp)
  80adb4:	9013883a 	mov	r9,r18
  80adb8:	9811883a 	mov	r8,r19
  80adbc:	da801e17 	ldw	r10,120(sp)
  80adc0:	5567c83a 	sub	r19,r10,r21
  80adc4:	003ede06 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80adc8:	38803fcc 	andi	r2,r7,255
  80adcc:	1080201c 	xori	r2,r2,128
  80add0:	10bfe004 	addi	r2,r2,-128
  80add4:	1002371e 	bne	r2,zero,80b6b4 <___vfiprintf_internal_r+0x1174>
  80add8:	01000044 	movi	r4,1
  80addc:	01c00804 	movi	r7,32
  80ade0:	80c00007 	ldb	r3,0(r16)
  80ade4:	003e3506 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80ade8:	a5000054 	ori	r20,r20,1
  80adec:	80c00007 	ldb	r3,0(r16)
  80adf0:	003e3206 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80adf4:	a5002014 	ori	r20,r20,128
  80adf8:	80c00007 	ldb	r3,0(r16)
  80adfc:	003e2f06 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80ae00:	8015883a 	mov	r10,r16
  80ae04:	0023883a 	mov	r17,zero
  80ae08:	18bff404 	addi	r2,r3,-48
  80ae0c:	50c00007 	ldb	r3,0(r10)
  80ae10:	8c4002a4 	muli	r17,r17,10
  80ae14:	84000044 	addi	r16,r16,1
  80ae18:	8015883a 	mov	r10,r16
  80ae1c:	1463883a 	add	r17,r2,r17
  80ae20:	18bff404 	addi	r2,r3,-48
  80ae24:	30bff92e 	bgeu	r6,r2,80ae0c <__alt_mem_onchip_mem+0xff78ae0c>
  80ae28:	003e2506 	br	80a6c0 <__alt_mem_onchip_mem+0xff78a6c0>
  80ae2c:	21003fcc 	andi	r4,r4,255
  80ae30:	2002d41e 	bne	r4,zero,80b984 <___vfiprintf_internal_r+0x1444>
  80ae34:	a5000414 	ori	r20,r20,16
  80ae38:	a080080c 	andi	r2,r20,32
  80ae3c:	103fb51e 	bne	r2,zero,80ad14 <__alt_mem_onchip_mem+0xff78ad14>
  80ae40:	a080040c 	andi	r2,r20,16
  80ae44:	1001f826 	beq	r2,zero,80b628 <___vfiprintf_internal_r+0x10e8>
  80ae48:	da802217 	ldw	r10,136(sp)
  80ae4c:	54800017 	ldw	r18,0(r10)
  80ae50:	52800104 	addi	r10,r10,4
  80ae54:	da802215 	stw	r10,136(sp)
  80ae58:	9027d7fa 	srai	r19,r18,31
  80ae5c:	9805883a 	mov	r2,r19
  80ae60:	003fb206 	br	80ad2c <__alt_mem_onchip_mem+0xff78ad2c>
  80ae64:	21003fcc 	andi	r4,r4,255
  80ae68:	2002c41e 	bne	r4,zero,80b97c <___vfiprintf_internal_r+0x143c>
  80ae6c:	a5000414 	ori	r20,r20,16
  80ae70:	a080080c 	andi	r2,r20,32
  80ae74:	103f5f1e 	bne	r2,zero,80abf4 <__alt_mem_onchip_mem+0xff78abf4>
  80ae78:	a080040c 	andi	r2,r20,16
  80ae7c:	10020f26 	beq	r2,zero,80b6bc <___vfiprintf_internal_r+0x117c>
  80ae80:	da802217 	ldw	r10,136(sp)
  80ae84:	d8001d85 	stb	zero,118(sp)
  80ae88:	0027883a 	mov	r19,zero
  80ae8c:	50800104 	addi	r2,r10,4
  80ae90:	54800017 	ldw	r18,0(r10)
  80ae94:	48021116 	blt	r9,zero,80b6dc <___vfiprintf_internal_r+0x119c>
  80ae98:	00ffdfc4 	movi	r3,-129
  80ae9c:	d8802215 	stw	r2,136(sp)
  80aea0:	a0e8703a 	and	r20,r20,r3
  80aea4:	903f5e1e 	bne	r18,zero,80ac20 <__alt_mem_onchip_mem+0xff78ac20>
  80aea8:	0039883a 	mov	fp,zero
  80aeac:	4802a626 	beq	r9,zero,80b948 <___vfiprintf_internal_r+0x1408>
  80aeb0:	0025883a 	mov	r18,zero
  80aeb4:	0027883a 	mov	r19,zero
  80aeb8:	003f5a06 	br	80ac24 <__alt_mem_onchip_mem+0xff78ac24>
  80aebc:	21003fcc 	andi	r4,r4,255
  80aec0:	20029f1e 	bne	r4,zero,80b940 <___vfiprintf_internal_r+0x1400>
  80aec4:	a5000414 	ori	r20,r20,16
  80aec8:	a080080c 	andi	r2,r20,32
  80aecc:	10005e1e 	bne	r2,zero,80b048 <___vfiprintf_internal_r+0xb08>
  80aed0:	a080040c 	andi	r2,r20,16
  80aed4:	1001a21e 	bne	r2,zero,80b560 <___vfiprintf_internal_r+0x1020>
  80aed8:	a080100c 	andi	r2,r20,64
  80aedc:	d8001d85 	stb	zero,118(sp)
  80aee0:	da802217 	ldw	r10,136(sp)
  80aee4:	1002231e 	bne	r2,zero,80b774 <___vfiprintf_internal_r+0x1234>
  80aee8:	50800104 	addi	r2,r10,4
  80aeec:	54800017 	ldw	r18,0(r10)
  80aef0:	0027883a 	mov	r19,zero
  80aef4:	4801a00e 	bge	r9,zero,80b578 <___vfiprintf_internal_r+0x1038>
  80aef8:	d8802215 	stw	r2,136(sp)
  80aefc:	0039883a 	mov	fp,zero
  80af00:	94c4b03a 	or	r2,r18,r19
  80af04:	103f901e 	bne	r2,zero,80ad48 <__alt_mem_onchip_mem+0xff78ad48>
  80af08:	00800044 	movi	r2,1
  80af0c:	10803fcc 	andi	r2,r2,255
  80af10:	00c00044 	movi	r3,1
  80af14:	10c05926 	beq	r2,r3,80b07c <___vfiprintf_internal_r+0xb3c>
  80af18:	00c00084 	movi	r3,2
  80af1c:	10ffe41e 	bne	r2,r3,80aeb0 <__alt_mem_onchip_mem+0xff78aeb0>
  80af20:	0025883a 	mov	r18,zero
  80af24:	0027883a 	mov	r19,zero
  80af28:	00013d06 	br	80b420 <___vfiprintf_internal_r+0xee0>
  80af2c:	21003fcc 	andi	r4,r4,255
  80af30:	2002811e 	bne	r4,zero,80b938 <___vfiprintf_internal_r+0x13f8>
  80af34:	00802074 	movhi	r2,129
  80af38:	108aec04 	addi	r2,r2,11184
  80af3c:	d8802615 	stw	r2,152(sp)
  80af40:	a080080c 	andi	r2,r20,32
  80af44:	103f561e 	bne	r2,zero,80aca0 <__alt_mem_onchip_mem+0xff78aca0>
  80af48:	a080040c 	andi	r2,r20,16
  80af4c:	1001d126 	beq	r2,zero,80b694 <___vfiprintf_internal_r+0x1154>
  80af50:	da802217 	ldw	r10,136(sp)
  80af54:	0027883a 	mov	r19,zero
  80af58:	54800017 	ldw	r18,0(r10)
  80af5c:	52800104 	addi	r10,r10,4
  80af60:	da802215 	stw	r10,136(sp)
  80af64:	003f5306 	br	80acb4 <__alt_mem_onchip_mem+0xff78acb4>
  80af68:	da802217 	ldw	r10,136(sp)
  80af6c:	d8001d85 	stb	zero,118(sp)
  80af70:	55400017 	ldw	r21,0(r10)
  80af74:	50c00104 	addi	r3,r10,4
  80af78:	a8024226 	beq	r21,zero,80b884 <___vfiprintf_internal_r+0x1344>
  80af7c:	48021816 	blt	r9,zero,80b7e0 <___vfiprintf_internal_r+0x12a0>
  80af80:	480d883a 	mov	r6,r9
  80af84:	000b883a 	mov	r5,zero
  80af88:	a809883a 	mov	r4,r21
  80af8c:	d8c02a15 	stw	r3,168(sp)
  80af90:	da002b15 	stw	r8,172(sp)
  80af94:	da402c15 	stw	r9,176(sp)
  80af98:	08089940 	call	808994 <memchr>
  80af9c:	d8c02a17 	ldw	r3,168(sp)
  80afa0:	da002b17 	ldw	r8,172(sp)
  80afa4:	da402c17 	ldw	r9,176(sp)
  80afa8:	10024826 	beq	r2,zero,80b8cc <___vfiprintf_internal_r+0x138c>
  80afac:	1567c83a 	sub	r19,r2,r21
  80afb0:	df001d83 	ldbu	fp,118(sp)
  80afb4:	d8c02215 	stw	r3,136(sp)
  80afb8:	0013883a 	mov	r9,zero
  80afbc:	003e6006 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80afc0:	21003fcc 	andi	r4,r4,255
  80afc4:	203fc026 	beq	r4,zero,80aec8 <__alt_mem_onchip_mem+0xff78aec8>
  80afc8:	d9c01d85 	stb	r7,118(sp)
  80afcc:	003fbe06 	br	80aec8 <__alt_mem_onchip_mem+0xff78aec8>
  80afd0:	da802217 	ldw	r10,136(sp)
  80afd4:	54400017 	ldw	r17,0(r10)
  80afd8:	50800104 	addi	r2,r10,4
  80afdc:	883e3b16 	blt	r17,zero,80a8cc <__alt_mem_onchip_mem+0xff78a8cc>
  80afe0:	d8802215 	stw	r2,136(sp)
  80afe4:	80c00007 	ldb	r3,0(r16)
  80afe8:	003db406 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80afec:	01000044 	movi	r4,1
  80aff0:	01c00ac4 	movi	r7,43
  80aff4:	80c00007 	ldb	r3,0(r16)
  80aff8:	003db006 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80affc:	80c00007 	ldb	r3,0(r16)
  80b000:	82800044 	addi	r10,r16,1
  80b004:	1b423c26 	beq	r3,r13,80b8f8 <___vfiprintf_internal_r+0x13b8>
  80b008:	18bff404 	addi	r2,r3,-48
  80b00c:	0013883a 	mov	r9,zero
  80b010:	30822b36 	bltu	r6,r2,80b8c0 <___vfiprintf_internal_r+0x1380>
  80b014:	50c00007 	ldb	r3,0(r10)
  80b018:	4a4002a4 	muli	r9,r9,10
  80b01c:	54000044 	addi	r16,r10,1
  80b020:	8015883a 	mov	r10,r16
  80b024:	4893883a 	add	r9,r9,r2
  80b028:	18bff404 	addi	r2,r3,-48
  80b02c:	30bff92e 	bgeu	r6,r2,80b014 <__alt_mem_onchip_mem+0xff78b014>
  80b030:	483da30e 	bge	r9,zero,80a6c0 <__alt_mem_onchip_mem+0xff78a6c0>
  80b034:	027fffc4 	movi	r9,-1
  80b038:	003da106 	br	80a6c0 <__alt_mem_onchip_mem+0xff78a6c0>
  80b03c:	a5001014 	ori	r20,r20,64
  80b040:	80c00007 	ldb	r3,0(r16)
  80b044:	003d9d06 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80b048:	da802217 	ldw	r10,136(sp)
  80b04c:	d8001d85 	stb	zero,118(sp)
  80b050:	50c00204 	addi	r3,r10,8
  80b054:	54800017 	ldw	r18,0(r10)
  80b058:	54c00117 	ldw	r19,4(r10)
  80b05c:	4801ca16 	blt	r9,zero,80b788 <___vfiprintf_internal_r+0x1248>
  80b060:	013fdfc4 	movi	r4,-129
  80b064:	94c4b03a 	or	r2,r18,r19
  80b068:	d8c02215 	stw	r3,136(sp)
  80b06c:	a128703a 	and	r20,r20,r4
  80b070:	0039883a 	mov	fp,zero
  80b074:	103f341e 	bne	r2,zero,80ad48 <__alt_mem_onchip_mem+0xff78ad48>
  80b078:	483e2e26 	beq	r9,zero,80a934 <__alt_mem_onchip_mem+0xff78a934>
  80b07c:	0025883a 	mov	r18,zero
  80b080:	94800c04 	addi	r18,r18,48
  80b084:	dc8019c5 	stb	r18,103(sp)
  80b088:	dcc02717 	ldw	r19,156(sp)
  80b08c:	dd4019c4 	addi	r21,sp,103
  80b090:	003e2b06 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80b094:	21003fcc 	andi	r4,r4,255
  80b098:	2002361e 	bne	r4,zero,80b974 <___vfiprintf_internal_r+0x1434>
  80b09c:	1801c126 	beq	r3,zero,80b7a4 <___vfiprintf_internal_r+0x1264>
  80b0a0:	04800044 	movi	r18,1
  80b0a4:	d8c01005 	stb	r3,64(sp)
  80b0a8:	d8001d85 	stb	zero,118(sp)
  80b0ac:	9027883a 	mov	r19,r18
  80b0b0:	dd401004 	addi	r21,sp,64
  80b0b4:	003f1106 	br	80acfc <__alt_mem_onchip_mem+0xff78acfc>
  80b0b8:	d9402117 	ldw	r5,132(sp)
  80b0bc:	d9002017 	ldw	r4,128(sp)
  80b0c0:	d9801a04 	addi	r6,sp,104
  80b0c4:	d9c02b15 	stw	r7,172(sp)
  80b0c8:	dbc02a15 	stw	r15,168(sp)
  80b0cc:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b0d0:	d9c02b17 	ldw	r7,172(sp)
  80b0d4:	dbc02a17 	ldw	r15,168(sp)
  80b0d8:	10006d1e 	bne	r2,zero,80b290 <___vfiprintf_internal_r+0xd50>
  80b0dc:	d9801b17 	ldw	r6,108(sp)
  80b0e0:	d8801c17 	ldw	r2,112(sp)
  80b0e4:	d811883a 	mov	r8,sp
  80b0e8:	31400044 	addi	r5,r6,1
  80b0ec:	003e3306 	br	80a9bc <__alt_mem_onchip_mem+0xff78a9bc>
  80b0f0:	d9401b17 	ldw	r5,108(sp)
  80b0f4:	d8801c17 	ldw	r2,112(sp)
  80b0f8:	29000044 	addi	r4,r5,1
  80b0fc:	d8c01d87 	ldb	r3,118(sp)
  80b100:	183e4d26 	beq	r3,zero,80aa38 <__alt_mem_onchip_mem+0xff78aa38>
  80b104:	00c00044 	movi	r3,1
  80b108:	d9401d84 	addi	r5,sp,118
  80b10c:	10c5883a 	add	r2,r2,r3
  80b110:	41400015 	stw	r5,0(r8)
  80b114:	40c00115 	stw	r3,4(r8)
  80b118:	d8801c15 	stw	r2,112(sp)
  80b11c:	d9001b15 	stw	r4,108(sp)
  80b120:	014001c4 	movi	r5,7
  80b124:	2900a90e 	bge	r5,r4,80b3cc <___vfiprintf_internal_r+0xe8c>
  80b128:	1000da1e 	bne	r2,zero,80b494 <___vfiprintf_internal_r+0xf54>
  80b12c:	7000ab1e 	bne	r14,zero,80b3dc <___vfiprintf_internal_r+0xe9c>
  80b130:	000b883a 	mov	r5,zero
  80b134:	1809883a 	mov	r4,r3
  80b138:	d811883a 	mov	r8,sp
  80b13c:	00c02004 	movi	r3,128
  80b140:	e0fe4d26 	beq	fp,r3,80aa78 <__alt_mem_onchip_mem+0xff78aa78>
  80b144:	4cf9c83a 	sub	fp,r9,r19
  80b148:	073e7b0e 	bge	zero,fp,80ab38 <__alt_mem_onchip_mem+0xff78ab38>
  80b14c:	01c00404 	movi	r7,16
  80b150:	3f01900e 	bge	r7,fp,80b794 <___vfiprintf_internal_r+0x1254>
  80b154:	00c02074 	movhi	r3,129
  80b158:	18cb5104 	addi	r3,r3,11588
  80b15c:	d8c02415 	stw	r3,144(sp)
  80b160:	034001c4 	movi	r13,7
  80b164:	00000506 	br	80b17c <___vfiprintf_internal_r+0xc3c>
  80b168:	29000084 	addi	r4,r5,2
  80b16c:	42000204 	addi	r8,r8,8
  80b170:	180b883a 	mov	r5,r3
  80b174:	e73ffc04 	addi	fp,fp,-16
  80b178:	3f000d0e 	bge	r7,fp,80b1b0 <___vfiprintf_internal_r+0xc70>
  80b17c:	10800404 	addi	r2,r2,16
  80b180:	28c00044 	addi	r3,r5,1
  80b184:	45c00015 	stw	r23,0(r8)
  80b188:	41c00115 	stw	r7,4(r8)
  80b18c:	d8801c15 	stw	r2,112(sp)
  80b190:	d8c01b15 	stw	r3,108(sp)
  80b194:	68fff40e 	bge	r13,r3,80b168 <__alt_mem_onchip_mem+0xff78b168>
  80b198:	1000101e 	bne	r2,zero,80b1dc <___vfiprintf_internal_r+0xc9c>
  80b19c:	e73ffc04 	addi	fp,fp,-16
  80b1a0:	01000044 	movi	r4,1
  80b1a4:	000b883a 	mov	r5,zero
  80b1a8:	d811883a 	mov	r8,sp
  80b1ac:	3f3ff316 	blt	r7,fp,80b17c <__alt_mem_onchip_mem+0xff78b17c>
  80b1b0:	da802417 	ldw	r10,144(sp)
  80b1b4:	1705883a 	add	r2,r2,fp
  80b1b8:	47000115 	stw	fp,4(r8)
  80b1bc:	42800015 	stw	r10,0(r8)
  80b1c0:	d8801c15 	stw	r2,112(sp)
  80b1c4:	d9001b15 	stw	r4,108(sp)
  80b1c8:	00c001c4 	movi	r3,7
  80b1cc:	19003616 	blt	r3,r4,80b2a8 <___vfiprintf_internal_r+0xd68>
  80b1d0:	42000204 	addi	r8,r8,8
  80b1d4:	21000044 	addi	r4,r4,1
  80b1d8:	003e5706 	br	80ab38 <__alt_mem_onchip_mem+0xff78ab38>
  80b1dc:	d9402117 	ldw	r5,132(sp)
  80b1e0:	d9002017 	ldw	r4,128(sp)
  80b1e4:	d9801a04 	addi	r6,sp,104
  80b1e8:	d9c02b15 	stw	r7,172(sp)
  80b1ec:	db402a15 	stw	r13,168(sp)
  80b1f0:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b1f4:	d9c02b17 	ldw	r7,172(sp)
  80b1f8:	db402a17 	ldw	r13,168(sp)
  80b1fc:	1000241e 	bne	r2,zero,80b290 <___vfiprintf_internal_r+0xd50>
  80b200:	d9401b17 	ldw	r5,108(sp)
  80b204:	d8801c17 	ldw	r2,112(sp)
  80b208:	d811883a 	mov	r8,sp
  80b20c:	29000044 	addi	r4,r5,1
  80b210:	003fd806 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b214:	d9401b17 	ldw	r5,108(sp)
  80b218:	00c02074 	movhi	r3,129
  80b21c:	18cb5504 	addi	r3,r3,11604
  80b220:	d8c02415 	stw	r3,144(sp)
  80b224:	29400044 	addi	r5,r5,1
  80b228:	d8c02417 	ldw	r3,144(sp)
  80b22c:	14c5883a 	add	r2,r2,r19
  80b230:	44c00115 	stw	r19,4(r8)
  80b234:	40c00015 	stw	r3,0(r8)
  80b238:	d8801c15 	stw	r2,112(sp)
  80b23c:	d9401b15 	stw	r5,108(sp)
  80b240:	00c001c4 	movi	r3,7
  80b244:	1940070e 	bge	r3,r5,80b264 <___vfiprintf_internal_r+0xd24>
  80b248:	103e4826 	beq	r2,zero,80ab6c <__alt_mem_onchip_mem+0xff78ab6c>
  80b24c:	d9402117 	ldw	r5,132(sp)
  80b250:	d9002017 	ldw	r4,128(sp)
  80b254:	d9801a04 	addi	r6,sp,104
  80b258:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b25c:	10000c1e 	bne	r2,zero,80b290 <___vfiprintf_internal_r+0xd50>
  80b260:	d8801c17 	ldw	r2,112(sp)
  80b264:	8c80010e 	bge	r17,r18,80b26c <___vfiprintf_internal_r+0xd2c>
  80b268:	9023883a 	mov	r17,r18
  80b26c:	da802317 	ldw	r10,140(sp)
  80b270:	5455883a 	add	r10,r10,r17
  80b274:	da802315 	stw	r10,140(sp)
  80b278:	103e4126 	beq	r2,zero,80ab80 <__alt_mem_onchip_mem+0xff78ab80>
  80b27c:	d9402117 	ldw	r5,132(sp)
  80b280:	d9002017 	ldw	r4,128(sp)
  80b284:	d9801a04 	addi	r6,sp,104
  80b288:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b28c:	103e3c26 	beq	r2,zero,80ab80 <__alt_mem_onchip_mem+0xff78ab80>
  80b290:	dd002117 	ldw	r20,132(sp)
  80b294:	a080030b 	ldhu	r2,12(r20)
  80b298:	1080100c 	andi	r2,r2,64
  80b29c:	1001231e 	bne	r2,zero,80b72c <___vfiprintf_internal_r+0x11ec>
  80b2a0:	d8802317 	ldw	r2,140(sp)
  80b2a4:	003d7b06 	br	80a894 <__alt_mem_onchip_mem+0xff78a894>
  80b2a8:	1000991e 	bne	r2,zero,80b510 <___vfiprintf_internal_r+0xfd0>
  80b2ac:	00c00044 	movi	r3,1
  80b2b0:	9805883a 	mov	r2,r19
  80b2b4:	dd400015 	stw	r21,0(sp)
  80b2b8:	dcc00115 	stw	r19,4(sp)
  80b2bc:	dcc01c15 	stw	r19,112(sp)
  80b2c0:	d8c01b15 	stw	r3,108(sp)
  80b2c4:	d811883a 	mov	r8,sp
  80b2c8:	42000204 	addi	r8,r8,8
  80b2cc:	a2c0010c 	andi	r11,r20,4
  80b2d0:	583fe426 	beq	r11,zero,80b264 <__alt_mem_onchip_mem+0xff78b264>
  80b2d4:	8ca7c83a 	sub	r19,r17,r18
  80b2d8:	04ffe20e 	bge	zero,r19,80b264 <__alt_mem_onchip_mem+0xff78b264>
  80b2dc:	01c00404 	movi	r7,16
  80b2e0:	3cffcc0e 	bge	r7,r19,80b214 <__alt_mem_onchip_mem+0xff78b214>
  80b2e4:	02802074 	movhi	r10,129
  80b2e8:	528b5504 	addi	r10,r10,11604
  80b2ec:	d9001b17 	ldw	r4,108(sp)
  80b2f0:	da802415 	stw	r10,144(sp)
  80b2f4:	382b883a 	mov	r21,r7
  80b2f8:	050001c4 	movi	r20,7
  80b2fc:	df002017 	ldw	fp,128(sp)
  80b300:	00000506 	br	80b318 <___vfiprintf_internal_r+0xdd8>
  80b304:	21400084 	addi	r5,r4,2
  80b308:	42000204 	addi	r8,r8,8
  80b30c:	1809883a 	mov	r4,r3
  80b310:	9cfffc04 	addi	r19,r19,-16
  80b314:	acffc40e 	bge	r21,r19,80b228 <__alt_mem_onchip_mem+0xff78b228>
  80b318:	10800404 	addi	r2,r2,16
  80b31c:	20c00044 	addi	r3,r4,1
  80b320:	45800015 	stw	r22,0(r8)
  80b324:	45400115 	stw	r21,4(r8)
  80b328:	d8801c15 	stw	r2,112(sp)
  80b32c:	d8c01b15 	stw	r3,108(sp)
  80b330:	a0fff40e 	bge	r20,r3,80b304 <__alt_mem_onchip_mem+0xff78b304>
  80b334:	1000041e 	bne	r2,zero,80b348 <___vfiprintf_internal_r+0xe08>
  80b338:	01400044 	movi	r5,1
  80b33c:	0009883a 	mov	r4,zero
  80b340:	d811883a 	mov	r8,sp
  80b344:	003ff206 	br	80b310 <__alt_mem_onchip_mem+0xff78b310>
  80b348:	d9402117 	ldw	r5,132(sp)
  80b34c:	d9801a04 	addi	r6,sp,104
  80b350:	e009883a 	mov	r4,fp
  80b354:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b358:	103fcd1e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b35c:	d9001b17 	ldw	r4,108(sp)
  80b360:	d8801c17 	ldw	r2,112(sp)
  80b364:	d811883a 	mov	r8,sp
  80b368:	21400044 	addi	r5,r4,1
  80b36c:	003fe806 	br	80b310 <__alt_mem_onchip_mem+0xff78b310>
  80b370:	d9402117 	ldw	r5,132(sp)
  80b374:	d9002017 	ldw	r4,128(sp)
  80b378:	d9801a04 	addi	r6,sp,104
  80b37c:	d9c02b15 	stw	r7,172(sp)
  80b380:	db402a15 	stw	r13,168(sp)
  80b384:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b388:	d9c02b17 	ldw	r7,172(sp)
  80b38c:	db402a17 	ldw	r13,168(sp)
  80b390:	103fbf1e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b394:	d9401b17 	ldw	r5,108(sp)
  80b398:	d8801c17 	ldw	r2,112(sp)
  80b39c:	d811883a 	mov	r8,sp
  80b3a0:	29800044 	addi	r6,r5,1
  80b3a4:	003dc406 	br	80aab8 <__alt_mem_onchip_mem+0xff78aab8>
  80b3a8:	1000d21e 	bne	r2,zero,80b6f4 <___vfiprintf_internal_r+0x11b4>
  80b3ac:	d8c01d87 	ldb	r3,118(sp)
  80b3b0:	18009526 	beq	r3,zero,80b608 <___vfiprintf_internal_r+0x10c8>
  80b3b4:	00800044 	movi	r2,1
  80b3b8:	d8c01d84 	addi	r3,sp,118
  80b3bc:	1009883a 	mov	r4,r2
  80b3c0:	d8c00015 	stw	r3,0(sp)
  80b3c4:	d8800115 	stw	r2,4(sp)
  80b3c8:	d811883a 	mov	r8,sp
  80b3cc:	200b883a 	mov	r5,r4
  80b3d0:	42000204 	addi	r8,r8,8
  80b3d4:	21000044 	addi	r4,r4,1
  80b3d8:	003d9706 	br	80aa38 <__alt_mem_onchip_mem+0xff78aa38>
  80b3dc:	d9001d04 	addi	r4,sp,116
  80b3e0:	00800084 	movi	r2,2
  80b3e4:	d9000015 	stw	r4,0(sp)
  80b3e8:	d8800115 	stw	r2,4(sp)
  80b3ec:	1809883a 	mov	r4,r3
  80b3f0:	d811883a 	mov	r8,sp
  80b3f4:	200b883a 	mov	r5,r4
  80b3f8:	42000204 	addi	r8,r8,8
  80b3fc:	21000044 	addi	r4,r4,1
  80b400:	003f4e06 	br	80b13c <__alt_mem_onchip_mem+0xff78b13c>
  80b404:	d8001d85 	stb	zero,118(sp)
  80b408:	48005016 	blt	r9,zero,80b54c <___vfiprintf_internal_r+0x100c>
  80b40c:	00ffdfc4 	movi	r3,-129
  80b410:	94c4b03a 	or	r2,r18,r19
  80b414:	a0e8703a 	and	r20,r20,r3
  80b418:	103d4426 	beq	r2,zero,80a92c <__alt_mem_onchip_mem+0xff78a92c>
  80b41c:	0039883a 	mov	fp,zero
  80b420:	d9002617 	ldw	r4,152(sp)
  80b424:	dd401a04 	addi	r21,sp,104
  80b428:	908003cc 	andi	r2,r18,15
  80b42c:	9806973a 	slli	r3,r19,28
  80b430:	2085883a 	add	r2,r4,r2
  80b434:	9024d13a 	srli	r18,r18,4
  80b438:	10800003 	ldbu	r2,0(r2)
  80b43c:	9826d13a 	srli	r19,r19,4
  80b440:	ad7fffc4 	addi	r21,r21,-1
  80b444:	1ca4b03a 	or	r18,r3,r18
  80b448:	a8800005 	stb	r2,0(r21)
  80b44c:	94c4b03a 	or	r2,r18,r19
  80b450:	103ff51e 	bne	r2,zero,80b428 <__alt_mem_onchip_mem+0xff78b428>
  80b454:	003e5906 	br	80adbc <__alt_mem_onchip_mem+0xff78adbc>
  80b458:	d9402117 	ldw	r5,132(sp)
  80b45c:	d9002017 	ldw	r4,128(sp)
  80b460:	d9801a04 	addi	r6,sp,104
  80b464:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b468:	103f891e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b46c:	d8801c17 	ldw	r2,112(sp)
  80b470:	d811883a 	mov	r8,sp
  80b474:	003f9506 	br	80b2cc <__alt_mem_onchip_mem+0xff78b2cc>
  80b478:	d9402117 	ldw	r5,132(sp)
  80b47c:	d9002017 	ldw	r4,128(sp)
  80b480:	d9801a04 	addi	r6,sp,104
  80b484:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b488:	103f811e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b48c:	d811883a 	mov	r8,sp
  80b490:	003ced06 	br	80a848 <__alt_mem_onchip_mem+0xff78a848>
  80b494:	d9402117 	ldw	r5,132(sp)
  80b498:	d9002017 	ldw	r4,128(sp)
  80b49c:	d9801a04 	addi	r6,sp,104
  80b4a0:	da402c15 	stw	r9,176(sp)
  80b4a4:	db802a15 	stw	r14,168(sp)
  80b4a8:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b4ac:	da402c17 	ldw	r9,176(sp)
  80b4b0:	db802a17 	ldw	r14,168(sp)
  80b4b4:	103f761e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b4b8:	d9401b17 	ldw	r5,108(sp)
  80b4bc:	d8801c17 	ldw	r2,112(sp)
  80b4c0:	d811883a 	mov	r8,sp
  80b4c4:	29000044 	addi	r4,r5,1
  80b4c8:	003d5b06 	br	80aa38 <__alt_mem_onchip_mem+0xff78aa38>
  80b4cc:	d9402117 	ldw	r5,132(sp)
  80b4d0:	d9002017 	ldw	r4,128(sp)
  80b4d4:	d9801a04 	addi	r6,sp,104
  80b4d8:	da402c15 	stw	r9,176(sp)
  80b4dc:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b4e0:	da402c17 	ldw	r9,176(sp)
  80b4e4:	103f6a1e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b4e8:	d9401b17 	ldw	r5,108(sp)
  80b4ec:	d8801c17 	ldw	r2,112(sp)
  80b4f0:	d811883a 	mov	r8,sp
  80b4f4:	29000044 	addi	r4,r5,1
  80b4f8:	003f1006 	br	80b13c <__alt_mem_onchip_mem+0xff78b13c>
  80b4fc:	1000c31e 	bne	r2,zero,80b80c <___vfiprintf_internal_r+0x12cc>
  80b500:	01000044 	movi	r4,1
  80b504:	000b883a 	mov	r5,zero
  80b508:	d811883a 	mov	r8,sp
  80b50c:	003f0d06 	br	80b144 <__alt_mem_onchip_mem+0xff78b144>
  80b510:	d9402117 	ldw	r5,132(sp)
  80b514:	d9002017 	ldw	r4,128(sp)
  80b518:	d9801a04 	addi	r6,sp,104
  80b51c:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b520:	103f5b1e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b524:	d9001b17 	ldw	r4,108(sp)
  80b528:	d8801c17 	ldw	r2,112(sp)
  80b52c:	d811883a 	mov	r8,sp
  80b530:	21000044 	addi	r4,r4,1
  80b534:	003d8006 	br	80ab38 <__alt_mem_onchip_mem+0xff78ab38>
  80b538:	01002074 	movhi	r4,129
  80b53c:	210af104 	addi	r4,r4,11204
  80b540:	d9002615 	stw	r4,152(sp)
  80b544:	d8c02215 	stw	r3,136(sp)
  80b548:	1029883a 	mov	r20,r2
  80b54c:	94c4b03a 	or	r2,r18,r19
  80b550:	103fb21e 	bne	r2,zero,80b41c <__alt_mem_onchip_mem+0xff78b41c>
  80b554:	0039883a 	mov	fp,zero
  80b558:	00800084 	movi	r2,2
  80b55c:	003e6b06 	br	80af0c <__alt_mem_onchip_mem+0xff78af0c>
  80b560:	da802217 	ldw	r10,136(sp)
  80b564:	d8001d85 	stb	zero,118(sp)
  80b568:	0027883a 	mov	r19,zero
  80b56c:	50800104 	addi	r2,r10,4
  80b570:	54800017 	ldw	r18,0(r10)
  80b574:	483e6016 	blt	r9,zero,80aef8 <__alt_mem_onchip_mem+0xff78aef8>
  80b578:	00ffdfc4 	movi	r3,-129
  80b57c:	d8802215 	stw	r2,136(sp)
  80b580:	a0e8703a 	and	r20,r20,r3
  80b584:	0039883a 	mov	fp,zero
  80b588:	903ebb26 	beq	r18,zero,80b078 <__alt_mem_onchip_mem+0xff78b078>
  80b58c:	00800244 	movi	r2,9
  80b590:	14bdee36 	bltu	r2,r18,80ad4c <__alt_mem_onchip_mem+0xff78ad4c>
  80b594:	003eba06 	br	80b080 <__alt_mem_onchip_mem+0xff78b080>
  80b598:	00800c04 	movi	r2,48
  80b59c:	d8c01d45 	stb	r3,117(sp)
  80b5a0:	d8801d05 	stb	r2,116(sp)
  80b5a4:	d8001d85 	stb	zero,118(sp)
  80b5a8:	a0c00094 	ori	r3,r20,2
  80b5ac:	4800a916 	blt	r9,zero,80b854 <___vfiprintf_internal_r+0x1314>
  80b5b0:	00bfdfc4 	movi	r2,-129
  80b5b4:	a096703a 	and	r11,r20,r2
  80b5b8:	5d000094 	ori	r20,r11,2
  80b5bc:	0039883a 	mov	fp,zero
  80b5c0:	003f9706 	br	80b420 <__alt_mem_onchip_mem+0xff78b420>
  80b5c4:	8025883a 	mov	r18,r16
  80b5c8:	003c2e06 	br	80a684 <__alt_mem_onchip_mem+0xff78a684>
  80b5cc:	00802074 	movhi	r2,129
  80b5d0:	108af104 	addi	r2,r2,11204
  80b5d4:	0039883a 	mov	fp,zero
  80b5d8:	d8802615 	stw	r2,152(sp)
  80b5dc:	003f9006 	br	80b420 <__alt_mem_onchip_mem+0xff78b420>
  80b5e0:	04a5c83a 	sub	r18,zero,r18
  80b5e4:	07000b44 	movi	fp,45
  80b5e8:	9004c03a 	cmpne	r2,r18,zero
  80b5ec:	04e7c83a 	sub	r19,zero,r19
  80b5f0:	df001d85 	stb	fp,118(sp)
  80b5f4:	98a7c83a 	sub	r19,r19,r2
  80b5f8:	48009f16 	blt	r9,zero,80b878 <___vfiprintf_internal_r+0x1338>
  80b5fc:	00bfdfc4 	movi	r2,-129
  80b600:	a0a8703a 	and	r20,r20,r2
  80b604:	003dd006 	br	80ad48 <__alt_mem_onchip_mem+0xff78ad48>
  80b608:	70004c26 	beq	r14,zero,80b73c <___vfiprintf_internal_r+0x11fc>
  80b60c:	00800084 	movi	r2,2
  80b610:	d8c01d04 	addi	r3,sp,116
  80b614:	d8c00015 	stw	r3,0(sp)
  80b618:	d8800115 	stw	r2,4(sp)
  80b61c:	01000044 	movi	r4,1
  80b620:	d811883a 	mov	r8,sp
  80b624:	003f7306 	br	80b3f4 <__alt_mem_onchip_mem+0xff78b3f4>
  80b628:	a080100c 	andi	r2,r20,64
  80b62c:	da802217 	ldw	r10,136(sp)
  80b630:	103e0626 	beq	r2,zero,80ae4c <__alt_mem_onchip_mem+0xff78ae4c>
  80b634:	5480000f 	ldh	r18,0(r10)
  80b638:	52800104 	addi	r10,r10,4
  80b63c:	da802215 	stw	r10,136(sp)
  80b640:	9027d7fa 	srai	r19,r18,31
  80b644:	9805883a 	mov	r2,r19
  80b648:	003db806 	br	80ad2c <__alt_mem_onchip_mem+0xff78ad2c>
  80b64c:	a080040c 	andi	r2,r20,16
  80b650:	1000091e 	bne	r2,zero,80b678 <___vfiprintf_internal_r+0x1138>
  80b654:	a2c0100c 	andi	r11,r20,64
  80b658:	58000726 	beq	r11,zero,80b678 <___vfiprintf_internal_r+0x1138>
  80b65c:	da802217 	ldw	r10,136(sp)
  80b660:	50800017 	ldw	r2,0(r10)
  80b664:	52800104 	addi	r10,r10,4
  80b668:	da802215 	stw	r10,136(sp)
  80b66c:	da802317 	ldw	r10,140(sp)
  80b670:	1280000d 	sth	r10,0(r2)
  80b674:	003be706 	br	80a614 <__alt_mem_onchip_mem+0xff78a614>
  80b678:	da802217 	ldw	r10,136(sp)
  80b67c:	50800017 	ldw	r2,0(r10)
  80b680:	52800104 	addi	r10,r10,4
  80b684:	da802215 	stw	r10,136(sp)
  80b688:	da802317 	ldw	r10,140(sp)
  80b68c:	12800015 	stw	r10,0(r2)
  80b690:	003be006 	br	80a614 <__alt_mem_onchip_mem+0xff78a614>
  80b694:	a080100c 	andi	r2,r20,64
  80b698:	da802217 	ldw	r10,136(sp)
  80b69c:	10003026 	beq	r2,zero,80b760 <___vfiprintf_internal_r+0x1220>
  80b6a0:	5480000b 	ldhu	r18,0(r10)
  80b6a4:	52800104 	addi	r10,r10,4
  80b6a8:	0027883a 	mov	r19,zero
  80b6ac:	da802215 	stw	r10,136(sp)
  80b6b0:	003d8006 	br	80acb4 <__alt_mem_onchip_mem+0xff78acb4>
  80b6b4:	80c00007 	ldb	r3,0(r16)
  80b6b8:	003c0006 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80b6bc:	a080100c 	andi	r2,r20,64
  80b6c0:	d8001d85 	stb	zero,118(sp)
  80b6c4:	da802217 	ldw	r10,136(sp)
  80b6c8:	1000201e 	bne	r2,zero,80b74c <___vfiprintf_internal_r+0x120c>
  80b6cc:	50800104 	addi	r2,r10,4
  80b6d0:	54800017 	ldw	r18,0(r10)
  80b6d4:	0027883a 	mov	r19,zero
  80b6d8:	483def0e 	bge	r9,zero,80ae98 <__alt_mem_onchip_mem+0xff78ae98>
  80b6dc:	94c6b03a 	or	r3,r18,r19
  80b6e0:	d8802215 	stw	r2,136(sp)
  80b6e4:	183d4e1e 	bne	r3,zero,80ac20 <__alt_mem_onchip_mem+0xff78ac20>
  80b6e8:	0039883a 	mov	fp,zero
  80b6ec:	0005883a 	mov	r2,zero
  80b6f0:	003e0606 	br	80af0c <__alt_mem_onchip_mem+0xff78af0c>
  80b6f4:	d9402117 	ldw	r5,132(sp)
  80b6f8:	d9002017 	ldw	r4,128(sp)
  80b6fc:	d9801a04 	addi	r6,sp,104
  80b700:	da402c15 	stw	r9,176(sp)
  80b704:	db802a15 	stw	r14,168(sp)
  80b708:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b70c:	da402c17 	ldw	r9,176(sp)
  80b710:	db802a17 	ldw	r14,168(sp)
  80b714:	103ede1e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b718:	d9401b17 	ldw	r5,108(sp)
  80b71c:	d8801c17 	ldw	r2,112(sp)
  80b720:	d811883a 	mov	r8,sp
  80b724:	29000044 	addi	r4,r5,1
  80b728:	003e7406 	br	80b0fc <__alt_mem_onchip_mem+0xff78b0fc>
  80b72c:	00bfffc4 	movi	r2,-1
  80b730:	003c5806 	br	80a894 <__alt_mem_onchip_mem+0xff78a894>
  80b734:	d811883a 	mov	r8,sp
  80b738:	003ee806 	br	80b2dc <__alt_mem_onchip_mem+0xff78b2dc>
  80b73c:	000b883a 	mov	r5,zero
  80b740:	01000044 	movi	r4,1
  80b744:	d811883a 	mov	r8,sp
  80b748:	003e7c06 	br	80b13c <__alt_mem_onchip_mem+0xff78b13c>
  80b74c:	50800104 	addi	r2,r10,4
  80b750:	5480000b 	ldhu	r18,0(r10)
  80b754:	0027883a 	mov	r19,zero
  80b758:	483dcf0e 	bge	r9,zero,80ae98 <__alt_mem_onchip_mem+0xff78ae98>
  80b75c:	003fdf06 	br	80b6dc <__alt_mem_onchip_mem+0xff78b6dc>
  80b760:	54800017 	ldw	r18,0(r10)
  80b764:	52800104 	addi	r10,r10,4
  80b768:	0027883a 	mov	r19,zero
  80b76c:	da802215 	stw	r10,136(sp)
  80b770:	003d5006 	br	80acb4 <__alt_mem_onchip_mem+0xff78acb4>
  80b774:	50800104 	addi	r2,r10,4
  80b778:	5480000b 	ldhu	r18,0(r10)
  80b77c:	0027883a 	mov	r19,zero
  80b780:	483f7d0e 	bge	r9,zero,80b578 <__alt_mem_onchip_mem+0xff78b578>
  80b784:	003ddc06 	br	80aef8 <__alt_mem_onchip_mem+0xff78aef8>
  80b788:	d8c02215 	stw	r3,136(sp)
  80b78c:	0039883a 	mov	fp,zero
  80b790:	003ddb06 	br	80af00 <__alt_mem_onchip_mem+0xff78af00>
  80b794:	02802074 	movhi	r10,129
  80b798:	528b5104 	addi	r10,r10,11588
  80b79c:	da802415 	stw	r10,144(sp)
  80b7a0:	003e8306 	br	80b1b0 <__alt_mem_onchip_mem+0xff78b1b0>
  80b7a4:	d8801c17 	ldw	r2,112(sp)
  80b7a8:	dd002117 	ldw	r20,132(sp)
  80b7ac:	103eb926 	beq	r2,zero,80b294 <__alt_mem_onchip_mem+0xff78b294>
  80b7b0:	d9002017 	ldw	r4,128(sp)
  80b7b4:	d9801a04 	addi	r6,sp,104
  80b7b8:	a00b883a 	mov	r5,r20
  80b7bc:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b7c0:	003eb406 	br	80b294 <__alt_mem_onchip_mem+0xff78b294>
  80b7c4:	80c00043 	ldbu	r3,1(r16)
  80b7c8:	a5000814 	ori	r20,r20,32
  80b7cc:	84000044 	addi	r16,r16,1
  80b7d0:	18c03fcc 	andi	r3,r3,255
  80b7d4:	18c0201c 	xori	r3,r3,128
  80b7d8:	18ffe004 	addi	r3,r3,-128
  80b7dc:	003bb706 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80b7e0:	a809883a 	mov	r4,r21
  80b7e4:	d8c02a15 	stw	r3,168(sp)
  80b7e8:	da002b15 	stw	r8,172(sp)
  80b7ec:	0803b6c0 	call	803b6c <strlen>
  80b7f0:	d8c02a17 	ldw	r3,168(sp)
  80b7f4:	1027883a 	mov	r19,r2
  80b7f8:	df001d83 	ldbu	fp,118(sp)
  80b7fc:	d8c02215 	stw	r3,136(sp)
  80b800:	0013883a 	mov	r9,zero
  80b804:	da002b17 	ldw	r8,172(sp)
  80b808:	003c4d06 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80b80c:	d9402117 	ldw	r5,132(sp)
  80b810:	d9002017 	ldw	r4,128(sp)
  80b814:	d9801a04 	addi	r6,sp,104
  80b818:	da402c15 	stw	r9,176(sp)
  80b81c:	080a42c0 	call	80a42c <__sprint_r.part.0>
  80b820:	da402c17 	ldw	r9,176(sp)
  80b824:	103e9a1e 	bne	r2,zero,80b290 <__alt_mem_onchip_mem+0xff78b290>
  80b828:	d9401b17 	ldw	r5,108(sp)
  80b82c:	d8801c17 	ldw	r2,112(sp)
  80b830:	d811883a 	mov	r8,sp
  80b834:	29000044 	addi	r4,r5,1
  80b838:	003e4206 	br	80b144 <__alt_mem_onchip_mem+0xff78b144>
  80b83c:	d9401b17 	ldw	r5,108(sp)
  80b840:	01002074 	movhi	r4,129
  80b844:	210b5504 	addi	r4,r4,11604
  80b848:	d9002415 	stw	r4,144(sp)
  80b84c:	29400044 	addi	r5,r5,1
  80b850:	003c6d06 	br	80aa08 <__alt_mem_onchip_mem+0xff78aa08>
  80b854:	0039883a 	mov	fp,zero
  80b858:	00800084 	movi	r2,2
  80b85c:	10803fcc 	andi	r2,r2,255
  80b860:	01000044 	movi	r4,1
  80b864:	11001e26 	beq	r2,r4,80b8e0 <___vfiprintf_internal_r+0x13a0>
  80b868:	01000084 	movi	r4,2
  80b86c:	11001e1e 	bne	r2,r4,80b8e8 <___vfiprintf_internal_r+0x13a8>
  80b870:	1829883a 	mov	r20,r3
  80b874:	003eea06 	br	80b420 <__alt_mem_onchip_mem+0xff78b420>
  80b878:	a007883a 	mov	r3,r20
  80b87c:	00800044 	movi	r2,1
  80b880:	003ff606 	br	80b85c <__alt_mem_onchip_mem+0xff78b85c>
  80b884:	00800184 	movi	r2,6
  80b888:	1240012e 	bgeu	r2,r9,80b890 <___vfiprintf_internal_r+0x1350>
  80b88c:	1013883a 	mov	r9,r2
  80b890:	4827883a 	mov	r19,r9
  80b894:	4825883a 	mov	r18,r9
  80b898:	48001516 	blt	r9,zero,80b8f0 <___vfiprintf_internal_r+0x13b0>
  80b89c:	05402074 	movhi	r21,129
  80b8a0:	d8c02215 	stw	r3,136(sp)
  80b8a4:	ad4af604 	addi	r21,r21,11224
  80b8a8:	003d1406 	br	80acfc <__alt_mem_onchip_mem+0xff78acfc>
  80b8ac:	02802074 	movhi	r10,129
  80b8b0:	528b5104 	addi	r10,r10,11588
  80b8b4:	da802415 	stw	r10,144(sp)
  80b8b8:	200d883a 	mov	r6,r4
  80b8bc:	003c9106 	br	80ab04 <__alt_mem_onchip_mem+0xff78ab04>
  80b8c0:	5021883a 	mov	r16,r10
  80b8c4:	0013883a 	mov	r9,zero
  80b8c8:	003b7d06 	br	80a6c0 <__alt_mem_onchip_mem+0xff78a6c0>
  80b8cc:	4827883a 	mov	r19,r9
  80b8d0:	df001d83 	ldbu	fp,118(sp)
  80b8d4:	d8c02215 	stw	r3,136(sp)
  80b8d8:	0013883a 	mov	r9,zero
  80b8dc:	003c1806 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80b8e0:	1829883a 	mov	r20,r3
  80b8e4:	003d1806 	br	80ad48 <__alt_mem_onchip_mem+0xff78ad48>
  80b8e8:	1829883a 	mov	r20,r3
  80b8ec:	003ccd06 	br	80ac24 <__alt_mem_onchip_mem+0xff78ac24>
  80b8f0:	0025883a 	mov	r18,zero
  80b8f4:	003fe906 	br	80b89c <__alt_mem_onchip_mem+0xff78b89c>
  80b8f8:	d8802217 	ldw	r2,136(sp)
  80b8fc:	80c00043 	ldbu	r3,1(r16)
  80b900:	5021883a 	mov	r16,r10
  80b904:	12400017 	ldw	r9,0(r2)
  80b908:	10800104 	addi	r2,r2,4
  80b90c:	d8802215 	stw	r2,136(sp)
  80b910:	483faf0e 	bge	r9,zero,80b7d0 <__alt_mem_onchip_mem+0xff78b7d0>
  80b914:	18c03fcc 	andi	r3,r3,255
  80b918:	18c0201c 	xori	r3,r3,128
  80b91c:	027fffc4 	movi	r9,-1
  80b920:	18ffe004 	addi	r3,r3,-128
  80b924:	003b6506 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80b928:	d9c01d85 	stb	r7,118(sp)
  80b92c:	003ca006 	br	80abb0 <__alt_mem_onchip_mem+0xff78abb0>
  80b930:	d9c01d85 	stb	r7,118(sp)
  80b934:	003cad06 	br	80abec <__alt_mem_onchip_mem+0xff78abec>
  80b938:	d9c01d85 	stb	r7,118(sp)
  80b93c:	003d7d06 	br	80af34 <__alt_mem_onchip_mem+0xff78af34>
  80b940:	d9c01d85 	stb	r7,118(sp)
  80b944:	003d5f06 	br	80aec4 <__alt_mem_onchip_mem+0xff78aec4>
  80b948:	a080004c 	andi	r2,r20,1
  80b94c:	0039883a 	mov	fp,zero
  80b950:	10000526 	beq	r2,zero,80b968 <___vfiprintf_internal_r+0x1428>
  80b954:	00800c04 	movi	r2,48
  80b958:	d88019c5 	stb	r2,103(sp)
  80b95c:	dcc02717 	ldw	r19,156(sp)
  80b960:	dd4019c4 	addi	r21,sp,103
  80b964:	003bf606 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80b968:	0027883a 	mov	r19,zero
  80b96c:	dd401a04 	addi	r21,sp,104
  80b970:	003bf306 	br	80a940 <__alt_mem_onchip_mem+0xff78a940>
  80b974:	d9c01d85 	stb	r7,118(sp)
  80b978:	003dc806 	br	80b09c <__alt_mem_onchip_mem+0xff78b09c>
  80b97c:	d9c01d85 	stb	r7,118(sp)
  80b980:	003d3a06 	br	80ae6c <__alt_mem_onchip_mem+0xff78ae6c>
  80b984:	d9c01d85 	stb	r7,118(sp)
  80b988:	003d2a06 	br	80ae34 <__alt_mem_onchip_mem+0xff78ae34>
  80b98c:	d9c01d85 	stb	r7,118(sp)
  80b990:	003cde06 	br	80ad0c <__alt_mem_onchip_mem+0xff78ad0c>
  80b994:	d9c01d85 	stb	r7,118(sp)
  80b998:	003cbc06 	br	80ac8c <__alt_mem_onchip_mem+0xff78ac8c>

0080b99c <__vfiprintf_internal>:
  80b99c:	00802074 	movhi	r2,129
  80b9a0:	10933e04 	addi	r2,r2,19704
  80b9a4:	300f883a 	mov	r7,r6
  80b9a8:	280d883a 	mov	r6,r5
  80b9ac:	200b883a 	mov	r5,r4
  80b9b0:	11000017 	ldw	r4,0(r2)
  80b9b4:	080a5401 	jmpi	80a540 <___vfiprintf_internal_r>

0080b9b8 <__sbprintf>:
  80b9b8:	2880030b 	ldhu	r2,12(r5)
  80b9bc:	2ac01917 	ldw	r11,100(r5)
  80b9c0:	2a80038b 	ldhu	r10,14(r5)
  80b9c4:	2a400717 	ldw	r9,28(r5)
  80b9c8:	2a000917 	ldw	r8,36(r5)
  80b9cc:	defee204 	addi	sp,sp,-1144
  80b9d0:	00c10004 	movi	r3,1024
  80b9d4:	dc011a15 	stw	r16,1128(sp)
  80b9d8:	10bfff4c 	andi	r2,r2,65533
  80b9dc:	2821883a 	mov	r16,r5
  80b9e0:	d8cb883a 	add	r5,sp,r3
  80b9e4:	dc811c15 	stw	r18,1136(sp)
  80b9e8:	dc411b15 	stw	r17,1132(sp)
  80b9ec:	dfc11d15 	stw	ra,1140(sp)
  80b9f0:	2025883a 	mov	r18,r4
  80b9f4:	d881030d 	sth	r2,1036(sp)
  80b9f8:	dac11915 	stw	r11,1124(sp)
  80b9fc:	da81038d 	sth	r10,1038(sp)
  80ba00:	da410715 	stw	r9,1052(sp)
  80ba04:	da010915 	stw	r8,1060(sp)
  80ba08:	dec10015 	stw	sp,1024(sp)
  80ba0c:	dec10415 	stw	sp,1040(sp)
  80ba10:	d8c10215 	stw	r3,1032(sp)
  80ba14:	d8c10515 	stw	r3,1044(sp)
  80ba18:	d8010615 	stw	zero,1048(sp)
  80ba1c:	080a5400 	call	80a540 <___vfiprintf_internal_r>
  80ba20:	1023883a 	mov	r17,r2
  80ba24:	10000416 	blt	r2,zero,80ba38 <__sbprintf+0x80>
  80ba28:	d9410004 	addi	r5,sp,1024
  80ba2c:	9009883a 	mov	r4,r18
  80ba30:	0807ddc0 	call	807ddc <_fflush_r>
  80ba34:	10000d1e 	bne	r2,zero,80ba6c <__sbprintf+0xb4>
  80ba38:	d881030b 	ldhu	r2,1036(sp)
  80ba3c:	1080100c 	andi	r2,r2,64
  80ba40:	10000326 	beq	r2,zero,80ba50 <__sbprintf+0x98>
  80ba44:	8080030b 	ldhu	r2,12(r16)
  80ba48:	10801014 	ori	r2,r2,64
  80ba4c:	8080030d 	sth	r2,12(r16)
  80ba50:	8805883a 	mov	r2,r17
  80ba54:	dfc11d17 	ldw	ra,1140(sp)
  80ba58:	dc811c17 	ldw	r18,1136(sp)
  80ba5c:	dc411b17 	ldw	r17,1132(sp)
  80ba60:	dc011a17 	ldw	r16,1128(sp)
  80ba64:	dec11e04 	addi	sp,sp,1144
  80ba68:	f800283a 	ret
  80ba6c:	047fffc4 	movi	r17,-1
  80ba70:	003ff106 	br	80ba38 <__alt_mem_onchip_mem+0xff78ba38>

0080ba74 <_calloc_r>:
  80ba74:	298b383a 	mul	r5,r5,r6
  80ba78:	defffe04 	addi	sp,sp,-8
  80ba7c:	dfc00115 	stw	ra,4(sp)
  80ba80:	dc000015 	stw	r16,0(sp)
  80ba84:	0802b280 	call	802b28 <_malloc_r>
  80ba88:	10002926 	beq	r2,zero,80bb30 <_calloc_r+0xbc>
  80ba8c:	11bfff17 	ldw	r6,-4(r2)
  80ba90:	1021883a 	mov	r16,r2
  80ba94:	00bfff04 	movi	r2,-4
  80ba98:	308c703a 	and	r6,r6,r2
  80ba9c:	00c00904 	movi	r3,36
  80baa0:	308d883a 	add	r6,r6,r2
  80baa4:	19801636 	bltu	r3,r6,80bb00 <_calloc_r+0x8c>
  80baa8:	008004c4 	movi	r2,19
  80baac:	11800b2e 	bgeu	r2,r6,80badc <_calloc_r+0x68>
  80bab0:	80000015 	stw	zero,0(r16)
  80bab4:	80000115 	stw	zero,4(r16)
  80bab8:	008006c4 	movi	r2,27
  80babc:	11801a2e 	bgeu	r2,r6,80bb28 <_calloc_r+0xb4>
  80bac0:	80000215 	stw	zero,8(r16)
  80bac4:	80000315 	stw	zero,12(r16)
  80bac8:	30c0151e 	bne	r6,r3,80bb20 <_calloc_r+0xac>
  80bacc:	80000415 	stw	zero,16(r16)
  80bad0:	80800604 	addi	r2,r16,24
  80bad4:	80000515 	stw	zero,20(r16)
  80bad8:	00000106 	br	80bae0 <_calloc_r+0x6c>
  80badc:	8005883a 	mov	r2,r16
  80bae0:	10000015 	stw	zero,0(r2)
  80bae4:	10000115 	stw	zero,4(r2)
  80bae8:	10000215 	stw	zero,8(r2)
  80baec:	8005883a 	mov	r2,r16
  80baf0:	dfc00117 	ldw	ra,4(sp)
  80baf4:	dc000017 	ldw	r16,0(sp)
  80baf8:	dec00204 	addi	sp,sp,8
  80bafc:	f800283a 	ret
  80bb00:	000b883a 	mov	r5,zero
  80bb04:	8009883a 	mov	r4,r16
  80bb08:	08033340 	call	803334 <memset>
  80bb0c:	8005883a 	mov	r2,r16
  80bb10:	dfc00117 	ldw	ra,4(sp)
  80bb14:	dc000017 	ldw	r16,0(sp)
  80bb18:	dec00204 	addi	sp,sp,8
  80bb1c:	f800283a 	ret
  80bb20:	80800404 	addi	r2,r16,16
  80bb24:	003fee06 	br	80bae0 <__alt_mem_onchip_mem+0xff78bae0>
  80bb28:	80800204 	addi	r2,r16,8
  80bb2c:	003fec06 	br	80bae0 <__alt_mem_onchip_mem+0xff78bae0>
  80bb30:	0005883a 	mov	r2,zero
  80bb34:	003fee06 	br	80baf0 <__alt_mem_onchip_mem+0xff78baf0>

0080bb38 <__fputwc>:
  80bb38:	defff804 	addi	sp,sp,-32
  80bb3c:	dcc00415 	stw	r19,16(sp)
  80bb40:	dc800315 	stw	r18,12(sp)
  80bb44:	dc000115 	stw	r16,4(sp)
  80bb48:	dfc00715 	stw	ra,28(sp)
  80bb4c:	dd400615 	stw	r21,24(sp)
  80bb50:	dd000515 	stw	r20,20(sp)
  80bb54:	dc400215 	stw	r17,8(sp)
  80bb58:	2027883a 	mov	r19,r4
  80bb5c:	2825883a 	mov	r18,r5
  80bb60:	3021883a 	mov	r16,r6
  80bb64:	08088e00 	call	8088e0 <__locale_mb_cur_max>
  80bb68:	00c00044 	movi	r3,1
  80bb6c:	10c03e26 	beq	r2,r3,80bc68 <__fputwc+0x130>
  80bb70:	81c01704 	addi	r7,r16,92
  80bb74:	900d883a 	mov	r6,r18
  80bb78:	d80b883a 	mov	r5,sp
  80bb7c:	9809883a 	mov	r4,r19
  80bb80:	080bd400 	call	80bd40 <_wcrtomb_r>
  80bb84:	1029883a 	mov	r20,r2
  80bb88:	00bfffc4 	movi	r2,-1
  80bb8c:	a0802026 	beq	r20,r2,80bc10 <__fputwc+0xd8>
  80bb90:	d9400003 	ldbu	r5,0(sp)
  80bb94:	a0001c26 	beq	r20,zero,80bc08 <__fputwc+0xd0>
  80bb98:	0023883a 	mov	r17,zero
  80bb9c:	05400284 	movi	r21,10
  80bba0:	00000906 	br	80bbc8 <__fputwc+0x90>
  80bba4:	80800017 	ldw	r2,0(r16)
  80bba8:	11400005 	stb	r5,0(r2)
  80bbac:	80c00017 	ldw	r3,0(r16)
  80bbb0:	18c00044 	addi	r3,r3,1
  80bbb4:	80c00015 	stw	r3,0(r16)
  80bbb8:	8c400044 	addi	r17,r17,1
  80bbbc:	dc45883a 	add	r2,sp,r17
  80bbc0:	8d00112e 	bgeu	r17,r20,80bc08 <__fputwc+0xd0>
  80bbc4:	11400003 	ldbu	r5,0(r2)
  80bbc8:	80c00217 	ldw	r3,8(r16)
  80bbcc:	18ffffc4 	addi	r3,r3,-1
  80bbd0:	80c00215 	stw	r3,8(r16)
  80bbd4:	183ff30e 	bge	r3,zero,80bba4 <__alt_mem_onchip_mem+0xff78bba4>
  80bbd8:	80800617 	ldw	r2,24(r16)
  80bbdc:	18801916 	blt	r3,r2,80bc44 <__fputwc+0x10c>
  80bbe0:	80800017 	ldw	r2,0(r16)
  80bbe4:	11400005 	stb	r5,0(r2)
  80bbe8:	80800017 	ldw	r2,0(r16)
  80bbec:	10c00003 	ldbu	r3,0(r2)
  80bbf0:	10800044 	addi	r2,r2,1
  80bbf4:	1d402326 	beq	r3,r21,80bc84 <__fputwc+0x14c>
  80bbf8:	80800015 	stw	r2,0(r16)
  80bbfc:	8c400044 	addi	r17,r17,1
  80bc00:	dc45883a 	add	r2,sp,r17
  80bc04:	8d3fef36 	bltu	r17,r20,80bbc4 <__alt_mem_onchip_mem+0xff78bbc4>
  80bc08:	9005883a 	mov	r2,r18
  80bc0c:	00000406 	br	80bc20 <__fputwc+0xe8>
  80bc10:	80c0030b 	ldhu	r3,12(r16)
  80bc14:	a005883a 	mov	r2,r20
  80bc18:	18c01014 	ori	r3,r3,64
  80bc1c:	80c0030d 	sth	r3,12(r16)
  80bc20:	dfc00717 	ldw	ra,28(sp)
  80bc24:	dd400617 	ldw	r21,24(sp)
  80bc28:	dd000517 	ldw	r20,20(sp)
  80bc2c:	dcc00417 	ldw	r19,16(sp)
  80bc30:	dc800317 	ldw	r18,12(sp)
  80bc34:	dc400217 	ldw	r17,8(sp)
  80bc38:	dc000117 	ldw	r16,4(sp)
  80bc3c:	dec00804 	addi	sp,sp,32
  80bc40:	f800283a 	ret
  80bc44:	800d883a 	mov	r6,r16
  80bc48:	29403fcc 	andi	r5,r5,255
  80bc4c:	9809883a 	mov	r4,r19
  80bc50:	0805ed40 	call	805ed4 <__swbuf_r>
  80bc54:	10bfffe0 	cmpeqi	r2,r2,-1
  80bc58:	10803fcc 	andi	r2,r2,255
  80bc5c:	103fd626 	beq	r2,zero,80bbb8 <__alt_mem_onchip_mem+0xff78bbb8>
  80bc60:	00bfffc4 	movi	r2,-1
  80bc64:	003fee06 	br	80bc20 <__alt_mem_onchip_mem+0xff78bc20>
  80bc68:	90ffffc4 	addi	r3,r18,-1
  80bc6c:	01003f84 	movi	r4,254
  80bc70:	20ffbf36 	bltu	r4,r3,80bb70 <__alt_mem_onchip_mem+0xff78bb70>
  80bc74:	900b883a 	mov	r5,r18
  80bc78:	dc800005 	stb	r18,0(sp)
  80bc7c:	1029883a 	mov	r20,r2
  80bc80:	003fc506 	br	80bb98 <__alt_mem_onchip_mem+0xff78bb98>
  80bc84:	800d883a 	mov	r6,r16
  80bc88:	a80b883a 	mov	r5,r21
  80bc8c:	9809883a 	mov	r4,r19
  80bc90:	0805ed40 	call	805ed4 <__swbuf_r>
  80bc94:	10bfffe0 	cmpeqi	r2,r2,-1
  80bc98:	003fef06 	br	80bc58 <__alt_mem_onchip_mem+0xff78bc58>

0080bc9c <_fputwc_r>:
  80bc9c:	3080030b 	ldhu	r2,12(r6)
  80bca0:	10c8000c 	andi	r3,r2,8192
  80bca4:	1800051e 	bne	r3,zero,80bcbc <_fputwc_r+0x20>
  80bca8:	30c01917 	ldw	r3,100(r6)
  80bcac:	10880014 	ori	r2,r2,8192
  80bcb0:	3080030d 	sth	r2,12(r6)
  80bcb4:	18880014 	ori	r2,r3,8192
  80bcb8:	30801915 	stw	r2,100(r6)
  80bcbc:	080bb381 	jmpi	80bb38 <__fputwc>

0080bcc0 <fputwc>:
  80bcc0:	00802074 	movhi	r2,129
  80bcc4:	defffc04 	addi	sp,sp,-16
  80bcc8:	10933e04 	addi	r2,r2,19704
  80bccc:	dc000115 	stw	r16,4(sp)
  80bcd0:	14000017 	ldw	r16,0(r2)
  80bcd4:	dc400215 	stw	r17,8(sp)
  80bcd8:	dfc00315 	stw	ra,12(sp)
  80bcdc:	2023883a 	mov	r17,r4
  80bce0:	80000226 	beq	r16,zero,80bcec <fputwc+0x2c>
  80bce4:	80800e17 	ldw	r2,56(r16)
  80bce8:	10001026 	beq	r2,zero,80bd2c <fputwc+0x6c>
  80bcec:	2880030b 	ldhu	r2,12(r5)
  80bcf0:	10c8000c 	andi	r3,r2,8192
  80bcf4:	1800051e 	bne	r3,zero,80bd0c <fputwc+0x4c>
  80bcf8:	28c01917 	ldw	r3,100(r5)
  80bcfc:	10880014 	ori	r2,r2,8192
  80bd00:	2880030d 	sth	r2,12(r5)
  80bd04:	18880014 	ori	r2,r3,8192
  80bd08:	28801915 	stw	r2,100(r5)
  80bd0c:	280d883a 	mov	r6,r5
  80bd10:	8009883a 	mov	r4,r16
  80bd14:	880b883a 	mov	r5,r17
  80bd18:	dfc00317 	ldw	ra,12(sp)
  80bd1c:	dc400217 	ldw	r17,8(sp)
  80bd20:	dc000117 	ldw	r16,4(sp)
  80bd24:	dec00404 	addi	sp,sp,16
  80bd28:	080bb381 	jmpi	80bb38 <__fputwc>
  80bd2c:	8009883a 	mov	r4,r16
  80bd30:	d9400015 	stw	r5,0(sp)
  80bd34:	0801fc00 	call	801fc0 <__sinit>
  80bd38:	d9400017 	ldw	r5,0(sp)
  80bd3c:	003feb06 	br	80bcec <__alt_mem_onchip_mem+0xff78bcec>

0080bd40 <_wcrtomb_r>:
  80bd40:	defff604 	addi	sp,sp,-40
  80bd44:	00802074 	movhi	r2,129
  80bd48:	dc800815 	stw	r18,32(sp)
  80bd4c:	dc400715 	stw	r17,28(sp)
  80bd50:	dc000615 	stw	r16,24(sp)
  80bd54:	10934204 	addi	r2,r2,19720
  80bd58:	dfc00915 	stw	ra,36(sp)
  80bd5c:	2021883a 	mov	r16,r4
  80bd60:	3823883a 	mov	r17,r7
  80bd64:	14800017 	ldw	r18,0(r2)
  80bd68:	28001426 	beq	r5,zero,80bdbc <_wcrtomb_r+0x7c>
  80bd6c:	d9400415 	stw	r5,16(sp)
  80bd70:	d9800515 	stw	r6,20(sp)
  80bd74:	08088d40 	call	8088d4 <__locale_charset>
  80bd78:	d9800517 	ldw	r6,20(sp)
  80bd7c:	d9400417 	ldw	r5,16(sp)
  80bd80:	100f883a 	mov	r7,r2
  80bd84:	dc400015 	stw	r17,0(sp)
  80bd88:	8009883a 	mov	r4,r16
  80bd8c:	903ee83a 	callr	r18
  80bd90:	00ffffc4 	movi	r3,-1
  80bd94:	10c0031e 	bne	r2,r3,80bda4 <_wcrtomb_r+0x64>
  80bd98:	88000015 	stw	zero,0(r17)
  80bd9c:	00c02284 	movi	r3,138
  80bda0:	80c00015 	stw	r3,0(r16)
  80bda4:	dfc00917 	ldw	ra,36(sp)
  80bda8:	dc800817 	ldw	r18,32(sp)
  80bdac:	dc400717 	ldw	r17,28(sp)
  80bdb0:	dc000617 	ldw	r16,24(sp)
  80bdb4:	dec00a04 	addi	sp,sp,40
  80bdb8:	f800283a 	ret
  80bdbc:	08088d40 	call	8088d4 <__locale_charset>
  80bdc0:	100f883a 	mov	r7,r2
  80bdc4:	dc400015 	stw	r17,0(sp)
  80bdc8:	000d883a 	mov	r6,zero
  80bdcc:	d9400104 	addi	r5,sp,4
  80bdd0:	8009883a 	mov	r4,r16
  80bdd4:	903ee83a 	callr	r18
  80bdd8:	003fed06 	br	80bd90 <__alt_mem_onchip_mem+0xff78bd90>

0080bddc <wcrtomb>:
  80bddc:	defff604 	addi	sp,sp,-40
  80bde0:	00802074 	movhi	r2,129
  80bde4:	dc800615 	stw	r18,24(sp)
  80bde8:	dc400515 	stw	r17,20(sp)
  80bdec:	10933e04 	addi	r2,r2,19704
  80bdf0:	dfc00915 	stw	ra,36(sp)
  80bdf4:	dd000815 	stw	r20,32(sp)
  80bdf8:	dcc00715 	stw	r19,28(sp)
  80bdfc:	dc000415 	stw	r16,16(sp)
  80be00:	3025883a 	mov	r18,r6
  80be04:	14400017 	ldw	r17,0(r2)
  80be08:	20001926 	beq	r4,zero,80be70 <wcrtomb+0x94>
  80be0c:	00802074 	movhi	r2,129
  80be10:	10934204 	addi	r2,r2,19720
  80be14:	15000017 	ldw	r20,0(r2)
  80be18:	2021883a 	mov	r16,r4
  80be1c:	2827883a 	mov	r19,r5
  80be20:	08088d40 	call	8088d4 <__locale_charset>
  80be24:	100f883a 	mov	r7,r2
  80be28:	dc800015 	stw	r18,0(sp)
  80be2c:	980d883a 	mov	r6,r19
  80be30:	800b883a 	mov	r5,r16
  80be34:	8809883a 	mov	r4,r17
  80be38:	a03ee83a 	callr	r20
  80be3c:	00ffffc4 	movi	r3,-1
  80be40:	10c0031e 	bne	r2,r3,80be50 <wcrtomb+0x74>
  80be44:	90000015 	stw	zero,0(r18)
  80be48:	00c02284 	movi	r3,138
  80be4c:	88c00015 	stw	r3,0(r17)
  80be50:	dfc00917 	ldw	ra,36(sp)
  80be54:	dd000817 	ldw	r20,32(sp)
  80be58:	dcc00717 	ldw	r19,28(sp)
  80be5c:	dc800617 	ldw	r18,24(sp)
  80be60:	dc400517 	ldw	r17,20(sp)
  80be64:	dc000417 	ldw	r16,16(sp)
  80be68:	dec00a04 	addi	sp,sp,40
  80be6c:	f800283a 	ret
  80be70:	00802074 	movhi	r2,129
  80be74:	10934204 	addi	r2,r2,19720
  80be78:	14000017 	ldw	r16,0(r2)
  80be7c:	08088d40 	call	8088d4 <__locale_charset>
  80be80:	100f883a 	mov	r7,r2
  80be84:	dc800015 	stw	r18,0(sp)
  80be88:	000d883a 	mov	r6,zero
  80be8c:	d9400104 	addi	r5,sp,4
  80be90:	8809883a 	mov	r4,r17
  80be94:	803ee83a 	callr	r16
  80be98:	003fe806 	br	80be3c <__alt_mem_onchip_mem+0xff78be3c>

0080be9c <__ascii_wctomb>:
  80be9c:	28000526 	beq	r5,zero,80beb4 <__ascii_wctomb+0x18>
  80bea0:	00803fc4 	movi	r2,255
  80bea4:	11800536 	bltu	r2,r6,80bebc <__ascii_wctomb+0x20>
  80bea8:	29800005 	stb	r6,0(r5)
  80beac:	00800044 	movi	r2,1
  80beb0:	f800283a 	ret
  80beb4:	0005883a 	mov	r2,zero
  80beb8:	f800283a 	ret
  80bebc:	00802284 	movi	r2,138
  80bec0:	20800015 	stw	r2,0(r4)
  80bec4:	00bfffc4 	movi	r2,-1
  80bec8:	f800283a 	ret

0080becc <_wctomb_r>:
  80becc:	00802074 	movhi	r2,129
  80bed0:	defff904 	addi	sp,sp,-28
  80bed4:	10934204 	addi	r2,r2,19720
  80bed8:	dfc00615 	stw	ra,24(sp)
  80bedc:	dc400515 	stw	r17,20(sp)
  80bee0:	dc000415 	stw	r16,16(sp)
  80bee4:	3823883a 	mov	r17,r7
  80bee8:	14000017 	ldw	r16,0(r2)
  80beec:	d9000115 	stw	r4,4(sp)
  80bef0:	d9400215 	stw	r5,8(sp)
  80bef4:	d9800315 	stw	r6,12(sp)
  80bef8:	08088d40 	call	8088d4 <__locale_charset>
  80befc:	d9800317 	ldw	r6,12(sp)
  80bf00:	d9400217 	ldw	r5,8(sp)
  80bf04:	d9000117 	ldw	r4,4(sp)
  80bf08:	100f883a 	mov	r7,r2
  80bf0c:	dc400015 	stw	r17,0(sp)
  80bf10:	803ee83a 	callr	r16
  80bf14:	dfc00617 	ldw	ra,24(sp)
  80bf18:	dc400517 	ldw	r17,20(sp)
  80bf1c:	dc000417 	ldw	r16,16(sp)
  80bf20:	dec00704 	addi	sp,sp,28
  80bf24:	f800283a 	ret

0080bf28 <__udivdi3>:
  80bf28:	defff504 	addi	sp,sp,-44
  80bf2c:	dcc00415 	stw	r19,16(sp)
  80bf30:	dc000115 	stw	r16,4(sp)
  80bf34:	dfc00a15 	stw	ra,40(sp)
  80bf38:	df000915 	stw	fp,36(sp)
  80bf3c:	ddc00815 	stw	r23,32(sp)
  80bf40:	dd800715 	stw	r22,28(sp)
  80bf44:	dd400615 	stw	r21,24(sp)
  80bf48:	dd000515 	stw	r20,20(sp)
  80bf4c:	dc800315 	stw	r18,12(sp)
  80bf50:	dc400215 	stw	r17,8(sp)
  80bf54:	2027883a 	mov	r19,r4
  80bf58:	2821883a 	mov	r16,r5
  80bf5c:	3800411e 	bne	r7,zero,80c064 <__udivdi3+0x13c>
  80bf60:	3023883a 	mov	r17,r6
  80bf64:	2025883a 	mov	r18,r4
  80bf68:	2980522e 	bgeu	r5,r6,80c0b4 <__udivdi3+0x18c>
  80bf6c:	00bfffd4 	movui	r2,65535
  80bf70:	282d883a 	mov	r22,r5
  80bf74:	1180a836 	bltu	r2,r6,80c218 <__udivdi3+0x2f0>
  80bf78:	00803fc4 	movi	r2,255
  80bf7c:	1185803a 	cmpltu	r2,r2,r6
  80bf80:	100490fa 	slli	r2,r2,3
  80bf84:	3086d83a 	srl	r3,r6,r2
  80bf88:	01002074 	movhi	r4,129
  80bf8c:	210aa584 	addi	r4,r4,10902
  80bf90:	20c7883a 	add	r3,r4,r3
  80bf94:	18c00003 	ldbu	r3,0(r3)
  80bf98:	1885883a 	add	r2,r3,r2
  80bf9c:	00c00804 	movi	r3,32
  80bfa0:	1887c83a 	sub	r3,r3,r2
  80bfa4:	18000526 	beq	r3,zero,80bfbc <__udivdi3+0x94>
  80bfa8:	80e0983a 	sll	r16,r16,r3
  80bfac:	9884d83a 	srl	r2,r19,r2
  80bfb0:	30e2983a 	sll	r17,r6,r3
  80bfb4:	98e4983a 	sll	r18,r19,r3
  80bfb8:	142cb03a 	or	r22,r2,r16
  80bfbc:	882ad43a 	srli	r21,r17,16
  80bfc0:	b009883a 	mov	r4,r22
  80bfc4:	8d3fffcc 	andi	r20,r17,65535
  80bfc8:	a80b883a 	mov	r5,r21
  80bfcc:	08010f80 	call	8010f8 <__umodsi3>
  80bfd0:	b009883a 	mov	r4,r22
  80bfd4:	a80b883a 	mov	r5,r21
  80bfd8:	1027883a 	mov	r19,r2
  80bfdc:	08010940 	call	801094 <__udivsi3>
  80bfe0:	102d883a 	mov	r22,r2
  80bfe4:	9826943a 	slli	r19,r19,16
  80bfe8:	9004d43a 	srli	r2,r18,16
  80bfec:	a5a1383a 	mul	r16,r20,r22
  80bff0:	14c4b03a 	or	r2,r2,r19
  80bff4:	1400052e 	bgeu	r2,r16,80c00c <__udivdi3+0xe4>
  80bff8:	1445883a 	add	r2,r2,r17
  80bffc:	b0ffffc4 	addi	r3,r22,-1
  80c000:	14400136 	bltu	r2,r17,80c008 <__udivdi3+0xe0>
  80c004:	14012336 	bltu	r2,r16,80c494 <__udivdi3+0x56c>
  80c008:	182d883a 	mov	r22,r3
  80c00c:	1421c83a 	sub	r16,r2,r16
  80c010:	a80b883a 	mov	r5,r21
  80c014:	8009883a 	mov	r4,r16
  80c018:	08010f80 	call	8010f8 <__umodsi3>
  80c01c:	1027883a 	mov	r19,r2
  80c020:	a80b883a 	mov	r5,r21
  80c024:	8009883a 	mov	r4,r16
  80c028:	08010940 	call	801094 <__udivsi3>
  80c02c:	9826943a 	slli	r19,r19,16
  80c030:	a0a9383a 	mul	r20,r20,r2
  80c034:	94bfffcc 	andi	r18,r18,65535
  80c038:	94e4b03a 	or	r18,r18,r19
  80c03c:	9500052e 	bgeu	r18,r20,80c054 <__udivdi3+0x12c>
  80c040:	8ca5883a 	add	r18,r17,r18
  80c044:	10ffffc4 	addi	r3,r2,-1
  80c048:	9440f136 	bltu	r18,r17,80c410 <__udivdi3+0x4e8>
  80c04c:	9500f02e 	bgeu	r18,r20,80c410 <__udivdi3+0x4e8>
  80c050:	10bfff84 	addi	r2,r2,-2
  80c054:	b00c943a 	slli	r6,r22,16
  80c058:	0007883a 	mov	r3,zero
  80c05c:	3084b03a 	or	r2,r6,r2
  80c060:	00005906 	br	80c1c8 <__udivdi3+0x2a0>
  80c064:	29c05636 	bltu	r5,r7,80c1c0 <__udivdi3+0x298>
  80c068:	00bfffd4 	movui	r2,65535
  80c06c:	11c0622e 	bgeu	r2,r7,80c1f8 <__udivdi3+0x2d0>
  80c070:	00804034 	movhi	r2,256
  80c074:	10bfffc4 	addi	r2,r2,-1
  80c078:	11c0ee36 	bltu	r2,r7,80c434 <__udivdi3+0x50c>
  80c07c:	00800404 	movi	r2,16
  80c080:	3886d83a 	srl	r3,r7,r2
  80c084:	01002074 	movhi	r4,129
  80c088:	210aa584 	addi	r4,r4,10902
  80c08c:	20c7883a 	add	r3,r4,r3
  80c090:	18c00003 	ldbu	r3,0(r3)
  80c094:	05400804 	movi	r21,32
  80c098:	1885883a 	add	r2,r3,r2
  80c09c:	a8abc83a 	sub	r21,r21,r2
  80c0a0:	a800621e 	bne	r21,zero,80c22c <__udivdi3+0x304>
  80c0a4:	3c00e936 	bltu	r7,r16,80c44c <__udivdi3+0x524>
  80c0a8:	9985403a 	cmpgeu	r2,r19,r6
  80c0ac:	0007883a 	mov	r3,zero
  80c0b0:	00004506 	br	80c1c8 <__udivdi3+0x2a0>
  80c0b4:	3000041e 	bne	r6,zero,80c0c8 <__udivdi3+0x1a0>
  80c0b8:	000b883a 	mov	r5,zero
  80c0bc:	01000044 	movi	r4,1
  80c0c0:	08010940 	call	801094 <__udivsi3>
  80c0c4:	1023883a 	mov	r17,r2
  80c0c8:	00bfffd4 	movui	r2,65535
  80c0cc:	14404e2e 	bgeu	r2,r17,80c208 <__udivdi3+0x2e0>
  80c0d0:	00804034 	movhi	r2,256
  80c0d4:	10bfffc4 	addi	r2,r2,-1
  80c0d8:	1440d836 	bltu	r2,r17,80c43c <__udivdi3+0x514>
  80c0dc:	00800404 	movi	r2,16
  80c0e0:	8886d83a 	srl	r3,r17,r2
  80c0e4:	01002074 	movhi	r4,129
  80c0e8:	210aa584 	addi	r4,r4,10902
  80c0ec:	20c7883a 	add	r3,r4,r3
  80c0f0:	18c00003 	ldbu	r3,0(r3)
  80c0f4:	1885883a 	add	r2,r3,r2
  80c0f8:	00c00804 	movi	r3,32
  80c0fc:	1887c83a 	sub	r3,r3,r2
  80c100:	18008f1e 	bne	r3,zero,80c340 <__udivdi3+0x418>
  80c104:	882ad43a 	srli	r21,r17,16
  80c108:	8461c83a 	sub	r16,r16,r17
  80c10c:	8d3fffcc 	andi	r20,r17,65535
  80c110:	00c00044 	movi	r3,1
  80c114:	8009883a 	mov	r4,r16
  80c118:	a80b883a 	mov	r5,r21
  80c11c:	d8c00015 	stw	r3,0(sp)
  80c120:	08010f80 	call	8010f8 <__umodsi3>
  80c124:	8009883a 	mov	r4,r16
  80c128:	a80b883a 	mov	r5,r21
  80c12c:	1027883a 	mov	r19,r2
  80c130:	08010940 	call	801094 <__udivsi3>
  80c134:	9826943a 	slli	r19,r19,16
  80c138:	9008d43a 	srli	r4,r18,16
  80c13c:	1521383a 	mul	r16,r2,r20
  80c140:	102d883a 	mov	r22,r2
  80c144:	24c8b03a 	or	r4,r4,r19
  80c148:	d8c00017 	ldw	r3,0(sp)
  80c14c:	2400052e 	bgeu	r4,r16,80c164 <__udivdi3+0x23c>
  80c150:	2449883a 	add	r4,r4,r17
  80c154:	b0bfffc4 	addi	r2,r22,-1
  80c158:	24400136 	bltu	r4,r17,80c160 <__udivdi3+0x238>
  80c15c:	2400ca36 	bltu	r4,r16,80c488 <__udivdi3+0x560>
  80c160:	102d883a 	mov	r22,r2
  80c164:	2421c83a 	sub	r16,r4,r16
  80c168:	a80b883a 	mov	r5,r21
  80c16c:	8009883a 	mov	r4,r16
  80c170:	d8c00015 	stw	r3,0(sp)
  80c174:	08010f80 	call	8010f8 <__umodsi3>
  80c178:	1027883a 	mov	r19,r2
  80c17c:	a80b883a 	mov	r5,r21
  80c180:	8009883a 	mov	r4,r16
  80c184:	08010940 	call	801094 <__udivsi3>
  80c188:	9826943a 	slli	r19,r19,16
  80c18c:	1529383a 	mul	r20,r2,r20
  80c190:	94bfffcc 	andi	r18,r18,65535
  80c194:	94e4b03a 	or	r18,r18,r19
  80c198:	d8c00017 	ldw	r3,0(sp)
  80c19c:	9500052e 	bgeu	r18,r20,80c1b4 <__udivdi3+0x28c>
  80c1a0:	8ca5883a 	add	r18,r17,r18
  80c1a4:	113fffc4 	addi	r4,r2,-1
  80c1a8:	94409736 	bltu	r18,r17,80c408 <__udivdi3+0x4e0>
  80c1ac:	9500962e 	bgeu	r18,r20,80c408 <__udivdi3+0x4e0>
  80c1b0:	10bfff84 	addi	r2,r2,-2
  80c1b4:	b00c943a 	slli	r6,r22,16
  80c1b8:	3084b03a 	or	r2,r6,r2
  80c1bc:	00000206 	br	80c1c8 <__udivdi3+0x2a0>
  80c1c0:	0007883a 	mov	r3,zero
  80c1c4:	0005883a 	mov	r2,zero
  80c1c8:	dfc00a17 	ldw	ra,40(sp)
  80c1cc:	df000917 	ldw	fp,36(sp)
  80c1d0:	ddc00817 	ldw	r23,32(sp)
  80c1d4:	dd800717 	ldw	r22,28(sp)
  80c1d8:	dd400617 	ldw	r21,24(sp)
  80c1dc:	dd000517 	ldw	r20,20(sp)
  80c1e0:	dcc00417 	ldw	r19,16(sp)
  80c1e4:	dc800317 	ldw	r18,12(sp)
  80c1e8:	dc400217 	ldw	r17,8(sp)
  80c1ec:	dc000117 	ldw	r16,4(sp)
  80c1f0:	dec00b04 	addi	sp,sp,44
  80c1f4:	f800283a 	ret
  80c1f8:	00803fc4 	movi	r2,255
  80c1fc:	11c5803a 	cmpltu	r2,r2,r7
  80c200:	100490fa 	slli	r2,r2,3
  80c204:	003f9e06 	br	80c080 <__alt_mem_onchip_mem+0xff78c080>
  80c208:	00803fc4 	movi	r2,255
  80c20c:	1445803a 	cmpltu	r2,r2,r17
  80c210:	100490fa 	slli	r2,r2,3
  80c214:	003fb206 	br	80c0e0 <__alt_mem_onchip_mem+0xff78c0e0>
  80c218:	00804034 	movhi	r2,256
  80c21c:	10bfffc4 	addi	r2,r2,-1
  80c220:	11808836 	bltu	r2,r6,80c444 <__udivdi3+0x51c>
  80c224:	00800404 	movi	r2,16
  80c228:	003f5606 	br	80bf84 <__alt_mem_onchip_mem+0xff78bf84>
  80c22c:	30aed83a 	srl	r23,r6,r2
  80c230:	3d4e983a 	sll	r7,r7,r21
  80c234:	80acd83a 	srl	r22,r16,r2
  80c238:	9884d83a 	srl	r2,r19,r2
  80c23c:	3deeb03a 	or	r23,r7,r23
  80c240:	b824d43a 	srli	r18,r23,16
  80c244:	8560983a 	sll	r16,r16,r21
  80c248:	b009883a 	mov	r4,r22
  80c24c:	900b883a 	mov	r5,r18
  80c250:	3568983a 	sll	r20,r6,r21
  80c254:	1420b03a 	or	r16,r2,r16
  80c258:	08010f80 	call	8010f8 <__umodsi3>
  80c25c:	b009883a 	mov	r4,r22
  80c260:	900b883a 	mov	r5,r18
  80c264:	1023883a 	mov	r17,r2
  80c268:	08010940 	call	801094 <__udivsi3>
  80c26c:	8808943a 	slli	r4,r17,16
  80c270:	bf3fffcc 	andi	fp,r23,65535
  80c274:	8006d43a 	srli	r3,r16,16
  80c278:	e0a3383a 	mul	r17,fp,r2
  80c27c:	100d883a 	mov	r6,r2
  80c280:	1906b03a 	or	r3,r3,r4
  80c284:	1c40042e 	bgeu	r3,r17,80c298 <__udivdi3+0x370>
  80c288:	1dc7883a 	add	r3,r3,r23
  80c28c:	10bfffc4 	addi	r2,r2,-1
  80c290:	1dc0752e 	bgeu	r3,r23,80c468 <__udivdi3+0x540>
  80c294:	100d883a 	mov	r6,r2
  80c298:	1c63c83a 	sub	r17,r3,r17
  80c29c:	900b883a 	mov	r5,r18
  80c2a0:	8809883a 	mov	r4,r17
  80c2a4:	d9800015 	stw	r6,0(sp)
  80c2a8:	08010f80 	call	8010f8 <__umodsi3>
  80c2ac:	102d883a 	mov	r22,r2
  80c2b0:	8809883a 	mov	r4,r17
  80c2b4:	900b883a 	mov	r5,r18
  80c2b8:	08010940 	call	801094 <__udivsi3>
  80c2bc:	b02c943a 	slli	r22,r22,16
  80c2c0:	e089383a 	mul	r4,fp,r2
  80c2c4:	843fffcc 	andi	r16,r16,65535
  80c2c8:	85a0b03a 	or	r16,r16,r22
  80c2cc:	d9800017 	ldw	r6,0(sp)
  80c2d0:	8100042e 	bgeu	r16,r4,80c2e4 <__udivdi3+0x3bc>
  80c2d4:	85e1883a 	add	r16,r16,r23
  80c2d8:	10ffffc4 	addi	r3,r2,-1
  80c2dc:	85c05e2e 	bgeu	r16,r23,80c458 <__udivdi3+0x530>
  80c2e0:	1805883a 	mov	r2,r3
  80c2e4:	300c943a 	slli	r6,r6,16
  80c2e8:	a17fffcc 	andi	r5,r20,65535
  80c2ec:	a028d43a 	srli	r20,r20,16
  80c2f0:	3084b03a 	or	r2,r6,r2
  80c2f4:	10ffffcc 	andi	r3,r2,65535
  80c2f8:	100cd43a 	srli	r6,r2,16
  80c2fc:	194f383a 	mul	r7,r3,r5
  80c300:	1d07383a 	mul	r3,r3,r20
  80c304:	314b383a 	mul	r5,r6,r5
  80c308:	3810d43a 	srli	r8,r7,16
  80c30c:	8121c83a 	sub	r16,r16,r4
  80c310:	1947883a 	add	r3,r3,r5
  80c314:	40c7883a 	add	r3,r8,r3
  80c318:	350d383a 	mul	r6,r6,r20
  80c31c:	1940022e 	bgeu	r3,r5,80c328 <__udivdi3+0x400>
  80c320:	01000074 	movhi	r4,1
  80c324:	310d883a 	add	r6,r6,r4
  80c328:	1828d43a 	srli	r20,r3,16
  80c32c:	a18d883a 	add	r6,r20,r6
  80c330:	81803e36 	bltu	r16,r6,80c42c <__udivdi3+0x504>
  80c334:	81803826 	beq	r16,r6,80c418 <__udivdi3+0x4f0>
  80c338:	0007883a 	mov	r3,zero
  80c33c:	003fa206 	br	80c1c8 <__alt_mem_onchip_mem+0xff78c1c8>
  80c340:	88e2983a 	sll	r17,r17,r3
  80c344:	80a8d83a 	srl	r20,r16,r2
  80c348:	80e0983a 	sll	r16,r16,r3
  80c34c:	882ad43a 	srli	r21,r17,16
  80c350:	9884d83a 	srl	r2,r19,r2
  80c354:	a009883a 	mov	r4,r20
  80c358:	a80b883a 	mov	r5,r21
  80c35c:	142eb03a 	or	r23,r2,r16
  80c360:	98e4983a 	sll	r18,r19,r3
  80c364:	08010f80 	call	8010f8 <__umodsi3>
  80c368:	a009883a 	mov	r4,r20
  80c36c:	a80b883a 	mov	r5,r21
  80c370:	1021883a 	mov	r16,r2
  80c374:	08010940 	call	801094 <__udivsi3>
  80c378:	1039883a 	mov	fp,r2
  80c37c:	8d3fffcc 	andi	r20,r17,65535
  80c380:	8020943a 	slli	r16,r16,16
  80c384:	b804d43a 	srli	r2,r23,16
  80c388:	a72d383a 	mul	r22,r20,fp
  80c38c:	1404b03a 	or	r2,r2,r16
  80c390:	1580062e 	bgeu	r2,r22,80c3ac <__udivdi3+0x484>
  80c394:	1445883a 	add	r2,r2,r17
  80c398:	e0ffffc4 	addi	r3,fp,-1
  80c39c:	14403836 	bltu	r2,r17,80c480 <__udivdi3+0x558>
  80c3a0:	1580372e 	bgeu	r2,r22,80c480 <__udivdi3+0x558>
  80c3a4:	e73fff84 	addi	fp,fp,-2
  80c3a8:	1445883a 	add	r2,r2,r17
  80c3ac:	15adc83a 	sub	r22,r2,r22
  80c3b0:	a80b883a 	mov	r5,r21
  80c3b4:	b009883a 	mov	r4,r22
  80c3b8:	08010f80 	call	8010f8 <__umodsi3>
  80c3bc:	1027883a 	mov	r19,r2
  80c3c0:	b009883a 	mov	r4,r22
  80c3c4:	a80b883a 	mov	r5,r21
  80c3c8:	08010940 	call	801094 <__udivsi3>
  80c3cc:	9826943a 	slli	r19,r19,16
  80c3d0:	a0a1383a 	mul	r16,r20,r2
  80c3d4:	b93fffcc 	andi	r4,r23,65535
  80c3d8:	24c8b03a 	or	r4,r4,r19
  80c3dc:	2400062e 	bgeu	r4,r16,80c3f8 <__udivdi3+0x4d0>
  80c3e0:	2449883a 	add	r4,r4,r17
  80c3e4:	10ffffc4 	addi	r3,r2,-1
  80c3e8:	24402336 	bltu	r4,r17,80c478 <__udivdi3+0x550>
  80c3ec:	2400222e 	bgeu	r4,r16,80c478 <__udivdi3+0x550>
  80c3f0:	10bfff84 	addi	r2,r2,-2
  80c3f4:	2449883a 	add	r4,r4,r17
  80c3f8:	e038943a 	slli	fp,fp,16
  80c3fc:	2421c83a 	sub	r16,r4,r16
  80c400:	e086b03a 	or	r3,fp,r2
  80c404:	003f4306 	br	80c114 <__alt_mem_onchip_mem+0xff78c114>
  80c408:	2005883a 	mov	r2,r4
  80c40c:	003f6906 	br	80c1b4 <__alt_mem_onchip_mem+0xff78c1b4>
  80c410:	1805883a 	mov	r2,r3
  80c414:	003f0f06 	br	80c054 <__alt_mem_onchip_mem+0xff78c054>
  80c418:	1806943a 	slli	r3,r3,16
  80c41c:	9d66983a 	sll	r19,r19,r21
  80c420:	39ffffcc 	andi	r7,r7,65535
  80c424:	19c7883a 	add	r3,r3,r7
  80c428:	98ffc32e 	bgeu	r19,r3,80c338 <__alt_mem_onchip_mem+0xff78c338>
  80c42c:	10bfffc4 	addi	r2,r2,-1
  80c430:	003fc106 	br	80c338 <__alt_mem_onchip_mem+0xff78c338>
  80c434:	00800604 	movi	r2,24
  80c438:	003f1106 	br	80c080 <__alt_mem_onchip_mem+0xff78c080>
  80c43c:	00800604 	movi	r2,24
  80c440:	003f2706 	br	80c0e0 <__alt_mem_onchip_mem+0xff78c0e0>
  80c444:	00800604 	movi	r2,24
  80c448:	003ece06 	br	80bf84 <__alt_mem_onchip_mem+0xff78bf84>
  80c44c:	0007883a 	mov	r3,zero
  80c450:	00800044 	movi	r2,1
  80c454:	003f5c06 	br	80c1c8 <__alt_mem_onchip_mem+0xff78c1c8>
  80c458:	813fa12e 	bgeu	r16,r4,80c2e0 <__alt_mem_onchip_mem+0xff78c2e0>
  80c45c:	10bfff84 	addi	r2,r2,-2
  80c460:	85e1883a 	add	r16,r16,r23
  80c464:	003f9f06 	br	80c2e4 <__alt_mem_onchip_mem+0xff78c2e4>
  80c468:	1c7f8a2e 	bgeu	r3,r17,80c294 <__alt_mem_onchip_mem+0xff78c294>
  80c46c:	31bfff84 	addi	r6,r6,-2
  80c470:	1dc7883a 	add	r3,r3,r23
  80c474:	003f8806 	br	80c298 <__alt_mem_onchip_mem+0xff78c298>
  80c478:	1805883a 	mov	r2,r3
  80c47c:	003fde06 	br	80c3f8 <__alt_mem_onchip_mem+0xff78c3f8>
  80c480:	1839883a 	mov	fp,r3
  80c484:	003fc906 	br	80c3ac <__alt_mem_onchip_mem+0xff78c3ac>
  80c488:	b5bfff84 	addi	r22,r22,-2
  80c48c:	2449883a 	add	r4,r4,r17
  80c490:	003f3406 	br	80c164 <__alt_mem_onchip_mem+0xff78c164>
  80c494:	b5bfff84 	addi	r22,r22,-2
  80c498:	1445883a 	add	r2,r2,r17
  80c49c:	003edb06 	br	80c00c <__alt_mem_onchip_mem+0xff78c00c>

0080c4a0 <__umoddi3>:
  80c4a0:	defff404 	addi	sp,sp,-48
  80c4a4:	df000a15 	stw	fp,40(sp)
  80c4a8:	dc400315 	stw	r17,12(sp)
  80c4ac:	dc000215 	stw	r16,8(sp)
  80c4b0:	dfc00b15 	stw	ra,44(sp)
  80c4b4:	ddc00915 	stw	r23,36(sp)
  80c4b8:	dd800815 	stw	r22,32(sp)
  80c4bc:	dd400715 	stw	r21,28(sp)
  80c4c0:	dd000615 	stw	r20,24(sp)
  80c4c4:	dcc00515 	stw	r19,20(sp)
  80c4c8:	dc800415 	stw	r18,16(sp)
  80c4cc:	2021883a 	mov	r16,r4
  80c4d0:	2823883a 	mov	r17,r5
  80c4d4:	2839883a 	mov	fp,r5
  80c4d8:	38003c1e 	bne	r7,zero,80c5cc <__umoddi3+0x12c>
  80c4dc:	3027883a 	mov	r19,r6
  80c4e0:	2029883a 	mov	r20,r4
  80c4e4:	2980512e 	bgeu	r5,r6,80c62c <__umoddi3+0x18c>
  80c4e8:	00bfffd4 	movui	r2,65535
  80c4ec:	11809a36 	bltu	r2,r6,80c758 <__umoddi3+0x2b8>
  80c4f0:	01003fc4 	movi	r4,255
  80c4f4:	2189803a 	cmpltu	r4,r4,r6
  80c4f8:	200890fa 	slli	r4,r4,3
  80c4fc:	3104d83a 	srl	r2,r6,r4
  80c500:	00c02074 	movhi	r3,129
  80c504:	18caa584 	addi	r3,r3,10902
  80c508:	1885883a 	add	r2,r3,r2
  80c50c:	10c00003 	ldbu	r3,0(r2)
  80c510:	00800804 	movi	r2,32
  80c514:	1909883a 	add	r4,r3,r4
  80c518:	1125c83a 	sub	r18,r2,r4
  80c51c:	90000526 	beq	r18,zero,80c534 <__umoddi3+0x94>
  80c520:	8ca2983a 	sll	r17,r17,r18
  80c524:	8108d83a 	srl	r4,r16,r4
  80c528:	34a6983a 	sll	r19,r6,r18
  80c52c:	84a8983a 	sll	r20,r16,r18
  80c530:	2478b03a 	or	fp,r4,r17
  80c534:	982ed43a 	srli	r23,r19,16
  80c538:	e009883a 	mov	r4,fp
  80c53c:	9dbfffcc 	andi	r22,r19,65535
  80c540:	b80b883a 	mov	r5,r23
  80c544:	08010f80 	call	8010f8 <__umodsi3>
  80c548:	e009883a 	mov	r4,fp
  80c54c:	b80b883a 	mov	r5,r23
  80c550:	102b883a 	mov	r21,r2
  80c554:	08010940 	call	801094 <__udivsi3>
  80c558:	a806943a 	slli	r3,r21,16
  80c55c:	a008d43a 	srli	r4,r20,16
  80c560:	b085383a 	mul	r2,r22,r2
  80c564:	20c8b03a 	or	r4,r4,r3
  80c568:	2080032e 	bgeu	r4,r2,80c578 <__umoddi3+0xd8>
  80c56c:	24c9883a 	add	r4,r4,r19
  80c570:	24c00136 	bltu	r4,r19,80c578 <__umoddi3+0xd8>
  80c574:	20811036 	bltu	r4,r2,80c9b8 <__umoddi3+0x518>
  80c578:	20abc83a 	sub	r21,r4,r2
  80c57c:	b80b883a 	mov	r5,r23
  80c580:	a809883a 	mov	r4,r21
  80c584:	08010f80 	call	8010f8 <__umodsi3>
  80c588:	1023883a 	mov	r17,r2
  80c58c:	b80b883a 	mov	r5,r23
  80c590:	a809883a 	mov	r4,r21
  80c594:	08010940 	call	801094 <__udivsi3>
  80c598:	8822943a 	slli	r17,r17,16
  80c59c:	b085383a 	mul	r2,r22,r2
  80c5a0:	a0ffffcc 	andi	r3,r20,65535
  80c5a4:	1c46b03a 	or	r3,r3,r17
  80c5a8:	1880042e 	bgeu	r3,r2,80c5bc <__umoddi3+0x11c>
  80c5ac:	1cc7883a 	add	r3,r3,r19
  80c5b0:	1cc00236 	bltu	r3,r19,80c5bc <__umoddi3+0x11c>
  80c5b4:	1880012e 	bgeu	r3,r2,80c5bc <__umoddi3+0x11c>
  80c5b8:	1cc7883a 	add	r3,r3,r19
  80c5bc:	1885c83a 	sub	r2,r3,r2
  80c5c0:	1484d83a 	srl	r2,r2,r18
  80c5c4:	0007883a 	mov	r3,zero
  80c5c8:	00004f06 	br	80c708 <__umoddi3+0x268>
  80c5cc:	29c04c36 	bltu	r5,r7,80c700 <__umoddi3+0x260>
  80c5d0:	00bfffd4 	movui	r2,65535
  80c5d4:	11c0582e 	bgeu	r2,r7,80c738 <__umoddi3+0x298>
  80c5d8:	00804034 	movhi	r2,256
  80c5dc:	10bfffc4 	addi	r2,r2,-1
  80c5e0:	11c0e736 	bltu	r2,r7,80c980 <__umoddi3+0x4e0>
  80c5e4:	01000404 	movi	r4,16
  80c5e8:	3904d83a 	srl	r2,r7,r4
  80c5ec:	00c02074 	movhi	r3,129
  80c5f0:	18caa584 	addi	r3,r3,10902
  80c5f4:	1885883a 	add	r2,r3,r2
  80c5f8:	14c00003 	ldbu	r19,0(r2)
  80c5fc:	00c00804 	movi	r3,32
  80c600:	9927883a 	add	r19,r19,r4
  80c604:	1ce9c83a 	sub	r20,r3,r19
  80c608:	a000581e 	bne	r20,zero,80c76c <__umoddi3+0x2cc>
  80c60c:	3c400136 	bltu	r7,r17,80c614 <__umoddi3+0x174>
  80c610:	8180eb36 	bltu	r16,r6,80c9c0 <__umoddi3+0x520>
  80c614:	8185c83a 	sub	r2,r16,r6
  80c618:	89e3c83a 	sub	r17,r17,r7
  80c61c:	8089803a 	cmpltu	r4,r16,r2
  80c620:	8939c83a 	sub	fp,r17,r4
  80c624:	e007883a 	mov	r3,fp
  80c628:	00003706 	br	80c708 <__umoddi3+0x268>
  80c62c:	3000041e 	bne	r6,zero,80c640 <__umoddi3+0x1a0>
  80c630:	000b883a 	mov	r5,zero
  80c634:	01000044 	movi	r4,1
  80c638:	08010940 	call	801094 <__udivsi3>
  80c63c:	1027883a 	mov	r19,r2
  80c640:	00bfffd4 	movui	r2,65535
  80c644:	14c0402e 	bgeu	r2,r19,80c748 <__umoddi3+0x2a8>
  80c648:	00804034 	movhi	r2,256
  80c64c:	10bfffc4 	addi	r2,r2,-1
  80c650:	14c0cd36 	bltu	r2,r19,80c988 <__umoddi3+0x4e8>
  80c654:	00800404 	movi	r2,16
  80c658:	9886d83a 	srl	r3,r19,r2
  80c65c:	01002074 	movhi	r4,129
  80c660:	210aa584 	addi	r4,r4,10902
  80c664:	20c7883a 	add	r3,r4,r3
  80c668:	18c00003 	ldbu	r3,0(r3)
  80c66c:	1887883a 	add	r3,r3,r2
  80c670:	00800804 	movi	r2,32
  80c674:	10e5c83a 	sub	r18,r2,r3
  80c678:	9000901e 	bne	r18,zero,80c8bc <__umoddi3+0x41c>
  80c67c:	982cd43a 	srli	r22,r19,16
  80c680:	8ce3c83a 	sub	r17,r17,r19
  80c684:	9d7fffcc 	andi	r21,r19,65535
  80c688:	b00b883a 	mov	r5,r22
  80c68c:	8809883a 	mov	r4,r17
  80c690:	08010f80 	call	8010f8 <__umodsi3>
  80c694:	8809883a 	mov	r4,r17
  80c698:	b00b883a 	mov	r5,r22
  80c69c:	1021883a 	mov	r16,r2
  80c6a0:	08010940 	call	801094 <__udivsi3>
  80c6a4:	8006943a 	slli	r3,r16,16
  80c6a8:	a008d43a 	srli	r4,r20,16
  80c6ac:	1545383a 	mul	r2,r2,r21
  80c6b0:	20c8b03a 	or	r4,r4,r3
  80c6b4:	2080042e 	bgeu	r4,r2,80c6c8 <__umoddi3+0x228>
  80c6b8:	24c9883a 	add	r4,r4,r19
  80c6bc:	24c00236 	bltu	r4,r19,80c6c8 <__umoddi3+0x228>
  80c6c0:	2080012e 	bgeu	r4,r2,80c6c8 <__umoddi3+0x228>
  80c6c4:	24c9883a 	add	r4,r4,r19
  80c6c8:	20a1c83a 	sub	r16,r4,r2
  80c6cc:	b00b883a 	mov	r5,r22
  80c6d0:	8009883a 	mov	r4,r16
  80c6d4:	08010f80 	call	8010f8 <__umodsi3>
  80c6d8:	1023883a 	mov	r17,r2
  80c6dc:	b00b883a 	mov	r5,r22
  80c6e0:	8009883a 	mov	r4,r16
  80c6e4:	08010940 	call	801094 <__udivsi3>
  80c6e8:	8822943a 	slli	r17,r17,16
  80c6ec:	1545383a 	mul	r2,r2,r21
  80c6f0:	a53fffcc 	andi	r20,r20,65535
  80c6f4:	a446b03a 	or	r3,r20,r17
  80c6f8:	18bfb02e 	bgeu	r3,r2,80c5bc <__alt_mem_onchip_mem+0xff78c5bc>
  80c6fc:	003fab06 	br	80c5ac <__alt_mem_onchip_mem+0xff78c5ac>
  80c700:	2005883a 	mov	r2,r4
  80c704:	2807883a 	mov	r3,r5
  80c708:	dfc00b17 	ldw	ra,44(sp)
  80c70c:	df000a17 	ldw	fp,40(sp)
  80c710:	ddc00917 	ldw	r23,36(sp)
  80c714:	dd800817 	ldw	r22,32(sp)
  80c718:	dd400717 	ldw	r21,28(sp)
  80c71c:	dd000617 	ldw	r20,24(sp)
  80c720:	dcc00517 	ldw	r19,20(sp)
  80c724:	dc800417 	ldw	r18,16(sp)
  80c728:	dc400317 	ldw	r17,12(sp)
  80c72c:	dc000217 	ldw	r16,8(sp)
  80c730:	dec00c04 	addi	sp,sp,48
  80c734:	f800283a 	ret
  80c738:	04c03fc4 	movi	r19,255
  80c73c:	99c9803a 	cmpltu	r4,r19,r7
  80c740:	200890fa 	slli	r4,r4,3
  80c744:	003fa806 	br	80c5e8 <__alt_mem_onchip_mem+0xff78c5e8>
  80c748:	00803fc4 	movi	r2,255
  80c74c:	14c5803a 	cmpltu	r2,r2,r19
  80c750:	100490fa 	slli	r2,r2,3
  80c754:	003fc006 	br	80c658 <__alt_mem_onchip_mem+0xff78c658>
  80c758:	00804034 	movhi	r2,256
  80c75c:	10bfffc4 	addi	r2,r2,-1
  80c760:	11808b36 	bltu	r2,r6,80c990 <__umoddi3+0x4f0>
  80c764:	01000404 	movi	r4,16
  80c768:	003f6406 	br	80c4fc <__alt_mem_onchip_mem+0xff78c4fc>
  80c76c:	34c4d83a 	srl	r2,r6,r19
  80c770:	3d0e983a 	sll	r7,r7,r20
  80c774:	8cf8d83a 	srl	fp,r17,r19
  80c778:	8d10983a 	sll	r8,r17,r20
  80c77c:	38aab03a 	or	r21,r7,r2
  80c780:	a82cd43a 	srli	r22,r21,16
  80c784:	84e2d83a 	srl	r17,r16,r19
  80c788:	e009883a 	mov	r4,fp
  80c78c:	b00b883a 	mov	r5,r22
  80c790:	8a22b03a 	or	r17,r17,r8
  80c794:	3524983a 	sll	r18,r6,r20
  80c798:	08010f80 	call	8010f8 <__umodsi3>
  80c79c:	e009883a 	mov	r4,fp
  80c7a0:	b00b883a 	mov	r5,r22
  80c7a4:	102f883a 	mov	r23,r2
  80c7a8:	08010940 	call	801094 <__udivsi3>
  80c7ac:	100d883a 	mov	r6,r2
  80c7b0:	b808943a 	slli	r4,r23,16
  80c7b4:	aa3fffcc 	andi	r8,r21,65535
  80c7b8:	8804d43a 	srli	r2,r17,16
  80c7bc:	41af383a 	mul	r23,r8,r6
  80c7c0:	8520983a 	sll	r16,r16,r20
  80c7c4:	1104b03a 	or	r2,r2,r4
  80c7c8:	15c0042e 	bgeu	r2,r23,80c7dc <__umoddi3+0x33c>
  80c7cc:	1545883a 	add	r2,r2,r21
  80c7d0:	30ffffc4 	addi	r3,r6,-1
  80c7d4:	1540742e 	bgeu	r2,r21,80c9a8 <__umoddi3+0x508>
  80c7d8:	180d883a 	mov	r6,r3
  80c7dc:	15efc83a 	sub	r23,r2,r23
  80c7e0:	b00b883a 	mov	r5,r22
  80c7e4:	b809883a 	mov	r4,r23
  80c7e8:	d9800115 	stw	r6,4(sp)
  80c7ec:	da000015 	stw	r8,0(sp)
  80c7f0:	08010f80 	call	8010f8 <__umodsi3>
  80c7f4:	b00b883a 	mov	r5,r22
  80c7f8:	b809883a 	mov	r4,r23
  80c7fc:	1039883a 	mov	fp,r2
  80c800:	08010940 	call	801094 <__udivsi3>
  80c804:	da000017 	ldw	r8,0(sp)
  80c808:	e038943a 	slli	fp,fp,16
  80c80c:	100b883a 	mov	r5,r2
  80c810:	4089383a 	mul	r4,r8,r2
  80c814:	8a3fffcc 	andi	r8,r17,65535
  80c818:	4710b03a 	or	r8,r8,fp
  80c81c:	d9800117 	ldw	r6,4(sp)
  80c820:	4100042e 	bgeu	r8,r4,80c834 <__umoddi3+0x394>
  80c824:	4551883a 	add	r8,r8,r21
  80c828:	10bfffc4 	addi	r2,r2,-1
  80c82c:	45405a2e 	bgeu	r8,r21,80c998 <__umoddi3+0x4f8>
  80c830:	100b883a 	mov	r5,r2
  80c834:	300c943a 	slli	r6,r6,16
  80c838:	91ffffcc 	andi	r7,r18,65535
  80c83c:	9004d43a 	srli	r2,r18,16
  80c840:	314cb03a 	or	r6,r6,r5
  80c844:	317fffcc 	andi	r5,r6,65535
  80c848:	300cd43a 	srli	r6,r6,16
  80c84c:	29d3383a 	mul	r9,r5,r7
  80c850:	288b383a 	mul	r5,r5,r2
  80c854:	31cf383a 	mul	r7,r6,r7
  80c858:	4806d43a 	srli	r3,r9,16
  80c85c:	4111c83a 	sub	r8,r8,r4
  80c860:	29cb883a 	add	r5,r5,r7
  80c864:	194b883a 	add	r5,r3,r5
  80c868:	3085383a 	mul	r2,r6,r2
  80c86c:	29c0022e 	bgeu	r5,r7,80c878 <__umoddi3+0x3d8>
  80c870:	00c00074 	movhi	r3,1
  80c874:	10c5883a 	add	r2,r2,r3
  80c878:	2808d43a 	srli	r4,r5,16
  80c87c:	280a943a 	slli	r5,r5,16
  80c880:	4a7fffcc 	andi	r9,r9,65535
  80c884:	2085883a 	add	r2,r4,r2
  80c888:	2a4b883a 	add	r5,r5,r9
  80c88c:	40803636 	bltu	r8,r2,80c968 <__umoddi3+0x4c8>
  80c890:	40804d26 	beq	r8,r2,80c9c8 <__umoddi3+0x528>
  80c894:	4089c83a 	sub	r4,r8,r2
  80c898:	280f883a 	mov	r7,r5
  80c89c:	81cfc83a 	sub	r7,r16,r7
  80c8a0:	81c7803a 	cmpltu	r3,r16,r7
  80c8a4:	20c7c83a 	sub	r3,r4,r3
  80c8a8:	1cc4983a 	sll	r2,r3,r19
  80c8ac:	3d0ed83a 	srl	r7,r7,r20
  80c8b0:	1d06d83a 	srl	r3,r3,r20
  80c8b4:	11c4b03a 	or	r2,r2,r7
  80c8b8:	003f9306 	br	80c708 <__alt_mem_onchip_mem+0xff78c708>
  80c8bc:	9ca6983a 	sll	r19,r19,r18
  80c8c0:	88e8d83a 	srl	r20,r17,r3
  80c8c4:	80c4d83a 	srl	r2,r16,r3
  80c8c8:	982cd43a 	srli	r22,r19,16
  80c8cc:	8ca2983a 	sll	r17,r17,r18
  80c8d0:	a009883a 	mov	r4,r20
  80c8d4:	b00b883a 	mov	r5,r22
  80c8d8:	1478b03a 	or	fp,r2,r17
  80c8dc:	08010f80 	call	8010f8 <__umodsi3>
  80c8e0:	a009883a 	mov	r4,r20
  80c8e4:	b00b883a 	mov	r5,r22
  80c8e8:	1023883a 	mov	r17,r2
  80c8ec:	08010940 	call	801094 <__udivsi3>
  80c8f0:	9d7fffcc 	andi	r21,r19,65535
  80c8f4:	880a943a 	slli	r5,r17,16
  80c8f8:	e008d43a 	srli	r4,fp,16
  80c8fc:	a885383a 	mul	r2,r21,r2
  80c900:	84a8983a 	sll	r20,r16,r18
  80c904:	2148b03a 	or	r4,r4,r5
  80c908:	2080042e 	bgeu	r4,r2,80c91c <__umoddi3+0x47c>
  80c90c:	24c9883a 	add	r4,r4,r19
  80c910:	24c00236 	bltu	r4,r19,80c91c <__umoddi3+0x47c>
  80c914:	2080012e 	bgeu	r4,r2,80c91c <__umoddi3+0x47c>
  80c918:	24c9883a 	add	r4,r4,r19
  80c91c:	20a3c83a 	sub	r17,r4,r2
  80c920:	b00b883a 	mov	r5,r22
  80c924:	8809883a 	mov	r4,r17
  80c928:	08010f80 	call	8010f8 <__umodsi3>
  80c92c:	102f883a 	mov	r23,r2
  80c930:	8809883a 	mov	r4,r17
  80c934:	b00b883a 	mov	r5,r22
  80c938:	08010940 	call	801094 <__udivsi3>
  80c93c:	b82e943a 	slli	r23,r23,16
  80c940:	a885383a 	mul	r2,r21,r2
  80c944:	e13fffcc 	andi	r4,fp,65535
  80c948:	25c8b03a 	or	r4,r4,r23
  80c94c:	2080042e 	bgeu	r4,r2,80c960 <__umoddi3+0x4c0>
  80c950:	24c9883a 	add	r4,r4,r19
  80c954:	24c00236 	bltu	r4,r19,80c960 <__umoddi3+0x4c0>
  80c958:	2080012e 	bgeu	r4,r2,80c960 <__umoddi3+0x4c0>
  80c95c:	24c9883a 	add	r4,r4,r19
  80c960:	20a3c83a 	sub	r17,r4,r2
  80c964:	003f4806 	br	80c688 <__alt_mem_onchip_mem+0xff78c688>
  80c968:	2c8fc83a 	sub	r7,r5,r18
  80c96c:	1545c83a 	sub	r2,r2,r21
  80c970:	29cb803a 	cmpltu	r5,r5,r7
  80c974:	1145c83a 	sub	r2,r2,r5
  80c978:	4089c83a 	sub	r4,r8,r2
  80c97c:	003fc706 	br	80c89c <__alt_mem_onchip_mem+0xff78c89c>
  80c980:	01000604 	movi	r4,24
  80c984:	003f1806 	br	80c5e8 <__alt_mem_onchip_mem+0xff78c5e8>
  80c988:	00800604 	movi	r2,24
  80c98c:	003f3206 	br	80c658 <__alt_mem_onchip_mem+0xff78c658>
  80c990:	01000604 	movi	r4,24
  80c994:	003ed906 	br	80c4fc <__alt_mem_onchip_mem+0xff78c4fc>
  80c998:	413fa52e 	bgeu	r8,r4,80c830 <__alt_mem_onchip_mem+0xff78c830>
  80c99c:	297fff84 	addi	r5,r5,-2
  80c9a0:	4551883a 	add	r8,r8,r21
  80c9a4:	003fa306 	br	80c834 <__alt_mem_onchip_mem+0xff78c834>
  80c9a8:	15ff8b2e 	bgeu	r2,r23,80c7d8 <__alt_mem_onchip_mem+0xff78c7d8>
  80c9ac:	31bfff84 	addi	r6,r6,-2
  80c9b0:	1545883a 	add	r2,r2,r21
  80c9b4:	003f8906 	br	80c7dc <__alt_mem_onchip_mem+0xff78c7dc>
  80c9b8:	24c9883a 	add	r4,r4,r19
  80c9bc:	003eee06 	br	80c578 <__alt_mem_onchip_mem+0xff78c578>
  80c9c0:	8005883a 	mov	r2,r16
  80c9c4:	003f1706 	br	80c624 <__alt_mem_onchip_mem+0xff78c624>
  80c9c8:	817fe736 	bltu	r16,r5,80c968 <__alt_mem_onchip_mem+0xff78c968>
  80c9cc:	280f883a 	mov	r7,r5
  80c9d0:	0009883a 	mov	r4,zero
  80c9d4:	003fb106 	br	80c89c <__alt_mem_onchip_mem+0xff78c89c>

0080c9d8 <__adddf3>:
  80c9d8:	02c00434 	movhi	r11,16
  80c9dc:	5affffc4 	addi	r11,r11,-1
  80c9e0:	2806d7fa 	srli	r3,r5,31
  80c9e4:	2ad4703a 	and	r10,r5,r11
  80c9e8:	3ad2703a 	and	r9,r7,r11
  80c9ec:	3804d53a 	srli	r2,r7,20
  80c9f0:	3018d77a 	srli	r12,r6,29
  80c9f4:	280ad53a 	srli	r5,r5,20
  80c9f8:	501490fa 	slli	r10,r10,3
  80c9fc:	2010d77a 	srli	r8,r4,29
  80ca00:	481290fa 	slli	r9,r9,3
  80ca04:	380ed7fa 	srli	r7,r7,31
  80ca08:	defffb04 	addi	sp,sp,-20
  80ca0c:	dc800215 	stw	r18,8(sp)
  80ca10:	dc400115 	stw	r17,4(sp)
  80ca14:	dc000015 	stw	r16,0(sp)
  80ca18:	dfc00415 	stw	ra,16(sp)
  80ca1c:	dcc00315 	stw	r19,12(sp)
  80ca20:	1c803fcc 	andi	r18,r3,255
  80ca24:	2c01ffcc 	andi	r16,r5,2047
  80ca28:	5210b03a 	or	r8,r10,r8
  80ca2c:	202290fa 	slli	r17,r4,3
  80ca30:	1081ffcc 	andi	r2,r2,2047
  80ca34:	4b12b03a 	or	r9,r9,r12
  80ca38:	300c90fa 	slli	r6,r6,3
  80ca3c:	91c07526 	beq	r18,r7,80cc14 <__adddf3+0x23c>
  80ca40:	8087c83a 	sub	r3,r16,r2
  80ca44:	00c0ab0e 	bge	zero,r3,80ccf4 <__adddf3+0x31c>
  80ca48:	10002a1e 	bne	r2,zero,80caf4 <__adddf3+0x11c>
  80ca4c:	4984b03a 	or	r2,r9,r6
  80ca50:	1000961e 	bne	r2,zero,80ccac <__adddf3+0x2d4>
  80ca54:	888001cc 	andi	r2,r17,7
  80ca58:	10000726 	beq	r2,zero,80ca78 <__adddf3+0xa0>
  80ca5c:	888003cc 	andi	r2,r17,15
  80ca60:	00c00104 	movi	r3,4
  80ca64:	10c00426 	beq	r2,r3,80ca78 <__adddf3+0xa0>
  80ca68:	88c7883a 	add	r3,r17,r3
  80ca6c:	1c63803a 	cmpltu	r17,r3,r17
  80ca70:	4451883a 	add	r8,r8,r17
  80ca74:	1823883a 	mov	r17,r3
  80ca78:	4080202c 	andhi	r2,r8,128
  80ca7c:	10005926 	beq	r2,zero,80cbe4 <__adddf3+0x20c>
  80ca80:	84000044 	addi	r16,r16,1
  80ca84:	0081ffc4 	movi	r2,2047
  80ca88:	8080ba26 	beq	r16,r2,80cd74 <__adddf3+0x39c>
  80ca8c:	00bfe034 	movhi	r2,65408
  80ca90:	10bfffc4 	addi	r2,r2,-1
  80ca94:	4090703a 	and	r8,r8,r2
  80ca98:	4004977a 	slli	r2,r8,29
  80ca9c:	4010927a 	slli	r8,r8,9
  80caa0:	8822d0fa 	srli	r17,r17,3
  80caa4:	8401ffcc 	andi	r16,r16,2047
  80caa8:	4010d33a 	srli	r8,r8,12
  80caac:	9007883a 	mov	r3,r18
  80cab0:	1444b03a 	or	r2,r2,r17
  80cab4:	8401ffcc 	andi	r16,r16,2047
  80cab8:	8020953a 	slli	r16,r16,20
  80cabc:	18c03fcc 	andi	r3,r3,255
  80cac0:	01000434 	movhi	r4,16
  80cac4:	213fffc4 	addi	r4,r4,-1
  80cac8:	180697fa 	slli	r3,r3,31
  80cacc:	4110703a 	and	r8,r8,r4
  80cad0:	4410b03a 	or	r8,r8,r16
  80cad4:	40c6b03a 	or	r3,r8,r3
  80cad8:	dfc00417 	ldw	ra,16(sp)
  80cadc:	dcc00317 	ldw	r19,12(sp)
  80cae0:	dc800217 	ldw	r18,8(sp)
  80cae4:	dc400117 	ldw	r17,4(sp)
  80cae8:	dc000017 	ldw	r16,0(sp)
  80caec:	dec00504 	addi	sp,sp,20
  80caf0:	f800283a 	ret
  80caf4:	0081ffc4 	movi	r2,2047
  80caf8:	80bfd626 	beq	r16,r2,80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cafc:	4a402034 	orhi	r9,r9,128
  80cb00:	00800e04 	movi	r2,56
  80cb04:	10c09f16 	blt	r2,r3,80cd84 <__adddf3+0x3ac>
  80cb08:	008007c4 	movi	r2,31
  80cb0c:	10c0c216 	blt	r2,r3,80ce18 <__adddf3+0x440>
  80cb10:	00800804 	movi	r2,32
  80cb14:	10c5c83a 	sub	r2,r2,r3
  80cb18:	488a983a 	sll	r5,r9,r2
  80cb1c:	30c8d83a 	srl	r4,r6,r3
  80cb20:	3084983a 	sll	r2,r6,r2
  80cb24:	48c6d83a 	srl	r3,r9,r3
  80cb28:	290cb03a 	or	r6,r5,r4
  80cb2c:	1004c03a 	cmpne	r2,r2,zero
  80cb30:	308cb03a 	or	r6,r6,r2
  80cb34:	898dc83a 	sub	r6,r17,r6
  80cb38:	89a3803a 	cmpltu	r17,r17,r6
  80cb3c:	40d1c83a 	sub	r8,r8,r3
  80cb40:	4451c83a 	sub	r8,r8,r17
  80cb44:	3023883a 	mov	r17,r6
  80cb48:	4080202c 	andhi	r2,r8,128
  80cb4c:	10002326 	beq	r2,zero,80cbdc <__adddf3+0x204>
  80cb50:	04c02034 	movhi	r19,128
  80cb54:	9cffffc4 	addi	r19,r19,-1
  80cb58:	44e6703a 	and	r19,r8,r19
  80cb5c:	98007626 	beq	r19,zero,80cd38 <__adddf3+0x360>
  80cb60:	9809883a 	mov	r4,r19
  80cb64:	0801b140 	call	801b14 <__clzsi2>
  80cb68:	10fffe04 	addi	r3,r2,-8
  80cb6c:	010007c4 	movi	r4,31
  80cb70:	20c07716 	blt	r4,r3,80cd50 <__adddf3+0x378>
  80cb74:	00800804 	movi	r2,32
  80cb78:	10c5c83a 	sub	r2,r2,r3
  80cb7c:	8884d83a 	srl	r2,r17,r2
  80cb80:	98d0983a 	sll	r8,r19,r3
  80cb84:	88e2983a 	sll	r17,r17,r3
  80cb88:	1204b03a 	or	r2,r2,r8
  80cb8c:	1c007416 	blt	r3,r16,80cd60 <__adddf3+0x388>
  80cb90:	1c21c83a 	sub	r16,r3,r16
  80cb94:	82000044 	addi	r8,r16,1
  80cb98:	00c007c4 	movi	r3,31
  80cb9c:	1a009116 	blt	r3,r8,80cde4 <__adddf3+0x40c>
  80cba0:	00c00804 	movi	r3,32
  80cba4:	1a07c83a 	sub	r3,r3,r8
  80cba8:	8a08d83a 	srl	r4,r17,r8
  80cbac:	88e2983a 	sll	r17,r17,r3
  80cbb0:	10c6983a 	sll	r3,r2,r3
  80cbb4:	1210d83a 	srl	r8,r2,r8
  80cbb8:	8804c03a 	cmpne	r2,r17,zero
  80cbbc:	1906b03a 	or	r3,r3,r4
  80cbc0:	18a2b03a 	or	r17,r3,r2
  80cbc4:	0021883a 	mov	r16,zero
  80cbc8:	003fa206 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cbcc:	1890b03a 	or	r8,r3,r2
  80cbd0:	40017d26 	beq	r8,zero,80d1c8 <__adddf3+0x7f0>
  80cbd4:	1011883a 	mov	r8,r2
  80cbd8:	1823883a 	mov	r17,r3
  80cbdc:	888001cc 	andi	r2,r17,7
  80cbe0:	103f9e1e 	bne	r2,zero,80ca5c <__alt_mem_onchip_mem+0xff78ca5c>
  80cbe4:	4004977a 	slli	r2,r8,29
  80cbe8:	8822d0fa 	srli	r17,r17,3
  80cbec:	4010d0fa 	srli	r8,r8,3
  80cbf0:	9007883a 	mov	r3,r18
  80cbf4:	1444b03a 	or	r2,r2,r17
  80cbf8:	0101ffc4 	movi	r4,2047
  80cbfc:	81002426 	beq	r16,r4,80cc90 <__adddf3+0x2b8>
  80cc00:	8120703a 	and	r16,r16,r4
  80cc04:	01000434 	movhi	r4,16
  80cc08:	213fffc4 	addi	r4,r4,-1
  80cc0c:	4110703a 	and	r8,r8,r4
  80cc10:	003fa806 	br	80cab4 <__alt_mem_onchip_mem+0xff78cab4>
  80cc14:	8089c83a 	sub	r4,r16,r2
  80cc18:	01005e0e 	bge	zero,r4,80cd94 <__adddf3+0x3bc>
  80cc1c:	10002b26 	beq	r2,zero,80cccc <__adddf3+0x2f4>
  80cc20:	0081ffc4 	movi	r2,2047
  80cc24:	80bf8b26 	beq	r16,r2,80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cc28:	4a402034 	orhi	r9,r9,128
  80cc2c:	00800e04 	movi	r2,56
  80cc30:	1100a40e 	bge	r2,r4,80cec4 <__adddf3+0x4ec>
  80cc34:	498cb03a 	or	r6,r9,r6
  80cc38:	300ac03a 	cmpne	r5,r6,zero
  80cc3c:	0013883a 	mov	r9,zero
  80cc40:	2c4b883a 	add	r5,r5,r17
  80cc44:	2c63803a 	cmpltu	r17,r5,r17
  80cc48:	4a11883a 	add	r8,r9,r8
  80cc4c:	8a11883a 	add	r8,r17,r8
  80cc50:	2823883a 	mov	r17,r5
  80cc54:	4080202c 	andhi	r2,r8,128
  80cc58:	103fe026 	beq	r2,zero,80cbdc <__alt_mem_onchip_mem+0xff78cbdc>
  80cc5c:	84000044 	addi	r16,r16,1
  80cc60:	0081ffc4 	movi	r2,2047
  80cc64:	8080d226 	beq	r16,r2,80cfb0 <__adddf3+0x5d8>
  80cc68:	00bfe034 	movhi	r2,65408
  80cc6c:	10bfffc4 	addi	r2,r2,-1
  80cc70:	4090703a 	and	r8,r8,r2
  80cc74:	880ad07a 	srli	r5,r17,1
  80cc78:	400897fa 	slli	r4,r8,31
  80cc7c:	88c0004c 	andi	r3,r17,1
  80cc80:	28e2b03a 	or	r17,r5,r3
  80cc84:	4010d07a 	srli	r8,r8,1
  80cc88:	2462b03a 	or	r17,r4,r17
  80cc8c:	003f7106 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cc90:	4088b03a 	or	r4,r8,r2
  80cc94:	20014526 	beq	r4,zero,80d1ac <__adddf3+0x7d4>
  80cc98:	01000434 	movhi	r4,16
  80cc9c:	42000234 	orhi	r8,r8,8
  80cca0:	213fffc4 	addi	r4,r4,-1
  80cca4:	4110703a 	and	r8,r8,r4
  80cca8:	003f8206 	br	80cab4 <__alt_mem_onchip_mem+0xff78cab4>
  80ccac:	18ffffc4 	addi	r3,r3,-1
  80ccb0:	1800491e 	bne	r3,zero,80cdd8 <__adddf3+0x400>
  80ccb4:	898bc83a 	sub	r5,r17,r6
  80ccb8:	8963803a 	cmpltu	r17,r17,r5
  80ccbc:	4251c83a 	sub	r8,r8,r9
  80ccc0:	4451c83a 	sub	r8,r8,r17
  80ccc4:	2823883a 	mov	r17,r5
  80ccc8:	003f9f06 	br	80cb48 <__alt_mem_onchip_mem+0xff78cb48>
  80cccc:	4984b03a 	or	r2,r9,r6
  80ccd0:	103f6026 	beq	r2,zero,80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80ccd4:	213fffc4 	addi	r4,r4,-1
  80ccd8:	2000931e 	bne	r4,zero,80cf28 <__adddf3+0x550>
  80ccdc:	898d883a 	add	r6,r17,r6
  80cce0:	3463803a 	cmpltu	r17,r6,r17
  80cce4:	4251883a 	add	r8,r8,r9
  80cce8:	8a11883a 	add	r8,r17,r8
  80ccec:	3023883a 	mov	r17,r6
  80ccf0:	003fd806 	br	80cc54 <__alt_mem_onchip_mem+0xff78cc54>
  80ccf4:	1800541e 	bne	r3,zero,80ce48 <__adddf3+0x470>
  80ccf8:	80800044 	addi	r2,r16,1
  80ccfc:	1081ffcc 	andi	r2,r2,2047
  80cd00:	00c00044 	movi	r3,1
  80cd04:	1880a00e 	bge	r3,r2,80cf88 <__adddf3+0x5b0>
  80cd08:	8989c83a 	sub	r4,r17,r6
  80cd0c:	8905803a 	cmpltu	r2,r17,r4
  80cd10:	4267c83a 	sub	r19,r8,r9
  80cd14:	98a7c83a 	sub	r19,r19,r2
  80cd18:	9880202c 	andhi	r2,r19,128
  80cd1c:	10006326 	beq	r2,zero,80ceac <__adddf3+0x4d4>
  80cd20:	3463c83a 	sub	r17,r6,r17
  80cd24:	4a07c83a 	sub	r3,r9,r8
  80cd28:	344d803a 	cmpltu	r6,r6,r17
  80cd2c:	19a7c83a 	sub	r19,r3,r6
  80cd30:	3825883a 	mov	r18,r7
  80cd34:	983f8a1e 	bne	r19,zero,80cb60 <__alt_mem_onchip_mem+0xff78cb60>
  80cd38:	8809883a 	mov	r4,r17
  80cd3c:	0801b140 	call	801b14 <__clzsi2>
  80cd40:	10800804 	addi	r2,r2,32
  80cd44:	10fffe04 	addi	r3,r2,-8
  80cd48:	010007c4 	movi	r4,31
  80cd4c:	20ff890e 	bge	r4,r3,80cb74 <__alt_mem_onchip_mem+0xff78cb74>
  80cd50:	10bff604 	addi	r2,r2,-40
  80cd54:	8884983a 	sll	r2,r17,r2
  80cd58:	0023883a 	mov	r17,zero
  80cd5c:	1c3f8c0e 	bge	r3,r16,80cb90 <__alt_mem_onchip_mem+0xff78cb90>
  80cd60:	023fe034 	movhi	r8,65408
  80cd64:	423fffc4 	addi	r8,r8,-1
  80cd68:	80e1c83a 	sub	r16,r16,r3
  80cd6c:	1210703a 	and	r8,r2,r8
  80cd70:	003f3806 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cd74:	9007883a 	mov	r3,r18
  80cd78:	0011883a 	mov	r8,zero
  80cd7c:	0005883a 	mov	r2,zero
  80cd80:	003f4c06 	br	80cab4 <__alt_mem_onchip_mem+0xff78cab4>
  80cd84:	498cb03a 	or	r6,r9,r6
  80cd88:	300cc03a 	cmpne	r6,r6,zero
  80cd8c:	0007883a 	mov	r3,zero
  80cd90:	003f6806 	br	80cb34 <__alt_mem_onchip_mem+0xff78cb34>
  80cd94:	20009c1e 	bne	r4,zero,80d008 <__adddf3+0x630>
  80cd98:	80800044 	addi	r2,r16,1
  80cd9c:	1141ffcc 	andi	r5,r2,2047
  80cda0:	01000044 	movi	r4,1
  80cda4:	2140670e 	bge	r4,r5,80cf44 <__adddf3+0x56c>
  80cda8:	0101ffc4 	movi	r4,2047
  80cdac:	11007f26 	beq	r2,r4,80cfac <__adddf3+0x5d4>
  80cdb0:	898d883a 	add	r6,r17,r6
  80cdb4:	4247883a 	add	r3,r8,r9
  80cdb8:	3451803a 	cmpltu	r8,r6,r17
  80cdbc:	40d1883a 	add	r8,r8,r3
  80cdc0:	402297fa 	slli	r17,r8,31
  80cdc4:	300cd07a 	srli	r6,r6,1
  80cdc8:	4010d07a 	srli	r8,r8,1
  80cdcc:	1021883a 	mov	r16,r2
  80cdd0:	89a2b03a 	or	r17,r17,r6
  80cdd4:	003f1f06 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cdd8:	0081ffc4 	movi	r2,2047
  80cddc:	80bf481e 	bne	r16,r2,80cb00 <__alt_mem_onchip_mem+0xff78cb00>
  80cde0:	003f1c06 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cde4:	843ff844 	addi	r16,r16,-31
  80cde8:	01000804 	movi	r4,32
  80cdec:	1406d83a 	srl	r3,r2,r16
  80cdf0:	41005026 	beq	r8,r4,80cf34 <__adddf3+0x55c>
  80cdf4:	01001004 	movi	r4,64
  80cdf8:	2211c83a 	sub	r8,r4,r8
  80cdfc:	1204983a 	sll	r2,r2,r8
  80ce00:	88a2b03a 	or	r17,r17,r2
  80ce04:	8822c03a 	cmpne	r17,r17,zero
  80ce08:	1c62b03a 	or	r17,r3,r17
  80ce0c:	0011883a 	mov	r8,zero
  80ce10:	0021883a 	mov	r16,zero
  80ce14:	003f7106 	br	80cbdc <__alt_mem_onchip_mem+0xff78cbdc>
  80ce18:	193ff804 	addi	r4,r3,-32
  80ce1c:	00800804 	movi	r2,32
  80ce20:	4908d83a 	srl	r4,r9,r4
  80ce24:	18804526 	beq	r3,r2,80cf3c <__adddf3+0x564>
  80ce28:	00801004 	movi	r2,64
  80ce2c:	10c5c83a 	sub	r2,r2,r3
  80ce30:	4886983a 	sll	r3,r9,r2
  80ce34:	198cb03a 	or	r6,r3,r6
  80ce38:	300cc03a 	cmpne	r6,r6,zero
  80ce3c:	218cb03a 	or	r6,r4,r6
  80ce40:	0007883a 	mov	r3,zero
  80ce44:	003f3b06 	br	80cb34 <__alt_mem_onchip_mem+0xff78cb34>
  80ce48:	80002a26 	beq	r16,zero,80cef4 <__adddf3+0x51c>
  80ce4c:	0101ffc4 	movi	r4,2047
  80ce50:	11006826 	beq	r2,r4,80cff4 <__adddf3+0x61c>
  80ce54:	00c7c83a 	sub	r3,zero,r3
  80ce58:	42002034 	orhi	r8,r8,128
  80ce5c:	01000e04 	movi	r4,56
  80ce60:	20c07c16 	blt	r4,r3,80d054 <__adddf3+0x67c>
  80ce64:	010007c4 	movi	r4,31
  80ce68:	20c0da16 	blt	r4,r3,80d1d4 <__adddf3+0x7fc>
  80ce6c:	01000804 	movi	r4,32
  80ce70:	20c9c83a 	sub	r4,r4,r3
  80ce74:	4114983a 	sll	r10,r8,r4
  80ce78:	88cad83a 	srl	r5,r17,r3
  80ce7c:	8908983a 	sll	r4,r17,r4
  80ce80:	40c6d83a 	srl	r3,r8,r3
  80ce84:	5162b03a 	or	r17,r10,r5
  80ce88:	2008c03a 	cmpne	r4,r4,zero
  80ce8c:	8922b03a 	or	r17,r17,r4
  80ce90:	3463c83a 	sub	r17,r6,r17
  80ce94:	48c7c83a 	sub	r3,r9,r3
  80ce98:	344d803a 	cmpltu	r6,r6,r17
  80ce9c:	1991c83a 	sub	r8,r3,r6
  80cea0:	1021883a 	mov	r16,r2
  80cea4:	3825883a 	mov	r18,r7
  80cea8:	003f2706 	br	80cb48 <__alt_mem_onchip_mem+0xff78cb48>
  80ceac:	24d0b03a 	or	r8,r4,r19
  80ceb0:	40001b1e 	bne	r8,zero,80cf20 <__adddf3+0x548>
  80ceb4:	0005883a 	mov	r2,zero
  80ceb8:	0007883a 	mov	r3,zero
  80cebc:	0021883a 	mov	r16,zero
  80cec0:	003f4d06 	br	80cbf8 <__alt_mem_onchip_mem+0xff78cbf8>
  80cec4:	008007c4 	movi	r2,31
  80cec8:	11003c16 	blt	r2,r4,80cfbc <__adddf3+0x5e4>
  80cecc:	00800804 	movi	r2,32
  80ced0:	1105c83a 	sub	r2,r2,r4
  80ced4:	488e983a 	sll	r7,r9,r2
  80ced8:	310ad83a 	srl	r5,r6,r4
  80cedc:	3084983a 	sll	r2,r6,r2
  80cee0:	4912d83a 	srl	r9,r9,r4
  80cee4:	394ab03a 	or	r5,r7,r5
  80cee8:	1004c03a 	cmpne	r2,r2,zero
  80ceec:	288ab03a 	or	r5,r5,r2
  80cef0:	003f5306 	br	80cc40 <__alt_mem_onchip_mem+0xff78cc40>
  80cef4:	4448b03a 	or	r4,r8,r17
  80cef8:	20003e26 	beq	r4,zero,80cff4 <__adddf3+0x61c>
  80cefc:	00c6303a 	nor	r3,zero,r3
  80cf00:	18003a1e 	bne	r3,zero,80cfec <__adddf3+0x614>
  80cf04:	3463c83a 	sub	r17,r6,r17
  80cf08:	4a07c83a 	sub	r3,r9,r8
  80cf0c:	344d803a 	cmpltu	r6,r6,r17
  80cf10:	1991c83a 	sub	r8,r3,r6
  80cf14:	1021883a 	mov	r16,r2
  80cf18:	3825883a 	mov	r18,r7
  80cf1c:	003f0a06 	br	80cb48 <__alt_mem_onchip_mem+0xff78cb48>
  80cf20:	2023883a 	mov	r17,r4
  80cf24:	003f0d06 	br	80cb5c <__alt_mem_onchip_mem+0xff78cb5c>
  80cf28:	0081ffc4 	movi	r2,2047
  80cf2c:	80bf3f1e 	bne	r16,r2,80cc2c <__alt_mem_onchip_mem+0xff78cc2c>
  80cf30:	003ec806 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cf34:	0005883a 	mov	r2,zero
  80cf38:	003fb106 	br	80ce00 <__alt_mem_onchip_mem+0xff78ce00>
  80cf3c:	0007883a 	mov	r3,zero
  80cf40:	003fbc06 	br	80ce34 <__alt_mem_onchip_mem+0xff78ce34>
  80cf44:	4444b03a 	or	r2,r8,r17
  80cf48:	8000871e 	bne	r16,zero,80d168 <__adddf3+0x790>
  80cf4c:	1000ba26 	beq	r2,zero,80d238 <__adddf3+0x860>
  80cf50:	4984b03a 	or	r2,r9,r6
  80cf54:	103ebf26 	beq	r2,zero,80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cf58:	8985883a 	add	r2,r17,r6
  80cf5c:	4247883a 	add	r3,r8,r9
  80cf60:	1451803a 	cmpltu	r8,r2,r17
  80cf64:	40d1883a 	add	r8,r8,r3
  80cf68:	40c0202c 	andhi	r3,r8,128
  80cf6c:	1023883a 	mov	r17,r2
  80cf70:	183f1a26 	beq	r3,zero,80cbdc <__alt_mem_onchip_mem+0xff78cbdc>
  80cf74:	00bfe034 	movhi	r2,65408
  80cf78:	10bfffc4 	addi	r2,r2,-1
  80cf7c:	2021883a 	mov	r16,r4
  80cf80:	4090703a 	and	r8,r8,r2
  80cf84:	003eb306 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cf88:	4444b03a 	or	r2,r8,r17
  80cf8c:	8000291e 	bne	r16,zero,80d034 <__adddf3+0x65c>
  80cf90:	10004b1e 	bne	r2,zero,80d0c0 <__adddf3+0x6e8>
  80cf94:	4990b03a 	or	r8,r9,r6
  80cf98:	40008b26 	beq	r8,zero,80d1c8 <__adddf3+0x7f0>
  80cf9c:	4811883a 	mov	r8,r9
  80cfa0:	3023883a 	mov	r17,r6
  80cfa4:	3825883a 	mov	r18,r7
  80cfa8:	003eaa06 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80cfac:	1021883a 	mov	r16,r2
  80cfb0:	0011883a 	mov	r8,zero
  80cfb4:	0005883a 	mov	r2,zero
  80cfb8:	003f0f06 	br	80cbf8 <__alt_mem_onchip_mem+0xff78cbf8>
  80cfbc:	217ff804 	addi	r5,r4,-32
  80cfc0:	00800804 	movi	r2,32
  80cfc4:	494ad83a 	srl	r5,r9,r5
  80cfc8:	20807d26 	beq	r4,r2,80d1c0 <__adddf3+0x7e8>
  80cfcc:	00801004 	movi	r2,64
  80cfd0:	1109c83a 	sub	r4,r2,r4
  80cfd4:	4912983a 	sll	r9,r9,r4
  80cfd8:	498cb03a 	or	r6,r9,r6
  80cfdc:	300cc03a 	cmpne	r6,r6,zero
  80cfe0:	298ab03a 	or	r5,r5,r6
  80cfe4:	0013883a 	mov	r9,zero
  80cfe8:	003f1506 	br	80cc40 <__alt_mem_onchip_mem+0xff78cc40>
  80cfec:	0101ffc4 	movi	r4,2047
  80cff0:	113f9a1e 	bne	r2,r4,80ce5c <__alt_mem_onchip_mem+0xff78ce5c>
  80cff4:	4811883a 	mov	r8,r9
  80cff8:	3023883a 	mov	r17,r6
  80cffc:	1021883a 	mov	r16,r2
  80d000:	3825883a 	mov	r18,r7
  80d004:	003e9306 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d008:	8000161e 	bne	r16,zero,80d064 <__adddf3+0x68c>
  80d00c:	444ab03a 	or	r5,r8,r17
  80d010:	28005126 	beq	r5,zero,80d158 <__adddf3+0x780>
  80d014:	0108303a 	nor	r4,zero,r4
  80d018:	20004d1e 	bne	r4,zero,80d150 <__adddf3+0x778>
  80d01c:	89a3883a 	add	r17,r17,r6
  80d020:	4253883a 	add	r9,r8,r9
  80d024:	898d803a 	cmpltu	r6,r17,r6
  80d028:	3251883a 	add	r8,r6,r9
  80d02c:	1021883a 	mov	r16,r2
  80d030:	003f0806 	br	80cc54 <__alt_mem_onchip_mem+0xff78cc54>
  80d034:	1000301e 	bne	r2,zero,80d0f8 <__adddf3+0x720>
  80d038:	4984b03a 	or	r2,r9,r6
  80d03c:	10007126 	beq	r2,zero,80d204 <__adddf3+0x82c>
  80d040:	4811883a 	mov	r8,r9
  80d044:	3023883a 	mov	r17,r6
  80d048:	3825883a 	mov	r18,r7
  80d04c:	0401ffc4 	movi	r16,2047
  80d050:	003e8006 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d054:	4462b03a 	or	r17,r8,r17
  80d058:	8822c03a 	cmpne	r17,r17,zero
  80d05c:	0007883a 	mov	r3,zero
  80d060:	003f8b06 	br	80ce90 <__alt_mem_onchip_mem+0xff78ce90>
  80d064:	0141ffc4 	movi	r5,2047
  80d068:	11403b26 	beq	r2,r5,80d158 <__adddf3+0x780>
  80d06c:	0109c83a 	sub	r4,zero,r4
  80d070:	42002034 	orhi	r8,r8,128
  80d074:	01400e04 	movi	r5,56
  80d078:	29006716 	blt	r5,r4,80d218 <__adddf3+0x840>
  80d07c:	014007c4 	movi	r5,31
  80d080:	29007016 	blt	r5,r4,80d244 <__adddf3+0x86c>
  80d084:	01400804 	movi	r5,32
  80d088:	290bc83a 	sub	r5,r5,r4
  80d08c:	4154983a 	sll	r10,r8,r5
  80d090:	890ed83a 	srl	r7,r17,r4
  80d094:	894a983a 	sll	r5,r17,r5
  80d098:	4108d83a 	srl	r4,r8,r4
  80d09c:	51e2b03a 	or	r17,r10,r7
  80d0a0:	280ac03a 	cmpne	r5,r5,zero
  80d0a4:	8962b03a 	or	r17,r17,r5
  80d0a8:	89a3883a 	add	r17,r17,r6
  80d0ac:	2253883a 	add	r9,r4,r9
  80d0b0:	898d803a 	cmpltu	r6,r17,r6
  80d0b4:	3251883a 	add	r8,r6,r9
  80d0b8:	1021883a 	mov	r16,r2
  80d0bc:	003ee506 	br	80cc54 <__alt_mem_onchip_mem+0xff78cc54>
  80d0c0:	4984b03a 	or	r2,r9,r6
  80d0c4:	103e6326 	beq	r2,zero,80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d0c8:	8987c83a 	sub	r3,r17,r6
  80d0cc:	88c9803a 	cmpltu	r4,r17,r3
  80d0d0:	4245c83a 	sub	r2,r8,r9
  80d0d4:	1105c83a 	sub	r2,r2,r4
  80d0d8:	1100202c 	andhi	r4,r2,128
  80d0dc:	203ebb26 	beq	r4,zero,80cbcc <__alt_mem_onchip_mem+0xff78cbcc>
  80d0e0:	3463c83a 	sub	r17,r6,r17
  80d0e4:	4a07c83a 	sub	r3,r9,r8
  80d0e8:	344d803a 	cmpltu	r6,r6,r17
  80d0ec:	1991c83a 	sub	r8,r3,r6
  80d0f0:	3825883a 	mov	r18,r7
  80d0f4:	003e5706 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d0f8:	4984b03a 	or	r2,r9,r6
  80d0fc:	10002e26 	beq	r2,zero,80d1b8 <__adddf3+0x7e0>
  80d100:	4004d0fa 	srli	r2,r8,3
  80d104:	8822d0fa 	srli	r17,r17,3
  80d108:	4010977a 	slli	r8,r8,29
  80d10c:	10c0022c 	andhi	r3,r2,8
  80d110:	4462b03a 	or	r17,r8,r17
  80d114:	18000826 	beq	r3,zero,80d138 <__adddf3+0x760>
  80d118:	4808d0fa 	srli	r4,r9,3
  80d11c:	20c0022c 	andhi	r3,r4,8
  80d120:	1800051e 	bne	r3,zero,80d138 <__adddf3+0x760>
  80d124:	300cd0fa 	srli	r6,r6,3
  80d128:	4806977a 	slli	r3,r9,29
  80d12c:	2005883a 	mov	r2,r4
  80d130:	3825883a 	mov	r18,r7
  80d134:	19a2b03a 	or	r17,r3,r6
  80d138:	8810d77a 	srli	r8,r17,29
  80d13c:	100490fa 	slli	r2,r2,3
  80d140:	882290fa 	slli	r17,r17,3
  80d144:	0401ffc4 	movi	r16,2047
  80d148:	4090b03a 	or	r8,r8,r2
  80d14c:	003e4106 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d150:	0141ffc4 	movi	r5,2047
  80d154:	117fc71e 	bne	r2,r5,80d074 <__alt_mem_onchip_mem+0xff78d074>
  80d158:	4811883a 	mov	r8,r9
  80d15c:	3023883a 	mov	r17,r6
  80d160:	1021883a 	mov	r16,r2
  80d164:	003e3b06 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d168:	10002f26 	beq	r2,zero,80d228 <__adddf3+0x850>
  80d16c:	4984b03a 	or	r2,r9,r6
  80d170:	10001126 	beq	r2,zero,80d1b8 <__adddf3+0x7e0>
  80d174:	4004d0fa 	srli	r2,r8,3
  80d178:	8822d0fa 	srli	r17,r17,3
  80d17c:	4010977a 	slli	r8,r8,29
  80d180:	10c0022c 	andhi	r3,r2,8
  80d184:	4462b03a 	or	r17,r8,r17
  80d188:	183feb26 	beq	r3,zero,80d138 <__alt_mem_onchip_mem+0xff78d138>
  80d18c:	4808d0fa 	srli	r4,r9,3
  80d190:	20c0022c 	andhi	r3,r4,8
  80d194:	183fe81e 	bne	r3,zero,80d138 <__alt_mem_onchip_mem+0xff78d138>
  80d198:	300cd0fa 	srli	r6,r6,3
  80d19c:	4806977a 	slli	r3,r9,29
  80d1a0:	2005883a 	mov	r2,r4
  80d1a4:	19a2b03a 	or	r17,r3,r6
  80d1a8:	003fe306 	br	80d138 <__alt_mem_onchip_mem+0xff78d138>
  80d1ac:	0011883a 	mov	r8,zero
  80d1b0:	0005883a 	mov	r2,zero
  80d1b4:	003e3f06 	br	80cab4 <__alt_mem_onchip_mem+0xff78cab4>
  80d1b8:	0401ffc4 	movi	r16,2047
  80d1bc:	003e2506 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d1c0:	0013883a 	mov	r9,zero
  80d1c4:	003f8406 	br	80cfd8 <__alt_mem_onchip_mem+0xff78cfd8>
  80d1c8:	0005883a 	mov	r2,zero
  80d1cc:	0007883a 	mov	r3,zero
  80d1d0:	003e8906 	br	80cbf8 <__alt_mem_onchip_mem+0xff78cbf8>
  80d1d4:	197ff804 	addi	r5,r3,-32
  80d1d8:	01000804 	movi	r4,32
  80d1dc:	414ad83a 	srl	r5,r8,r5
  80d1e0:	19002426 	beq	r3,r4,80d274 <__adddf3+0x89c>
  80d1e4:	01001004 	movi	r4,64
  80d1e8:	20c7c83a 	sub	r3,r4,r3
  80d1ec:	40c6983a 	sll	r3,r8,r3
  80d1f0:	1c46b03a 	or	r3,r3,r17
  80d1f4:	1806c03a 	cmpne	r3,r3,zero
  80d1f8:	28e2b03a 	or	r17,r5,r3
  80d1fc:	0007883a 	mov	r3,zero
  80d200:	003f2306 	br	80ce90 <__alt_mem_onchip_mem+0xff78ce90>
  80d204:	0007883a 	mov	r3,zero
  80d208:	5811883a 	mov	r8,r11
  80d20c:	00bfffc4 	movi	r2,-1
  80d210:	0401ffc4 	movi	r16,2047
  80d214:	003e7806 	br	80cbf8 <__alt_mem_onchip_mem+0xff78cbf8>
  80d218:	4462b03a 	or	r17,r8,r17
  80d21c:	8822c03a 	cmpne	r17,r17,zero
  80d220:	0009883a 	mov	r4,zero
  80d224:	003fa006 	br	80d0a8 <__alt_mem_onchip_mem+0xff78d0a8>
  80d228:	4811883a 	mov	r8,r9
  80d22c:	3023883a 	mov	r17,r6
  80d230:	0401ffc4 	movi	r16,2047
  80d234:	003e0706 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d238:	4811883a 	mov	r8,r9
  80d23c:	3023883a 	mov	r17,r6
  80d240:	003e0406 	br	80ca54 <__alt_mem_onchip_mem+0xff78ca54>
  80d244:	21fff804 	addi	r7,r4,-32
  80d248:	01400804 	movi	r5,32
  80d24c:	41ced83a 	srl	r7,r8,r7
  80d250:	21400a26 	beq	r4,r5,80d27c <__adddf3+0x8a4>
  80d254:	01401004 	movi	r5,64
  80d258:	2909c83a 	sub	r4,r5,r4
  80d25c:	4108983a 	sll	r4,r8,r4
  80d260:	2448b03a 	or	r4,r4,r17
  80d264:	2008c03a 	cmpne	r4,r4,zero
  80d268:	3922b03a 	or	r17,r7,r4
  80d26c:	0009883a 	mov	r4,zero
  80d270:	003f8d06 	br	80d0a8 <__alt_mem_onchip_mem+0xff78d0a8>
  80d274:	0007883a 	mov	r3,zero
  80d278:	003fdd06 	br	80d1f0 <__alt_mem_onchip_mem+0xff78d1f0>
  80d27c:	0009883a 	mov	r4,zero
  80d280:	003ff706 	br	80d260 <__alt_mem_onchip_mem+0xff78d260>

0080d284 <__eqdf2>:
  80d284:	2804d53a 	srli	r2,r5,20
  80d288:	3806d53a 	srli	r3,r7,20
  80d28c:	02000434 	movhi	r8,16
  80d290:	423fffc4 	addi	r8,r8,-1
  80d294:	1081ffcc 	andi	r2,r2,2047
  80d298:	0281ffc4 	movi	r10,2047
  80d29c:	2a12703a 	and	r9,r5,r8
  80d2a0:	18c1ffcc 	andi	r3,r3,2047
  80d2a4:	3a10703a 	and	r8,r7,r8
  80d2a8:	280ad7fa 	srli	r5,r5,31
  80d2ac:	380ed7fa 	srli	r7,r7,31
  80d2b0:	12801026 	beq	r2,r10,80d2f4 <__eqdf2+0x70>
  80d2b4:	0281ffc4 	movi	r10,2047
  80d2b8:	1a800a26 	beq	r3,r10,80d2e4 <__eqdf2+0x60>
  80d2bc:	10c00226 	beq	r2,r3,80d2c8 <__eqdf2+0x44>
  80d2c0:	00800044 	movi	r2,1
  80d2c4:	f800283a 	ret
  80d2c8:	4a3ffd1e 	bne	r9,r8,80d2c0 <__alt_mem_onchip_mem+0xff78d2c0>
  80d2cc:	21bffc1e 	bne	r4,r6,80d2c0 <__alt_mem_onchip_mem+0xff78d2c0>
  80d2d0:	29c00c26 	beq	r5,r7,80d304 <__eqdf2+0x80>
  80d2d4:	103ffa1e 	bne	r2,zero,80d2c0 <__alt_mem_onchip_mem+0xff78d2c0>
  80d2d8:	2244b03a 	or	r2,r4,r9
  80d2dc:	1004c03a 	cmpne	r2,r2,zero
  80d2e0:	f800283a 	ret
  80d2e4:	3214b03a 	or	r10,r6,r8
  80d2e8:	503ff426 	beq	r10,zero,80d2bc <__alt_mem_onchip_mem+0xff78d2bc>
  80d2ec:	00800044 	movi	r2,1
  80d2f0:	f800283a 	ret
  80d2f4:	2254b03a 	or	r10,r4,r9
  80d2f8:	503fee26 	beq	r10,zero,80d2b4 <__alt_mem_onchip_mem+0xff78d2b4>
  80d2fc:	00800044 	movi	r2,1
  80d300:	f800283a 	ret
  80d304:	0005883a 	mov	r2,zero
  80d308:	f800283a 	ret

0080d30c <__gedf2>:
  80d30c:	2804d53a 	srli	r2,r5,20
  80d310:	3806d53a 	srli	r3,r7,20
  80d314:	02000434 	movhi	r8,16
  80d318:	423fffc4 	addi	r8,r8,-1
  80d31c:	1081ffcc 	andi	r2,r2,2047
  80d320:	0241ffc4 	movi	r9,2047
  80d324:	2a14703a 	and	r10,r5,r8
  80d328:	18c1ffcc 	andi	r3,r3,2047
  80d32c:	3a10703a 	and	r8,r7,r8
  80d330:	280ad7fa 	srli	r5,r5,31
  80d334:	380ed7fa 	srli	r7,r7,31
  80d338:	12401d26 	beq	r2,r9,80d3b0 <__gedf2+0xa4>
  80d33c:	0241ffc4 	movi	r9,2047
  80d340:	1a401226 	beq	r3,r9,80d38c <__gedf2+0x80>
  80d344:	1000081e 	bne	r2,zero,80d368 <__gedf2+0x5c>
  80d348:	2296b03a 	or	r11,r4,r10
  80d34c:	5813003a 	cmpeq	r9,r11,zero
  80d350:	1800091e 	bne	r3,zero,80d378 <__gedf2+0x6c>
  80d354:	3218b03a 	or	r12,r6,r8
  80d358:	6000071e 	bne	r12,zero,80d378 <__gedf2+0x6c>
  80d35c:	0005883a 	mov	r2,zero
  80d360:	5800101e 	bne	r11,zero,80d3a4 <__gedf2+0x98>
  80d364:	f800283a 	ret
  80d368:	18000c1e 	bne	r3,zero,80d39c <__gedf2+0x90>
  80d36c:	3212b03a 	or	r9,r6,r8
  80d370:	48000c26 	beq	r9,zero,80d3a4 <__gedf2+0x98>
  80d374:	0013883a 	mov	r9,zero
  80d378:	39c03fcc 	andi	r7,r7,255
  80d37c:	48000826 	beq	r9,zero,80d3a0 <__gedf2+0x94>
  80d380:	38000926 	beq	r7,zero,80d3a8 <__gedf2+0x9c>
  80d384:	00800044 	movi	r2,1
  80d388:	f800283a 	ret
  80d38c:	3212b03a 	or	r9,r6,r8
  80d390:	483fec26 	beq	r9,zero,80d344 <__alt_mem_onchip_mem+0xff78d344>
  80d394:	00bfff84 	movi	r2,-2
  80d398:	f800283a 	ret
  80d39c:	39c03fcc 	andi	r7,r7,255
  80d3a0:	29c00626 	beq	r5,r7,80d3bc <__gedf2+0xb0>
  80d3a4:	283ff726 	beq	r5,zero,80d384 <__alt_mem_onchip_mem+0xff78d384>
  80d3a8:	00bfffc4 	movi	r2,-1
  80d3ac:	f800283a 	ret
  80d3b0:	2292b03a 	or	r9,r4,r10
  80d3b4:	483fe126 	beq	r9,zero,80d33c <__alt_mem_onchip_mem+0xff78d33c>
  80d3b8:	003ff606 	br	80d394 <__alt_mem_onchip_mem+0xff78d394>
  80d3bc:	18bff916 	blt	r3,r2,80d3a4 <__alt_mem_onchip_mem+0xff78d3a4>
  80d3c0:	10c00316 	blt	r2,r3,80d3d0 <__gedf2+0xc4>
  80d3c4:	42bff736 	bltu	r8,r10,80d3a4 <__alt_mem_onchip_mem+0xff78d3a4>
  80d3c8:	52000326 	beq	r10,r8,80d3d8 <__gedf2+0xcc>
  80d3cc:	5200042e 	bgeu	r10,r8,80d3e0 <__gedf2+0xd4>
  80d3d0:	283fec1e 	bne	r5,zero,80d384 <__alt_mem_onchip_mem+0xff78d384>
  80d3d4:	003ff406 	br	80d3a8 <__alt_mem_onchip_mem+0xff78d3a8>
  80d3d8:	313ff236 	bltu	r6,r4,80d3a4 <__alt_mem_onchip_mem+0xff78d3a4>
  80d3dc:	21bffc36 	bltu	r4,r6,80d3d0 <__alt_mem_onchip_mem+0xff78d3d0>
  80d3e0:	0005883a 	mov	r2,zero
  80d3e4:	f800283a 	ret

0080d3e8 <__ledf2>:
  80d3e8:	2804d53a 	srli	r2,r5,20
  80d3ec:	3810d53a 	srli	r8,r7,20
  80d3f0:	00c00434 	movhi	r3,16
  80d3f4:	18ffffc4 	addi	r3,r3,-1
  80d3f8:	1081ffcc 	andi	r2,r2,2047
  80d3fc:	0241ffc4 	movi	r9,2047
  80d400:	28d4703a 	and	r10,r5,r3
  80d404:	4201ffcc 	andi	r8,r8,2047
  80d408:	38c6703a 	and	r3,r7,r3
  80d40c:	280ad7fa 	srli	r5,r5,31
  80d410:	380ed7fa 	srli	r7,r7,31
  80d414:	12401f26 	beq	r2,r9,80d494 <__ledf2+0xac>
  80d418:	0241ffc4 	movi	r9,2047
  80d41c:	42401426 	beq	r8,r9,80d470 <__ledf2+0x88>
  80d420:	1000091e 	bne	r2,zero,80d448 <__ledf2+0x60>
  80d424:	2296b03a 	or	r11,r4,r10
  80d428:	5813003a 	cmpeq	r9,r11,zero
  80d42c:	29403fcc 	andi	r5,r5,255
  80d430:	40000a1e 	bne	r8,zero,80d45c <__ledf2+0x74>
  80d434:	30d8b03a 	or	r12,r6,r3
  80d438:	6000081e 	bne	r12,zero,80d45c <__ledf2+0x74>
  80d43c:	0005883a 	mov	r2,zero
  80d440:	5800111e 	bne	r11,zero,80d488 <__ledf2+0xa0>
  80d444:	f800283a 	ret
  80d448:	29403fcc 	andi	r5,r5,255
  80d44c:	40000c1e 	bne	r8,zero,80d480 <__ledf2+0x98>
  80d450:	30d2b03a 	or	r9,r6,r3
  80d454:	48000c26 	beq	r9,zero,80d488 <__ledf2+0xa0>
  80d458:	0013883a 	mov	r9,zero
  80d45c:	39c03fcc 	andi	r7,r7,255
  80d460:	48000826 	beq	r9,zero,80d484 <__ledf2+0x9c>
  80d464:	38001126 	beq	r7,zero,80d4ac <__ledf2+0xc4>
  80d468:	00800044 	movi	r2,1
  80d46c:	f800283a 	ret
  80d470:	30d2b03a 	or	r9,r6,r3
  80d474:	483fea26 	beq	r9,zero,80d420 <__alt_mem_onchip_mem+0xff78d420>
  80d478:	00800084 	movi	r2,2
  80d47c:	f800283a 	ret
  80d480:	39c03fcc 	andi	r7,r7,255
  80d484:	39400726 	beq	r7,r5,80d4a4 <__ledf2+0xbc>
  80d488:	2800081e 	bne	r5,zero,80d4ac <__ledf2+0xc4>
  80d48c:	00800044 	movi	r2,1
  80d490:	f800283a 	ret
  80d494:	2292b03a 	or	r9,r4,r10
  80d498:	483fdf26 	beq	r9,zero,80d418 <__alt_mem_onchip_mem+0xff78d418>
  80d49c:	00800084 	movi	r2,2
  80d4a0:	f800283a 	ret
  80d4a4:	4080030e 	bge	r8,r2,80d4b4 <__ledf2+0xcc>
  80d4a8:	383fef26 	beq	r7,zero,80d468 <__alt_mem_onchip_mem+0xff78d468>
  80d4ac:	00bfffc4 	movi	r2,-1
  80d4b0:	f800283a 	ret
  80d4b4:	123feb16 	blt	r2,r8,80d464 <__alt_mem_onchip_mem+0xff78d464>
  80d4b8:	1abff336 	bltu	r3,r10,80d488 <__alt_mem_onchip_mem+0xff78d488>
  80d4bc:	50c00326 	beq	r10,r3,80d4cc <__ledf2+0xe4>
  80d4c0:	50c0042e 	bgeu	r10,r3,80d4d4 <__ledf2+0xec>
  80d4c4:	283fe81e 	bne	r5,zero,80d468 <__alt_mem_onchip_mem+0xff78d468>
  80d4c8:	003ff806 	br	80d4ac <__alt_mem_onchip_mem+0xff78d4ac>
  80d4cc:	313fee36 	bltu	r6,r4,80d488 <__alt_mem_onchip_mem+0xff78d488>
  80d4d0:	21bffc36 	bltu	r4,r6,80d4c4 <__alt_mem_onchip_mem+0xff78d4c4>
  80d4d4:	0005883a 	mov	r2,zero
  80d4d8:	f800283a 	ret

0080d4dc <__muldf3>:
  80d4dc:	defff304 	addi	sp,sp,-52
  80d4e0:	2804d53a 	srli	r2,r5,20
  80d4e4:	dd800915 	stw	r22,36(sp)
  80d4e8:	282cd7fa 	srli	r22,r5,31
  80d4ec:	dc000315 	stw	r16,12(sp)
  80d4f0:	04000434 	movhi	r16,16
  80d4f4:	dd400815 	stw	r21,32(sp)
  80d4f8:	dc800515 	stw	r18,20(sp)
  80d4fc:	843fffc4 	addi	r16,r16,-1
  80d500:	dfc00c15 	stw	ra,48(sp)
  80d504:	df000b15 	stw	fp,44(sp)
  80d508:	ddc00a15 	stw	r23,40(sp)
  80d50c:	dd000715 	stw	r20,28(sp)
  80d510:	dcc00615 	stw	r19,24(sp)
  80d514:	dc400415 	stw	r17,16(sp)
  80d518:	1481ffcc 	andi	r18,r2,2047
  80d51c:	2c20703a 	and	r16,r5,r16
  80d520:	b02b883a 	mov	r21,r22
  80d524:	b2403fcc 	andi	r9,r22,255
  80d528:	90006026 	beq	r18,zero,80d6ac <__muldf3+0x1d0>
  80d52c:	0081ffc4 	movi	r2,2047
  80d530:	2029883a 	mov	r20,r4
  80d534:	90803626 	beq	r18,r2,80d610 <__muldf3+0x134>
  80d538:	80800434 	orhi	r2,r16,16
  80d53c:	100490fa 	slli	r2,r2,3
  80d540:	2020d77a 	srli	r16,r4,29
  80d544:	202890fa 	slli	r20,r4,3
  80d548:	94bf0044 	addi	r18,r18,-1023
  80d54c:	80a0b03a 	or	r16,r16,r2
  80d550:	0027883a 	mov	r19,zero
  80d554:	0039883a 	mov	fp,zero
  80d558:	3804d53a 	srli	r2,r7,20
  80d55c:	382ed7fa 	srli	r23,r7,31
  80d560:	04400434 	movhi	r17,16
  80d564:	8c7fffc4 	addi	r17,r17,-1
  80d568:	1081ffcc 	andi	r2,r2,2047
  80d56c:	3011883a 	mov	r8,r6
  80d570:	3c62703a 	and	r17,r7,r17
  80d574:	ba803fcc 	andi	r10,r23,255
  80d578:	10006d26 	beq	r2,zero,80d730 <__muldf3+0x254>
  80d57c:	00c1ffc4 	movi	r3,2047
  80d580:	10c06526 	beq	r2,r3,80d718 <__muldf3+0x23c>
  80d584:	88c00434 	orhi	r3,r17,16
  80d588:	180690fa 	slli	r3,r3,3
  80d58c:	3022d77a 	srli	r17,r6,29
  80d590:	301090fa 	slli	r8,r6,3
  80d594:	10bf0044 	addi	r2,r2,-1023
  80d598:	88e2b03a 	or	r17,r17,r3
  80d59c:	000b883a 	mov	r5,zero
  80d5a0:	9085883a 	add	r2,r18,r2
  80d5a4:	2cc8b03a 	or	r4,r5,r19
  80d5a8:	00c003c4 	movi	r3,15
  80d5ac:	bdacf03a 	xor	r22,r23,r22
  80d5b0:	12c00044 	addi	r11,r2,1
  80d5b4:	19009936 	bltu	r3,r4,80d81c <__muldf3+0x340>
  80d5b8:	200890ba 	slli	r4,r4,2
  80d5bc:	00c02074 	movhi	r3,129
  80d5c0:	18f57404 	addi	r3,r3,-10800
  80d5c4:	20c9883a 	add	r4,r4,r3
  80d5c8:	20c00017 	ldw	r3,0(r4)
  80d5cc:	1800683a 	jmp	r3
  80d5d0:	0080d81c 	xori	r2,zero,864
  80d5d4:	0080d630 	cmpltui	r2,zero,856
  80d5d8:	0080d630 	cmpltui	r2,zero,856
  80d5dc:	0080d62c 	andhi	r2,zero,856
  80d5e0:	0080d7f8 	rdprs	r2,zero,863
  80d5e4:	0080d7f8 	rdprs	r2,zero,863
  80d5e8:	0080d7e0 	cmpeqi	r2,zero,863
  80d5ec:	0080d62c 	andhi	r2,zero,856
  80d5f0:	0080d7f8 	rdprs	r2,zero,863
  80d5f4:	0080d7e0 	cmpeqi	r2,zero,863
  80d5f8:	0080d7f8 	rdprs	r2,zero,863
  80d5fc:	0080d62c 	andhi	r2,zero,856
  80d600:	0080d808 	cmpgei	r2,zero,864
  80d604:	0080d808 	cmpgei	r2,zero,864
  80d608:	0080d808 	cmpgei	r2,zero,864
  80d60c:	0080da24 	muli	r2,zero,872
  80d610:	2404b03a 	or	r2,r4,r16
  80d614:	10006f1e 	bne	r2,zero,80d7d4 <__muldf3+0x2f8>
  80d618:	04c00204 	movi	r19,8
  80d61c:	0021883a 	mov	r16,zero
  80d620:	0029883a 	mov	r20,zero
  80d624:	07000084 	movi	fp,2
  80d628:	003fcb06 	br	80d558 <__alt_mem_onchip_mem+0xff78d558>
  80d62c:	502d883a 	mov	r22,r10
  80d630:	00800084 	movi	r2,2
  80d634:	28805726 	beq	r5,r2,80d794 <__muldf3+0x2b8>
  80d638:	008000c4 	movi	r2,3
  80d63c:	28816626 	beq	r5,r2,80dbd8 <__muldf3+0x6fc>
  80d640:	00800044 	movi	r2,1
  80d644:	2881411e 	bne	r5,r2,80db4c <__muldf3+0x670>
  80d648:	b02b883a 	mov	r21,r22
  80d64c:	0005883a 	mov	r2,zero
  80d650:	000b883a 	mov	r5,zero
  80d654:	0029883a 	mov	r20,zero
  80d658:	1004953a 	slli	r2,r2,20
  80d65c:	a8c03fcc 	andi	r3,r21,255
  80d660:	04400434 	movhi	r17,16
  80d664:	8c7fffc4 	addi	r17,r17,-1
  80d668:	180697fa 	slli	r3,r3,31
  80d66c:	2c4a703a 	and	r5,r5,r17
  80d670:	288ab03a 	or	r5,r5,r2
  80d674:	28c6b03a 	or	r3,r5,r3
  80d678:	a005883a 	mov	r2,r20
  80d67c:	dfc00c17 	ldw	ra,48(sp)
  80d680:	df000b17 	ldw	fp,44(sp)
  80d684:	ddc00a17 	ldw	r23,40(sp)
  80d688:	dd800917 	ldw	r22,36(sp)
  80d68c:	dd400817 	ldw	r21,32(sp)
  80d690:	dd000717 	ldw	r20,28(sp)
  80d694:	dcc00617 	ldw	r19,24(sp)
  80d698:	dc800517 	ldw	r18,20(sp)
  80d69c:	dc400417 	ldw	r17,16(sp)
  80d6a0:	dc000317 	ldw	r16,12(sp)
  80d6a4:	dec00d04 	addi	sp,sp,52
  80d6a8:	f800283a 	ret
  80d6ac:	2404b03a 	or	r2,r4,r16
  80d6b0:	2027883a 	mov	r19,r4
  80d6b4:	10004226 	beq	r2,zero,80d7c0 <__muldf3+0x2e4>
  80d6b8:	8000fc26 	beq	r16,zero,80daac <__muldf3+0x5d0>
  80d6bc:	8009883a 	mov	r4,r16
  80d6c0:	d9800215 	stw	r6,8(sp)
  80d6c4:	d9c00015 	stw	r7,0(sp)
  80d6c8:	da400115 	stw	r9,4(sp)
  80d6cc:	0801b140 	call	801b14 <__clzsi2>
  80d6d0:	d9800217 	ldw	r6,8(sp)
  80d6d4:	d9c00017 	ldw	r7,0(sp)
  80d6d8:	da400117 	ldw	r9,4(sp)
  80d6dc:	113ffd44 	addi	r4,r2,-11
  80d6e0:	00c00704 	movi	r3,28
  80d6e4:	1900ed16 	blt	r3,r4,80da9c <__muldf3+0x5c0>
  80d6e8:	00c00744 	movi	r3,29
  80d6ec:	147ffe04 	addi	r17,r2,-8
  80d6f0:	1907c83a 	sub	r3,r3,r4
  80d6f4:	8460983a 	sll	r16,r16,r17
  80d6f8:	98c6d83a 	srl	r3,r19,r3
  80d6fc:	9c68983a 	sll	r20,r19,r17
  80d700:	1c20b03a 	or	r16,r3,r16
  80d704:	1080fcc4 	addi	r2,r2,1011
  80d708:	00a5c83a 	sub	r18,zero,r2
  80d70c:	0027883a 	mov	r19,zero
  80d710:	0039883a 	mov	fp,zero
  80d714:	003f9006 	br	80d558 <__alt_mem_onchip_mem+0xff78d558>
  80d718:	3446b03a 	or	r3,r6,r17
  80d71c:	1800261e 	bne	r3,zero,80d7b8 <__muldf3+0x2dc>
  80d720:	0023883a 	mov	r17,zero
  80d724:	0011883a 	mov	r8,zero
  80d728:	01400084 	movi	r5,2
  80d72c:	003f9c06 	br	80d5a0 <__alt_mem_onchip_mem+0xff78d5a0>
  80d730:	3446b03a 	or	r3,r6,r17
  80d734:	18001c26 	beq	r3,zero,80d7a8 <__muldf3+0x2cc>
  80d738:	8800ce26 	beq	r17,zero,80da74 <__muldf3+0x598>
  80d73c:	8809883a 	mov	r4,r17
  80d740:	d9800215 	stw	r6,8(sp)
  80d744:	da400115 	stw	r9,4(sp)
  80d748:	da800015 	stw	r10,0(sp)
  80d74c:	0801b140 	call	801b14 <__clzsi2>
  80d750:	d9800217 	ldw	r6,8(sp)
  80d754:	da400117 	ldw	r9,4(sp)
  80d758:	da800017 	ldw	r10,0(sp)
  80d75c:	113ffd44 	addi	r4,r2,-11
  80d760:	00c00704 	movi	r3,28
  80d764:	1900bf16 	blt	r3,r4,80da64 <__muldf3+0x588>
  80d768:	00c00744 	movi	r3,29
  80d76c:	123ffe04 	addi	r8,r2,-8
  80d770:	1907c83a 	sub	r3,r3,r4
  80d774:	8a22983a 	sll	r17,r17,r8
  80d778:	30c6d83a 	srl	r3,r6,r3
  80d77c:	3210983a 	sll	r8,r6,r8
  80d780:	1c62b03a 	or	r17,r3,r17
  80d784:	1080fcc4 	addi	r2,r2,1011
  80d788:	0085c83a 	sub	r2,zero,r2
  80d78c:	000b883a 	mov	r5,zero
  80d790:	003f8306 	br	80d5a0 <__alt_mem_onchip_mem+0xff78d5a0>
  80d794:	b02b883a 	mov	r21,r22
  80d798:	0081ffc4 	movi	r2,2047
  80d79c:	000b883a 	mov	r5,zero
  80d7a0:	0029883a 	mov	r20,zero
  80d7a4:	003fac06 	br	80d658 <__alt_mem_onchip_mem+0xff78d658>
  80d7a8:	0023883a 	mov	r17,zero
  80d7ac:	0011883a 	mov	r8,zero
  80d7b0:	01400044 	movi	r5,1
  80d7b4:	003f7a06 	br	80d5a0 <__alt_mem_onchip_mem+0xff78d5a0>
  80d7b8:	014000c4 	movi	r5,3
  80d7bc:	003f7806 	br	80d5a0 <__alt_mem_onchip_mem+0xff78d5a0>
  80d7c0:	04c00104 	movi	r19,4
  80d7c4:	0021883a 	mov	r16,zero
  80d7c8:	0029883a 	mov	r20,zero
  80d7cc:	07000044 	movi	fp,1
  80d7d0:	003f6106 	br	80d558 <__alt_mem_onchip_mem+0xff78d558>
  80d7d4:	04c00304 	movi	r19,12
  80d7d8:	070000c4 	movi	fp,3
  80d7dc:	003f5e06 	br	80d558 <__alt_mem_onchip_mem+0xff78d558>
  80d7e0:	01400434 	movhi	r5,16
  80d7e4:	002b883a 	mov	r21,zero
  80d7e8:	297fffc4 	addi	r5,r5,-1
  80d7ec:	053fffc4 	movi	r20,-1
  80d7f0:	0081ffc4 	movi	r2,2047
  80d7f4:	003f9806 	br	80d658 <__alt_mem_onchip_mem+0xff78d658>
  80d7f8:	8023883a 	mov	r17,r16
  80d7fc:	a011883a 	mov	r8,r20
  80d800:	e00b883a 	mov	r5,fp
  80d804:	003f8a06 	br	80d630 <__alt_mem_onchip_mem+0xff78d630>
  80d808:	8023883a 	mov	r17,r16
  80d80c:	a011883a 	mov	r8,r20
  80d810:	482d883a 	mov	r22,r9
  80d814:	e00b883a 	mov	r5,fp
  80d818:	003f8506 	br	80d630 <__alt_mem_onchip_mem+0xff78d630>
  80d81c:	a00ad43a 	srli	r5,r20,16
  80d820:	401ad43a 	srli	r13,r8,16
  80d824:	a53fffcc 	andi	r20,r20,65535
  80d828:	423fffcc 	andi	r8,r8,65535
  80d82c:	4519383a 	mul	r12,r8,r20
  80d830:	4147383a 	mul	r3,r8,r5
  80d834:	6d09383a 	mul	r4,r13,r20
  80d838:	600cd43a 	srli	r6,r12,16
  80d83c:	2b5d383a 	mul	r14,r5,r13
  80d840:	20c9883a 	add	r4,r4,r3
  80d844:	310d883a 	add	r6,r6,r4
  80d848:	30c0022e 	bgeu	r6,r3,80d854 <__muldf3+0x378>
  80d84c:	00c00074 	movhi	r3,1
  80d850:	70dd883a 	add	r14,r14,r3
  80d854:	8826d43a 	srli	r19,r17,16
  80d858:	8bffffcc 	andi	r15,r17,65535
  80d85c:	7d23383a 	mul	r17,r15,r20
  80d860:	7949383a 	mul	r4,r15,r5
  80d864:	9d29383a 	mul	r20,r19,r20
  80d868:	8814d43a 	srli	r10,r17,16
  80d86c:	3012943a 	slli	r9,r6,16
  80d870:	a129883a 	add	r20,r20,r4
  80d874:	633fffcc 	andi	r12,r12,65535
  80d878:	5515883a 	add	r10,r10,r20
  80d87c:	3006d43a 	srli	r3,r6,16
  80d880:	4b13883a 	add	r9,r9,r12
  80d884:	2ccb383a 	mul	r5,r5,r19
  80d888:	5100022e 	bgeu	r10,r4,80d894 <__muldf3+0x3b8>
  80d88c:	01000074 	movhi	r4,1
  80d890:	290b883a 	add	r5,r5,r4
  80d894:	802ad43a 	srli	r21,r16,16
  80d898:	843fffcc 	andi	r16,r16,65535
  80d89c:	440d383a 	mul	r6,r8,r16
  80d8a0:	4565383a 	mul	r18,r8,r21
  80d8a4:	8349383a 	mul	r4,r16,r13
  80d8a8:	500e943a 	slli	r7,r10,16
  80d8ac:	3010d43a 	srli	r8,r6,16
  80d8b0:	5028d43a 	srli	r20,r10,16
  80d8b4:	2489883a 	add	r4,r4,r18
  80d8b8:	8abfffcc 	andi	r10,r17,65535
  80d8bc:	3a95883a 	add	r10,r7,r10
  80d8c0:	4119883a 	add	r12,r8,r4
  80d8c4:	a169883a 	add	r20,r20,r5
  80d8c8:	1a87883a 	add	r3,r3,r10
  80d8cc:	6d5b383a 	mul	r13,r13,r21
  80d8d0:	6480022e 	bgeu	r12,r18,80d8dc <__muldf3+0x400>
  80d8d4:	01000074 	movhi	r4,1
  80d8d8:	691b883a 	add	r13,r13,r4
  80d8dc:	7c25383a 	mul	r18,r15,r16
  80d8e0:	7d4b383a 	mul	r5,r15,r21
  80d8e4:	84cf383a 	mul	r7,r16,r19
  80d8e8:	901ed43a 	srli	r15,r18,16
  80d8ec:	6008d43a 	srli	r4,r12,16
  80d8f0:	6010943a 	slli	r8,r12,16
  80d8f4:	394f883a 	add	r7,r7,r5
  80d8f8:	333fffcc 	andi	r12,r6,65535
  80d8fc:	79df883a 	add	r15,r15,r7
  80d900:	235b883a 	add	r13,r4,r13
  80d904:	9d63383a 	mul	r17,r19,r21
  80d908:	4309883a 	add	r4,r8,r12
  80d90c:	7940022e 	bgeu	r15,r5,80d918 <__muldf3+0x43c>
  80d910:	01400074 	movhi	r5,1
  80d914:	8963883a 	add	r17,r17,r5
  80d918:	780a943a 	slli	r5,r15,16
  80d91c:	91bfffcc 	andi	r6,r18,65535
  80d920:	70c7883a 	add	r3,r14,r3
  80d924:	298d883a 	add	r6,r5,r6
  80d928:	1a8f803a 	cmpltu	r7,r3,r10
  80d92c:	350b883a 	add	r5,r6,r20
  80d930:	20c7883a 	add	r3,r4,r3
  80d934:	3955883a 	add	r10,r7,r5
  80d938:	1909803a 	cmpltu	r4,r3,r4
  80d93c:	6a91883a 	add	r8,r13,r10
  80d940:	780cd43a 	srli	r6,r15,16
  80d944:	2219883a 	add	r12,r4,r8
  80d948:	2d0b803a 	cmpltu	r5,r5,r20
  80d94c:	51cf803a 	cmpltu	r7,r10,r7
  80d950:	29ceb03a 	or	r7,r5,r7
  80d954:	4351803a 	cmpltu	r8,r8,r13
  80d958:	610b803a 	cmpltu	r5,r12,r4
  80d95c:	4148b03a 	or	r4,r8,r5
  80d960:	398f883a 	add	r7,r7,r6
  80d964:	3909883a 	add	r4,r7,r4
  80d968:	1810927a 	slli	r8,r3,9
  80d96c:	2449883a 	add	r4,r4,r17
  80d970:	2008927a 	slli	r4,r4,9
  80d974:	6022d5fa 	srli	r17,r12,23
  80d978:	1806d5fa 	srli	r3,r3,23
  80d97c:	4252b03a 	or	r9,r8,r9
  80d980:	600a927a 	slli	r5,r12,9
  80d984:	4810c03a 	cmpne	r8,r9,zero
  80d988:	2462b03a 	or	r17,r4,r17
  80d98c:	40c6b03a 	or	r3,r8,r3
  80d990:	8900402c 	andhi	r4,r17,256
  80d994:	1950b03a 	or	r8,r3,r5
  80d998:	20000726 	beq	r4,zero,80d9b8 <__muldf3+0x4dc>
  80d99c:	4006d07a 	srli	r3,r8,1
  80d9a0:	880497fa 	slli	r2,r17,31
  80d9a4:	4200004c 	andi	r8,r8,1
  80d9a8:	8822d07a 	srli	r17,r17,1
  80d9ac:	1a10b03a 	or	r8,r3,r8
  80d9b0:	1210b03a 	or	r8,r2,r8
  80d9b4:	5805883a 	mov	r2,r11
  80d9b8:	1140ffc4 	addi	r5,r2,1023
  80d9bc:	0140440e 	bge	zero,r5,80dad0 <__muldf3+0x5f4>
  80d9c0:	40c001cc 	andi	r3,r8,7
  80d9c4:	18000726 	beq	r3,zero,80d9e4 <__muldf3+0x508>
  80d9c8:	40c003cc 	andi	r3,r8,15
  80d9cc:	01000104 	movi	r4,4
  80d9d0:	19000426 	beq	r3,r4,80d9e4 <__muldf3+0x508>
  80d9d4:	4107883a 	add	r3,r8,r4
  80d9d8:	1a11803a 	cmpltu	r8,r3,r8
  80d9dc:	8a23883a 	add	r17,r17,r8
  80d9e0:	1811883a 	mov	r8,r3
  80d9e4:	88c0402c 	andhi	r3,r17,256
  80d9e8:	18000426 	beq	r3,zero,80d9fc <__muldf3+0x520>
  80d9ec:	11410004 	addi	r5,r2,1024
  80d9f0:	00bfc034 	movhi	r2,65280
  80d9f4:	10bfffc4 	addi	r2,r2,-1
  80d9f8:	88a2703a 	and	r17,r17,r2
  80d9fc:	0081ff84 	movi	r2,2046
  80da00:	117f6416 	blt	r2,r5,80d794 <__alt_mem_onchip_mem+0xff78d794>
  80da04:	8828977a 	slli	r20,r17,29
  80da08:	4010d0fa 	srli	r8,r8,3
  80da0c:	8822927a 	slli	r17,r17,9
  80da10:	2881ffcc 	andi	r2,r5,2047
  80da14:	a228b03a 	or	r20,r20,r8
  80da18:	880ad33a 	srli	r5,r17,12
  80da1c:	b02b883a 	mov	r21,r22
  80da20:	003f0d06 	br	80d658 <__alt_mem_onchip_mem+0xff78d658>
  80da24:	8080022c 	andhi	r2,r16,8
  80da28:	10000926 	beq	r2,zero,80da50 <__muldf3+0x574>
  80da2c:	8880022c 	andhi	r2,r17,8
  80da30:	1000071e 	bne	r2,zero,80da50 <__muldf3+0x574>
  80da34:	00800434 	movhi	r2,16
  80da38:	89400234 	orhi	r5,r17,8
  80da3c:	10bfffc4 	addi	r2,r2,-1
  80da40:	b82b883a 	mov	r21,r23
  80da44:	288a703a 	and	r5,r5,r2
  80da48:	4029883a 	mov	r20,r8
  80da4c:	003f6806 	br	80d7f0 <__alt_mem_onchip_mem+0xff78d7f0>
  80da50:	00800434 	movhi	r2,16
  80da54:	81400234 	orhi	r5,r16,8
  80da58:	10bfffc4 	addi	r2,r2,-1
  80da5c:	288a703a 	and	r5,r5,r2
  80da60:	003f6306 	br	80d7f0 <__alt_mem_onchip_mem+0xff78d7f0>
  80da64:	147ff604 	addi	r17,r2,-40
  80da68:	3462983a 	sll	r17,r6,r17
  80da6c:	0011883a 	mov	r8,zero
  80da70:	003f4406 	br	80d784 <__alt_mem_onchip_mem+0xff78d784>
  80da74:	3009883a 	mov	r4,r6
  80da78:	d9800215 	stw	r6,8(sp)
  80da7c:	da400115 	stw	r9,4(sp)
  80da80:	da800015 	stw	r10,0(sp)
  80da84:	0801b140 	call	801b14 <__clzsi2>
  80da88:	10800804 	addi	r2,r2,32
  80da8c:	da800017 	ldw	r10,0(sp)
  80da90:	da400117 	ldw	r9,4(sp)
  80da94:	d9800217 	ldw	r6,8(sp)
  80da98:	003f3006 	br	80d75c <__alt_mem_onchip_mem+0xff78d75c>
  80da9c:	143ff604 	addi	r16,r2,-40
  80daa0:	9c20983a 	sll	r16,r19,r16
  80daa4:	0029883a 	mov	r20,zero
  80daa8:	003f1606 	br	80d704 <__alt_mem_onchip_mem+0xff78d704>
  80daac:	d9800215 	stw	r6,8(sp)
  80dab0:	d9c00015 	stw	r7,0(sp)
  80dab4:	da400115 	stw	r9,4(sp)
  80dab8:	0801b140 	call	801b14 <__clzsi2>
  80dabc:	10800804 	addi	r2,r2,32
  80dac0:	da400117 	ldw	r9,4(sp)
  80dac4:	d9c00017 	ldw	r7,0(sp)
  80dac8:	d9800217 	ldw	r6,8(sp)
  80dacc:	003f0306 	br	80d6dc <__alt_mem_onchip_mem+0xff78d6dc>
  80dad0:	00c00044 	movi	r3,1
  80dad4:	1947c83a 	sub	r3,r3,r5
  80dad8:	00800e04 	movi	r2,56
  80dadc:	10feda16 	blt	r2,r3,80d648 <__alt_mem_onchip_mem+0xff78d648>
  80dae0:	008007c4 	movi	r2,31
  80dae4:	10c01b16 	blt	r2,r3,80db54 <__muldf3+0x678>
  80dae8:	00800804 	movi	r2,32
  80daec:	10c5c83a 	sub	r2,r2,r3
  80daf0:	888a983a 	sll	r5,r17,r2
  80daf4:	40c8d83a 	srl	r4,r8,r3
  80daf8:	4084983a 	sll	r2,r8,r2
  80dafc:	88e2d83a 	srl	r17,r17,r3
  80db00:	2906b03a 	or	r3,r5,r4
  80db04:	1004c03a 	cmpne	r2,r2,zero
  80db08:	1886b03a 	or	r3,r3,r2
  80db0c:	188001cc 	andi	r2,r3,7
  80db10:	10000726 	beq	r2,zero,80db30 <__muldf3+0x654>
  80db14:	188003cc 	andi	r2,r3,15
  80db18:	01000104 	movi	r4,4
  80db1c:	11000426 	beq	r2,r4,80db30 <__muldf3+0x654>
  80db20:	1805883a 	mov	r2,r3
  80db24:	10c00104 	addi	r3,r2,4
  80db28:	1885803a 	cmpltu	r2,r3,r2
  80db2c:	88a3883a 	add	r17,r17,r2
  80db30:	8880202c 	andhi	r2,r17,128
  80db34:	10001c26 	beq	r2,zero,80dba8 <__muldf3+0x6cc>
  80db38:	b02b883a 	mov	r21,r22
  80db3c:	00800044 	movi	r2,1
  80db40:	000b883a 	mov	r5,zero
  80db44:	0029883a 	mov	r20,zero
  80db48:	003ec306 	br	80d658 <__alt_mem_onchip_mem+0xff78d658>
  80db4c:	5805883a 	mov	r2,r11
  80db50:	003f9906 	br	80d9b8 <__alt_mem_onchip_mem+0xff78d9b8>
  80db54:	00bff844 	movi	r2,-31
  80db58:	1145c83a 	sub	r2,r2,r5
  80db5c:	8888d83a 	srl	r4,r17,r2
  80db60:	00800804 	movi	r2,32
  80db64:	18801a26 	beq	r3,r2,80dbd0 <__muldf3+0x6f4>
  80db68:	00801004 	movi	r2,64
  80db6c:	10c5c83a 	sub	r2,r2,r3
  80db70:	8884983a 	sll	r2,r17,r2
  80db74:	1204b03a 	or	r2,r2,r8
  80db78:	1004c03a 	cmpne	r2,r2,zero
  80db7c:	2084b03a 	or	r2,r4,r2
  80db80:	144001cc 	andi	r17,r2,7
  80db84:	88000d1e 	bne	r17,zero,80dbbc <__muldf3+0x6e0>
  80db88:	000b883a 	mov	r5,zero
  80db8c:	1028d0fa 	srli	r20,r2,3
  80db90:	b02b883a 	mov	r21,r22
  80db94:	0005883a 	mov	r2,zero
  80db98:	a468b03a 	or	r20,r20,r17
  80db9c:	003eae06 	br	80d658 <__alt_mem_onchip_mem+0xff78d658>
  80dba0:	1007883a 	mov	r3,r2
  80dba4:	0023883a 	mov	r17,zero
  80dba8:	880a927a 	slli	r5,r17,9
  80dbac:	1805883a 	mov	r2,r3
  80dbb0:	8822977a 	slli	r17,r17,29
  80dbb4:	280ad33a 	srli	r5,r5,12
  80dbb8:	003ff406 	br	80db8c <__alt_mem_onchip_mem+0xff78db8c>
  80dbbc:	10c003cc 	andi	r3,r2,15
  80dbc0:	01000104 	movi	r4,4
  80dbc4:	193ff626 	beq	r3,r4,80dba0 <__alt_mem_onchip_mem+0xff78dba0>
  80dbc8:	0023883a 	mov	r17,zero
  80dbcc:	003fd506 	br	80db24 <__alt_mem_onchip_mem+0xff78db24>
  80dbd0:	0005883a 	mov	r2,zero
  80dbd4:	003fe706 	br	80db74 <__alt_mem_onchip_mem+0xff78db74>
  80dbd8:	00800434 	movhi	r2,16
  80dbdc:	89400234 	orhi	r5,r17,8
  80dbe0:	10bfffc4 	addi	r2,r2,-1
  80dbe4:	b02b883a 	mov	r21,r22
  80dbe8:	288a703a 	and	r5,r5,r2
  80dbec:	4029883a 	mov	r20,r8
  80dbf0:	003eff06 	br	80d7f0 <__alt_mem_onchip_mem+0xff78d7f0>

0080dbf4 <__subdf3>:
  80dbf4:	02000434 	movhi	r8,16
  80dbf8:	423fffc4 	addi	r8,r8,-1
  80dbfc:	defffb04 	addi	sp,sp,-20
  80dc00:	2a14703a 	and	r10,r5,r8
  80dc04:	3812d53a 	srli	r9,r7,20
  80dc08:	3a10703a 	and	r8,r7,r8
  80dc0c:	2006d77a 	srli	r3,r4,29
  80dc10:	3004d77a 	srli	r2,r6,29
  80dc14:	dc000015 	stw	r16,0(sp)
  80dc18:	501490fa 	slli	r10,r10,3
  80dc1c:	2820d53a 	srli	r16,r5,20
  80dc20:	401090fa 	slli	r8,r8,3
  80dc24:	dc800215 	stw	r18,8(sp)
  80dc28:	dc400115 	stw	r17,4(sp)
  80dc2c:	dfc00415 	stw	ra,16(sp)
  80dc30:	202290fa 	slli	r17,r4,3
  80dc34:	dcc00315 	stw	r19,12(sp)
  80dc38:	4a41ffcc 	andi	r9,r9,2047
  80dc3c:	0101ffc4 	movi	r4,2047
  80dc40:	2824d7fa 	srli	r18,r5,31
  80dc44:	8401ffcc 	andi	r16,r16,2047
  80dc48:	50c6b03a 	or	r3,r10,r3
  80dc4c:	380ed7fa 	srli	r7,r7,31
  80dc50:	408ab03a 	or	r5,r8,r2
  80dc54:	300c90fa 	slli	r6,r6,3
  80dc58:	49009626 	beq	r9,r4,80deb4 <__subdf3+0x2c0>
  80dc5c:	39c0005c 	xori	r7,r7,1
  80dc60:	8245c83a 	sub	r2,r16,r9
  80dc64:	3c807426 	beq	r7,r18,80de38 <__subdf3+0x244>
  80dc68:	0080af0e 	bge	zero,r2,80df28 <__subdf3+0x334>
  80dc6c:	48002a1e 	bne	r9,zero,80dd18 <__subdf3+0x124>
  80dc70:	2988b03a 	or	r4,r5,r6
  80dc74:	20009a1e 	bne	r4,zero,80dee0 <__subdf3+0x2ec>
  80dc78:	888001cc 	andi	r2,r17,7
  80dc7c:	10000726 	beq	r2,zero,80dc9c <__subdf3+0xa8>
  80dc80:	888003cc 	andi	r2,r17,15
  80dc84:	01000104 	movi	r4,4
  80dc88:	11000426 	beq	r2,r4,80dc9c <__subdf3+0xa8>
  80dc8c:	890b883a 	add	r5,r17,r4
  80dc90:	2c63803a 	cmpltu	r17,r5,r17
  80dc94:	1c47883a 	add	r3,r3,r17
  80dc98:	2823883a 	mov	r17,r5
  80dc9c:	1880202c 	andhi	r2,r3,128
  80dca0:	10005926 	beq	r2,zero,80de08 <__subdf3+0x214>
  80dca4:	84000044 	addi	r16,r16,1
  80dca8:	0081ffc4 	movi	r2,2047
  80dcac:	8080be26 	beq	r16,r2,80dfa8 <__subdf3+0x3b4>
  80dcb0:	017fe034 	movhi	r5,65408
  80dcb4:	297fffc4 	addi	r5,r5,-1
  80dcb8:	1946703a 	and	r3,r3,r5
  80dcbc:	1804977a 	slli	r2,r3,29
  80dcc0:	1806927a 	slli	r3,r3,9
  80dcc4:	8822d0fa 	srli	r17,r17,3
  80dcc8:	8401ffcc 	andi	r16,r16,2047
  80dccc:	180ad33a 	srli	r5,r3,12
  80dcd0:	9100004c 	andi	r4,r18,1
  80dcd4:	1444b03a 	or	r2,r2,r17
  80dcd8:	80c1ffcc 	andi	r3,r16,2047
  80dcdc:	1820953a 	slli	r16,r3,20
  80dce0:	20c03fcc 	andi	r3,r4,255
  80dce4:	180897fa 	slli	r4,r3,31
  80dce8:	00c00434 	movhi	r3,16
  80dcec:	18ffffc4 	addi	r3,r3,-1
  80dcf0:	28c6703a 	and	r3,r5,r3
  80dcf4:	1c06b03a 	or	r3,r3,r16
  80dcf8:	1906b03a 	or	r3,r3,r4
  80dcfc:	dfc00417 	ldw	ra,16(sp)
  80dd00:	dcc00317 	ldw	r19,12(sp)
  80dd04:	dc800217 	ldw	r18,8(sp)
  80dd08:	dc400117 	ldw	r17,4(sp)
  80dd0c:	dc000017 	ldw	r16,0(sp)
  80dd10:	dec00504 	addi	sp,sp,20
  80dd14:	f800283a 	ret
  80dd18:	0101ffc4 	movi	r4,2047
  80dd1c:	813fd626 	beq	r16,r4,80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80dd20:	29402034 	orhi	r5,r5,128
  80dd24:	01000e04 	movi	r4,56
  80dd28:	2080a316 	blt	r4,r2,80dfb8 <__subdf3+0x3c4>
  80dd2c:	010007c4 	movi	r4,31
  80dd30:	2080c616 	blt	r4,r2,80e04c <__subdf3+0x458>
  80dd34:	01000804 	movi	r4,32
  80dd38:	2089c83a 	sub	r4,r4,r2
  80dd3c:	2910983a 	sll	r8,r5,r4
  80dd40:	308ed83a 	srl	r7,r6,r2
  80dd44:	3108983a 	sll	r4,r6,r4
  80dd48:	2884d83a 	srl	r2,r5,r2
  80dd4c:	41ccb03a 	or	r6,r8,r7
  80dd50:	2008c03a 	cmpne	r4,r4,zero
  80dd54:	310cb03a 	or	r6,r6,r4
  80dd58:	898dc83a 	sub	r6,r17,r6
  80dd5c:	89a3803a 	cmpltu	r17,r17,r6
  80dd60:	1887c83a 	sub	r3,r3,r2
  80dd64:	1c47c83a 	sub	r3,r3,r17
  80dd68:	3023883a 	mov	r17,r6
  80dd6c:	1880202c 	andhi	r2,r3,128
  80dd70:	10002326 	beq	r2,zero,80de00 <__subdf3+0x20c>
  80dd74:	04c02034 	movhi	r19,128
  80dd78:	9cffffc4 	addi	r19,r19,-1
  80dd7c:	1ce6703a 	and	r19,r3,r19
  80dd80:	98007a26 	beq	r19,zero,80df6c <__subdf3+0x378>
  80dd84:	9809883a 	mov	r4,r19
  80dd88:	0801b140 	call	801b14 <__clzsi2>
  80dd8c:	113ffe04 	addi	r4,r2,-8
  80dd90:	00c007c4 	movi	r3,31
  80dd94:	19007b16 	blt	r3,r4,80df84 <__subdf3+0x390>
  80dd98:	00800804 	movi	r2,32
  80dd9c:	1105c83a 	sub	r2,r2,r4
  80dda0:	8884d83a 	srl	r2,r17,r2
  80dda4:	9906983a 	sll	r3,r19,r4
  80dda8:	8922983a 	sll	r17,r17,r4
  80ddac:	10c4b03a 	or	r2,r2,r3
  80ddb0:	24007816 	blt	r4,r16,80df94 <__subdf3+0x3a0>
  80ddb4:	2421c83a 	sub	r16,r4,r16
  80ddb8:	80c00044 	addi	r3,r16,1
  80ddbc:	010007c4 	movi	r4,31
  80ddc0:	20c09516 	blt	r4,r3,80e018 <__subdf3+0x424>
  80ddc4:	01400804 	movi	r5,32
  80ddc8:	28cbc83a 	sub	r5,r5,r3
  80ddcc:	88c8d83a 	srl	r4,r17,r3
  80ddd0:	8962983a 	sll	r17,r17,r5
  80ddd4:	114a983a 	sll	r5,r2,r5
  80ddd8:	10c6d83a 	srl	r3,r2,r3
  80dddc:	8804c03a 	cmpne	r2,r17,zero
  80dde0:	290ab03a 	or	r5,r5,r4
  80dde4:	28a2b03a 	or	r17,r5,r2
  80dde8:	0021883a 	mov	r16,zero
  80ddec:	003fa206 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80ddf0:	2090b03a 	or	r8,r4,r2
  80ddf4:	40018e26 	beq	r8,zero,80e430 <__subdf3+0x83c>
  80ddf8:	1007883a 	mov	r3,r2
  80ddfc:	2023883a 	mov	r17,r4
  80de00:	888001cc 	andi	r2,r17,7
  80de04:	103f9e1e 	bne	r2,zero,80dc80 <__alt_mem_onchip_mem+0xff78dc80>
  80de08:	1804977a 	slli	r2,r3,29
  80de0c:	8822d0fa 	srli	r17,r17,3
  80de10:	1810d0fa 	srli	r8,r3,3
  80de14:	9100004c 	andi	r4,r18,1
  80de18:	1444b03a 	or	r2,r2,r17
  80de1c:	00c1ffc4 	movi	r3,2047
  80de20:	80c02826 	beq	r16,r3,80dec4 <__subdf3+0x2d0>
  80de24:	01400434 	movhi	r5,16
  80de28:	297fffc4 	addi	r5,r5,-1
  80de2c:	80e0703a 	and	r16,r16,r3
  80de30:	414a703a 	and	r5,r8,r5
  80de34:	003fa806 	br	80dcd8 <__alt_mem_onchip_mem+0xff78dcd8>
  80de38:	0080630e 	bge	zero,r2,80dfc8 <__subdf3+0x3d4>
  80de3c:	48003026 	beq	r9,zero,80df00 <__subdf3+0x30c>
  80de40:	0101ffc4 	movi	r4,2047
  80de44:	813f8c26 	beq	r16,r4,80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80de48:	29402034 	orhi	r5,r5,128
  80de4c:	01000e04 	movi	r4,56
  80de50:	2080a90e 	bge	r4,r2,80e0f8 <__subdf3+0x504>
  80de54:	298cb03a 	or	r6,r5,r6
  80de58:	3012c03a 	cmpne	r9,r6,zero
  80de5c:	0005883a 	mov	r2,zero
  80de60:	4c53883a 	add	r9,r9,r17
  80de64:	4c63803a 	cmpltu	r17,r9,r17
  80de68:	10c7883a 	add	r3,r2,r3
  80de6c:	88c7883a 	add	r3,r17,r3
  80de70:	4823883a 	mov	r17,r9
  80de74:	1880202c 	andhi	r2,r3,128
  80de78:	1000d026 	beq	r2,zero,80e1bc <__subdf3+0x5c8>
  80de7c:	84000044 	addi	r16,r16,1
  80de80:	0081ffc4 	movi	r2,2047
  80de84:	8080fe26 	beq	r16,r2,80e280 <__subdf3+0x68c>
  80de88:	00bfe034 	movhi	r2,65408
  80de8c:	10bfffc4 	addi	r2,r2,-1
  80de90:	1886703a 	and	r3,r3,r2
  80de94:	880ad07a 	srli	r5,r17,1
  80de98:	180497fa 	slli	r2,r3,31
  80de9c:	8900004c 	andi	r4,r17,1
  80dea0:	2922b03a 	or	r17,r5,r4
  80dea4:	1806d07a 	srli	r3,r3,1
  80dea8:	1462b03a 	or	r17,r2,r17
  80deac:	3825883a 	mov	r18,r7
  80deb0:	003f7106 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80deb4:	2984b03a 	or	r2,r5,r6
  80deb8:	103f6826 	beq	r2,zero,80dc5c <__alt_mem_onchip_mem+0xff78dc5c>
  80debc:	39c03fcc 	andi	r7,r7,255
  80dec0:	003f6706 	br	80dc60 <__alt_mem_onchip_mem+0xff78dc60>
  80dec4:	4086b03a 	or	r3,r8,r2
  80dec8:	18015226 	beq	r3,zero,80e414 <__subdf3+0x820>
  80decc:	00c00434 	movhi	r3,16
  80ded0:	41400234 	orhi	r5,r8,8
  80ded4:	18ffffc4 	addi	r3,r3,-1
  80ded8:	28ca703a 	and	r5,r5,r3
  80dedc:	003f7e06 	br	80dcd8 <__alt_mem_onchip_mem+0xff78dcd8>
  80dee0:	10bfffc4 	addi	r2,r2,-1
  80dee4:	1000491e 	bne	r2,zero,80e00c <__subdf3+0x418>
  80dee8:	898fc83a 	sub	r7,r17,r6
  80deec:	89e3803a 	cmpltu	r17,r17,r7
  80def0:	1947c83a 	sub	r3,r3,r5
  80def4:	1c47c83a 	sub	r3,r3,r17
  80def8:	3823883a 	mov	r17,r7
  80defc:	003f9b06 	br	80dd6c <__alt_mem_onchip_mem+0xff78dd6c>
  80df00:	2988b03a 	or	r4,r5,r6
  80df04:	203f5c26 	beq	r4,zero,80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80df08:	10bfffc4 	addi	r2,r2,-1
  80df0c:	1000931e 	bne	r2,zero,80e15c <__subdf3+0x568>
  80df10:	898d883a 	add	r6,r17,r6
  80df14:	3463803a 	cmpltu	r17,r6,r17
  80df18:	1947883a 	add	r3,r3,r5
  80df1c:	88c7883a 	add	r3,r17,r3
  80df20:	3023883a 	mov	r17,r6
  80df24:	003fd306 	br	80de74 <__alt_mem_onchip_mem+0xff78de74>
  80df28:	1000541e 	bne	r2,zero,80e07c <__subdf3+0x488>
  80df2c:	80800044 	addi	r2,r16,1
  80df30:	1081ffcc 	andi	r2,r2,2047
  80df34:	01000044 	movi	r4,1
  80df38:	2080a20e 	bge	r4,r2,80e1c4 <__subdf3+0x5d0>
  80df3c:	8989c83a 	sub	r4,r17,r6
  80df40:	8905803a 	cmpltu	r2,r17,r4
  80df44:	1967c83a 	sub	r19,r3,r5
  80df48:	98a7c83a 	sub	r19,r19,r2
  80df4c:	9880202c 	andhi	r2,r19,128
  80df50:	10006326 	beq	r2,zero,80e0e0 <__subdf3+0x4ec>
  80df54:	3463c83a 	sub	r17,r6,r17
  80df58:	28c7c83a 	sub	r3,r5,r3
  80df5c:	344d803a 	cmpltu	r6,r6,r17
  80df60:	19a7c83a 	sub	r19,r3,r6
  80df64:	3825883a 	mov	r18,r7
  80df68:	983f861e 	bne	r19,zero,80dd84 <__alt_mem_onchip_mem+0xff78dd84>
  80df6c:	8809883a 	mov	r4,r17
  80df70:	0801b140 	call	801b14 <__clzsi2>
  80df74:	10800804 	addi	r2,r2,32
  80df78:	113ffe04 	addi	r4,r2,-8
  80df7c:	00c007c4 	movi	r3,31
  80df80:	193f850e 	bge	r3,r4,80dd98 <__alt_mem_onchip_mem+0xff78dd98>
  80df84:	10bff604 	addi	r2,r2,-40
  80df88:	8884983a 	sll	r2,r17,r2
  80df8c:	0023883a 	mov	r17,zero
  80df90:	243f880e 	bge	r4,r16,80ddb4 <__alt_mem_onchip_mem+0xff78ddb4>
  80df94:	00ffe034 	movhi	r3,65408
  80df98:	18ffffc4 	addi	r3,r3,-1
  80df9c:	8121c83a 	sub	r16,r16,r4
  80dfa0:	10c6703a 	and	r3,r2,r3
  80dfa4:	003f3406 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80dfa8:	9100004c 	andi	r4,r18,1
  80dfac:	000b883a 	mov	r5,zero
  80dfb0:	0005883a 	mov	r2,zero
  80dfb4:	003f4806 	br	80dcd8 <__alt_mem_onchip_mem+0xff78dcd8>
  80dfb8:	298cb03a 	or	r6,r5,r6
  80dfbc:	300cc03a 	cmpne	r6,r6,zero
  80dfc0:	0005883a 	mov	r2,zero
  80dfc4:	003f6406 	br	80dd58 <__alt_mem_onchip_mem+0xff78dd58>
  80dfc8:	10009a1e 	bne	r2,zero,80e234 <__subdf3+0x640>
  80dfcc:	82400044 	addi	r9,r16,1
  80dfd0:	4881ffcc 	andi	r2,r9,2047
  80dfd4:	02800044 	movi	r10,1
  80dfd8:	5080670e 	bge	r10,r2,80e178 <__subdf3+0x584>
  80dfdc:	0081ffc4 	movi	r2,2047
  80dfe0:	4880af26 	beq	r9,r2,80e2a0 <__subdf3+0x6ac>
  80dfe4:	898d883a 	add	r6,r17,r6
  80dfe8:	1945883a 	add	r2,r3,r5
  80dfec:	3447803a 	cmpltu	r3,r6,r17
  80dff0:	1887883a 	add	r3,r3,r2
  80dff4:	182297fa 	slli	r17,r3,31
  80dff8:	300cd07a 	srli	r6,r6,1
  80dffc:	1806d07a 	srli	r3,r3,1
  80e000:	4821883a 	mov	r16,r9
  80e004:	89a2b03a 	or	r17,r17,r6
  80e008:	003f1b06 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e00c:	0101ffc4 	movi	r4,2047
  80e010:	813f441e 	bne	r16,r4,80dd24 <__alt_mem_onchip_mem+0xff78dd24>
  80e014:	003f1806 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e018:	843ff844 	addi	r16,r16,-31
  80e01c:	01400804 	movi	r5,32
  80e020:	1408d83a 	srl	r4,r2,r16
  80e024:	19405026 	beq	r3,r5,80e168 <__subdf3+0x574>
  80e028:	01401004 	movi	r5,64
  80e02c:	28c7c83a 	sub	r3,r5,r3
  80e030:	10c4983a 	sll	r2,r2,r3
  80e034:	88a2b03a 	or	r17,r17,r2
  80e038:	8822c03a 	cmpne	r17,r17,zero
  80e03c:	2462b03a 	or	r17,r4,r17
  80e040:	0007883a 	mov	r3,zero
  80e044:	0021883a 	mov	r16,zero
  80e048:	003f6d06 	br	80de00 <__alt_mem_onchip_mem+0xff78de00>
  80e04c:	11fff804 	addi	r7,r2,-32
  80e050:	01000804 	movi	r4,32
  80e054:	29ced83a 	srl	r7,r5,r7
  80e058:	11004526 	beq	r2,r4,80e170 <__subdf3+0x57c>
  80e05c:	01001004 	movi	r4,64
  80e060:	2089c83a 	sub	r4,r4,r2
  80e064:	2904983a 	sll	r2,r5,r4
  80e068:	118cb03a 	or	r6,r2,r6
  80e06c:	300cc03a 	cmpne	r6,r6,zero
  80e070:	398cb03a 	or	r6,r7,r6
  80e074:	0005883a 	mov	r2,zero
  80e078:	003f3706 	br	80dd58 <__alt_mem_onchip_mem+0xff78dd58>
  80e07c:	80002a26 	beq	r16,zero,80e128 <__subdf3+0x534>
  80e080:	0101ffc4 	movi	r4,2047
  80e084:	49006626 	beq	r9,r4,80e220 <__subdf3+0x62c>
  80e088:	0085c83a 	sub	r2,zero,r2
  80e08c:	18c02034 	orhi	r3,r3,128
  80e090:	01000e04 	movi	r4,56
  80e094:	20807e16 	blt	r4,r2,80e290 <__subdf3+0x69c>
  80e098:	010007c4 	movi	r4,31
  80e09c:	2080e716 	blt	r4,r2,80e43c <__subdf3+0x848>
  80e0a0:	01000804 	movi	r4,32
  80e0a4:	2089c83a 	sub	r4,r4,r2
  80e0a8:	1914983a 	sll	r10,r3,r4
  80e0ac:	8890d83a 	srl	r8,r17,r2
  80e0b0:	8908983a 	sll	r4,r17,r4
  80e0b4:	1884d83a 	srl	r2,r3,r2
  80e0b8:	5222b03a 	or	r17,r10,r8
  80e0bc:	2006c03a 	cmpne	r3,r4,zero
  80e0c0:	88e2b03a 	or	r17,r17,r3
  80e0c4:	3463c83a 	sub	r17,r6,r17
  80e0c8:	2885c83a 	sub	r2,r5,r2
  80e0cc:	344d803a 	cmpltu	r6,r6,r17
  80e0d0:	1187c83a 	sub	r3,r2,r6
  80e0d4:	4821883a 	mov	r16,r9
  80e0d8:	3825883a 	mov	r18,r7
  80e0dc:	003f2306 	br	80dd6c <__alt_mem_onchip_mem+0xff78dd6c>
  80e0e0:	24d0b03a 	or	r8,r4,r19
  80e0e4:	40001b1e 	bne	r8,zero,80e154 <__subdf3+0x560>
  80e0e8:	0005883a 	mov	r2,zero
  80e0ec:	0009883a 	mov	r4,zero
  80e0f0:	0021883a 	mov	r16,zero
  80e0f4:	003f4906 	br	80de1c <__alt_mem_onchip_mem+0xff78de1c>
  80e0f8:	010007c4 	movi	r4,31
  80e0fc:	20803a16 	blt	r4,r2,80e1e8 <__subdf3+0x5f4>
  80e100:	01000804 	movi	r4,32
  80e104:	2089c83a 	sub	r4,r4,r2
  80e108:	2912983a 	sll	r9,r5,r4
  80e10c:	3090d83a 	srl	r8,r6,r2
  80e110:	3108983a 	sll	r4,r6,r4
  80e114:	2884d83a 	srl	r2,r5,r2
  80e118:	4a12b03a 	or	r9,r9,r8
  80e11c:	2008c03a 	cmpne	r4,r4,zero
  80e120:	4912b03a 	or	r9,r9,r4
  80e124:	003f4e06 	br	80de60 <__alt_mem_onchip_mem+0xff78de60>
  80e128:	1c48b03a 	or	r4,r3,r17
  80e12c:	20003c26 	beq	r4,zero,80e220 <__subdf3+0x62c>
  80e130:	0084303a 	nor	r2,zero,r2
  80e134:	1000381e 	bne	r2,zero,80e218 <__subdf3+0x624>
  80e138:	3463c83a 	sub	r17,r6,r17
  80e13c:	28c5c83a 	sub	r2,r5,r3
  80e140:	344d803a 	cmpltu	r6,r6,r17
  80e144:	1187c83a 	sub	r3,r2,r6
  80e148:	4821883a 	mov	r16,r9
  80e14c:	3825883a 	mov	r18,r7
  80e150:	003f0606 	br	80dd6c <__alt_mem_onchip_mem+0xff78dd6c>
  80e154:	2023883a 	mov	r17,r4
  80e158:	003f0906 	br	80dd80 <__alt_mem_onchip_mem+0xff78dd80>
  80e15c:	0101ffc4 	movi	r4,2047
  80e160:	813f3a1e 	bne	r16,r4,80de4c <__alt_mem_onchip_mem+0xff78de4c>
  80e164:	003ec406 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e168:	0005883a 	mov	r2,zero
  80e16c:	003fb106 	br	80e034 <__alt_mem_onchip_mem+0xff78e034>
  80e170:	0005883a 	mov	r2,zero
  80e174:	003fbc06 	br	80e068 <__alt_mem_onchip_mem+0xff78e068>
  80e178:	1c44b03a 	or	r2,r3,r17
  80e17c:	80008e1e 	bne	r16,zero,80e3b8 <__subdf3+0x7c4>
  80e180:	1000c826 	beq	r2,zero,80e4a4 <__subdf3+0x8b0>
  80e184:	2984b03a 	or	r2,r5,r6
  80e188:	103ebb26 	beq	r2,zero,80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e18c:	8989883a 	add	r4,r17,r6
  80e190:	1945883a 	add	r2,r3,r5
  80e194:	2447803a 	cmpltu	r3,r4,r17
  80e198:	1887883a 	add	r3,r3,r2
  80e19c:	1880202c 	andhi	r2,r3,128
  80e1a0:	2023883a 	mov	r17,r4
  80e1a4:	103f1626 	beq	r2,zero,80de00 <__alt_mem_onchip_mem+0xff78de00>
  80e1a8:	00bfe034 	movhi	r2,65408
  80e1ac:	10bfffc4 	addi	r2,r2,-1
  80e1b0:	5021883a 	mov	r16,r10
  80e1b4:	1886703a 	and	r3,r3,r2
  80e1b8:	003eaf06 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e1bc:	3825883a 	mov	r18,r7
  80e1c0:	003f0f06 	br	80de00 <__alt_mem_onchip_mem+0xff78de00>
  80e1c4:	1c44b03a 	or	r2,r3,r17
  80e1c8:	8000251e 	bne	r16,zero,80e260 <__subdf3+0x66c>
  80e1cc:	1000661e 	bne	r2,zero,80e368 <__subdf3+0x774>
  80e1d0:	2990b03a 	or	r8,r5,r6
  80e1d4:	40009626 	beq	r8,zero,80e430 <__subdf3+0x83c>
  80e1d8:	2807883a 	mov	r3,r5
  80e1dc:	3023883a 	mov	r17,r6
  80e1e0:	3825883a 	mov	r18,r7
  80e1e4:	003ea406 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e1e8:	127ff804 	addi	r9,r2,-32
  80e1ec:	01000804 	movi	r4,32
  80e1f0:	2a52d83a 	srl	r9,r5,r9
  80e1f4:	11008c26 	beq	r2,r4,80e428 <__subdf3+0x834>
  80e1f8:	01001004 	movi	r4,64
  80e1fc:	2085c83a 	sub	r2,r4,r2
  80e200:	2884983a 	sll	r2,r5,r2
  80e204:	118cb03a 	or	r6,r2,r6
  80e208:	300cc03a 	cmpne	r6,r6,zero
  80e20c:	4992b03a 	or	r9,r9,r6
  80e210:	0005883a 	mov	r2,zero
  80e214:	003f1206 	br	80de60 <__alt_mem_onchip_mem+0xff78de60>
  80e218:	0101ffc4 	movi	r4,2047
  80e21c:	493f9c1e 	bne	r9,r4,80e090 <__alt_mem_onchip_mem+0xff78e090>
  80e220:	2807883a 	mov	r3,r5
  80e224:	3023883a 	mov	r17,r6
  80e228:	4821883a 	mov	r16,r9
  80e22c:	3825883a 	mov	r18,r7
  80e230:	003e9106 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e234:	80001f1e 	bne	r16,zero,80e2b4 <__subdf3+0x6c0>
  80e238:	1c48b03a 	or	r4,r3,r17
  80e23c:	20005a26 	beq	r4,zero,80e3a8 <__subdf3+0x7b4>
  80e240:	0084303a 	nor	r2,zero,r2
  80e244:	1000561e 	bne	r2,zero,80e3a0 <__subdf3+0x7ac>
  80e248:	89a3883a 	add	r17,r17,r6
  80e24c:	1945883a 	add	r2,r3,r5
  80e250:	898d803a 	cmpltu	r6,r17,r6
  80e254:	3087883a 	add	r3,r6,r2
  80e258:	4821883a 	mov	r16,r9
  80e25c:	003f0506 	br	80de74 <__alt_mem_onchip_mem+0xff78de74>
  80e260:	10002b1e 	bne	r2,zero,80e310 <__subdf3+0x71c>
  80e264:	2984b03a 	or	r2,r5,r6
  80e268:	10008026 	beq	r2,zero,80e46c <__subdf3+0x878>
  80e26c:	2807883a 	mov	r3,r5
  80e270:	3023883a 	mov	r17,r6
  80e274:	3825883a 	mov	r18,r7
  80e278:	0401ffc4 	movi	r16,2047
  80e27c:	003e7e06 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e280:	3809883a 	mov	r4,r7
  80e284:	0011883a 	mov	r8,zero
  80e288:	0005883a 	mov	r2,zero
  80e28c:	003ee306 	br	80de1c <__alt_mem_onchip_mem+0xff78de1c>
  80e290:	1c62b03a 	or	r17,r3,r17
  80e294:	8822c03a 	cmpne	r17,r17,zero
  80e298:	0005883a 	mov	r2,zero
  80e29c:	003f8906 	br	80e0c4 <__alt_mem_onchip_mem+0xff78e0c4>
  80e2a0:	3809883a 	mov	r4,r7
  80e2a4:	4821883a 	mov	r16,r9
  80e2a8:	0011883a 	mov	r8,zero
  80e2ac:	0005883a 	mov	r2,zero
  80e2b0:	003eda06 	br	80de1c <__alt_mem_onchip_mem+0xff78de1c>
  80e2b4:	0101ffc4 	movi	r4,2047
  80e2b8:	49003b26 	beq	r9,r4,80e3a8 <__subdf3+0x7b4>
  80e2bc:	0085c83a 	sub	r2,zero,r2
  80e2c0:	18c02034 	orhi	r3,r3,128
  80e2c4:	01000e04 	movi	r4,56
  80e2c8:	20806e16 	blt	r4,r2,80e484 <__subdf3+0x890>
  80e2cc:	010007c4 	movi	r4,31
  80e2d0:	20807716 	blt	r4,r2,80e4b0 <__subdf3+0x8bc>
  80e2d4:	01000804 	movi	r4,32
  80e2d8:	2089c83a 	sub	r4,r4,r2
  80e2dc:	1914983a 	sll	r10,r3,r4
  80e2e0:	8890d83a 	srl	r8,r17,r2
  80e2e4:	8908983a 	sll	r4,r17,r4
  80e2e8:	1884d83a 	srl	r2,r3,r2
  80e2ec:	5222b03a 	or	r17,r10,r8
  80e2f0:	2006c03a 	cmpne	r3,r4,zero
  80e2f4:	88e2b03a 	or	r17,r17,r3
  80e2f8:	89a3883a 	add	r17,r17,r6
  80e2fc:	1145883a 	add	r2,r2,r5
  80e300:	898d803a 	cmpltu	r6,r17,r6
  80e304:	3087883a 	add	r3,r6,r2
  80e308:	4821883a 	mov	r16,r9
  80e30c:	003ed906 	br	80de74 <__alt_mem_onchip_mem+0xff78de74>
  80e310:	2984b03a 	or	r2,r5,r6
  80e314:	10004226 	beq	r2,zero,80e420 <__subdf3+0x82c>
  80e318:	1808d0fa 	srli	r4,r3,3
  80e31c:	8822d0fa 	srli	r17,r17,3
  80e320:	1806977a 	slli	r3,r3,29
  80e324:	2080022c 	andhi	r2,r4,8
  80e328:	1c62b03a 	or	r17,r3,r17
  80e32c:	10000826 	beq	r2,zero,80e350 <__subdf3+0x75c>
  80e330:	2812d0fa 	srli	r9,r5,3
  80e334:	4880022c 	andhi	r2,r9,8
  80e338:	1000051e 	bne	r2,zero,80e350 <__subdf3+0x75c>
  80e33c:	300cd0fa 	srli	r6,r6,3
  80e340:	2804977a 	slli	r2,r5,29
  80e344:	4809883a 	mov	r4,r9
  80e348:	3825883a 	mov	r18,r7
  80e34c:	11a2b03a 	or	r17,r2,r6
  80e350:	8806d77a 	srli	r3,r17,29
  80e354:	200890fa 	slli	r4,r4,3
  80e358:	882290fa 	slli	r17,r17,3
  80e35c:	0401ffc4 	movi	r16,2047
  80e360:	1906b03a 	or	r3,r3,r4
  80e364:	003e4406 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e368:	2984b03a 	or	r2,r5,r6
  80e36c:	103e4226 	beq	r2,zero,80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e370:	8989c83a 	sub	r4,r17,r6
  80e374:	8911803a 	cmpltu	r8,r17,r4
  80e378:	1945c83a 	sub	r2,r3,r5
  80e37c:	1205c83a 	sub	r2,r2,r8
  80e380:	1200202c 	andhi	r8,r2,128
  80e384:	403e9a26 	beq	r8,zero,80ddf0 <__alt_mem_onchip_mem+0xff78ddf0>
  80e388:	3463c83a 	sub	r17,r6,r17
  80e38c:	28c5c83a 	sub	r2,r5,r3
  80e390:	344d803a 	cmpltu	r6,r6,r17
  80e394:	1187c83a 	sub	r3,r2,r6
  80e398:	3825883a 	mov	r18,r7
  80e39c:	003e3606 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e3a0:	0101ffc4 	movi	r4,2047
  80e3a4:	493fc71e 	bne	r9,r4,80e2c4 <__alt_mem_onchip_mem+0xff78e2c4>
  80e3a8:	2807883a 	mov	r3,r5
  80e3ac:	3023883a 	mov	r17,r6
  80e3b0:	4821883a 	mov	r16,r9
  80e3b4:	003e3006 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e3b8:	10003626 	beq	r2,zero,80e494 <__subdf3+0x8a0>
  80e3bc:	2984b03a 	or	r2,r5,r6
  80e3c0:	10001726 	beq	r2,zero,80e420 <__subdf3+0x82c>
  80e3c4:	1808d0fa 	srli	r4,r3,3
  80e3c8:	8822d0fa 	srli	r17,r17,3
  80e3cc:	1806977a 	slli	r3,r3,29
  80e3d0:	2080022c 	andhi	r2,r4,8
  80e3d4:	1c62b03a 	or	r17,r3,r17
  80e3d8:	10000726 	beq	r2,zero,80e3f8 <__subdf3+0x804>
  80e3dc:	2812d0fa 	srli	r9,r5,3
  80e3e0:	4880022c 	andhi	r2,r9,8
  80e3e4:	1000041e 	bne	r2,zero,80e3f8 <__subdf3+0x804>
  80e3e8:	300cd0fa 	srli	r6,r6,3
  80e3ec:	2804977a 	slli	r2,r5,29
  80e3f0:	4809883a 	mov	r4,r9
  80e3f4:	11a2b03a 	or	r17,r2,r6
  80e3f8:	8806d77a 	srli	r3,r17,29
  80e3fc:	200890fa 	slli	r4,r4,3
  80e400:	882290fa 	slli	r17,r17,3
  80e404:	3825883a 	mov	r18,r7
  80e408:	1906b03a 	or	r3,r3,r4
  80e40c:	0401ffc4 	movi	r16,2047
  80e410:	003e1906 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e414:	000b883a 	mov	r5,zero
  80e418:	0005883a 	mov	r2,zero
  80e41c:	003e2e06 	br	80dcd8 <__alt_mem_onchip_mem+0xff78dcd8>
  80e420:	0401ffc4 	movi	r16,2047
  80e424:	003e1406 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e428:	0005883a 	mov	r2,zero
  80e42c:	003f7506 	br	80e204 <__alt_mem_onchip_mem+0xff78e204>
  80e430:	0005883a 	mov	r2,zero
  80e434:	0009883a 	mov	r4,zero
  80e438:	003e7806 	br	80de1c <__alt_mem_onchip_mem+0xff78de1c>
  80e43c:	123ff804 	addi	r8,r2,-32
  80e440:	01000804 	movi	r4,32
  80e444:	1a10d83a 	srl	r8,r3,r8
  80e448:	11002526 	beq	r2,r4,80e4e0 <__subdf3+0x8ec>
  80e44c:	01001004 	movi	r4,64
  80e450:	2085c83a 	sub	r2,r4,r2
  80e454:	1884983a 	sll	r2,r3,r2
  80e458:	1444b03a 	or	r2,r2,r17
  80e45c:	1004c03a 	cmpne	r2,r2,zero
  80e460:	40a2b03a 	or	r17,r8,r2
  80e464:	0005883a 	mov	r2,zero
  80e468:	003f1606 	br	80e0c4 <__alt_mem_onchip_mem+0xff78e0c4>
  80e46c:	02000434 	movhi	r8,16
  80e470:	0009883a 	mov	r4,zero
  80e474:	423fffc4 	addi	r8,r8,-1
  80e478:	00bfffc4 	movi	r2,-1
  80e47c:	0401ffc4 	movi	r16,2047
  80e480:	003e6606 	br	80de1c <__alt_mem_onchip_mem+0xff78de1c>
  80e484:	1c62b03a 	or	r17,r3,r17
  80e488:	8822c03a 	cmpne	r17,r17,zero
  80e48c:	0005883a 	mov	r2,zero
  80e490:	003f9906 	br	80e2f8 <__alt_mem_onchip_mem+0xff78e2f8>
  80e494:	2807883a 	mov	r3,r5
  80e498:	3023883a 	mov	r17,r6
  80e49c:	0401ffc4 	movi	r16,2047
  80e4a0:	003df506 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e4a4:	2807883a 	mov	r3,r5
  80e4a8:	3023883a 	mov	r17,r6
  80e4ac:	003df206 	br	80dc78 <__alt_mem_onchip_mem+0xff78dc78>
  80e4b0:	123ff804 	addi	r8,r2,-32
  80e4b4:	01000804 	movi	r4,32
  80e4b8:	1a10d83a 	srl	r8,r3,r8
  80e4bc:	11000a26 	beq	r2,r4,80e4e8 <__subdf3+0x8f4>
  80e4c0:	01001004 	movi	r4,64
  80e4c4:	2085c83a 	sub	r2,r4,r2
  80e4c8:	1884983a 	sll	r2,r3,r2
  80e4cc:	1444b03a 	or	r2,r2,r17
  80e4d0:	1004c03a 	cmpne	r2,r2,zero
  80e4d4:	40a2b03a 	or	r17,r8,r2
  80e4d8:	0005883a 	mov	r2,zero
  80e4dc:	003f8606 	br	80e2f8 <__alt_mem_onchip_mem+0xff78e2f8>
  80e4e0:	0005883a 	mov	r2,zero
  80e4e4:	003fdc06 	br	80e458 <__alt_mem_onchip_mem+0xff78e458>
  80e4e8:	0005883a 	mov	r2,zero
  80e4ec:	003ff706 	br	80e4cc <__alt_mem_onchip_mem+0xff78e4cc>

0080e4f0 <__fixdfsi>:
  80e4f0:	280cd53a 	srli	r6,r5,20
  80e4f4:	00c00434 	movhi	r3,16
  80e4f8:	18ffffc4 	addi	r3,r3,-1
  80e4fc:	3181ffcc 	andi	r6,r6,2047
  80e500:	01c0ff84 	movi	r7,1022
  80e504:	28c6703a 	and	r3,r5,r3
  80e508:	280ad7fa 	srli	r5,r5,31
  80e50c:	3980120e 	bge	r7,r6,80e558 <__fixdfsi+0x68>
  80e510:	00810744 	movi	r2,1053
  80e514:	11800c16 	blt	r2,r6,80e548 <__fixdfsi+0x58>
  80e518:	00810cc4 	movi	r2,1075
  80e51c:	1185c83a 	sub	r2,r2,r6
  80e520:	01c007c4 	movi	r7,31
  80e524:	18c00434 	orhi	r3,r3,16
  80e528:	38800d16 	blt	r7,r2,80e560 <__fixdfsi+0x70>
  80e52c:	31befb44 	addi	r6,r6,-1043
  80e530:	2084d83a 	srl	r2,r4,r2
  80e534:	1986983a 	sll	r3,r3,r6
  80e538:	1884b03a 	or	r2,r3,r2
  80e53c:	28000726 	beq	r5,zero,80e55c <__fixdfsi+0x6c>
  80e540:	0085c83a 	sub	r2,zero,r2
  80e544:	f800283a 	ret
  80e548:	00a00034 	movhi	r2,32768
  80e54c:	10bfffc4 	addi	r2,r2,-1
  80e550:	2885883a 	add	r2,r5,r2
  80e554:	f800283a 	ret
  80e558:	0005883a 	mov	r2,zero
  80e55c:	f800283a 	ret
  80e560:	008104c4 	movi	r2,1043
  80e564:	1185c83a 	sub	r2,r2,r6
  80e568:	1884d83a 	srl	r2,r3,r2
  80e56c:	003ff306 	br	80e53c <__alt_mem_onchip_mem+0xff78e53c>

0080e570 <__floatunsidf>:
  80e570:	defffe04 	addi	sp,sp,-8
  80e574:	dc000015 	stw	r16,0(sp)
  80e578:	dfc00115 	stw	ra,4(sp)
  80e57c:	2021883a 	mov	r16,r4
  80e580:	20002226 	beq	r4,zero,80e60c <__floatunsidf+0x9c>
  80e584:	0801b140 	call	801b14 <__clzsi2>
  80e588:	01010784 	movi	r4,1054
  80e58c:	2089c83a 	sub	r4,r4,r2
  80e590:	01810cc4 	movi	r6,1075
  80e594:	310dc83a 	sub	r6,r6,r4
  80e598:	00c007c4 	movi	r3,31
  80e59c:	1980120e 	bge	r3,r6,80e5e8 <__floatunsidf+0x78>
  80e5a0:	00c104c4 	movi	r3,1043
  80e5a4:	1907c83a 	sub	r3,r3,r4
  80e5a8:	80ca983a 	sll	r5,r16,r3
  80e5ac:	00800434 	movhi	r2,16
  80e5b0:	10bfffc4 	addi	r2,r2,-1
  80e5b4:	2101ffcc 	andi	r4,r4,2047
  80e5b8:	0021883a 	mov	r16,zero
  80e5bc:	288a703a 	and	r5,r5,r2
  80e5c0:	2008953a 	slli	r4,r4,20
  80e5c4:	00c00434 	movhi	r3,16
  80e5c8:	18ffffc4 	addi	r3,r3,-1
  80e5cc:	28c6703a 	and	r3,r5,r3
  80e5d0:	8005883a 	mov	r2,r16
  80e5d4:	1906b03a 	or	r3,r3,r4
  80e5d8:	dfc00117 	ldw	ra,4(sp)
  80e5dc:	dc000017 	ldw	r16,0(sp)
  80e5e0:	dec00204 	addi	sp,sp,8
  80e5e4:	f800283a 	ret
  80e5e8:	00c002c4 	movi	r3,11
  80e5ec:	188bc83a 	sub	r5,r3,r2
  80e5f0:	814ad83a 	srl	r5,r16,r5
  80e5f4:	00c00434 	movhi	r3,16
  80e5f8:	18ffffc4 	addi	r3,r3,-1
  80e5fc:	81a0983a 	sll	r16,r16,r6
  80e600:	2101ffcc 	andi	r4,r4,2047
  80e604:	28ca703a 	and	r5,r5,r3
  80e608:	003fed06 	br	80e5c0 <__alt_mem_onchip_mem+0xff78e5c0>
  80e60c:	0009883a 	mov	r4,zero
  80e610:	000b883a 	mov	r5,zero
  80e614:	003fea06 	br	80e5c0 <__alt_mem_onchip_mem+0xff78e5c0>

0080e618 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80e618:	defff504 	addi	sp,sp,-44
  80e61c:	df000a15 	stw	fp,40(sp)
  80e620:	df000a04 	addi	fp,sp,40
  80e624:	e13ffc15 	stw	r4,-16(fp)
  80e628:	e17ffd15 	stw	r5,-12(fp)
  80e62c:	e1bffe15 	stw	r6,-8(fp)
  80e630:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80e634:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e638:	d0a77017 	ldw	r2,-25152(gp)
  
  if (alt_ticks_per_second ())
  80e63c:	10003c26 	beq	r2,zero,80e730 <alt_alarm_start+0x118>
  {
    if (alarm)
  80e640:	e0bffc17 	ldw	r2,-16(fp)
  80e644:	10003826 	beq	r2,zero,80e728 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80e648:	e0bffc17 	ldw	r2,-16(fp)
  80e64c:	e0fffe17 	ldw	r3,-8(fp)
  80e650:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80e654:	e0bffc17 	ldw	r2,-16(fp)
  80e658:	e0ffff17 	ldw	r3,-4(fp)
  80e65c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e660:	0005303a 	rdctl	r2,status
  80e664:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e668:	e0fff917 	ldw	r3,-28(fp)
  80e66c:	00bfff84 	movi	r2,-2
  80e670:	1884703a 	and	r2,r3,r2
  80e674:	1001703a 	wrctl	status,r2
  
  return context;
  80e678:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80e67c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80e680:	d0a77117 	ldw	r2,-25148(gp)
      
      current_nticks = alt_nticks();
  80e684:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80e688:	e0fffd17 	ldw	r3,-12(fp)
  80e68c:	e0bff617 	ldw	r2,-40(fp)
  80e690:	1885883a 	add	r2,r3,r2
  80e694:	10c00044 	addi	r3,r2,1
  80e698:	e0bffc17 	ldw	r2,-16(fp)
  80e69c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80e6a0:	e0bffc17 	ldw	r2,-16(fp)
  80e6a4:	10c00217 	ldw	r3,8(r2)
  80e6a8:	e0bff617 	ldw	r2,-40(fp)
  80e6ac:	1880042e 	bgeu	r3,r2,80e6c0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80e6b0:	e0bffc17 	ldw	r2,-16(fp)
  80e6b4:	00c00044 	movi	r3,1
  80e6b8:	10c00405 	stb	r3,16(r2)
  80e6bc:	00000206 	br	80e6c8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80e6c0:	e0bffc17 	ldw	r2,-16(fp)
  80e6c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80e6c8:	e0bffc17 	ldw	r2,-16(fp)
  80e6cc:	d0e01004 	addi	r3,gp,-32704
  80e6d0:	e0fffa15 	stw	r3,-24(fp)
  80e6d4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80e6d8:	e0bffb17 	ldw	r2,-20(fp)
  80e6dc:	e0fffa17 	ldw	r3,-24(fp)
  80e6e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80e6e4:	e0bffa17 	ldw	r2,-24(fp)
  80e6e8:	10c00017 	ldw	r3,0(r2)
  80e6ec:	e0bffb17 	ldw	r2,-20(fp)
  80e6f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80e6f4:	e0bffa17 	ldw	r2,-24(fp)
  80e6f8:	10800017 	ldw	r2,0(r2)
  80e6fc:	e0fffb17 	ldw	r3,-20(fp)
  80e700:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80e704:	e0bffa17 	ldw	r2,-24(fp)
  80e708:	e0fffb17 	ldw	r3,-20(fp)
  80e70c:	10c00015 	stw	r3,0(r2)
  80e710:	e0bff817 	ldw	r2,-32(fp)
  80e714:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e718:	e0bff717 	ldw	r2,-36(fp)
  80e71c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80e720:	0005883a 	mov	r2,zero
  80e724:	00000306 	br	80e734 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80e728:	00bffa84 	movi	r2,-22
  80e72c:	00000106 	br	80e734 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80e730:	00bfde84 	movi	r2,-134
  }
}
  80e734:	e037883a 	mov	sp,fp
  80e738:	df000017 	ldw	fp,0(sp)
  80e73c:	dec00104 	addi	sp,sp,4
  80e740:	f800283a 	ret

0080e744 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e744:	defffe04 	addi	sp,sp,-8
  80e748:	dfc00115 	stw	ra,4(sp)
  80e74c:	df000015 	stw	fp,0(sp)
  80e750:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e754:	d0a00d17 	ldw	r2,-32716(gp)
  80e758:	10000326 	beq	r2,zero,80e768 <alt_get_errno+0x24>
  80e75c:	d0a00d17 	ldw	r2,-32716(gp)
  80e760:	103ee83a 	callr	r2
  80e764:	00000106 	br	80e76c <alt_get_errno+0x28>
  80e768:	d0a76504 	addi	r2,gp,-25196
}
  80e76c:	e037883a 	mov	sp,fp
  80e770:	dfc00117 	ldw	ra,4(sp)
  80e774:	df000017 	ldw	fp,0(sp)
  80e778:	dec00204 	addi	sp,sp,8
  80e77c:	f800283a 	ret

0080e780 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80e780:	defffb04 	addi	sp,sp,-20
  80e784:	dfc00415 	stw	ra,16(sp)
  80e788:	df000315 	stw	fp,12(sp)
  80e78c:	df000304 	addi	fp,sp,12
  80e790:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80e794:	e0bfff17 	ldw	r2,-4(fp)
  80e798:	10000616 	blt	r2,zero,80e7b4 <close+0x34>
  80e79c:	e0bfff17 	ldw	r2,-4(fp)
  80e7a0:	10c00324 	muli	r3,r2,12
  80e7a4:	00802074 	movhi	r2,129
  80e7a8:	108e4a04 	addi	r2,r2,14632
  80e7ac:	1885883a 	add	r2,r3,r2
  80e7b0:	00000106 	br	80e7b8 <close+0x38>
  80e7b4:	0005883a 	mov	r2,zero
  80e7b8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80e7bc:	e0bffd17 	ldw	r2,-12(fp)
  80e7c0:	10001926 	beq	r2,zero,80e828 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80e7c4:	e0bffd17 	ldw	r2,-12(fp)
  80e7c8:	10800017 	ldw	r2,0(r2)
  80e7cc:	10800417 	ldw	r2,16(r2)
  80e7d0:	10000626 	beq	r2,zero,80e7ec <close+0x6c>
  80e7d4:	e0bffd17 	ldw	r2,-12(fp)
  80e7d8:	10800017 	ldw	r2,0(r2)
  80e7dc:	10800417 	ldw	r2,16(r2)
  80e7e0:	e13ffd17 	ldw	r4,-12(fp)
  80e7e4:	103ee83a 	callr	r2
  80e7e8:	00000106 	br	80e7f0 <close+0x70>
  80e7ec:	0005883a 	mov	r2,zero
  80e7f0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80e7f4:	e13fff17 	ldw	r4,-4(fp)
  80e7f8:	080f2140 	call	80f214 <alt_release_fd>
    if (rval < 0)
  80e7fc:	e0bffe17 	ldw	r2,-8(fp)
  80e800:	1000070e 	bge	r2,zero,80e820 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80e804:	080e7440 	call	80e744 <alt_get_errno>
  80e808:	1007883a 	mov	r3,r2
  80e80c:	e0bffe17 	ldw	r2,-8(fp)
  80e810:	0085c83a 	sub	r2,zero,r2
  80e814:	18800015 	stw	r2,0(r3)
      return -1;
  80e818:	00bfffc4 	movi	r2,-1
  80e81c:	00000706 	br	80e83c <close+0xbc>
    }
    return 0;
  80e820:	0005883a 	mov	r2,zero
  80e824:	00000506 	br	80e83c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e828:	080e7440 	call	80e744 <alt_get_errno>
  80e82c:	1007883a 	mov	r3,r2
  80e830:	00801444 	movi	r2,81
  80e834:	18800015 	stw	r2,0(r3)
    return -1;
  80e838:	00bfffc4 	movi	r2,-1
  }
}
  80e83c:	e037883a 	mov	sp,fp
  80e840:	dfc00117 	ldw	ra,4(sp)
  80e844:	df000017 	ldw	fp,0(sp)
  80e848:	dec00204 	addi	sp,sp,8
  80e84c:	f800283a 	ret

0080e850 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80e850:	defffc04 	addi	sp,sp,-16
  80e854:	df000315 	stw	fp,12(sp)
  80e858:	df000304 	addi	fp,sp,12
  80e85c:	e13ffd15 	stw	r4,-12(fp)
  80e860:	e17ffe15 	stw	r5,-8(fp)
  80e864:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80e868:	e0bfff17 	ldw	r2,-4(fp)
}
  80e86c:	e037883a 	mov	sp,fp
  80e870:	df000017 	ldw	fp,0(sp)
  80e874:	dec00104 	addi	sp,sp,4
  80e878:	f800283a 	ret

0080e87c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e87c:	defffe04 	addi	sp,sp,-8
  80e880:	dfc00115 	stw	ra,4(sp)
  80e884:	df000015 	stw	fp,0(sp)
  80e888:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e88c:	d0a00d17 	ldw	r2,-32716(gp)
  80e890:	10000326 	beq	r2,zero,80e8a0 <alt_get_errno+0x24>
  80e894:	d0a00d17 	ldw	r2,-32716(gp)
  80e898:	103ee83a 	callr	r2
  80e89c:	00000106 	br	80e8a4 <alt_get_errno+0x28>
  80e8a0:	d0a76504 	addi	r2,gp,-25196
}
  80e8a4:	e037883a 	mov	sp,fp
  80e8a8:	dfc00117 	ldw	ra,4(sp)
  80e8ac:	df000017 	ldw	fp,0(sp)
  80e8b0:	dec00204 	addi	sp,sp,8
  80e8b4:	f800283a 	ret

0080e8b8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80e8b8:	defffb04 	addi	sp,sp,-20
  80e8bc:	dfc00415 	stw	ra,16(sp)
  80e8c0:	df000315 	stw	fp,12(sp)
  80e8c4:	df000304 	addi	fp,sp,12
  80e8c8:	e13ffe15 	stw	r4,-8(fp)
  80e8cc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e8d0:	e0bffe17 	ldw	r2,-8(fp)
  80e8d4:	10000616 	blt	r2,zero,80e8f0 <fstat+0x38>
  80e8d8:	e0bffe17 	ldw	r2,-8(fp)
  80e8dc:	10c00324 	muli	r3,r2,12
  80e8e0:	00802074 	movhi	r2,129
  80e8e4:	108e4a04 	addi	r2,r2,14632
  80e8e8:	1885883a 	add	r2,r3,r2
  80e8ec:	00000106 	br	80e8f4 <fstat+0x3c>
  80e8f0:	0005883a 	mov	r2,zero
  80e8f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80e8f8:	e0bffd17 	ldw	r2,-12(fp)
  80e8fc:	10001026 	beq	r2,zero,80e940 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80e900:	e0bffd17 	ldw	r2,-12(fp)
  80e904:	10800017 	ldw	r2,0(r2)
  80e908:	10800817 	ldw	r2,32(r2)
  80e90c:	10000726 	beq	r2,zero,80e92c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80e910:	e0bffd17 	ldw	r2,-12(fp)
  80e914:	10800017 	ldw	r2,0(r2)
  80e918:	10800817 	ldw	r2,32(r2)
  80e91c:	e17fff17 	ldw	r5,-4(fp)
  80e920:	e13ffd17 	ldw	r4,-12(fp)
  80e924:	103ee83a 	callr	r2
  80e928:	00000a06 	br	80e954 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80e92c:	e0bfff17 	ldw	r2,-4(fp)
  80e930:	00c80004 	movi	r3,8192
  80e934:	10c00115 	stw	r3,4(r2)
      return 0;
  80e938:	0005883a 	mov	r2,zero
  80e93c:	00000506 	br	80e954 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80e940:	080e87c0 	call	80e87c <alt_get_errno>
  80e944:	1007883a 	mov	r3,r2
  80e948:	00801444 	movi	r2,81
  80e94c:	18800015 	stw	r2,0(r3)
    return -1;
  80e950:	00bfffc4 	movi	r2,-1
  }
}
  80e954:	e037883a 	mov	sp,fp
  80e958:	dfc00117 	ldw	ra,4(sp)
  80e95c:	df000017 	ldw	fp,0(sp)
  80e960:	dec00204 	addi	sp,sp,8
  80e964:	f800283a 	ret

0080e968 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80e968:	defff004 	addi	sp,sp,-64
  80e96c:	df000f15 	stw	fp,60(sp)
  80e970:	df000f04 	addi	fp,sp,60
  80e974:	e13ffd15 	stw	r4,-12(fp)
  80e978:	e17ffe15 	stw	r5,-8(fp)
  80e97c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80e980:	00bffa84 	movi	r2,-22
  80e984:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80e988:	e0bffd17 	ldw	r2,-12(fp)
  80e98c:	10800828 	cmpgeui	r2,r2,32
  80e990:	1000501e 	bne	r2,zero,80ead4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e994:	0005303a 	rdctl	r2,status
  80e998:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e99c:	e0fff617 	ldw	r3,-40(fp)
  80e9a0:	00bfff84 	movi	r2,-2
  80e9a4:	1884703a 	and	r2,r3,r2
  80e9a8:	1001703a 	wrctl	status,r2
  
  return context;
  80e9ac:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80e9b0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80e9b4:	00802074 	movhi	r2,129
  80e9b8:	109ae204 	addi	r2,r2,27528
  80e9bc:	e0fffd17 	ldw	r3,-12(fp)
  80e9c0:	180690fa 	slli	r3,r3,3
  80e9c4:	10c5883a 	add	r2,r2,r3
  80e9c8:	e0ffff17 	ldw	r3,-4(fp)
  80e9cc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80e9d0:	00802074 	movhi	r2,129
  80e9d4:	109ae204 	addi	r2,r2,27528
  80e9d8:	e0fffd17 	ldw	r3,-12(fp)
  80e9dc:	180690fa 	slli	r3,r3,3
  80e9e0:	10c5883a 	add	r2,r2,r3
  80e9e4:	10800104 	addi	r2,r2,4
  80e9e8:	e0fffe17 	ldw	r3,-8(fp)
  80e9ec:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80e9f0:	e0bfff17 	ldw	r2,-4(fp)
  80e9f4:	10001926 	beq	r2,zero,80ea5c <alt_irq_register+0xf4>
  80e9f8:	e0bffd17 	ldw	r2,-12(fp)
  80e9fc:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea00:	0005303a 	rdctl	r2,status
  80ea04:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea08:	e0fff717 	ldw	r3,-36(fp)
  80ea0c:	00bfff84 	movi	r2,-2
  80ea10:	1884703a 	and	r2,r3,r2
  80ea14:	1001703a 	wrctl	status,r2
  
  return context;
  80ea18:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ea1c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80ea20:	00c00044 	movi	r3,1
  80ea24:	e0bff217 	ldw	r2,-56(fp)
  80ea28:	1884983a 	sll	r2,r3,r2
  80ea2c:	1007883a 	mov	r3,r2
  80ea30:	d0a76c17 	ldw	r2,-25168(gp)
  80ea34:	1884b03a 	or	r2,r3,r2
  80ea38:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80ea3c:	d0a76c17 	ldw	r2,-25168(gp)
  80ea40:	100170fa 	wrctl	ienable,r2
  80ea44:	e0bff817 	ldw	r2,-32(fp)
  80ea48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea4c:	e0bff917 	ldw	r2,-28(fp)
  80ea50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80ea54:	0005883a 	mov	r2,zero
  80ea58:	00001906 	br	80eac0 <alt_irq_register+0x158>
  80ea5c:	e0bffd17 	ldw	r2,-12(fp)
  80ea60:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea64:	0005303a 	rdctl	r2,status
  80ea68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea6c:	e0fffa17 	ldw	r3,-24(fp)
  80ea70:	00bfff84 	movi	r2,-2
  80ea74:	1884703a 	and	r2,r3,r2
  80ea78:	1001703a 	wrctl	status,r2
  
  return context;
  80ea7c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80ea80:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80ea84:	00c00044 	movi	r3,1
  80ea88:	e0bff417 	ldw	r2,-48(fp)
  80ea8c:	1884983a 	sll	r2,r3,r2
  80ea90:	0084303a 	nor	r2,zero,r2
  80ea94:	1007883a 	mov	r3,r2
  80ea98:	d0a76c17 	ldw	r2,-25168(gp)
  80ea9c:	1884703a 	and	r2,r3,r2
  80eaa0:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80eaa4:	d0a76c17 	ldw	r2,-25168(gp)
  80eaa8:	100170fa 	wrctl	ienable,r2
  80eaac:	e0bffb17 	ldw	r2,-20(fp)
  80eab0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eab4:	e0bffc17 	ldw	r2,-16(fp)
  80eab8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80eabc:	0005883a 	mov	r2,zero
  80eac0:	e0bff115 	stw	r2,-60(fp)
  80eac4:	e0bff317 	ldw	r2,-52(fp)
  80eac8:	e0bff515 	stw	r2,-44(fp)
  80eacc:	e0bff517 	ldw	r2,-44(fp)
  80ead0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80ead4:	e0bff117 	ldw	r2,-60(fp)
}
  80ead8:	e037883a 	mov	sp,fp
  80eadc:	df000017 	ldw	fp,0(sp)
  80eae0:	dec00104 	addi	sp,sp,4
  80eae4:	f800283a 	ret

0080eae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80eae8:	defffe04 	addi	sp,sp,-8
  80eaec:	dfc00115 	stw	ra,4(sp)
  80eaf0:	df000015 	stw	fp,0(sp)
  80eaf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80eaf8:	d0a00d17 	ldw	r2,-32716(gp)
  80eafc:	10000326 	beq	r2,zero,80eb0c <alt_get_errno+0x24>
  80eb00:	d0a00d17 	ldw	r2,-32716(gp)
  80eb04:	103ee83a 	callr	r2
  80eb08:	00000106 	br	80eb10 <alt_get_errno+0x28>
  80eb0c:	d0a76504 	addi	r2,gp,-25196
}
  80eb10:	e037883a 	mov	sp,fp
  80eb14:	dfc00117 	ldw	ra,4(sp)
  80eb18:	df000017 	ldw	fp,0(sp)
  80eb1c:	dec00204 	addi	sp,sp,8
  80eb20:	f800283a 	ret

0080eb24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80eb24:	deffed04 	addi	sp,sp,-76
  80eb28:	dfc01215 	stw	ra,72(sp)
  80eb2c:	df001115 	stw	fp,68(sp)
  80eb30:	df001104 	addi	fp,sp,68
  80eb34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80eb38:	e0bfff17 	ldw	r2,-4(fp)
  80eb3c:	10000616 	blt	r2,zero,80eb58 <isatty+0x34>
  80eb40:	e0bfff17 	ldw	r2,-4(fp)
  80eb44:	10c00324 	muli	r3,r2,12
  80eb48:	00802074 	movhi	r2,129
  80eb4c:	108e4a04 	addi	r2,r2,14632
  80eb50:	1885883a 	add	r2,r3,r2
  80eb54:	00000106 	br	80eb5c <isatty+0x38>
  80eb58:	0005883a 	mov	r2,zero
  80eb5c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80eb60:	e0bfef17 	ldw	r2,-68(fp)
  80eb64:	10000e26 	beq	r2,zero,80eba0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80eb68:	e0bfef17 	ldw	r2,-68(fp)
  80eb6c:	10800017 	ldw	r2,0(r2)
  80eb70:	10800817 	ldw	r2,32(r2)
  80eb74:	1000021e 	bne	r2,zero,80eb80 <isatty+0x5c>
    {
      return 1;
  80eb78:	00800044 	movi	r2,1
  80eb7c:	00000d06 	br	80ebb4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80eb80:	e0bff004 	addi	r2,fp,-64
  80eb84:	100b883a 	mov	r5,r2
  80eb88:	e13fff17 	ldw	r4,-4(fp)
  80eb8c:	080e8b80 	call	80e8b8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80eb90:	e0bff117 	ldw	r2,-60(fp)
  80eb94:	10880020 	cmpeqi	r2,r2,8192
  80eb98:	10803fcc 	andi	r2,r2,255
  80eb9c:	00000506 	br	80ebb4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80eba0:	080eae80 	call	80eae8 <alt_get_errno>
  80eba4:	1007883a 	mov	r3,r2
  80eba8:	00801444 	movi	r2,81
  80ebac:	18800015 	stw	r2,0(r3)
    return 0;
  80ebb0:	0005883a 	mov	r2,zero
  }
}
  80ebb4:	e037883a 	mov	sp,fp
  80ebb8:	dfc00117 	ldw	ra,4(sp)
  80ebbc:	df000017 	ldw	fp,0(sp)
  80ebc0:	dec00204 	addi	sp,sp,8
  80ebc4:	f800283a 	ret

0080ebc8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80ebc8:	defffc04 	addi	sp,sp,-16
  80ebcc:	df000315 	stw	fp,12(sp)
  80ebd0:	df000304 	addi	fp,sp,12
  80ebd4:	e13ffd15 	stw	r4,-12(fp)
  80ebd8:	e17ffe15 	stw	r5,-8(fp)
  80ebdc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80ebe0:	e0fffe17 	ldw	r3,-8(fp)
  80ebe4:	e0bffd17 	ldw	r2,-12(fp)
  80ebe8:	18800c26 	beq	r3,r2,80ec1c <alt_load_section+0x54>
  {
    while( to != end )
  80ebec:	00000806 	br	80ec10 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80ebf0:	e0bffe17 	ldw	r2,-8(fp)
  80ebf4:	10c00104 	addi	r3,r2,4
  80ebf8:	e0fffe15 	stw	r3,-8(fp)
  80ebfc:	e0fffd17 	ldw	r3,-12(fp)
  80ec00:	19000104 	addi	r4,r3,4
  80ec04:	e13ffd15 	stw	r4,-12(fp)
  80ec08:	18c00017 	ldw	r3,0(r3)
  80ec0c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80ec10:	e0fffe17 	ldw	r3,-8(fp)
  80ec14:	e0bfff17 	ldw	r2,-4(fp)
  80ec18:	18bff51e 	bne	r3,r2,80ebf0 <__alt_mem_onchip_mem+0xff78ebf0>
    {
      *to++ = *from++;
    }
  }
}
  80ec1c:	0001883a 	nop
  80ec20:	e037883a 	mov	sp,fp
  80ec24:	df000017 	ldw	fp,0(sp)
  80ec28:	dec00104 	addi	sp,sp,4
  80ec2c:	f800283a 	ret

0080ec30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80ec30:	defffe04 	addi	sp,sp,-8
  80ec34:	dfc00115 	stw	ra,4(sp)
  80ec38:	df000015 	stw	fp,0(sp)
  80ec3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80ec40:	01802074 	movhi	r6,129
  80ec44:	31934f04 	addi	r6,r6,19772
  80ec48:	01402074 	movhi	r5,129
  80ec4c:	294c0a04 	addi	r5,r5,12328
  80ec50:	01002074 	movhi	r4,129
  80ec54:	21134f04 	addi	r4,r4,19772
  80ec58:	080ebc80 	call	80ebc8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80ec5c:	01802034 	movhi	r6,128
  80ec60:	31809104 	addi	r6,r6,580
  80ec64:	01402034 	movhi	r5,128
  80ec68:	29400804 	addi	r5,r5,32
  80ec6c:	01002034 	movhi	r4,128
  80ec70:	21000804 	addi	r4,r4,32
  80ec74:	080ebc80 	call	80ebc8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80ec78:	01802074 	movhi	r6,129
  80ec7c:	318c0a04 	addi	r6,r6,12328
  80ec80:	01402074 	movhi	r5,129
  80ec84:	294a2f04 	addi	r5,r5,10428
  80ec88:	01002074 	movhi	r4,129
  80ec8c:	210a2f04 	addi	r4,r4,10428
  80ec90:	080ebc80 	call	80ebc8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80ec94:	0811a180 	call	811a18 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80ec98:	0811e3c0 	call	811e3c <alt_icache_flush_all>
}
  80ec9c:	0001883a 	nop
  80eca0:	e037883a 	mov	sp,fp
  80eca4:	dfc00117 	ldw	ra,4(sp)
  80eca8:	df000017 	ldw	fp,0(sp)
  80ecac:	dec00204 	addi	sp,sp,8
  80ecb0:	f800283a 	ret

0080ecb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ecb4:	defffe04 	addi	sp,sp,-8
  80ecb8:	dfc00115 	stw	ra,4(sp)
  80ecbc:	df000015 	stw	fp,0(sp)
  80ecc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ecc4:	d0a00d17 	ldw	r2,-32716(gp)
  80ecc8:	10000326 	beq	r2,zero,80ecd8 <alt_get_errno+0x24>
  80eccc:	d0a00d17 	ldw	r2,-32716(gp)
  80ecd0:	103ee83a 	callr	r2
  80ecd4:	00000106 	br	80ecdc <alt_get_errno+0x28>
  80ecd8:	d0a76504 	addi	r2,gp,-25196
}
  80ecdc:	e037883a 	mov	sp,fp
  80ece0:	dfc00117 	ldw	ra,4(sp)
  80ece4:	df000017 	ldw	fp,0(sp)
  80ece8:	dec00204 	addi	sp,sp,8
  80ecec:	f800283a 	ret

0080ecf0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80ecf0:	defff904 	addi	sp,sp,-28
  80ecf4:	dfc00615 	stw	ra,24(sp)
  80ecf8:	df000515 	stw	fp,20(sp)
  80ecfc:	df000504 	addi	fp,sp,20
  80ed00:	e13ffd15 	stw	r4,-12(fp)
  80ed04:	e17ffe15 	stw	r5,-8(fp)
  80ed08:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80ed0c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ed10:	e0bffd17 	ldw	r2,-12(fp)
  80ed14:	10000616 	blt	r2,zero,80ed30 <lseek+0x40>
  80ed18:	e0bffd17 	ldw	r2,-12(fp)
  80ed1c:	10c00324 	muli	r3,r2,12
  80ed20:	00802074 	movhi	r2,129
  80ed24:	108e4a04 	addi	r2,r2,14632
  80ed28:	1885883a 	add	r2,r3,r2
  80ed2c:	00000106 	br	80ed34 <lseek+0x44>
  80ed30:	0005883a 	mov	r2,zero
  80ed34:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80ed38:	e0bffc17 	ldw	r2,-16(fp)
  80ed3c:	10001026 	beq	r2,zero,80ed80 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80ed40:	e0bffc17 	ldw	r2,-16(fp)
  80ed44:	10800017 	ldw	r2,0(r2)
  80ed48:	10800717 	ldw	r2,28(r2)
  80ed4c:	10000926 	beq	r2,zero,80ed74 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80ed50:	e0bffc17 	ldw	r2,-16(fp)
  80ed54:	10800017 	ldw	r2,0(r2)
  80ed58:	10800717 	ldw	r2,28(r2)
  80ed5c:	e1bfff17 	ldw	r6,-4(fp)
  80ed60:	e17ffe17 	ldw	r5,-8(fp)
  80ed64:	e13ffc17 	ldw	r4,-16(fp)
  80ed68:	103ee83a 	callr	r2
  80ed6c:	e0bffb15 	stw	r2,-20(fp)
  80ed70:	00000506 	br	80ed88 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80ed74:	00bfde84 	movi	r2,-134
  80ed78:	e0bffb15 	stw	r2,-20(fp)
  80ed7c:	00000206 	br	80ed88 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80ed80:	00bfebc4 	movi	r2,-81
  80ed84:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80ed88:	e0bffb17 	ldw	r2,-20(fp)
  80ed8c:	1000070e 	bge	r2,zero,80edac <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80ed90:	080ecb40 	call	80ecb4 <alt_get_errno>
  80ed94:	1007883a 	mov	r3,r2
  80ed98:	e0bffb17 	ldw	r2,-20(fp)
  80ed9c:	0085c83a 	sub	r2,zero,r2
  80eda0:	18800015 	stw	r2,0(r3)
    rc = -1;
  80eda4:	00bfffc4 	movi	r2,-1
  80eda8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80edac:	e0bffb17 	ldw	r2,-20(fp)
}
  80edb0:	e037883a 	mov	sp,fp
  80edb4:	dfc00117 	ldw	ra,4(sp)
  80edb8:	df000017 	ldw	fp,0(sp)
  80edbc:	dec00204 	addi	sp,sp,8
  80edc0:	f800283a 	ret

0080edc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80edc4:	defffd04 	addi	sp,sp,-12
  80edc8:	dfc00215 	stw	ra,8(sp)
  80edcc:	df000115 	stw	fp,4(sp)
  80edd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80edd4:	0009883a 	mov	r4,zero
  80edd8:	080f6340 	call	80f634 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80eddc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80ede0:	080f66c0 	call	80f66c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80ede4:	01802074 	movhi	r6,129
  80ede8:	318b5c04 	addi	r6,r6,11632
  80edec:	01402074 	movhi	r5,129
  80edf0:	294b5c04 	addi	r5,r5,11632
  80edf4:	01002074 	movhi	r4,129
  80edf8:	210b5c04 	addi	r4,r4,11632
  80edfc:	08121d40 	call	8121d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80ee00:	0811b400 	call	811b40 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80ee04:	01002074 	movhi	r4,129
  80ee08:	2106e804 	addi	r4,r4,7072
  80ee0c:	08125280 	call	812528 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80ee10:	d0a76d17 	ldw	r2,-25164(gp)
  80ee14:	d0e76e17 	ldw	r3,-25160(gp)
  80ee18:	d1276f17 	ldw	r4,-25156(gp)
  80ee1c:	200d883a 	mov	r6,r4
  80ee20:	180b883a 	mov	r5,r3
  80ee24:	1009883a 	mov	r4,r2
  80ee28:	0800dac0 	call	800dac <main>
  80ee2c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80ee30:	01000044 	movi	r4,1
  80ee34:	080e7800 	call	80e780 <close>
  exit (result);
  80ee38:	e13fff17 	ldw	r4,-4(fp)
  80ee3c:	081253c0 	call	81253c <exit>

0080ee40 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80ee40:	defffe04 	addi	sp,sp,-8
  80ee44:	df000115 	stw	fp,4(sp)
  80ee48:	df000104 	addi	fp,sp,4
  80ee4c:	e13fff15 	stw	r4,-4(fp)
}
  80ee50:	0001883a 	nop
  80ee54:	e037883a 	mov	sp,fp
  80ee58:	df000017 	ldw	fp,0(sp)
  80ee5c:	dec00104 	addi	sp,sp,4
  80ee60:	f800283a 	ret

0080ee64 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80ee64:	defffe04 	addi	sp,sp,-8
  80ee68:	df000115 	stw	fp,4(sp)
  80ee6c:	df000104 	addi	fp,sp,4
  80ee70:	e13fff15 	stw	r4,-4(fp)
}
  80ee74:	0001883a 	nop
  80ee78:	e037883a 	mov	sp,fp
  80ee7c:	df000017 	ldw	fp,0(sp)
  80ee80:	dec00104 	addi	sp,sp,4
  80ee84:	f800283a 	ret

0080ee88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ee88:	defffe04 	addi	sp,sp,-8
  80ee8c:	dfc00115 	stw	ra,4(sp)
  80ee90:	df000015 	stw	fp,0(sp)
  80ee94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ee98:	d0a00d17 	ldw	r2,-32716(gp)
  80ee9c:	10000326 	beq	r2,zero,80eeac <alt_get_errno+0x24>
  80eea0:	d0a00d17 	ldw	r2,-32716(gp)
  80eea4:	103ee83a 	callr	r2
  80eea8:	00000106 	br	80eeb0 <alt_get_errno+0x28>
  80eeac:	d0a76504 	addi	r2,gp,-25196
}
  80eeb0:	e037883a 	mov	sp,fp
  80eeb4:	dfc00117 	ldw	ra,4(sp)
  80eeb8:	df000017 	ldw	fp,0(sp)
  80eebc:	dec00204 	addi	sp,sp,8
  80eec0:	f800283a 	ret

0080eec4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80eec4:	defffd04 	addi	sp,sp,-12
  80eec8:	df000215 	stw	fp,8(sp)
  80eecc:	df000204 	addi	fp,sp,8
  80eed0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80eed4:	e0bfff17 	ldw	r2,-4(fp)
  80eed8:	10800217 	ldw	r2,8(r2)
  80eedc:	10d00034 	orhi	r3,r2,16384
  80eee0:	e0bfff17 	ldw	r2,-4(fp)
  80eee4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80eee8:	e03ffe15 	stw	zero,-8(fp)
  80eeec:	00001d06 	br	80ef64 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80eef0:	00802074 	movhi	r2,129
  80eef4:	108e4a04 	addi	r2,r2,14632
  80eef8:	e0fffe17 	ldw	r3,-8(fp)
  80eefc:	18c00324 	muli	r3,r3,12
  80ef00:	10c5883a 	add	r2,r2,r3
  80ef04:	10c00017 	ldw	r3,0(r2)
  80ef08:	e0bfff17 	ldw	r2,-4(fp)
  80ef0c:	10800017 	ldw	r2,0(r2)
  80ef10:	1880111e 	bne	r3,r2,80ef58 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80ef14:	00802074 	movhi	r2,129
  80ef18:	108e4a04 	addi	r2,r2,14632
  80ef1c:	e0fffe17 	ldw	r3,-8(fp)
  80ef20:	18c00324 	muli	r3,r3,12
  80ef24:	10c5883a 	add	r2,r2,r3
  80ef28:	10800204 	addi	r2,r2,8
  80ef2c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80ef30:	1000090e 	bge	r2,zero,80ef58 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80ef34:	e0bffe17 	ldw	r2,-8(fp)
  80ef38:	10c00324 	muli	r3,r2,12
  80ef3c:	00802074 	movhi	r2,129
  80ef40:	108e4a04 	addi	r2,r2,14632
  80ef44:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80ef48:	e0bfff17 	ldw	r2,-4(fp)
  80ef4c:	18800226 	beq	r3,r2,80ef58 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80ef50:	00bffcc4 	movi	r2,-13
  80ef54:	00000806 	br	80ef78 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80ef58:	e0bffe17 	ldw	r2,-8(fp)
  80ef5c:	10800044 	addi	r2,r2,1
  80ef60:	e0bffe15 	stw	r2,-8(fp)
  80ef64:	d0a00c17 	ldw	r2,-32720(gp)
  80ef68:	1007883a 	mov	r3,r2
  80ef6c:	e0bffe17 	ldw	r2,-8(fp)
  80ef70:	18bfdf2e 	bgeu	r3,r2,80eef0 <__alt_mem_onchip_mem+0xff78eef0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80ef74:	0005883a 	mov	r2,zero
}
  80ef78:	e037883a 	mov	sp,fp
  80ef7c:	df000017 	ldw	fp,0(sp)
  80ef80:	dec00104 	addi	sp,sp,4
  80ef84:	f800283a 	ret

0080ef88 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80ef88:	defff604 	addi	sp,sp,-40
  80ef8c:	dfc00915 	stw	ra,36(sp)
  80ef90:	df000815 	stw	fp,32(sp)
  80ef94:	df000804 	addi	fp,sp,32
  80ef98:	e13ffd15 	stw	r4,-12(fp)
  80ef9c:	e17ffe15 	stw	r5,-8(fp)
  80efa0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80efa4:	00bfffc4 	movi	r2,-1
  80efa8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80efac:	00bffb44 	movi	r2,-19
  80efb0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80efb4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80efb8:	d1600a04 	addi	r5,gp,-32728
  80efbc:	e13ffd17 	ldw	r4,-12(fp)
  80efc0:	0811c000 	call	811c00 <alt_find_dev>
  80efc4:	e0bff815 	stw	r2,-32(fp)
  80efc8:	e0bff817 	ldw	r2,-32(fp)
  80efcc:	1000051e 	bne	r2,zero,80efe4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80efd0:	e13ffd17 	ldw	r4,-12(fp)
  80efd4:	0811c900 	call	811c90 <alt_find_file>
  80efd8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80efdc:	00800044 	movi	r2,1
  80efe0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80efe4:	e0bff817 	ldw	r2,-32(fp)
  80efe8:	10002926 	beq	r2,zero,80f090 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80efec:	e13ff817 	ldw	r4,-32(fp)
  80eff0:	0811d980 	call	811d98 <alt_get_fd>
  80eff4:	e0bff915 	stw	r2,-28(fp)
  80eff8:	e0bff917 	ldw	r2,-28(fp)
  80effc:	1000030e 	bge	r2,zero,80f00c <open+0x84>
    {
      status = index;
  80f000:	e0bff917 	ldw	r2,-28(fp)
  80f004:	e0bffa15 	stw	r2,-24(fp)
  80f008:	00002306 	br	80f098 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f00c:	e0bff917 	ldw	r2,-28(fp)
  80f010:	10c00324 	muli	r3,r2,12
  80f014:	00802074 	movhi	r2,129
  80f018:	108e4a04 	addi	r2,r2,14632
  80f01c:	1885883a 	add	r2,r3,r2
  80f020:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f024:	e0fffe17 	ldw	r3,-8(fp)
  80f028:	00900034 	movhi	r2,16384
  80f02c:	10bfffc4 	addi	r2,r2,-1
  80f030:	1886703a 	and	r3,r3,r2
  80f034:	e0bffc17 	ldw	r2,-16(fp)
  80f038:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f03c:	e0bffb17 	ldw	r2,-20(fp)
  80f040:	1000051e 	bne	r2,zero,80f058 <open+0xd0>
  80f044:	e13ffc17 	ldw	r4,-16(fp)
  80f048:	080eec40 	call	80eec4 <alt_file_locked>
  80f04c:	e0bffa15 	stw	r2,-24(fp)
  80f050:	e0bffa17 	ldw	r2,-24(fp)
  80f054:	10001016 	blt	r2,zero,80f098 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f058:	e0bff817 	ldw	r2,-32(fp)
  80f05c:	10800317 	ldw	r2,12(r2)
  80f060:	10000826 	beq	r2,zero,80f084 <open+0xfc>
  80f064:	e0bff817 	ldw	r2,-32(fp)
  80f068:	10800317 	ldw	r2,12(r2)
  80f06c:	e1ffff17 	ldw	r7,-4(fp)
  80f070:	e1bffe17 	ldw	r6,-8(fp)
  80f074:	e17ffd17 	ldw	r5,-12(fp)
  80f078:	e13ffc17 	ldw	r4,-16(fp)
  80f07c:	103ee83a 	callr	r2
  80f080:	00000106 	br	80f088 <open+0x100>
  80f084:	0005883a 	mov	r2,zero
  80f088:	e0bffa15 	stw	r2,-24(fp)
  80f08c:	00000206 	br	80f098 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80f090:	00bffb44 	movi	r2,-19
  80f094:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80f098:	e0bffa17 	ldw	r2,-24(fp)
  80f09c:	1000090e 	bge	r2,zero,80f0c4 <open+0x13c>
  {
    alt_release_fd (index);  
  80f0a0:	e13ff917 	ldw	r4,-28(fp)
  80f0a4:	080f2140 	call	80f214 <alt_release_fd>
    ALT_ERRNO = -status;
  80f0a8:	080ee880 	call	80ee88 <alt_get_errno>
  80f0ac:	1007883a 	mov	r3,r2
  80f0b0:	e0bffa17 	ldw	r2,-24(fp)
  80f0b4:	0085c83a 	sub	r2,zero,r2
  80f0b8:	18800015 	stw	r2,0(r3)
    return -1;
  80f0bc:	00bfffc4 	movi	r2,-1
  80f0c0:	00000106 	br	80f0c8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80f0c4:	e0bff917 	ldw	r2,-28(fp)
}
  80f0c8:	e037883a 	mov	sp,fp
  80f0cc:	dfc00117 	ldw	ra,4(sp)
  80f0d0:	df000017 	ldw	fp,0(sp)
  80f0d4:	dec00204 	addi	sp,sp,8
  80f0d8:	f800283a 	ret

0080f0dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f0dc:	defffe04 	addi	sp,sp,-8
  80f0e0:	dfc00115 	stw	ra,4(sp)
  80f0e4:	df000015 	stw	fp,0(sp)
  80f0e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f0ec:	d0a00d17 	ldw	r2,-32716(gp)
  80f0f0:	10000326 	beq	r2,zero,80f100 <alt_get_errno+0x24>
  80f0f4:	d0a00d17 	ldw	r2,-32716(gp)
  80f0f8:	103ee83a 	callr	r2
  80f0fc:	00000106 	br	80f104 <alt_get_errno+0x28>
  80f100:	d0a76504 	addi	r2,gp,-25196
}
  80f104:	e037883a 	mov	sp,fp
  80f108:	dfc00117 	ldw	ra,4(sp)
  80f10c:	df000017 	ldw	fp,0(sp)
  80f110:	dec00204 	addi	sp,sp,8
  80f114:	f800283a 	ret

0080f118 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80f118:	defff904 	addi	sp,sp,-28
  80f11c:	dfc00615 	stw	ra,24(sp)
  80f120:	df000515 	stw	fp,20(sp)
  80f124:	df000504 	addi	fp,sp,20
  80f128:	e13ffd15 	stw	r4,-12(fp)
  80f12c:	e17ffe15 	stw	r5,-8(fp)
  80f130:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f134:	e0bffd17 	ldw	r2,-12(fp)
  80f138:	10000616 	blt	r2,zero,80f154 <read+0x3c>
  80f13c:	e0bffd17 	ldw	r2,-12(fp)
  80f140:	10c00324 	muli	r3,r2,12
  80f144:	00802074 	movhi	r2,129
  80f148:	108e4a04 	addi	r2,r2,14632
  80f14c:	1885883a 	add	r2,r3,r2
  80f150:	00000106 	br	80f158 <read+0x40>
  80f154:	0005883a 	mov	r2,zero
  80f158:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f15c:	e0bffb17 	ldw	r2,-20(fp)
  80f160:	10002226 	beq	r2,zero,80f1ec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f164:	e0bffb17 	ldw	r2,-20(fp)
  80f168:	10800217 	ldw	r2,8(r2)
  80f16c:	108000cc 	andi	r2,r2,3
  80f170:	10800060 	cmpeqi	r2,r2,1
  80f174:	1000181e 	bne	r2,zero,80f1d8 <read+0xc0>
        (fd->dev->read))
  80f178:	e0bffb17 	ldw	r2,-20(fp)
  80f17c:	10800017 	ldw	r2,0(r2)
  80f180:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80f184:	10001426 	beq	r2,zero,80f1d8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80f188:	e0bffb17 	ldw	r2,-20(fp)
  80f18c:	10800017 	ldw	r2,0(r2)
  80f190:	10800517 	ldw	r2,20(r2)
  80f194:	e0ffff17 	ldw	r3,-4(fp)
  80f198:	180d883a 	mov	r6,r3
  80f19c:	e17ffe17 	ldw	r5,-8(fp)
  80f1a0:	e13ffb17 	ldw	r4,-20(fp)
  80f1a4:	103ee83a 	callr	r2
  80f1a8:	e0bffc15 	stw	r2,-16(fp)
  80f1ac:	e0bffc17 	ldw	r2,-16(fp)
  80f1b0:	1000070e 	bge	r2,zero,80f1d0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80f1b4:	080f0dc0 	call	80f0dc <alt_get_errno>
  80f1b8:	1007883a 	mov	r3,r2
  80f1bc:	e0bffc17 	ldw	r2,-16(fp)
  80f1c0:	0085c83a 	sub	r2,zero,r2
  80f1c4:	18800015 	stw	r2,0(r3)
          return -1;
  80f1c8:	00bfffc4 	movi	r2,-1
  80f1cc:	00000c06 	br	80f200 <read+0xe8>
        }
        return rval;
  80f1d0:	e0bffc17 	ldw	r2,-16(fp)
  80f1d4:	00000a06 	br	80f200 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80f1d8:	080f0dc0 	call	80f0dc <alt_get_errno>
  80f1dc:	1007883a 	mov	r3,r2
  80f1e0:	00800344 	movi	r2,13
  80f1e4:	18800015 	stw	r2,0(r3)
  80f1e8:	00000406 	br	80f1fc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80f1ec:	080f0dc0 	call	80f0dc <alt_get_errno>
  80f1f0:	1007883a 	mov	r3,r2
  80f1f4:	00801444 	movi	r2,81
  80f1f8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f1fc:	00bfffc4 	movi	r2,-1
}
  80f200:	e037883a 	mov	sp,fp
  80f204:	dfc00117 	ldw	ra,4(sp)
  80f208:	df000017 	ldw	fp,0(sp)
  80f20c:	dec00204 	addi	sp,sp,8
  80f210:	f800283a 	ret

0080f214 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80f214:	defffe04 	addi	sp,sp,-8
  80f218:	df000115 	stw	fp,4(sp)
  80f21c:	df000104 	addi	fp,sp,4
  80f220:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80f224:	e0bfff17 	ldw	r2,-4(fp)
  80f228:	108000d0 	cmplti	r2,r2,3
  80f22c:	10000d1e 	bne	r2,zero,80f264 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80f230:	00802074 	movhi	r2,129
  80f234:	108e4a04 	addi	r2,r2,14632
  80f238:	e0ffff17 	ldw	r3,-4(fp)
  80f23c:	18c00324 	muli	r3,r3,12
  80f240:	10c5883a 	add	r2,r2,r3
  80f244:	10800204 	addi	r2,r2,8
  80f248:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80f24c:	00802074 	movhi	r2,129
  80f250:	108e4a04 	addi	r2,r2,14632
  80f254:	e0ffff17 	ldw	r3,-4(fp)
  80f258:	18c00324 	muli	r3,r3,12
  80f25c:	10c5883a 	add	r2,r2,r3
  80f260:	10000015 	stw	zero,0(r2)
  }
}
  80f264:	0001883a 	nop
  80f268:	e037883a 	mov	sp,fp
  80f26c:	df000017 	ldw	fp,0(sp)
  80f270:	dec00104 	addi	sp,sp,4
  80f274:	f800283a 	ret

0080f278 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80f278:	defff904 	addi	sp,sp,-28
  80f27c:	df000615 	stw	fp,24(sp)
  80f280:	df000604 	addi	fp,sp,24
  80f284:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f288:	0005303a 	rdctl	r2,status
  80f28c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f290:	e0fffe17 	ldw	r3,-8(fp)
  80f294:	00bfff84 	movi	r2,-2
  80f298:	1884703a 	and	r2,r3,r2
  80f29c:	1001703a 	wrctl	status,r2
  
  return context;
  80f2a0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80f2a4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80f2a8:	d0a00f17 	ldw	r2,-32708(gp)
  80f2ac:	10c000c4 	addi	r3,r2,3
  80f2b0:	00bfff04 	movi	r2,-4
  80f2b4:	1884703a 	and	r2,r3,r2
  80f2b8:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80f2bc:	d0e00f17 	ldw	r3,-32708(gp)
  80f2c0:	e0bfff17 	ldw	r2,-4(fp)
  80f2c4:	1887883a 	add	r3,r3,r2
  80f2c8:	00804034 	movhi	r2,256
  80f2cc:	10800004 	addi	r2,r2,0
  80f2d0:	10c0062e 	bgeu	r2,r3,80f2ec <sbrk+0x74>
  80f2d4:	e0bffb17 	ldw	r2,-20(fp)
  80f2d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2dc:	e0bffa17 	ldw	r2,-24(fp)
  80f2e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80f2e4:	00bfffc4 	movi	r2,-1
  80f2e8:	00000b06 	br	80f318 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80f2ec:	d0a00f17 	ldw	r2,-32708(gp)
  80f2f0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80f2f4:	d0e00f17 	ldw	r3,-32708(gp)
  80f2f8:	e0bfff17 	ldw	r2,-4(fp)
  80f2fc:	1885883a 	add	r2,r3,r2
  80f300:	d0a00f15 	stw	r2,-32708(gp)
  80f304:	e0bffb17 	ldw	r2,-20(fp)
  80f308:	e0bffc15 	stw	r2,-16(fp)
  80f30c:	e0bffc17 	ldw	r2,-16(fp)
  80f310:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80f314:	e0bffd17 	ldw	r2,-12(fp)
} 
  80f318:	e037883a 	mov	sp,fp
  80f31c:	df000017 	ldw	fp,0(sp)
  80f320:	dec00104 	addi	sp,sp,4
  80f324:	f800283a 	ret

0080f328 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80f328:	defffa04 	addi	sp,sp,-24
  80f32c:	df000515 	stw	fp,20(sp)
  80f330:	df000504 	addi	fp,sp,20
  80f334:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f338:	0005303a 	rdctl	r2,status
  80f33c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f340:	e0fffc17 	ldw	r3,-16(fp)
  80f344:	00bfff84 	movi	r2,-2
  80f348:	1884703a 	and	r2,r3,r2
  80f34c:	1001703a 	wrctl	status,r2
  
  return context;
  80f350:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80f354:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80f358:	e0bfff17 	ldw	r2,-4(fp)
  80f35c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80f360:	e0bffd17 	ldw	r2,-12(fp)
  80f364:	10800017 	ldw	r2,0(r2)
  80f368:	e0fffd17 	ldw	r3,-12(fp)
  80f36c:	18c00117 	ldw	r3,4(r3)
  80f370:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80f374:	e0bffd17 	ldw	r2,-12(fp)
  80f378:	10800117 	ldw	r2,4(r2)
  80f37c:	e0fffd17 	ldw	r3,-12(fp)
  80f380:	18c00017 	ldw	r3,0(r3)
  80f384:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80f388:	e0bffd17 	ldw	r2,-12(fp)
  80f38c:	e0fffd17 	ldw	r3,-12(fp)
  80f390:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80f394:	e0bffd17 	ldw	r2,-12(fp)
  80f398:	e0fffd17 	ldw	r3,-12(fp)
  80f39c:	10c00015 	stw	r3,0(r2)
  80f3a0:	e0bffb17 	ldw	r2,-20(fp)
  80f3a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f3a8:	e0bffe17 	ldw	r2,-8(fp)
  80f3ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80f3b0:	0001883a 	nop
  80f3b4:	e037883a 	mov	sp,fp
  80f3b8:	df000017 	ldw	fp,0(sp)
  80f3bc:	dec00104 	addi	sp,sp,4
  80f3c0:	f800283a 	ret

0080f3c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80f3c4:	defffb04 	addi	sp,sp,-20
  80f3c8:	dfc00415 	stw	ra,16(sp)
  80f3cc:	df000315 	stw	fp,12(sp)
  80f3d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80f3d4:	d0a01017 	ldw	r2,-32704(gp)
  80f3d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80f3dc:	d0a77117 	ldw	r2,-25148(gp)
  80f3e0:	10800044 	addi	r2,r2,1
  80f3e4:	d0a77115 	stw	r2,-25148(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f3e8:	00002e06 	br	80f4a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80f3ec:	e0bffd17 	ldw	r2,-12(fp)
  80f3f0:	10800017 	ldw	r2,0(r2)
  80f3f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80f3f8:	e0bffd17 	ldw	r2,-12(fp)
  80f3fc:	10800403 	ldbu	r2,16(r2)
  80f400:	10803fcc 	andi	r2,r2,255
  80f404:	10000426 	beq	r2,zero,80f418 <alt_tick+0x54>
  80f408:	d0a77117 	ldw	r2,-25148(gp)
  80f40c:	1000021e 	bne	r2,zero,80f418 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80f410:	e0bffd17 	ldw	r2,-12(fp)
  80f414:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80f418:	e0bffd17 	ldw	r2,-12(fp)
  80f41c:	10800217 	ldw	r2,8(r2)
  80f420:	d0e77117 	ldw	r3,-25148(gp)
  80f424:	18801d36 	bltu	r3,r2,80f49c <alt_tick+0xd8>
  80f428:	e0bffd17 	ldw	r2,-12(fp)
  80f42c:	10800403 	ldbu	r2,16(r2)
  80f430:	10803fcc 	andi	r2,r2,255
  80f434:	1000191e 	bne	r2,zero,80f49c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80f438:	e0bffd17 	ldw	r2,-12(fp)
  80f43c:	10800317 	ldw	r2,12(r2)
  80f440:	e0fffd17 	ldw	r3,-12(fp)
  80f444:	18c00517 	ldw	r3,20(r3)
  80f448:	1809883a 	mov	r4,r3
  80f44c:	103ee83a 	callr	r2
  80f450:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80f454:	e0bfff17 	ldw	r2,-4(fp)
  80f458:	1000031e 	bne	r2,zero,80f468 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80f45c:	e13ffd17 	ldw	r4,-12(fp)
  80f460:	080f3280 	call	80f328 <alt_alarm_stop>
  80f464:	00000d06 	br	80f49c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80f468:	e0bffd17 	ldw	r2,-12(fp)
  80f46c:	10c00217 	ldw	r3,8(r2)
  80f470:	e0bfff17 	ldw	r2,-4(fp)
  80f474:	1887883a 	add	r3,r3,r2
  80f478:	e0bffd17 	ldw	r2,-12(fp)
  80f47c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80f480:	e0bffd17 	ldw	r2,-12(fp)
  80f484:	10c00217 	ldw	r3,8(r2)
  80f488:	d0a77117 	ldw	r2,-25148(gp)
  80f48c:	1880032e 	bgeu	r3,r2,80f49c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80f490:	e0bffd17 	ldw	r2,-12(fp)
  80f494:	00c00044 	movi	r3,1
  80f498:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80f49c:	e0bffe17 	ldw	r2,-8(fp)
  80f4a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80f4a4:	e0fffd17 	ldw	r3,-12(fp)
  80f4a8:	d0a01004 	addi	r2,gp,-32704
  80f4ac:	18bfcf1e 	bne	r3,r2,80f3ec <__alt_mem_onchip_mem+0xff78f3ec>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80f4b0:	0001883a 	nop
}
  80f4b4:	0001883a 	nop
  80f4b8:	e037883a 	mov	sp,fp
  80f4bc:	dfc00117 	ldw	ra,4(sp)
  80f4c0:	df000017 	ldw	fp,0(sp)
  80f4c4:	dec00204 	addi	sp,sp,8
  80f4c8:	f800283a 	ret

0080f4cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f4cc:	defffe04 	addi	sp,sp,-8
  80f4d0:	dfc00115 	stw	ra,4(sp)
  80f4d4:	df000015 	stw	fp,0(sp)
  80f4d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f4dc:	d0a00d17 	ldw	r2,-32716(gp)
  80f4e0:	10000326 	beq	r2,zero,80f4f0 <alt_get_errno+0x24>
  80f4e4:	d0a00d17 	ldw	r2,-32716(gp)
  80f4e8:	103ee83a 	callr	r2
  80f4ec:	00000106 	br	80f4f4 <alt_get_errno+0x28>
  80f4f0:	d0a76504 	addi	r2,gp,-25196
}
  80f4f4:	e037883a 	mov	sp,fp
  80f4f8:	dfc00117 	ldw	ra,4(sp)
  80f4fc:	df000017 	ldw	fp,0(sp)
  80f500:	dec00204 	addi	sp,sp,8
  80f504:	f800283a 	ret

0080f508 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80f508:	defff904 	addi	sp,sp,-28
  80f50c:	dfc00615 	stw	ra,24(sp)
  80f510:	df000515 	stw	fp,20(sp)
  80f514:	df000504 	addi	fp,sp,20
  80f518:	e13ffd15 	stw	r4,-12(fp)
  80f51c:	e17ffe15 	stw	r5,-8(fp)
  80f520:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80f524:	e0bffd17 	ldw	r2,-12(fp)
  80f528:	10000616 	blt	r2,zero,80f544 <write+0x3c>
  80f52c:	e0bffd17 	ldw	r2,-12(fp)
  80f530:	10c00324 	muli	r3,r2,12
  80f534:	00802074 	movhi	r2,129
  80f538:	108e4a04 	addi	r2,r2,14632
  80f53c:	1885883a 	add	r2,r3,r2
  80f540:	00000106 	br	80f548 <write+0x40>
  80f544:	0005883a 	mov	r2,zero
  80f548:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80f54c:	e0bffb17 	ldw	r2,-20(fp)
  80f550:	10002126 	beq	r2,zero,80f5d8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80f554:	e0bffb17 	ldw	r2,-20(fp)
  80f558:	10800217 	ldw	r2,8(r2)
  80f55c:	108000cc 	andi	r2,r2,3
  80f560:	10001826 	beq	r2,zero,80f5c4 <write+0xbc>
  80f564:	e0bffb17 	ldw	r2,-20(fp)
  80f568:	10800017 	ldw	r2,0(r2)
  80f56c:	10800617 	ldw	r2,24(r2)
  80f570:	10001426 	beq	r2,zero,80f5c4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80f574:	e0bffb17 	ldw	r2,-20(fp)
  80f578:	10800017 	ldw	r2,0(r2)
  80f57c:	10800617 	ldw	r2,24(r2)
  80f580:	e0ffff17 	ldw	r3,-4(fp)
  80f584:	180d883a 	mov	r6,r3
  80f588:	e17ffe17 	ldw	r5,-8(fp)
  80f58c:	e13ffb17 	ldw	r4,-20(fp)
  80f590:	103ee83a 	callr	r2
  80f594:	e0bffc15 	stw	r2,-16(fp)
  80f598:	e0bffc17 	ldw	r2,-16(fp)
  80f59c:	1000070e 	bge	r2,zero,80f5bc <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80f5a0:	080f4cc0 	call	80f4cc <alt_get_errno>
  80f5a4:	1007883a 	mov	r3,r2
  80f5a8:	e0bffc17 	ldw	r2,-16(fp)
  80f5ac:	0085c83a 	sub	r2,zero,r2
  80f5b0:	18800015 	stw	r2,0(r3)
        return -1;
  80f5b4:	00bfffc4 	movi	r2,-1
  80f5b8:	00000c06 	br	80f5ec <write+0xe4>
      }
      return rval;
  80f5bc:	e0bffc17 	ldw	r2,-16(fp)
  80f5c0:	00000a06 	br	80f5ec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80f5c4:	080f4cc0 	call	80f4cc <alt_get_errno>
  80f5c8:	1007883a 	mov	r3,r2
  80f5cc:	00800344 	movi	r2,13
  80f5d0:	18800015 	stw	r2,0(r3)
  80f5d4:	00000406 	br	80f5e8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80f5d8:	080f4cc0 	call	80f4cc <alt_get_errno>
  80f5dc:	1007883a 	mov	r3,r2
  80f5e0:	00801444 	movi	r2,81
  80f5e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80f5e8:	00bfffc4 	movi	r2,-1
}
  80f5ec:	e037883a 	mov	sp,fp
  80f5f0:	dfc00117 	ldw	ra,4(sp)
  80f5f4:	df000017 	ldw	fp,0(sp)
  80f5f8:	dec00204 	addi	sp,sp,8
  80f5fc:	f800283a 	ret

0080f600 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80f600:	defffd04 	addi	sp,sp,-12
  80f604:	dfc00215 	stw	ra,8(sp)
  80f608:	df000115 	stw	fp,4(sp)
  80f60c:	df000104 	addi	fp,sp,4
  80f610:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80f614:	d1600a04 	addi	r5,gp,-32728
  80f618:	e13fff17 	ldw	r4,-4(fp)
  80f61c:	0811a9c0 	call	811a9c <alt_dev_llist_insert>
}
  80f620:	e037883a 	mov	sp,fp
  80f624:	dfc00117 	ldw	ra,4(sp)
  80f628:	df000017 	ldw	fp,0(sp)
  80f62c:	dec00204 	addi	sp,sp,8
  80f630:	f800283a 	ret

0080f634 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80f634:	defffd04 	addi	sp,sp,-12
  80f638:	dfc00215 	stw	ra,8(sp)
  80f63c:	df000115 	stw	fp,4(sp)
  80f640:	df000104 	addi	fp,sp,4
  80f644:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  80f648:	08122800 	call	812280 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80f64c:	00800044 	movi	r2,1
  80f650:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80f654:	0001883a 	nop
  80f658:	e037883a 	mov	sp,fp
  80f65c:	dfc00117 	ldw	ra,4(sp)
  80f660:	df000017 	ldw	fp,0(sp)
  80f664:	dec00204 	addi	sp,sp,8
  80f668:	f800283a 	ret

0080f66c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80f66c:	defffe04 	addi	sp,sp,-8
  80f670:	dfc00115 	stw	ra,4(sp)
  80f674:	df000015 	stw	fp,0(sp)
  80f678:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  80f67c:	01c0fa04 	movi	r7,1000
  80f680:	01800084 	movi	r6,2
  80f684:	000b883a 	mov	r5,zero
  80f688:	01004434 	movhi	r4,272
  80f68c:	21040804 	addi	r4,r4,4128
  80f690:	08110c40 	call	8110c4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  80f694:	01800044 	movi	r6,1
  80f698:	000b883a 	mov	r5,zero
  80f69c:	01002074 	movhi	r4,129
  80f6a0:	210eb404 	addi	r4,r4,15056
  80f6a4:	080f86c0 	call	80f86c <altera_avalon_jtag_uart_init>
  80f6a8:	01002074 	movhi	r4,129
  80f6ac:	210eaa04 	addi	r4,r4,15016
  80f6b0:	080f6000 	call	80f600 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  80f6b4:	01002074 	movhi	r4,129
  80f6b8:	2112cc04 	addi	r4,r4,19248
  80f6bc:	0810eb80 	call	810eb8 <altera_avalon_lcd_16207_init>
  80f6c0:	01002074 	movhi	r4,129
  80f6c4:	2112c204 	addi	r4,r4,19208
  80f6c8:	080f6000 	call	80f600 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  80f6cc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80f6d0:	000d883a 	mov	r6,zero
  80f6d4:	000b883a 	mov	r5,zero
  80f6d8:	01002074 	movhi	r4,129
  80f6dc:	21131404 	addi	r4,r4,19536
  80f6e0:	08112500 	call	811250 <altera_avalon_uart_init>
  80f6e4:	01002074 	movhi	r4,129
  80f6e8:	21130a04 	addi	r4,r4,19496
  80f6ec:	080f6000 	call	80f600 <alt_dev_reg>
}
  80f6f0:	0001883a 	nop
  80f6f4:	e037883a 	mov	sp,fp
  80f6f8:	dfc00117 	ldw	ra,4(sp)
  80f6fc:	df000017 	ldw	fp,0(sp)
  80f700:	dec00204 	addi	sp,sp,8
  80f704:	f800283a 	ret

0080f708 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80f708:	defffa04 	addi	sp,sp,-24
  80f70c:	dfc00515 	stw	ra,20(sp)
  80f710:	df000415 	stw	fp,16(sp)
  80f714:	df000404 	addi	fp,sp,16
  80f718:	e13ffd15 	stw	r4,-12(fp)
  80f71c:	e17ffe15 	stw	r5,-8(fp)
  80f720:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f724:	e0bffd17 	ldw	r2,-12(fp)
  80f728:	10800017 	ldw	r2,0(r2)
  80f72c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80f730:	e0bffc17 	ldw	r2,-16(fp)
  80f734:	10c00a04 	addi	r3,r2,40
  80f738:	e0bffd17 	ldw	r2,-12(fp)
  80f73c:	10800217 	ldw	r2,8(r2)
  80f740:	100f883a 	mov	r7,r2
  80f744:	e1bfff17 	ldw	r6,-4(fp)
  80f748:	e17ffe17 	ldw	r5,-8(fp)
  80f74c:	1809883a 	mov	r4,r3
  80f750:	080fd300 	call	80fd30 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80f754:	e037883a 	mov	sp,fp
  80f758:	dfc00117 	ldw	ra,4(sp)
  80f75c:	df000017 	ldw	fp,0(sp)
  80f760:	dec00204 	addi	sp,sp,8
  80f764:	f800283a 	ret

0080f768 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80f768:	defffa04 	addi	sp,sp,-24
  80f76c:	dfc00515 	stw	ra,20(sp)
  80f770:	df000415 	stw	fp,16(sp)
  80f774:	df000404 	addi	fp,sp,16
  80f778:	e13ffd15 	stw	r4,-12(fp)
  80f77c:	e17ffe15 	stw	r5,-8(fp)
  80f780:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f784:	e0bffd17 	ldw	r2,-12(fp)
  80f788:	10800017 	ldw	r2,0(r2)
  80f78c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80f790:	e0bffc17 	ldw	r2,-16(fp)
  80f794:	10c00a04 	addi	r3,r2,40
  80f798:	e0bffd17 	ldw	r2,-12(fp)
  80f79c:	10800217 	ldw	r2,8(r2)
  80f7a0:	100f883a 	mov	r7,r2
  80f7a4:	e1bfff17 	ldw	r6,-4(fp)
  80f7a8:	e17ffe17 	ldw	r5,-8(fp)
  80f7ac:	1809883a 	mov	r4,r3
  80f7b0:	080ff4c0 	call	80ff4c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80f7b4:	e037883a 	mov	sp,fp
  80f7b8:	dfc00117 	ldw	ra,4(sp)
  80f7bc:	df000017 	ldw	fp,0(sp)
  80f7c0:	dec00204 	addi	sp,sp,8
  80f7c4:	f800283a 	ret

0080f7c8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80f7c8:	defffc04 	addi	sp,sp,-16
  80f7cc:	dfc00315 	stw	ra,12(sp)
  80f7d0:	df000215 	stw	fp,8(sp)
  80f7d4:	df000204 	addi	fp,sp,8
  80f7d8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80f7dc:	e0bfff17 	ldw	r2,-4(fp)
  80f7e0:	10800017 	ldw	r2,0(r2)
  80f7e4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80f7e8:	e0bffe17 	ldw	r2,-8(fp)
  80f7ec:	10c00a04 	addi	r3,r2,40
  80f7f0:	e0bfff17 	ldw	r2,-4(fp)
  80f7f4:	10800217 	ldw	r2,8(r2)
  80f7f8:	100b883a 	mov	r5,r2
  80f7fc:	1809883a 	mov	r4,r3
  80f800:	080fbd80 	call	80fbd8 <altera_avalon_jtag_uart_close>
}
  80f804:	e037883a 	mov	sp,fp
  80f808:	dfc00117 	ldw	ra,4(sp)
  80f80c:	df000017 	ldw	fp,0(sp)
  80f810:	dec00204 	addi	sp,sp,8
  80f814:	f800283a 	ret

0080f818 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80f818:	defffa04 	addi	sp,sp,-24
  80f81c:	dfc00515 	stw	ra,20(sp)
  80f820:	df000415 	stw	fp,16(sp)
  80f824:	df000404 	addi	fp,sp,16
  80f828:	e13ffd15 	stw	r4,-12(fp)
  80f82c:	e17ffe15 	stw	r5,-8(fp)
  80f830:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80f834:	e0bffd17 	ldw	r2,-12(fp)
  80f838:	10800017 	ldw	r2,0(r2)
  80f83c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80f840:	e0bffc17 	ldw	r2,-16(fp)
  80f844:	10800a04 	addi	r2,r2,40
  80f848:	e1bfff17 	ldw	r6,-4(fp)
  80f84c:	e17ffe17 	ldw	r5,-8(fp)
  80f850:	1009883a 	mov	r4,r2
  80f854:	080fc400 	call	80fc40 <altera_avalon_jtag_uart_ioctl>
}
  80f858:	e037883a 	mov	sp,fp
  80f85c:	dfc00117 	ldw	ra,4(sp)
  80f860:	df000017 	ldw	fp,0(sp)
  80f864:	dec00204 	addi	sp,sp,8
  80f868:	f800283a 	ret

0080f86c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80f86c:	defffa04 	addi	sp,sp,-24
  80f870:	dfc00515 	stw	ra,20(sp)
  80f874:	df000415 	stw	fp,16(sp)
  80f878:	df000404 	addi	fp,sp,16
  80f87c:	e13ffd15 	stw	r4,-12(fp)
  80f880:	e17ffe15 	stw	r5,-8(fp)
  80f884:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80f888:	e0bffd17 	ldw	r2,-12(fp)
  80f88c:	00c00044 	movi	r3,1
  80f890:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80f894:	e0bffd17 	ldw	r2,-12(fp)
  80f898:	10800017 	ldw	r2,0(r2)
  80f89c:	10800104 	addi	r2,r2,4
  80f8a0:	1007883a 	mov	r3,r2
  80f8a4:	e0bffd17 	ldw	r2,-12(fp)
  80f8a8:	10800817 	ldw	r2,32(r2)
  80f8ac:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80f8b0:	e0bffe17 	ldw	r2,-8(fp)
  80f8b4:	e0ffff17 	ldw	r3,-4(fp)
  80f8b8:	d8000015 	stw	zero,0(sp)
  80f8bc:	e1fffd17 	ldw	r7,-12(fp)
  80f8c0:	01802074 	movhi	r6,129
  80f8c4:	31be4b04 	addi	r6,r6,-1748
  80f8c8:	180b883a 	mov	r5,r3
  80f8cc:	1009883a 	mov	r4,r2
  80f8d0:	0811e700 	call	811e70 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80f8d4:	e0bffd17 	ldw	r2,-12(fp)
  80f8d8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80f8dc:	e0bffd17 	ldw	r2,-12(fp)
  80f8e0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f8e4:	d0e77017 	ldw	r3,-25152(gp)
  80f8e8:	e1fffd17 	ldw	r7,-12(fp)
  80f8ec:	01802074 	movhi	r6,129
  80f8f0:	31bece04 	addi	r6,r6,-1224
  80f8f4:	180b883a 	mov	r5,r3
  80f8f8:	1009883a 	mov	r4,r2
  80f8fc:	080e6180 	call	80e618 <alt_alarm_start>
  80f900:	1000040e 	bge	r2,zero,80f914 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80f904:	e0fffd17 	ldw	r3,-12(fp)
  80f908:	00a00034 	movhi	r2,32768
  80f90c:	10bfffc4 	addi	r2,r2,-1
  80f910:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80f914:	0001883a 	nop
  80f918:	e037883a 	mov	sp,fp
  80f91c:	dfc00117 	ldw	ra,4(sp)
  80f920:	df000017 	ldw	fp,0(sp)
  80f924:	dec00204 	addi	sp,sp,8
  80f928:	f800283a 	ret

0080f92c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80f92c:	defff804 	addi	sp,sp,-32
  80f930:	df000715 	stw	fp,28(sp)
  80f934:	df000704 	addi	fp,sp,28
  80f938:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80f93c:	e0bfff17 	ldw	r2,-4(fp)
  80f940:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80f944:	e0bffb17 	ldw	r2,-20(fp)
  80f948:	10800017 	ldw	r2,0(r2)
  80f94c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80f950:	e0bffc17 	ldw	r2,-16(fp)
  80f954:	10800104 	addi	r2,r2,4
  80f958:	10800037 	ldwio	r2,0(r2)
  80f95c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80f960:	e0bffd17 	ldw	r2,-12(fp)
  80f964:	1080c00c 	andi	r2,r2,768
  80f968:	10006d26 	beq	r2,zero,80fb20 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80f96c:	e0bffd17 	ldw	r2,-12(fp)
  80f970:	1080400c 	andi	r2,r2,256
  80f974:	10003526 	beq	r2,zero,80fa4c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80f978:	00800074 	movhi	r2,1
  80f97c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f980:	e0bffb17 	ldw	r2,-20(fp)
  80f984:	10800a17 	ldw	r2,40(r2)
  80f988:	10800044 	addi	r2,r2,1
  80f98c:	1081ffcc 	andi	r2,r2,2047
  80f990:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80f994:	e0bffb17 	ldw	r2,-20(fp)
  80f998:	10c00b17 	ldw	r3,44(r2)
  80f99c:	e0bffe17 	ldw	r2,-8(fp)
  80f9a0:	18801526 	beq	r3,r2,80f9f8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80f9a4:	e0bffc17 	ldw	r2,-16(fp)
  80f9a8:	10800037 	ldwio	r2,0(r2)
  80f9ac:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80f9b0:	e0bff917 	ldw	r2,-28(fp)
  80f9b4:	10a0000c 	andi	r2,r2,32768
  80f9b8:	10001126 	beq	r2,zero,80fa00 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80f9bc:	e0bffb17 	ldw	r2,-20(fp)
  80f9c0:	10800a17 	ldw	r2,40(r2)
  80f9c4:	e0fff917 	ldw	r3,-28(fp)
  80f9c8:	1809883a 	mov	r4,r3
  80f9cc:	e0fffb17 	ldw	r3,-20(fp)
  80f9d0:	1885883a 	add	r2,r3,r2
  80f9d4:	10800e04 	addi	r2,r2,56
  80f9d8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80f9dc:	e0bffb17 	ldw	r2,-20(fp)
  80f9e0:	10800a17 	ldw	r2,40(r2)
  80f9e4:	10800044 	addi	r2,r2,1
  80f9e8:	10c1ffcc 	andi	r3,r2,2047
  80f9ec:	e0bffb17 	ldw	r2,-20(fp)
  80f9f0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80f9f4:	003fe206 	br	80f980 <__alt_mem_onchip_mem+0xff78f980>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80f9f8:	0001883a 	nop
  80f9fc:	00000106 	br	80fa04 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80fa00:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80fa04:	e0bff917 	ldw	r2,-28(fp)
  80fa08:	10bfffec 	andhi	r2,r2,65535
  80fa0c:	10000f26 	beq	r2,zero,80fa4c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fa10:	e0bffb17 	ldw	r2,-20(fp)
  80fa14:	10c00817 	ldw	r3,32(r2)
  80fa18:	00bfff84 	movi	r2,-2
  80fa1c:	1886703a 	and	r3,r3,r2
  80fa20:	e0bffb17 	ldw	r2,-20(fp)
  80fa24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80fa28:	e0bffc17 	ldw	r2,-16(fp)
  80fa2c:	10800104 	addi	r2,r2,4
  80fa30:	1007883a 	mov	r3,r2
  80fa34:	e0bffb17 	ldw	r2,-20(fp)
  80fa38:	10800817 	ldw	r2,32(r2)
  80fa3c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fa40:	e0bffc17 	ldw	r2,-16(fp)
  80fa44:	10800104 	addi	r2,r2,4
  80fa48:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80fa4c:	e0bffd17 	ldw	r2,-12(fp)
  80fa50:	1080800c 	andi	r2,r2,512
  80fa54:	103fbe26 	beq	r2,zero,80f950 <__alt_mem_onchip_mem+0xff78f950>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80fa58:	e0bffd17 	ldw	r2,-12(fp)
  80fa5c:	1004d43a 	srli	r2,r2,16
  80fa60:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80fa64:	00001406 	br	80fab8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80fa68:	e0bffc17 	ldw	r2,-16(fp)
  80fa6c:	e0fffb17 	ldw	r3,-20(fp)
  80fa70:	18c00d17 	ldw	r3,52(r3)
  80fa74:	e13ffb17 	ldw	r4,-20(fp)
  80fa78:	20c7883a 	add	r3,r4,r3
  80fa7c:	18c20e04 	addi	r3,r3,2104
  80fa80:	18c00003 	ldbu	r3,0(r3)
  80fa84:	18c03fcc 	andi	r3,r3,255
  80fa88:	18c0201c 	xori	r3,r3,128
  80fa8c:	18ffe004 	addi	r3,r3,-128
  80fa90:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fa94:	e0bffb17 	ldw	r2,-20(fp)
  80fa98:	10800d17 	ldw	r2,52(r2)
  80fa9c:	10800044 	addi	r2,r2,1
  80faa0:	10c1ffcc 	andi	r3,r2,2047
  80faa4:	e0bffb17 	ldw	r2,-20(fp)
  80faa8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80faac:	e0bffa17 	ldw	r2,-24(fp)
  80fab0:	10bfffc4 	addi	r2,r2,-1
  80fab4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80fab8:	e0bffa17 	ldw	r2,-24(fp)
  80fabc:	10000526 	beq	r2,zero,80fad4 <altera_avalon_jtag_uart_irq+0x1a8>
  80fac0:	e0bffb17 	ldw	r2,-20(fp)
  80fac4:	10c00d17 	ldw	r3,52(r2)
  80fac8:	e0bffb17 	ldw	r2,-20(fp)
  80facc:	10800c17 	ldw	r2,48(r2)
  80fad0:	18bfe51e 	bne	r3,r2,80fa68 <__alt_mem_onchip_mem+0xff78fa68>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80fad4:	e0bffa17 	ldw	r2,-24(fp)
  80fad8:	103f9d26 	beq	r2,zero,80f950 <__alt_mem_onchip_mem+0xff78f950>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80fadc:	e0bffb17 	ldw	r2,-20(fp)
  80fae0:	10c00817 	ldw	r3,32(r2)
  80fae4:	00bfff44 	movi	r2,-3
  80fae8:	1886703a 	and	r3,r3,r2
  80faec:	e0bffb17 	ldw	r2,-20(fp)
  80faf0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80faf4:	e0bffb17 	ldw	r2,-20(fp)
  80faf8:	10800017 	ldw	r2,0(r2)
  80fafc:	10800104 	addi	r2,r2,4
  80fb00:	1007883a 	mov	r3,r2
  80fb04:	e0bffb17 	ldw	r2,-20(fp)
  80fb08:	10800817 	ldw	r2,32(r2)
  80fb0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80fb10:	e0bffc17 	ldw	r2,-16(fp)
  80fb14:	10800104 	addi	r2,r2,4
  80fb18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80fb1c:	003f8c06 	br	80f950 <__alt_mem_onchip_mem+0xff78f950>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80fb20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80fb24:	0001883a 	nop
  80fb28:	e037883a 	mov	sp,fp
  80fb2c:	df000017 	ldw	fp,0(sp)
  80fb30:	dec00104 	addi	sp,sp,4
  80fb34:	f800283a 	ret

0080fb38 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80fb38:	defff804 	addi	sp,sp,-32
  80fb3c:	df000715 	stw	fp,28(sp)
  80fb40:	df000704 	addi	fp,sp,28
  80fb44:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80fb48:	e0bffb17 	ldw	r2,-20(fp)
  80fb4c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80fb50:	e0bff917 	ldw	r2,-28(fp)
  80fb54:	10800017 	ldw	r2,0(r2)
  80fb58:	10800104 	addi	r2,r2,4
  80fb5c:	10800037 	ldwio	r2,0(r2)
  80fb60:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80fb64:	e0bffa17 	ldw	r2,-24(fp)
  80fb68:	1081000c 	andi	r2,r2,1024
  80fb6c:	10000b26 	beq	r2,zero,80fb9c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80fb70:	e0bff917 	ldw	r2,-28(fp)
  80fb74:	10800017 	ldw	r2,0(r2)
  80fb78:	10800104 	addi	r2,r2,4
  80fb7c:	1007883a 	mov	r3,r2
  80fb80:	e0bff917 	ldw	r2,-28(fp)
  80fb84:	10800817 	ldw	r2,32(r2)
  80fb88:	10810014 	ori	r2,r2,1024
  80fb8c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80fb90:	e0bff917 	ldw	r2,-28(fp)
  80fb94:	10000915 	stw	zero,36(r2)
  80fb98:	00000a06 	br	80fbc4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80fb9c:	e0bff917 	ldw	r2,-28(fp)
  80fba0:	10c00917 	ldw	r3,36(r2)
  80fba4:	00a00034 	movhi	r2,32768
  80fba8:	10bfff04 	addi	r2,r2,-4
  80fbac:	10c00536 	bltu	r2,r3,80fbc4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80fbb0:	e0bff917 	ldw	r2,-28(fp)
  80fbb4:	10800917 	ldw	r2,36(r2)
  80fbb8:	10c00044 	addi	r3,r2,1
  80fbbc:	e0bff917 	ldw	r2,-28(fp)
  80fbc0:	10c00915 	stw	r3,36(r2)
  80fbc4:	d0a77017 	ldw	r2,-25152(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80fbc8:	e037883a 	mov	sp,fp
  80fbcc:	df000017 	ldw	fp,0(sp)
  80fbd0:	dec00104 	addi	sp,sp,4
  80fbd4:	f800283a 	ret

0080fbd8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80fbd8:	defffd04 	addi	sp,sp,-12
  80fbdc:	df000215 	stw	fp,8(sp)
  80fbe0:	df000204 	addi	fp,sp,8
  80fbe4:	e13ffe15 	stw	r4,-8(fp)
  80fbe8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80fbec:	00000506 	br	80fc04 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80fbf0:	e0bfff17 	ldw	r2,-4(fp)
  80fbf4:	1090000c 	andi	r2,r2,16384
  80fbf8:	10000226 	beq	r2,zero,80fc04 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80fbfc:	00bffd44 	movi	r2,-11
  80fc00:	00000b06 	br	80fc30 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80fc04:	e0bffe17 	ldw	r2,-8(fp)
  80fc08:	10c00d17 	ldw	r3,52(r2)
  80fc0c:	e0bffe17 	ldw	r2,-8(fp)
  80fc10:	10800c17 	ldw	r2,48(r2)
  80fc14:	18800526 	beq	r3,r2,80fc2c <altera_avalon_jtag_uart_close+0x54>
  80fc18:	e0bffe17 	ldw	r2,-8(fp)
  80fc1c:	10c00917 	ldw	r3,36(r2)
  80fc20:	e0bffe17 	ldw	r2,-8(fp)
  80fc24:	10800117 	ldw	r2,4(r2)
  80fc28:	18bff136 	bltu	r3,r2,80fbf0 <__alt_mem_onchip_mem+0xff78fbf0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80fc2c:	0005883a 	mov	r2,zero
}
  80fc30:	e037883a 	mov	sp,fp
  80fc34:	df000017 	ldw	fp,0(sp)
  80fc38:	dec00104 	addi	sp,sp,4
  80fc3c:	f800283a 	ret

0080fc40 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80fc40:	defffa04 	addi	sp,sp,-24
  80fc44:	df000515 	stw	fp,20(sp)
  80fc48:	df000504 	addi	fp,sp,20
  80fc4c:	e13ffd15 	stw	r4,-12(fp)
  80fc50:	e17ffe15 	stw	r5,-8(fp)
  80fc54:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80fc58:	00bff9c4 	movi	r2,-25
  80fc5c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80fc60:	e0bffe17 	ldw	r2,-8(fp)
  80fc64:	10da8060 	cmpeqi	r3,r2,27137
  80fc68:	1800031e 	bne	r3,zero,80fc78 <altera_avalon_jtag_uart_ioctl+0x38>
  80fc6c:	109a80a0 	cmpeqi	r2,r2,27138
  80fc70:	1000181e 	bne	r2,zero,80fcd4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80fc74:	00002906 	br	80fd1c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80fc78:	e0bffd17 	ldw	r2,-12(fp)
  80fc7c:	10c00117 	ldw	r3,4(r2)
  80fc80:	00a00034 	movhi	r2,32768
  80fc84:	10bfffc4 	addi	r2,r2,-1
  80fc88:	18802126 	beq	r3,r2,80fd10 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80fc8c:	e0bfff17 	ldw	r2,-4(fp)
  80fc90:	10800017 	ldw	r2,0(r2)
  80fc94:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80fc98:	e0bffc17 	ldw	r2,-16(fp)
  80fc9c:	10800090 	cmplti	r2,r2,2
  80fca0:	1000061e 	bne	r2,zero,80fcbc <altera_avalon_jtag_uart_ioctl+0x7c>
  80fca4:	e0fffc17 	ldw	r3,-16(fp)
  80fca8:	00a00034 	movhi	r2,32768
  80fcac:	10bfffc4 	addi	r2,r2,-1
  80fcb0:	18800226 	beq	r3,r2,80fcbc <altera_avalon_jtag_uart_ioctl+0x7c>
  80fcb4:	e0bffc17 	ldw	r2,-16(fp)
  80fcb8:	00000206 	br	80fcc4 <altera_avalon_jtag_uart_ioctl+0x84>
  80fcbc:	00a00034 	movhi	r2,32768
  80fcc0:	10bfff84 	addi	r2,r2,-2
  80fcc4:	e0fffd17 	ldw	r3,-12(fp)
  80fcc8:	18800115 	stw	r2,4(r3)
      rc = 0;
  80fccc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80fcd0:	00000f06 	br	80fd10 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80fcd4:	e0bffd17 	ldw	r2,-12(fp)
  80fcd8:	10c00117 	ldw	r3,4(r2)
  80fcdc:	00a00034 	movhi	r2,32768
  80fce0:	10bfffc4 	addi	r2,r2,-1
  80fce4:	18800c26 	beq	r3,r2,80fd18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80fce8:	e0bffd17 	ldw	r2,-12(fp)
  80fcec:	10c00917 	ldw	r3,36(r2)
  80fcf0:	e0bffd17 	ldw	r2,-12(fp)
  80fcf4:	10800117 	ldw	r2,4(r2)
  80fcf8:	1885803a 	cmpltu	r2,r3,r2
  80fcfc:	10c03fcc 	andi	r3,r2,255
  80fd00:	e0bfff17 	ldw	r2,-4(fp)
  80fd04:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80fd08:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80fd0c:	00000206 	br	80fd18 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80fd10:	0001883a 	nop
  80fd14:	00000106 	br	80fd1c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80fd18:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80fd1c:	e0bffb17 	ldw	r2,-20(fp)
}
  80fd20:	e037883a 	mov	sp,fp
  80fd24:	df000017 	ldw	fp,0(sp)
  80fd28:	dec00104 	addi	sp,sp,4
  80fd2c:	f800283a 	ret

0080fd30 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80fd30:	defff304 	addi	sp,sp,-52
  80fd34:	dfc00c15 	stw	ra,48(sp)
  80fd38:	df000b15 	stw	fp,44(sp)
  80fd3c:	df000b04 	addi	fp,sp,44
  80fd40:	e13ffc15 	stw	r4,-16(fp)
  80fd44:	e17ffd15 	stw	r5,-12(fp)
  80fd48:	e1bffe15 	stw	r6,-8(fp)
  80fd4c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80fd50:	e0bffd17 	ldw	r2,-12(fp)
  80fd54:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80fd58:	00004706 	br	80fe78 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80fd5c:	e0bffc17 	ldw	r2,-16(fp)
  80fd60:	10800a17 	ldw	r2,40(r2)
  80fd64:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80fd68:	e0bffc17 	ldw	r2,-16(fp)
  80fd6c:	10800b17 	ldw	r2,44(r2)
  80fd70:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80fd74:	e0fff717 	ldw	r3,-36(fp)
  80fd78:	e0bff817 	ldw	r2,-32(fp)
  80fd7c:	18800536 	bltu	r3,r2,80fd94 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80fd80:	e0fff717 	ldw	r3,-36(fp)
  80fd84:	e0bff817 	ldw	r2,-32(fp)
  80fd88:	1885c83a 	sub	r2,r3,r2
  80fd8c:	e0bff615 	stw	r2,-40(fp)
  80fd90:	00000406 	br	80fda4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80fd94:	00c20004 	movi	r3,2048
  80fd98:	e0bff817 	ldw	r2,-32(fp)
  80fd9c:	1885c83a 	sub	r2,r3,r2
  80fda0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80fda4:	e0bff617 	ldw	r2,-40(fp)
  80fda8:	10001e26 	beq	r2,zero,80fe24 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80fdac:	e0fffe17 	ldw	r3,-8(fp)
  80fdb0:	e0bff617 	ldw	r2,-40(fp)
  80fdb4:	1880022e 	bgeu	r3,r2,80fdc0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80fdb8:	e0bffe17 	ldw	r2,-8(fp)
  80fdbc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80fdc0:	e0bffc17 	ldw	r2,-16(fp)
  80fdc4:	10c00e04 	addi	r3,r2,56
  80fdc8:	e0bff817 	ldw	r2,-32(fp)
  80fdcc:	1885883a 	add	r2,r3,r2
  80fdd0:	e1bff617 	ldw	r6,-40(fp)
  80fdd4:	100b883a 	mov	r5,r2
  80fdd8:	e13ff517 	ldw	r4,-44(fp)
  80fddc:	0808a780 	call	808a78 <memcpy>
      ptr   += n;
  80fde0:	e0fff517 	ldw	r3,-44(fp)
  80fde4:	e0bff617 	ldw	r2,-40(fp)
  80fde8:	1885883a 	add	r2,r3,r2
  80fdec:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80fdf0:	e0fffe17 	ldw	r3,-8(fp)
  80fdf4:	e0bff617 	ldw	r2,-40(fp)
  80fdf8:	1885c83a 	sub	r2,r3,r2
  80fdfc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80fe00:	e0fff817 	ldw	r3,-32(fp)
  80fe04:	e0bff617 	ldw	r2,-40(fp)
  80fe08:	1885883a 	add	r2,r3,r2
  80fe0c:	10c1ffcc 	andi	r3,r2,2047
  80fe10:	e0bffc17 	ldw	r2,-16(fp)
  80fe14:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80fe18:	e0bffe17 	ldw	r2,-8(fp)
  80fe1c:	00bfcf16 	blt	zero,r2,80fd5c <__alt_mem_onchip_mem+0xff78fd5c>
  80fe20:	00000106 	br	80fe28 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80fe24:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80fe28:	e0fff517 	ldw	r3,-44(fp)
  80fe2c:	e0bffd17 	ldw	r2,-12(fp)
  80fe30:	1880141e 	bne	r3,r2,80fe84 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80fe34:	e0bfff17 	ldw	r2,-4(fp)
  80fe38:	1090000c 	andi	r2,r2,16384
  80fe3c:	1000131e 	bne	r2,zero,80fe8c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80fe40:	0001883a 	nop
  80fe44:	e0bffc17 	ldw	r2,-16(fp)
  80fe48:	10c00a17 	ldw	r3,40(r2)
  80fe4c:	e0bff717 	ldw	r2,-36(fp)
  80fe50:	1880051e 	bne	r3,r2,80fe68 <altera_avalon_jtag_uart_read+0x138>
  80fe54:	e0bffc17 	ldw	r2,-16(fp)
  80fe58:	10c00917 	ldw	r3,36(r2)
  80fe5c:	e0bffc17 	ldw	r2,-16(fp)
  80fe60:	10800117 	ldw	r2,4(r2)
  80fe64:	18bff736 	bltu	r3,r2,80fe44 <__alt_mem_onchip_mem+0xff78fe44>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80fe68:	e0bffc17 	ldw	r2,-16(fp)
  80fe6c:	10c00a17 	ldw	r3,40(r2)
  80fe70:	e0bff717 	ldw	r2,-36(fp)
  80fe74:	18800726 	beq	r3,r2,80fe94 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80fe78:	e0bffe17 	ldw	r2,-8(fp)
  80fe7c:	00bfb716 	blt	zero,r2,80fd5c <__alt_mem_onchip_mem+0xff78fd5c>
  80fe80:	00000506 	br	80fe98 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80fe84:	0001883a 	nop
  80fe88:	00000306 	br	80fe98 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80fe8c:	0001883a 	nop
  80fe90:	00000106 	br	80fe98 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80fe94:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80fe98:	e0fff517 	ldw	r3,-44(fp)
  80fe9c:	e0bffd17 	ldw	r2,-12(fp)
  80fea0:	18801826 	beq	r3,r2,80ff04 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fea4:	0005303a 	rdctl	r2,status
  80fea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80feac:	e0fffb17 	ldw	r3,-20(fp)
  80feb0:	00bfff84 	movi	r2,-2
  80feb4:	1884703a 	and	r2,r3,r2
  80feb8:	1001703a 	wrctl	status,r2
  
  return context;
  80febc:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80fec0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80fec4:	e0bffc17 	ldw	r2,-16(fp)
  80fec8:	10800817 	ldw	r2,32(r2)
  80fecc:	10c00054 	ori	r3,r2,1
  80fed0:	e0bffc17 	ldw	r2,-16(fp)
  80fed4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80fed8:	e0bffc17 	ldw	r2,-16(fp)
  80fedc:	10800017 	ldw	r2,0(r2)
  80fee0:	10800104 	addi	r2,r2,4
  80fee4:	1007883a 	mov	r3,r2
  80fee8:	e0bffc17 	ldw	r2,-16(fp)
  80feec:	10800817 	ldw	r2,32(r2)
  80fef0:	18800035 	stwio	r2,0(r3)
  80fef4:	e0bffa17 	ldw	r2,-24(fp)
  80fef8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fefc:	e0bff917 	ldw	r2,-28(fp)
  80ff00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80ff04:	e0fff517 	ldw	r3,-44(fp)
  80ff08:	e0bffd17 	ldw	r2,-12(fp)
  80ff0c:	18800426 	beq	r3,r2,80ff20 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80ff10:	e0fff517 	ldw	r3,-44(fp)
  80ff14:	e0bffd17 	ldw	r2,-12(fp)
  80ff18:	1885c83a 	sub	r2,r3,r2
  80ff1c:	00000606 	br	80ff38 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80ff20:	e0bfff17 	ldw	r2,-4(fp)
  80ff24:	1090000c 	andi	r2,r2,16384
  80ff28:	10000226 	beq	r2,zero,80ff34 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80ff2c:	00bffd44 	movi	r2,-11
  80ff30:	00000106 	br	80ff38 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80ff34:	00bffec4 	movi	r2,-5
}
  80ff38:	e037883a 	mov	sp,fp
  80ff3c:	dfc00117 	ldw	ra,4(sp)
  80ff40:	df000017 	ldw	fp,0(sp)
  80ff44:	dec00204 	addi	sp,sp,8
  80ff48:	f800283a 	ret

0080ff4c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80ff4c:	defff304 	addi	sp,sp,-52
  80ff50:	dfc00c15 	stw	ra,48(sp)
  80ff54:	df000b15 	stw	fp,44(sp)
  80ff58:	df000b04 	addi	fp,sp,44
  80ff5c:	e13ffc15 	stw	r4,-16(fp)
  80ff60:	e17ffd15 	stw	r5,-12(fp)
  80ff64:	e1bffe15 	stw	r6,-8(fp)
  80ff68:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80ff6c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80ff70:	e0bffd17 	ldw	r2,-12(fp)
  80ff74:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ff78:	00003706 	br	810058 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80ff7c:	e0bffc17 	ldw	r2,-16(fp)
  80ff80:	10800c17 	ldw	r2,48(r2)
  80ff84:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80ff88:	e0bffc17 	ldw	r2,-16(fp)
  80ff8c:	10800d17 	ldw	r2,52(r2)
  80ff90:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80ff94:	e0fff917 	ldw	r3,-28(fp)
  80ff98:	e0bff517 	ldw	r2,-44(fp)
  80ff9c:	1880062e 	bgeu	r3,r2,80ffb8 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80ffa0:	e0fff517 	ldw	r3,-44(fp)
  80ffa4:	e0bff917 	ldw	r2,-28(fp)
  80ffa8:	1885c83a 	sub	r2,r3,r2
  80ffac:	10bfffc4 	addi	r2,r2,-1
  80ffb0:	e0bff615 	stw	r2,-40(fp)
  80ffb4:	00000b06 	br	80ffe4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80ffb8:	e0bff517 	ldw	r2,-44(fp)
  80ffbc:	10000526 	beq	r2,zero,80ffd4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80ffc0:	00c20004 	movi	r3,2048
  80ffc4:	e0bff917 	ldw	r2,-28(fp)
  80ffc8:	1885c83a 	sub	r2,r3,r2
  80ffcc:	e0bff615 	stw	r2,-40(fp)
  80ffd0:	00000406 	br	80ffe4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80ffd4:	00c1ffc4 	movi	r3,2047
  80ffd8:	e0bff917 	ldw	r2,-28(fp)
  80ffdc:	1885c83a 	sub	r2,r3,r2
  80ffe0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80ffe4:	e0bff617 	ldw	r2,-40(fp)
  80ffe8:	10001e26 	beq	r2,zero,810064 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80ffec:	e0fffe17 	ldw	r3,-8(fp)
  80fff0:	e0bff617 	ldw	r2,-40(fp)
  80fff4:	1880022e 	bgeu	r3,r2,810000 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80fff8:	e0bffe17 	ldw	r2,-8(fp)
  80fffc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  810000:	e0bffc17 	ldw	r2,-16(fp)
  810004:	10c20e04 	addi	r3,r2,2104
  810008:	e0bff917 	ldw	r2,-28(fp)
  81000c:	1885883a 	add	r2,r3,r2
  810010:	e1bff617 	ldw	r6,-40(fp)
  810014:	e17ffd17 	ldw	r5,-12(fp)
  810018:	1009883a 	mov	r4,r2
  81001c:	0808a780 	call	808a78 <memcpy>
      ptr   += n;
  810020:	e0fffd17 	ldw	r3,-12(fp)
  810024:	e0bff617 	ldw	r2,-40(fp)
  810028:	1885883a 	add	r2,r3,r2
  81002c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  810030:	e0fffe17 	ldw	r3,-8(fp)
  810034:	e0bff617 	ldw	r2,-40(fp)
  810038:	1885c83a 	sub	r2,r3,r2
  81003c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810040:	e0fff917 	ldw	r3,-28(fp)
  810044:	e0bff617 	ldw	r2,-40(fp)
  810048:	1885883a 	add	r2,r3,r2
  81004c:	10c1ffcc 	andi	r3,r2,2047
  810050:	e0bffc17 	ldw	r2,-16(fp)
  810054:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  810058:	e0bffe17 	ldw	r2,-8(fp)
  81005c:	00bfc716 	blt	zero,r2,80ff7c <__alt_mem_onchip_mem+0xff78ff7c>
  810060:	00000106 	br	810068 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  810064:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810068:	0005303a 	rdctl	r2,status
  81006c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810070:	e0fffb17 	ldw	r3,-20(fp)
  810074:	00bfff84 	movi	r2,-2
  810078:	1884703a 	and	r2,r3,r2
  81007c:	1001703a 	wrctl	status,r2
  
  return context;
  810080:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  810084:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810088:	e0bffc17 	ldw	r2,-16(fp)
  81008c:	10800817 	ldw	r2,32(r2)
  810090:	10c00094 	ori	r3,r2,2
  810094:	e0bffc17 	ldw	r2,-16(fp)
  810098:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81009c:	e0bffc17 	ldw	r2,-16(fp)
  8100a0:	10800017 	ldw	r2,0(r2)
  8100a4:	10800104 	addi	r2,r2,4
  8100a8:	1007883a 	mov	r3,r2
  8100ac:	e0bffc17 	ldw	r2,-16(fp)
  8100b0:	10800817 	ldw	r2,32(r2)
  8100b4:	18800035 	stwio	r2,0(r3)
  8100b8:	e0bffa17 	ldw	r2,-24(fp)
  8100bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8100c0:	e0bff817 	ldw	r2,-32(fp)
  8100c4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8100c8:	e0bffe17 	ldw	r2,-8(fp)
  8100cc:	0080100e 	bge	zero,r2,810110 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  8100d0:	e0bfff17 	ldw	r2,-4(fp)
  8100d4:	1090000c 	andi	r2,r2,16384
  8100d8:	1000101e 	bne	r2,zero,81011c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  8100dc:	0001883a 	nop
  8100e0:	e0bffc17 	ldw	r2,-16(fp)
  8100e4:	10c00d17 	ldw	r3,52(r2)
  8100e8:	e0bff517 	ldw	r2,-44(fp)
  8100ec:	1880051e 	bne	r3,r2,810104 <altera_avalon_jtag_uart_write+0x1b8>
  8100f0:	e0bffc17 	ldw	r2,-16(fp)
  8100f4:	10c00917 	ldw	r3,36(r2)
  8100f8:	e0bffc17 	ldw	r2,-16(fp)
  8100fc:	10800117 	ldw	r2,4(r2)
  810100:	18bff736 	bltu	r3,r2,8100e0 <__alt_mem_onchip_mem+0xff7900e0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  810104:	e0bffc17 	ldw	r2,-16(fp)
  810108:	10800917 	ldw	r2,36(r2)
  81010c:	1000051e 	bne	r2,zero,810124 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  810110:	e0bffe17 	ldw	r2,-8(fp)
  810114:	00bfd016 	blt	zero,r2,810058 <__alt_mem_onchip_mem+0xff790058>
  810118:	00000306 	br	810128 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  81011c:	0001883a 	nop
  810120:	00000106 	br	810128 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  810124:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  810128:	e0fffd17 	ldw	r3,-12(fp)
  81012c:	e0bff717 	ldw	r2,-36(fp)
  810130:	18800426 	beq	r3,r2,810144 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  810134:	e0fffd17 	ldw	r3,-12(fp)
  810138:	e0bff717 	ldw	r2,-36(fp)
  81013c:	1885c83a 	sub	r2,r3,r2
  810140:	00000606 	br	81015c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  810144:	e0bfff17 	ldw	r2,-4(fp)
  810148:	1090000c 	andi	r2,r2,16384
  81014c:	10000226 	beq	r2,zero,810158 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  810150:	00bffd44 	movi	r2,-11
  810154:	00000106 	br	81015c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  810158:	00bffec4 	movi	r2,-5
}
  81015c:	e037883a 	mov	sp,fp
  810160:	dfc00117 	ldw	ra,4(sp)
  810164:	df000017 	ldw	fp,0(sp)
  810168:	dec00204 	addi	sp,sp,8
  81016c:	f800283a 	ret

00810170 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  810170:	defffa04 	addi	sp,sp,-24
  810174:	dfc00515 	stw	ra,20(sp)
  810178:	df000415 	stw	fp,16(sp)
  81017c:	df000404 	addi	fp,sp,16
  810180:	e13ffe15 	stw	r4,-8(fp)
  810184:	2805883a 	mov	r2,r5
  810188:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  81018c:	e0bffe17 	ldw	r2,-8(fp)
  810190:	10800017 	ldw	r2,0(r2)
  810194:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810198:	008003f4 	movhi	r2,15
  81019c:	10909004 	addi	r2,r2,16960
  8101a0:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8101a4:	e0bffe17 	ldw	r2,-8(fp)
  8101a8:	10800803 	ldbu	r2,32(r2)
  8101ac:	10803fcc 	andi	r2,r2,255
  8101b0:	1080201c 	xori	r2,r2,128
  8101b4:	10bfe004 	addi	r2,r2,-128
  8101b8:	1000151e 	bne	r2,zero,810210 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8101bc:	00000906 	br	8101e4 <lcd_write_command+0x74>
    if (--i == 0)
  8101c0:	e0bffc17 	ldw	r2,-16(fp)
  8101c4:	10bfffc4 	addi	r2,r2,-1
  8101c8:	e0bffc15 	stw	r2,-16(fp)
  8101cc:	e0bffc17 	ldw	r2,-16(fp)
  8101d0:	1000041e 	bne	r2,zero,8101e4 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8101d4:	e0bffe17 	ldw	r2,-8(fp)
  8101d8:	00c00044 	movi	r3,1
  8101dc:	10c00805 	stb	r3,32(r2)
      return;
  8101e0:	00000c06 	br	810214 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8101e4:	e0bffd17 	ldw	r2,-12(fp)
  8101e8:	10800104 	addi	r2,r2,4
  8101ec:	10800037 	ldwio	r2,0(r2)
  8101f0:	1080200c 	andi	r2,r2,128
  8101f4:	103ff21e 	bne	r2,zero,8101c0 <__alt_mem_onchip_mem+0xff7901c0>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8101f8:	01001904 	movi	r4,100
  8101fc:	08122500 	call	812250 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  810200:	e0bffd17 	ldw	r2,-12(fp)
  810204:	e0ffff03 	ldbu	r3,-4(fp)
  810208:	10c00035 	stwio	r3,0(r2)
  81020c:	00000106 	br	810214 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  810210:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  810214:	e037883a 	mov	sp,fp
  810218:	dfc00117 	ldw	ra,4(sp)
  81021c:	df000017 	ldw	fp,0(sp)
  810220:	dec00204 	addi	sp,sp,8
  810224:	f800283a 	ret

00810228 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  810228:	defffa04 	addi	sp,sp,-24
  81022c:	dfc00515 	stw	ra,20(sp)
  810230:	df000415 	stw	fp,16(sp)
  810234:	df000404 	addi	fp,sp,16
  810238:	e13ffe15 	stw	r4,-8(fp)
  81023c:	2805883a 	mov	r2,r5
  810240:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  810244:	e0bffe17 	ldw	r2,-8(fp)
  810248:	10800017 	ldw	r2,0(r2)
  81024c:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  810250:	008003f4 	movhi	r2,15
  810254:	10909004 	addi	r2,r2,16960
  810258:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  81025c:	e0bffe17 	ldw	r2,-8(fp)
  810260:	10800803 	ldbu	r2,32(r2)
  810264:	10803fcc 	andi	r2,r2,255
  810268:	1080201c 	xori	r2,r2,128
  81026c:	10bfe004 	addi	r2,r2,-128
  810270:	10001d1e 	bne	r2,zero,8102e8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  810274:	00000906 	br	81029c <lcd_write_data+0x74>
    if (--i == 0)
  810278:	e0bffc17 	ldw	r2,-16(fp)
  81027c:	10bfffc4 	addi	r2,r2,-1
  810280:	e0bffc15 	stw	r2,-16(fp)
  810284:	e0bffc17 	ldw	r2,-16(fp)
  810288:	1000041e 	bne	r2,zero,81029c <lcd_write_data+0x74>
    {
      sp->broken = 1;
  81028c:	e0bffe17 	ldw	r2,-8(fp)
  810290:	00c00044 	movi	r3,1
  810294:	10c00805 	stb	r3,32(r2)
      return;
  810298:	00001406 	br	8102ec <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  81029c:	e0bffd17 	ldw	r2,-12(fp)
  8102a0:	10800104 	addi	r2,r2,4
  8102a4:	10800037 	ldwio	r2,0(r2)
  8102a8:	1080200c 	andi	r2,r2,128
  8102ac:	103ff21e 	bne	r2,zero,810278 <__alt_mem_onchip_mem+0xff790278>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8102b0:	01001904 	movi	r4,100
  8102b4:	08122500 	call	812250 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8102b8:	e0bffd17 	ldw	r2,-12(fp)
  8102bc:	10800204 	addi	r2,r2,8
  8102c0:	1007883a 	mov	r3,r2
  8102c4:	e0bfff03 	ldbu	r2,-4(fp)
  8102c8:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8102cc:	e0bffe17 	ldw	r2,-8(fp)
  8102d0:	108008c3 	ldbu	r2,35(r2)
  8102d4:	10800044 	addi	r2,r2,1
  8102d8:	1007883a 	mov	r3,r2
  8102dc:	e0bffe17 	ldw	r2,-8(fp)
  8102e0:	10c008c5 	stb	r3,35(r2)
  8102e4:	00000106 	br	8102ec <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8102e8:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8102ec:	e037883a 	mov	sp,fp
  8102f0:	dfc00117 	ldw	ra,4(sp)
  8102f4:	df000017 	ldw	fp,0(sp)
  8102f8:	dec00204 	addi	sp,sp,8
  8102fc:	f800283a 	ret

00810300 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  810300:	defffc04 	addi	sp,sp,-16
  810304:	dfc00315 	stw	ra,12(sp)
  810308:	df000215 	stw	fp,8(sp)
  81030c:	df000204 	addi	fp,sp,8
  810310:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  810314:	01400044 	movi	r5,1
  810318:	e13fff17 	ldw	r4,-4(fp)
  81031c:	08101700 	call	810170 <lcd_write_command>

  sp->x = 0;
  810320:	e0bfff17 	ldw	r2,-4(fp)
  810324:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  810328:	e0bfff17 	ldw	r2,-4(fp)
  81032c:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  810330:	e0bfff17 	ldw	r2,-4(fp)
  810334:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810338:	e03ffe15 	stw	zero,-8(fp)
  81033c:	00001b06 	br	8103ac <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  810340:	e0bffe17 	ldw	r2,-8(fp)
  810344:	108018e4 	muli	r2,r2,99
  810348:	10801004 	addi	r2,r2,64
  81034c:	e0ffff17 	ldw	r3,-4(fp)
  810350:	1885883a 	add	r2,r3,r2
  810354:	01801444 	movi	r6,81
  810358:	01400804 	movi	r5,32
  81035c:	1009883a 	mov	r4,r2
  810360:	08033340 	call	803334 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  810364:	e0bffe17 	ldw	r2,-8(fp)
  810368:	108018e4 	muli	r2,r2,99
  81036c:	10800c04 	addi	r2,r2,48
  810370:	e0ffff17 	ldw	r3,-4(fp)
  810374:	1885883a 	add	r2,r3,r2
  810378:	01800404 	movi	r6,16
  81037c:	01400804 	movi	r5,32
  810380:	1009883a 	mov	r4,r2
  810384:	08033340 	call	803334 <memset>
    sp->line[y].width = 0;
  810388:	e0ffff17 	ldw	r3,-4(fp)
  81038c:	e0bffe17 	ldw	r2,-8(fp)
  810390:	108018e4 	muli	r2,r2,99
  810394:	1885883a 	add	r2,r3,r2
  810398:	10802444 	addi	r2,r2,145
  81039c:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8103a0:	e0bffe17 	ldw	r2,-8(fp)
  8103a4:	10800044 	addi	r2,r2,1
  8103a8:	e0bffe15 	stw	r2,-8(fp)
  8103ac:	e0bffe17 	ldw	r2,-8(fp)
  8103b0:	10800090 	cmplti	r2,r2,2
  8103b4:	103fe21e 	bne	r2,zero,810340 <__alt_mem_onchip_mem+0xff790340>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8103b8:	0001883a 	nop
  8103bc:	e037883a 	mov	sp,fp
  8103c0:	dfc00117 	ldw	ra,4(sp)
  8103c4:	df000017 	ldw	fp,0(sp)
  8103c8:	dec00204 	addi	sp,sp,8
  8103cc:	f800283a 	ret

008103d0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8103d0:	defff704 	addi	sp,sp,-36
  8103d4:	dfc00815 	stw	ra,32(sp)
  8103d8:	df000715 	stw	fp,28(sp)
  8103dc:	df000704 	addi	fp,sp,28
  8103e0:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8103e4:	e0bfff17 	ldw	r2,-4(fp)
  8103e8:	10800943 	ldbu	r2,37(r2)
  8103ec:	10803fcc 	andi	r2,r2,255
  8103f0:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8103f4:	e03ff915 	stw	zero,-28(fp)
  8103f8:	00006706 	br	810598 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8103fc:	e0ffff17 	ldw	r3,-4(fp)
  810400:	e0bff917 	ldw	r2,-28(fp)
  810404:	108018e4 	muli	r2,r2,99
  810408:	1885883a 	add	r2,r3,r2
  81040c:	10802444 	addi	r2,r2,145
  810410:	10800003 	ldbu	r2,0(r2)
  810414:	10803fcc 	andi	r2,r2,255
  810418:	1080201c 	xori	r2,r2,128
  81041c:	10bfe004 	addi	r2,r2,-128
  810420:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  810424:	e0ffff17 	ldw	r3,-4(fp)
  810428:	e0bff917 	ldw	r2,-28(fp)
  81042c:	108018e4 	muli	r2,r2,99
  810430:	1885883a 	add	r2,r3,r2
  810434:	10802484 	addi	r2,r2,146
  810438:	10800003 	ldbu	r2,0(r2)
  81043c:	10c03fcc 	andi	r3,r2,255
  810440:	e0bffc17 	ldw	r2,-16(fp)
  810444:	1885383a 	mul	r2,r3,r2
  810448:	1005d23a 	srai	r2,r2,8
  81044c:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  810450:	e0fffb17 	ldw	r3,-20(fp)
  810454:	e0bffd17 	ldw	r2,-12(fp)
  810458:	18800116 	blt	r3,r2,810460 <lcd_repaint_screen+0x90>
      offset = 0;
  81045c:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810460:	e03ffa15 	stw	zero,-24(fp)
  810464:	00004606 	br	810580 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  810468:	e0fffa17 	ldw	r3,-24(fp)
  81046c:	e0bffb17 	ldw	r2,-20(fp)
  810470:	1885883a 	add	r2,r3,r2
  810474:	e17ffd17 	ldw	r5,-12(fp)
  810478:	1009883a 	mov	r4,r2
  81047c:	08010200 	call	801020 <__modsi3>
  810480:	1009883a 	mov	r4,r2
  810484:	e0ffff17 	ldw	r3,-4(fp)
  810488:	e0bff917 	ldw	r2,-28(fp)
  81048c:	108018e4 	muli	r2,r2,99
  810490:	1885883a 	add	r2,r3,r2
  810494:	1105883a 	add	r2,r2,r4
  810498:	10801004 	addi	r2,r2,64
  81049c:	10800003 	ldbu	r2,0(r2)
  8104a0:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8104a4:	e0ffff17 	ldw	r3,-4(fp)
  8104a8:	e0bff917 	ldw	r2,-28(fp)
  8104ac:	108018e4 	muli	r2,r2,99
  8104b0:	1887883a 	add	r3,r3,r2
  8104b4:	e0bffa17 	ldw	r2,-24(fp)
  8104b8:	1885883a 	add	r2,r3,r2
  8104bc:	10800c04 	addi	r2,r2,48
  8104c0:	10800003 	ldbu	r2,0(r2)
  8104c4:	10c03fcc 	andi	r3,r2,255
  8104c8:	18c0201c 	xori	r3,r3,128
  8104cc:	18ffe004 	addi	r3,r3,-128
  8104d0:	e0bffe07 	ldb	r2,-8(fp)
  8104d4:	18802726 	beq	r3,r2,810574 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8104d8:	e0fff917 	ldw	r3,-28(fp)
  8104dc:	d0a01204 	addi	r2,gp,-32696
  8104e0:	1885883a 	add	r2,r3,r2
  8104e4:	10800003 	ldbu	r2,0(r2)
  8104e8:	1007883a 	mov	r3,r2
  8104ec:	e0bffa17 	ldw	r2,-24(fp)
  8104f0:	1885883a 	add	r2,r3,r2
  8104f4:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  8104f8:	e0fffe43 	ldbu	r3,-7(fp)
  8104fc:	e0bfff17 	ldw	r2,-4(fp)
  810500:	108008c3 	ldbu	r2,35(r2)
  810504:	10803fcc 	andi	r2,r2,255
  810508:	1080201c 	xori	r2,r2,128
  81050c:	10bfe004 	addi	r2,r2,-128
  810510:	18800a26 	beq	r3,r2,81053c <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  810514:	e0fffe43 	ldbu	r3,-7(fp)
  810518:	00bfe004 	movi	r2,-128
  81051c:	1884b03a 	or	r2,r3,r2
  810520:	10803fcc 	andi	r2,r2,255
  810524:	100b883a 	mov	r5,r2
  810528:	e13fff17 	ldw	r4,-4(fp)
  81052c:	08101700 	call	810170 <lcd_write_command>
          sp->address = address;
  810530:	e0fffe43 	ldbu	r3,-7(fp)
  810534:	e0bfff17 	ldw	r2,-4(fp)
  810538:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  81053c:	e0bffe03 	ldbu	r2,-8(fp)
  810540:	10803fcc 	andi	r2,r2,255
  810544:	100b883a 	mov	r5,r2
  810548:	e13fff17 	ldw	r4,-4(fp)
  81054c:	08102280 	call	810228 <lcd_write_data>
        sp->line[y].visible[x] = c;
  810550:	e0ffff17 	ldw	r3,-4(fp)
  810554:	e0bff917 	ldw	r2,-28(fp)
  810558:	108018e4 	muli	r2,r2,99
  81055c:	1887883a 	add	r3,r3,r2
  810560:	e0bffa17 	ldw	r2,-24(fp)
  810564:	1885883a 	add	r2,r3,r2
  810568:	10800c04 	addi	r2,r2,48
  81056c:	e0fffe03 	ldbu	r3,-8(fp)
  810570:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  810574:	e0bffa17 	ldw	r2,-24(fp)
  810578:	10800044 	addi	r2,r2,1
  81057c:	e0bffa15 	stw	r2,-24(fp)
  810580:	e0bffa17 	ldw	r2,-24(fp)
  810584:	10800410 	cmplti	r2,r2,16
  810588:	103fb71e 	bne	r2,zero,810468 <__alt_mem_onchip_mem+0xff790468>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81058c:	e0bff917 	ldw	r2,-28(fp)
  810590:	10800044 	addi	r2,r2,1
  810594:	e0bff915 	stw	r2,-28(fp)
  810598:	e0bff917 	ldw	r2,-28(fp)
  81059c:	10800090 	cmplti	r2,r2,2
  8105a0:	103f961e 	bne	r2,zero,8103fc <__alt_mem_onchip_mem+0xff7903fc>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8105a4:	0001883a 	nop
  8105a8:	e037883a 	mov	sp,fp
  8105ac:	dfc00117 	ldw	ra,4(sp)
  8105b0:	df000017 	ldw	fp,0(sp)
  8105b4:	dec00204 	addi	sp,sp,8
  8105b8:	f800283a 	ret

008105bc <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8105bc:	defffc04 	addi	sp,sp,-16
  8105c0:	dfc00315 	stw	ra,12(sp)
  8105c4:	df000215 	stw	fp,8(sp)
  8105c8:	df000204 	addi	fp,sp,8
  8105cc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8105d0:	e03ffe15 	stw	zero,-8(fp)
  8105d4:	00001d06 	br	81064c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8105d8:	e0bffe17 	ldw	r2,-8(fp)
  8105dc:	00800f16 	blt	zero,r2,81061c <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8105e0:	e0bffe17 	ldw	r2,-8(fp)
  8105e4:	108018e4 	muli	r2,r2,99
  8105e8:	10801004 	addi	r2,r2,64
  8105ec:	e0ffff17 	ldw	r3,-4(fp)
  8105f0:	1889883a 	add	r4,r3,r2
  8105f4:	e0bffe17 	ldw	r2,-8(fp)
  8105f8:	10800044 	addi	r2,r2,1
  8105fc:	108018e4 	muli	r2,r2,99
  810600:	10801004 	addi	r2,r2,64
  810604:	e0ffff17 	ldw	r3,-4(fp)
  810608:	1885883a 	add	r2,r3,r2
  81060c:	01801404 	movi	r6,80
  810610:	100b883a 	mov	r5,r2
  810614:	0808a780 	call	808a78 <memcpy>
  810618:	00000906 	br	810640 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  81061c:	e0bffe17 	ldw	r2,-8(fp)
  810620:	108018e4 	muli	r2,r2,99
  810624:	10801004 	addi	r2,r2,64
  810628:	e0ffff17 	ldw	r3,-4(fp)
  81062c:	1885883a 	add	r2,r3,r2
  810630:	01801404 	movi	r6,80
  810634:	01400804 	movi	r5,32
  810638:	1009883a 	mov	r4,r2
  81063c:	08033340 	call	803334 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810640:	e0bffe17 	ldw	r2,-8(fp)
  810644:	10800044 	addi	r2,r2,1
  810648:	e0bffe15 	stw	r2,-8(fp)
  81064c:	e0bffe17 	ldw	r2,-8(fp)
  810650:	10800090 	cmplti	r2,r2,2
  810654:	103fe01e 	bne	r2,zero,8105d8 <__alt_mem_onchip_mem+0xff7905d8>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  810658:	e0bfff17 	ldw	r2,-4(fp)
  81065c:	10800883 	ldbu	r2,34(r2)
  810660:	10bfffc4 	addi	r2,r2,-1
  810664:	1007883a 	mov	r3,r2
  810668:	e0bfff17 	ldw	r2,-4(fp)
  81066c:	10c00885 	stb	r3,34(r2)
}
  810670:	0001883a 	nop
  810674:	e037883a 	mov	sp,fp
  810678:	dfc00117 	ldw	ra,4(sp)
  81067c:	df000017 	ldw	fp,0(sp)
  810680:	dec00204 	addi	sp,sp,8
  810684:	f800283a 	ret

00810688 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  810688:	defff904 	addi	sp,sp,-28
  81068c:	dfc00615 	stw	ra,24(sp)
  810690:	df000515 	stw	fp,20(sp)
  810694:	df000504 	addi	fp,sp,20
  810698:	e13ffe15 	stw	r4,-8(fp)
  81069c:	2805883a 	mov	r2,r5
  8106a0:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  8106a4:	e03ffb15 	stw	zero,-20(fp)
  8106a8:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  8106ac:	e0bffe17 	ldw	r2,-8(fp)
  8106b0:	10800a03 	ldbu	r2,40(r2)
  8106b4:	10803fcc 	andi	r2,r2,255
  8106b8:	1080201c 	xori	r2,r2,128
  8106bc:	10bfe004 	addi	r2,r2,-128
  8106c0:	108016d8 	cmpnei	r2,r2,91
  8106c4:	1000411e 	bne	r2,zero,8107cc <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8106c8:	e0bffe17 	ldw	r2,-8(fp)
  8106cc:	10800a04 	addi	r2,r2,40
  8106d0:	10800044 	addi	r2,r2,1
  8106d4:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8106d8:	00000c06 	br	81070c <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8106dc:	e0bffb17 	ldw	r2,-20(fp)
  8106e0:	10c002a4 	muli	r3,r2,10
  8106e4:	e0bffd17 	ldw	r2,-12(fp)
  8106e8:	11000044 	addi	r4,r2,1
  8106ec:	e13ffd15 	stw	r4,-12(fp)
  8106f0:	10800003 	ldbu	r2,0(r2)
  8106f4:	10803fcc 	andi	r2,r2,255
  8106f8:	1080201c 	xori	r2,r2,128
  8106fc:	10bfe004 	addi	r2,r2,-128
  810700:	10bff404 	addi	r2,r2,-48
  810704:	1885883a 	add	r2,r3,r2
  810708:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  81070c:	d0e01317 	ldw	r3,-32692(gp)
  810710:	e0bffd17 	ldw	r2,-12(fp)
  810714:	10800003 	ldbu	r2,0(r2)
  810718:	10803fcc 	andi	r2,r2,255
  81071c:	1080201c 	xori	r2,r2,128
  810720:	10bfe004 	addi	r2,r2,-128
  810724:	10800044 	addi	r2,r2,1
  810728:	1885883a 	add	r2,r3,r2
  81072c:	10800003 	ldbu	r2,0(r2)
  810730:	10803fcc 	andi	r2,r2,255
  810734:	1080010c 	andi	r2,r2,4
  810738:	103fe81e 	bne	r2,zero,8106dc <__alt_mem_onchip_mem+0xff7906dc>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  81073c:	e0bffd17 	ldw	r2,-12(fp)
  810740:	10800003 	ldbu	r2,0(r2)
  810744:	10803fcc 	andi	r2,r2,255
  810748:	1080201c 	xori	r2,r2,128
  81074c:	10bfe004 	addi	r2,r2,-128
  810750:	10800ed8 	cmpnei	r2,r2,59
  810754:	10001f1e 	bne	r2,zero,8107d4 <lcd_handle_escape+0x14c>
    {
      ptr++;
  810758:	e0bffd17 	ldw	r2,-12(fp)
  81075c:	10800044 	addi	r2,r2,1
  810760:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  810764:	00000c06 	br	810798 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  810768:	e0bffc17 	ldw	r2,-16(fp)
  81076c:	10c002a4 	muli	r3,r2,10
  810770:	e0bffd17 	ldw	r2,-12(fp)
  810774:	11000044 	addi	r4,r2,1
  810778:	e13ffd15 	stw	r4,-12(fp)
  81077c:	10800003 	ldbu	r2,0(r2)
  810780:	10803fcc 	andi	r2,r2,255
  810784:	1080201c 	xori	r2,r2,128
  810788:	10bfe004 	addi	r2,r2,-128
  81078c:	10bff404 	addi	r2,r2,-48
  810790:	1885883a 	add	r2,r3,r2
  810794:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  810798:	d0e01317 	ldw	r3,-32692(gp)
  81079c:	e0bffd17 	ldw	r2,-12(fp)
  8107a0:	10800003 	ldbu	r2,0(r2)
  8107a4:	10803fcc 	andi	r2,r2,255
  8107a8:	1080201c 	xori	r2,r2,128
  8107ac:	10bfe004 	addi	r2,r2,-128
  8107b0:	10800044 	addi	r2,r2,1
  8107b4:	1885883a 	add	r2,r3,r2
  8107b8:	10800003 	ldbu	r2,0(r2)
  8107bc:	10803fcc 	andi	r2,r2,255
  8107c0:	1080010c 	andi	r2,r2,4
  8107c4:	103fe81e 	bne	r2,zero,810768 <__alt_mem_onchip_mem+0xff790768>
  8107c8:	00000206 	br	8107d4 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8107cc:	00bfffc4 	movi	r2,-1
  8107d0:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  8107d4:	e0bfff07 	ldb	r2,-4(fp)
  8107d8:	10c012a0 	cmpeqi	r3,r2,74
  8107dc:	1800291e 	bne	r3,zero,810884 <lcd_handle_escape+0x1fc>
  8107e0:	10c012c8 	cmpgei	r3,r2,75
  8107e4:	1800031e 	bne	r3,zero,8107f4 <lcd_handle_escape+0x16c>
  8107e8:	10801220 	cmpeqi	r2,r2,72
  8107ec:	1000061e 	bne	r2,zero,810808 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8107f0:	00004a06 	br	81091c <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  8107f4:	10c012e0 	cmpeqi	r3,r2,75
  8107f8:	1800281e 	bne	r3,zero,81089c <lcd_handle_escape+0x214>
  8107fc:	108019a0 	cmpeqi	r2,r2,102
  810800:	1000011e 	bne	r2,zero,810808 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  810804:	00004506 	br	81091c <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  810808:	e0bffc17 	ldw	r2,-16(fp)
  81080c:	0080050e 	bge	zero,r2,810824 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  810810:	e0bffc17 	ldw	r2,-16(fp)
  810814:	10bfffc4 	addi	r2,r2,-1
  810818:	1007883a 	mov	r3,r2
  81081c:	e0bffe17 	ldw	r2,-8(fp)
  810820:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  810824:	e0bffb17 	ldw	r2,-20(fp)
  810828:	0080370e 	bge	zero,r2,810908 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  81082c:	e0bffb17 	ldw	r2,-20(fp)
  810830:	10bfffc4 	addi	r2,r2,-1
  810834:	1007883a 	mov	r3,r2
  810838:	e0bffe17 	ldw	r2,-8(fp)
  81083c:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  810840:	e0bffe17 	ldw	r2,-8(fp)
  810844:	10800883 	ldbu	r2,34(r2)
  810848:	10803fcc 	andi	r2,r2,255
  81084c:	10800170 	cmpltui	r2,r2,5
  810850:	1000061e 	bne	r2,zero,81086c <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  810854:	e0bffe17 	ldw	r2,-8(fp)
  810858:	00c00104 	movi	r3,4
  81085c:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  810860:	00000206 	br	81086c <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  810864:	e13ffe17 	ldw	r4,-8(fp)
  810868:	08105bc0 	call	8105bc <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  81086c:	e0bffe17 	ldw	r2,-8(fp)
  810870:	10800883 	ldbu	r2,34(r2)
  810874:	10803fcc 	andi	r2,r2,255
  810878:	108000e8 	cmpgeui	r2,r2,3
  81087c:	103ff91e 	bne	r2,zero,810864 <__alt_mem_onchip_mem+0xff790864>
        lcd_scroll_up(sp);
    }
    break;
  810880:	00002106 	br	810908 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  810884:	e0bffb17 	ldw	r2,-20(fp)
  810888:	10800098 	cmpnei	r2,r2,2
  81088c:	1000201e 	bne	r2,zero,810910 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  810890:	e13ffe17 	ldw	r4,-8(fp)
  810894:	08103000 	call	810300 <lcd_clear_screen>
    break;
  810898:	00001d06 	br	810910 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  81089c:	e0bffb17 	ldw	r2,-20(fp)
  8108a0:	00801d16 	blt	zero,r2,810918 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  8108a4:	e0bffe17 	ldw	r2,-8(fp)
  8108a8:	10800843 	ldbu	r2,33(r2)
  8108ac:	10803fcc 	andi	r2,r2,255
  8108b0:	10801428 	cmpgeui	r2,r2,80
  8108b4:	1000181e 	bne	r2,zero,810918 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  8108b8:	e0bffe17 	ldw	r2,-8(fp)
  8108bc:	10800883 	ldbu	r2,34(r2)
  8108c0:	10803fcc 	andi	r2,r2,255
  8108c4:	108018e4 	muli	r2,r2,99
  8108c8:	10801004 	addi	r2,r2,64
  8108cc:	e0fffe17 	ldw	r3,-8(fp)
  8108d0:	1887883a 	add	r3,r3,r2
  8108d4:	e0bffe17 	ldw	r2,-8(fp)
  8108d8:	10800843 	ldbu	r2,33(r2)
  8108dc:	10803fcc 	andi	r2,r2,255
  8108e0:	1889883a 	add	r4,r3,r2
  8108e4:	e0bffe17 	ldw	r2,-8(fp)
  8108e8:	10800843 	ldbu	r2,33(r2)
  8108ec:	10803fcc 	andi	r2,r2,255
  8108f0:	00c01404 	movi	r3,80
  8108f4:	1885c83a 	sub	r2,r3,r2
  8108f8:	100d883a 	mov	r6,r2
  8108fc:	01400804 	movi	r5,32
  810900:	08033340 	call	803334 <memset>
    }
    break;
  810904:	00000406 	br	810918 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  810908:	0001883a 	nop
  81090c:	00000306 	br	81091c <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  810910:	0001883a 	nop
  810914:	00000106 	br	81091c <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  810918:	0001883a 	nop
  }
}
  81091c:	0001883a 	nop
  810920:	e037883a 	mov	sp,fp
  810924:	dfc00117 	ldw	ra,4(sp)
  810928:	df000017 	ldw	fp,0(sp)
  81092c:	dec00204 	addi	sp,sp,8
  810930:	f800283a 	ret

00810934 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  810934:	defff304 	addi	sp,sp,-52
  810938:	dfc00c15 	stw	ra,48(sp)
  81093c:	df000b15 	stw	fp,44(sp)
  810940:	df000b04 	addi	fp,sp,44
  810944:	e13ffc15 	stw	r4,-16(fp)
  810948:	e17ffd15 	stw	r5,-12(fp)
  81094c:	e1bffe15 	stw	r6,-8(fp)
  810950:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  810954:	e0bffe17 	ldw	r2,-8(fp)
  810958:	e0fffd17 	ldw	r3,-12(fp)
  81095c:	1885883a 	add	r2,r3,r2
  810960:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  810964:	e0bffc17 	ldw	r2,-16(fp)
  810968:	00c00044 	movi	r3,1
  81096c:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  810970:	00009906 	br	810bd8 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  810974:	e0bffd17 	ldw	r2,-12(fp)
  810978:	10800003 	ldbu	r2,0(r2)
  81097c:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  810980:	e0bffc17 	ldw	r2,-16(fp)
  810984:	10800903 	ldbu	r2,36(r2)
  810988:	10803fcc 	andi	r2,r2,255
  81098c:	1080201c 	xori	r2,r2,128
  810990:	10bfe004 	addi	r2,r2,-128
  810994:	10003716 	blt	r2,zero,810a74 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  810998:	e0bffc17 	ldw	r2,-16(fp)
  81099c:	10800903 	ldbu	r2,36(r2)
  8109a0:	10803fcc 	andi	r2,r2,255
  8109a4:	1080201c 	xori	r2,r2,128
  8109a8:	10bfe004 	addi	r2,r2,-128
  8109ac:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  8109b0:	e0bffa17 	ldw	r2,-24(fp)
  8109b4:	1000031e 	bne	r2,zero,8109c4 <altera_avalon_lcd_16207_write+0x90>
  8109b8:	e0bff907 	ldb	r2,-28(fp)
  8109bc:	108016d8 	cmpnei	r2,r2,91
  8109c0:	10000d1e 	bne	r2,zero,8109f8 <altera_avalon_lcd_16207_write+0xc4>
  8109c4:	e0bffa17 	ldw	r2,-24(fp)
  8109c8:	10001826 	beq	r2,zero,810a2c <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8109cc:	d0e01317 	ldw	r3,-32692(gp)
  8109d0:	e0bff907 	ldb	r2,-28(fp)
  8109d4:	10800044 	addi	r2,r2,1
  8109d8:	1885883a 	add	r2,r3,r2
  8109dc:	10800003 	ldbu	r2,0(r2)
  8109e0:	10803fcc 	andi	r2,r2,255
  8109e4:	1080010c 	andi	r2,r2,4
  8109e8:	1000101e 	bne	r2,zero,810a2c <altera_avalon_lcd_16207_write+0xf8>
  8109ec:	e0bff907 	ldb	r2,-28(fp)
  8109f0:	10800ee0 	cmpeqi	r2,r2,59
  8109f4:	10000d1e 	bne	r2,zero,810a2c <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  8109f8:	e0fffc17 	ldw	r3,-16(fp)
  8109fc:	e0bffa17 	ldw	r2,-24(fp)
  810a00:	1885883a 	add	r2,r3,r2
  810a04:	10800a04 	addi	r2,r2,40
  810a08:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  810a0c:	e0bff907 	ldb	r2,-28(fp)
  810a10:	100b883a 	mov	r5,r2
  810a14:	e13ffc17 	ldw	r4,-16(fp)
  810a18:	08106880 	call	810688 <lcd_handle_escape>

        sp->esccount = -1;
  810a1c:	e0bffc17 	ldw	r2,-16(fp)
  810a20:	00ffffc4 	movi	r3,-1
  810a24:	10c00905 	stb	r3,36(r2)
  810a28:	00006806 	br	810bcc <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  810a2c:	e0bffc17 	ldw	r2,-16(fp)
  810a30:	10800903 	ldbu	r2,36(r2)
  810a34:	10803fcc 	andi	r2,r2,255
  810a38:	108001e8 	cmpgeui	r2,r2,7
  810a3c:	1000631e 	bne	r2,zero,810bcc <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  810a40:	e0fffc17 	ldw	r3,-16(fp)
  810a44:	e0bffa17 	ldw	r2,-24(fp)
  810a48:	1885883a 	add	r2,r3,r2
  810a4c:	10800a04 	addi	r2,r2,40
  810a50:	e0fff903 	ldbu	r3,-28(fp)
  810a54:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  810a58:	e0bffc17 	ldw	r2,-16(fp)
  810a5c:	10800903 	ldbu	r2,36(r2)
  810a60:	10800044 	addi	r2,r2,1
  810a64:	1007883a 	mov	r3,r2
  810a68:	e0bffc17 	ldw	r2,-16(fp)
  810a6c:	10c00905 	stb	r3,36(r2)
  810a70:	00005606 	br	810bcc <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  810a74:	e0bff907 	ldb	r2,-28(fp)
  810a78:	108006d8 	cmpnei	r2,r2,27
  810a7c:	1000031e 	bne	r2,zero,810a8c <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  810a80:	e0bffc17 	ldw	r2,-16(fp)
  810a84:	10000905 	stb	zero,36(r2)
  810a88:	00005006 	br	810bcc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  810a8c:	e0bff907 	ldb	r2,-28(fp)
  810a90:	10800358 	cmpnei	r2,r2,13
  810a94:	1000031e 	bne	r2,zero,810aa4 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  810a98:	e0bffc17 	ldw	r2,-16(fp)
  810a9c:	10000845 	stb	zero,33(r2)
  810aa0:	00004a06 	br	810bcc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  810aa4:	e0bff907 	ldb	r2,-28(fp)
  810aa8:	10800298 	cmpnei	r2,r2,10
  810aac:	1000101e 	bne	r2,zero,810af0 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  810ab0:	e0bffc17 	ldw	r2,-16(fp)
  810ab4:	10000845 	stb	zero,33(r2)
      sp->y++;
  810ab8:	e0bffc17 	ldw	r2,-16(fp)
  810abc:	10800883 	ldbu	r2,34(r2)
  810ac0:	10800044 	addi	r2,r2,1
  810ac4:	1007883a 	mov	r3,r2
  810ac8:	e0bffc17 	ldw	r2,-16(fp)
  810acc:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  810ad0:	e0bffc17 	ldw	r2,-16(fp)
  810ad4:	10800883 	ldbu	r2,34(r2)
  810ad8:	10803fcc 	andi	r2,r2,255
  810adc:	108000f0 	cmpltui	r2,r2,3
  810ae0:	10003a1e 	bne	r2,zero,810bcc <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  810ae4:	e13ffc17 	ldw	r4,-16(fp)
  810ae8:	08105bc0 	call	8105bc <lcd_scroll_up>
  810aec:	00003706 	br	810bcc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  810af0:	e0bff907 	ldb	r2,-28(fp)
  810af4:	10800218 	cmpnei	r2,r2,8
  810af8:	10000b1e 	bne	r2,zero,810b28 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  810afc:	e0bffc17 	ldw	r2,-16(fp)
  810b00:	10800843 	ldbu	r2,33(r2)
  810b04:	10803fcc 	andi	r2,r2,255
  810b08:	10003026 	beq	r2,zero,810bcc <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  810b0c:	e0bffc17 	ldw	r2,-16(fp)
  810b10:	10800843 	ldbu	r2,33(r2)
  810b14:	10bfffc4 	addi	r2,r2,-1
  810b18:	1007883a 	mov	r3,r2
  810b1c:	e0bffc17 	ldw	r2,-16(fp)
  810b20:	10c00845 	stb	r3,33(r2)
  810b24:	00002906 	br	810bcc <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  810b28:	d0e01317 	ldw	r3,-32692(gp)
  810b2c:	e0bff907 	ldb	r2,-28(fp)
  810b30:	10800044 	addi	r2,r2,1
  810b34:	1885883a 	add	r2,r3,r2
  810b38:	10800003 	ldbu	r2,0(r2)
  810b3c:	10803fcc 	andi	r2,r2,255
  810b40:	1080201c 	xori	r2,r2,128
  810b44:	10bfe004 	addi	r2,r2,-128
  810b48:	108025cc 	andi	r2,r2,151
  810b4c:	10001f26 	beq	r2,zero,810bcc <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  810b50:	e0bffc17 	ldw	r2,-16(fp)
  810b54:	10800883 	ldbu	r2,34(r2)
  810b58:	10803fcc 	andi	r2,r2,255
  810b5c:	108000b0 	cmpltui	r2,r2,2
  810b60:	1000021e 	bne	r2,zero,810b6c <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  810b64:	e13ffc17 	ldw	r4,-16(fp)
  810b68:	08105bc0 	call	8105bc <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  810b6c:	e0bffc17 	ldw	r2,-16(fp)
  810b70:	10800843 	ldbu	r2,33(r2)
  810b74:	10803fcc 	andi	r2,r2,255
  810b78:	10801428 	cmpgeui	r2,r2,80
  810b7c:	10000d1e 	bne	r2,zero,810bb4 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  810b80:	e0bffc17 	ldw	r2,-16(fp)
  810b84:	10800883 	ldbu	r2,34(r2)
  810b88:	10c03fcc 	andi	r3,r2,255
  810b8c:	e0bffc17 	ldw	r2,-16(fp)
  810b90:	10800843 	ldbu	r2,33(r2)
  810b94:	10803fcc 	andi	r2,r2,255
  810b98:	e13ffc17 	ldw	r4,-16(fp)
  810b9c:	18c018e4 	muli	r3,r3,99
  810ba0:	20c7883a 	add	r3,r4,r3
  810ba4:	1885883a 	add	r2,r3,r2
  810ba8:	10801004 	addi	r2,r2,64
  810bac:	e0fff903 	ldbu	r3,-28(fp)
  810bb0:	10c00005 	stb	r3,0(r2)

      sp->x++;
  810bb4:	e0bffc17 	ldw	r2,-16(fp)
  810bb8:	10800843 	ldbu	r2,33(r2)
  810bbc:	10800044 	addi	r2,r2,1
  810bc0:	1007883a 	mov	r3,r2
  810bc4:	e0bffc17 	ldw	r2,-16(fp)
  810bc8:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  810bcc:	e0bffd17 	ldw	r2,-12(fp)
  810bd0:	10800044 	addi	r2,r2,1
  810bd4:	e0bffd15 	stw	r2,-12(fp)
  810bd8:	e0fffd17 	ldw	r3,-12(fp)
  810bdc:	e0bff817 	ldw	r2,-32(fp)
  810be0:	18bf6436 	bltu	r3,r2,810974 <__alt_mem_onchip_mem+0xff790974>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  810be4:	00800404 	movi	r2,16
  810be8:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810bec:	e03ff515 	stw	zero,-44(fp)
  810bf0:	00003706 	br	810cd0 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810bf4:	00801404 	movi	r2,80
  810bf8:	e0bff715 	stw	r2,-36(fp)
  810bfc:	00001106 	br	810c44 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  810c00:	e0bff717 	ldw	r2,-36(fp)
  810c04:	10bfffc4 	addi	r2,r2,-1
  810c08:	e13ffc17 	ldw	r4,-16(fp)
  810c0c:	e0fff517 	ldw	r3,-44(fp)
  810c10:	18c018e4 	muli	r3,r3,99
  810c14:	20c7883a 	add	r3,r4,r3
  810c18:	1885883a 	add	r2,r3,r2
  810c1c:	10801004 	addi	r2,r2,64
  810c20:	10800003 	ldbu	r2,0(r2)
  810c24:	10803fcc 	andi	r2,r2,255
  810c28:	1080201c 	xori	r2,r2,128
  810c2c:	10bfe004 	addi	r2,r2,-128
  810c30:	10800820 	cmpeqi	r2,r2,32
  810c34:	10000626 	beq	r2,zero,810c50 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  810c38:	e0bff717 	ldw	r2,-36(fp)
  810c3c:	10bfffc4 	addi	r2,r2,-1
  810c40:	e0bff715 	stw	r2,-36(fp)
  810c44:	e0bff717 	ldw	r2,-36(fp)
  810c48:	00bfed16 	blt	zero,r2,810c00 <__alt_mem_onchip_mem+0xff790c00>
  810c4c:	00000106 	br	810c54 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  810c50:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  810c54:	e0bff717 	ldw	r2,-36(fp)
  810c58:	10800448 	cmpgei	r2,r2,17
  810c5c:	1000031e 	bne	r2,zero,810c6c <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  810c60:	00800404 	movi	r2,16
  810c64:	e0bff715 	stw	r2,-36(fp)
  810c68:	00000306 	br	810c78 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  810c6c:	e0bff717 	ldw	r2,-36(fp)
  810c70:	10800044 	addi	r2,r2,1
  810c74:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  810c78:	e0bff717 	ldw	r2,-36(fp)
  810c7c:	1009883a 	mov	r4,r2
  810c80:	e0fffc17 	ldw	r3,-16(fp)
  810c84:	e0bff517 	ldw	r2,-44(fp)
  810c88:	108018e4 	muli	r2,r2,99
  810c8c:	1885883a 	add	r2,r3,r2
  810c90:	10802444 	addi	r2,r2,145
  810c94:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  810c98:	e0fff617 	ldw	r3,-40(fp)
  810c9c:	e0bff717 	ldw	r2,-36(fp)
  810ca0:	1880020e 	bge	r3,r2,810cac <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  810ca4:	e0bff717 	ldw	r2,-36(fp)
  810ca8:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  810cac:	e0fffc17 	ldw	r3,-16(fp)
  810cb0:	e0bff517 	ldw	r2,-44(fp)
  810cb4:	108018e4 	muli	r2,r2,99
  810cb8:	1885883a 	add	r2,r3,r2
  810cbc:	10802484 	addi	r2,r2,146
  810cc0:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810cc4:	e0bff517 	ldw	r2,-44(fp)
  810cc8:	10800044 	addi	r2,r2,1
  810ccc:	e0bff515 	stw	r2,-44(fp)
  810cd0:	e0bff517 	ldw	r2,-44(fp)
  810cd4:	10800090 	cmplti	r2,r2,2
  810cd8:	103fc61e 	bne	r2,zero,810bf4 <__alt_mem_onchip_mem+0xff790bf4>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  810cdc:	e0bff617 	ldw	r2,-40(fp)
  810ce0:	10800448 	cmpgei	r2,r2,17
  810ce4:	1000031e 	bne	r2,zero,810cf4 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  810ce8:	e0bffc17 	ldw	r2,-16(fp)
  810cec:	10000985 	stb	zero,38(r2)
  810cf0:	00002e06 	br	810dac <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  810cf4:	e0bff617 	ldw	r2,-40(fp)
  810cf8:	1085883a 	add	r2,r2,r2
  810cfc:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  810d00:	e0bff617 	ldw	r2,-40(fp)
  810d04:	1007883a 	mov	r3,r2
  810d08:	e0bffc17 	ldw	r2,-16(fp)
  810d0c:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810d10:	e03ff515 	stw	zero,-44(fp)
  810d14:	00002206 	br	810da0 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  810d18:	e0fffc17 	ldw	r3,-16(fp)
  810d1c:	e0bff517 	ldw	r2,-44(fp)
  810d20:	108018e4 	muli	r2,r2,99
  810d24:	1885883a 	add	r2,r3,r2
  810d28:	10802444 	addi	r2,r2,145
  810d2c:	10800003 	ldbu	r2,0(r2)
  810d30:	10803fcc 	andi	r2,r2,255
  810d34:	1080201c 	xori	r2,r2,128
  810d38:	10bfe004 	addi	r2,r2,-128
  810d3c:	10800450 	cmplti	r2,r2,17
  810d40:	1000141e 	bne	r2,zero,810d94 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  810d44:	e0fffc17 	ldw	r3,-16(fp)
  810d48:	e0bff517 	ldw	r2,-44(fp)
  810d4c:	108018e4 	muli	r2,r2,99
  810d50:	1885883a 	add	r2,r3,r2
  810d54:	10802444 	addi	r2,r2,145
  810d58:	10800003 	ldbu	r2,0(r2)
  810d5c:	10803fcc 	andi	r2,r2,255
  810d60:	1080201c 	xori	r2,r2,128
  810d64:	10bfe004 	addi	r2,r2,-128
  810d68:	1004923a 	slli	r2,r2,8
  810d6c:	e17ff617 	ldw	r5,-40(fp)
  810d70:	1009883a 	mov	r4,r2
  810d74:	0800f9c0 	call	800f9c <__divsi3>
  810d78:	1009883a 	mov	r4,r2
  810d7c:	e0fffc17 	ldw	r3,-16(fp)
  810d80:	e0bff517 	ldw	r2,-44(fp)
  810d84:	108018e4 	muli	r2,r2,99
  810d88:	1885883a 	add	r2,r3,r2
  810d8c:	10802484 	addi	r2,r2,146
  810d90:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  810d94:	e0bff517 	ldw	r2,-44(fp)
  810d98:	10800044 	addi	r2,r2,1
  810d9c:	e0bff515 	stw	r2,-44(fp)
  810da0:	e0bff517 	ldw	r2,-44(fp)
  810da4:	10800090 	cmplti	r2,r2,2
  810da8:	103fdb1e 	bne	r2,zero,810d18 <__alt_mem_onchip_mem+0xff790d18>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  810dac:	e0bffc17 	ldw	r2,-16(fp)
  810db0:	10800943 	ldbu	r2,37(r2)
  810db4:	10803fcc 	andi	r2,r2,255
  810db8:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  810dbc:	e13ffc17 	ldw	r4,-16(fp)
  810dc0:	08103d00 	call	8103d0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  810dc4:	e0bffc17 	ldw	r2,-16(fp)
  810dc8:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  810dcc:	e0bffc17 	ldw	r2,-16(fp)
  810dd0:	10800943 	ldbu	r2,37(r2)
  810dd4:	10c03fcc 	andi	r3,r2,255
  810dd8:	e0bffb17 	ldw	r2,-20(fp)
  810ddc:	18800426 	beq	r3,r2,810df0 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  810de0:	e0bffc17 	ldw	r2,-16(fp)
  810de4:	00c00044 	movi	r3,1
  810de8:	10c009c5 	stb	r3,39(r2)
  }
  810dec:	003fef06 	br	810dac <__alt_mem_onchip_mem+0xff790dac>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  810df0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  810df4:	e0bffe17 	ldw	r2,-8(fp)
}
  810df8:	e037883a 	mov	sp,fp
  810dfc:	dfc00117 	ldw	ra,4(sp)
  810e00:	df000017 	ldw	fp,0(sp)
  810e04:	dec00204 	addi	sp,sp,8
  810e08:	f800283a 	ret

00810e0c <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  810e0c:	defffc04 	addi	sp,sp,-16
  810e10:	dfc00315 	stw	ra,12(sp)
  810e14:	df000215 	stw	fp,8(sp)
  810e18:	df000204 	addi	fp,sp,8
  810e1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  810e20:	e0bfff17 	ldw	r2,-4(fp)
  810e24:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  810e28:	e0bffe17 	ldw	r2,-8(fp)
  810e2c:	10800943 	ldbu	r2,37(r2)
  810e30:	10803fcc 	andi	r2,r2,255
  810e34:	10c00044 	addi	r3,r2,1
  810e38:	e0bffe17 	ldw	r2,-8(fp)
  810e3c:	10800983 	ldbu	r2,38(r2)
  810e40:	10803fcc 	andi	r2,r2,255
  810e44:	18800316 	blt	r3,r2,810e54 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  810e48:	e0bffe17 	ldw	r2,-8(fp)
  810e4c:	10000945 	stb	zero,37(r2)
  810e50:	00000606 	br	810e6c <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  810e54:	e0bffe17 	ldw	r2,-8(fp)
  810e58:	10800943 	ldbu	r2,37(r2)
  810e5c:	10800044 	addi	r2,r2,1
  810e60:	1007883a 	mov	r3,r2
  810e64:	e0bffe17 	ldw	r2,-8(fp)
  810e68:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  810e6c:	e0bffe17 	ldw	r2,-8(fp)
  810e70:	10800983 	ldbu	r2,38(r2)
  810e74:	10803fcc 	andi	r2,r2,255
  810e78:	10000826 	beq	r2,zero,810e9c <alt_lcd_16207_timeout+0x90>
  810e7c:	e0bffe17 	ldw	r2,-8(fp)
  810e80:	108009c3 	ldbu	r2,39(r2)
  810e84:	10803fcc 	andi	r2,r2,255
  810e88:	1080201c 	xori	r2,r2,128
  810e8c:	10bfe004 	addi	r2,r2,-128
  810e90:	1000021e 	bne	r2,zero,810e9c <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  810e94:	e13ffe17 	ldw	r4,-8(fp)
  810e98:	08103d00 	call	8103d0 <lcd_repaint_screen>

  return sp->period;
  810e9c:	e0bffe17 	ldw	r2,-8(fp)
  810ea0:	10800717 	ldw	r2,28(r2)
}
  810ea4:	e037883a 	mov	sp,fp
  810ea8:	dfc00117 	ldw	ra,4(sp)
  810eac:	df000017 	ldw	fp,0(sp)
  810eb0:	dec00204 	addi	sp,sp,8
  810eb4:	f800283a 	ret

00810eb8 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  810eb8:	defffc04 	addi	sp,sp,-16
  810ebc:	dfc00315 	stw	ra,12(sp)
  810ec0:	df000215 	stw	fp,8(sp)
  810ec4:	df000204 	addi	fp,sp,8
  810ec8:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  810ecc:	e0bfff17 	ldw	r2,-4(fp)
  810ed0:	10800017 	ldw	r2,0(r2)
  810ed4:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  810ed8:	e0bfff17 	ldw	r2,-4(fp)
  810edc:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  810ee0:	010ea604 	movi	r4,15000
  810ee4:	08122500 	call	812250 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810ee8:	e0bffe17 	ldw	r2,-8(fp)
  810eec:	00c00c04 	movi	r3,48
  810ef0:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  810ef4:	01040104 	movi	r4,4100
  810ef8:	08122500 	call	812250 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810efc:	e0bffe17 	ldw	r2,-8(fp)
  810f00:	00c00c04 	movi	r3,48
  810f04:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  810f08:	0100fa04 	movi	r4,1000
  810f0c:	08122500 	call	812250 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  810f10:	e0bffe17 	ldw	r2,-8(fp)
  810f14:	00c00c04 	movi	r3,48
  810f18:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  810f1c:	01400e04 	movi	r5,56
  810f20:	e13fff17 	ldw	r4,-4(fp)
  810f24:	08101700 	call	810170 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  810f28:	01400204 	movi	r5,8
  810f2c:	e13fff17 	ldw	r4,-4(fp)
  810f30:	08101700 	call	810170 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  810f34:	e13fff17 	ldw	r4,-4(fp)
  810f38:	08103000 	call	810300 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  810f3c:	01400184 	movi	r5,6
  810f40:	e13fff17 	ldw	r4,-4(fp)
  810f44:	08101700 	call	810170 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  810f48:	01400304 	movi	r5,12
  810f4c:	e13fff17 	ldw	r4,-4(fp)
  810f50:	08101700 	call	810170 <lcd_write_command>

  sp->esccount = -1;
  810f54:	e0bfff17 	ldw	r2,-4(fp)
  810f58:	00ffffc4 	movi	r3,-1
  810f5c:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  810f60:	e0bfff17 	ldw	r2,-4(fp)
  810f64:	10800a04 	addi	r2,r2,40
  810f68:	01800204 	movi	r6,8
  810f6c:	000b883a 	mov	r5,zero
  810f70:	1009883a 	mov	r4,r2
  810f74:	08033340 	call	803334 <memset>

  sp->scrollpos = 0;
  810f78:	e0bfff17 	ldw	r2,-4(fp)
  810f7c:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  810f80:	e0bfff17 	ldw	r2,-4(fp)
  810f84:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  810f88:	e0bfff17 	ldw	r2,-4(fp)
  810f8c:	100009c5 	stb	zero,39(r2)
  810f90:	d0a77017 	ldw	r2,-25152(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  810f94:	01400284 	movi	r5,10
  810f98:	1009883a 	mov	r4,r2
  810f9c:	08010940 	call	801094 <__udivsi3>
  810fa0:	1007883a 	mov	r3,r2
  810fa4:	e0bfff17 	ldw	r2,-4(fp)
  810fa8:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  810fac:	e0bfff17 	ldw	r2,-4(fp)
  810fb0:	10c00104 	addi	r3,r2,4
  810fb4:	e0bfff17 	ldw	r2,-4(fp)
  810fb8:	10800717 	ldw	r2,28(r2)
  810fbc:	e1ffff17 	ldw	r7,-4(fp)
  810fc0:	01802074 	movhi	r6,129
  810fc4:	31838304 	addi	r6,r6,3596
  810fc8:	100b883a 	mov	r5,r2
  810fcc:	1809883a 	mov	r4,r3
  810fd0:	080e6180 	call	80e618 <alt_alarm_start>
}
  810fd4:	0001883a 	nop
  810fd8:	e037883a 	mov	sp,fp
  810fdc:	dfc00117 	ldw	ra,4(sp)
  810fe0:	df000017 	ldw	fp,0(sp)
  810fe4:	dec00204 	addi	sp,sp,8
  810fe8:	f800283a 	ret

00810fec <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810fec:	defffa04 	addi	sp,sp,-24
  810ff0:	dfc00515 	stw	ra,20(sp)
  810ff4:	df000415 	stw	fp,16(sp)
  810ff8:	df000404 	addi	fp,sp,16
  810ffc:	e13ffd15 	stw	r4,-12(fp)
  811000:	e17ffe15 	stw	r5,-8(fp)
  811004:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  811008:	e0bffd17 	ldw	r2,-12(fp)
  81100c:	10800017 	ldw	r2,0(r2)
  811010:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  811014:	e0bffc17 	ldw	r2,-16(fp)
  811018:	10c00a04 	addi	r3,r2,40
  81101c:	e0bffd17 	ldw	r2,-12(fp)
  811020:	10800217 	ldw	r2,8(r2)
  811024:	100f883a 	mov	r7,r2
  811028:	e1bfff17 	ldw	r6,-4(fp)
  81102c:	e17ffe17 	ldw	r5,-8(fp)
  811030:	1809883a 	mov	r4,r3
  811034:	08109340 	call	810934 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  811038:	e037883a 	mov	sp,fp
  81103c:	dfc00117 	ldw	ra,4(sp)
  811040:	df000017 	ldw	fp,0(sp)
  811044:	dec00204 	addi	sp,sp,8
  811048:	f800283a 	ret

0081104c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  81104c:	defffa04 	addi	sp,sp,-24
  811050:	dfc00515 	stw	ra,20(sp)
  811054:	df000415 	stw	fp,16(sp)
  811058:	df000404 	addi	fp,sp,16
  81105c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  811060:	0007883a 	mov	r3,zero
  811064:	e0bfff17 	ldw	r2,-4(fp)
  811068:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  81106c:	e0bfff17 	ldw	r2,-4(fp)
  811070:	10800104 	addi	r2,r2,4
  811074:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811078:	0005303a 	rdctl	r2,status
  81107c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811080:	e0fffd17 	ldw	r3,-12(fp)
  811084:	00bfff84 	movi	r2,-2
  811088:	1884703a 	and	r2,r3,r2
  81108c:	1001703a 	wrctl	status,r2
  
  return context;
  811090:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  811094:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  811098:	080f3c40 	call	80f3c4 <alt_tick>
  81109c:	e0bffc17 	ldw	r2,-16(fp)
  8110a0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110a4:	e0bffe17 	ldw	r2,-8(fp)
  8110a8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8110ac:	0001883a 	nop
  8110b0:	e037883a 	mov	sp,fp
  8110b4:	dfc00117 	ldw	ra,4(sp)
  8110b8:	df000017 	ldw	fp,0(sp)
  8110bc:	dec00204 	addi	sp,sp,8
  8110c0:	f800283a 	ret

008110c4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  8110c4:	defff804 	addi	sp,sp,-32
  8110c8:	dfc00715 	stw	ra,28(sp)
  8110cc:	df000615 	stw	fp,24(sp)
  8110d0:	df000604 	addi	fp,sp,24
  8110d4:	e13ffc15 	stw	r4,-16(fp)
  8110d8:	e17ffd15 	stw	r5,-12(fp)
  8110dc:	e1bffe15 	stw	r6,-8(fp)
  8110e0:	e1ffff15 	stw	r7,-4(fp)
  8110e4:	e0bfff17 	ldw	r2,-4(fp)
  8110e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8110ec:	d0a77017 	ldw	r2,-25152(gp)
  8110f0:	1000021e 	bne	r2,zero,8110fc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  8110f4:	e0bffb17 	ldw	r2,-20(fp)
  8110f8:	d0a77015 	stw	r2,-25152(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8110fc:	e0bffc17 	ldw	r2,-16(fp)
  811100:	10800104 	addi	r2,r2,4
  811104:	00c001c4 	movi	r3,7
  811108:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  81110c:	d8000015 	stw	zero,0(sp)
  811110:	e1fffc17 	ldw	r7,-16(fp)
  811114:	01802074 	movhi	r6,129
  811118:	31841304 	addi	r6,r6,4172
  81111c:	e17ffe17 	ldw	r5,-8(fp)
  811120:	e13ffd17 	ldw	r4,-12(fp)
  811124:	0811e700 	call	811e70 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  811128:	0001883a 	nop
  81112c:	e037883a 	mov	sp,fp
  811130:	dfc00117 	ldw	ra,4(sp)
  811134:	df000017 	ldw	fp,0(sp)
  811138:	dec00204 	addi	sp,sp,8
  81113c:	f800283a 	ret

00811140 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811140:	defffa04 	addi	sp,sp,-24
  811144:	dfc00515 	stw	ra,20(sp)
  811148:	df000415 	stw	fp,16(sp)
  81114c:	df000404 	addi	fp,sp,16
  811150:	e13ffd15 	stw	r4,-12(fp)
  811154:	e17ffe15 	stw	r5,-8(fp)
  811158:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  81115c:	e0bffd17 	ldw	r2,-12(fp)
  811160:	10800017 	ldw	r2,0(r2)
  811164:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  811168:	e0bffc17 	ldw	r2,-16(fp)
  81116c:	10c00a04 	addi	r3,r2,40
  811170:	e0bffd17 	ldw	r2,-12(fp)
  811174:	10800217 	ldw	r2,8(r2)
  811178:	100f883a 	mov	r7,r2
  81117c:	e1bfff17 	ldw	r6,-4(fp)
  811180:	e17ffe17 	ldw	r5,-8(fp)
  811184:	1809883a 	mov	r4,r3
  811188:	08116540 	call	811654 <altera_avalon_uart_read>
      fd->fd_flags);
}
  81118c:	e037883a 	mov	sp,fp
  811190:	dfc00117 	ldw	ra,4(sp)
  811194:	df000017 	ldw	fp,0(sp)
  811198:	dec00204 	addi	sp,sp,8
  81119c:	f800283a 	ret

008111a0 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8111a0:	defffa04 	addi	sp,sp,-24
  8111a4:	dfc00515 	stw	ra,20(sp)
  8111a8:	df000415 	stw	fp,16(sp)
  8111ac:	df000404 	addi	fp,sp,16
  8111b0:	e13ffd15 	stw	r4,-12(fp)
  8111b4:	e17ffe15 	stw	r5,-8(fp)
  8111b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8111bc:	e0bffd17 	ldw	r2,-12(fp)
  8111c0:	10800017 	ldw	r2,0(r2)
  8111c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8111c8:	e0bffc17 	ldw	r2,-16(fp)
  8111cc:	10c00a04 	addi	r3,r2,40
  8111d0:	e0bffd17 	ldw	r2,-12(fp)
  8111d4:	10800217 	ldw	r2,8(r2)
  8111d8:	100f883a 	mov	r7,r2
  8111dc:	e1bfff17 	ldw	r6,-4(fp)
  8111e0:	e17ffe17 	ldw	r5,-8(fp)
  8111e4:	1809883a 	mov	r4,r3
  8111e8:	081186c0 	call	81186c <altera_avalon_uart_write>
      fd->fd_flags);
}
  8111ec:	e037883a 	mov	sp,fp
  8111f0:	dfc00117 	ldw	ra,4(sp)
  8111f4:	df000017 	ldw	fp,0(sp)
  8111f8:	dec00204 	addi	sp,sp,8
  8111fc:	f800283a 	ret

00811200 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  811200:	defffc04 	addi	sp,sp,-16
  811204:	dfc00315 	stw	ra,12(sp)
  811208:	df000215 	stw	fp,8(sp)
  81120c:	df000204 	addi	fp,sp,8
  811210:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  811214:	e0bfff17 	ldw	r2,-4(fp)
  811218:	10800017 	ldw	r2,0(r2)
  81121c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  811220:	e0bffe17 	ldw	r2,-8(fp)
  811224:	10c00a04 	addi	r3,r2,40
  811228:	e0bfff17 	ldw	r2,-4(fp)
  81122c:	10800217 	ldw	r2,8(r2)
  811230:	100b883a 	mov	r5,r2
  811234:	1809883a 	mov	r4,r3
  811238:	08115c40 	call	8115c4 <altera_avalon_uart_close>
}
  81123c:	e037883a 	mov	sp,fp
  811240:	dfc00117 	ldw	ra,4(sp)
  811244:	df000017 	ldw	fp,0(sp)
  811248:	dec00204 	addi	sp,sp,8
  81124c:	f800283a 	ret

00811250 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  811250:	defff804 	addi	sp,sp,-32
  811254:	dfc00715 	stw	ra,28(sp)
  811258:	df000615 	stw	fp,24(sp)
  81125c:	df000604 	addi	fp,sp,24
  811260:	e13ffd15 	stw	r4,-12(fp)
  811264:	e17ffe15 	stw	r5,-8(fp)
  811268:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  81126c:	e0bffd17 	ldw	r2,-12(fp)
  811270:	10800017 	ldw	r2,0(r2)
  811274:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  811278:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81127c:	1000041e 	bne	r2,zero,811290 <altera_avalon_uart_init+0x40>
  811280:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  811284:	1000021e 	bne	r2,zero,811290 <altera_avalon_uart_init+0x40>
  811288:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  81128c:	10000226 	beq	r2,zero,811298 <altera_avalon_uart_init+0x48>
  811290:	00800044 	movi	r2,1
  811294:	00000106 	br	81129c <altera_avalon_uart_init+0x4c>
  811298:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  81129c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8112a0:	e0bffc17 	ldw	r2,-16(fp)
  8112a4:	10000f1e 	bne	r2,zero,8112e4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8112a8:	e0bffd17 	ldw	r2,-12(fp)
  8112ac:	00c32004 	movi	r3,3200
  8112b0:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8112b4:	e0bffb17 	ldw	r2,-20(fp)
  8112b8:	10800304 	addi	r2,r2,12
  8112bc:	e0fffd17 	ldw	r3,-12(fp)
  8112c0:	18c00117 	ldw	r3,4(r3)
  8112c4:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8112c8:	d8000015 	stw	zero,0(sp)
  8112cc:	e1fffd17 	ldw	r7,-12(fp)
  8112d0:	01802074 	movhi	r6,129
  8112d4:	3184bf04 	addi	r6,r6,4860
  8112d8:	e17fff17 	ldw	r5,-4(fp)
  8112dc:	e13ffe17 	ldw	r4,-8(fp)
  8112e0:	0811e700 	call	811e70 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8112e4:	0001883a 	nop
  8112e8:	e037883a 	mov	sp,fp
  8112ec:	dfc00117 	ldw	ra,4(sp)
  8112f0:	df000017 	ldw	fp,0(sp)
  8112f4:	dec00204 	addi	sp,sp,8
  8112f8:	f800283a 	ret

008112fc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8112fc:	defffa04 	addi	sp,sp,-24
  811300:	dfc00515 	stw	ra,20(sp)
  811304:	df000415 	stw	fp,16(sp)
  811308:	df000404 	addi	fp,sp,16
  81130c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  811310:	e0bfff17 	ldw	r2,-4(fp)
  811314:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  811318:	e0bffc17 	ldw	r2,-16(fp)
  81131c:	10800017 	ldw	r2,0(r2)
  811320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  811324:	e0bffd17 	ldw	r2,-12(fp)
  811328:	10800204 	addi	r2,r2,8
  81132c:	10800037 	ldwio	r2,0(r2)
  811330:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  811334:	e0bffd17 	ldw	r2,-12(fp)
  811338:	10800204 	addi	r2,r2,8
  81133c:	0007883a 	mov	r3,zero
  811340:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  811344:	e0bffd17 	ldw	r2,-12(fp)
  811348:	10800204 	addi	r2,r2,8
  81134c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  811350:	e0bffe17 	ldw	r2,-8(fp)
  811354:	1080200c 	andi	r2,r2,128
  811358:	10000326 	beq	r2,zero,811368 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  81135c:	e17ffe17 	ldw	r5,-8(fp)
  811360:	e13ffc17 	ldw	r4,-16(fp)
  811364:	08113980 	call	811398 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  811368:	e0bffe17 	ldw	r2,-8(fp)
  81136c:	1081100c 	andi	r2,r2,1088
  811370:	10000326 	beq	r2,zero,811380 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  811374:	e17ffe17 	ldw	r5,-8(fp)
  811378:	e13ffc17 	ldw	r4,-16(fp)
  81137c:	081147c0 	call	81147c <altera_avalon_uart_txirq>
  }
  

}
  811380:	0001883a 	nop
  811384:	e037883a 	mov	sp,fp
  811388:	dfc00117 	ldw	ra,4(sp)
  81138c:	df000017 	ldw	fp,0(sp)
  811390:	dec00204 	addi	sp,sp,8
  811394:	f800283a 	ret

00811398 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  811398:	defffc04 	addi	sp,sp,-16
  81139c:	df000315 	stw	fp,12(sp)
  8113a0:	df000304 	addi	fp,sp,12
  8113a4:	e13ffe15 	stw	r4,-8(fp)
  8113a8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8113ac:	e0bfff17 	ldw	r2,-4(fp)
  8113b0:	108000cc 	andi	r2,r2,3
  8113b4:	10002c1e 	bne	r2,zero,811468 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8113b8:	e0bffe17 	ldw	r2,-8(fp)
  8113bc:	10800317 	ldw	r2,12(r2)
  8113c0:	e0bffe17 	ldw	r2,-8(fp)
  8113c4:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8113c8:	e0bffe17 	ldw	r2,-8(fp)
  8113cc:	10800317 	ldw	r2,12(r2)
  8113d0:	10800044 	addi	r2,r2,1
  8113d4:	10800fcc 	andi	r2,r2,63
  8113d8:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8113dc:	e0bffe17 	ldw	r2,-8(fp)
  8113e0:	10800317 	ldw	r2,12(r2)
  8113e4:	e0fffe17 	ldw	r3,-8(fp)
  8113e8:	18c00017 	ldw	r3,0(r3)
  8113ec:	18c00037 	ldwio	r3,0(r3)
  8113f0:	1809883a 	mov	r4,r3
  8113f4:	e0fffe17 	ldw	r3,-8(fp)
  8113f8:	1885883a 	add	r2,r3,r2
  8113fc:	10800704 	addi	r2,r2,28
  811400:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  811404:	e0bffe17 	ldw	r2,-8(fp)
  811408:	e0fffd17 	ldw	r3,-12(fp)
  81140c:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  811410:	e0bffe17 	ldw	r2,-8(fp)
  811414:	10800317 	ldw	r2,12(r2)
  811418:	10800044 	addi	r2,r2,1
  81141c:	10800fcc 	andi	r2,r2,63
  811420:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  811424:	e0bffe17 	ldw	r2,-8(fp)
  811428:	10c00217 	ldw	r3,8(r2)
  81142c:	e0bffd17 	ldw	r2,-12(fp)
  811430:	18800e1e 	bne	r3,r2,81146c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811434:	e0bffe17 	ldw	r2,-8(fp)
  811438:	10c00117 	ldw	r3,4(r2)
  81143c:	00bfdfc4 	movi	r2,-129
  811440:	1886703a 	and	r3,r3,r2
  811444:	e0bffe17 	ldw	r2,-8(fp)
  811448:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  81144c:	e0bffe17 	ldw	r2,-8(fp)
  811450:	10800017 	ldw	r2,0(r2)
  811454:	10800304 	addi	r2,r2,12
  811458:	e0fffe17 	ldw	r3,-8(fp)
  81145c:	18c00117 	ldw	r3,4(r3)
  811460:	10c00035 	stwio	r3,0(r2)
  811464:	00000106 	br	81146c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  811468:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  81146c:	e037883a 	mov	sp,fp
  811470:	df000017 	ldw	fp,0(sp)
  811474:	dec00104 	addi	sp,sp,4
  811478:	f800283a 	ret

0081147c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81147c:	defffb04 	addi	sp,sp,-20
  811480:	df000415 	stw	fp,16(sp)
  811484:	df000404 	addi	fp,sp,16
  811488:	e13ffc15 	stw	r4,-16(fp)
  81148c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  811490:	e0bffc17 	ldw	r2,-16(fp)
  811494:	10c00417 	ldw	r3,16(r2)
  811498:	e0bffc17 	ldw	r2,-16(fp)
  81149c:	10800517 	ldw	r2,20(r2)
  8114a0:	18803226 	beq	r3,r2,81156c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8114a4:	e0bffc17 	ldw	r2,-16(fp)
  8114a8:	10800617 	ldw	r2,24(r2)
  8114ac:	1080008c 	andi	r2,r2,2
  8114b0:	10000326 	beq	r2,zero,8114c0 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8114b4:	e0bffd17 	ldw	r2,-12(fp)
  8114b8:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8114bc:	10001d26 	beq	r2,zero,811534 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8114c0:	e0bffc17 	ldw	r2,-16(fp)
  8114c4:	10800417 	ldw	r2,16(r2)
  8114c8:	e0bffc17 	ldw	r2,-16(fp)
  8114cc:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8114d0:	e0bffc17 	ldw	r2,-16(fp)
  8114d4:	10800017 	ldw	r2,0(r2)
  8114d8:	10800104 	addi	r2,r2,4
  8114dc:	e0fffc17 	ldw	r3,-16(fp)
  8114e0:	18c00417 	ldw	r3,16(r3)
  8114e4:	e13ffc17 	ldw	r4,-16(fp)
  8114e8:	20c7883a 	add	r3,r4,r3
  8114ec:	18c01704 	addi	r3,r3,92
  8114f0:	18c00003 	ldbu	r3,0(r3)
  8114f4:	18c03fcc 	andi	r3,r3,255
  8114f8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8114fc:	e0bffc17 	ldw	r2,-16(fp)
  811500:	10800417 	ldw	r2,16(r2)
  811504:	10800044 	addi	r2,r2,1
  811508:	e0fffc17 	ldw	r3,-16(fp)
  81150c:	18800415 	stw	r2,16(r3)
  811510:	10c00fcc 	andi	r3,r2,63
  811514:	e0bffc17 	ldw	r2,-16(fp)
  811518:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  81151c:	e0bffc17 	ldw	r2,-16(fp)
  811520:	10800117 	ldw	r2,4(r2)
  811524:	10c01014 	ori	r3,r2,64
  811528:	e0bffc17 	ldw	r2,-16(fp)
  81152c:	10c00115 	stw	r3,4(r2)
  811530:	00000e06 	br	81156c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  811534:	e0bffc17 	ldw	r2,-16(fp)
  811538:	10800017 	ldw	r2,0(r2)
  81153c:	10800204 	addi	r2,r2,8
  811540:	10800037 	ldwio	r2,0(r2)
  811544:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  811548:	e0bffd17 	ldw	r2,-12(fp)
  81154c:	1082000c 	andi	r2,r2,2048
  811550:	1000061e 	bne	r2,zero,81156c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  811554:	e0bffc17 	ldw	r2,-16(fp)
  811558:	10c00117 	ldw	r3,4(r2)
  81155c:	00bfefc4 	movi	r2,-65
  811560:	1886703a 	and	r3,r3,r2
  811564:	e0bffc17 	ldw	r2,-16(fp)
  811568:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  81156c:	e0bffc17 	ldw	r2,-16(fp)
  811570:	10c00417 	ldw	r3,16(r2)
  811574:	e0bffc17 	ldw	r2,-16(fp)
  811578:	10800517 	ldw	r2,20(r2)
  81157c:	1880061e 	bne	r3,r2,811598 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811580:	e0bffc17 	ldw	r2,-16(fp)
  811584:	10c00117 	ldw	r3,4(r2)
  811588:	00beefc4 	movi	r2,-1089
  81158c:	1886703a 	and	r3,r3,r2
  811590:	e0bffc17 	ldw	r2,-16(fp)
  811594:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811598:	e0bffc17 	ldw	r2,-16(fp)
  81159c:	10800017 	ldw	r2,0(r2)
  8115a0:	10800304 	addi	r2,r2,12
  8115a4:	e0fffc17 	ldw	r3,-16(fp)
  8115a8:	18c00117 	ldw	r3,4(r3)
  8115ac:	10c00035 	stwio	r3,0(r2)
}
  8115b0:	0001883a 	nop
  8115b4:	e037883a 	mov	sp,fp
  8115b8:	df000017 	ldw	fp,0(sp)
  8115bc:	dec00104 	addi	sp,sp,4
  8115c0:	f800283a 	ret

008115c4 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8115c4:	defffd04 	addi	sp,sp,-12
  8115c8:	df000215 	stw	fp,8(sp)
  8115cc:	df000204 	addi	fp,sp,8
  8115d0:	e13ffe15 	stw	r4,-8(fp)
  8115d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8115d8:	00000506 	br	8115f0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8115dc:	e0bfff17 	ldw	r2,-4(fp)
  8115e0:	1090000c 	andi	r2,r2,16384
  8115e4:	10000226 	beq	r2,zero,8115f0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8115e8:	00bffd44 	movi	r2,-11
  8115ec:	00000606 	br	811608 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8115f0:	e0bffe17 	ldw	r2,-8(fp)
  8115f4:	10c00417 	ldw	r3,16(r2)
  8115f8:	e0bffe17 	ldw	r2,-8(fp)
  8115fc:	10800517 	ldw	r2,20(r2)
  811600:	18bff61e 	bne	r3,r2,8115dc <__alt_mem_onchip_mem+0xff7915dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811604:	0005883a 	mov	r2,zero
}
  811608:	e037883a 	mov	sp,fp
  81160c:	df000017 	ldw	fp,0(sp)
  811610:	dec00104 	addi	sp,sp,4
  811614:	f800283a 	ret

00811618 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811618:	defffe04 	addi	sp,sp,-8
  81161c:	dfc00115 	stw	ra,4(sp)
  811620:	df000015 	stw	fp,0(sp)
  811624:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811628:	d0a00d17 	ldw	r2,-32716(gp)
  81162c:	10000326 	beq	r2,zero,81163c <alt_get_errno+0x24>
  811630:	d0a00d17 	ldw	r2,-32716(gp)
  811634:	103ee83a 	callr	r2
  811638:	00000106 	br	811640 <alt_get_errno+0x28>
  81163c:	d0a76504 	addi	r2,gp,-25196
}
  811640:	e037883a 	mov	sp,fp
  811644:	dfc00117 	ldw	ra,4(sp)
  811648:	df000017 	ldw	fp,0(sp)
  81164c:	dec00204 	addi	sp,sp,8
  811650:	f800283a 	ret

00811654 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  811654:	defff204 	addi	sp,sp,-56
  811658:	dfc00d15 	stw	ra,52(sp)
  81165c:	df000c15 	stw	fp,48(sp)
  811660:	df000c04 	addi	fp,sp,48
  811664:	e13ffc15 	stw	r4,-16(fp)
  811668:	e17ffd15 	stw	r5,-12(fp)
  81166c:	e1bffe15 	stw	r6,-8(fp)
  811670:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  811674:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  811678:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  81167c:	e0bfff17 	ldw	r2,-4(fp)
  811680:	1090000c 	andi	r2,r2,16384
  811684:	1005003a 	cmpeq	r2,r2,zero
  811688:	10803fcc 	andi	r2,r2,255
  81168c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  811690:	00001306 	br	8116e0 <altera_avalon_uart_read+0x8c>
    {
      count++;
  811694:	e0bff517 	ldw	r2,-44(fp)
  811698:	10800044 	addi	r2,r2,1
  81169c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  8116a0:	e0bffd17 	ldw	r2,-12(fp)
  8116a4:	10c00044 	addi	r3,r2,1
  8116a8:	e0fffd15 	stw	r3,-12(fp)
  8116ac:	e0fffc17 	ldw	r3,-16(fp)
  8116b0:	18c00217 	ldw	r3,8(r3)
  8116b4:	e13ffc17 	ldw	r4,-16(fp)
  8116b8:	20c7883a 	add	r3,r4,r3
  8116bc:	18c00704 	addi	r3,r3,28
  8116c0:	18c00003 	ldbu	r3,0(r3)
  8116c4:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8116c8:	e0bffc17 	ldw	r2,-16(fp)
  8116cc:	10800217 	ldw	r2,8(r2)
  8116d0:	10800044 	addi	r2,r2,1
  8116d4:	10c00fcc 	andi	r3,r2,63
  8116d8:	e0bffc17 	ldw	r2,-16(fp)
  8116dc:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8116e0:	e0fff517 	ldw	r3,-44(fp)
  8116e4:	e0bffe17 	ldw	r2,-8(fp)
  8116e8:	1880050e 	bge	r3,r2,811700 <altera_avalon_uart_read+0xac>
  8116ec:	e0bffc17 	ldw	r2,-16(fp)
  8116f0:	10c00217 	ldw	r3,8(r2)
  8116f4:	e0bffc17 	ldw	r2,-16(fp)
  8116f8:	10800317 	ldw	r2,12(r2)
  8116fc:	18bfe51e 	bne	r3,r2,811694 <__alt_mem_onchip_mem+0xff791694>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  811700:	e0bff517 	ldw	r2,-44(fp)
  811704:	1000251e 	bne	r2,zero,81179c <altera_avalon_uart_read+0x148>
  811708:	e0bffc17 	ldw	r2,-16(fp)
  81170c:	10c00217 	ldw	r3,8(r2)
  811710:	e0bffc17 	ldw	r2,-16(fp)
  811714:	10800317 	ldw	r2,12(r2)
  811718:	1880201e 	bne	r3,r2,81179c <altera_avalon_uart_read+0x148>
    {
      if (!block)
  81171c:	e0bff617 	ldw	r2,-40(fp)
  811720:	1000071e 	bne	r2,zero,811740 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  811724:	08116180 	call	811618 <alt_get_errno>
  811728:	1007883a 	mov	r3,r2
  81172c:	008002c4 	movi	r2,11
  811730:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  811734:	00800044 	movi	r2,1
  811738:	e0bff405 	stb	r2,-48(fp)
        break;
  81173c:	00001b06 	br	8117ac <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811740:	0005303a 	rdctl	r2,status
  811744:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811748:	e0fff917 	ldw	r3,-28(fp)
  81174c:	00bfff84 	movi	r2,-2
  811750:	1884703a 	and	r2,r3,r2
  811754:	1001703a 	wrctl	status,r2
  
  return context;
  811758:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  81175c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  811760:	e0bffc17 	ldw	r2,-16(fp)
  811764:	10800117 	ldw	r2,4(r2)
  811768:	10c02014 	ori	r3,r2,128
  81176c:	e0bffc17 	ldw	r2,-16(fp)
  811770:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811774:	e0bffc17 	ldw	r2,-16(fp)
  811778:	10800017 	ldw	r2,0(r2)
  81177c:	10800304 	addi	r2,r2,12
  811780:	e0fffc17 	ldw	r3,-16(fp)
  811784:	18c00117 	ldw	r3,4(r3)
  811788:	10c00035 	stwio	r3,0(r2)
  81178c:	e0bff817 	ldw	r2,-32(fp)
  811790:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811794:	e0bffa17 	ldw	r2,-24(fp)
  811798:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  81179c:	e0bff517 	ldw	r2,-44(fp)
  8117a0:	1000021e 	bne	r2,zero,8117ac <altera_avalon_uart_read+0x158>
  8117a4:	e0bffe17 	ldw	r2,-8(fp)
  8117a8:	103fcd1e 	bne	r2,zero,8116e0 <__alt_mem_onchip_mem+0xff7916e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8117ac:	0005303a 	rdctl	r2,status
  8117b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8117b4:	e0fffb17 	ldw	r3,-20(fp)
  8117b8:	00bfff84 	movi	r2,-2
  8117bc:	1884703a 	and	r2,r3,r2
  8117c0:	1001703a 	wrctl	status,r2
  
  return context;
  8117c4:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8117c8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8117cc:	e0bffc17 	ldw	r2,-16(fp)
  8117d0:	10800117 	ldw	r2,4(r2)
  8117d4:	10c02014 	ori	r3,r2,128
  8117d8:	e0bffc17 	ldw	r2,-16(fp)
  8117dc:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8117e0:	e0bffc17 	ldw	r2,-16(fp)
  8117e4:	10800017 	ldw	r2,0(r2)
  8117e8:	10800304 	addi	r2,r2,12
  8117ec:	e0fffc17 	ldw	r3,-16(fp)
  8117f0:	18c00117 	ldw	r3,4(r3)
  8117f4:	10c00035 	stwio	r3,0(r2)
  8117f8:	e0bff817 	ldw	r2,-32(fp)
  8117fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811800:	e0bff717 	ldw	r2,-36(fp)
  811804:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  811808:	e0bff403 	ldbu	r2,-48(fp)
  81180c:	10000226 	beq	r2,zero,811818 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  811810:	00bffd44 	movi	r2,-11
  811814:	00000106 	br	81181c <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  811818:	e0bff517 	ldw	r2,-44(fp)
  }
}
  81181c:	e037883a 	mov	sp,fp
  811820:	dfc00117 	ldw	ra,4(sp)
  811824:	df000017 	ldw	fp,0(sp)
  811828:	dec00204 	addi	sp,sp,8
  81182c:	f800283a 	ret

00811830 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811830:	defffe04 	addi	sp,sp,-8
  811834:	dfc00115 	stw	ra,4(sp)
  811838:	df000015 	stw	fp,0(sp)
  81183c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811840:	d0a00d17 	ldw	r2,-32716(gp)
  811844:	10000326 	beq	r2,zero,811854 <alt_get_errno+0x24>
  811848:	d0a00d17 	ldw	r2,-32716(gp)
  81184c:	103ee83a 	callr	r2
  811850:	00000106 	br	811858 <alt_get_errno+0x28>
  811854:	d0a76504 	addi	r2,gp,-25196
}
  811858:	e037883a 	mov	sp,fp
  81185c:	dfc00117 	ldw	ra,4(sp)
  811860:	df000017 	ldw	fp,0(sp)
  811864:	dec00204 	addi	sp,sp,8
  811868:	f800283a 	ret

0081186c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  81186c:	defff204 	addi	sp,sp,-56
  811870:	dfc00d15 	stw	ra,52(sp)
  811874:	df000c15 	stw	fp,48(sp)
  811878:	df000c04 	addi	fp,sp,48
  81187c:	e13ffc15 	stw	r4,-16(fp)
  811880:	e17ffd15 	stw	r5,-12(fp)
  811884:	e1bffe15 	stw	r6,-8(fp)
  811888:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  81188c:	e0bffe17 	ldw	r2,-8(fp)
  811890:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  811894:	e0bfff17 	ldw	r2,-4(fp)
  811898:	1090000c 	andi	r2,r2,16384
  81189c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  8118a0:	00003c06 	br	811994 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8118a4:	e0bffc17 	ldw	r2,-16(fp)
  8118a8:	10800517 	ldw	r2,20(r2)
  8118ac:	10800044 	addi	r2,r2,1
  8118b0:	10800fcc 	andi	r2,r2,63
  8118b4:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  8118b8:	e0bffc17 	ldw	r2,-16(fp)
  8118bc:	10c00417 	ldw	r3,16(r2)
  8118c0:	e0bff717 	ldw	r2,-36(fp)
  8118c4:	1880221e 	bne	r3,r2,811950 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8118c8:	e0bff517 	ldw	r2,-44(fp)
  8118cc:	10000526 	beq	r2,zero,8118e4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8118d0:	08118300 	call	811830 <alt_get_errno>
  8118d4:	1007883a 	mov	r3,r2
  8118d8:	008002c4 	movi	r2,11
  8118dc:	18800015 	stw	r2,0(r3)
        break;
  8118e0:	00002e06 	br	81199c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8118e4:	0005303a 	rdctl	r2,status
  8118e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8118ec:	e0fff917 	ldw	r3,-28(fp)
  8118f0:	00bfff84 	movi	r2,-2
  8118f4:	1884703a 	and	r2,r3,r2
  8118f8:	1001703a 	wrctl	status,r2
  
  return context;
  8118fc:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  811900:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  811904:	e0bffc17 	ldw	r2,-16(fp)
  811908:	10800117 	ldw	r2,4(r2)
  81190c:	10c11014 	ori	r3,r2,1088
  811910:	e0bffc17 	ldw	r2,-16(fp)
  811914:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  811918:	e0bffc17 	ldw	r2,-16(fp)
  81191c:	10800017 	ldw	r2,0(r2)
  811920:	10800304 	addi	r2,r2,12
  811924:	e0fffc17 	ldw	r3,-16(fp)
  811928:	18c00117 	ldw	r3,4(r3)
  81192c:	10c00035 	stwio	r3,0(r2)
  811930:	e0bff817 	ldw	r2,-32(fp)
  811934:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811938:	e0bff617 	ldw	r2,-40(fp)
  81193c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  811940:	e0bffc17 	ldw	r2,-16(fp)
  811944:	10c00417 	ldw	r3,16(r2)
  811948:	e0bff717 	ldw	r2,-36(fp)
  81194c:	18bffc26 	beq	r3,r2,811940 <__alt_mem_onchip_mem+0xff791940>
      }
    }

    count--;
  811950:	e0bff417 	ldw	r2,-48(fp)
  811954:	10bfffc4 	addi	r2,r2,-1
  811958:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  81195c:	e0bffc17 	ldw	r2,-16(fp)
  811960:	10c00517 	ldw	r3,20(r2)
  811964:	e0bffd17 	ldw	r2,-12(fp)
  811968:	11000044 	addi	r4,r2,1
  81196c:	e13ffd15 	stw	r4,-12(fp)
  811970:	10800003 	ldbu	r2,0(r2)
  811974:	1009883a 	mov	r4,r2
  811978:	e0bffc17 	ldw	r2,-16(fp)
  81197c:	10c5883a 	add	r2,r2,r3
  811980:	10801704 	addi	r2,r2,92
  811984:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  811988:	e0bffc17 	ldw	r2,-16(fp)
  81198c:	e0fff717 	ldw	r3,-36(fp)
  811990:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  811994:	e0bff417 	ldw	r2,-48(fp)
  811998:	103fc21e 	bne	r2,zero,8118a4 <__alt_mem_onchip_mem+0xff7918a4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81199c:	0005303a 	rdctl	r2,status
  8119a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119a4:	e0fffb17 	ldw	r3,-20(fp)
  8119a8:	00bfff84 	movi	r2,-2
  8119ac:	1884703a 	and	r2,r3,r2
  8119b0:	1001703a 	wrctl	status,r2
  
  return context;
  8119b4:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  8119b8:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8119bc:	e0bffc17 	ldw	r2,-16(fp)
  8119c0:	10800117 	ldw	r2,4(r2)
  8119c4:	10c11014 	ori	r3,r2,1088
  8119c8:	e0bffc17 	ldw	r2,-16(fp)
  8119cc:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8119d0:	e0bffc17 	ldw	r2,-16(fp)
  8119d4:	10800017 	ldw	r2,0(r2)
  8119d8:	10800304 	addi	r2,r2,12
  8119dc:	e0fffc17 	ldw	r3,-16(fp)
  8119e0:	18c00117 	ldw	r3,4(r3)
  8119e4:	10c00035 	stwio	r3,0(r2)
  8119e8:	e0bff817 	ldw	r2,-32(fp)
  8119ec:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119f0:	e0bffa17 	ldw	r2,-24(fp)
  8119f4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8119f8:	e0fffe17 	ldw	r3,-8(fp)
  8119fc:	e0bff417 	ldw	r2,-48(fp)
  811a00:	1885c83a 	sub	r2,r3,r2
}
  811a04:	e037883a 	mov	sp,fp
  811a08:	dfc00117 	ldw	ra,4(sp)
  811a0c:	df000017 	ldw	fp,0(sp)
  811a10:	dec00204 	addi	sp,sp,8
  811a14:	f800283a 	ret

00811a18 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  811a18:	defffe04 	addi	sp,sp,-8
  811a1c:	df000115 	stw	fp,4(sp)
  811a20:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811a24:	e03fff15 	stw	zero,-4(fp)
  811a28:	00000506 	br	811a40 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  811a2c:	e0bfff17 	ldw	r2,-4(fp)
  811a30:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  811a34:	e0bfff17 	ldw	r2,-4(fp)
  811a38:	10800804 	addi	r2,r2,32
  811a3c:	e0bfff15 	stw	r2,-4(fp)
  811a40:	e0bfff17 	ldw	r2,-4(fp)
  811a44:	10820030 	cmpltui	r2,r2,2048
  811a48:	103ff81e 	bne	r2,zero,811a2c <__alt_mem_onchip_mem+0xff791a2c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  811a4c:	0001883a 	nop
  811a50:	e037883a 	mov	sp,fp
  811a54:	df000017 	ldw	fp,0(sp)
  811a58:	dec00104 	addi	sp,sp,4
  811a5c:	f800283a 	ret

00811a60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811a60:	defffe04 	addi	sp,sp,-8
  811a64:	dfc00115 	stw	ra,4(sp)
  811a68:	df000015 	stw	fp,0(sp)
  811a6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811a70:	d0a00d17 	ldw	r2,-32716(gp)
  811a74:	10000326 	beq	r2,zero,811a84 <alt_get_errno+0x24>
  811a78:	d0a00d17 	ldw	r2,-32716(gp)
  811a7c:	103ee83a 	callr	r2
  811a80:	00000106 	br	811a88 <alt_get_errno+0x28>
  811a84:	d0a76504 	addi	r2,gp,-25196
}
  811a88:	e037883a 	mov	sp,fp
  811a8c:	dfc00117 	ldw	ra,4(sp)
  811a90:	df000017 	ldw	fp,0(sp)
  811a94:	dec00204 	addi	sp,sp,8
  811a98:	f800283a 	ret

00811a9c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  811a9c:	defffa04 	addi	sp,sp,-24
  811aa0:	dfc00515 	stw	ra,20(sp)
  811aa4:	df000415 	stw	fp,16(sp)
  811aa8:	df000404 	addi	fp,sp,16
  811aac:	e13ffe15 	stw	r4,-8(fp)
  811ab0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  811ab4:	e0bffe17 	ldw	r2,-8(fp)
  811ab8:	10000326 	beq	r2,zero,811ac8 <alt_dev_llist_insert+0x2c>
  811abc:	e0bffe17 	ldw	r2,-8(fp)
  811ac0:	10800217 	ldw	r2,8(r2)
  811ac4:	1000061e 	bne	r2,zero,811ae0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  811ac8:	0811a600 	call	811a60 <alt_get_errno>
  811acc:	1007883a 	mov	r3,r2
  811ad0:	00800584 	movi	r2,22
  811ad4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  811ad8:	00bffa84 	movi	r2,-22
  811adc:	00001306 	br	811b2c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  811ae0:	e0bffe17 	ldw	r2,-8(fp)
  811ae4:	e0ffff17 	ldw	r3,-4(fp)
  811ae8:	e0fffc15 	stw	r3,-16(fp)
  811aec:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  811af0:	e0bffd17 	ldw	r2,-12(fp)
  811af4:	e0fffc17 	ldw	r3,-16(fp)
  811af8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  811afc:	e0bffc17 	ldw	r2,-16(fp)
  811b00:	10c00017 	ldw	r3,0(r2)
  811b04:	e0bffd17 	ldw	r2,-12(fp)
  811b08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  811b0c:	e0bffc17 	ldw	r2,-16(fp)
  811b10:	10800017 	ldw	r2,0(r2)
  811b14:	e0fffd17 	ldw	r3,-12(fp)
  811b18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  811b1c:	e0bffc17 	ldw	r2,-16(fp)
  811b20:	e0fffd17 	ldw	r3,-12(fp)
  811b24:	10c00015 	stw	r3,0(r2)

  return 0;  
  811b28:	0005883a 	mov	r2,zero
}
  811b2c:	e037883a 	mov	sp,fp
  811b30:	dfc00117 	ldw	ra,4(sp)
  811b34:	df000017 	ldw	fp,0(sp)
  811b38:	dec00204 	addi	sp,sp,8
  811b3c:	f800283a 	ret

00811b40 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  811b40:	defffd04 	addi	sp,sp,-12
  811b44:	dfc00215 	stw	ra,8(sp)
  811b48:	df000115 	stw	fp,4(sp)
  811b4c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811b50:	00802074 	movhi	r2,129
  811b54:	108a2e04 	addi	r2,r2,10424
  811b58:	e0bfff15 	stw	r2,-4(fp)
  811b5c:	00000606 	br	811b78 <_do_ctors+0x38>
        (*ctor) (); 
  811b60:	e0bfff17 	ldw	r2,-4(fp)
  811b64:	10800017 	ldw	r2,0(r2)
  811b68:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  811b6c:	e0bfff17 	ldw	r2,-4(fp)
  811b70:	10bfff04 	addi	r2,r2,-4
  811b74:	e0bfff15 	stw	r2,-4(fp)
  811b78:	e0ffff17 	ldw	r3,-4(fp)
  811b7c:	00802074 	movhi	r2,129
  811b80:	108a2f04 	addi	r2,r2,10428
  811b84:	18bff62e 	bgeu	r3,r2,811b60 <__alt_mem_onchip_mem+0xff791b60>
        (*ctor) (); 
}
  811b88:	0001883a 	nop
  811b8c:	e037883a 	mov	sp,fp
  811b90:	dfc00117 	ldw	ra,4(sp)
  811b94:	df000017 	ldw	fp,0(sp)
  811b98:	dec00204 	addi	sp,sp,8
  811b9c:	f800283a 	ret

00811ba0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  811ba0:	defffd04 	addi	sp,sp,-12
  811ba4:	dfc00215 	stw	ra,8(sp)
  811ba8:	df000115 	stw	fp,4(sp)
  811bac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811bb0:	00802074 	movhi	r2,129
  811bb4:	108a2e04 	addi	r2,r2,10424
  811bb8:	e0bfff15 	stw	r2,-4(fp)
  811bbc:	00000606 	br	811bd8 <_do_dtors+0x38>
        (*dtor) (); 
  811bc0:	e0bfff17 	ldw	r2,-4(fp)
  811bc4:	10800017 	ldw	r2,0(r2)
  811bc8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  811bcc:	e0bfff17 	ldw	r2,-4(fp)
  811bd0:	10bfff04 	addi	r2,r2,-4
  811bd4:	e0bfff15 	stw	r2,-4(fp)
  811bd8:	e0ffff17 	ldw	r3,-4(fp)
  811bdc:	00802074 	movhi	r2,129
  811be0:	108a2f04 	addi	r2,r2,10428
  811be4:	18bff62e 	bgeu	r3,r2,811bc0 <__alt_mem_onchip_mem+0xff791bc0>
        (*dtor) (); 
}
  811be8:	0001883a 	nop
  811bec:	e037883a 	mov	sp,fp
  811bf0:	dfc00117 	ldw	ra,4(sp)
  811bf4:	df000017 	ldw	fp,0(sp)
  811bf8:	dec00204 	addi	sp,sp,8
  811bfc:	f800283a 	ret

00811c00 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  811c00:	defffa04 	addi	sp,sp,-24
  811c04:	dfc00515 	stw	ra,20(sp)
  811c08:	df000415 	stw	fp,16(sp)
  811c0c:	df000404 	addi	fp,sp,16
  811c10:	e13ffe15 	stw	r4,-8(fp)
  811c14:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  811c18:	e0bfff17 	ldw	r2,-4(fp)
  811c1c:	10800017 	ldw	r2,0(r2)
  811c20:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  811c24:	e13ffe17 	ldw	r4,-8(fp)
  811c28:	0803b6c0 	call	803b6c <strlen>
  811c2c:	10800044 	addi	r2,r2,1
  811c30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811c34:	00000d06 	br	811c6c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  811c38:	e0bffc17 	ldw	r2,-16(fp)
  811c3c:	10800217 	ldw	r2,8(r2)
  811c40:	e0fffd17 	ldw	r3,-12(fp)
  811c44:	180d883a 	mov	r6,r3
  811c48:	e17ffe17 	ldw	r5,-8(fp)
  811c4c:	1009883a 	mov	r4,r2
  811c50:	08125740 	call	812574 <memcmp>
  811c54:	1000021e 	bne	r2,zero,811c60 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  811c58:	e0bffc17 	ldw	r2,-16(fp)
  811c5c:	00000706 	br	811c7c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  811c60:	e0bffc17 	ldw	r2,-16(fp)
  811c64:	10800017 	ldw	r2,0(r2)
  811c68:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  811c6c:	e0fffc17 	ldw	r3,-16(fp)
  811c70:	e0bfff17 	ldw	r2,-4(fp)
  811c74:	18bff01e 	bne	r3,r2,811c38 <__alt_mem_onchip_mem+0xff791c38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  811c78:	0005883a 	mov	r2,zero
}
  811c7c:	e037883a 	mov	sp,fp
  811c80:	dfc00117 	ldw	ra,4(sp)
  811c84:	df000017 	ldw	fp,0(sp)
  811c88:	dec00204 	addi	sp,sp,8
  811c8c:	f800283a 	ret

00811c90 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  811c90:	defffb04 	addi	sp,sp,-20
  811c94:	dfc00415 	stw	ra,16(sp)
  811c98:	df000315 	stw	fp,12(sp)
  811c9c:	df000304 	addi	fp,sp,12
  811ca0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  811ca4:	d0a00817 	ldw	r2,-32736(gp)
  811ca8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811cac:	00003106 	br	811d74 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  811cb0:	e0bffd17 	ldw	r2,-12(fp)
  811cb4:	10800217 	ldw	r2,8(r2)
  811cb8:	1009883a 	mov	r4,r2
  811cbc:	0803b6c0 	call	803b6c <strlen>
  811cc0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  811cc4:	e0bffd17 	ldw	r2,-12(fp)
  811cc8:	10c00217 	ldw	r3,8(r2)
  811ccc:	e0bffe17 	ldw	r2,-8(fp)
  811cd0:	10bfffc4 	addi	r2,r2,-1
  811cd4:	1885883a 	add	r2,r3,r2
  811cd8:	10800003 	ldbu	r2,0(r2)
  811cdc:	10803fcc 	andi	r2,r2,255
  811ce0:	1080201c 	xori	r2,r2,128
  811ce4:	10bfe004 	addi	r2,r2,-128
  811ce8:	10800bd8 	cmpnei	r2,r2,47
  811cec:	1000031e 	bne	r2,zero,811cfc <alt_find_file+0x6c>
    {
      len -= 1;
  811cf0:	e0bffe17 	ldw	r2,-8(fp)
  811cf4:	10bfffc4 	addi	r2,r2,-1
  811cf8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811cfc:	e0bffe17 	ldw	r2,-8(fp)
  811d00:	e0ffff17 	ldw	r3,-4(fp)
  811d04:	1885883a 	add	r2,r3,r2
  811d08:	10800003 	ldbu	r2,0(r2)
  811d0c:	10803fcc 	andi	r2,r2,255
  811d10:	1080201c 	xori	r2,r2,128
  811d14:	10bfe004 	addi	r2,r2,-128
  811d18:	10800be0 	cmpeqi	r2,r2,47
  811d1c:	1000081e 	bne	r2,zero,811d40 <alt_find_file+0xb0>
  811d20:	e0bffe17 	ldw	r2,-8(fp)
  811d24:	e0ffff17 	ldw	r3,-4(fp)
  811d28:	1885883a 	add	r2,r3,r2
  811d2c:	10800003 	ldbu	r2,0(r2)
  811d30:	10803fcc 	andi	r2,r2,255
  811d34:	1080201c 	xori	r2,r2,128
  811d38:	10bfe004 	addi	r2,r2,-128
  811d3c:	10000a1e 	bne	r2,zero,811d68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  811d40:	e0bffd17 	ldw	r2,-12(fp)
  811d44:	10800217 	ldw	r2,8(r2)
  811d48:	e0fffe17 	ldw	r3,-8(fp)
  811d4c:	180d883a 	mov	r6,r3
  811d50:	e17fff17 	ldw	r5,-4(fp)
  811d54:	1009883a 	mov	r4,r2
  811d58:	08125740 	call	812574 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  811d5c:	1000021e 	bne	r2,zero,811d68 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  811d60:	e0bffd17 	ldw	r2,-12(fp)
  811d64:	00000706 	br	811d84 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  811d68:	e0bffd17 	ldw	r2,-12(fp)
  811d6c:	10800017 	ldw	r2,0(r2)
  811d70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  811d74:	e0fffd17 	ldw	r3,-12(fp)
  811d78:	d0a00804 	addi	r2,gp,-32736
  811d7c:	18bfcc1e 	bne	r3,r2,811cb0 <__alt_mem_onchip_mem+0xff791cb0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  811d80:	0005883a 	mov	r2,zero
}
  811d84:	e037883a 	mov	sp,fp
  811d88:	dfc00117 	ldw	ra,4(sp)
  811d8c:	df000017 	ldw	fp,0(sp)
  811d90:	dec00204 	addi	sp,sp,8
  811d94:	f800283a 	ret

00811d98 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  811d98:	defffc04 	addi	sp,sp,-16
  811d9c:	df000315 	stw	fp,12(sp)
  811da0:	df000304 	addi	fp,sp,12
  811da4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  811da8:	00bffa04 	movi	r2,-24
  811dac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811db0:	e03ffd15 	stw	zero,-12(fp)
  811db4:	00001906 	br	811e1c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  811db8:	00802074 	movhi	r2,129
  811dbc:	108e4a04 	addi	r2,r2,14632
  811dc0:	e0fffd17 	ldw	r3,-12(fp)
  811dc4:	18c00324 	muli	r3,r3,12
  811dc8:	10c5883a 	add	r2,r2,r3
  811dcc:	10800017 	ldw	r2,0(r2)
  811dd0:	10000f1e 	bne	r2,zero,811e10 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  811dd4:	00802074 	movhi	r2,129
  811dd8:	108e4a04 	addi	r2,r2,14632
  811ddc:	e0fffd17 	ldw	r3,-12(fp)
  811de0:	18c00324 	muli	r3,r3,12
  811de4:	10c5883a 	add	r2,r2,r3
  811de8:	e0ffff17 	ldw	r3,-4(fp)
  811dec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  811df0:	d0e00c17 	ldw	r3,-32720(gp)
  811df4:	e0bffd17 	ldw	r2,-12(fp)
  811df8:	1880020e 	bge	r3,r2,811e04 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  811dfc:	e0bffd17 	ldw	r2,-12(fp)
  811e00:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
  811e04:	e0bffd17 	ldw	r2,-12(fp)
  811e08:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  811e0c:	00000606 	br	811e28 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  811e10:	e0bffd17 	ldw	r2,-12(fp)
  811e14:	10800044 	addi	r2,r2,1
  811e18:	e0bffd15 	stw	r2,-12(fp)
  811e1c:	e0bffd17 	ldw	r2,-12(fp)
  811e20:	10800810 	cmplti	r2,r2,32
  811e24:	103fe41e 	bne	r2,zero,811db8 <__alt_mem_onchip_mem+0xff791db8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  811e28:	e0bffe17 	ldw	r2,-8(fp)
}
  811e2c:	e037883a 	mov	sp,fp
  811e30:	df000017 	ldw	fp,0(sp)
  811e34:	dec00104 	addi	sp,sp,4
  811e38:	f800283a 	ret

00811e3c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  811e3c:	defffe04 	addi	sp,sp,-8
  811e40:	dfc00115 	stw	ra,4(sp)
  811e44:	df000015 	stw	fp,0(sp)
  811e48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  811e4c:	01440004 	movi	r5,4096
  811e50:	0009883a 	mov	r4,zero
  811e54:	08123fc0 	call	8123fc <alt_icache_flush>
#endif
}
  811e58:	0001883a 	nop
  811e5c:	e037883a 	mov	sp,fp
  811e60:	dfc00117 	ldw	ra,4(sp)
  811e64:	df000017 	ldw	fp,0(sp)
  811e68:	dec00204 	addi	sp,sp,8
  811e6c:	f800283a 	ret

00811e70 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  811e70:	defff904 	addi	sp,sp,-28
  811e74:	dfc00615 	stw	ra,24(sp)
  811e78:	df000515 	stw	fp,20(sp)
  811e7c:	df000504 	addi	fp,sp,20
  811e80:	e13ffc15 	stw	r4,-16(fp)
  811e84:	e17ffd15 	stw	r5,-12(fp)
  811e88:	e1bffe15 	stw	r6,-8(fp)
  811e8c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  811e90:	e0800217 	ldw	r2,8(fp)
  811e94:	d8800015 	stw	r2,0(sp)
  811e98:	e1ffff17 	ldw	r7,-4(fp)
  811e9c:	e1bffe17 	ldw	r6,-8(fp)
  811ea0:	e17ffd17 	ldw	r5,-12(fp)
  811ea4:	e13ffc17 	ldw	r4,-16(fp)
  811ea8:	08120200 	call	812020 <alt_iic_isr_register>
}  
  811eac:	e037883a 	mov	sp,fp
  811eb0:	dfc00117 	ldw	ra,4(sp)
  811eb4:	df000017 	ldw	fp,0(sp)
  811eb8:	dec00204 	addi	sp,sp,8
  811ebc:	f800283a 	ret

00811ec0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  811ec0:	defff904 	addi	sp,sp,-28
  811ec4:	df000615 	stw	fp,24(sp)
  811ec8:	df000604 	addi	fp,sp,24
  811ecc:	e13ffe15 	stw	r4,-8(fp)
  811ed0:	e17fff15 	stw	r5,-4(fp)
  811ed4:	e0bfff17 	ldw	r2,-4(fp)
  811ed8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811edc:	0005303a 	rdctl	r2,status
  811ee0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ee4:	e0fffb17 	ldw	r3,-20(fp)
  811ee8:	00bfff84 	movi	r2,-2
  811eec:	1884703a 	and	r2,r3,r2
  811ef0:	1001703a 	wrctl	status,r2
  
  return context;
  811ef4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811ef8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  811efc:	00c00044 	movi	r3,1
  811f00:	e0bffa17 	ldw	r2,-24(fp)
  811f04:	1884983a 	sll	r2,r3,r2
  811f08:	1007883a 	mov	r3,r2
  811f0c:	d0a76c17 	ldw	r2,-25168(gp)
  811f10:	1884b03a 	or	r2,r3,r2
  811f14:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811f18:	d0a76c17 	ldw	r2,-25168(gp)
  811f1c:	100170fa 	wrctl	ienable,r2
  811f20:	e0bffc17 	ldw	r2,-16(fp)
  811f24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f28:	e0bffd17 	ldw	r2,-12(fp)
  811f2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811f30:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  811f34:	0001883a 	nop
}
  811f38:	e037883a 	mov	sp,fp
  811f3c:	df000017 	ldw	fp,0(sp)
  811f40:	dec00104 	addi	sp,sp,4
  811f44:	f800283a 	ret

00811f48 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  811f48:	defff904 	addi	sp,sp,-28
  811f4c:	df000615 	stw	fp,24(sp)
  811f50:	df000604 	addi	fp,sp,24
  811f54:	e13ffe15 	stw	r4,-8(fp)
  811f58:	e17fff15 	stw	r5,-4(fp)
  811f5c:	e0bfff17 	ldw	r2,-4(fp)
  811f60:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f64:	0005303a 	rdctl	r2,status
  811f68:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f6c:	e0fffb17 	ldw	r3,-20(fp)
  811f70:	00bfff84 	movi	r2,-2
  811f74:	1884703a 	and	r2,r3,r2
  811f78:	1001703a 	wrctl	status,r2
  
  return context;
  811f7c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  811f80:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  811f84:	00c00044 	movi	r3,1
  811f88:	e0bffa17 	ldw	r2,-24(fp)
  811f8c:	1884983a 	sll	r2,r3,r2
  811f90:	0084303a 	nor	r2,zero,r2
  811f94:	1007883a 	mov	r3,r2
  811f98:	d0a76c17 	ldw	r2,-25168(gp)
  811f9c:	1884703a 	and	r2,r3,r2
  811fa0:	d0a76c15 	stw	r2,-25168(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  811fa4:	d0a76c17 	ldw	r2,-25168(gp)
  811fa8:	100170fa 	wrctl	ienable,r2
  811fac:	e0bffc17 	ldw	r2,-16(fp)
  811fb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fb4:	e0bffd17 	ldw	r2,-12(fp)
  811fb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  811fbc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  811fc0:	0001883a 	nop
}
  811fc4:	e037883a 	mov	sp,fp
  811fc8:	df000017 	ldw	fp,0(sp)
  811fcc:	dec00104 	addi	sp,sp,4
  811fd0:	f800283a 	ret

00811fd4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  811fd4:	defffc04 	addi	sp,sp,-16
  811fd8:	df000315 	stw	fp,12(sp)
  811fdc:	df000304 	addi	fp,sp,12
  811fe0:	e13ffe15 	stw	r4,-8(fp)
  811fe4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  811fe8:	000530fa 	rdctl	r2,ienable
  811fec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  811ff0:	00c00044 	movi	r3,1
  811ff4:	e0bfff17 	ldw	r2,-4(fp)
  811ff8:	1884983a 	sll	r2,r3,r2
  811ffc:	1007883a 	mov	r3,r2
  812000:	e0bffd17 	ldw	r2,-12(fp)
  812004:	1884703a 	and	r2,r3,r2
  812008:	1004c03a 	cmpne	r2,r2,zero
  81200c:	10803fcc 	andi	r2,r2,255
}
  812010:	e037883a 	mov	sp,fp
  812014:	df000017 	ldw	fp,0(sp)
  812018:	dec00104 	addi	sp,sp,4
  81201c:	f800283a 	ret

00812020 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812020:	defff504 	addi	sp,sp,-44
  812024:	dfc00a15 	stw	ra,40(sp)
  812028:	df000915 	stw	fp,36(sp)
  81202c:	df000904 	addi	fp,sp,36
  812030:	e13ffc15 	stw	r4,-16(fp)
  812034:	e17ffd15 	stw	r5,-12(fp)
  812038:	e1bffe15 	stw	r6,-8(fp)
  81203c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  812040:	00bffa84 	movi	r2,-22
  812044:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812048:	e0bffd17 	ldw	r2,-12(fp)
  81204c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812050:	e0bff817 	ldw	r2,-32(fp)
  812054:	10800808 	cmpgei	r2,r2,32
  812058:	1000271e 	bne	r2,zero,8120f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81205c:	0005303a 	rdctl	r2,status
  812060:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812064:	e0fffb17 	ldw	r3,-20(fp)
  812068:	00bfff84 	movi	r2,-2
  81206c:	1884703a 	and	r2,r3,r2
  812070:	1001703a 	wrctl	status,r2
  
  return context;
  812074:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812078:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  81207c:	00802074 	movhi	r2,129
  812080:	109ae204 	addi	r2,r2,27528
  812084:	e0fff817 	ldw	r3,-32(fp)
  812088:	180690fa 	slli	r3,r3,3
  81208c:	10c5883a 	add	r2,r2,r3
  812090:	e0fffe17 	ldw	r3,-8(fp)
  812094:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  812098:	00802074 	movhi	r2,129
  81209c:	109ae204 	addi	r2,r2,27528
  8120a0:	e0fff817 	ldw	r3,-32(fp)
  8120a4:	180690fa 	slli	r3,r3,3
  8120a8:	10c5883a 	add	r2,r2,r3
  8120ac:	10800104 	addi	r2,r2,4
  8120b0:	e0ffff17 	ldw	r3,-4(fp)
  8120b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8120b8:	e0bffe17 	ldw	r2,-8(fp)
  8120bc:	10000526 	beq	r2,zero,8120d4 <alt_iic_isr_register+0xb4>
  8120c0:	e0bff817 	ldw	r2,-32(fp)
  8120c4:	100b883a 	mov	r5,r2
  8120c8:	e13ffc17 	ldw	r4,-16(fp)
  8120cc:	0811ec00 	call	811ec0 <alt_ic_irq_enable>
  8120d0:	00000406 	br	8120e4 <alt_iic_isr_register+0xc4>
  8120d4:	e0bff817 	ldw	r2,-32(fp)
  8120d8:	100b883a 	mov	r5,r2
  8120dc:	e13ffc17 	ldw	r4,-16(fp)
  8120e0:	0811f480 	call	811f48 <alt_ic_irq_disable>
  8120e4:	e0bff715 	stw	r2,-36(fp)
  8120e8:	e0bffa17 	ldw	r2,-24(fp)
  8120ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8120f0:	e0bff917 	ldw	r2,-28(fp)
  8120f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8120f8:	e0bff717 	ldw	r2,-36(fp)
}
  8120fc:	e037883a 	mov	sp,fp
  812100:	dfc00117 	ldw	ra,4(sp)
  812104:	df000017 	ldw	fp,0(sp)
  812108:	dec00204 	addi	sp,sp,8
  81210c:	f800283a 	ret

00812110 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  812110:	defff904 	addi	sp,sp,-28
  812114:	dfc00615 	stw	ra,24(sp)
  812118:	df000515 	stw	fp,20(sp)
  81211c:	df000504 	addi	fp,sp,20
  812120:	e13ffc15 	stw	r4,-16(fp)
  812124:	e17ffd15 	stw	r5,-12(fp)
  812128:	e1bffe15 	stw	r6,-8(fp)
  81212c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  812130:	e1bfff17 	ldw	r6,-4(fp)
  812134:	e17ffe17 	ldw	r5,-8(fp)
  812138:	e13ffd17 	ldw	r4,-12(fp)
  81213c:	080ef880 	call	80ef88 <open>
  812140:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812144:	e0bffb17 	ldw	r2,-20(fp)
  812148:	10001c16 	blt	r2,zero,8121bc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  81214c:	00802074 	movhi	r2,129
  812150:	108e4a04 	addi	r2,r2,14632
  812154:	e0fffb17 	ldw	r3,-20(fp)
  812158:	18c00324 	muli	r3,r3,12
  81215c:	10c5883a 	add	r2,r2,r3
  812160:	10c00017 	ldw	r3,0(r2)
  812164:	e0bffc17 	ldw	r2,-16(fp)
  812168:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81216c:	00802074 	movhi	r2,129
  812170:	108e4a04 	addi	r2,r2,14632
  812174:	e0fffb17 	ldw	r3,-20(fp)
  812178:	18c00324 	muli	r3,r3,12
  81217c:	10c5883a 	add	r2,r2,r3
  812180:	10800104 	addi	r2,r2,4
  812184:	10c00017 	ldw	r3,0(r2)
  812188:	e0bffc17 	ldw	r2,-16(fp)
  81218c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812190:	00802074 	movhi	r2,129
  812194:	108e4a04 	addi	r2,r2,14632
  812198:	e0fffb17 	ldw	r3,-20(fp)
  81219c:	18c00324 	muli	r3,r3,12
  8121a0:	10c5883a 	add	r2,r2,r3
  8121a4:	10800204 	addi	r2,r2,8
  8121a8:	10c00017 	ldw	r3,0(r2)
  8121ac:	e0bffc17 	ldw	r2,-16(fp)
  8121b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8121b4:	e13ffb17 	ldw	r4,-20(fp)
  8121b8:	080f2140 	call	80f214 <alt_release_fd>
  }
} 
  8121bc:	0001883a 	nop
  8121c0:	e037883a 	mov	sp,fp
  8121c4:	dfc00117 	ldw	ra,4(sp)
  8121c8:	df000017 	ldw	fp,0(sp)
  8121cc:	dec00204 	addi	sp,sp,8
  8121d0:	f800283a 	ret

008121d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8121d4:	defffb04 	addi	sp,sp,-20
  8121d8:	dfc00415 	stw	ra,16(sp)
  8121dc:	df000315 	stw	fp,12(sp)
  8121e0:	df000304 	addi	fp,sp,12
  8121e4:	e13ffd15 	stw	r4,-12(fp)
  8121e8:	e17ffe15 	stw	r5,-8(fp)
  8121ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8121f0:	01c07fc4 	movi	r7,511
  8121f4:	01800044 	movi	r6,1
  8121f8:	e17ffd17 	ldw	r5,-12(fp)
  8121fc:	01002074 	movhi	r4,129
  812200:	210e4d04 	addi	r4,r4,14644
  812204:	08121100 	call	812110 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  812208:	01c07fc4 	movi	r7,511
  81220c:	000d883a 	mov	r6,zero
  812210:	e17ffe17 	ldw	r5,-8(fp)
  812214:	01002074 	movhi	r4,129
  812218:	210e4a04 	addi	r4,r4,14632
  81221c:	08121100 	call	812110 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  812220:	01c07fc4 	movi	r7,511
  812224:	01800044 	movi	r6,1
  812228:	e17fff17 	ldw	r5,-4(fp)
  81222c:	01002074 	movhi	r4,129
  812230:	210e5004 	addi	r4,r4,14656
  812234:	08121100 	call	812110 <alt_open_fd>
}  
  812238:	0001883a 	nop
  81223c:	e037883a 	mov	sp,fp
  812240:	dfc00117 	ldw	ra,4(sp)
  812244:	df000017 	ldw	fp,0(sp)
  812248:	dec00204 	addi	sp,sp,8
  81224c:	f800283a 	ret

00812250 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  812250:	defffd04 	addi	sp,sp,-12
  812254:	dfc00215 	stw	ra,8(sp)
  812258:	df000115 	stw	fp,4(sp)
  81225c:	df000104 	addi	fp,sp,4
  812260:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  812264:	e13fff17 	ldw	r4,-4(fp)
  812268:	08122a40 	call	8122a4 <alt_busy_sleep>
}
  81226c:	e037883a 	mov	sp,fp
  812270:	dfc00117 	ldw	ra,4(sp)
  812274:	df000017 	ldw	fp,0(sp)
  812278:	dec00204 	addi	sp,sp,8
  81227c:	f800283a 	ret

00812280 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  812280:	deffff04 	addi	sp,sp,-4
  812284:	df000015 	stw	fp,0(sp)
  812288:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81228c:	000170fa 	wrctl	ienable,zero
}
  812290:	0001883a 	nop
  812294:	e037883a 	mov	sp,fp
  812298:	df000017 	ldw	fp,0(sp)
  81229c:	dec00104 	addi	sp,sp,4
  8122a0:	f800283a 	ret

008122a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8122a4:	defffa04 	addi	sp,sp,-24
  8122a8:	dfc00515 	stw	ra,20(sp)
  8122ac:	df000415 	stw	fp,16(sp)
  8122b0:	df000404 	addi	fp,sp,16
  8122b4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8122b8:	008000c4 	movi	r2,3
  8122bc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8122c0:	e0fffd17 	ldw	r3,-12(fp)
  8122c4:	008003f4 	movhi	r2,15
  8122c8:	10909004 	addi	r2,r2,16960
  8122cc:	1885383a 	mul	r2,r3,r2
  8122d0:	100b883a 	mov	r5,r2
  8122d4:	0100bef4 	movhi	r4,763
  8122d8:	213c2004 	addi	r4,r4,-3968
  8122dc:	08010940 	call	801094 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8122e0:	100b883a 	mov	r5,r2
  8122e4:	01200034 	movhi	r4,32768
  8122e8:	213fffc4 	addi	r4,r4,-1
  8122ec:	08010940 	call	801094 <__udivsi3>
  8122f0:	100b883a 	mov	r5,r2
  8122f4:	e13fff17 	ldw	r4,-4(fp)
  8122f8:	08010940 	call	801094 <__udivsi3>
  8122fc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  812300:	e0bffe17 	ldw	r2,-8(fp)
  812304:	10002a26 	beq	r2,zero,8123b0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  812308:	e03ffc15 	stw	zero,-16(fp)
  81230c:	00001706 	br	81236c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  812310:	00a00034 	movhi	r2,32768
  812314:	10bfffc4 	addi	r2,r2,-1
  812318:	10bfffc4 	addi	r2,r2,-1
  81231c:	103ffe1e 	bne	r2,zero,812318 <__alt_mem_onchip_mem+0xff792318>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  812320:	e0fffd17 	ldw	r3,-12(fp)
  812324:	008003f4 	movhi	r2,15
  812328:	10909004 	addi	r2,r2,16960
  81232c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  812330:	100b883a 	mov	r5,r2
  812334:	0100bef4 	movhi	r4,763
  812338:	213c2004 	addi	r4,r4,-3968
  81233c:	08010940 	call	801094 <__udivsi3>
  812340:	100b883a 	mov	r5,r2
  812344:	01200034 	movhi	r4,32768
  812348:	213fffc4 	addi	r4,r4,-1
  81234c:	08010940 	call	801094 <__udivsi3>
  812350:	1007883a 	mov	r3,r2
  812354:	e0bfff17 	ldw	r2,-4(fp)
  812358:	10c5c83a 	sub	r2,r2,r3
  81235c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  812360:	e0bffc17 	ldw	r2,-16(fp)
  812364:	10800044 	addi	r2,r2,1
  812368:	e0bffc15 	stw	r2,-16(fp)
  81236c:	e0fffc17 	ldw	r3,-16(fp)
  812370:	e0bffe17 	ldw	r2,-8(fp)
  812374:	18bfe616 	blt	r3,r2,812310 <__alt_mem_onchip_mem+0xff792310>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812378:	e0fffd17 	ldw	r3,-12(fp)
  81237c:	008003f4 	movhi	r2,15
  812380:	10909004 	addi	r2,r2,16960
  812384:	1885383a 	mul	r2,r3,r2
  812388:	100b883a 	mov	r5,r2
  81238c:	0100bef4 	movhi	r4,763
  812390:	213c2004 	addi	r4,r4,-3968
  812394:	08010940 	call	801094 <__udivsi3>
  812398:	1007883a 	mov	r3,r2
  81239c:	e0bfff17 	ldw	r2,-4(fp)
  8123a0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8123a4:	10bfffc4 	addi	r2,r2,-1
  8123a8:	103ffe1e 	bne	r2,zero,8123a4 <__alt_mem_onchip_mem+0xff7923a4>
  8123ac:	00000d06 	br	8123e4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8123b0:	e0fffd17 	ldw	r3,-12(fp)
  8123b4:	008003f4 	movhi	r2,15
  8123b8:	10909004 	addi	r2,r2,16960
  8123bc:	1885383a 	mul	r2,r3,r2
  8123c0:	100b883a 	mov	r5,r2
  8123c4:	0100bef4 	movhi	r4,763
  8123c8:	213c2004 	addi	r4,r4,-3968
  8123cc:	08010940 	call	801094 <__udivsi3>
  8123d0:	1007883a 	mov	r3,r2
  8123d4:	e0bfff17 	ldw	r2,-4(fp)
  8123d8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8123dc:	10bfffc4 	addi	r2,r2,-1
  8123e0:	00bffe16 	blt	zero,r2,8123dc <__alt_mem_onchip_mem+0xff7923dc>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8123e4:	0005883a 	mov	r2,zero
}
  8123e8:	e037883a 	mov	sp,fp
  8123ec:	dfc00117 	ldw	ra,4(sp)
  8123f0:	df000017 	ldw	fp,0(sp)
  8123f4:	dec00204 	addi	sp,sp,8
  8123f8:	f800283a 	ret

008123fc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8123fc:	defffb04 	addi	sp,sp,-20
  812400:	df000415 	stw	fp,16(sp)
  812404:	df000404 	addi	fp,sp,16
  812408:	e13ffe15 	stw	r4,-8(fp)
  81240c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  812410:	e0bfff17 	ldw	r2,-4(fp)
  812414:	10840070 	cmpltui	r2,r2,4097
  812418:	1000021e 	bne	r2,zero,812424 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81241c:	00840004 	movi	r2,4096
  812420:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  812424:	e0fffe17 	ldw	r3,-8(fp)
  812428:	e0bfff17 	ldw	r2,-4(fp)
  81242c:	1885883a 	add	r2,r3,r2
  812430:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812434:	e0bffe17 	ldw	r2,-8(fp)
  812438:	e0bffc15 	stw	r2,-16(fp)
  81243c:	00000506 	br	812454 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  812440:	e0bffc17 	ldw	r2,-16(fp)
  812444:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  812448:	e0bffc17 	ldw	r2,-16(fp)
  81244c:	10800804 	addi	r2,r2,32
  812450:	e0bffc15 	stw	r2,-16(fp)
  812454:	e0fffc17 	ldw	r3,-16(fp)
  812458:	e0bffd17 	ldw	r2,-12(fp)
  81245c:	18bff836 	bltu	r3,r2,812440 <__alt_mem_onchip_mem+0xff792440>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  812460:	e0bffe17 	ldw	r2,-8(fp)
  812464:	108007cc 	andi	r2,r2,31
  812468:	10000226 	beq	r2,zero,812474 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81246c:	e0bffc17 	ldw	r2,-16(fp)
  812470:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  812474:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  812478:	0001883a 	nop
  81247c:	e037883a 	mov	sp,fp
  812480:	df000017 	ldw	fp,0(sp)
  812484:	dec00104 	addi	sp,sp,4
  812488:	f800283a 	ret

0081248c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81248c:	defffe04 	addi	sp,sp,-8
  812490:	df000115 	stw	fp,4(sp)
  812494:	df000104 	addi	fp,sp,4
  812498:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  81249c:	e0bfff17 	ldw	r2,-4(fp)
  8124a0:	10bffe84 	addi	r2,r2,-6
  8124a4:	10c00428 	cmpgeui	r3,r2,16
  8124a8:	18001a1e 	bne	r3,zero,812514 <alt_exception_cause_generated_bad_addr+0x88>
  8124ac:	100690ba 	slli	r3,r2,2
  8124b0:	00802074 	movhi	r2,129
  8124b4:	10893104 	addi	r2,r2,9412
  8124b8:	1885883a 	add	r2,r3,r2
  8124bc:	10800017 	ldw	r2,0(r2)
  8124c0:	1000683a 	jmp	r2
  8124c4:	00812504 	movi	r2,1172
  8124c8:	00812504 	movi	r2,1172
  8124cc:	00812514 	movui	r2,1172
  8124d0:	00812514 	movui	r2,1172
  8124d4:	00812514 	movui	r2,1172
  8124d8:	00812504 	movi	r2,1172
  8124dc:	0081250c 	andi	r2,zero,1172
  8124e0:	00812514 	movui	r2,1172
  8124e4:	00812504 	movi	r2,1172
  8124e8:	00812504 	movi	r2,1172
  8124ec:	00812514 	movui	r2,1172
  8124f0:	00812504 	movi	r2,1172
  8124f4:	0081250c 	andi	r2,zero,1172
  8124f8:	00812514 	movui	r2,1172
  8124fc:	00812514 	movui	r2,1172
  812500:	00812504 	movi	r2,1172
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  812504:	00800044 	movi	r2,1
  812508:	00000306 	br	812518 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81250c:	0005883a 	mov	r2,zero
  812510:	00000106 	br	812518 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  812514:	0005883a 	mov	r2,zero
  }
}
  812518:	e037883a 	mov	sp,fp
  81251c:	df000017 	ldw	fp,0(sp)
  812520:	dec00104 	addi	sp,sp,4
  812524:	f800283a 	ret

00812528 <atexit>:
  812528:	200b883a 	mov	r5,r4
  81252c:	000f883a 	mov	r7,zero
  812530:	000d883a 	mov	r6,zero
  812534:	0009883a 	mov	r4,zero
  812538:	08125f01 	jmpi	8125f0 <__register_exitproc>

0081253c <exit>:
  81253c:	defffe04 	addi	sp,sp,-8
  812540:	000b883a 	mov	r5,zero
  812544:	dc000015 	stw	r16,0(sp)
  812548:	dfc00115 	stw	ra,4(sp)
  81254c:	2021883a 	mov	r16,r4
  812550:	08127080 	call	812708 <__call_exitprocs>
  812554:	00802074 	movhi	r2,129
  812558:	10933d04 	addi	r2,r2,19700
  81255c:	11000017 	ldw	r4,0(r2)
  812560:	20800f17 	ldw	r2,60(r4)
  812564:	10000126 	beq	r2,zero,81256c <exit+0x30>
  812568:	103ee83a 	callr	r2
  81256c:	8009883a 	mov	r4,r16
  812570:	08128880 	call	812888 <_exit>

00812574 <memcmp>:
  812574:	01c000c4 	movi	r7,3
  812578:	3980192e 	bgeu	r7,r6,8125e0 <memcmp+0x6c>
  81257c:	2144b03a 	or	r2,r4,r5
  812580:	11c4703a 	and	r2,r2,r7
  812584:	10000f26 	beq	r2,zero,8125c4 <memcmp+0x50>
  812588:	20800003 	ldbu	r2,0(r4)
  81258c:	28c00003 	ldbu	r3,0(r5)
  812590:	10c0151e 	bne	r2,r3,8125e8 <memcmp+0x74>
  812594:	31bfff84 	addi	r6,r6,-2
  812598:	01ffffc4 	movi	r7,-1
  81259c:	00000406 	br	8125b0 <memcmp+0x3c>
  8125a0:	20800003 	ldbu	r2,0(r4)
  8125a4:	28c00003 	ldbu	r3,0(r5)
  8125a8:	31bfffc4 	addi	r6,r6,-1
  8125ac:	10c00e1e 	bne	r2,r3,8125e8 <memcmp+0x74>
  8125b0:	21000044 	addi	r4,r4,1
  8125b4:	29400044 	addi	r5,r5,1
  8125b8:	31fff91e 	bne	r6,r7,8125a0 <__alt_mem_onchip_mem+0xff7925a0>
  8125bc:	0005883a 	mov	r2,zero
  8125c0:	f800283a 	ret
  8125c4:	20c00017 	ldw	r3,0(r4)
  8125c8:	28800017 	ldw	r2,0(r5)
  8125cc:	18bfee1e 	bne	r3,r2,812588 <__alt_mem_onchip_mem+0xff792588>
  8125d0:	31bfff04 	addi	r6,r6,-4
  8125d4:	21000104 	addi	r4,r4,4
  8125d8:	29400104 	addi	r5,r5,4
  8125dc:	39bff936 	bltu	r7,r6,8125c4 <__alt_mem_onchip_mem+0xff7925c4>
  8125e0:	303fe91e 	bne	r6,zero,812588 <__alt_mem_onchip_mem+0xff792588>
  8125e4:	003ff506 	br	8125bc <__alt_mem_onchip_mem+0xff7925bc>
  8125e8:	10c5c83a 	sub	r2,r2,r3
  8125ec:	f800283a 	ret

008125f0 <__register_exitproc>:
  8125f0:	defffa04 	addi	sp,sp,-24
  8125f4:	dc000315 	stw	r16,12(sp)
  8125f8:	04002074 	movhi	r16,129
  8125fc:	84133d04 	addi	r16,r16,19700
  812600:	80c00017 	ldw	r3,0(r16)
  812604:	dc400415 	stw	r17,16(sp)
  812608:	dfc00515 	stw	ra,20(sp)
  81260c:	18805217 	ldw	r2,328(r3)
  812610:	2023883a 	mov	r17,r4
  812614:	10003726 	beq	r2,zero,8126f4 <__register_exitproc+0x104>
  812618:	10c00117 	ldw	r3,4(r2)
  81261c:	010007c4 	movi	r4,31
  812620:	20c00e16 	blt	r4,r3,81265c <__register_exitproc+0x6c>
  812624:	1a000044 	addi	r8,r3,1
  812628:	8800221e 	bne	r17,zero,8126b4 <__register_exitproc+0xc4>
  81262c:	18c00084 	addi	r3,r3,2
  812630:	18c7883a 	add	r3,r3,r3
  812634:	18c7883a 	add	r3,r3,r3
  812638:	12000115 	stw	r8,4(r2)
  81263c:	10c7883a 	add	r3,r2,r3
  812640:	19400015 	stw	r5,0(r3)
  812644:	0005883a 	mov	r2,zero
  812648:	dfc00517 	ldw	ra,20(sp)
  81264c:	dc400417 	ldw	r17,16(sp)
  812650:	dc000317 	ldw	r16,12(sp)
  812654:	dec00604 	addi	sp,sp,24
  812658:	f800283a 	ret
  81265c:	00800034 	movhi	r2,0
  812660:	10800004 	addi	r2,r2,0
  812664:	10002626 	beq	r2,zero,812700 <__register_exitproc+0x110>
  812668:	01006404 	movi	r4,400
  81266c:	d9400015 	stw	r5,0(sp)
  812670:	d9800115 	stw	r6,4(sp)
  812674:	d9c00215 	stw	r7,8(sp)
  812678:	00000000 	call	0 <__reset-0x800000>
  81267c:	d9400017 	ldw	r5,0(sp)
  812680:	d9800117 	ldw	r6,4(sp)
  812684:	d9c00217 	ldw	r7,8(sp)
  812688:	10001d26 	beq	r2,zero,812700 <__register_exitproc+0x110>
  81268c:	81000017 	ldw	r4,0(r16)
  812690:	10000115 	stw	zero,4(r2)
  812694:	02000044 	movi	r8,1
  812698:	22405217 	ldw	r9,328(r4)
  81269c:	0007883a 	mov	r3,zero
  8126a0:	12400015 	stw	r9,0(r2)
  8126a4:	20805215 	stw	r2,328(r4)
  8126a8:	10006215 	stw	zero,392(r2)
  8126ac:	10006315 	stw	zero,396(r2)
  8126b0:	883fde26 	beq	r17,zero,81262c <__alt_mem_onchip_mem+0xff79262c>
  8126b4:	18c9883a 	add	r4,r3,r3
  8126b8:	2109883a 	add	r4,r4,r4
  8126bc:	1109883a 	add	r4,r2,r4
  8126c0:	21802215 	stw	r6,136(r4)
  8126c4:	01800044 	movi	r6,1
  8126c8:	12406217 	ldw	r9,392(r2)
  8126cc:	30cc983a 	sll	r6,r6,r3
  8126d0:	4992b03a 	or	r9,r9,r6
  8126d4:	12406215 	stw	r9,392(r2)
  8126d8:	21c04215 	stw	r7,264(r4)
  8126dc:	01000084 	movi	r4,2
  8126e0:	893fd21e 	bne	r17,r4,81262c <__alt_mem_onchip_mem+0xff79262c>
  8126e4:	11006317 	ldw	r4,396(r2)
  8126e8:	218cb03a 	or	r6,r4,r6
  8126ec:	11806315 	stw	r6,396(r2)
  8126f0:	003fce06 	br	81262c <__alt_mem_onchip_mem+0xff79262c>
  8126f4:	18805304 	addi	r2,r3,332
  8126f8:	18805215 	stw	r2,328(r3)
  8126fc:	003fc606 	br	812618 <__alt_mem_onchip_mem+0xff792618>
  812700:	00bfffc4 	movi	r2,-1
  812704:	003fd006 	br	812648 <__alt_mem_onchip_mem+0xff792648>

00812708 <__call_exitprocs>:
  812708:	defff504 	addi	sp,sp,-44
  81270c:	df000915 	stw	fp,36(sp)
  812710:	dd400615 	stw	r21,24(sp)
  812714:	dc800315 	stw	r18,12(sp)
  812718:	dfc00a15 	stw	ra,40(sp)
  81271c:	ddc00815 	stw	r23,32(sp)
  812720:	dd800715 	stw	r22,28(sp)
  812724:	dd000515 	stw	r20,20(sp)
  812728:	dcc00415 	stw	r19,16(sp)
  81272c:	dc400215 	stw	r17,8(sp)
  812730:	dc000115 	stw	r16,4(sp)
  812734:	d9000015 	stw	r4,0(sp)
  812738:	2839883a 	mov	fp,r5
  81273c:	04800044 	movi	r18,1
  812740:	057fffc4 	movi	r21,-1
  812744:	00802074 	movhi	r2,129
  812748:	10933d04 	addi	r2,r2,19700
  81274c:	12000017 	ldw	r8,0(r2)
  812750:	45005217 	ldw	r20,328(r8)
  812754:	44c05204 	addi	r19,r8,328
  812758:	a0001c26 	beq	r20,zero,8127cc <__call_exitprocs+0xc4>
  81275c:	a0800117 	ldw	r2,4(r20)
  812760:	15ffffc4 	addi	r23,r2,-1
  812764:	b8000d16 	blt	r23,zero,81279c <__call_exitprocs+0x94>
  812768:	14000044 	addi	r16,r2,1
  81276c:	8421883a 	add	r16,r16,r16
  812770:	8421883a 	add	r16,r16,r16
  812774:	84402004 	addi	r17,r16,128
  812778:	a463883a 	add	r17,r20,r17
  81277c:	a421883a 	add	r16,r20,r16
  812780:	e0001e26 	beq	fp,zero,8127fc <__call_exitprocs+0xf4>
  812784:	80804017 	ldw	r2,256(r16)
  812788:	e0801c26 	beq	fp,r2,8127fc <__call_exitprocs+0xf4>
  81278c:	bdffffc4 	addi	r23,r23,-1
  812790:	843fff04 	addi	r16,r16,-4
  812794:	8c7fff04 	addi	r17,r17,-4
  812798:	bd7ff91e 	bne	r23,r21,812780 <__alt_mem_onchip_mem+0xff792780>
  81279c:	00800034 	movhi	r2,0
  8127a0:	10800004 	addi	r2,r2,0
  8127a4:	10000926 	beq	r2,zero,8127cc <__call_exitprocs+0xc4>
  8127a8:	a0800117 	ldw	r2,4(r20)
  8127ac:	1000301e 	bne	r2,zero,812870 <__call_exitprocs+0x168>
  8127b0:	a0800017 	ldw	r2,0(r20)
  8127b4:	10003226 	beq	r2,zero,812880 <__call_exitprocs+0x178>
  8127b8:	a009883a 	mov	r4,r20
  8127bc:	98800015 	stw	r2,0(r19)
  8127c0:	00000000 	call	0 <__reset-0x800000>
  8127c4:	9d000017 	ldw	r20,0(r19)
  8127c8:	a03fe41e 	bne	r20,zero,81275c <__alt_mem_onchip_mem+0xff79275c>
  8127cc:	dfc00a17 	ldw	ra,40(sp)
  8127d0:	df000917 	ldw	fp,36(sp)
  8127d4:	ddc00817 	ldw	r23,32(sp)
  8127d8:	dd800717 	ldw	r22,28(sp)
  8127dc:	dd400617 	ldw	r21,24(sp)
  8127e0:	dd000517 	ldw	r20,20(sp)
  8127e4:	dcc00417 	ldw	r19,16(sp)
  8127e8:	dc800317 	ldw	r18,12(sp)
  8127ec:	dc400217 	ldw	r17,8(sp)
  8127f0:	dc000117 	ldw	r16,4(sp)
  8127f4:	dec00b04 	addi	sp,sp,44
  8127f8:	f800283a 	ret
  8127fc:	a0800117 	ldw	r2,4(r20)
  812800:	80c00017 	ldw	r3,0(r16)
  812804:	10bfffc4 	addi	r2,r2,-1
  812808:	15c01426 	beq	r2,r23,81285c <__call_exitprocs+0x154>
  81280c:	80000015 	stw	zero,0(r16)
  812810:	183fde26 	beq	r3,zero,81278c <__alt_mem_onchip_mem+0xff79278c>
  812814:	95c8983a 	sll	r4,r18,r23
  812818:	a0806217 	ldw	r2,392(r20)
  81281c:	a5800117 	ldw	r22,4(r20)
  812820:	2084703a 	and	r2,r4,r2
  812824:	10000b26 	beq	r2,zero,812854 <__call_exitprocs+0x14c>
  812828:	a0806317 	ldw	r2,396(r20)
  81282c:	2088703a 	and	r4,r4,r2
  812830:	20000c1e 	bne	r4,zero,812864 <__call_exitprocs+0x15c>
  812834:	89400017 	ldw	r5,0(r17)
  812838:	d9000017 	ldw	r4,0(sp)
  81283c:	183ee83a 	callr	r3
  812840:	a0800117 	ldw	r2,4(r20)
  812844:	15bfbf1e 	bne	r2,r22,812744 <__alt_mem_onchip_mem+0xff792744>
  812848:	98800017 	ldw	r2,0(r19)
  81284c:	153fcf26 	beq	r2,r20,81278c <__alt_mem_onchip_mem+0xff79278c>
  812850:	003fbc06 	br	812744 <__alt_mem_onchip_mem+0xff792744>
  812854:	183ee83a 	callr	r3
  812858:	003ff906 	br	812840 <__alt_mem_onchip_mem+0xff792840>
  81285c:	a5c00115 	stw	r23,4(r20)
  812860:	003feb06 	br	812810 <__alt_mem_onchip_mem+0xff792810>
  812864:	89000017 	ldw	r4,0(r17)
  812868:	183ee83a 	callr	r3
  81286c:	003ff406 	br	812840 <__alt_mem_onchip_mem+0xff792840>
  812870:	a0800017 	ldw	r2,0(r20)
  812874:	a027883a 	mov	r19,r20
  812878:	1029883a 	mov	r20,r2
  81287c:	003fb606 	br	812758 <__alt_mem_onchip_mem+0xff792758>
  812880:	0005883a 	mov	r2,zero
  812884:	003ffb06 	br	812874 <__alt_mem_onchip_mem+0xff792874>

00812888 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  812888:	defffd04 	addi	sp,sp,-12
  81288c:	df000215 	stw	fp,8(sp)
  812890:	df000204 	addi	fp,sp,8
  812894:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  812898:	0001883a 	nop
  81289c:	e0bfff17 	ldw	r2,-4(fp)
  8128a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8128a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8128a8:	10000226 	beq	r2,zero,8128b4 <_exit+0x2c>
    ALT_SIM_FAIL();
  8128ac:	002af070 	cmpltui	zero,zero,43969
  8128b0:	00000106 	br	8128b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8128b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8128b8:	003fff06 	br	8128b8 <__alt_mem_onchip_mem+0xff7928b8>
