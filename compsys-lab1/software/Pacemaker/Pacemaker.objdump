
Pacemaker.elf:     file format elf32-littlenios2
Pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00014ef0 memsz 0x00014ef0 flags r-x
    LOAD off    0x00015f10 vaddr 0x00814f10 paddr 0x00816c00 align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x000188f0 vaddr 0x008188f0 paddr 0x008188f0 align 2**12
         filesz 0x00000000 memsz 0x000002f8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014688  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000644  008148cc  008148cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  00814f10  00816c00  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002f8  008188f0  008188f0  000188f0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00818be8  00818be8  00017c00  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  00017c00  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00017c00  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001168  00000000  00000000  00017c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002cf3d  00000000  00000000  00018d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b234  00000000  00000000  00045ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e8db  00000000  00000000  00050f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002868  00000000  00000000  0005f7dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000046c0  00000000  00000000  00062044  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000187f6  00000000  00000000  00066704  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007eefc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001a30  00000000  00000000  0007ef60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00085b72  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00085b75  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00085b78  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00085b79  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00085b7a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00085b7e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00085b82  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  00085b86  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00085b8f  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00085b98  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00085ba1  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  00085bad  2**0
                  CONTENTS, READONLY
 30 .jdi          00004152  00000000  00000000  00085bd9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006b318  00000000  00000000  00089d2b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
008148cc l    d  .rodata	00000000 .rodata
00814f10 l    d  .rwdata	00000000 .rwdata
008188f0 l    d  .bss	00000000 .bss
00818be8 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 pacemaker_fsm.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00814f28 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
008046f8 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
008149ca l     O .rodata	00000010 zeroes.4404
00806d24 l     F .text	000000bc __sbprintf
008149da l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00807140 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00808c70 l     F .text	00000008 __fp_unlock
00808c84 l     F .text	0000019c __sinit.part.1
00808e20 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00815774 l     O .rwdata	00000020 lc_ctype_charset
00815754 l     O .rwdata	00000020 lc_message_charset
00815794 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00814a08 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080b75c l     F .text	000000fc __sprint_r.part.0
00814b3c l     O .rodata	00000010 blanks.4348
00814b2c l     O .rodata	00000010 zeroes.4349
0080cce8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00810628 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810734 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810760 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
008109cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810aac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810b98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00810d6c l     F .text	0000003c alt_get_errno
00810da8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00810fc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00816bec l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
008113b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
008114e4 l     F .text	00000034 alt_dev_reg
00815974 l     O .rwdata	00001060 jtag_uart
008169d4 l     O .rwdata	00000120 lcd
00816af4 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811810 l     F .text	0000020c altera_avalon_jtag_uart_irq
00811a1c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00816bf8 l     O .rwdata	00000004 colstart
00812054 l     F .text	000000b8 lcd_write_command
0081210c l     F .text	000000d8 lcd_write_data
008121e4 l     F .text	000000d0 lcd_clear_screen
008122b4 l     F .text	000001ec lcd_repaint_screen
008124a0 l     F .text	000000cc lcd_scroll_up
0081256c l     F .text	000002ac lcd_handle_escape
00812cf0 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00812f30 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
008131e0 l     F .text	0000009c altera_avalon_uart_irq
0081327c l     F .text	000000e4 altera_avalon_uart_rxirq
00813360 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008134fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813714 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813a70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814120 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00814d8f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081890c g     O .bss	00000001 _cg81
0081890d g     O .bss	00000001 _cg42
00818a5c g     O .bss	00000004 alt_instruction_exception_handler
008003fc g     F .text	0000006c timeout_checker
0081890e g     O .bss	00000001 g83
0081890f g     O .bss	00000001 g40
0080aed0 g     F .text	00000074 _mprec_log10
0080afbc g     F .text	0000008c __any_on
00809b34 g     F .text	00000054 _isatty_r
00814a14 g     O .rodata	00000028 __mprec_tinytens
00818910 g     O .bss	00000001 g91
00810ca8 g     F .text	0000007c alt_main
00804624 g     F .text	000000c0 _puts_r
00818ae8 g     O .bss	00000100 alt_irq
00809c64 g     F .text	00000060 _lseek_r
00818911 g     O .bss	00000001 g139
00818912 g     O .bss	00000001 PRE_g95
00818913 g     O .bss	00000001 g4
00816c00 g       *ABS*	00000000 __flash_rwdata_start
00818914 g     O .bss	00000001 g108
00818915 g     O .bss	00000001 g19
00818916 g     O .bss	00000001 g138_e2
00818917 g     O .bss	00000001 g111
00809010 g     F .text	000000ac __sflags
0080f154 g     F .text	00000088 .hidden __eqdf2
00818918 g     O .bss	00000001 PRE_g102
00818be8 g       *ABS*	00000000 __alt_heap_start
008188fc g     O .bss	00000004 asense_flag_mode_2
00804480 g     F .text	0000003c printf
0080d174 g     F .text	0000009c _wcrtomb_r
00804a14 g     F .text	0000005c __sseek
00808fc0 g     F .text	00000010 __sinit
00806de0 g     F .text	00000140 __swbuf_r
00818919 g     O .bss	00000001 g55
0081891a g     O .bss	00000001 g134_fix0
0081891b g     O .bss	00000001 _cg96
0081891c g     O .bss	00000001 PRE_g51
0081891d g     O .bss	00000001 g27
00818904 g     O .bss	00000004 lcd
00809b88 g     F .text	0000007c _setlocale_r
0081891e g     O .bss	00000001 g134_fix3
00808e28 g     F .text	00000068 __sfmoreglue
00810d48 g     F .text	00000024 __malloc_unlock
0081891f g     O .bss	00000001 g112
00818920 g     O .bss	00000001 PRE_g128
00818921 g     O .bss	00000001 g3
00818922 g     O .bss	00000001 AEI_ex
00809ef0 g     F .text	0000015c memmove
00818923 g     O .bss	00000001 g103
00818924 g     O .bss	00000001 g75_e5
00818925 g     O .bss	00000001 g47
00818926 g     O .bss	00000001 g85
00818927 g     O .bss	00000001 g42
00808fa8 g     F .text	00000018 _cleanup
00818928 g     O .bss	00000001 PRE_g114
0080a04c g     F .text	000000a8 _Balloc
00818929 g     O .bss	00000001 g9
0081892a g     O .bss	00000001 g127
0081892b g     O .bss	00000001 g94b
0081892c g     O .bss	00000004 _PRE_GO
00818930 g     O .bss	00000001 PRE_g3
00818931 g     O .bss	00000001 g102
0080f1dc g     F .text	000000dc .hidden __gtdf2
00814290 g     F .text	00000024 altera_nios2_gen2_irq_init
00818932 g     O .bss	00000001 g115
00818933 g     O .bss	00000001 PRE_g39
00800000 g     F .entry	0000001c __reset
00818934 g     O .bss	00000001 PRE_g121
00818935 g     O .bss	00000001 g105_e8
00818936 g     O .bss	00000001 _cg52
00800290 g     F .text	000000a4 get_heart_signals
00800020 g       *ABS*	00000000 __flash_exceptions_start
008037a4 g     F .text	0000005c _fstat_r
00818a28 g     O .bss	00000004 errno
00818937 g     O .bss	00000001 _cg73
00818938 g     O .bss	00000001 g87
00818939 g     O .bss	00000001 g44
00804990 g     F .text	00000008 __seofread
0081893a g     O .bss	00000001 g123
00818a4c g     O .bss	00000004 alt_argv
0081ebb8 g       *ABS*	00000000 _gp
00814260 g     F .text	00000030 usleep
008009bc g     F .text	000000b0 reset
0081893b g     O .bss	00000001 g92
0081893c g     O .bss	00000001 Vpace
0081893d g     O .bss	00000001 g1
0081893e g     O .bss	00000001 g49_e3
0081893f g     O .bss	00000001 g61
00818940 g     O .bss	00000001 g134_fix1
008157f4 g     O .rwdata	00000180 alt_fd_list
00818941 g     O .bss	00000001 g135
00818942 g     O .bss	00000001 g71
00818943 g     O .bss	00000001 _cg110
00813c10 g     F .text	00000090 alt_find_dev
00809da8 g     F .text	00000148 memcpy
00818944 g     O .bss	00000001 g126
00808c78 g     F .text	0000000c _cleanup_r
00810440 g     F .text	000000dc .hidden __floatsidf
00818945 g     O .bss	00000001 g82
008141e4 g     F .text	0000007c alt_io_redirect
0080f2b8 g     F .text	000000f4 .hidden __ltdf2
00818946 g     O .bss	00000001 PRE_g69
00818947 g     O .bss	00000001 PRE_g24
008148cc g       *ABS*	00000000 __DTOR_END__
00800468 g     F .text	00000038 test_and_set
00818948 g     O .bss	00000001 g12
008046e4 g     F .text	00000014 puts
0081449c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00818949 g     O .bss	00000001 g97
0081894a g     O .bss	00000001 g52
0080b60c g     F .text	00000074 __fpclassifyd
0080ae2c g     F .text	000000a4 __ratio
0080cccc g     F .text	0000001c __vfiprintf_internal
0081894b g     O .bss	00000001 _cg46
0081894c g     O .bss	00000001 g134_e1_fix
00811c14 g     F .text	0000021c altera_avalon_jtag_uart_read
0081894d g     O .bss	00000001 _cg35
00804450 g     F .text	00000030 _printf_r
0080df04 g     F .text	00000064 .hidden __udivsi3
00810a08 g     F .text	000000a4 isatty
0081894e g     O .bss	00000001 g17
0081894f g     O .bss	00000001 PRE_g77
00818950 g     O .bss	00000001 PRE_g34
00814a64 g     O .rodata	000000c8 __mprec_tens
00818951 g     O .bss	00000001 g134_fix2
00809c04 g     F .text	0000000c __locale_charset
00818952 g     O .bss	00000001 g76
00818953 g     O .bss	00000001 g31
0081440c g     F .text	00000090 alt_icache_flush
00818954 g     O .bss	00000001 g37
00818a34 g     O .bss	00000004 __malloc_top_pad
00816bc8 g     O .rwdata	00000004 __mb_cur_max
00809c34 g     F .text	0000000c _localeconv_r
00818955 g     O .bss	00000001 g62
00818956 g     O .bss	00000001 PRE_g109
0080a458 g     F .text	0000003c __i2b
008094f0 g     F .text	000004bc __sfvwrite_r
008048e8 g     F .text	00000054 _sbrk_r
00818957 g     O .bss	00000001 g84
00818958 g     O .bss	00000001 g41
00818959 g     O .bss	00000001 g118
0081895a g     O .bss	00000001 PRE_g85
0081895b g     O .bss	00000001 start_VRP
0080b048 g     F .text	00000060 _read_r
00816be0 g     O .rwdata	00000004 alt_max_fd
0081895c g     O .bss	00000001 PRE_g8
0080ce68 g     F .text	000000f0 _fclose_r
00808c40 g     F .text	00000030 fflush
0081895d g     O .bss	00000001 g126_e11
00818a30 g     O .bss	00000004 __malloc_max_sbrked_mem
0081895e g     O .bss	00000001 PRE_g136
00818aa0 g     O .bss	00000018 timer_expired_flags
0081895f g     O .bss	00000001 g18
0081084c g     F .text	00000180 alt_irq_register
0080dfc0 g     F .text	000008ac .hidden __adddf3
00818960 g     O .bss	00000001 _cg101
00818961 g     O .bss	00000001 g132
0080abd4 g     F .text	0000010c __b2d
00818962 g     O .bss	00000001 PVARP_counting
0080d8d4 g     F .text	00000538 .hidden __umoddi3
00810bd4 g     F .text	000000d4 lseek
00816bb8 g     O .rwdata	00000004 _global_impure_ptr
00818963 g     O .bss	00000001 g48
0080b0a8 g     F .text	00000564 _realloc_r
00818be8 g       *ABS*	00000000 __bss_end
00814030 g     F .text	000000f0 alt_iic_isr_register
00818964 g     O .bss	00000001 VR
008112a8 g     F .text	00000108 alt_tick
00818965 g     O .bss	00000001 _cg58
0080d35c g     F .text	00000578 .hidden __udivdi3
0080d0d0 g     F .text	00000024 _fputwc_r
00814a3c g     O .rodata	00000028 __mprec_bigtens
0080a23c g     F .text	00000104 __s2b
0081051c g     F .text	000000a8 .hidden __floatunsidf
00818966 g     O .bss	00000001 g38
00818967 g     O .bss	00000001 g105
0080a914 g     F .text	00000060 __mcmp
00813134 g     F .text	000000ac altera_avalon_uart_init
00818968 g     O .bss	00000001 URI_counting
00818969 g     O .bss	00000001 PRE_g116
00808fe0 g     F .text	00000018 __fp_lock_all
00813fe4 g     F .text	0000004c alt_ic_irq_enabled
0081896a g     O .bss	00000001 PRE_g87
0081120c g     F .text	0000009c alt_alarm_stop
00818a44 g     O .bss	00000004 alt_irq_active
00803344 g     F .text	00000444 _fseeko_r
0081896b g     O .bss	00000001 g119_e10
0081896c g     O .bss	00000001 g117
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
008157cc g     O .rwdata	00000028 alt_dev_null
0081896d g     O .bss	00000001 PRE_g123
0081896e g     O .bss	00000001 LRI_counting
0081896f g     O .bss	00000001 _cg82
00818970 g     O .bss	00000001 _cg43
00818971 g     O .bss	00000001 start_AVI
00818972 g     O .bss	00000001 stop_AVI
00813a28 g     F .text	00000048 alt_dcache_flush_all
0080a340 g     F .text	00000068 __hi0bits
00818973 g     O .bss	00000001 g22b
008103c0 g     F .text	00000080 .hidden __fixdfsi
00818974 g     O .bss	00000001 g64
00818975 g     O .bss	00000001 g21
00818976 g     O .bss	00000001 _cg14
00818977 g     O .bss	00000001 PRE_g12
00818978 g     O .bss	00000001 g79
00818979 g     O .bss	00000001 g34
00816c00 g       *ABS*	00000000 __ram_rwdata_end
0081897a g     O .bss	00000001 g5
00816bd8 g     O .rwdata	00000008 alt_dev_list
0081897b g     O .bss	00000001 g94
0081897c g     O .bss	00000001 g110
0081897d g     O .bss	00000001 g49
00803284 g     F .text	00000044 _fputc_r
008113ec g     F .text	000000f8 write
008044bc g     F .text	000000a0 _putc_r
0081897e g     O .bss	00000001 g2
0081897f g     O .bss	00000001 g101b
00818980 g     O .bss	00000001 g7
00818981 g     O .bss	00000001 _cg90
00818982 g     O .bss	00000001 _cg16
00814f10 g       *ABS*	00000000 __ram_rodata_end
0081079c g     F .text	000000b0 fstat
00818983 g     O .bss	00000001 g134_e1_fix_fix
0080f2b8 g     F .text	000000f4 .hidden __ledf2
00818984 g     O .bss	00000001 LRI_ex
00818985 g     O .bss	00000001 g80
0080a68c g     F .text	00000140 __pow5mult
0080b870 g     F .text	0000145c ___vfiprintf_internal_r
00818a40 g     O .bss	00000004 __nlocale_changed
0080df68 g     F .text	00000058 .hidden __umodsi3
00818986 g     O .bss	00000001 PRE_g80
00818987 g     O .bss	00000001 g128
00818988 g     O .bss	00000001 _cg124
00818989 g     O .bss	00000001 g136
00818be8 g       *ABS*	00000000 end
0081898a g     O .bss	00000001 stop_AEI
0081898b g     O .bss	00000001 g100
00812818 g     F .text	000004d8 altera_avalon_lcd_16207_write
00803788 g     F .text	0000001c fseeko
0081898c g     O .bss	00000001 Vsense
0081898d g     O .bss	00000001 g59
0081898e g     O .bss	00000001 g99
0081898f g     O .bss	00000001 g54
00813750 g     F .text	000001ac altera_avalon_uart_write
00803328 g     F .text	0000001c fseek
00818990 g     O .bss	00000001 g66
00818991 g     O .bss	00000001 g23
00811750 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00818992 g     O .bss	00000001 _cg83
00818993 g     O .bss	00000001 _cg44
008148cc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00818994 g     O .bss	00000001 _cg48
00812fa8 g     F .text	0000007c alt_avalon_timer_sc_init
00813084 g     F .text	00000060 altera_avalon_uart_write_fd
008105c4 g     F .text	00000064 .hidden __clzsi2
008130e4 g     F .text	00000050 altera_avalon_uart_close_fd
00811e30 g     F .text	00000224 altera_avalon_jtag_uart_write
00808fd0 g     F .text	00000004 __sfp_lock_acquire
00809cc4 g     F .text	000000e4 memchr
00818995 g     O .bss	00000001 g14
00804b10 g     F .text	000021f8 ___vfprintf_internal_r
008091e0 g     F .text	00000310 _free_r
00818996 g     O .bss	00000001 AEI_counting
00809c10 g     F .text	00000010 __locale_mb_cur_max
00818997 g     O .bss	00000001 _cg6
00814718 g     F .text	00000180 __call_exitprocs
00818998 g     O .bss	00000001 Apace
00818999 g     O .bss	00000001 AVI_ex
0081899a g     O .bss	00000001 g101
0081899b g     O .bss	00000001 VRP_ex
00818a3c g     O .bss	00000004 __mlocale_changed
00816bc0 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081899c g     O .bss	00000001 g114
00818a54 g     O .bss	00000004 _alt_tick_rate
0081899d g     O .bss	00000001 g56
0081899e g     O .bss	00000001 g129
0081899f g     O .bss	00000001 g131
0080a7cc g     F .text	00000148 __lshift
00818a58 g     O .bss	00000004 _alt_nticks
00810ffc g     F .text	000000fc read
00811550 g     F .text	0000009c alt_sys_init
008189a0 g     O .bss	00000001 g78
008189a1 g     O .bss	00000001 g33
008043f0 g     F .text	00000060 _open_r
00814600 g     F .text	00000118 __register_exitproc
008189a2 g     O .bss	00000001 g122
00814f10 g     O .rwdata	00000018 timer_timeout_values
008189a3 g     O .bss	00000001 URI_ex
0080a494 g     F .text	000001f8 __multiply
00811abc g     F .text	00000068 altera_avalon_jtag_uart_close
00814f10 g       *ABS*	00000000 __ram_rwdata_start
008148cc g       *ABS*	00000000 __ram_rodata_start
00818a78 g     O .bss	00000028 __malloc_current_mallinfo
0080ace0 g     F .text	0000014c __d2b
008189a4 g     O .bss	00000001 _cg25
008189a5 g     O .bss	00000001 _cg29
008189a6 g     O .bss	00000001 VRP_counting
008189a7 g     O .bss	00000001 stop_URI
008189a8 g     O .bss	00000001 g134
008115ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
008189a9 g     O .bss	00000001 g35
00813da8 g     F .text	000000a4 alt_get_fd
008189aa g     O .bss	00000001 g122b
008189ab g     O .bss	00000001 _cg71
008189ac g     O .bss	00000001 _cg38
008142b4 g     F .text	00000158 alt_busy_sleep
008189ad g     O .bss	00000001 g15
008070ec g     F .text	00000054 _close_r
008189ae g     O .bss	00000001 g90
008189af g     O .bss	00000001 _GO
00814584 g     F .text	0000007c memcmp
008116ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008189b0 g     O .bss	00000001 g112_e9
008189b1 g     O .bss	00000001 PRE_g54
00818be8 g       *ABS*	00000000 __alt_stack_base
008116fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00803800 g     F .text	000000cc _fwrite_r
008189b2 g     O .bss	00000001 start_PVARP
00806f98 g     F .text	00000154 __swsetup_r
00800a6c g     F .text	0000270c tick
0080e86c g     F .text	000008e8 .hidden __divdf3
00808e90 g     F .text	00000118 __sfp
008189b3 g     O .bss	00000001 g63
008189b4 g     O .bss	00000001 g20
0080af44 g     F .text	00000078 __copybits
008189b5 g     O .bss	00000001 g60
008189b6 g     O .bss	00000001 PRE_g107
0081534c g     O .rwdata	00000408 __malloc_av_
00808fdc g     F .text	00000004 __sinit_lock_release
008189b7 g     O .bss	00000001 _cg10
0080f3ac g     F .text	00000718 .hidden __muldf3
0080493c g     F .text	00000054 __sread
00813ca0 g     F .text	00000108 alt_find_file
008189b8 g     O .bss	00000001 g93
00813aac g     F .text	000000a4 alt_dev_llist_insert
00810d24 g     F .text	00000024 __malloc_lock
0081115c g     F .text	000000b0 sbrk
008189b9 g     O .bss	00000001 _cg22
008189ba g     O .bss	00000001 g119
00808be4 g     F .text	0000005c _fflush_r
0080cda4 g     F .text	000000c4 _calloc_r
0080326c g     F .text	00000018 fopen
008188f0 g       *ABS*	00000000 __bss_start
008189bb g     O .bss	00000001 g86
008189bc g     O .bss	00000001 g43
008042c8 g     F .text	00000128 memset
008004a0 g     F .text	0000051c main
008189bd g     O .bss	00000001 _cg65
00818a50 g     O .bss	00000004 alt_envp
00818a2c g     O .bss	00000004 __malloc_max_total_mem
0081164c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00806f20 g     F .text	00000018 __swbuf
008189be g     O .bss	00000001 g36
00812d9c g     F .text	00000134 altera_avalon_lcd_16207_init
008189bf g     O .bss	00000001 g89
008189c0 g     O .bss	00000001 g46
00804a70 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080cf58 g     F .text	00000014 fclose
00807340 g     F .text	00001688 _dtoa_r
00803abc g     F .text	0000080c _malloc_r
0080d2d0 g     F .text	00000030 __ascii_wctomb
008189c1 g     O .bss	00000001 start_AEI
00816be4 g     O .rwdata	00000004 alt_errno
008099ac g     F .text	000000c4 _fwalk
008189c2 g     O .bss	00000001 g95
008189c3 g     O .bss	00000001 g50
008189c4 g     O .bss	00000001 _cg131
0080455c g     F .text	000000c8 putc
008189c5 g     O .bss	00000001 g96
008189c6 g     O .bss	00000001 g51
0080de0c g     F .text	00000084 .hidden __divsi3
008090bc g     F .text	00000124 _malloc_trim_r
008189c7 g     O .bss	00000001 start_LRI
008148cc g       *ABS*	00000000 __CTOR_END__
008189c8 g     O .bss	00000001 g138
0080b680 g     F .text	000000dc strcmp
008189c9 g     O .bss	00000001 _cg115
008189ca g     O .bss	00000001 g107
008148cc g       *ABS*	00000000 __flash_rodata_start
008189cb g     O .bss	00000001 g113
008148cc g       *ABS*	00000000 __DTOR_LIST__
008189cc g     O .bss	00000001 _cg117
008189cd g     O .bss	00000001 _cg78
0080f154 g     F .text	00000088 .hidden __nedf2
008189ce g     O .bss	00000001 PRE_g61
00811518 g     F .text	00000038 alt_irq_init
008110f8 g     F .text	00000064 alt_release_fd
008189cf g     O .bss	00000001 g104
008189d0 g     O .bss	00000001 PRE_g130
008189d1 g     O .bss	00000001 g13
00814b4c g     O .rodata	00000100 .hidden __clz_tab
00818a38 g     O .bss	00000004 _PathLocale
008189d2 g     O .bss	00000001 g98
008189d3 g     O .bss	00000001 g53
008189d4 g     O .bss	00000001 g8
008189d5 g     O .bss	00000001 g57
00814538 g     F .text	00000014 atexit
00806f38 g     F .text	00000060 _write_r
008189d6 g     O .bss	00000001 g108b
00818900 g     O .bss	00000004 occupied
008189d7 g     O .bss	00000001 start_URI
008189d8 g     O .bss	00000001 g70
008189d9 g     O .bss	00000001 AR
00809c40 g     F .text	00000018 setlocale
00800334 g     F .text	000000c8 get_uart_contents
008189da g     O .bss	00000001 g116
00816bbc g     O .rwdata	00000004 _impure_ptr
00818a48 g     O .bss	00000004 alt_argc
008189db g     O .bss	00000001 g6
008089c8 g     F .text	0000021c __sflush_r
008189dc g     O .bss	00000001 _cg56
008188f4 g     O .bss	00000004 asense_flag
00813bb0 g     F .text	00000060 _do_dtors
008189dd g     O .bss	00000001 _cg122
00809c2c g     F .text	00000008 __locale_cjk_lang
008189de g     O .bss	00000001 g72
008189df g     O .bss	00000001 g91_e6
00803324 g     F .text	00000004 _fseek_r
008189e0 g     O .bss	00000001 g81
00804714 g     F .text	000001d4 __srefill_r
008189e1 g     O .bss	00000001 PVARP_ex
00800020 g       .exceptions	00000000 alt_irq_entry
0080ab70 g     F .text	00000064 __ulp
00808ff8 g     F .text	00000018 __fp_unlock_all
00818ab8 g     O .bss	00000018 timer_state_flags
008189e2 g     O .bss	00000001 g124
008189e3 g     O .bss	00000001 _cg108
00812ed0 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008032c8 g     F .text	0000005c fputc
008189e4 g     O .bss	00000001 _cg9
00816bd0 g     O .rwdata	00000008 alt_fs_list
008189e5 g     O .bss	00000001 g137
008189e6 g     O .bss	00000001 Asense
008189e7 g     O .bss	00000001 _cg129
008188f8 g     O .bss	00000004 vsense_flag_mode_2
008189e8 g     O .bss	00000001 g0
008188f0 g     O .bss	00000004 vsense_flag
008189e9 g     O .bss	00000001 PRE_g100
008189ea g     O .bss	00000001 g75
008189eb g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
008189ec g     O .bss	00000001 _cg40
008189ed g     O .bss	00000001 g134_e1
00809c58 g     F .text	0000000c localeconv
008189ee g     O .bss	00000001 stop_PVARP
008189ef g     O .bss	00000001 PRE_g66
008189f0 g     O .bss	00000001 PRE_g21
008189f1 g     O .bss	00000001 g16
008189f2 g     O .bss	00000001 g70b
00813e80 g     F .text	00000050 alt_ic_isr_register
008189f3 g     O .bss	00000001 g58
008038cc g     F .text	00000034 fwrite
008189f4 g     O .bss	00000001 _cg94
008189f5 g     O .bss	00000001 g68
008189f6 g     O .bss	00000001 g25
00816c00 g       *ABS*	00000000 _edata
00813024 g     F .text	00000060 altera_avalon_uart_read_fd
008189f7 g     O .bss	00000001 PRE_g93
00818be8 g       *ABS*	00000000 _end
008189f8 g     O .bss	00000001 g11
0080cf6c g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00811b24 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008189f9 g     O .bss	00000001 g65
008189fa g     O .bss	00000001 g22
008189fb g     O .bss	00000001 g19_e1
008189fc g     O .bss	00000001 g28
008189fd g     O .bss	00000001 g73
00813f58 g     F .text	0000008c alt_ic_irq_disable
008189fe g     O .bss	00000001 stop_VRP
008189ff g     O .bss	00000001 g115b
00804998 g     F .text	0000007c __swrite
00816bc4 g     O .rwdata	00000004 __malloc_trim_threshold
00818a00 g     O .bss	00000001 g133_e12
00809c20 g     F .text	0000000c __locale_msgcharset
0081454c g     F .text	00000038 exit
00818a01 g     O .bss	00000001 g125
00809a70 g     F .text	000000c4 _fwalk_reent
0080a974 g     F .text	000001fc __mdiff
00818a02 g     O .bss	00000001 g77
00818a03 g     O .bss	00000001 g32
0080de90 g     F .text	00000074 .hidden __modsi3
00816bfc g     O .rwdata	00000004 __ctype_ptr__
00818a04 g     O .bss	00000001 PRE_g26
00818a05 g     O .bss	00000001 g88
00818a06 g     O .bss	00000001 g45
00818a07 g     O .bss	00000001 g59_e4
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00818908 g     O .bss	00000004 uart
00808fd4 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
00818a08 g     O .bss	00000001 _cg103
00818a09 g     O .bss	00000001 _cg55
00818a0a g     O .bss	00000001 _cg18
00818a0b g     O .bss	00000001 g130
00814c8e g     O .rodata	00000101 _ctype_
00818a0c g     O .bss	00000001 g129b
00818a0d g     O .bss	00000001 PRE_g64
00818a0e g     O .bss	00000001 PRE_g5
00818a0f g     O .bss	00000001 stop_LRI
00818a10 g     O .bss	00000001 g32_e2
008134a8 g     F .text	00000054 altera_avalon_uart_close
00803178 g     F .text	000000f4 _fopen_r
00814898 g     F .text	00000034 _exit
008138fc g     F .text	0000012c alt_alarm_start
00818a11 g     O .bss	00000001 g121
00803900 g     F .text	000001bc __smakebuf_r
00804a78 g     F .text	00000098 strlen
00818a12 g     O .bss	00000001 g39
00818ad0 g     O .bss	00000018 timer_start_flags
00810e6c g     F .text	00000154 open
0080f1dc g     F .text	000000dc .hidden __gedf2
00818a13 g     O .bss	00000001 _cg88
00818a14 g     O .bss	00000001 g120
00816bcc g     O .rwdata	00000004 __wctomb
0080b858 g     F .text	00000018 __sprint_r
00813e4c g     F .text	00000034 alt_icache_flush_all
00818a15 g     O .bss	00000001 g29
00818a16 g     O .bss	00000001 _cg4
00818a17 g     O .bss	00000001 g67
00818a18 g     O .bss	00000001 g24
00818a19 g     O .bss	00000001 g133
00818a1a g     O .bss	00000001 g98_e7
00816be8 g     O .rwdata	00000004 alt_priority_mask
00818a1b g     O .bss	00000001 g109
00818a60 g     O .bss	00000018 timer_fist_timeStamp_Value
00813ed0 g     F .text	00000088 alt_ic_irq_enable
00806d08 g     F .text	0000001c __vfprintf_internal
00813538 g     F .text	000001dc altera_avalon_uart_read
0080d300 g     F .text	0000005c _wctomb_r
00818a1c g     O .bss	00000001 AVI_counting
0080fac4 g     F .text	000008fc .hidden __subdf3
00818a1d g     O .bss	00000001 _cg67
00818a1e g     O .bss	00000001 g106
0080a3a8 g     F .text	000000b0 __lo0bits
00818a1f g     O .bss	00000001 _cg31
00818a20 g     O .bss	00000001 g10
00816bf0 g     O .rwdata	00000008 alt_alarm_list
00818a21 g     O .bss	00000001 _cg62
00818a22 g     O .bss	00000001 _cg27
00813b50 g     F .text	00000060 _do_ctors
0080d210 g     F .text	000000c0 wcrtomb
00818a23 g     O .bss	00000001 g69
00818a24 g     O .bss	00000001 g26
00810664 g     F .text	000000d0 close
00810b14 g     F .text	00000084 alt_load
00818a25 g     O .bss	00000001 PRE_g37
0080d0f4 g     F .text	00000080 fputwc
00808fd8 g     F .text	00000004 __sinit_lock_acquire
0080a11c g     F .text	00000120 __multadd
0080a0f4 g     F .text	00000028 _Bfree
00818a26 g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__reset-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10a2ba04 	addi	r2,r2,-29976
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10a2ba04 	addi	r2,r2,-29976
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a7a917 	ldw	r2,-24924(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a7a917 	ldw	r2,-24924(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6baee14 	ori	gp,gp,60344
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10a23c14 	ori	r2,r2,35056

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18e2fa14 	ori	r3,r3,35816

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0810b140 	call	810b14 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	0810ca80 	call	810ca8 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <get_heart_signals>:
 * This method sets a flag to set initiate setting the
 * Vsense or Asense variable if KEY0 and KEY1 are is pressed
 * respectively.
 */
void get_heart_signals(void* context, alt_u32 ID)
{
  800290:	defffa04 	addi	sp,sp,-24
  800294:	dfc00515 	stw	ra,20(sp)
  800298:	df000415 	stw	fp,16(sp)
  80029c:	df000404 	addi	fp,sp,16
  8002a0:	e13ffe15 	stw	r4,-8(fp)
  8002a4:	e17fff15 	stw	r5,-4(fp)
	// critical section "ticket" variable
	int code;

	// Read buttons value
	int buttonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  8002a8:	00804434 	movhi	r2,272
  8002ac:	10842804 	addi	r2,r2,4256
  8002b0:	10800037 	ldwio	r2,0(r2)
  8002b4:	e0bffc15 	stw	r2,-16(fp)

	// ensure mutual exclusion
	test_and_set(&code);
  8002b8:	e0bffd04 	addi	r2,fp,-12
  8002bc:	1009883a 	mov	r4,r2
  8002c0:	08004680 	call	800468 <test_and_set>
	while(code)test_and_set(&code);
  8002c4:	00000306 	br	8002d4 <get_heart_signals+0x44>
  8002c8:	e0bffd04 	addi	r2,fp,-12
  8002cc:	1009883a 	mov	r4,r2
  8002d0:	08004680 	call	800468 <test_and_set>
  8002d4:	e0bffd17 	ldw	r2,-12(fp)
  8002d8:	103ffb1e 	bne	r2,zero,8002c8 <__alt_mem_onchip_mem+0xff7802c8>

	if(buttonsValue == 0b110) // Vsense occurred
  8002dc:	e0bffc17 	ldw	r2,-16(fp)
  8002e0:	10800198 	cmpnei	r2,r2,6
  8002e4:	1000031e 	bne	r2,zero,8002f4 <get_heart_signals+0x64>
	{
		vsense_flag = 1;
  8002e8:	00800044 	movi	r2,1
  8002ec:	d0a74e15 	stw	r2,-25288(gp)
  8002f0:	00000506 	br	800308 <get_heart_signals+0x78>
	}
	else if(buttonsValue == 0b101) // Asense occured
  8002f4:	e0bffc17 	ldw	r2,-16(fp)
  8002f8:	10800158 	cmpnei	r2,r2,5
  8002fc:	1000021e 	bne	r2,zero,800308 <get_heart_signals+0x78>
	{
		asense_flag = 1;
  800300:	00800044 	movi	r2,1
  800304:	d0a74f15 	stw	r2,-25284(gp)
	}

	// free the critical section
	occupied = 0;
  800308:	d0275215 	stw	zero,-25272(gp)

	// clear the edge capture register to enable next interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  80030c:	0007883a 	mov	r3,zero
  800310:	00804434 	movhi	r2,272
  800314:	10842b04 	addi	r2,r2,4268
  800318:	10c00035 	stwio	r3,0(r2)
}
  80031c:	0001883a 	nop
  800320:	e037883a 	mov	sp,fp
  800324:	dfc00117 	ldw	ra,4(sp)
  800328:	df000017 	ldw	fp,0(sp)
  80032c:	dec00204 	addi	sp,sp,8
  800330:	f800283a 	ret

00800334 <get_uart_contents>:


void get_uart_contents(void *context ,alt_u32 interrupt)
{
  800334:	defffa04 	addi	sp,sp,-24
  800338:	dfc00515 	stw	ra,20(sp)
  80033c:	df000415 	stw	fp,16(sp)
  800340:	df000404 	addi	fp,sp,16
  800344:	e13ffe15 	stw	r4,-8(fp)
  800348:	e17fff15 	stw	r5,-4(fp)
	unsigned short int data,status,code;
	// wait till a char is ready to read from uart
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
  80034c:	00804434 	movhi	r2,272
  800350:	10841204 	addi	r2,r2,4168
  800354:	10800037 	ldwio	r2,0(r2)
  800358:	e0bffc0d 	sth	r2,-16(fp)
	while (!(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK))
  80035c:	00000406 	br	800370 <get_uart_contents+0x3c>
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
  800360:	00804434 	movhi	r2,272
  800364:	10841204 	addi	r2,r2,4168
  800368:	10800037 	ldwio	r2,0(r2)
  80036c:	e0bffc0d 	sth	r2,-16(fp)
void get_uart_contents(void *context ,alt_u32 interrupt)
{
	unsigned short int data,status,code;
	// wait till a char is ready to read from uart
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
	while (!(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK))
  800370:	e0bffc0b 	ldhu	r2,-16(fp)
  800374:	1080200c 	andi	r2,r2,128
  800378:	103ff926 	beq	r2,zero,800360 <__alt_mem_onchip_mem+0xff780360>
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
	// read the buffer content
	data =IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  80037c:	00804434 	movhi	r2,272
  800380:	10841004 	addi	r2,r2,4160
  800384:	10800037 	ldwio	r2,0(r2)
  800388:	e0bffc8d 	sth	r2,-14(fp)

	// ensure mutual exclusion
	test_and_set(&code);
  80038c:	e0bffd04 	addi	r2,fp,-12
  800390:	1009883a 	mov	r4,r2
  800394:	08004680 	call	800468 <test_and_set>
	while(code)test_and_set(&code);
  800398:	00000306 	br	8003a8 <get_uart_contents+0x74>
  80039c:	e0bffd04 	addi	r2,fp,-12
  8003a0:	1009883a 	mov	r4,r2
  8003a4:	08004680 	call	800468 <test_and_set>
  8003a8:	e0bffd0b 	ldhu	r2,-12(fp)
  8003ac:	10bfffcc 	andi	r2,r2,65535
  8003b0:	103ffa1e 	bne	r2,zero,80039c <__alt_mem_onchip_mem+0xff78039c>
	if(data == _Asense)
  8003b4:	e0bffc8b 	ldhu	r2,-14(fp)
  8003b8:	10801058 	cmpnei	r2,r2,65
  8003bc:	1000031e 	bne	r2,zero,8003cc <get_uart_contents+0x98>
	{
		asense_flag_mode_2 = 1;
  8003c0:	00800044 	movi	r2,1
  8003c4:	d0a75115 	stw	r2,-25276(gp)
  8003c8:	00000506 	br	8003e0 <get_uart_contents+0xac>
	}
	else if(data == _Vsense)
  8003cc:	e0bffc8b 	ldhu	r2,-14(fp)
  8003d0:	10801598 	cmpnei	r2,r2,86
  8003d4:	1000021e 	bne	r2,zero,8003e0 <get_uart_contents+0xac>
	{
		vsense_flag_mode_2 = 1;
  8003d8:	00800044 	movi	r2,1
  8003dc:	d0a75015 	stw	r2,-25280(gp)
	}

	//free the critical section
	occupied = 0;
  8003e0:	d0275215 	stw	zero,-25272(gp)

}
  8003e4:	0001883a 	nop
  8003e8:	e037883a 	mov	sp,fp
  8003ec:	dfc00117 	ldw	ra,4(sp)
  8003f0:	df000017 	ldw	fp,0(sp)
  8003f4:	dec00204 	addi	sp,sp,8
  8003f8:	f800283a 	ret

008003fc <timeout_checker>:
 * 	timer_expired_flag - the address of the timer variable that represent an input on the sccharts
 * 			 will modify the value of the passed outputput to "1" for timer timeout
 * 			 and "0" for timer still counting.
 */
void timeout_checker(int first_timeStamp , int timeout ,char *timer_expired_flag)
{
  8003fc:	defffa04 	addi	sp,sp,-24
  800400:	dfc00515 	stw	ra,20(sp)
  800404:	df000415 	stw	fp,16(sp)
  800408:	df000404 	addi	fp,sp,16
  80040c:	e13ffd15 	stw	r4,-12(fp)
  800410:	e17ffe15 	stw	r5,-8(fp)
  800414:	e1bfff15 	stw	r6,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  800418:	d0e7a817 	ldw	r3,-24928(gp)

	//calculates the elapsed time
	int time_diff = alt_nticks() - first_timeStamp;
  80041c:	e0bffd17 	ldw	r2,-12(fp)
  800420:	1885c83a 	sub	r2,r3,r2
  800424:	e0bffc15 	stw	r2,-16(fp)

	if(time_diff >= timeout)
  800428:	e0fffc17 	ldw	r3,-16(fp)
  80042c:	e0bffe17 	ldw	r2,-8(fp)
  800430:	18800716 	blt	r3,r2,800450 <timeout_checker+0x54>
	{
		 printf("timeoutvalue %d \n",time_diff);
  800434:	e17ffc17 	ldw	r5,-16(fp)
  800438:	01002074 	movhi	r4,129
  80043c:	21123304 	addi	r4,r4,18636
  800440:	08044800 	call	804480 <printf>
		(*timer_expired_flag) = 1; // timer expired
  800444:	e0bfff17 	ldw	r2,-4(fp)
  800448:	00c00044 	movi	r3,1
  80044c:	10c00005 	stb	r3,0(r2)
	}
}
  800450:	0001883a 	nop
  800454:	e037883a 	mov	sp,fp
  800458:	dfc00117 	ldw	ra,4(sp)
  80045c:	df000017 	ldw	fp,0(sp)
  800460:	dec00204 	addi	sp,sp,8
  800464:	f800283a 	ret

00800468 <test_and_set>:
/*
 * This method ensures that only one process (main or ISR) has access
 * to variables "vsense_flag" or "asense_flag" at a time
 */
void test_and_set(int* code)
{
  800468:	defffe04 	addi	sp,sp,-8
  80046c:	df000115 	stw	fp,4(sp)
  800470:	df000104 	addi	fp,sp,4
  800474:	e13fff15 	stw	r4,-4(fp)
	(*code) = occupied;
  800478:	d0e75217 	ldw	r3,-25272(gp)
  80047c:	e0bfff17 	ldw	r2,-4(fp)
  800480:	10c00015 	stw	r3,0(r2)
	occupied = 1;
  800484:	00800044 	movi	r2,1
  800488:	d0a75215 	stw	r2,-25272(gp)
}
  80048c:	0001883a 	nop
  800490:	e037883a 	mov	sp,fp
  800494:	df000017 	ldw	fp,0(sp)
  800498:	dec00104 	addi	sp,sp,4
  80049c:	f800283a 	ret

008004a0 <main>:


int main()
{
  8004a0:	defff904 	addi	sp,sp,-28
  8004a4:	dfc00615 	stw	ra,24(sp)
  8004a8:	df000515 	stw	fp,20(sp)
  8004ac:	df000504 	addi	fp,sp,20
	// Initialize the FSM
	reset();
  8004b0:	08009bc0 	call	8009bc <reset>

	// Store the timers "timer start" flags
	timer_start_flags[0] = &start_AVI;
  8004b4:	008020b4 	movhi	r2,130
  8004b8:	10a2b404 	addi	r2,r2,-30000
  8004bc:	d0e76e44 	addi	r3,gp,-25159
  8004c0:	10c00015 	stw	r3,0(r2)
	timer_start_flags[1] = &start_PVARP;
  8004c4:	008020b4 	movhi	r2,130
  8004c8:	10a2b404 	addi	r2,r2,-30000
  8004cc:	d0e77e84 	addi	r3,gp,-25094
  8004d0:	10c00115 	stw	r3,4(r2)
	timer_start_flags[2] = &start_VRP;
  8004d4:	008020b4 	movhi	r2,130
  8004d8:	10a2b404 	addi	r2,r2,-30000
  8004dc:	d0e768c4 	addi	r3,gp,-25181
  8004e0:	10c00215 	stw	r3,8(r2)
	timer_start_flags[3] = &start_AEI;
  8004e4:	008020b4 	movhi	r2,130
  8004e8:	10a2b404 	addi	r2,r2,-30000
  8004ec:	d0e78244 	addi	r3,gp,-25079
  8004f0:	10c00315 	stw	r3,12(r2)
	timer_start_flags[4] = &start_LRI;
  8004f4:	008020b4 	movhi	r2,130
  8004f8:	10a2b404 	addi	r2,r2,-30000
  8004fc:	d0e783c4 	addi	r3,gp,-25073
  800500:	10c00415 	stw	r3,16(r2)
	timer_start_flags[5] = &start_URI;
  800504:	008020b4 	movhi	r2,130
  800508:	10a2b404 	addi	r2,r2,-30000
  80050c:	d0e787c4 	addi	r3,gp,-25057
  800510:	10c00515 	stw	r3,20(r2)

	// Store the timer state (counting = 1 idle = 0)
	timer_state_flags[0] = &AVI_counting;
  800514:	008020b4 	movhi	r2,130
  800518:	10a2ae04 	addi	r2,r2,-30024
  80051c:	d0e79904 	addi	r3,gp,-24988
  800520:	10c00015 	stw	r3,0(r2)
	timer_state_flags[1] = &PVARP_counting;
  800524:	008020b4 	movhi	r2,130
  800528:	10a2ae04 	addi	r2,r2,-30024
  80052c:	d0e76a84 	addi	r3,gp,-25174
  800530:	10c00115 	stw	r3,4(r2)
	timer_state_flags[2] = &VRP_counting;
  800534:	008020b4 	movhi	r2,130
  800538:	10a2ae04 	addi	r2,r2,-30024
  80053c:	d0e77b84 	addi	r3,gp,-25106
  800540:	10c00215 	stw	r3,8(r2)
	timer_state_flags[3] = &AEI_counting;
  800544:	008020b4 	movhi	r2,130
  800548:	10a2ae04 	addi	r2,r2,-30024
  80054c:	d0e77784 	addi	r3,gp,-25122
  800550:	10c00315 	stw	r3,12(r2)
	timer_state_flags[4] = &LRI_counting;
  800554:	008020b4 	movhi	r2,130
  800558:	10a2ae04 	addi	r2,r2,-30024
  80055c:	d0e76d84 	addi	r3,gp,-25162
  800560:	10c00415 	stw	r3,16(r2)
	timer_state_flags[5] = &URI_counting;
  800564:	008020b4 	movhi	r2,130
  800568:	10a2ae04 	addi	r2,r2,-30024
  80056c:	d0e76c04 	addi	r3,gp,-25168
  800570:	10c00515 	stw	r3,20(r2)

	// Store the SCCHARTS OUTPUT variables
	timer_expired_flags[0] = &AVI_ex;
  800574:	008020b4 	movhi	r2,130
  800578:	10a2a804 	addi	r2,r2,-30048
  80057c:	d0e77844 	addi	r3,gp,-25119
  800580:	10c00015 	stw	r3,0(r2)
	timer_expired_flags[1] = &PVARP_ex;
  800584:	008020b4 	movhi	r2,130
  800588:	10a2a804 	addi	r2,r2,-30048
  80058c:	d0e78a44 	addi	r3,gp,-25047
  800590:	10c00115 	stw	r3,4(r2)
	timer_expired_flags[2] = &VRP_ex;
  800594:	008020b4 	movhi	r2,130
  800598:	10a2a804 	addi	r2,r2,-30048
  80059c:	d0e778c4 	addi	r3,gp,-25117
  8005a0:	10c00215 	stw	r3,8(r2)
	timer_expired_flags[3] = &AEI_ex;
  8005a4:	008020b4 	movhi	r2,130
  8005a8:	10a2a804 	addi	r2,r2,-30048
  8005ac:	d0e75a84 	addi	r3,gp,-25238
  8005b0:	10c00315 	stw	r3,12(r2)
	timer_expired_flags[4] = &LRI_ex;
  8005b4:	008020b4 	movhi	r2,130
  8005b8:	10a2a804 	addi	r2,r2,-30048
  8005bc:	d0e77304 	addi	r3,gp,-25140
  8005c0:	10c00415 	stw	r3,16(r2)
	timer_expired_flags[5] = &URI_ex;
  8005c4:	008020b4 	movhi	r2,130
  8005c8:	10a2a804 	addi	r2,r2,-30048
  8005cc:	d0e77ac4 	addi	r3,gp,-25109
  8005d0:	10c00515 	stw	r3,20(r2)

	// stores the heart signals sent from the heart emulator
	char heart_signal[1];
	//  stores the switch values on the switch on DE-115 board
	int swicthValue = 0;
  8005d4:	e03ffb15 	stw	zero,-20(fp)
	// stores the previous value of variable "swicthValue"
	int prevSwitchValue = -1;
  8005d8:	00bfffc4 	movi	r2,-1
  8005dc:	e0bffc15 	stw	r2,-16(fp)
	// critical section "ticket" variable
	int code;

	//Open uart with read and write
	uart = fopen(UART_NAME , "w+");
  8005e0:	01402074 	movhi	r5,129
  8005e4:	29523804 	addi	r5,r5,18656
  8005e8:	01002074 	movhi	r4,129
  8005ec:	21123904 	addi	r4,r4,18660
  8005f0:	080326c0 	call	80326c <fopen>
  8005f4:	d0a75415 	stw	r2,-25264(gp)
	//uart = open(UART_NAME,O_NONBLOCK | O_RDWR);
	if(uart == NULL)
  8005f8:	d0a75417 	ldw	r2,-25264(gp)
  8005fc:	1000031e 	bne	r2,zero,80060c <main+0x16c>
	{
		printf("error ---------------------->could not start uart\n");
  800600:	01002074 	movhi	r4,129
  800604:	21123c04 	addi	r4,r4,18672
  800608:	08046e40 	call	8046e4 <puts>
	}

	//Open lcd module on the DE-115 board
	lcd = fopen(LCD_NAME, "w");
  80060c:	01402074 	movhi	r5,129
  800610:	29524904 	addi	r5,r5,18724
  800614:	01002074 	movhi	r4,129
  800618:	21124a04 	addi	r4,r4,18728
  80061c:	080326c0 	call	80326c <fopen>
  800620:	d0a75315 	stw	r2,-25268(gp)
	if(lcd == NULL)
  800624:	d0a75317 	ldw	r2,-25268(gp)
  800628:	1000031e 	bne	r2,zero,800638 <main+0x198>
	{
		printf("error ---------------------->could not start lcd\n");
  80062c:	01002074 	movhi	r4,129
  800630:	21124d04 	addi	r4,r4,18740
  800634:	08046e40 	call	8046e4 <puts>
	}

	// initialize button isr - clear the buttons edge capture register
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800638:	0007883a 	mov	r3,zero
  80063c:	00804434 	movhi	r2,272
  800640:	10842b04 	addi	r2,r2,4268
  800644:	10c00035 	stwio	r3,0(r2)
	// enable interrupt on button press (KEY0 or KEY1 only)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b011);
  800648:	00c000c4 	movi	r3,3
  80064c:	00804434 	movhi	r2,272
  800650:	10842a04 	addi	r2,r2,4264
  800654:	10c00035 	stwio	r3,0(r2)
	// initialize button isr - register button ISR
	 alt_irq_register (BUTTONS_IRQ, NULL , get_heart_signals);
  800658:	01802034 	movhi	r6,128
  80065c:	3180a404 	addi	r6,r6,656
  800660:	000b883a 	mov	r5,zero
  800664:	01000104 	movi	r4,4
  800668:	081084c0 	call	81084c <alt_irq_register>
	 // enable ISR routine when uart has a char in buffer
	 IOWR(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG,ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
  80066c:	00c02004 	movi	r3,128
  800670:	00804434 	movhi	r2,272
  800674:	10841304 	addi	r2,r2,4172
  800678:	10c00035 	stwio	r3,0(r2)
	 // register uart ISR routine
	  alt_irq_register(UART_IRQ, NULL, get_uart_contents);
  80067c:	01802034 	movhi	r6,128
  800680:	3180cd04 	addi	r6,r6,820
  800684:	000b883a 	mov	r5,zero
  800688:	0009883a 	mov	r4,zero
  80068c:	081084c0 	call	81084c <alt_irq_register>

  while(1)
  {

	  if(swicthValue) // Read Vsense and Asense inputs from the heart emulator ( SW0 = 1)
  800690:	e0bffb17 	ldw	r2,-20(fp)
  800694:	10001726 	beq	r2,zero,8006f4 <main+0x254>
	  {
		  // Read heart inputs from the heart emulator
		  //fscanf(uart,"%c", &heart_signal);

		  // ensure mutual exclusion
		  test_and_set(&code);
  800698:	e0bfff04 	addi	r2,fp,-4
  80069c:	1009883a 	mov	r4,r2
  8006a0:	08004680 	call	800468 <test_and_set>
		  while(code) test_and_set(&code);
  8006a4:	00000306 	br	8006b4 <main+0x214>
  8006a8:	e0bfff04 	addi	r2,fp,-4
  8006ac:	1009883a 	mov	r4,r2
  8006b0:	08004680 	call	800468 <test_and_set>
  8006b4:	e0bfff17 	ldw	r2,-4(fp)
  8006b8:	103ffb1e 	bne	r2,zero,8006a8 <__alt_mem_onchip_mem+0xff7806a8>
		  if(asense_flag_mode_2)
  8006bc:	d0a75117 	ldw	r2,-25276(gp)
  8006c0:	10000326 	beq	r2,zero,8006d0 <main+0x230>
		  {
			  Asense = 1; // Asense occured
  8006c4:	00800044 	movi	r2,1
  8006c8:	d0a78b85 	stb	r2,-25042(gp)
  8006cc:	00000106 	br	8006d4 <main+0x234>
		  }
		  else
		  {
			  Asense = 0; // no Asense occured
  8006d0:	d0278b85 	stb	zero,-25042(gp)
		  }

		  if(vsense_flag_mode_2)
  8006d4:	d0a75017 	ldw	r2,-25280(gp)
  8006d8:	10000326 	beq	r2,zero,8006e8 <main+0x248>
		  {
			  Vsense = 1; // Vsense occured
  8006dc:	00800044 	movi	r2,1
  8006e0:	d0a77505 	stb	r2,-25132(gp)
  8006e4:	00000106 	br	8006ec <main+0x24c>
		  }
		  else
		  {
			  Vsense = 0; // no Vsense occured
  8006e8:	d0277505 	stb	zero,-25132(gp)
		  }

		  occupied = 0; // free critical section
  8006ec:	d0275215 	stw	zero,-25272(gp)
  8006f0:	00001806 	br	800754 <main+0x2b4>

	  }
	  else // Read Vsense and Asense inputs from KEY0 and KEY1 ( SW0 = 0)
	  {
		  // ensure mutual exclusion
		  test_and_set(&code);
  8006f4:	e0bfff04 	addi	r2,fp,-4
  8006f8:	1009883a 	mov	r4,r2
  8006fc:	08004680 	call	800468 <test_and_set>
		  while(code) test_and_set(&code);
  800700:	00000306 	br	800710 <main+0x270>
  800704:	e0bfff04 	addi	r2,fp,-4
  800708:	1009883a 	mov	r4,r2
  80070c:	08004680 	call	800468 <test_and_set>
  800710:	e0bfff17 	ldw	r2,-4(fp)
  800714:	103ffb1e 	bne	r2,zero,800704 <__alt_mem_onchip_mem+0xff780704>

		  //Get Vsense or Asense inputs
		  if(vsense_flag)
  800718:	d0a74e17 	ldw	r2,-25288(gp)
  80071c:	10000426 	beq	r2,zero,800730 <main+0x290>
		  {
			  Vsense = 1; // Vsense occured
  800720:	00800044 	movi	r2,1
  800724:	d0a77505 	stb	r2,-25132(gp)
			  vsense_flag = 0;
  800728:	d0274e15 	stw	zero,-25288(gp)
  80072c:	00000106 	br	800734 <main+0x294>
		  }
		  else
		  {
			  Vsense = 0; // no Vsense occured
  800730:	d0277505 	stb	zero,-25132(gp)
		  }

		  if(asense_flag)
  800734:	d0a74f17 	ldw	r2,-25284(gp)
  800738:	10000426 	beq	r2,zero,80074c <main+0x2ac>
		  {
			  Asense = 1; // Asense occured
  80073c:	00800044 	movi	r2,1
  800740:	d0a78b85 	stb	r2,-25042(gp)
			  asense_flag = 0;
  800744:	d0274f15 	stw	zero,-25284(gp)
  800748:	00000106 	br	800750 <main+0x2b0>
		  }
		  else
		  {
			  Asense = 0; // no Asense occured
  80074c:	d0278b85 	stb	zero,-25042(gp)
		  }

		  occupied = 0; // free critical section
  800750:	d0275215 	stw	zero,-25272(gp)
	  }

	  // Get inputs (TIMER_ex inputs) e.g. "AVI_ex = 1" timer AVI expired
	  for(int i = 0; i < 6 ; i++)
  800754:	e03ffd15 	stw	zero,-12(fp)
  800758:	00004406 	br	80086c <main+0x3cc>
	  {
		  // check if a timer is started
		  if((*timer_start_flags[i]))
  80075c:	008020b4 	movhi	r2,130
  800760:	10a2b404 	addi	r2,r2,-30000
  800764:	e0fffd17 	ldw	r3,-12(fp)
  800768:	18c7883a 	add	r3,r3,r3
  80076c:	18c7883a 	add	r3,r3,r3
  800770:	10c5883a 	add	r2,r2,r3
  800774:	10800017 	ldw	r2,0(r2)
  800778:	10800003 	ldbu	r2,0(r2)
  80077c:	10803fcc 	andi	r2,r2,255
  800780:	1080201c 	xori	r2,r2,128
  800784:	10bfe004 	addi	r2,r2,-128
  800788:	10000926 	beq	r2,zero,8007b0 <main+0x310>
  80078c:	d0a7a817 	ldw	r2,-24928(gp)
		  {
			  // get the time stamp when start timer flag is set
			  timer_fist_timeStamp_Value[i] = alt_nticks();
  800790:	1009883a 	mov	r4,r2
  800794:	008020b4 	movhi	r2,130
  800798:	10a29804 	addi	r2,r2,-30112
  80079c:	e0fffd17 	ldw	r3,-12(fp)
  8007a0:	18c7883a 	add	r3,r3,r3
  8007a4:	18c7883a 	add	r3,r3,r3
  8007a8:	10c5883a 	add	r2,r2,r3
  8007ac:	11000015 	stw	r4,0(r2)
		  }

		  // check if a timer is still counting
		  if((*timer_state_flags[i]))
  8007b0:	008020b4 	movhi	r2,130
  8007b4:	10a2ae04 	addi	r2,r2,-30024
  8007b8:	e0fffd17 	ldw	r3,-12(fp)
  8007bc:	18c7883a 	add	r3,r3,r3
  8007c0:	18c7883a 	add	r3,r3,r3
  8007c4:	10c5883a 	add	r2,r2,r3
  8007c8:	10800017 	ldw	r2,0(r2)
  8007cc:	10800003 	ldbu	r2,0(r2)
  8007d0:	10803fcc 	andi	r2,r2,255
  8007d4:	1080201c 	xori	r2,r2,128
  8007d8:	10bfe004 	addi	r2,r2,-128
  8007dc:	10001826 	beq	r2,zero,800840 <main+0x3a0>
		  {
			  /* check if a timer has timed out
			   * and outputs a timer expire flag to
			   * intput into sccharts
			   */
			  timeout_checker(timer_fist_timeStamp_Value[i],
  8007e0:	008020b4 	movhi	r2,130
  8007e4:	10a29804 	addi	r2,r2,-30112
  8007e8:	e0fffd17 	ldw	r3,-12(fp)
  8007ec:	18c7883a 	add	r3,r3,r3
  8007f0:	18c7883a 	add	r3,r3,r3
  8007f4:	10c5883a 	add	r2,r2,r3
  8007f8:	11000017 	ldw	r4,0(r2)
  8007fc:	00802074 	movhi	r2,129
  800800:	1093c404 	addi	r2,r2,20240
  800804:	e0fffd17 	ldw	r3,-12(fp)
  800808:	18c7883a 	add	r3,r3,r3
  80080c:	18c7883a 	add	r3,r3,r3
  800810:	10c5883a 	add	r2,r2,r3
  800814:	11400017 	ldw	r5,0(r2)
  800818:	008020b4 	movhi	r2,130
  80081c:	10a2a804 	addi	r2,r2,-30048
  800820:	e0fffd17 	ldw	r3,-12(fp)
  800824:	18c7883a 	add	r3,r3,r3
  800828:	18c7883a 	add	r3,r3,r3
  80082c:	10c5883a 	add	r2,r2,r3
  800830:	10800017 	ldw	r2,0(r2)
  800834:	100d883a 	mov	r6,r2
  800838:	08003fc0 	call	8003fc <timeout_checker>
  80083c:	00000806 	br	800860 <main+0x3c0>
			                  timer_timeout_values[i],
			                  timer_expired_flags[i]);
		  }
		  else
		  {
			  *timer_expired_flags[i] = 0; // timer is idle or counting
  800840:	008020b4 	movhi	r2,130
  800844:	10a2a804 	addi	r2,r2,-30048
  800848:	e0fffd17 	ldw	r3,-12(fp)
  80084c:	18c7883a 	add	r3,r3,r3
  800850:	18c7883a 	add	r3,r3,r3
  800854:	10c5883a 	add	r2,r2,r3
  800858:	10800017 	ldw	r2,0(r2)
  80085c:	10000005 	stb	zero,0(r2)

		  occupied = 0; // free critical section
	  }

	  // Get inputs (TIMER_ex inputs) e.g. "AVI_ex = 1" timer AVI expired
	  for(int i = 0; i < 6 ; i++)
  800860:	e0bffd17 	ldw	r2,-12(fp)
  800864:	10800044 	addi	r2,r2,1
  800868:	e0bffd15 	stw	r2,-12(fp)
  80086c:	e0bffd17 	ldw	r2,-12(fp)
  800870:	10800190 	cmplti	r2,r2,6
  800874:	103fb91e 	bne	r2,zero,80075c <__alt_mem_onchip_mem+0xff78075c>

	   }


	  // run one FSM tick
	  tick();
  800878:	0800a6c0 	call	800a6c <tick>


	  // emit FSM outputs
	  if(Apace)
  80087c:	d0a77803 	ldbu	r2,-25120(gp)
  800880:	10803fcc 	andi	r2,r2,255
  800884:	1080201c 	xori	r2,r2,128
  800888:	10bfe004 	addi	r2,r2,-128
  80088c:	10000c26 	beq	r2,zero,8008c0 <main+0x420>
	  {

		  // set all green LED (high green led means atrium is paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x3FFFF);
  800890:	00c00134 	movhi	r3,4
  800894:	18ffffc4 	addi	r3,r3,-1
  800898:	00804434 	movhi	r2,272
  80089c:	10842004 	addi	r2,r2,4224
  8008a0:	10c00035 	stwio	r3,0(r2)

		  if(swicthValue) // if mode is mode 2
  8008a4:	e0bffb17 	ldw	r2,-20(fp)
  8008a8:	10000926 	beq	r2,zero,8008d0 <main+0x430>
		  {
		 	 fprintf(uart,"A"); // make a Vpace on the heart emulator
  8008ac:	d0a75417 	ldw	r2,-25264(gp)
  8008b0:	100b883a 	mov	r5,r2
  8008b4:	01001044 	movi	r4,65
  8008b8:	08032c80 	call	8032c8 <fputc>
  8008bc:	00000406 	br	8008d0 <main+0x430>
		  }
	  }
	  else
	  {
		  // clear all red LED (heart is not artificially paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0);
  8008c0:	0007883a 	mov	r3,zero
  8008c4:	00804434 	movhi	r2,272
  8008c8:	10842004 	addi	r2,r2,4224
  8008cc:	10c00035 	stwio	r3,0(r2)
	  }

	  if(Vpace)
  8008d0:	d0a76103 	ldbu	r2,-25212(gp)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	10000c26 	beq	r2,zero,800914 <main+0x474>
	  {
		  // set all red LED (high red led means ventricle is paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x3FFFF);
  8008e4:	00c00134 	movhi	r3,4
  8008e8:	18ffffc4 	addi	r3,r3,-1
  8008ec:	00804434 	movhi	r2,272
  8008f0:	10841c04 	addi	r2,r2,4208
  8008f4:	10c00035 	stwio	r3,0(r2)

		  if(swicthValue) // if mode is mode 2
  8008f8:	e0bffb17 	ldw	r2,-20(fp)
  8008fc:	10000926 	beq	r2,zero,800924 <main+0x484>
		  {
			  fprintf(uart,"V"); // make a Vpace on the heart emulator
  800900:	d0a75417 	ldw	r2,-25264(gp)
  800904:	100b883a 	mov	r5,r2
  800908:	01001584 	movi	r4,86
  80090c:	08032c80 	call	8032c8 <fputc>
  800910:	00000406 	br	800924 <main+0x484>
		  }
	  }
	  else
	  {
		  // clear all green LED (heart is not artificially paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  800914:	0007883a 	mov	r3,zero
  800918:	00804434 	movhi	r2,272
  80091c:	10841c04 	addi	r2,r2,4208
  800920:	10c00035 	stwio	r3,0(r2)
	  }

	  // get current value of SW0 from DE-115 board
	  swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE)&1;
  800924:	00804434 	movhi	r2,272
  800928:	10842404 	addi	r2,r2,4240
  80092c:	10800037 	ldwio	r2,0(r2)
  800930:	1080004c 	andi	r2,r2,1
  800934:	e0bffb15 	stw	r2,-20(fp)
	  if(prevSwitchValue != swicthValue)
  800938:	e0fffc17 	ldw	r3,-16(fp)
  80093c:	e0bffb17 	ldw	r2,-20(fp)
  800940:	18bf5326 	beq	r3,r2,800690 <__alt_mem_onchip_mem+0xff780690>
	  {
		  if(swicthValue)
  800944:	e0bffb17 	ldw	r2,-20(fp)
  800948:	10000c26 	beq	r2,zero,80097c <main+0x4dc>
		  {
			  fprintf(lcd,"Mode 2 \n");
  80094c:	d0a75317 	ldw	r2,-25268(gp)
  800950:	100f883a 	mov	r7,r2
  800954:	01800204 	movi	r6,8
  800958:	01400044 	movi	r5,1
  80095c:	01002074 	movhi	r4,129
  800960:	21125a04 	addi	r4,r4,18792
  800964:	08038cc0 	call	8038cc <fwrite>
			  fprintf(lcd,"\n");
  800968:	d0a75317 	ldw	r2,-25268(gp)
  80096c:	100b883a 	mov	r5,r2
  800970:	01000284 	movi	r4,10
  800974:	08032c80 	call	8032c8 <fputc>
  800978:	00000b06 	br	8009a8 <main+0x508>
		  }
		  else
		  {
			  fprintf(lcd,"Mode 1 \n\r");
  80097c:	d0a75317 	ldw	r2,-25268(gp)
  800980:	100f883a 	mov	r7,r2
  800984:	01800244 	movi	r6,9
  800988:	01400044 	movi	r5,1
  80098c:	01002074 	movhi	r4,129
  800990:	21125d04 	addi	r4,r4,18804
  800994:	08038cc0 	call	8038cc <fwrite>
			  fprintf(lcd,"\n");
  800998:	d0a75317 	ldw	r2,-25268(gp)
  80099c:	100b883a 	mov	r5,r2
  8009a0:	01000284 	movi	r4,10
  8009a4:	08032c80 	call	8032c8 <fputc>
		  }

		  prevSwitchValue = swicthValue;
  8009a8:	e0bffb17 	ldw	r2,-20(fp)
  8009ac:	e0bffc15 	stw	r2,-16(fp)
		  asense_flag = 0; // reset Vsense occured flag
  8009b0:	d0274f15 	stw	zero,-25284(gp)
		  vsense_flag = 0; // reset Asense occured flag
  8009b4:	d0274e15 	stw	zero,-25288(gp)
	  }


  }
  8009b8:	003f3506 	br	800690 <__alt_mem_onchip_mem+0xff780690>

008009bc <reset>:
char g134_e1_fix_fix;
char g134_e1_fix;
char g134_e1;
char g138_e2;
int _PRE_GO;
void reset(){
  8009bc:	deffff04 	addi	sp,sp,-4
  8009c0:	df000015 	stw	fp,0(sp)
  8009c4:	d839883a 	mov	fp,sp
   _GO = 1;
  8009c8:	00800044 	movi	r2,1
  8009cc:	d0a77dc5 	stb	r2,-25097(gp)
   _PRE_GO = 0;
  8009d0:	d0275d15 	stw	zero,-25228(gp)
   PRE_g3 = 0;
  8009d4:	d0275e05 	stb	zero,-25224(gp)
   PRE_g5 = 0;
  8009d8:	d0279585 	stb	zero,-25002(gp)
   PRE_g8 = 0;
  8009dc:	d0276905 	stb	zero,-25180(gp)
   PRE_g12 = 0;
  8009e0:	d0276fc5 	stb	zero,-25153(gp)
   PRE_g21 = 0;
  8009e4:	d0278e05 	stb	zero,-25032(gp)
   PRE_g24 = 0;
  8009e8:	d02763c5 	stb	zero,-25201(gp)
   PRE_g26 = 0;
  8009ec:	d0279305 	stb	zero,-25012(gp)
   PRE_g34 = 0;
  8009f0:	d0276605 	stb	zero,-25192(gp)
   PRE_g37 = 0;
  8009f4:	d0279b45 	stb	zero,-24979(gp)
   PRE_g39 = 0;
  8009f8:	d0275ec5 	stb	zero,-25221(gp)
   PRE_g51 = 0;
  8009fc:	d0275905 	stb	zero,-25244(gp)
   PRE_g54 = 0;
  800a00:	d0277e45 	stb	zero,-25095(gp)
   PRE_g61 = 0;
  800a04:	d0278585 	stb	zero,-25066(gp)
   PRE_g64 = 0;
  800a08:	d0279545 	stb	zero,-25003(gp)
   PRE_g66 = 0;
  800a0c:	d0278dc5 	stb	zero,-25033(gp)
   PRE_g69 = 0;
  800a10:	d0276385 	stb	zero,-25202(gp)
   PRE_g77 = 0;
  800a14:	d02765c5 	stb	zero,-25193(gp)
   PRE_g80 = 0;
  800a18:	d0277385 	stb	zero,-25138(gp)
   PRE_g85 = 0;
  800a1c:	d0276885 	stb	zero,-25182(gp)
   PRE_g87 = 0;
  800a20:	d0276c85 	stb	zero,-25166(gp)
   PRE_g93 = 0;
  800a24:	d0278fc5 	stb	zero,-25025(gp)
   PRE_g95 = 0;
  800a28:	d0275685 	stb	zero,-25254(gp)
   PRE_g100 = 0;
  800a2c:	d0278c45 	stb	zero,-25039(gp)
   PRE_g102 = 0;
  800a30:	d0275805 	stb	zero,-25248(gp)
   PRE_g107 = 0;
  800a34:	d0277f85 	stb	zero,-25090(gp)
   PRE_g109 = 0;
  800a38:	d0276785 	stb	zero,-25186(gp)
   PRE_g114 = 0;
  800a3c:	d0275c05 	stb	zero,-25232(gp)
   PRE_g116 = 0;
  800a40:	d0276c45 	stb	zero,-25167(gp)
   PRE_g121 = 0;
  800a44:	d0275f05 	stb	zero,-25220(gp)
   PRE_g123 = 0;
  800a48:	d0276d45 	stb	zero,-25163(gp)
   PRE_g128 = 0;
  800a4c:	d0275a05 	stb	zero,-25240(gp)
   PRE_g130 = 0;
  800a50:	d0278605 	stb	zero,-25064(gp)
   PRE_g136 = 0;
  800a54:	d0276985 	stb	zero,-25178(gp)
   return;
  800a58:	0001883a 	nop
}
  800a5c:	e037883a 	mov	sp,fp
  800a60:	df000017 	ldw	fp,0(sp)
  800a64:	dec00104 	addi	sp,sp,4
  800a68:	f800283a 	ret

00800a6c <tick>:
void tick(){
  800a6c:	deffff04 	addi	sp,sp,-4
  800a70:	df000015 	stw	fp,0(sp)
  800a74:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  800a78:	d0a75d17 	ldw	r2,-25228(gp)
  800a7c:	10800058 	cmpnei	r2,r2,1
  800a80:	1000011e 	bne	r2,zero,800a88 <tick+0x1c>
      _GO = 0;
  800a84:	d0277dc5 	stb	zero,-25097(gp)
   }
   {
      g0 = _GO;
  800a88:	d0a77dc3 	ldbu	r2,-25097(gp)
  800a8c:	d0a78c05 	stb	r2,-25040(gp)
      g1 = g0;
  800a90:	d0a78c03 	ldbu	r2,-25040(gp)
  800a94:	d0a76145 	stb	r2,-25211(gp)
      g2 = g1;
  800a98:	d0a76143 	ldbu	r2,-25211(gp)
  800a9c:	d0a77185 	stb	r2,-25146(gp)
      g135 = g0;
  800aa0:	d0a78c03 	ldbu	r2,-25040(gp)
  800aa4:	d0a76245 	stb	r2,-25207(gp)
      g137 =(PRE_g136);
  800aa8:	d0a76983 	ldbu	r2,-25178(gp)
  800aac:	d0a78b45 	stb	r2,-25043(gp)
      g136 =(g135||g137);
  800ab0:	d0a76243 	ldbu	r2,-25207(gp)
  800ab4:	10803fcc 	andi	r2,r2,255
  800ab8:	1080201c 	xori	r2,r2,128
  800abc:	10bfe004 	addi	r2,r2,-128
  800ac0:	1000051e 	bne	r2,zero,800ad8 <tick+0x6c>
  800ac4:	d0a78b43 	ldbu	r2,-25043(gp)
  800ac8:	10803fcc 	andi	r2,r2,255
  800acc:	1080201c 	xori	r2,r2,128
  800ad0:	10bfe004 	addi	r2,r2,-128
  800ad4:	10000226 	beq	r2,zero,800ae0 <tick+0x74>
  800ad8:	00800044 	movi	r2,1
  800adc:	00000106 	br	800ae4 <tick+0x78>
  800ae0:	0005883a 	mov	r2,zero
  800ae4:	d0a77445 	stb	r2,-25135(gp)
      if(g136){
  800ae8:	d0a77443 	ldbu	r2,-25135(gp)
  800aec:	10803fcc 	andi	r2,r2,255
  800af0:	1080201c 	xori	r2,r2,128
  800af4:	10bfe004 	addi	r2,r2,-128
  800af8:	10001626 	beq	r2,zero,800b54 <tick+0xe8>
         stop_URI = 0;
  800afc:	d0277bc5 	stb	zero,-25105(gp)
         stop_VRP = 0;
  800b00:	d0279185 	stb	zero,-25018(gp)
         stop_PVARP = 0;
  800b04:	d0278d85 	stb	zero,-25034(gp)
         stop_AVI = 0;
  800b08:	d0276e85 	stb	zero,-25158(gp)
         start_AVI = 0;
  800b0c:	d0276e45 	stb	zero,-25159(gp)
         stop_LRI = 0;
  800b10:	d02795c5 	stb	zero,-25001(gp)
         stop_AEI = 0;
  800b14:	d0277485 	stb	zero,-25134(gp)
         Vpace = 0;
  800b18:	d0276105 	stb	zero,-25212(gp)
         start_PVARP = 0;
  800b1c:	d0277e85 	stb	zero,-25094(gp)
         start_AEI = 0;
  800b20:	d0278245 	stb	zero,-25079(gp)
         Apace = 0;
  800b24:	d0277805 	stb	zero,-25120(gp)
         start_VRP = 0;
  800b28:	d02768c5 	stb	zero,-25181(gp)
         start_LRI = 0;
  800b2c:	d02783c5 	stb	zero,-25073(gp)
         start_URI = 0;
  800b30:	d02787c5 	stb	zero,-25057(gp)
         AVI_counting = 0;
  800b34:	d0279905 	stb	zero,-24988(gp)
         PVARP_counting = 0;
  800b38:	d0276a85 	stb	zero,-25174(gp)
         VRP_counting = 0;
  800b3c:	d0277b85 	stb	zero,-25106(gp)
         AEI_counting = 0;
  800b40:	d0277785 	stb	zero,-25122(gp)
         LRI_counting = 0;
  800b44:	d0276d85 	stb	zero,-25162(gp)
         URI_counting = 0;
  800b48:	d0276c05 	stb	zero,-25168(gp)
         AR = 0;
  800b4c:	d0278845 	stb	zero,-25055(gp)
         VR = 0;
  800b50:	d0276b05 	stb	zero,-25172(gp)
      }
      g9 =(PRE_g8);
  800b54:	d0a76903 	ldbu	r2,-25180(gp)
  800b58:	d0a75c45 	stb	r2,-25231(gp)
      _cg9 = AVI_ex;
  800b5c:	d0a77843 	ldbu	r2,-25119(gp)
  800b60:	d0a78b05 	stb	r2,-25044(gp)
      g14 =(g9&&(!(_cg9)));
  800b64:	d0a75c43 	ldbu	r2,-25231(gp)
  800b68:	10803fcc 	andi	r2,r2,255
  800b6c:	1080201c 	xori	r2,r2,128
  800b70:	10bfe004 	addi	r2,r2,-128
  800b74:	10000726 	beq	r2,zero,800b94 <tick+0x128>
  800b78:	d0a78b03 	ldbu	r2,-25044(gp)
  800b7c:	10803fcc 	andi	r2,r2,255
  800b80:	1080201c 	xori	r2,r2,128
  800b84:	10bfe004 	addi	r2,r2,-128
  800b88:	1000021e 	bne	r2,zero,800b94 <tick+0x128>
  800b8c:	00800044 	movi	r2,1
  800b90:	00000106 	br	800b98 <tick+0x12c>
  800b94:	0005883a 	mov	r2,zero
  800b98:	d0a77745 	stb	r2,-25123(gp)
      _cg14 = Vsense;
  800b9c:	d0a77503 	ldbu	r2,-25132(gp)
  800ba0:	d0a76f85 	stb	r2,-25154(gp)
      g15 =(g14&&_cg14);
  800ba4:	d0a77743 	ldbu	r2,-25123(gp)
  800ba8:	10803fcc 	andi	r2,r2,255
  800bac:	1080201c 	xori	r2,r2,128
  800bb0:	10bfe004 	addi	r2,r2,-128
  800bb4:	10000726 	beq	r2,zero,800bd4 <tick+0x168>
  800bb8:	d0a76f83 	ldbu	r2,-25154(gp)
  800bbc:	10803fcc 	andi	r2,r2,255
  800bc0:	1080201c 	xori	r2,r2,128
  800bc4:	10bfe004 	addi	r2,r2,-128
  800bc8:	10000226 	beq	r2,zero,800bd4 <tick+0x168>
  800bcc:	00800044 	movi	r2,1
  800bd0:	00000106 	br	800bd8 <tick+0x16c>
  800bd4:	0005883a 	mov	r2,zero
  800bd8:	d0a77d45 	stb	r2,-25099(gp)
      if(g15){
  800bdc:	d0a77d43 	ldbu	r2,-25099(gp)
  800be0:	10803fcc 	andi	r2,r2,255
  800be4:	1080201c 	xori	r2,r2,128
  800be8:	10bfe004 	addi	r2,r2,-128
  800bec:	10000226 	beq	r2,zero,800bf8 <tick+0x18c>
         stop_AVI =(stop_AVI||1);
  800bf0:	00800044 	movi	r2,1
  800bf4:	d0a76e85 	stb	r2,-25158(gp)
      }
      g124 =(PRE_g123);
  800bf8:	d0a76d43 	ldbu	r2,-25163(gp)
  800bfc:	d0a78a85 	stb	r2,-25046(gp)
      _cg124 = URI_ex;
  800c00:	d0a77ac3 	ldbu	r2,-25109(gp)
  800c04:	d0a77405 	stb	r2,-25136(gp)
      g125 =(g124&&(!(_cg124)));
  800c08:	d0a78a83 	ldbu	r2,-25046(gp)
  800c0c:	10803fcc 	andi	r2,r2,255
  800c10:	1080201c 	xori	r2,r2,128
  800c14:	10bfe004 	addi	r2,r2,-128
  800c18:	10000726 	beq	r2,zero,800c38 <tick+0x1cc>
  800c1c:	d0a77403 	ldbu	r2,-25136(gp)
  800c20:	10803fcc 	andi	r2,r2,255
  800c24:	1080201c 	xori	r2,r2,128
  800c28:	10bfe004 	addi	r2,r2,-128
  800c2c:	1000021e 	bne	r2,zero,800c38 <tick+0x1cc>
  800c30:	00800044 	movi	r2,1
  800c34:	00000106 	br	800c3c <tick+0x1d0>
  800c38:	0005883a 	mov	r2,zero
  800c3c:	d0a79245 	stb	r2,-25015(gp)
      if(g125){
  800c40:	d0a79243 	ldbu	r2,-25015(gp)
  800c44:	10803fcc 	andi	r2,r2,255
  800c48:	1080201c 	xori	r2,r2,128
  800c4c:	10bfe004 	addi	r2,r2,-128
  800c50:	10000226 	beq	r2,zero,800c5c <tick+0x1f0>
         URI_counting =(URI_counting||1);
  800c54:	00800044 	movi	r2,1
  800c58:	d0a76c05 	stb	r2,-25168(gp)
      }
      g13 =(PRE_g12);
  800c5c:	d0a76fc3 	ldbu	r2,-25153(gp)
  800c60:	d0a78645 	stb	r2,-25063(gp)
      g10 =(g13||(g9&&_cg9));
  800c64:	d0a78643 	ldbu	r2,-25063(gp)
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	1080201c 	xori	r2,r2,128
  800c70:	10bfe004 	addi	r2,r2,-128
  800c74:	10000a1e 	bne	r2,zero,800ca0 <tick+0x234>
  800c78:	d0a75c43 	ldbu	r2,-25231(gp)
  800c7c:	10803fcc 	andi	r2,r2,255
  800c80:	1080201c 	xori	r2,r2,128
  800c84:	10bfe004 	addi	r2,r2,-128
  800c88:	10000726 	beq	r2,zero,800ca8 <tick+0x23c>
  800c8c:	d0a78b03 	ldbu	r2,-25044(gp)
  800c90:	10803fcc 	andi	r2,r2,255
  800c94:	1080201c 	xori	r2,r2,128
  800c98:	10bfe004 	addi	r2,r2,-128
  800c9c:	10000226 	beq	r2,zero,800ca8 <tick+0x23c>
  800ca0:	00800044 	movi	r2,1
  800ca4:	00000106 	br	800cac <tick+0x240>
  800ca8:	0005883a 	mov	r2,zero
  800cac:	d0a79a05 	stb	r2,-24984(gp)
      _cg10 =(!(URI_counting));
  800cb0:	d0a76c03 	ldbu	r2,-25168(gp)
  800cb4:	10803fcc 	andi	r2,r2,255
  800cb8:	1080201c 	xori	r2,r2,128
  800cbc:	10bfe004 	addi	r2,r2,-128
  800cc0:	1005003a 	cmpeq	r2,r2,zero
  800cc4:	d0a77fc5 	stb	r2,-25089(gp)
      g11 =(g10&&_cg10);
  800cc8:	d0a79a03 	ldbu	r2,-24984(gp)
  800ccc:	10803fcc 	andi	r2,r2,255
  800cd0:	1080201c 	xori	r2,r2,128
  800cd4:	10bfe004 	addi	r2,r2,-128
  800cd8:	10000726 	beq	r2,zero,800cf8 <tick+0x28c>
  800cdc:	d0a77fc3 	ldbu	r2,-25089(gp)
  800ce0:	10803fcc 	andi	r2,r2,255
  800ce4:	1080201c 	xori	r2,r2,128
  800ce8:	10bfe004 	addi	r2,r2,-128
  800cec:	10000226 	beq	r2,zero,800cf8 <tick+0x28c>
  800cf0:	00800044 	movi	r2,1
  800cf4:	00000106 	br	800cfc <tick+0x290>
  800cf8:	0005883a 	mov	r2,zero
  800cfc:	d0a79005 	stb	r2,-25024(gp)
      if(g11){
  800d00:	d0a79003 	ldbu	r2,-25024(gp)
  800d04:	10803fcc 	andi	r2,r2,255
  800d08:	1080201c 	xori	r2,r2,128
  800d0c:	10bfe004 	addi	r2,r2,-128
  800d10:	10000226 	beq	r2,zero,800d1c <tick+0x2b0>
         Vpace =(Vpace||1);
  800d14:	00800044 	movi	r2,1
  800d18:	d0a76105 	stb	r2,-25212(gp)
      }
      g67 =(PRE_g66);
  800d1c:	d0a78dc3 	ldbu	r2,-25033(gp)
  800d20:	d0a797c5 	stb	r2,-24993(gp)
      _cg67 = LRI_ex;
  800d24:	d0a77303 	ldbu	r2,-25140(gp)
  800d28:	d0a79945 	stb	r2,-24987(gp)
      g68 =(g67&&_cg67);
  800d2c:	d0a797c3 	ldbu	r2,-24993(gp)
  800d30:	10803fcc 	andi	r2,r2,255
  800d34:	1080201c 	xori	r2,r2,128
  800d38:	10bfe004 	addi	r2,r2,-128
  800d3c:	10000726 	beq	r2,zero,800d5c <tick+0x2f0>
  800d40:	d0a79943 	ldbu	r2,-24987(gp)
  800d44:	10803fcc 	andi	r2,r2,255
  800d48:	1080201c 	xori	r2,r2,128
  800d4c:	10bfe004 	addi	r2,r2,-128
  800d50:	10000226 	beq	r2,zero,800d5c <tick+0x2f0>
  800d54:	00800044 	movi	r2,1
  800d58:	00000106 	br	800d60 <tick+0x2f4>
  800d5c:	0005883a 	mov	r2,zero
  800d60:	d0a78f45 	stb	r2,-25027(gp)
      if(g68){
  800d64:	d0a78f43 	ldbu	r2,-25027(gp)
  800d68:	10803fcc 	andi	r2,r2,255
  800d6c:	1080201c 	xori	r2,r2,128
  800d70:	10bfe004 	addi	r2,r2,-128
  800d74:	10000226 	beq	r2,zero,800d80 <tick+0x314>
         Vpace =(Vpace||1);
  800d78:	00800044 	movi	r2,1
  800d7c:	d0a76105 	stb	r2,-25212(gp)
      }
      g16 =(g14&&(!(_cg14)));
  800d80:	d0a77743 	ldbu	r2,-25123(gp)
  800d84:	10803fcc 	andi	r2,r2,255
  800d88:	1080201c 	xori	r2,r2,128
  800d8c:	10bfe004 	addi	r2,r2,-128
  800d90:	10000726 	beq	r2,zero,800db0 <tick+0x344>
  800d94:	d0a76f83 	ldbu	r2,-25154(gp)
  800d98:	10803fcc 	andi	r2,r2,255
  800d9c:	1080201c 	xori	r2,r2,128
  800da0:	10bfe004 	addi	r2,r2,-128
  800da4:	1000021e 	bne	r2,zero,800db0 <tick+0x344>
  800da8:	00800044 	movi	r2,1
  800dac:	00000106 	br	800db4 <tick+0x348>
  800db0:	0005883a 	mov	r2,zero
  800db4:	d0a78e45 	stb	r2,-25031(gp)
      _cg16 = Vpace;
  800db8:	d0a76103 	ldbu	r2,-25212(gp)
  800dbc:	d0a77285 	stb	r2,-25142(gp)
      g17 =(g16&&_cg16);
  800dc0:	d0a78e43 	ldbu	r2,-25031(gp)
  800dc4:	10803fcc 	andi	r2,r2,255
  800dc8:	1080201c 	xori	r2,r2,128
  800dcc:	10bfe004 	addi	r2,r2,-128
  800dd0:	10000726 	beq	r2,zero,800df0 <tick+0x384>
  800dd4:	d0a77283 	ldbu	r2,-25142(gp)
  800dd8:	10803fcc 	andi	r2,r2,255
  800ddc:	1080201c 	xori	r2,r2,128
  800de0:	10bfe004 	addi	r2,r2,-128
  800de4:	10000226 	beq	r2,zero,800df0 <tick+0x384>
  800de8:	00800044 	movi	r2,1
  800dec:	00000106 	br	800df4 <tick+0x388>
  800df0:	0005883a 	mov	r2,zero
  800df4:	d0a76585 	stb	r2,-25194(gp)
      if(g17){
  800df8:	d0a76583 	ldbu	r2,-25194(gp)
  800dfc:	10803fcc 	andi	r2,r2,255
  800e00:	1080201c 	xori	r2,r2,128
  800e04:	10bfe004 	addi	r2,r2,-128
  800e08:	10000226 	beq	r2,zero,800e14 <tick+0x3a8>
         stop_AVI =(stop_AVI||1);
  800e0c:	00800044 	movi	r2,1
  800e10:	d0a76e85 	stb	r2,-25158(gp)
      }
      g4 =(PRE_g3);
  800e14:	d0a75e03 	ldbu	r2,-25224(gp)
  800e18:	d0a756c5 	stb	r2,-25253(gp)
      _cg4 = PVARP_ex;
  800e1c:	d0a78a43 	ldbu	r2,-25047(gp)
  800e20:	d0a79785 	stb	r2,-24994(gp)
      g3 =(g15||g2||g11||g17||(g4&&(!(_cg4))));
  800e24:	d0a77d43 	ldbu	r2,-25099(gp)
  800e28:	10803fcc 	andi	r2,r2,255
  800e2c:	1080201c 	xori	r2,r2,128
  800e30:	10bfe004 	addi	r2,r2,-128
  800e34:	1000191e 	bne	r2,zero,800e9c <tick+0x430>
  800e38:	d0a77183 	ldbu	r2,-25146(gp)
  800e3c:	10803fcc 	andi	r2,r2,255
  800e40:	1080201c 	xori	r2,r2,128
  800e44:	10bfe004 	addi	r2,r2,-128
  800e48:	1000141e 	bne	r2,zero,800e9c <tick+0x430>
  800e4c:	d0a79003 	ldbu	r2,-25024(gp)
  800e50:	10803fcc 	andi	r2,r2,255
  800e54:	1080201c 	xori	r2,r2,128
  800e58:	10bfe004 	addi	r2,r2,-128
  800e5c:	10000f1e 	bne	r2,zero,800e9c <tick+0x430>
  800e60:	d0a76583 	ldbu	r2,-25194(gp)
  800e64:	10803fcc 	andi	r2,r2,255
  800e68:	1080201c 	xori	r2,r2,128
  800e6c:	10bfe004 	addi	r2,r2,-128
  800e70:	10000a1e 	bne	r2,zero,800e9c <tick+0x430>
  800e74:	d0a756c3 	ldbu	r2,-25253(gp)
  800e78:	10803fcc 	andi	r2,r2,255
  800e7c:	1080201c 	xori	r2,r2,128
  800e80:	10bfe004 	addi	r2,r2,-128
  800e84:	10000726 	beq	r2,zero,800ea4 <tick+0x438>
  800e88:	d0a79783 	ldbu	r2,-24994(gp)
  800e8c:	10803fcc 	andi	r2,r2,255
  800e90:	1080201c 	xori	r2,r2,128
  800e94:	10bfe004 	addi	r2,r2,-128
  800e98:	1000021e 	bne	r2,zero,800ea4 <tick+0x438>
  800e9c:	00800044 	movi	r2,1
  800ea0:	00000106 	br	800ea8 <tick+0x43c>
  800ea4:	0005883a 	mov	r2,zero
  800ea8:	d0a75a45 	stb	r2,-25239(gp)
      g27 =(PRE_g26);
  800eac:	d0a79303 	ldbu	r2,-25012(gp)
  800eb0:	d0a75945 	stb	r2,-25243(gp)
      _cg27 = Asense;
  800eb4:	d0a78b83 	ldbu	r2,-25042(gp)
  800eb8:	d0a79a85 	stb	r2,-24982(gp)
      g29 =(g27&&(!(_cg27)));
  800ebc:	d0a75943 	ldbu	r2,-25243(gp)
  800ec0:	10803fcc 	andi	r2,r2,255
  800ec4:	1080201c 	xori	r2,r2,128
  800ec8:	10bfe004 	addi	r2,r2,-128
  800ecc:	10000726 	beq	r2,zero,800eec <tick+0x480>
  800ed0:	d0a79a83 	ldbu	r2,-24982(gp)
  800ed4:	10803fcc 	andi	r2,r2,255
  800ed8:	1080201c 	xori	r2,r2,128
  800edc:	10bfe004 	addi	r2,r2,-128
  800ee0:	1000021e 	bne	r2,zero,800eec <tick+0x480>
  800ee4:	00800044 	movi	r2,1
  800ee8:	00000106 	br	800ef0 <tick+0x484>
  800eec:	0005883a 	mov	r2,zero
  800ef0:	d0a79745 	stb	r2,-24995(gp)
      _cg29 = AEI_ex;
  800ef4:	d0a75a83 	ldbu	r2,-25238(gp)
  800ef8:	d0a77b45 	stb	r2,-25107(gp)
      g30 =(g29&&_cg29);
  800efc:	d0a79743 	ldbu	r2,-24995(gp)
  800f00:	10803fcc 	andi	r2,r2,255
  800f04:	1080201c 	xori	r2,r2,128
  800f08:	10bfe004 	addi	r2,r2,-128
  800f0c:	10000726 	beq	r2,zero,800f2c <tick+0x4c0>
  800f10:	d0a77b43 	ldbu	r2,-25107(gp)
  800f14:	10803fcc 	andi	r2,r2,255
  800f18:	1080201c 	xori	r2,r2,128
  800f1c:	10bfe004 	addi	r2,r2,-128
  800f20:	10000226 	beq	r2,zero,800f2c <tick+0x4c0>
  800f24:	00800044 	movi	r2,1
  800f28:	00000106 	br	800f30 <tick+0x4c4>
  800f2c:	0005883a 	mov	r2,zero
  800f30:	d0a78cc5 	stb	r2,-25037(gp)
      if(g30){
  800f34:	d0a78cc3 	ldbu	r2,-25037(gp)
  800f38:	10803fcc 	andi	r2,r2,255
  800f3c:	1080201c 	xori	r2,r2,128
  800f40:	10bfe004 	addi	r2,r2,-128
  800f44:	10000226 	beq	r2,zero,800f50 <tick+0x4e4>
         Apace =(Apace||1);
  800f48:	00800044 	movi	r2,1
  800f4c:	d0a77805 	stb	r2,-25120(gp)
      }
      g6 =(PRE_g5);
  800f50:	d0a79583 	ldbu	r2,-25002(gp)
  800f54:	d0a788c5 	stb	r2,-25053(gp)
      _cg6 = Asense;
  800f58:	d0a78b83 	ldbu	r2,-25042(gp)
  800f5c:	d0a777c5 	stb	r2,-25121(gp)
      g18 =(g6&&(!(_cg6)));
  800f60:	d0a788c3 	ldbu	r2,-25053(gp)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080201c 	xori	r2,r2,128
  800f6c:	10bfe004 	addi	r2,r2,-128
  800f70:	10000726 	beq	r2,zero,800f90 <tick+0x524>
  800f74:	d0a777c3 	ldbu	r2,-25121(gp)
  800f78:	10803fcc 	andi	r2,r2,255
  800f7c:	1080201c 	xori	r2,r2,128
  800f80:	10bfe004 	addi	r2,r2,-128
  800f84:	1000021e 	bne	r2,zero,800f90 <tick+0x524>
  800f88:	00800044 	movi	r2,1
  800f8c:	00000106 	br	800f94 <tick+0x528>
  800f90:	0005883a 	mov	r2,zero
  800f94:	d0a769c5 	stb	r2,-25177(gp)
      _cg18 = Apace;
  800f98:	d0a77803 	ldbu	r2,-25120(gp)
  800f9c:	d0a79485 	stb	r2,-25006(gp)
      g5 =((g18&&(!(_cg18)))||(g4&&_cg4));
  800fa0:	d0a769c3 	ldbu	r2,-25177(gp)
  800fa4:	10803fcc 	andi	r2,r2,255
  800fa8:	1080201c 	xori	r2,r2,128
  800fac:	10bfe004 	addi	r2,r2,-128
  800fb0:	10000526 	beq	r2,zero,800fc8 <tick+0x55c>
  800fb4:	d0a79483 	ldbu	r2,-25006(gp)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	10000a26 	beq	r2,zero,800ff0 <tick+0x584>
  800fc8:	d0a756c3 	ldbu	r2,-25253(gp)
  800fcc:	10803fcc 	andi	r2,r2,255
  800fd0:	1080201c 	xori	r2,r2,128
  800fd4:	10bfe004 	addi	r2,r2,-128
  800fd8:	10000726 	beq	r2,zero,800ff8 <tick+0x58c>
  800fdc:	d0a79783 	ldbu	r2,-24994(gp)
  800fe0:	10803fcc 	andi	r2,r2,255
  800fe4:	1080201c 	xori	r2,r2,128
  800fe8:	10bfe004 	addi	r2,r2,-128
  800fec:	10000226 	beq	r2,zero,800ff8 <tick+0x58c>
  800ff0:	00800044 	movi	r2,1
  800ff4:	00000106 	br	800ffc <tick+0x590>
  800ff8:	0005883a 	mov	r2,zero
  800ffc:	d0a77085 	stb	r2,-25150(gp)
      g7 =((g18&&_cg18)||(g6&&_cg6));
  801000:	d0a769c3 	ldbu	r2,-25177(gp)
  801004:	10803fcc 	andi	r2,r2,255
  801008:	1080201c 	xori	r2,r2,128
  80100c:	10bfe004 	addi	r2,r2,-128
  801010:	10000526 	beq	r2,zero,801028 <tick+0x5bc>
  801014:	d0a79483 	ldbu	r2,-25006(gp)
  801018:	10803fcc 	andi	r2,r2,255
  80101c:	1080201c 	xori	r2,r2,128
  801020:	10bfe004 	addi	r2,r2,-128
  801024:	10000a1e 	bne	r2,zero,801050 <tick+0x5e4>
  801028:	d0a788c3 	ldbu	r2,-25053(gp)
  80102c:	10803fcc 	andi	r2,r2,255
  801030:	1080201c 	xori	r2,r2,128
  801034:	10bfe004 	addi	r2,r2,-128
  801038:	10000726 	beq	r2,zero,801058 <tick+0x5ec>
  80103c:	d0a777c3 	ldbu	r2,-25121(gp)
  801040:	10803fcc 	andi	r2,r2,255
  801044:	1080201c 	xori	r2,r2,128
  801048:	10bfe004 	addi	r2,r2,-128
  80104c:	10000226 	beq	r2,zero,801058 <tick+0x5ec>
  801050:	00800044 	movi	r2,1
  801054:	00000106 	br	80105c <tick+0x5f0>
  801058:	0005883a 	mov	r2,zero
  80105c:	d0a77205 	stb	r2,-25144(gp)
      if(g7){
  801060:	d0a77203 	ldbu	r2,-25144(gp)
  801064:	10803fcc 	andi	r2,r2,255
  801068:	1080201c 	xori	r2,r2,128
  80106c:	10bfe004 	addi	r2,r2,-128
  801070:	10000226 	beq	r2,zero,80107c <tick+0x610>
         start_AVI =(start_AVI||1);
  801074:	00800044 	movi	r2,1
  801078:	d0a76e45 	stb	r2,-25159(gp)
      }
      g8 =(g7||(g16&&(!(_cg16))));
  80107c:	d0a77203 	ldbu	r2,-25144(gp)
  801080:	10803fcc 	andi	r2,r2,255
  801084:	1080201c 	xori	r2,r2,128
  801088:	10bfe004 	addi	r2,r2,-128
  80108c:	10000a1e 	bne	r2,zero,8010b8 <tick+0x64c>
  801090:	d0a78e43 	ldbu	r2,-25031(gp)
  801094:	10803fcc 	andi	r2,r2,255
  801098:	1080201c 	xori	r2,r2,128
  80109c:	10bfe004 	addi	r2,r2,-128
  8010a0:	10000726 	beq	r2,zero,8010c0 <tick+0x654>
  8010a4:	d0a77283 	ldbu	r2,-25142(gp)
  8010a8:	10803fcc 	andi	r2,r2,255
  8010ac:	1080201c 	xori	r2,r2,128
  8010b0:	10bfe004 	addi	r2,r2,-128
  8010b4:	1000021e 	bne	r2,zero,8010c0 <tick+0x654>
  8010b8:	00800044 	movi	r2,1
  8010bc:	00000106 	br	8010c4 <tick+0x658>
  8010c0:	0005883a 	mov	r2,zero
  8010c4:	d0a78705 	stb	r2,-25060(gp)
      g12 =(g10&&(!(_cg10)));
  8010c8:	d0a79a03 	ldbu	r2,-24984(gp)
  8010cc:	10803fcc 	andi	r2,r2,255
  8010d0:	1080201c 	xori	r2,r2,128
  8010d4:	10bfe004 	addi	r2,r2,-128
  8010d8:	10000726 	beq	r2,zero,8010f8 <tick+0x68c>
  8010dc:	d0a77fc3 	ldbu	r2,-25089(gp)
  8010e0:	10803fcc 	andi	r2,r2,255
  8010e4:	1080201c 	xori	r2,r2,128
  8010e8:	10bfe004 	addi	r2,r2,-128
  8010ec:	1000021e 	bne	r2,zero,8010f8 <tick+0x68c>
  8010f0:	00800044 	movi	r2,1
  8010f4:	00000106 	br	8010fc <tick+0x690>
  8010f8:	0005883a 	mov	r2,zero
  8010fc:	d0a76405 	stb	r2,-25200(gp)
      g20 = g1;
  801100:	d0a76143 	ldbu	r2,-25211(gp)
  801104:	d0a77f05 	stb	r2,-25092(gp)
      g28 =(g27&&_cg27);
  801108:	d0a75943 	ldbu	r2,-25243(gp)
  80110c:	10803fcc 	andi	r2,r2,255
  801110:	1080201c 	xori	r2,r2,128
  801114:	10bfe004 	addi	r2,r2,-128
  801118:	10000726 	beq	r2,zero,801138 <tick+0x6cc>
  80111c:	d0a79a83 	ldbu	r2,-24982(gp)
  801120:	10803fcc 	andi	r2,r2,255
  801124:	1080201c 	xori	r2,r2,128
  801128:	10bfe004 	addi	r2,r2,-128
  80112c:	10000226 	beq	r2,zero,801138 <tick+0x6cc>
  801130:	00800044 	movi	r2,1
  801134:	00000106 	br	80113c <tick+0x6d0>
  801138:	0005883a 	mov	r2,zero
  80113c:	d0a79105 	stb	r2,-25020(gp)
      if(g28){
  801140:	d0a79103 	ldbu	r2,-25020(gp)
  801144:	10803fcc 	andi	r2,r2,255
  801148:	1080201c 	xori	r2,r2,128
  80114c:	10bfe004 	addi	r2,r2,-128
  801150:	10000226 	beq	r2,zero,80115c <tick+0x6f0>
         stop_AEI =(stop_AEI||1);
  801154:	00800044 	movi	r2,1
  801158:	d0a77485 	stb	r2,-25134(gp)
      }
      g22 =(PRE_g21);
  80115c:	d0a78e03 	ldbu	r2,-25032(gp)
  801160:	d0a79085 	stb	r2,-25022(gp)
      g22b = g22;
  801164:	d0a79083 	ldbu	r2,-25022(gp)
  801168:	d0a76ec5 	stb	r2,-25157(gp)
      _cg22 = Vpace;
  80116c:	d0a76103 	ldbu	r2,-25212(gp)
  801170:	d0a78045 	stb	r2,-25087(gp)
      g31 =(g22b&&(!(_cg22)));
  801174:	d0a76ec3 	ldbu	r2,-25157(gp)
  801178:	10803fcc 	andi	r2,r2,255
  80117c:	1080201c 	xori	r2,r2,128
  801180:	10bfe004 	addi	r2,r2,-128
  801184:	10000726 	beq	r2,zero,8011a4 <tick+0x738>
  801188:	d0a78043 	ldbu	r2,-25087(gp)
  80118c:	10803fcc 	andi	r2,r2,255
  801190:	1080201c 	xori	r2,r2,128
  801194:	10bfe004 	addi	r2,r2,-128
  801198:	1000021e 	bne	r2,zero,8011a4 <tick+0x738>
  80119c:	00800044 	movi	r2,1
  8011a0:	00000106 	br	8011a8 <tick+0x73c>
  8011a4:	0005883a 	mov	r2,zero
  8011a8:	d0a766c5 	stb	r2,-25189(gp)
      _cg31 = Vsense;
  8011ac:	d0a77503 	ldbu	r2,-25132(gp)
  8011b0:	d0a799c5 	stb	r2,-24985(gp)
      g21 =(g30||g28||g20||(g31&&(!(_cg31))));
  8011b4:	d0a78cc3 	ldbu	r2,-25037(gp)
  8011b8:	10803fcc 	andi	r2,r2,255
  8011bc:	1080201c 	xori	r2,r2,128
  8011c0:	10bfe004 	addi	r2,r2,-128
  8011c4:	1000141e 	bne	r2,zero,801218 <tick+0x7ac>
  8011c8:	d0a79103 	ldbu	r2,-25020(gp)
  8011cc:	10803fcc 	andi	r2,r2,255
  8011d0:	1080201c 	xori	r2,r2,128
  8011d4:	10bfe004 	addi	r2,r2,-128
  8011d8:	10000f1e 	bne	r2,zero,801218 <tick+0x7ac>
  8011dc:	d0a77f03 	ldbu	r2,-25092(gp)
  8011e0:	10803fcc 	andi	r2,r2,255
  8011e4:	1080201c 	xori	r2,r2,128
  8011e8:	10bfe004 	addi	r2,r2,-128
  8011ec:	10000a1e 	bne	r2,zero,801218 <tick+0x7ac>
  8011f0:	d0a766c3 	ldbu	r2,-25189(gp)
  8011f4:	10803fcc 	andi	r2,r2,255
  8011f8:	1080201c 	xori	r2,r2,128
  8011fc:	10bfe004 	addi	r2,r2,-128
  801200:	10000726 	beq	r2,zero,801220 <tick+0x7b4>
  801204:	d0a799c3 	ldbu	r2,-24985(gp)
  801208:	10803fcc 	andi	r2,r2,255
  80120c:	1080201c 	xori	r2,r2,128
  801210:	10bfe004 	addi	r2,r2,-128
  801214:	1000021e 	bne	r2,zero,801220 <tick+0x7b4>
  801218:	00800044 	movi	r2,1
  80121c:	00000106 	br	801224 <tick+0x7b8>
  801220:	0005883a 	mov	r2,zero
  801224:	d0a76f45 	stb	r2,-25155(gp)
      g23 =((g31&&_cg31)||(g22b&&_cg22));
  801228:	d0a766c3 	ldbu	r2,-25189(gp)
  80122c:	10803fcc 	andi	r2,r2,255
  801230:	1080201c 	xori	r2,r2,128
  801234:	10bfe004 	addi	r2,r2,-128
  801238:	10000526 	beq	r2,zero,801250 <tick+0x7e4>
  80123c:	d0a799c3 	ldbu	r2,-24985(gp)
  801240:	10803fcc 	andi	r2,r2,255
  801244:	1080201c 	xori	r2,r2,128
  801248:	10bfe004 	addi	r2,r2,-128
  80124c:	10000a1e 	bne	r2,zero,801278 <tick+0x80c>
  801250:	d0a76ec3 	ldbu	r2,-25157(gp)
  801254:	10803fcc 	andi	r2,r2,255
  801258:	1080201c 	xori	r2,r2,128
  80125c:	10bfe004 	addi	r2,r2,-128
  801260:	10000726 	beq	r2,zero,801280 <tick+0x814>
  801264:	d0a78043 	ldbu	r2,-25087(gp)
  801268:	10803fcc 	andi	r2,r2,255
  80126c:	1080201c 	xori	r2,r2,128
  801270:	10bfe004 	addi	r2,r2,-128
  801274:	10000226 	beq	r2,zero,801280 <tick+0x814>
  801278:	00800044 	movi	r2,1
  80127c:	00000106 	br	801284 <tick+0x818>
  801280:	0005883a 	mov	r2,zero
  801284:	d0a77645 	stb	r2,-25127(gp)
      if(g23){
  801288:	d0a77643 	ldbu	r2,-25127(gp)
  80128c:	10803fcc 	andi	r2,r2,255
  801290:	1080201c 	xori	r2,r2,128
  801294:	10bfe004 	addi	r2,r2,-128
  801298:	10000226 	beq	r2,zero,8012a4 <tick+0x838>
         start_AEI =(start_AEI||1);
  80129c:	00800044 	movi	r2,1
  8012a0:	d0a78245 	stb	r2,-25079(gp)
      }
      g25 =(PRE_g24);
  8012a4:	d0a763c3 	ldbu	r2,-25201(gp)
  8012a8:	d0a78f85 	stb	r2,-25026(gp)
      _cg25 = PVARP_ex;
  8012ac:	d0a78a43 	ldbu	r2,-25047(gp)
  8012b0:	d0a77b05 	stb	r2,-25108(gp)
      g24 =((g25&&(!(_cg25)))||g23);
  8012b4:	d0a78f83 	ldbu	r2,-25026(gp)
  8012b8:	10803fcc 	andi	r2,r2,255
  8012bc:	1080201c 	xori	r2,r2,128
  8012c0:	10bfe004 	addi	r2,r2,-128
  8012c4:	10000526 	beq	r2,zero,8012dc <tick+0x870>
  8012c8:	d0a77b03 	ldbu	r2,-25108(gp)
  8012cc:	10803fcc 	andi	r2,r2,255
  8012d0:	1080201c 	xori	r2,r2,128
  8012d4:	10bfe004 	addi	r2,r2,-128
  8012d8:	10000526 	beq	r2,zero,8012f0 <tick+0x884>
  8012dc:	d0a77643 	ldbu	r2,-25127(gp)
  8012e0:	10803fcc 	andi	r2,r2,255
  8012e4:	1080201c 	xori	r2,r2,128
  8012e8:	10bfe004 	addi	r2,r2,-128
  8012ec:	10000226 	beq	r2,zero,8012f8 <tick+0x88c>
  8012f0:	00800044 	movi	r2,1
  8012f4:	00000106 	br	8012fc <tick+0x890>
  8012f8:	0005883a 	mov	r2,zero
  8012fc:	d0a79805 	stb	r2,-24992(gp)
      g26 =((g25&&_cg25)||(g29&&(!(_cg29))));
  801300:	d0a78f83 	ldbu	r2,-25026(gp)
  801304:	10803fcc 	andi	r2,r2,255
  801308:	1080201c 	xori	r2,r2,128
  80130c:	10bfe004 	addi	r2,r2,-128
  801310:	10000526 	beq	r2,zero,801328 <tick+0x8bc>
  801314:	d0a77b03 	ldbu	r2,-25108(gp)
  801318:	10803fcc 	andi	r2,r2,255
  80131c:	1080201c 	xori	r2,r2,128
  801320:	10bfe004 	addi	r2,r2,-128
  801324:	10000a1e 	bne	r2,zero,801350 <tick+0x8e4>
  801328:	d0a79743 	ldbu	r2,-24995(gp)
  80132c:	10803fcc 	andi	r2,r2,255
  801330:	1080201c 	xori	r2,r2,128
  801334:	10bfe004 	addi	r2,r2,-128
  801338:	10000726 	beq	r2,zero,801358 <tick+0x8ec>
  80133c:	d0a77b43 	ldbu	r2,-25107(gp)
  801340:	10803fcc 	andi	r2,r2,255
  801344:	1080201c 	xori	r2,r2,128
  801348:	10bfe004 	addi	r2,r2,-128
  80134c:	1000021e 	bne	r2,zero,801358 <tick+0x8ec>
  801350:	00800044 	movi	r2,1
  801354:	00000106 	br	80135c <tick+0x8f0>
  801358:	0005883a 	mov	r2,zero
  80135c:	d0a79b05 	stb	r2,-24980(gp)
      g33 = g1;
  801360:	d0a76143 	ldbu	r2,-25211(gp)
  801364:	d0a77a45 	stb	r2,-25111(gp)
      g40 =(PRE_g39);
  801368:	d0a75ec3 	ldbu	r2,-25221(gp)
  80136c:	d0a755c5 	stb	r2,-25257(gp)
      _cg40 = Vsense;
  801370:	d0a77503 	ldbu	r2,-25132(gp)
  801374:	d0a78d05 	stb	r2,-25036(gp)
      g42 =(g40&&(!(_cg40)));
  801378:	d0a755c3 	ldbu	r2,-25257(gp)
  80137c:	10803fcc 	andi	r2,r2,255
  801380:	1080201c 	xori	r2,r2,128
  801384:	10bfe004 	addi	r2,r2,-128
  801388:	10000726 	beq	r2,zero,8013a8 <tick+0x93c>
  80138c:	d0a78d03 	ldbu	r2,-25036(gp)
  801390:	10803fcc 	andi	r2,r2,255
  801394:	1080201c 	xori	r2,r2,128
  801398:	10bfe004 	addi	r2,r2,-128
  80139c:	1000021e 	bne	r2,zero,8013a8 <tick+0x93c>
  8013a0:	00800044 	movi	r2,1
  8013a4:	00000106 	br	8013ac <tick+0x940>
  8013a8:	0005883a 	mov	r2,zero
  8013ac:	d0a75bc5 	stb	r2,-25233(gp)
      _cg42 = Vpace;
  8013b0:	d0a76103 	ldbu	r2,-25212(gp)
  8013b4:	d0a75545 	stb	r2,-25259(gp)
      g43 =(g42&&(!(_cg42)));
  8013b8:	d0a75bc3 	ldbu	r2,-25233(gp)
  8013bc:	10803fcc 	andi	r2,r2,255
  8013c0:	1080201c 	xori	r2,r2,128
  8013c4:	10bfe004 	addi	r2,r2,-128
  8013c8:	10000726 	beq	r2,zero,8013e8 <tick+0x97c>
  8013cc:	d0a75543 	ldbu	r2,-25259(gp)
  8013d0:	10803fcc 	andi	r2,r2,255
  8013d4:	1080201c 	xori	r2,r2,128
  8013d8:	10bfe004 	addi	r2,r2,-128
  8013dc:	1000021e 	bne	r2,zero,8013e8 <tick+0x97c>
  8013e0:	00800044 	movi	r2,1
  8013e4:	00000106 	br	8013ec <tick+0x980>
  8013e8:	0005883a 	mov	r2,zero
  8013ec:	d0a78105 	stb	r2,-25084(gp)
      _cg43 = PVARP_ex;
  8013f0:	d0a78a43 	ldbu	r2,-25047(gp)
  8013f4:	d0a76e05 	stb	r2,-25160(gp)
      g35 =(PRE_g34);
  8013f8:	d0a76603 	ldbu	r2,-25192(gp)
  8013fc:	d0a77c45 	stb	r2,-25103(gp)
      _cg35 = Vsense;
  801400:	d0a77503 	ldbu	r2,-25132(gp)
  801404:	d0a76545 	stb	r2,-25195(gp)
      g48 =(g35&&(!(_cg35)));
  801408:	d0a77c43 	ldbu	r2,-25103(gp)
  80140c:	10803fcc 	andi	r2,r2,255
  801410:	1080201c 	xori	r2,r2,128
  801414:	10bfe004 	addi	r2,r2,-128
  801418:	10000726 	beq	r2,zero,801438 <tick+0x9cc>
  80141c:	d0a76543 	ldbu	r2,-25195(gp)
  801420:	10803fcc 	andi	r2,r2,255
  801424:	1080201c 	xori	r2,r2,128
  801428:	10bfe004 	addi	r2,r2,-128
  80142c:	1000021e 	bne	r2,zero,801438 <tick+0x9cc>
  801430:	00800044 	movi	r2,1
  801434:	00000106 	br	80143c <tick+0x9d0>
  801438:	0005883a 	mov	r2,zero
  80143c:	d0a76ac5 	stb	r2,-25173(gp)
      _cg48 = Vpace;
  801440:	d0a76103 	ldbu	r2,-25212(gp)
  801444:	d0a77705 	stb	r2,-25124(gp)
      g34 =((g43&&_cg43)||g33||(g48&&(!(_cg48))));
  801448:	d0a78103 	ldbu	r2,-25084(gp)
  80144c:	10803fcc 	andi	r2,r2,255
  801450:	1080201c 	xori	r2,r2,128
  801454:	10bfe004 	addi	r2,r2,-128
  801458:	10000526 	beq	r2,zero,801470 <tick+0xa04>
  80145c:	d0a76e03 	ldbu	r2,-25160(gp)
  801460:	10803fcc 	andi	r2,r2,255
  801464:	1080201c 	xori	r2,r2,128
  801468:	10bfe004 	addi	r2,r2,-128
  80146c:	10000f1e 	bne	r2,zero,8014ac <tick+0xa40>
  801470:	d0a77a43 	ldbu	r2,-25111(gp)
  801474:	10803fcc 	andi	r2,r2,255
  801478:	1080201c 	xori	r2,r2,128
  80147c:	10bfe004 	addi	r2,r2,-128
  801480:	10000a1e 	bne	r2,zero,8014ac <tick+0xa40>
  801484:	d0a76ac3 	ldbu	r2,-25173(gp)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10000726 	beq	r2,zero,8014b4 <tick+0xa48>
  801498:	d0a77703 	ldbu	r2,-25124(gp)
  80149c:	10803fcc 	andi	r2,r2,255
  8014a0:	1080201c 	xori	r2,r2,128
  8014a4:	10bfe004 	addi	r2,r2,-128
  8014a8:	1000021e 	bne	r2,zero,8014b4 <tick+0xa48>
  8014ac:	00800044 	movi	r2,1
  8014b0:	00000106 	br	8014b8 <tick+0xa4c>
  8014b4:	0005883a 	mov	r2,zero
  8014b8:	d0a77045 	stb	r2,-25151(gp)
      g41 =((g40&&_cg40)||(g42&&_cg42));
  8014bc:	d0a755c3 	ldbu	r2,-25257(gp)
  8014c0:	10803fcc 	andi	r2,r2,255
  8014c4:	1080201c 	xori	r2,r2,128
  8014c8:	10bfe004 	addi	r2,r2,-128
  8014cc:	10000526 	beq	r2,zero,8014e4 <tick+0xa78>
  8014d0:	d0a78d03 	ldbu	r2,-25036(gp)
  8014d4:	10803fcc 	andi	r2,r2,255
  8014d8:	1080201c 	xori	r2,r2,128
  8014dc:	10bfe004 	addi	r2,r2,-128
  8014e0:	10000a1e 	bne	r2,zero,80150c <tick+0xaa0>
  8014e4:	d0a75bc3 	ldbu	r2,-25233(gp)
  8014e8:	10803fcc 	andi	r2,r2,255
  8014ec:	1080201c 	xori	r2,r2,128
  8014f0:	10bfe004 	addi	r2,r2,-128
  8014f4:	10000726 	beq	r2,zero,801514 <tick+0xaa8>
  8014f8:	d0a75543 	ldbu	r2,-25259(gp)
  8014fc:	10803fcc 	andi	r2,r2,255
  801500:	1080201c 	xori	r2,r2,128
  801504:	10bfe004 	addi	r2,r2,-128
  801508:	10000226 	beq	r2,zero,801514 <tick+0xaa8>
  80150c:	00800044 	movi	r2,1
  801510:	00000106 	br	801518 <tick+0xaac>
  801514:	0005883a 	mov	r2,zero
  801518:	d0a76805 	stb	r2,-25184(gp)
      if(g41){
  80151c:	d0a76803 	ldbu	r2,-25184(gp)
  801520:	10803fcc 	andi	r2,r2,255
  801524:	1080201c 	xori	r2,r2,128
  801528:	10bfe004 	addi	r2,r2,-128
  80152c:	10000226 	beq	r2,zero,801538 <tick+0xacc>
         stop_PVARP =(stop_PVARP||1);
  801530:	00800044 	movi	r2,1
  801534:	d0a78d85 	stb	r2,-25034(gp)
      }
      g36 =((g48&&_cg48)||(g35&&_cg35)||g41);
  801538:	d0a76ac3 	ldbu	r2,-25173(gp)
  80153c:	10803fcc 	andi	r2,r2,255
  801540:	1080201c 	xori	r2,r2,128
  801544:	10bfe004 	addi	r2,r2,-128
  801548:	10000526 	beq	r2,zero,801560 <tick+0xaf4>
  80154c:	d0a77703 	ldbu	r2,-25124(gp)
  801550:	10803fcc 	andi	r2,r2,255
  801554:	1080201c 	xori	r2,r2,128
  801558:	10bfe004 	addi	r2,r2,-128
  80155c:	10000f1e 	bne	r2,zero,80159c <tick+0xb30>
  801560:	d0a77c43 	ldbu	r2,-25103(gp)
  801564:	10803fcc 	andi	r2,r2,255
  801568:	1080201c 	xori	r2,r2,128
  80156c:	10bfe004 	addi	r2,r2,-128
  801570:	10000526 	beq	r2,zero,801588 <tick+0xb1c>
  801574:	d0a76543 	ldbu	r2,-25195(gp)
  801578:	10803fcc 	andi	r2,r2,255
  80157c:	1080201c 	xori	r2,r2,128
  801580:	10bfe004 	addi	r2,r2,-128
  801584:	1000051e 	bne	r2,zero,80159c <tick+0xb30>
  801588:	d0a76803 	ldbu	r2,-25184(gp)
  80158c:	10803fcc 	andi	r2,r2,255
  801590:	1080201c 	xori	r2,r2,128
  801594:	10bfe004 	addi	r2,r2,-128
  801598:	10000226 	beq	r2,zero,8015a4 <tick+0xb38>
  80159c:	00800044 	movi	r2,1
  8015a0:	00000106 	br	8015a8 <tick+0xb3c>
  8015a4:	0005883a 	mov	r2,zero
  8015a8:	d0a78185 	stb	r2,-25082(gp)
      if(g36){
  8015ac:	d0a78183 	ldbu	r2,-25082(gp)
  8015b0:	10803fcc 	andi	r2,r2,255
  8015b4:	1080201c 	xori	r2,r2,128
  8015b8:	10bfe004 	addi	r2,r2,-128
  8015bc:	10000226 	beq	r2,zero,8015c8 <tick+0xb5c>
         start_PVARP =(start_PVARP||1);
  8015c0:	00800044 	movi	r2,1
  8015c4:	d0a77e85 	stb	r2,-25094(gp)
      }
      g38 =(PRE_g37);
  8015c8:	d0a79b43 	ldbu	r2,-24979(gp)
  8015cc:	d0a76b85 	stb	r2,-25170(gp)
      _cg38 = VRP_ex;
  8015d0:	d0a778c3 	ldbu	r2,-25117(gp)
  8015d4:	d0a77d05 	stb	r2,-25100(gp)
      g46 =(g38&&(!(_cg38)));
  8015d8:	d0a76b83 	ldbu	r2,-25170(gp)
  8015dc:	10803fcc 	andi	r2,r2,255
  8015e0:	1080201c 	xori	r2,r2,128
  8015e4:	10bfe004 	addi	r2,r2,-128
  8015e8:	10000726 	beq	r2,zero,801608 <tick+0xb9c>
  8015ec:	d0a77d03 	ldbu	r2,-25100(gp)
  8015f0:	10803fcc 	andi	r2,r2,255
  8015f4:	1080201c 	xori	r2,r2,128
  8015f8:	10bfe004 	addi	r2,r2,-128
  8015fc:	1000021e 	bne	r2,zero,801608 <tick+0xb9c>
  801600:	00800044 	movi	r2,1
  801604:	00000106 	br	80160c <tick+0xba0>
  801608:	0005883a 	mov	r2,zero
  80160c:	d0a78205 	stb	r2,-25080(gp)
      _cg46 = Asense;
  801610:	d0a78b83 	ldbu	r2,-25042(gp)
  801614:	d0a764c5 	stb	r2,-25197(gp)
      g47 =(g46&&_cg46);
  801618:	d0a78203 	ldbu	r2,-25080(gp)
  80161c:	10803fcc 	andi	r2,r2,255
  801620:	1080201c 	xori	r2,r2,128
  801624:	10bfe004 	addi	r2,r2,-128
  801628:	10000726 	beq	r2,zero,801648 <tick+0xbdc>
  80162c:	d0a764c3 	ldbu	r2,-25197(gp)
  801630:	10803fcc 	andi	r2,r2,255
  801634:	1080201c 	xori	r2,r2,128
  801638:	10bfe004 	addi	r2,r2,-128
  80163c:	10000226 	beq	r2,zero,801648 <tick+0xbdc>
  801640:	00800044 	movi	r2,1
  801644:	00000106 	br	80164c <tick+0xbe0>
  801648:	0005883a 	mov	r2,zero
  80164c:	d0a75b45 	stb	r2,-25235(gp)
      if(g47){
  801650:	d0a75b43 	ldbu	r2,-25235(gp)
  801654:	10803fcc 	andi	r2,r2,255
  801658:	1080201c 	xori	r2,r2,128
  80165c:	10bfe004 	addi	r2,r2,-128
  801660:	10000226 	beq	r2,zero,80166c <tick+0xc00>
         AR =(AR||1);
  801664:	00800044 	movi	r2,1
  801668:	d0a78845 	stb	r2,-25055(gp)
      }
      g37 =(g47||g36||(g46&&(!(_cg46))));
  80166c:	d0a75b43 	ldbu	r2,-25235(gp)
  801670:	10803fcc 	andi	r2,r2,255
  801674:	1080201c 	xori	r2,r2,128
  801678:	10bfe004 	addi	r2,r2,-128
  80167c:	10000f1e 	bne	r2,zero,8016bc <tick+0xc50>
  801680:	d0a78183 	ldbu	r2,-25082(gp)
  801684:	10803fcc 	andi	r2,r2,255
  801688:	1080201c 	xori	r2,r2,128
  80168c:	10bfe004 	addi	r2,r2,-128
  801690:	10000a1e 	bne	r2,zero,8016bc <tick+0xc50>
  801694:	d0a78203 	ldbu	r2,-25080(gp)
  801698:	10803fcc 	andi	r2,r2,255
  80169c:	1080201c 	xori	r2,r2,128
  8016a0:	10bfe004 	addi	r2,r2,-128
  8016a4:	10000726 	beq	r2,zero,8016c4 <tick+0xc58>
  8016a8:	d0a764c3 	ldbu	r2,-25197(gp)
  8016ac:	10803fcc 	andi	r2,r2,255
  8016b0:	1080201c 	xori	r2,r2,128
  8016b4:	10bfe004 	addi	r2,r2,-128
  8016b8:	1000021e 	bne	r2,zero,8016c4 <tick+0xc58>
  8016bc:	00800044 	movi	r2,1
  8016c0:	00000106 	br	8016c8 <tick+0xc5c>
  8016c4:	0005883a 	mov	r2,zero
  8016c8:	d0a76705 	stb	r2,-25188(gp)
      g44 =(g43&&(!(_cg43)));
  8016cc:	d0a78103 	ldbu	r2,-25084(gp)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	10000726 	beq	r2,zero,8016fc <tick+0xc90>
  8016e0:	d0a76e03 	ldbu	r2,-25160(gp)
  8016e4:	10803fcc 	andi	r2,r2,255
  8016e8:	1080201c 	xori	r2,r2,128
  8016ec:	10bfe004 	addi	r2,r2,-128
  8016f0:	1000021e 	bne	r2,zero,8016fc <tick+0xc90>
  8016f4:	00800044 	movi	r2,1
  8016f8:	00000106 	br	801700 <tick+0xc94>
  8016fc:	0005883a 	mov	r2,zero
  801700:	d0a76045 	stb	r2,-25215(gp)
      _cg44 = Asense;
  801704:	d0a78b83 	ldbu	r2,-25042(gp)
  801708:	d0a776c5 	stb	r2,-25125(gp)
      g45 =(g44&&_cg44);
  80170c:	d0a76043 	ldbu	r2,-25215(gp)
  801710:	10803fcc 	andi	r2,r2,255
  801714:	1080201c 	xori	r2,r2,128
  801718:	10bfe004 	addi	r2,r2,-128
  80171c:	10000726 	beq	r2,zero,80173c <tick+0xcd0>
  801720:	d0a776c3 	ldbu	r2,-25125(gp)
  801724:	10803fcc 	andi	r2,r2,255
  801728:	1080201c 	xori	r2,r2,128
  80172c:	10bfe004 	addi	r2,r2,-128
  801730:	10000226 	beq	r2,zero,80173c <tick+0xcd0>
  801734:	00800044 	movi	r2,1
  801738:	00000106 	br	801740 <tick+0xcd4>
  80173c:	0005883a 	mov	r2,zero
  801740:	d0a79385 	stb	r2,-25010(gp)
      if(g45){
  801744:	d0a79383 	ldbu	r2,-25010(gp)
  801748:	10803fcc 	andi	r2,r2,255
  80174c:	1080201c 	xori	r2,r2,128
  801750:	10bfe004 	addi	r2,r2,-128
  801754:	10000226 	beq	r2,zero,801760 <tick+0xcf4>
         AR =(AR||1);
  801758:	00800044 	movi	r2,1
  80175c:	d0a78845 	stb	r2,-25055(gp)
      }
      g39 =((g38&&_cg38)||g45||(g44&&(!(_cg44))));
  801760:	d0a76b83 	ldbu	r2,-25170(gp)
  801764:	10803fcc 	andi	r2,r2,255
  801768:	1080201c 	xori	r2,r2,128
  80176c:	10bfe004 	addi	r2,r2,-128
  801770:	10000526 	beq	r2,zero,801788 <tick+0xd1c>
  801774:	d0a77d03 	ldbu	r2,-25100(gp)
  801778:	10803fcc 	andi	r2,r2,255
  80177c:	1080201c 	xori	r2,r2,128
  801780:	10bfe004 	addi	r2,r2,-128
  801784:	10000f1e 	bne	r2,zero,8017c4 <tick+0xd58>
  801788:	d0a79383 	ldbu	r2,-25010(gp)
  80178c:	10803fcc 	andi	r2,r2,255
  801790:	1080201c 	xori	r2,r2,128
  801794:	10bfe004 	addi	r2,r2,-128
  801798:	10000a1e 	bne	r2,zero,8017c4 <tick+0xd58>
  80179c:	d0a76043 	ldbu	r2,-25215(gp)
  8017a0:	10803fcc 	andi	r2,r2,255
  8017a4:	1080201c 	xori	r2,r2,128
  8017a8:	10bfe004 	addi	r2,r2,-128
  8017ac:	10000726 	beq	r2,zero,8017cc <tick+0xd60>
  8017b0:	d0a776c3 	ldbu	r2,-25125(gp)
  8017b4:	10803fcc 	andi	r2,r2,255
  8017b8:	1080201c 	xori	r2,r2,128
  8017bc:	10bfe004 	addi	r2,r2,-128
  8017c0:	1000021e 	bne	r2,zero,8017cc <tick+0xd60>
  8017c4:	00800044 	movi	r2,1
  8017c8:	00000106 	br	8017d0 <tick+0xd64>
  8017cc:	0005883a 	mov	r2,zero
  8017d0:	d0a79685 	stb	r2,-24998(gp)
      g50 = g1;
  8017d4:	d0a76143 	ldbu	r2,-25211(gp)
  8017d8:	d0a782c5 	stb	r2,-25077(gp)
      g52 =(PRE_g51);
  8017dc:	d0a75903 	ldbu	r2,-25244(gp)
  8017e0:	d0a76485 	stb	r2,-25198(gp)
      _cg52 = Vsense;
  8017e4:	d0a77503 	ldbu	r2,-25132(gp)
  8017e8:	d0a75f85 	stb	r2,-25218(gp)
      g58 =(g52&&(!(_cg52)));
  8017ec:	d0a76483 	ldbu	r2,-25198(gp)
  8017f0:	10803fcc 	andi	r2,r2,255
  8017f4:	1080201c 	xori	r2,r2,128
  8017f8:	10bfe004 	addi	r2,r2,-128
  8017fc:	10000726 	beq	r2,zero,80181c <tick+0xdb0>
  801800:	d0a75f83 	ldbu	r2,-25218(gp)
  801804:	10803fcc 	andi	r2,r2,255
  801808:	1080201c 	xori	r2,r2,128
  80180c:	10bfe004 	addi	r2,r2,-128
  801810:	1000021e 	bne	r2,zero,80181c <tick+0xdb0>
  801814:	00800044 	movi	r2,1
  801818:	00000106 	br	801820 <tick+0xdb4>
  80181c:	0005883a 	mov	r2,zero
  801820:	d0a78ec5 	stb	r2,-25029(gp)
      _cg58 = Vpace;
  801824:	d0a76103 	ldbu	r2,-25212(gp)
  801828:	d0a76b45 	stb	r2,-25171(gp)
      g55 =(PRE_g54);
  80182c:	d0a77e43 	ldbu	r2,-25095(gp)
  801830:	d0a75845 	stb	r2,-25247(gp)
      _cg55 = VRP_ex;
  801834:	d0a778c3 	ldbu	r2,-25117(gp)
  801838:	d0a79445 	stb	r2,-25007(gp)
      g51 =((g58&&(!(_cg58)))||g50||(g55&&_cg55));
  80183c:	d0a78ec3 	ldbu	r2,-25029(gp)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	10000526 	beq	r2,zero,801864 <tick+0xdf8>
  801850:	d0a76b43 	ldbu	r2,-25171(gp)
  801854:	10803fcc 	andi	r2,r2,255
  801858:	1080201c 	xori	r2,r2,128
  80185c:	10bfe004 	addi	r2,r2,-128
  801860:	10000f26 	beq	r2,zero,8018a0 <tick+0xe34>
  801864:	d0a782c3 	ldbu	r2,-25077(gp)
  801868:	10803fcc 	andi	r2,r2,255
  80186c:	1080201c 	xori	r2,r2,128
  801870:	10bfe004 	addi	r2,r2,-128
  801874:	10000a1e 	bne	r2,zero,8018a0 <tick+0xe34>
  801878:	d0a75843 	ldbu	r2,-25247(gp)
  80187c:	10803fcc 	andi	r2,r2,255
  801880:	1080201c 	xori	r2,r2,128
  801884:	10bfe004 	addi	r2,r2,-128
  801888:	10000726 	beq	r2,zero,8018a8 <tick+0xe3c>
  80188c:	d0a79443 	ldbu	r2,-25007(gp)
  801890:	10803fcc 	andi	r2,r2,255
  801894:	1080201c 	xori	r2,r2,128
  801898:	10bfe004 	addi	r2,r2,-128
  80189c:	10000226 	beq	r2,zero,8018a8 <tick+0xe3c>
  8018a0:	00800044 	movi	r2,1
  8018a4:	00000106 	br	8018ac <tick+0xe40>
  8018a8:	0005883a 	mov	r2,zero
  8018ac:	d0a78385 	stb	r2,-25074(gp)
      g53 =((g52&&_cg52)||(g58&&_cg58));
  8018b0:	d0a76483 	ldbu	r2,-25198(gp)
  8018b4:	10803fcc 	andi	r2,r2,255
  8018b8:	1080201c 	xori	r2,r2,128
  8018bc:	10bfe004 	addi	r2,r2,-128
  8018c0:	10000526 	beq	r2,zero,8018d8 <tick+0xe6c>
  8018c4:	d0a75f83 	ldbu	r2,-25218(gp)
  8018c8:	10803fcc 	andi	r2,r2,255
  8018cc:	1080201c 	xori	r2,r2,128
  8018d0:	10bfe004 	addi	r2,r2,-128
  8018d4:	10000a1e 	bne	r2,zero,801900 <tick+0xe94>
  8018d8:	d0a78ec3 	ldbu	r2,-25029(gp)
  8018dc:	10803fcc 	andi	r2,r2,255
  8018e0:	1080201c 	xori	r2,r2,128
  8018e4:	10bfe004 	addi	r2,r2,-128
  8018e8:	10000726 	beq	r2,zero,801908 <tick+0xe9c>
  8018ec:	d0a76b43 	ldbu	r2,-25171(gp)
  8018f0:	10803fcc 	andi	r2,r2,255
  8018f4:	1080201c 	xori	r2,r2,128
  8018f8:	10bfe004 	addi	r2,r2,-128
  8018fc:	10000226 	beq	r2,zero,801908 <tick+0xe9c>
  801900:	00800044 	movi	r2,1
  801904:	00000106 	br	80190c <tick+0xea0>
  801908:	0005883a 	mov	r2,zero
  80190c:	d0a786c5 	stb	r2,-25061(gp)
      if(g53){
  801910:	d0a786c3 	ldbu	r2,-25061(gp)
  801914:	10803fcc 	andi	r2,r2,255
  801918:	1080201c 	xori	r2,r2,128
  80191c:	10bfe004 	addi	r2,r2,-128
  801920:	10000226 	beq	r2,zero,80192c <tick+0xec0>
         start_VRP =(start_VRP||1);
  801924:	00800044 	movi	r2,1
  801928:	d0a768c5 	stb	r2,-25181(gp)
      }
      g56 =(g55&&(!(_cg55)));
  80192c:	d0a75843 	ldbu	r2,-25247(gp)
  801930:	10803fcc 	andi	r2,r2,255
  801934:	1080201c 	xori	r2,r2,128
  801938:	10bfe004 	addi	r2,r2,-128
  80193c:	10000726 	beq	r2,zero,80195c <tick+0xef0>
  801940:	d0a79443 	ldbu	r2,-25007(gp)
  801944:	10803fcc 	andi	r2,r2,255
  801948:	1080201c 	xori	r2,r2,128
  80194c:	10bfe004 	addi	r2,r2,-128
  801950:	1000021e 	bne	r2,zero,80195c <tick+0xef0>
  801954:	00800044 	movi	r2,1
  801958:	00000106 	br	801960 <tick+0xef4>
  80195c:	0005883a 	mov	r2,zero
  801960:	d0a77945 	stb	r2,-25115(gp)
      _cg56 = Vsense;
  801964:	d0a77503 	ldbu	r2,-25132(gp)
  801968:	d0a78905 	stb	r2,-25052(gp)
      g57 =(g56&&_cg56);
  80196c:	d0a77943 	ldbu	r2,-25115(gp)
  801970:	10803fcc 	andi	r2,r2,255
  801974:	1080201c 	xori	r2,r2,128
  801978:	10bfe004 	addi	r2,r2,-128
  80197c:	10000726 	beq	r2,zero,80199c <tick+0xf30>
  801980:	d0a78903 	ldbu	r2,-25052(gp)
  801984:	10803fcc 	andi	r2,r2,255
  801988:	1080201c 	xori	r2,r2,128
  80198c:	10bfe004 	addi	r2,r2,-128
  801990:	10000226 	beq	r2,zero,80199c <tick+0xf30>
  801994:	00800044 	movi	r2,1
  801998:	00000106 	br	8019a0 <tick+0xf34>
  80199c:	0005883a 	mov	r2,zero
  8019a0:	d0a78745 	stb	r2,-25059(gp)
      if(g57){
  8019a4:	d0a78743 	ldbu	r2,-25059(gp)
  8019a8:	10803fcc 	andi	r2,r2,255
  8019ac:	1080201c 	xori	r2,r2,128
  8019b0:	10bfe004 	addi	r2,r2,-128
  8019b4:	10000226 	beq	r2,zero,8019c0 <tick+0xf54>
         VR =(VR||1);
  8019b8:	00800044 	movi	r2,1
  8019bc:	d0a76b05 	stb	r2,-25172(gp)
      }
      g54 =(g53||g57||(g56&&(!(_cg56))));
  8019c0:	d0a786c3 	ldbu	r2,-25061(gp)
  8019c4:	10803fcc 	andi	r2,r2,255
  8019c8:	1080201c 	xori	r2,r2,128
  8019cc:	10bfe004 	addi	r2,r2,-128
  8019d0:	10000f1e 	bne	r2,zero,801a10 <tick+0xfa4>
  8019d4:	d0a78743 	ldbu	r2,-25059(gp)
  8019d8:	10803fcc 	andi	r2,r2,255
  8019dc:	1080201c 	xori	r2,r2,128
  8019e0:	10bfe004 	addi	r2,r2,-128
  8019e4:	10000a1e 	bne	r2,zero,801a10 <tick+0xfa4>
  8019e8:	d0a77943 	ldbu	r2,-25115(gp)
  8019ec:	10803fcc 	andi	r2,r2,255
  8019f0:	1080201c 	xori	r2,r2,128
  8019f4:	10bfe004 	addi	r2,r2,-128
  8019f8:	10000726 	beq	r2,zero,801a18 <tick+0xfac>
  8019fc:	d0a78903 	ldbu	r2,-25052(gp)
  801a00:	10803fcc 	andi	r2,r2,255
  801a04:	1080201c 	xori	r2,r2,128
  801a08:	10bfe004 	addi	r2,r2,-128
  801a0c:	1000021e 	bne	r2,zero,801a18 <tick+0xfac>
  801a10:	00800044 	movi	r2,1
  801a14:	00000106 	br	801a1c <tick+0xfb0>
  801a18:	0005883a 	mov	r2,zero
  801a1c:	d0a775c5 	stb	r2,-25129(gp)
      g60 = g1;
  801a20:	d0a76143 	ldbu	r2,-25211(gp)
  801a24:	d0a77f45 	stb	r2,-25091(gp)
      g62 =(PRE_g61);
  801a28:	d0a78583 	ldbu	r2,-25066(gp)
  801a2c:	d0a76745 	stb	r2,-25187(gp)
      _cg62 = Vsense;
  801a30:	d0a77503 	ldbu	r2,-25132(gp)
  801a34:	d0a79a45 	stb	r2,-24983(gp)
      g61 =(g60||(g62&&(!(_cg62))));
  801a38:	d0a77f43 	ldbu	r2,-25091(gp)
  801a3c:	10803fcc 	andi	r2,r2,255
  801a40:	1080201c 	xori	r2,r2,128
  801a44:	10bfe004 	addi	r2,r2,-128
  801a48:	10000a1e 	bne	r2,zero,801a74 <tick+0x1008>
  801a4c:	d0a76743 	ldbu	r2,-25187(gp)
  801a50:	10803fcc 	andi	r2,r2,255
  801a54:	1080201c 	xori	r2,r2,128
  801a58:	10bfe004 	addi	r2,r2,-128
  801a5c:	10000726 	beq	r2,zero,801a7c <tick+0x1010>
  801a60:	d0a79a43 	ldbu	r2,-24983(gp)
  801a64:	10803fcc 	andi	r2,r2,255
  801a68:	1080201c 	xori	r2,r2,128
  801a6c:	10bfe004 	addi	r2,r2,-128
  801a70:	1000021e 	bne	r2,zero,801a7c <tick+0x1010>
  801a74:	00800044 	movi	r2,1
  801a78:	00000106 	br	801a80 <tick+0x1014>
  801a7c:	0005883a 	mov	r2,zero
  801a80:	d0a761c5 	stb	r2,-25209(gp)
      g63 =(g62&&_cg62);
  801a84:	d0a76743 	ldbu	r2,-25187(gp)
  801a88:	10803fcc 	andi	r2,r2,255
  801a8c:	1080201c 	xori	r2,r2,128
  801a90:	10bfe004 	addi	r2,r2,-128
  801a94:	10000726 	beq	r2,zero,801ab4 <tick+0x1048>
  801a98:	d0a79a43 	ldbu	r2,-24983(gp)
  801a9c:	10803fcc 	andi	r2,r2,255
  801aa0:	1080201c 	xori	r2,r2,128
  801aa4:	10bfe004 	addi	r2,r2,-128
  801aa8:	10000226 	beq	r2,zero,801ab4 <tick+0x1048>
  801aac:	00800044 	movi	r2,1
  801ab0:	00000106 	br	801ab8 <tick+0x104c>
  801ab4:	0005883a 	mov	r2,zero
  801ab8:	d0a77ec5 	stb	r2,-25093(gp)
      if(g63){
  801abc:	d0a77ec3 	ldbu	r2,-25093(gp)
  801ac0:	10803fcc 	andi	r2,r2,255
  801ac4:	1080201c 	xori	r2,r2,128
  801ac8:	10bfe004 	addi	r2,r2,-128
  801acc:	10000226 	beq	r2,zero,801ad8 <tick+0x106c>
         start_LRI =(start_LRI||1);
  801ad0:	00800044 	movi	r2,1
  801ad4:	d0a783c5 	stb	r2,-25073(gp)
      }
      g65 =(PRE_g64);
  801ad8:	d0a79543 	ldbu	r2,-25003(gp)
  801adc:	d0a79045 	stb	r2,-25023(gp)
      _cg65 = VRP_ex;
  801ae0:	d0a778c3 	ldbu	r2,-25117(gp)
  801ae4:	d0a78145 	stb	r2,-25083(gp)
      g70 =(PRE_g69);
  801ae8:	d0a76383 	ldbu	r2,-25202(gp)
  801aec:	d0a78805 	stb	r2,-25056(gp)
      g70b = g70;
  801af0:	d0a78803 	ldbu	r2,-25056(gp)
  801af4:	d0a78e85 	stb	r2,-25030(gp)
      if(g70b){
  801af8:	d0a78e83 	ldbu	r2,-25030(gp)
  801afc:	10803fcc 	andi	r2,r2,255
  801b00:	1080201c 	xori	r2,r2,128
  801b04:	10bfe004 	addi	r2,r2,-128
  801b08:	10000226 	beq	r2,zero,801b14 <tick+0x10a8>
         start_LRI =(start_LRI||1);
  801b0c:	00800044 	movi	r2,1
  801b10:	d0a783c5 	stb	r2,-25073(gp)
      }
      g64 =((g65&&(!(_cg65)))||g70b||g63);
  801b14:	d0a79043 	ldbu	r2,-25023(gp)
  801b18:	10803fcc 	andi	r2,r2,255
  801b1c:	1080201c 	xori	r2,r2,128
  801b20:	10bfe004 	addi	r2,r2,-128
  801b24:	10000526 	beq	r2,zero,801b3c <tick+0x10d0>
  801b28:	d0a78143 	ldbu	r2,-25083(gp)
  801b2c:	10803fcc 	andi	r2,r2,255
  801b30:	1080201c 	xori	r2,r2,128
  801b34:	10bfe004 	addi	r2,r2,-128
  801b38:	10000a26 	beq	r2,zero,801b64 <tick+0x10f8>
  801b3c:	d0a78e83 	ldbu	r2,-25030(gp)
  801b40:	10803fcc 	andi	r2,r2,255
  801b44:	1080201c 	xori	r2,r2,128
  801b48:	10bfe004 	addi	r2,r2,-128
  801b4c:	1000051e 	bne	r2,zero,801b64 <tick+0x10f8>
  801b50:	d0a77ec3 	ldbu	r2,-25093(gp)
  801b54:	10803fcc 	andi	r2,r2,255
  801b58:	1080201c 	xori	r2,r2,128
  801b5c:	10bfe004 	addi	r2,r2,-128
  801b60:	10000226 	beq	r2,zero,801b6c <tick+0x1100>
  801b64:	00800044 	movi	r2,1
  801b68:	00000106 	br	801b70 <tick+0x1104>
  801b6c:	0005883a 	mov	r2,zero
  801b70:	d0a76f05 	stb	r2,-25156(gp)
      g71 =(g67&&(!(_cg67)));
  801b74:	d0a797c3 	ldbu	r2,-24993(gp)
  801b78:	10803fcc 	andi	r2,r2,255
  801b7c:	1080201c 	xori	r2,r2,128
  801b80:	10bfe004 	addi	r2,r2,-128
  801b84:	10000726 	beq	r2,zero,801ba4 <tick+0x1138>
  801b88:	d0a79943 	ldbu	r2,-24987(gp)
  801b8c:	10803fcc 	andi	r2,r2,255
  801b90:	1080201c 	xori	r2,r2,128
  801b94:	10bfe004 	addi	r2,r2,-128
  801b98:	1000021e 	bne	r2,zero,801ba4 <tick+0x1138>
  801b9c:	00800044 	movi	r2,1
  801ba0:	00000106 	br	801ba8 <tick+0x113c>
  801ba4:	0005883a 	mov	r2,zero
  801ba8:	d0a76285 	stb	r2,-25206(gp)
      _cg71 = Vsense;
  801bac:	d0a77503 	ldbu	r2,-25132(gp)
  801bb0:	d0a77cc5 	stb	r2,-25101(gp)
      g73 =(g71&&(!(_cg71)));
  801bb4:	d0a76283 	ldbu	r2,-25206(gp)
  801bb8:	10803fcc 	andi	r2,r2,255
  801bbc:	1080201c 	xori	r2,r2,128
  801bc0:	10bfe004 	addi	r2,r2,-128
  801bc4:	10000726 	beq	r2,zero,801be4 <tick+0x1178>
  801bc8:	d0a77cc3 	ldbu	r2,-25101(gp)
  801bcc:	10803fcc 	andi	r2,r2,255
  801bd0:	1080201c 	xori	r2,r2,128
  801bd4:	10bfe004 	addi	r2,r2,-128
  801bd8:	1000021e 	bne	r2,zero,801be4 <tick+0x1178>
  801bdc:	00800044 	movi	r2,1
  801be0:	00000106 	br	801be8 <tick+0x117c>
  801be4:	0005883a 	mov	r2,zero
  801be8:	d0a79145 	stb	r2,-25019(gp)
      _cg73 = Vpace;
  801bec:	d0a76103 	ldbu	r2,-25212(gp)
  801bf0:	d0a75fc5 	stb	r2,-25217(gp)
      g66 =((g73&&(!(_cg73)))||(g65&&_cg65));
  801bf4:	d0a79143 	ldbu	r2,-25019(gp)
  801bf8:	10803fcc 	andi	r2,r2,255
  801bfc:	1080201c 	xori	r2,r2,128
  801c00:	10bfe004 	addi	r2,r2,-128
  801c04:	10000526 	beq	r2,zero,801c1c <tick+0x11b0>
  801c08:	d0a75fc3 	ldbu	r2,-25217(gp)
  801c0c:	10803fcc 	andi	r2,r2,255
  801c10:	1080201c 	xori	r2,r2,128
  801c14:	10bfe004 	addi	r2,r2,-128
  801c18:	10000a26 	beq	r2,zero,801c44 <tick+0x11d8>
  801c1c:	d0a79043 	ldbu	r2,-25023(gp)
  801c20:	10803fcc 	andi	r2,r2,255
  801c24:	1080201c 	xori	r2,r2,128
  801c28:	10bfe004 	addi	r2,r2,-128
  801c2c:	10000726 	beq	r2,zero,801c4c <tick+0x11e0>
  801c30:	d0a78143 	ldbu	r2,-25083(gp)
  801c34:	10803fcc 	andi	r2,r2,255
  801c38:	1080201c 	xori	r2,r2,128
  801c3c:	10bfe004 	addi	r2,r2,-128
  801c40:	10000226 	beq	r2,zero,801c4c <tick+0x11e0>
  801c44:	00800044 	movi	r2,1
  801c48:	00000106 	br	801c50 <tick+0x11e4>
  801c4c:	0005883a 	mov	r2,zero
  801c50:	d0a77605 	stb	r2,-25128(gp)
      g72 =(g71&&_cg71);
  801c54:	d0a76283 	ldbu	r2,-25206(gp)
  801c58:	10803fcc 	andi	r2,r2,255
  801c5c:	1080201c 	xori	r2,r2,128
  801c60:	10bfe004 	addi	r2,r2,-128
  801c64:	10000726 	beq	r2,zero,801c84 <tick+0x1218>
  801c68:	d0a77cc3 	ldbu	r2,-25101(gp)
  801c6c:	10803fcc 	andi	r2,r2,255
  801c70:	1080201c 	xori	r2,r2,128
  801c74:	10bfe004 	addi	r2,r2,-128
  801c78:	10000226 	beq	r2,zero,801c84 <tick+0x1218>
  801c7c:	00800044 	movi	r2,1
  801c80:	00000106 	br	801c88 <tick+0x121c>
  801c84:	0005883a 	mov	r2,zero
  801c88:	d0a78985 	stb	r2,-25050(gp)
      if(g72){
  801c8c:	d0a78983 	ldbu	r2,-25050(gp)
  801c90:	10803fcc 	andi	r2,r2,255
  801c94:	1080201c 	xori	r2,r2,128
  801c98:	10bfe004 	addi	r2,r2,-128
  801c9c:	10000226 	beq	r2,zero,801ca8 <tick+0x123c>
         stop_LRI =(stop_LRI||1);
  801ca0:	00800044 	movi	r2,1
  801ca4:	d0a795c5 	stb	r2,-25001(gp)
      }
      g74 =(g73&&_cg73);
  801ca8:	d0a79143 	ldbu	r2,-25019(gp)
  801cac:	10803fcc 	andi	r2,r2,255
  801cb0:	1080201c 	xori	r2,r2,128
  801cb4:	10bfe004 	addi	r2,r2,-128
  801cb8:	10000726 	beq	r2,zero,801cd8 <tick+0x126c>
  801cbc:	d0a75fc3 	ldbu	r2,-25217(gp)
  801cc0:	10803fcc 	andi	r2,r2,255
  801cc4:	1080201c 	xori	r2,r2,128
  801cc8:	10bfe004 	addi	r2,r2,-128
  801ccc:	10000226 	beq	r2,zero,801cd8 <tick+0x126c>
  801cd0:	00800044 	movi	r2,1
  801cd4:	00000106 	br	801cdc <tick+0x1270>
  801cd8:	0005883a 	mov	r2,zero
  801cdc:	d0a79b85 	stb	r2,-24978(gp)
      if(g74){
  801ce0:	d0a79b83 	ldbu	r2,-24978(gp)
  801ce4:	10803fcc 	andi	r2,r2,255
  801ce8:	1080201c 	xori	r2,r2,128
  801cec:	10bfe004 	addi	r2,r2,-128
  801cf0:	10000226 	beq	r2,zero,801cfc <tick+0x1290>
         stop_LRI =(stop_LRI||1);
  801cf4:	00800044 	movi	r2,1
  801cf8:	d0a795c5 	stb	r2,-25001(gp)
      }
      g69 =(g68||g72||g74);
  801cfc:	d0a78f43 	ldbu	r2,-25027(gp)
  801d00:	10803fcc 	andi	r2,r2,255
  801d04:	1080201c 	xori	r2,r2,128
  801d08:	10bfe004 	addi	r2,r2,-128
  801d0c:	10000a1e 	bne	r2,zero,801d38 <tick+0x12cc>
  801d10:	d0a78983 	ldbu	r2,-25050(gp)
  801d14:	10803fcc 	andi	r2,r2,255
  801d18:	1080201c 	xori	r2,r2,128
  801d1c:	10bfe004 	addi	r2,r2,-128
  801d20:	1000051e 	bne	r2,zero,801d38 <tick+0x12cc>
  801d24:	d0a79b83 	ldbu	r2,-24978(gp)
  801d28:	10803fcc 	andi	r2,r2,255
  801d2c:	1080201c 	xori	r2,r2,128
  801d30:	10bfe004 	addi	r2,r2,-128
  801d34:	10000226 	beq	r2,zero,801d40 <tick+0x12d4>
  801d38:	00800044 	movi	r2,1
  801d3c:	00000106 	br	801d44 <tick+0x12d8>
  801d40:	0005883a 	mov	r2,zero
  801d44:	d0a79ac5 	stb	r2,-24981(gp)
      g76 = g1;
  801d48:	d0a76143 	ldbu	r2,-25211(gp)
  801d4c:	d0a76685 	stb	r2,-25190(gp)
      g78 =(PRE_g77);
  801d50:	d0a765c3 	ldbu	r2,-25193(gp)
  801d54:	d0a77a05 	stb	r2,-25112(gp)
      _cg78 = Vsense;
  801d58:	d0a77503 	ldbu	r2,-25132(gp)
  801d5c:	d0a78545 	stb	r2,-25067(gp)
      g90 =(g78&&(!(_cg78)));
  801d60:	d0a77a03 	ldbu	r2,-25112(gp)
  801d64:	10803fcc 	andi	r2,r2,255
  801d68:	1080201c 	xori	r2,r2,128
  801d6c:	10bfe004 	addi	r2,r2,-128
  801d70:	10000726 	beq	r2,zero,801d90 <tick+0x1324>
  801d74:	d0a78543 	ldbu	r2,-25067(gp)
  801d78:	10803fcc 	andi	r2,r2,255
  801d7c:	1080201c 	xori	r2,r2,128
  801d80:	10bfe004 	addi	r2,r2,-128
  801d84:	1000021e 	bne	r2,zero,801d90 <tick+0x1324>
  801d88:	00800044 	movi	r2,1
  801d8c:	00000106 	br	801d94 <tick+0x1328>
  801d90:	0005883a 	mov	r2,zero
  801d94:	d0a77d85 	stb	r2,-25098(gp)
      _cg90 = Vpace;
  801d98:	d0a76103 	ldbu	r2,-25212(gp)
  801d9c:	d0a77245 	stb	r2,-25143(gp)
      g77 =((g90&&(!(_cg90)))||g76);
  801da0:	d0a77d83 	ldbu	r2,-25098(gp)
  801da4:	10803fcc 	andi	r2,r2,255
  801da8:	1080201c 	xori	r2,r2,128
  801dac:	10bfe004 	addi	r2,r2,-128
  801db0:	10000526 	beq	r2,zero,801dc8 <tick+0x135c>
  801db4:	d0a77243 	ldbu	r2,-25143(gp)
  801db8:	10803fcc 	andi	r2,r2,255
  801dbc:	1080201c 	xori	r2,r2,128
  801dc0:	10bfe004 	addi	r2,r2,-128
  801dc4:	10000526 	beq	r2,zero,801ddc <tick+0x1370>
  801dc8:	d0a76683 	ldbu	r2,-25190(gp)
  801dcc:	10803fcc 	andi	r2,r2,255
  801dd0:	1080201c 	xori	r2,r2,128
  801dd4:	10bfe004 	addi	r2,r2,-128
  801dd8:	10000226 	beq	r2,zero,801de4 <tick+0x1378>
  801ddc:	00800044 	movi	r2,1
  801de0:	00000106 	br	801de8 <tick+0x137c>
  801de4:	0005883a 	mov	r2,zero
  801de8:	d0a79285 	stb	r2,-25014(gp)
      g88 =(PRE_g87);
  801dec:	d0a76c83 	ldbu	r2,-25166(gp)
  801df0:	d0a79345 	stb	r2,-25011(gp)
      _cg88 = Vsense;
  801df4:	d0a77503 	ldbu	r2,-25132(gp)
  801df8:	d0a796c5 	stb	r2,-24997(gp)
      g81 =(PRE_g80);
  801dfc:	d0a77383 	ldbu	r2,-25138(gp)
  801e00:	d0a78a05 	stb	r2,-25048(gp)
      _cg81 = VRP_ex;
  801e04:	d0a778c3 	ldbu	r2,-25117(gp)
  801e08:	d0a75505 	stb	r2,-25260(gp)
      g82 =((g88&&(!(_cg88)))||(g81&&_cg81));
  801e0c:	d0a79343 	ldbu	r2,-25011(gp)
  801e10:	10803fcc 	andi	r2,r2,255
  801e14:	1080201c 	xori	r2,r2,128
  801e18:	10bfe004 	addi	r2,r2,-128
  801e1c:	10000526 	beq	r2,zero,801e34 <tick+0x13c8>
  801e20:	d0a796c3 	ldbu	r2,-24997(gp)
  801e24:	10803fcc 	andi	r2,r2,255
  801e28:	1080201c 	xori	r2,r2,128
  801e2c:	10bfe004 	addi	r2,r2,-128
  801e30:	10000a26 	beq	r2,zero,801e5c <tick+0x13f0>
  801e34:	d0a78a03 	ldbu	r2,-25048(gp)
  801e38:	10803fcc 	andi	r2,r2,255
  801e3c:	1080201c 	xori	r2,r2,128
  801e40:	10bfe004 	addi	r2,r2,-128
  801e44:	10000726 	beq	r2,zero,801e64 <tick+0x13f8>
  801e48:	d0a75503 	ldbu	r2,-25260(gp)
  801e4c:	10803fcc 	andi	r2,r2,255
  801e50:	1080201c 	xori	r2,r2,128
  801e54:	10bfe004 	addi	r2,r2,-128
  801e58:	10000226 	beq	r2,zero,801e64 <tick+0x13f8>
  801e5c:	00800044 	movi	r2,1
  801e60:	00000106 	br	801e68 <tick+0x13fc>
  801e64:	0005883a 	mov	r2,zero
  801e68:	d0a76345 	stb	r2,-25203(gp)
      _cg82 = URI_ex;
  801e6c:	d0a77ac3 	ldbu	r2,-25109(gp)
  801e70:	d0a76dc5 	stb	r2,-25161(gp)
      g86 =(PRE_g85);
  801e74:	d0a76883 	ldbu	r2,-25182(gp)
  801e78:	d0a780c5 	stb	r2,-25085(gp)
      g83 =((g82&&_cg82)||g86);
  801e7c:	d0a76343 	ldbu	r2,-25203(gp)
  801e80:	10803fcc 	andi	r2,r2,255
  801e84:	1080201c 	xori	r2,r2,128
  801e88:	10bfe004 	addi	r2,r2,-128
  801e8c:	10000526 	beq	r2,zero,801ea4 <tick+0x1438>
  801e90:	d0a76dc3 	ldbu	r2,-25161(gp)
  801e94:	10803fcc 	andi	r2,r2,255
  801e98:	1080201c 	xori	r2,r2,128
  801e9c:	10bfe004 	addi	r2,r2,-128
  801ea0:	1000051e 	bne	r2,zero,801eb8 <tick+0x144c>
  801ea4:	d0a780c3 	ldbu	r2,-25085(gp)
  801ea8:	10803fcc 	andi	r2,r2,255
  801eac:	1080201c 	xori	r2,r2,128
  801eb0:	10bfe004 	addi	r2,r2,-128
  801eb4:	10000226 	beq	r2,zero,801ec0 <tick+0x1454>
  801eb8:	00800044 	movi	r2,1
  801ebc:	00000106 	br	801ec4 <tick+0x1458>
  801ec0:	0005883a 	mov	r2,zero
  801ec4:	d0a75585 	stb	r2,-25258(gp)
      _cg83 = Vpace;
  801ec8:	d0a76103 	ldbu	r2,-25212(gp)
  801ecc:	d0a77685 	stb	r2,-25126(gp)
      g84 =(g83&&_cg83);
  801ed0:	d0a75583 	ldbu	r2,-25258(gp)
  801ed4:	10803fcc 	andi	r2,r2,255
  801ed8:	1080201c 	xori	r2,r2,128
  801edc:	10bfe004 	addi	r2,r2,-128
  801ee0:	10000726 	beq	r2,zero,801f00 <tick+0x1494>
  801ee4:	d0a77683 	ldbu	r2,-25126(gp)
  801ee8:	10803fcc 	andi	r2,r2,255
  801eec:	1080201c 	xori	r2,r2,128
  801ef0:	10bfe004 	addi	r2,r2,-128
  801ef4:	10000226 	beq	r2,zero,801f00 <tick+0x1494>
  801ef8:	00800044 	movi	r2,1
  801efc:	00000106 	br	801f04 <tick+0x1498>
  801f00:	0005883a 	mov	r2,zero
  801f04:	d0a767c5 	stb	r2,-25185(gp)
      if(g84){
  801f08:	d0a767c3 	ldbu	r2,-25185(gp)
  801f0c:	10803fcc 	andi	r2,r2,255
  801f10:	1080201c 	xori	r2,r2,128
  801f14:	10bfe004 	addi	r2,r2,-128
  801f18:	10000226 	beq	r2,zero,801f24 <tick+0x14b8>
         start_URI =(start_URI||1);
  801f1c:	00800044 	movi	r2,1
  801f20:	d0a787c5 	stb	r2,-25057(gp)
      }
      g89 =(g88&&_cg88);
  801f24:	d0a79343 	ldbu	r2,-25011(gp)
  801f28:	10803fcc 	andi	r2,r2,255
  801f2c:	1080201c 	xori	r2,r2,128
  801f30:	10bfe004 	addi	r2,r2,-128
  801f34:	10000726 	beq	r2,zero,801f54 <tick+0x14e8>
  801f38:	d0a796c3 	ldbu	r2,-24997(gp)
  801f3c:	10803fcc 	andi	r2,r2,255
  801f40:	1080201c 	xori	r2,r2,128
  801f44:	10bfe004 	addi	r2,r2,-128
  801f48:	10000226 	beq	r2,zero,801f54 <tick+0x14e8>
  801f4c:	00800044 	movi	r2,1
  801f50:	00000106 	br	801f58 <tick+0x14ec>
  801f54:	0005883a 	mov	r2,zero
  801f58:	d0a781c5 	stb	r2,-25081(gp)
      if(g89){
  801f5c:	d0a781c3 	ldbu	r2,-25081(gp)
  801f60:	10803fcc 	andi	r2,r2,255
  801f64:	1080201c 	xori	r2,r2,128
  801f68:	10bfe004 	addi	r2,r2,-128
  801f6c:	10000226 	beq	r2,zero,801f78 <tick+0x150c>
         stop_URI =(stop_URI||1);
  801f70:	00800044 	movi	r2,1
  801f74:	d0a77bc5 	stb	r2,-25105(gp)
      }
      g79 =((g78&&_cg78)||g84||g89||(g90&&_cg90));
  801f78:	d0a77a03 	ldbu	r2,-25112(gp)
  801f7c:	10803fcc 	andi	r2,r2,255
  801f80:	1080201c 	xori	r2,r2,128
  801f84:	10bfe004 	addi	r2,r2,-128
  801f88:	10000526 	beq	r2,zero,801fa0 <tick+0x1534>
  801f8c:	d0a78543 	ldbu	r2,-25067(gp)
  801f90:	10803fcc 	andi	r2,r2,255
  801f94:	1080201c 	xori	r2,r2,128
  801f98:	10bfe004 	addi	r2,r2,-128
  801f9c:	1000141e 	bne	r2,zero,801ff0 <tick+0x1584>
  801fa0:	d0a767c3 	ldbu	r2,-25185(gp)
  801fa4:	10803fcc 	andi	r2,r2,255
  801fa8:	1080201c 	xori	r2,r2,128
  801fac:	10bfe004 	addi	r2,r2,-128
  801fb0:	10000f1e 	bne	r2,zero,801ff0 <tick+0x1584>
  801fb4:	d0a781c3 	ldbu	r2,-25081(gp)
  801fb8:	10803fcc 	andi	r2,r2,255
  801fbc:	1080201c 	xori	r2,r2,128
  801fc0:	10bfe004 	addi	r2,r2,-128
  801fc4:	10000a1e 	bne	r2,zero,801ff0 <tick+0x1584>
  801fc8:	d0a77d83 	ldbu	r2,-25098(gp)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	10000726 	beq	r2,zero,801ff8 <tick+0x158c>
  801fdc:	d0a77243 	ldbu	r2,-25143(gp)
  801fe0:	10803fcc 	andi	r2,r2,255
  801fe4:	1080201c 	xori	r2,r2,128
  801fe8:	10bfe004 	addi	r2,r2,-128
  801fec:	10000226 	beq	r2,zero,801ff8 <tick+0x158c>
  801ff0:	00800044 	movi	r2,1
  801ff4:	00000106 	br	801ffc <tick+0x1590>
  801ff8:	0005883a 	mov	r2,zero
  801ffc:	d0a77005 	stb	r2,-25152(gp)
      if(g79){
  802000:	d0a77003 	ldbu	r2,-25152(gp)
  802004:	10803fcc 	andi	r2,r2,255
  802008:	1080201c 	xori	r2,r2,128
  80200c:	10bfe004 	addi	r2,r2,-128
  802010:	10000226 	beq	r2,zero,80201c <tick+0x15b0>
         start_URI =(start_URI||1);
  802014:	00800044 	movi	r2,1
  802018:	d0a787c5 	stb	r2,-25057(gp)
      }
      g80 =(g79||(g81&&(!(_cg81))));
  80201c:	d0a77003 	ldbu	r2,-25152(gp)
  802020:	10803fcc 	andi	r2,r2,255
  802024:	1080201c 	xori	r2,r2,128
  802028:	10bfe004 	addi	r2,r2,-128
  80202c:	10000a1e 	bne	r2,zero,802058 <tick+0x15ec>
  802030:	d0a78a03 	ldbu	r2,-25048(gp)
  802034:	10803fcc 	andi	r2,r2,255
  802038:	1080201c 	xori	r2,r2,128
  80203c:	10bfe004 	addi	r2,r2,-128
  802040:	10000726 	beq	r2,zero,802060 <tick+0x15f4>
  802044:	d0a75503 	ldbu	r2,-25260(gp)
  802048:	10803fcc 	andi	r2,r2,255
  80204c:	1080201c 	xori	r2,r2,128
  802050:	10bfe004 	addi	r2,r2,-128
  802054:	1000021e 	bne	r2,zero,802060 <tick+0x15f4>
  802058:	00800044 	movi	r2,1
  80205c:	00000106 	br	802064 <tick+0x15f8>
  802060:	0005883a 	mov	r2,zero
  802064:	d0a77345 	stb	r2,-25139(gp)
      g85 =(g83&&(!(_cg83)));
  802068:	d0a75583 	ldbu	r2,-25258(gp)
  80206c:	10803fcc 	andi	r2,r2,255
  802070:	1080201c 	xori	r2,r2,128
  802074:	10bfe004 	addi	r2,r2,-128
  802078:	10000726 	beq	r2,zero,802098 <tick+0x162c>
  80207c:	d0a77683 	ldbu	r2,-25126(gp)
  802080:	10803fcc 	andi	r2,r2,255
  802084:	1080201c 	xori	r2,r2,128
  802088:	10bfe004 	addi	r2,r2,-128
  80208c:	1000021e 	bne	r2,zero,802098 <tick+0x162c>
  802090:	00800044 	movi	r2,1
  802094:	00000106 	br	80209c <tick+0x1630>
  802098:	0005883a 	mov	r2,zero
  80209c:	d0a75b85 	stb	r2,-25234(gp)
      g87 =(g82&&(!(_cg82)));
  8020a0:	d0a76343 	ldbu	r2,-25203(gp)
  8020a4:	10803fcc 	andi	r2,r2,255
  8020a8:	1080201c 	xori	r2,r2,128
  8020ac:	10bfe004 	addi	r2,r2,-128
  8020b0:	10000726 	beq	r2,zero,8020d0 <tick+0x1664>
  8020b4:	d0a76dc3 	ldbu	r2,-25161(gp)
  8020b8:	10803fcc 	andi	r2,r2,255
  8020bc:	1080201c 	xori	r2,r2,128
  8020c0:	10bfe004 	addi	r2,r2,-128
  8020c4:	1000021e 	bne	r2,zero,8020d0 <tick+0x1664>
  8020c8:	00800044 	movi	r2,1
  8020cc:	00000106 	br	8020d4 <tick+0x1668>
  8020d0:	0005883a 	mov	r2,zero
  8020d4:	d0a76005 	stb	r2,-25216(gp)
      g92 = g1;
  8020d8:	d0a76143 	ldbu	r2,-25211(gp)
  8020dc:	d0a760c5 	stb	r2,-25213(gp)
      g96 =(PRE_g95);
  8020e0:	d0a75683 	ldbu	r2,-25254(gp)
  8020e4:	d0a78345 	stb	r2,-25075(gp)
      _cg96 = AVI_ex;
  8020e8:	d0a77843 	ldbu	r2,-25119(gp)
  8020ec:	d0a758c5 	stb	r2,-25245(gp)
      g94 =(PRE_g93);
  8020f0:	d0a78fc3 	ldbu	r2,-25025(gp)
  8020f4:	d0a770c5 	stb	r2,-25149(gp)
      g94b = g94;
  8020f8:	d0a770c3 	ldbu	r2,-25149(gp)
  8020fc:	d0a75cc5 	stb	r2,-25229(gp)
      _cg94 = start_AVI;
  802100:	d0a76e43 	ldbu	r2,-25159(gp)
  802104:	d0a78f05 	stb	r2,-25028(gp)
      g93 =(g92||(g96&&_cg96)||(g94b&&(!(_cg94))));
  802108:	d0a760c3 	ldbu	r2,-25213(gp)
  80210c:	10803fcc 	andi	r2,r2,255
  802110:	1080201c 	xori	r2,r2,128
  802114:	10bfe004 	addi	r2,r2,-128
  802118:	1000141e 	bne	r2,zero,80216c <tick+0x1700>
  80211c:	d0a78343 	ldbu	r2,-25075(gp)
  802120:	10803fcc 	andi	r2,r2,255
  802124:	1080201c 	xori	r2,r2,128
  802128:	10bfe004 	addi	r2,r2,-128
  80212c:	10000526 	beq	r2,zero,802144 <tick+0x16d8>
  802130:	d0a758c3 	ldbu	r2,-25245(gp)
  802134:	10803fcc 	andi	r2,r2,255
  802138:	1080201c 	xori	r2,r2,128
  80213c:	10bfe004 	addi	r2,r2,-128
  802140:	10000a1e 	bne	r2,zero,80216c <tick+0x1700>
  802144:	d0a75cc3 	ldbu	r2,-25229(gp)
  802148:	10803fcc 	andi	r2,r2,255
  80214c:	1080201c 	xori	r2,r2,128
  802150:	10bfe004 	addi	r2,r2,-128
  802154:	10000726 	beq	r2,zero,802174 <tick+0x1708>
  802158:	d0a78f03 	ldbu	r2,-25028(gp)
  80215c:	10803fcc 	andi	r2,r2,255
  802160:	1080201c 	xori	r2,r2,128
  802164:	10bfe004 	addi	r2,r2,-128
  802168:	1000021e 	bne	r2,zero,802174 <tick+0x1708>
  80216c:	00800044 	movi	r2,1
  802170:	00000106 	br	802178 <tick+0x170c>
  802174:	0005883a 	mov	r2,zero
  802178:	d0a78005 	stb	r2,-25088(gp)
      g97 =(g96&&(!(_cg96)));
  80217c:	d0a78343 	ldbu	r2,-25075(gp)
  802180:	10803fcc 	andi	r2,r2,255
  802184:	1080201c 	xori	r2,r2,128
  802188:	10bfe004 	addi	r2,r2,-128
  80218c:	10000726 	beq	r2,zero,8021ac <tick+0x1740>
  802190:	d0a758c3 	ldbu	r2,-25245(gp)
  802194:	10803fcc 	andi	r2,r2,255
  802198:	1080201c 	xori	r2,r2,128
  80219c:	10bfe004 	addi	r2,r2,-128
  8021a0:	1000021e 	bne	r2,zero,8021ac <tick+0x1740>
  8021a4:	00800044 	movi	r2,1
  8021a8:	00000106 	br	8021b0 <tick+0x1744>
  8021ac:	0005883a 	mov	r2,zero
  8021b0:	d0a76445 	stb	r2,-25199(gp)
      if(g97){
  8021b4:	d0a76443 	ldbu	r2,-25199(gp)
  8021b8:	10803fcc 	andi	r2,r2,255
  8021bc:	1080201c 	xori	r2,r2,128
  8021c0:	10bfe004 	addi	r2,r2,-128
  8021c4:	10000226 	beq	r2,zero,8021d0 <tick+0x1764>
         AVI_counting =(AVI_counting||1);
  8021c8:	00800044 	movi	r2,1
  8021cc:	d0a79905 	stb	r2,-24988(gp)
      }
      g95 =(g97||(g94b&&_cg94));
  8021d0:	d0a76443 	ldbu	r2,-25199(gp)
  8021d4:	10803fcc 	andi	r2,r2,255
  8021d8:	1080201c 	xori	r2,r2,128
  8021dc:	10bfe004 	addi	r2,r2,-128
  8021e0:	10000a1e 	bne	r2,zero,80220c <tick+0x17a0>
  8021e4:	d0a75cc3 	ldbu	r2,-25229(gp)
  8021e8:	10803fcc 	andi	r2,r2,255
  8021ec:	1080201c 	xori	r2,r2,128
  8021f0:	10bfe004 	addi	r2,r2,-128
  8021f4:	10000726 	beq	r2,zero,802214 <tick+0x17a8>
  8021f8:	d0a78f03 	ldbu	r2,-25028(gp)
  8021fc:	10803fcc 	andi	r2,r2,255
  802200:	1080201c 	xori	r2,r2,128
  802204:	10bfe004 	addi	r2,r2,-128
  802208:	10000226 	beq	r2,zero,802214 <tick+0x17a8>
  80220c:	00800044 	movi	r2,1
  802210:	00000106 	br	802218 <tick+0x17ac>
  802214:	0005883a 	mov	r2,zero
  802218:	d0a78285 	stb	r2,-25078(gp)
      g99 = g1;
  80221c:	d0a76143 	ldbu	r2,-25211(gp)
  802220:	d0a77585 	stb	r2,-25130(gp)
      g103 =(PRE_g102);
  802224:	d0a75803 	ldbu	r2,-25248(gp)
  802228:	d0a75ac5 	stb	r2,-25237(gp)
      _cg103 = PVARP_ex;
  80222c:	d0a78a43 	ldbu	r2,-25047(gp)
  802230:	d0a79405 	stb	r2,-25008(gp)
      g101 =(PRE_g100);
  802234:	d0a78c43 	ldbu	r2,-25039(gp)
  802238:	d0a77885 	stb	r2,-25118(gp)
      g101b = g101;
  80223c:	d0a77883 	ldbu	r2,-25118(gp)
  802240:	d0a771c5 	stb	r2,-25145(gp)
      _cg101 = start_PVARP;
  802244:	d0a77e83 	ldbu	r2,-25094(gp)
  802248:	d0a76a05 	stb	r2,-25176(gp)
      g100 =(g99||(g103&&_cg103)||(g101b&&(!(_cg101))));
  80224c:	d0a77583 	ldbu	r2,-25130(gp)
  802250:	10803fcc 	andi	r2,r2,255
  802254:	1080201c 	xori	r2,r2,128
  802258:	10bfe004 	addi	r2,r2,-128
  80225c:	1000141e 	bne	r2,zero,8022b0 <tick+0x1844>
  802260:	d0a75ac3 	ldbu	r2,-25237(gp)
  802264:	10803fcc 	andi	r2,r2,255
  802268:	1080201c 	xori	r2,r2,128
  80226c:	10bfe004 	addi	r2,r2,-128
  802270:	10000526 	beq	r2,zero,802288 <tick+0x181c>
  802274:	d0a79403 	ldbu	r2,-25008(gp)
  802278:	10803fcc 	andi	r2,r2,255
  80227c:	1080201c 	xori	r2,r2,128
  802280:	10bfe004 	addi	r2,r2,-128
  802284:	10000a1e 	bne	r2,zero,8022b0 <tick+0x1844>
  802288:	d0a771c3 	ldbu	r2,-25145(gp)
  80228c:	10803fcc 	andi	r2,r2,255
  802290:	1080201c 	xori	r2,r2,128
  802294:	10bfe004 	addi	r2,r2,-128
  802298:	10000726 	beq	r2,zero,8022b8 <tick+0x184c>
  80229c:	d0a76a03 	ldbu	r2,-25176(gp)
  8022a0:	10803fcc 	andi	r2,r2,255
  8022a4:	1080201c 	xori	r2,r2,128
  8022a8:	10bfe004 	addi	r2,r2,-128
  8022ac:	1000021e 	bne	r2,zero,8022b8 <tick+0x184c>
  8022b0:	00800044 	movi	r2,1
  8022b4:	00000106 	br	8022bc <tick+0x1850>
  8022b8:	0005883a 	mov	r2,zero
  8022bc:	d0a774c5 	stb	r2,-25133(gp)
      g104 =(g103&&(!(_cg103)));
  8022c0:	d0a75ac3 	ldbu	r2,-25237(gp)
  8022c4:	10803fcc 	andi	r2,r2,255
  8022c8:	1080201c 	xori	r2,r2,128
  8022cc:	10bfe004 	addi	r2,r2,-128
  8022d0:	10000726 	beq	r2,zero,8022f0 <tick+0x1884>
  8022d4:	d0a79403 	ldbu	r2,-25008(gp)
  8022d8:	10803fcc 	andi	r2,r2,255
  8022dc:	1080201c 	xori	r2,r2,128
  8022e0:	10bfe004 	addi	r2,r2,-128
  8022e4:	1000021e 	bne	r2,zero,8022f0 <tick+0x1884>
  8022e8:	00800044 	movi	r2,1
  8022ec:	00000106 	br	8022f4 <tick+0x1888>
  8022f0:	0005883a 	mov	r2,zero
  8022f4:	d0a785c5 	stb	r2,-25065(gp)
      if(g104){
  8022f8:	d0a785c3 	ldbu	r2,-25065(gp)
  8022fc:	10803fcc 	andi	r2,r2,255
  802300:	1080201c 	xori	r2,r2,128
  802304:	10bfe004 	addi	r2,r2,-128
  802308:	10000226 	beq	r2,zero,802314 <tick+0x18a8>
         PVARP_counting =(PVARP_counting||1);
  80230c:	00800044 	movi	r2,1
  802310:	d0a76a85 	stb	r2,-25174(gp)
      }
      g102 =((g101b&&_cg101)||g104);
  802314:	d0a771c3 	ldbu	r2,-25145(gp)
  802318:	10803fcc 	andi	r2,r2,255
  80231c:	1080201c 	xori	r2,r2,128
  802320:	10bfe004 	addi	r2,r2,-128
  802324:	10000526 	beq	r2,zero,80233c <tick+0x18d0>
  802328:	d0a76a03 	ldbu	r2,-25176(gp)
  80232c:	10803fcc 	andi	r2,r2,255
  802330:	1080201c 	xori	r2,r2,128
  802334:	10bfe004 	addi	r2,r2,-128
  802338:	1000051e 	bne	r2,zero,802350 <tick+0x18e4>
  80233c:	d0a785c3 	ldbu	r2,-25065(gp)
  802340:	10803fcc 	andi	r2,r2,255
  802344:	1080201c 	xori	r2,r2,128
  802348:	10bfe004 	addi	r2,r2,-128
  80234c:	10000226 	beq	r2,zero,802358 <tick+0x18ec>
  802350:	00800044 	movi	r2,1
  802354:	00000106 	br	80235c <tick+0x18f0>
  802358:	0005883a 	mov	r2,zero
  80235c:	d0a75e45 	stb	r2,-25223(gp)
      g106 = g1;
  802360:	d0a76143 	ldbu	r2,-25211(gp)
  802364:	d0a79985 	stb	r2,-24986(gp)
      g110 =(PRE_g109);
  802368:	d0a76783 	ldbu	r2,-25186(gp)
  80236c:	d0a77105 	stb	r2,-25148(gp)
      _cg110 = AEI_ex;
  802370:	d0a75a83 	ldbu	r2,-25238(gp)
  802374:	d0a762c5 	stb	r2,-25205(gp)
      g108 =(PRE_g107);
  802378:	d0a77f83 	ldbu	r2,-25090(gp)
  80237c:	d0a75705 	stb	r2,-25252(gp)
      g108b = g108;
  802380:	d0a75703 	ldbu	r2,-25252(gp)
  802384:	d0a78785 	stb	r2,-25058(gp)
      _cg108 = start_AEI;
  802388:	d0a78243 	ldbu	r2,-25079(gp)
  80238c:	d0a78ac5 	stb	r2,-25045(gp)
      g107 =((g110&&_cg110)||(g108b&&(!(_cg108)))||g106);
  802390:	d0a77103 	ldbu	r2,-25148(gp)
  802394:	10803fcc 	andi	r2,r2,255
  802398:	1080201c 	xori	r2,r2,128
  80239c:	10bfe004 	addi	r2,r2,-128
  8023a0:	10000526 	beq	r2,zero,8023b8 <tick+0x194c>
  8023a4:	d0a762c3 	ldbu	r2,-25205(gp)
  8023a8:	10803fcc 	andi	r2,r2,255
  8023ac:	1080201c 	xori	r2,r2,128
  8023b0:	10bfe004 	addi	r2,r2,-128
  8023b4:	10000f1e 	bne	r2,zero,8023f4 <tick+0x1988>
  8023b8:	d0a78783 	ldbu	r2,-25058(gp)
  8023bc:	10803fcc 	andi	r2,r2,255
  8023c0:	1080201c 	xori	r2,r2,128
  8023c4:	10bfe004 	addi	r2,r2,-128
  8023c8:	10000526 	beq	r2,zero,8023e0 <tick+0x1974>
  8023cc:	d0a78ac3 	ldbu	r2,-25045(gp)
  8023d0:	10803fcc 	andi	r2,r2,255
  8023d4:	1080201c 	xori	r2,r2,128
  8023d8:	10bfe004 	addi	r2,r2,-128
  8023dc:	10000526 	beq	r2,zero,8023f4 <tick+0x1988>
  8023e0:	d0a79983 	ldbu	r2,-24986(gp)
  8023e4:	10803fcc 	andi	r2,r2,255
  8023e8:	1080201c 	xori	r2,r2,128
  8023ec:	10bfe004 	addi	r2,r2,-128
  8023f0:	10000226 	beq	r2,zero,8023fc <tick+0x1990>
  8023f4:	00800044 	movi	r2,1
  8023f8:	00000106 	br	802400 <tick+0x1994>
  8023fc:	0005883a 	mov	r2,zero
  802400:	d0a78485 	stb	r2,-25070(gp)
      g111 =(g110&&(!(_cg110)));
  802404:	d0a77103 	ldbu	r2,-25148(gp)
  802408:	10803fcc 	andi	r2,r2,255
  80240c:	1080201c 	xori	r2,r2,128
  802410:	10bfe004 	addi	r2,r2,-128
  802414:	10000726 	beq	r2,zero,802434 <tick+0x19c8>
  802418:	d0a762c3 	ldbu	r2,-25205(gp)
  80241c:	10803fcc 	andi	r2,r2,255
  802420:	1080201c 	xori	r2,r2,128
  802424:	10bfe004 	addi	r2,r2,-128
  802428:	1000021e 	bne	r2,zero,802434 <tick+0x19c8>
  80242c:	00800044 	movi	r2,1
  802430:	00000106 	br	802438 <tick+0x19cc>
  802434:	0005883a 	mov	r2,zero
  802438:	d0a757c5 	stb	r2,-25249(gp)
      if(g111){
  80243c:	d0a757c3 	ldbu	r2,-25249(gp)
  802440:	10803fcc 	andi	r2,r2,255
  802444:	1080201c 	xori	r2,r2,128
  802448:	10bfe004 	addi	r2,r2,-128
  80244c:	10000226 	beq	r2,zero,802458 <tick+0x19ec>
         AEI_counting =(AEI_counting||1);
  802450:	00800044 	movi	r2,1
  802454:	d0a77785 	stb	r2,-25122(gp)
      }
      g109 =((g108b&&_cg108)||g111);
  802458:	d0a78783 	ldbu	r2,-25058(gp)
  80245c:	10803fcc 	andi	r2,r2,255
  802460:	1080201c 	xori	r2,r2,128
  802464:	10bfe004 	addi	r2,r2,-128
  802468:	10000526 	beq	r2,zero,802480 <tick+0x1a14>
  80246c:	d0a78ac3 	ldbu	r2,-25045(gp)
  802470:	10803fcc 	andi	r2,r2,255
  802474:	1080201c 	xori	r2,r2,128
  802478:	10bfe004 	addi	r2,r2,-128
  80247c:	1000051e 	bne	r2,zero,802494 <tick+0x1a28>
  802480:	d0a757c3 	ldbu	r2,-25249(gp)
  802484:	10803fcc 	andi	r2,r2,255
  802488:	1080201c 	xori	r2,r2,128
  80248c:	10bfe004 	addi	r2,r2,-128
  802490:	10000226 	beq	r2,zero,80249c <tick+0x1a30>
  802494:	00800044 	movi	r2,1
  802498:	00000106 	br	8024a0 <tick+0x1a34>
  80249c:	0005883a 	mov	r2,zero
  8024a0:	d0a798c5 	stb	r2,-24989(gp)
      g113 = g1;
  8024a4:	d0a76143 	ldbu	r2,-25211(gp)
  8024a8:	d0a784c5 	stb	r2,-25069(gp)
      g117 =(PRE_g116);
  8024ac:	d0a76c43 	ldbu	r2,-25167(gp)
  8024b0:	d0a76d05 	stb	r2,-25164(gp)
      _cg117 = LRI_ex;
  8024b4:	d0a77303 	ldbu	r2,-25140(gp)
  8024b8:	d0a78505 	stb	r2,-25068(gp)
      g115 =(PRE_g114);
  8024bc:	d0a75c03 	ldbu	r2,-25232(gp)
  8024c0:	d0a75e85 	stb	r2,-25222(gp)
      g115b = g115;
  8024c4:	d0a75e83 	ldbu	r2,-25222(gp)
  8024c8:	d0a791c5 	stb	r2,-25017(gp)
      _cg115 = start_LRI;
  8024cc:	d0a783c3 	ldbu	r2,-25073(gp)
  8024d0:	d0a78445 	stb	r2,-25071(gp)
      g114 =(g113||(g117&&_cg117)||(g115b&&(!(_cg115))));
  8024d4:	d0a784c3 	ldbu	r2,-25069(gp)
  8024d8:	10803fcc 	andi	r2,r2,255
  8024dc:	1080201c 	xori	r2,r2,128
  8024e0:	10bfe004 	addi	r2,r2,-128
  8024e4:	1000141e 	bne	r2,zero,802538 <tick+0x1acc>
  8024e8:	d0a76d03 	ldbu	r2,-25164(gp)
  8024ec:	10803fcc 	andi	r2,r2,255
  8024f0:	1080201c 	xori	r2,r2,128
  8024f4:	10bfe004 	addi	r2,r2,-128
  8024f8:	10000526 	beq	r2,zero,802510 <tick+0x1aa4>
  8024fc:	d0a78503 	ldbu	r2,-25068(gp)
  802500:	10803fcc 	andi	r2,r2,255
  802504:	1080201c 	xori	r2,r2,128
  802508:	10bfe004 	addi	r2,r2,-128
  80250c:	10000a1e 	bne	r2,zero,802538 <tick+0x1acc>
  802510:	d0a791c3 	ldbu	r2,-25017(gp)
  802514:	10803fcc 	andi	r2,r2,255
  802518:	1080201c 	xori	r2,r2,128
  80251c:	10bfe004 	addi	r2,r2,-128
  802520:	10000726 	beq	r2,zero,802540 <tick+0x1ad4>
  802524:	d0a78443 	ldbu	r2,-25071(gp)
  802528:	10803fcc 	andi	r2,r2,255
  80252c:	1080201c 	xori	r2,r2,128
  802530:	10bfe004 	addi	r2,r2,-128
  802534:	1000021e 	bne	r2,zero,802540 <tick+0x1ad4>
  802538:	00800044 	movi	r2,1
  80253c:	00000106 	br	802544 <tick+0x1ad8>
  802540:	0005883a 	mov	r2,zero
  802544:	d0a77905 	stb	r2,-25116(gp)
      g118 =(g117&&(!(_cg117)));
  802548:	d0a76d03 	ldbu	r2,-25164(gp)
  80254c:	10803fcc 	andi	r2,r2,255
  802550:	1080201c 	xori	r2,r2,128
  802554:	10bfe004 	addi	r2,r2,-128
  802558:	10000726 	beq	r2,zero,802578 <tick+0x1b0c>
  80255c:	d0a78503 	ldbu	r2,-25068(gp)
  802560:	10803fcc 	andi	r2,r2,255
  802564:	1080201c 	xori	r2,r2,128
  802568:	10bfe004 	addi	r2,r2,-128
  80256c:	1000021e 	bne	r2,zero,802578 <tick+0x1b0c>
  802570:	00800044 	movi	r2,1
  802574:	00000106 	br	80257c <tick+0x1b10>
  802578:	0005883a 	mov	r2,zero
  80257c:	d0a76845 	stb	r2,-25183(gp)
      if(g118){
  802580:	d0a76843 	ldbu	r2,-25183(gp)
  802584:	10803fcc 	andi	r2,r2,255
  802588:	1080201c 	xori	r2,r2,128
  80258c:	10bfe004 	addi	r2,r2,-128
  802590:	10000226 	beq	r2,zero,80259c <tick+0x1b30>
         LRI_counting =(LRI_counting||1);
  802594:	00800044 	movi	r2,1
  802598:	d0a76d85 	stb	r2,-25162(gp)
      }
      g116 =((g115b&&_cg115)||g118);
  80259c:	d0a791c3 	ldbu	r2,-25017(gp)
  8025a0:	10803fcc 	andi	r2,r2,255
  8025a4:	1080201c 	xori	r2,r2,128
  8025a8:	10bfe004 	addi	r2,r2,-128
  8025ac:	10000526 	beq	r2,zero,8025c4 <tick+0x1b58>
  8025b0:	d0a78443 	ldbu	r2,-25071(gp)
  8025b4:	10803fcc 	andi	r2,r2,255
  8025b8:	1080201c 	xori	r2,r2,128
  8025bc:	10bfe004 	addi	r2,r2,-128
  8025c0:	1000051e 	bne	r2,zero,8025d8 <tick+0x1b6c>
  8025c4:	d0a76843 	ldbu	r2,-25183(gp)
  8025c8:	10803fcc 	andi	r2,r2,255
  8025cc:	1080201c 	xori	r2,r2,128
  8025d0:	10bfe004 	addi	r2,r2,-128
  8025d4:	10000226 	beq	r2,zero,8025e0 <tick+0x1b74>
  8025d8:	00800044 	movi	r2,1
  8025dc:	00000106 	br	8025e4 <tick+0x1b78>
  8025e0:	0005883a 	mov	r2,zero
  8025e4:	d0a78885 	stb	r2,-25054(gp)
      g120 = g1;
  8025e8:	d0a76143 	ldbu	r2,-25211(gp)
  8025ec:	d0a79705 	stb	r2,-24996(gp)
      g122 =(PRE_g121);
  8025f0:	d0a75f03 	ldbu	r2,-25220(gp)
  8025f4:	d0a77a85 	stb	r2,-25110(gp)
      g122b = g122;
  8025f8:	d0a77a83 	ldbu	r2,-25110(gp)
  8025fc:	d0a77c85 	stb	r2,-25102(gp)
      _cg122 = start_URI;
  802600:	d0a787c3 	ldbu	r2,-25057(gp)
  802604:	d0a78945 	stb	r2,-25051(gp)
      g121 =(g120||(g124&&_cg124)||(g122b&&(!(_cg122))));
  802608:	d0a79703 	ldbu	r2,-24996(gp)
  80260c:	10803fcc 	andi	r2,r2,255
  802610:	1080201c 	xori	r2,r2,128
  802614:	10bfe004 	addi	r2,r2,-128
  802618:	1000141e 	bne	r2,zero,80266c <tick+0x1c00>
  80261c:	d0a78a83 	ldbu	r2,-25046(gp)
  802620:	10803fcc 	andi	r2,r2,255
  802624:	1080201c 	xori	r2,r2,128
  802628:	10bfe004 	addi	r2,r2,-128
  80262c:	10000526 	beq	r2,zero,802644 <tick+0x1bd8>
  802630:	d0a77403 	ldbu	r2,-25136(gp)
  802634:	10803fcc 	andi	r2,r2,255
  802638:	1080201c 	xori	r2,r2,128
  80263c:	10bfe004 	addi	r2,r2,-128
  802640:	10000a1e 	bne	r2,zero,80266c <tick+0x1c00>
  802644:	d0a77c83 	ldbu	r2,-25102(gp)
  802648:	10803fcc 	andi	r2,r2,255
  80264c:	1080201c 	xori	r2,r2,128
  802650:	10bfe004 	addi	r2,r2,-128
  802654:	10000726 	beq	r2,zero,802674 <tick+0x1c08>
  802658:	d0a78943 	ldbu	r2,-25051(gp)
  80265c:	10803fcc 	andi	r2,r2,255
  802660:	1080201c 	xori	r2,r2,128
  802664:	10bfe004 	addi	r2,r2,-128
  802668:	1000021e 	bne	r2,zero,802674 <tick+0x1c08>
  80266c:	00800044 	movi	r2,1
  802670:	00000106 	br	802678 <tick+0x1c0c>
  802674:	0005883a 	mov	r2,zero
  802678:	d0a79645 	stb	r2,-24999(gp)
      g123 =(g125||(g122b&&_cg122));
  80267c:	d0a79243 	ldbu	r2,-25015(gp)
  802680:	10803fcc 	andi	r2,r2,255
  802684:	1080201c 	xori	r2,r2,128
  802688:	10bfe004 	addi	r2,r2,-128
  80268c:	10000a1e 	bne	r2,zero,8026b8 <tick+0x1c4c>
  802690:	d0a77c83 	ldbu	r2,-25102(gp)
  802694:	10803fcc 	andi	r2,r2,255
  802698:	1080201c 	xori	r2,r2,128
  80269c:	10bfe004 	addi	r2,r2,-128
  8026a0:	10000726 	beq	r2,zero,8026c0 <tick+0x1c54>
  8026a4:	d0a78943 	ldbu	r2,-25051(gp)
  8026a8:	10803fcc 	andi	r2,r2,255
  8026ac:	1080201c 	xori	r2,r2,128
  8026b0:	10bfe004 	addi	r2,r2,-128
  8026b4:	10000226 	beq	r2,zero,8026c0 <tick+0x1c54>
  8026b8:	00800044 	movi	r2,1
  8026bc:	00000106 	br	8026c4 <tick+0x1c58>
  8026c0:	0005883a 	mov	r2,zero
  8026c4:	d0a76085 	stb	r2,-25214(gp)
      g127 = g1;
  8026c8:	d0a76143 	ldbu	r2,-25211(gp)
  8026cc:	d0a75c85 	stb	r2,-25230(gp)
      g131 =(PRE_g130);
  8026d0:	d0a78603 	ldbu	r2,-25064(gp)
  8026d4:	d0a779c5 	stb	r2,-25113(gp)
      _cg131 = VRP_ex;
  8026d8:	d0a778c3 	ldbu	r2,-25117(gp)
  8026dc:	d0a78305 	stb	r2,-25076(gp)
      g129 =(PRE_g128);
  8026e0:	d0a75a03 	ldbu	r2,-25240(gp)
  8026e4:	d0a77985 	stb	r2,-25114(gp)
      g129b = g129;
  8026e8:	d0a77983 	ldbu	r2,-25114(gp)
  8026ec:	d0a79505 	stb	r2,-25004(gp)
      _cg129 = start_VRP;
  8026f0:	d0a768c3 	ldbu	r2,-25181(gp)
  8026f4:	d0a78bc5 	stb	r2,-25041(gp)
      g128 =(g127||(g131&&_cg131)||(g129b&&(!(_cg129))));
  8026f8:	d0a75c83 	ldbu	r2,-25230(gp)
  8026fc:	10803fcc 	andi	r2,r2,255
  802700:	1080201c 	xori	r2,r2,128
  802704:	10bfe004 	addi	r2,r2,-128
  802708:	1000141e 	bne	r2,zero,80275c <tick+0x1cf0>
  80270c:	d0a779c3 	ldbu	r2,-25113(gp)
  802710:	10803fcc 	andi	r2,r2,255
  802714:	1080201c 	xori	r2,r2,128
  802718:	10bfe004 	addi	r2,r2,-128
  80271c:	10000526 	beq	r2,zero,802734 <tick+0x1cc8>
  802720:	d0a78303 	ldbu	r2,-25076(gp)
  802724:	10803fcc 	andi	r2,r2,255
  802728:	1080201c 	xori	r2,r2,128
  80272c:	10bfe004 	addi	r2,r2,-128
  802730:	10000a1e 	bne	r2,zero,80275c <tick+0x1cf0>
  802734:	d0a79503 	ldbu	r2,-25004(gp)
  802738:	10803fcc 	andi	r2,r2,255
  80273c:	1080201c 	xori	r2,r2,128
  802740:	10bfe004 	addi	r2,r2,-128
  802744:	10000726 	beq	r2,zero,802764 <tick+0x1cf8>
  802748:	d0a78bc3 	ldbu	r2,-25041(gp)
  80274c:	10803fcc 	andi	r2,r2,255
  802750:	1080201c 	xori	r2,r2,128
  802754:	10bfe004 	addi	r2,r2,-128
  802758:	1000021e 	bne	r2,zero,802764 <tick+0x1cf8>
  80275c:	00800044 	movi	r2,1
  802760:	00000106 	br	802768 <tick+0x1cfc>
  802764:	0005883a 	mov	r2,zero
  802768:	d0a773c5 	stb	r2,-25137(gp)
      g132 =(g131&&(!(_cg131)));
  80276c:	d0a779c3 	ldbu	r2,-25113(gp)
  802770:	10803fcc 	andi	r2,r2,255
  802774:	1080201c 	xori	r2,r2,128
  802778:	10bfe004 	addi	r2,r2,-128
  80277c:	10000726 	beq	r2,zero,80279c <tick+0x1d30>
  802780:	d0a78303 	ldbu	r2,-25076(gp)
  802784:	10803fcc 	andi	r2,r2,255
  802788:	1080201c 	xori	r2,r2,128
  80278c:	10bfe004 	addi	r2,r2,-128
  802790:	1000021e 	bne	r2,zero,80279c <tick+0x1d30>
  802794:	00800044 	movi	r2,1
  802798:	00000106 	br	8027a0 <tick+0x1d34>
  80279c:	0005883a 	mov	r2,zero
  8027a0:	d0a76a45 	stb	r2,-25175(gp)
      if(g132){
  8027a4:	d0a76a43 	ldbu	r2,-25175(gp)
  8027a8:	10803fcc 	andi	r2,r2,255
  8027ac:	1080201c 	xori	r2,r2,128
  8027b0:	10bfe004 	addi	r2,r2,-128
  8027b4:	10000226 	beq	r2,zero,8027c0 <tick+0x1d54>
         VRP_counting =(VRP_counting||1);
  8027b8:	00800044 	movi	r2,1
  8027bc:	d0a77b85 	stb	r2,-25106(gp)
      }
      g130 =((g129b&&_cg129)||g132);
  8027c0:	d0a79503 	ldbu	r2,-25004(gp)
  8027c4:	10803fcc 	andi	r2,r2,255
  8027c8:	1080201c 	xori	r2,r2,128
  8027cc:	10bfe004 	addi	r2,r2,-128
  8027d0:	10000526 	beq	r2,zero,8027e8 <tick+0x1d7c>
  8027d4:	d0a78bc3 	ldbu	r2,-25041(gp)
  8027d8:	10803fcc 	andi	r2,r2,255
  8027dc:	1080201c 	xori	r2,r2,128
  8027e0:	10bfe004 	addi	r2,r2,-128
  8027e4:	1000051e 	bne	r2,zero,8027fc <tick+0x1d90>
  8027e8:	d0a76a43 	ldbu	r2,-25175(gp)
  8027ec:	10803fcc 	andi	r2,r2,255
  8027f0:	1080201c 	xori	r2,r2,128
  8027f4:	10bfe004 	addi	r2,r2,-128
  8027f8:	10000226 	beq	r2,zero,802804 <tick+0x1d98>
  8027fc:	00800044 	movi	r2,1
  802800:	00000106 	br	802808 <tick+0x1d9c>
  802804:	0005883a 	mov	r2,zero
  802808:	d0a794c5 	stb	r2,-25005(gp)
      g19_e1 =(!((g4||g6||g9||g13)));
  80280c:	d0a756c3 	ldbu	r2,-25253(gp)
  802810:	10803fcc 	andi	r2,r2,255
  802814:	1080201c 	xori	r2,r2,128
  802818:	10bfe004 	addi	r2,r2,-128
  80281c:	1000111e 	bne	r2,zero,802864 <tick+0x1df8>
  802820:	d0a788c3 	ldbu	r2,-25053(gp)
  802824:	10803fcc 	andi	r2,r2,255
  802828:	1080201c 	xori	r2,r2,128
  80282c:	10bfe004 	addi	r2,r2,-128
  802830:	10000c1e 	bne	r2,zero,802864 <tick+0x1df8>
  802834:	d0a75c43 	ldbu	r2,-25231(gp)
  802838:	10803fcc 	andi	r2,r2,255
  80283c:	1080201c 	xori	r2,r2,128
  802840:	10bfe004 	addi	r2,r2,-128
  802844:	1000071e 	bne	r2,zero,802864 <tick+0x1df8>
  802848:	d0a78643 	ldbu	r2,-25063(gp)
  80284c:	10803fcc 	andi	r2,r2,255
  802850:	1080201c 	xori	r2,r2,128
  802854:	10bfe004 	addi	r2,r2,-128
  802858:	1000021e 	bne	r2,zero,802864 <tick+0x1df8>
  80285c:	00800044 	movi	r2,1
  802860:	00000106 	br	802868 <tick+0x1dfc>
  802864:	0005883a 	mov	r2,zero
  802868:	d0a790c5 	stb	r2,-25021(gp)
      g32_e2 =(!((g22||g25||g27)));
  80286c:	d0a79083 	ldbu	r2,-25022(gp)
  802870:	10803fcc 	andi	r2,r2,255
  802874:	1080201c 	xori	r2,r2,128
  802878:	10bfe004 	addi	r2,r2,-128
  80287c:	10000c1e 	bne	r2,zero,8028b0 <tick+0x1e44>
  802880:	d0a78f83 	ldbu	r2,-25026(gp)
  802884:	10803fcc 	andi	r2,r2,255
  802888:	1080201c 	xori	r2,r2,128
  80288c:	10bfe004 	addi	r2,r2,-128
  802890:	1000071e 	bne	r2,zero,8028b0 <tick+0x1e44>
  802894:	d0a75943 	ldbu	r2,-25243(gp)
  802898:	10803fcc 	andi	r2,r2,255
  80289c:	1080201c 	xori	r2,r2,128
  8028a0:	10bfe004 	addi	r2,r2,-128
  8028a4:	1000021e 	bne	r2,zero,8028b0 <tick+0x1e44>
  8028a8:	00800044 	movi	r2,1
  8028ac:	00000106 	br	8028b4 <tick+0x1e48>
  8028b0:	0005883a 	mov	r2,zero
  8028b4:	d0a79605 	stb	r2,-25000(gp)
      g49_e3 =(!((g35||g38||g40)));
  8028b8:	d0a77c43 	ldbu	r2,-25103(gp)
  8028bc:	10803fcc 	andi	r2,r2,255
  8028c0:	1080201c 	xori	r2,r2,128
  8028c4:	10bfe004 	addi	r2,r2,-128
  8028c8:	10000c1e 	bne	r2,zero,8028fc <tick+0x1e90>
  8028cc:	d0a76b83 	ldbu	r2,-25170(gp)
  8028d0:	10803fcc 	andi	r2,r2,255
  8028d4:	1080201c 	xori	r2,r2,128
  8028d8:	10bfe004 	addi	r2,r2,-128
  8028dc:	1000071e 	bne	r2,zero,8028fc <tick+0x1e90>
  8028e0:	d0a755c3 	ldbu	r2,-25257(gp)
  8028e4:	10803fcc 	andi	r2,r2,255
  8028e8:	1080201c 	xori	r2,r2,128
  8028ec:	10bfe004 	addi	r2,r2,-128
  8028f0:	1000021e 	bne	r2,zero,8028fc <tick+0x1e90>
  8028f4:	00800044 	movi	r2,1
  8028f8:	00000106 	br	802900 <tick+0x1e94>
  8028fc:	0005883a 	mov	r2,zero
  802900:	d0a76185 	stb	r2,-25210(gp)
      g59_e4 =(!((g52||g55)));
  802904:	d0a76483 	ldbu	r2,-25198(gp)
  802908:	10803fcc 	andi	r2,r2,255
  80290c:	1080201c 	xori	r2,r2,128
  802910:	10bfe004 	addi	r2,r2,-128
  802914:	1000071e 	bne	r2,zero,802934 <tick+0x1ec8>
  802918:	d0a75843 	ldbu	r2,-25247(gp)
  80291c:	10803fcc 	andi	r2,r2,255
  802920:	1080201c 	xori	r2,r2,128
  802924:	10bfe004 	addi	r2,r2,-128
  802928:	1000021e 	bne	r2,zero,802934 <tick+0x1ec8>
  80292c:	00800044 	movi	r2,1
  802930:	00000106 	br	802938 <tick+0x1ecc>
  802934:	0005883a 	mov	r2,zero
  802938:	d0a793c5 	stb	r2,-25009(gp)
      g75_e5 =(!((g62||g65||g67||g70)));
  80293c:	d0a76743 	ldbu	r2,-25187(gp)
  802940:	10803fcc 	andi	r2,r2,255
  802944:	1080201c 	xori	r2,r2,128
  802948:	10bfe004 	addi	r2,r2,-128
  80294c:	1000111e 	bne	r2,zero,802994 <tick+0x1f28>
  802950:	d0a79043 	ldbu	r2,-25023(gp)
  802954:	10803fcc 	andi	r2,r2,255
  802958:	1080201c 	xori	r2,r2,128
  80295c:	10bfe004 	addi	r2,r2,-128
  802960:	10000c1e 	bne	r2,zero,802994 <tick+0x1f28>
  802964:	d0a797c3 	ldbu	r2,-24993(gp)
  802968:	10803fcc 	andi	r2,r2,255
  80296c:	1080201c 	xori	r2,r2,128
  802970:	10bfe004 	addi	r2,r2,-128
  802974:	1000071e 	bne	r2,zero,802994 <tick+0x1f28>
  802978:	d0a78803 	ldbu	r2,-25056(gp)
  80297c:	10803fcc 	andi	r2,r2,255
  802980:	1080201c 	xori	r2,r2,128
  802984:	10bfe004 	addi	r2,r2,-128
  802988:	1000021e 	bne	r2,zero,802994 <tick+0x1f28>
  80298c:	00800044 	movi	r2,1
  802990:	00000106 	br	802998 <tick+0x1f2c>
  802994:	0005883a 	mov	r2,zero
  802998:	d0a75b05 	stb	r2,-25236(gp)
      g91_e6 =(!((g78||g81||g88||g86)));
  80299c:	d0a77a03 	ldbu	r2,-25112(gp)
  8029a0:	10803fcc 	andi	r2,r2,255
  8029a4:	1080201c 	xori	r2,r2,128
  8029a8:	10bfe004 	addi	r2,r2,-128
  8029ac:	1000111e 	bne	r2,zero,8029f4 <tick+0x1f88>
  8029b0:	d0a78a03 	ldbu	r2,-25048(gp)
  8029b4:	10803fcc 	andi	r2,r2,255
  8029b8:	1080201c 	xori	r2,r2,128
  8029bc:	10bfe004 	addi	r2,r2,-128
  8029c0:	10000c1e 	bne	r2,zero,8029f4 <tick+0x1f88>
  8029c4:	d0a79343 	ldbu	r2,-25011(gp)
  8029c8:	10803fcc 	andi	r2,r2,255
  8029cc:	1080201c 	xori	r2,r2,128
  8029d0:	10bfe004 	addi	r2,r2,-128
  8029d4:	1000071e 	bne	r2,zero,8029f4 <tick+0x1f88>
  8029d8:	d0a780c3 	ldbu	r2,-25085(gp)
  8029dc:	10803fcc 	andi	r2,r2,255
  8029e0:	1080201c 	xori	r2,r2,128
  8029e4:	10bfe004 	addi	r2,r2,-128
  8029e8:	1000021e 	bne	r2,zero,8029f4 <tick+0x1f88>
  8029ec:	00800044 	movi	r2,1
  8029f0:	00000106 	br	8029f8 <tick+0x1f8c>
  8029f4:	0005883a 	mov	r2,zero
  8029f8:	d0a789c5 	stb	r2,-25049(gp)
      g98_e7 =(!((g94||g96)));
  8029fc:	d0a770c3 	ldbu	r2,-25149(gp)
  802a00:	10803fcc 	andi	r2,r2,255
  802a04:	1080201c 	xori	r2,r2,128
  802a08:	10bfe004 	addi	r2,r2,-128
  802a0c:	1000071e 	bne	r2,zero,802a2c <tick+0x1fc0>
  802a10:	d0a78343 	ldbu	r2,-25075(gp)
  802a14:	10803fcc 	andi	r2,r2,255
  802a18:	1080201c 	xori	r2,r2,128
  802a1c:	10bfe004 	addi	r2,r2,-128
  802a20:	1000021e 	bne	r2,zero,802a2c <tick+0x1fc0>
  802a24:	00800044 	movi	r2,1
  802a28:	00000106 	br	802a30 <tick+0x1fc4>
  802a2c:	0005883a 	mov	r2,zero
  802a30:	d0a79885 	stb	r2,-24990(gp)
      g105_e8 =(!((g101||g103)));
  802a34:	d0a77883 	ldbu	r2,-25118(gp)
  802a38:	10803fcc 	andi	r2,r2,255
  802a3c:	1080201c 	xori	r2,r2,128
  802a40:	10bfe004 	addi	r2,r2,-128
  802a44:	1000071e 	bne	r2,zero,802a64 <tick+0x1ff8>
  802a48:	d0a75ac3 	ldbu	r2,-25237(gp)
  802a4c:	10803fcc 	andi	r2,r2,255
  802a50:	1080201c 	xori	r2,r2,128
  802a54:	10bfe004 	addi	r2,r2,-128
  802a58:	1000021e 	bne	r2,zero,802a64 <tick+0x1ff8>
  802a5c:	00800044 	movi	r2,1
  802a60:	00000106 	br	802a68 <tick+0x1ffc>
  802a64:	0005883a 	mov	r2,zero
  802a68:	d0a75f45 	stb	r2,-25219(gp)
      g112_e9 =(!((g108||g110)));
  802a6c:	d0a75703 	ldbu	r2,-25252(gp)
  802a70:	10803fcc 	andi	r2,r2,255
  802a74:	1080201c 	xori	r2,r2,128
  802a78:	10bfe004 	addi	r2,r2,-128
  802a7c:	1000071e 	bne	r2,zero,802a9c <tick+0x2030>
  802a80:	d0a77103 	ldbu	r2,-25148(gp)
  802a84:	10803fcc 	andi	r2,r2,255
  802a88:	1080201c 	xori	r2,r2,128
  802a8c:	10bfe004 	addi	r2,r2,-128
  802a90:	1000021e 	bne	r2,zero,802a9c <tick+0x2030>
  802a94:	00800044 	movi	r2,1
  802a98:	00000106 	br	802aa0 <tick+0x2034>
  802a9c:	0005883a 	mov	r2,zero
  802aa0:	d0a77e05 	stb	r2,-25096(gp)
      g119_e10 =(!((g115||g117)));
  802aa4:	d0a75e83 	ldbu	r2,-25222(gp)
  802aa8:	10803fcc 	andi	r2,r2,255
  802aac:	1080201c 	xori	r2,r2,128
  802ab0:	10bfe004 	addi	r2,r2,-128
  802ab4:	1000071e 	bne	r2,zero,802ad4 <tick+0x2068>
  802ab8:	d0a76d03 	ldbu	r2,-25164(gp)
  802abc:	10803fcc 	andi	r2,r2,255
  802ac0:	1080201c 	xori	r2,r2,128
  802ac4:	10bfe004 	addi	r2,r2,-128
  802ac8:	1000021e 	bne	r2,zero,802ad4 <tick+0x2068>
  802acc:	00800044 	movi	r2,1
  802ad0:	00000106 	br	802ad8 <tick+0x206c>
  802ad4:	0005883a 	mov	r2,zero
  802ad8:	d0a76cc5 	stb	r2,-25165(gp)
      g126_e11 =(!((g122||g124)));
  802adc:	d0a77a83 	ldbu	r2,-25110(gp)
  802ae0:	10803fcc 	andi	r2,r2,255
  802ae4:	1080201c 	xori	r2,r2,128
  802ae8:	10bfe004 	addi	r2,r2,-128
  802aec:	1000071e 	bne	r2,zero,802b0c <tick+0x20a0>
  802af0:	d0a78a83 	ldbu	r2,-25046(gp)
  802af4:	10803fcc 	andi	r2,r2,255
  802af8:	1080201c 	xori	r2,r2,128
  802afc:	10bfe004 	addi	r2,r2,-128
  802b00:	1000021e 	bne	r2,zero,802b0c <tick+0x20a0>
  802b04:	00800044 	movi	r2,1
  802b08:	00000106 	br	802b10 <tick+0x20a4>
  802b0c:	0005883a 	mov	r2,zero
  802b10:	d0a76945 	stb	r2,-25179(gp)
      g133_e12 =(!((g129||g131)));
  802b14:	d0a77983 	ldbu	r2,-25114(gp)
  802b18:	10803fcc 	andi	r2,r2,255
  802b1c:	1080201c 	xori	r2,r2,128
  802b20:	10bfe004 	addi	r2,r2,-128
  802b24:	1000071e 	bne	r2,zero,802b44 <tick+0x20d8>
  802b28:	d0a779c3 	ldbu	r2,-25113(gp)
  802b2c:	10803fcc 	andi	r2,r2,255
  802b30:	1080201c 	xori	r2,r2,128
  802b34:	10bfe004 	addi	r2,r2,-128
  802b38:	1000021e 	bne	r2,zero,802b44 <tick+0x20d8>
  802b3c:	00800044 	movi	r2,1
  802b40:	00000106 	br	802b48 <tick+0x20dc>
  802b44:	0005883a 	mov	r2,zero
  802b48:	d0a79205 	stb	r2,-25016(gp)
      g134_fix0 =((g19_e1||g19)&&(g32_e2||g32)&&(g49_e3||g49)&&(g59_e4||g59));
  802b4c:	d0a790c3 	ldbu	r2,-25021(gp)
  802b50:	10803fcc 	andi	r2,r2,255
  802b54:	1080201c 	xori	r2,r2,128
  802b58:	10bfe004 	addi	r2,r2,-128
  802b5c:	1000051e 	bne	r2,zero,802b74 <tick+0x2108>
  802b60:	d0a75743 	ldbu	r2,-25251(gp)
  802b64:	10803fcc 	andi	r2,r2,255
  802b68:	1080201c 	xori	r2,r2,128
  802b6c:	10bfe004 	addi	r2,r2,-128
  802b70:	10002026 	beq	r2,zero,802bf4 <tick+0x2188>
  802b74:	d0a79603 	ldbu	r2,-25000(gp)
  802b78:	10803fcc 	andi	r2,r2,255
  802b7c:	1080201c 	xori	r2,r2,128
  802b80:	10bfe004 	addi	r2,r2,-128
  802b84:	1000051e 	bne	r2,zero,802b9c <tick+0x2130>
  802b88:	d0a792c3 	ldbu	r2,-25013(gp)
  802b8c:	10803fcc 	andi	r2,r2,255
  802b90:	1080201c 	xori	r2,r2,128
  802b94:	10bfe004 	addi	r2,r2,-128
  802b98:	10001626 	beq	r2,zero,802bf4 <tick+0x2188>
  802b9c:	d0a76183 	ldbu	r2,-25210(gp)
  802ba0:	10803fcc 	andi	r2,r2,255
  802ba4:	1080201c 	xori	r2,r2,128
  802ba8:	10bfe004 	addi	r2,r2,-128
  802bac:	1000051e 	bne	r2,zero,802bc4 <tick+0x2158>
  802bb0:	d0a77143 	ldbu	r2,-25147(gp)
  802bb4:	10803fcc 	andi	r2,r2,255
  802bb8:	1080201c 	xori	r2,r2,128
  802bbc:	10bfe004 	addi	r2,r2,-128
  802bc0:	10000c26 	beq	r2,zero,802bf4 <tick+0x2188>
  802bc4:	d0a793c3 	ldbu	r2,-25009(gp)
  802bc8:	10803fcc 	andi	r2,r2,255
  802bcc:	1080201c 	xori	r2,r2,128
  802bd0:	10bfe004 	addi	r2,r2,-128
  802bd4:	1000051e 	bne	r2,zero,802bec <tick+0x2180>
  802bd8:	d0a77543 	ldbu	r2,-25131(gp)
  802bdc:	10803fcc 	andi	r2,r2,255
  802be0:	1080201c 	xori	r2,r2,128
  802be4:	10bfe004 	addi	r2,r2,-128
  802be8:	10000226 	beq	r2,zero,802bf4 <tick+0x2188>
  802bec:	00800044 	movi	r2,1
  802bf0:	00000106 	br	802bf8 <tick+0x218c>
  802bf4:	0005883a 	mov	r2,zero
  802bf8:	d0a75885 	stb	r2,-25246(gp)
      g134_fix1 =(g134_fix0&&(g75_e5||g75)&&(g91_e6||g91)&&(g98_e7||g98));
  802bfc:	d0a75883 	ldbu	r2,-25246(gp)
  802c00:	10803fcc 	andi	r2,r2,255
  802c04:	1080201c 	xori	r2,r2,128
  802c08:	10bfe004 	addi	r2,r2,-128
  802c0c:	10002026 	beq	r2,zero,802c90 <tick+0x2224>
  802c10:	d0a75b03 	ldbu	r2,-25236(gp)
  802c14:	10803fcc 	andi	r2,r2,255
  802c18:	1080201c 	xori	r2,r2,128
  802c1c:	10bfe004 	addi	r2,r2,-128
  802c20:	1000051e 	bne	r2,zero,802c38 <tick+0x21cc>
  802c24:	d0a78c83 	ldbu	r2,-25038(gp)
  802c28:	10803fcc 	andi	r2,r2,255
  802c2c:	1080201c 	xori	r2,r2,128
  802c30:	10bfe004 	addi	r2,r2,-128
  802c34:	10001626 	beq	r2,zero,802c90 <tick+0x2224>
  802c38:	d0a789c3 	ldbu	r2,-25049(gp)
  802c3c:	10803fcc 	andi	r2,r2,255
  802c40:	1080201c 	xori	r2,r2,128
  802c44:	10bfe004 	addi	r2,r2,-128
  802c48:	1000051e 	bne	r2,zero,802c60 <tick+0x21f4>
  802c4c:	d0a75603 	ldbu	r2,-25256(gp)
  802c50:	10803fcc 	andi	r2,r2,255
  802c54:	1080201c 	xori	r2,r2,128
  802c58:	10bfe004 	addi	r2,r2,-128
  802c5c:	10000c26 	beq	r2,zero,802c90 <tick+0x2224>
  802c60:	d0a79883 	ldbu	r2,-24990(gp)
  802c64:	10803fcc 	andi	r2,r2,255
  802c68:	1080201c 	xori	r2,r2,128
  802c6c:	10bfe004 	addi	r2,r2,-128
  802c70:	1000051e 	bne	r2,zero,802c88 <tick+0x221c>
  802c74:	d0a78683 	ldbu	r2,-25062(gp)
  802c78:	10803fcc 	andi	r2,r2,255
  802c7c:	1080201c 	xori	r2,r2,128
  802c80:	10bfe004 	addi	r2,r2,-128
  802c84:	10000226 	beq	r2,zero,802c90 <tick+0x2224>
  802c88:	00800044 	movi	r2,1
  802c8c:	00000106 	br	802c94 <tick+0x2228>
  802c90:	0005883a 	mov	r2,zero
  802c94:	d0a76205 	stb	r2,-25208(gp)
      g134_fix2 =(g19||g32||g49||g59);
  802c98:	d0a75743 	ldbu	r2,-25251(gp)
  802c9c:	10803fcc 	andi	r2,r2,255
  802ca0:	1080201c 	xori	r2,r2,128
  802ca4:	10bfe004 	addi	r2,r2,-128
  802ca8:	10000f1e 	bne	r2,zero,802ce8 <tick+0x227c>
  802cac:	d0a792c3 	ldbu	r2,-25013(gp)
  802cb0:	10803fcc 	andi	r2,r2,255
  802cb4:	1080201c 	xori	r2,r2,128
  802cb8:	10bfe004 	addi	r2,r2,-128
  802cbc:	10000a1e 	bne	r2,zero,802ce8 <tick+0x227c>
  802cc0:	d0a77143 	ldbu	r2,-25147(gp)
  802cc4:	10803fcc 	andi	r2,r2,255
  802cc8:	1080201c 	xori	r2,r2,128
  802ccc:	10bfe004 	addi	r2,r2,-128
  802cd0:	1000051e 	bne	r2,zero,802ce8 <tick+0x227c>
  802cd4:	d0a77543 	ldbu	r2,-25131(gp)
  802cd8:	10803fcc 	andi	r2,r2,255
  802cdc:	1080201c 	xori	r2,r2,128
  802ce0:	10bfe004 	addi	r2,r2,-128
  802ce4:	10000226 	beq	r2,zero,802cf0 <tick+0x2284>
  802ce8:	00800044 	movi	r2,1
  802cec:	00000106 	br	802cf4 <tick+0x2288>
  802cf0:	0005883a 	mov	r2,zero
  802cf4:	d0a76645 	stb	r2,-25191(gp)
      g134_fix3 =(g134_fix2||g75||g91||g98);
  802cf8:	d0a76643 	ldbu	r2,-25191(gp)
  802cfc:	10803fcc 	andi	r2,r2,255
  802d00:	1080201c 	xori	r2,r2,128
  802d04:	10bfe004 	addi	r2,r2,-128
  802d08:	10000f1e 	bne	r2,zero,802d48 <tick+0x22dc>
  802d0c:	d0a78c83 	ldbu	r2,-25038(gp)
  802d10:	10803fcc 	andi	r2,r2,255
  802d14:	1080201c 	xori	r2,r2,128
  802d18:	10bfe004 	addi	r2,r2,-128
  802d1c:	10000a1e 	bne	r2,zero,802d48 <tick+0x22dc>
  802d20:	d0a75603 	ldbu	r2,-25256(gp)
  802d24:	10803fcc 	andi	r2,r2,255
  802d28:	1080201c 	xori	r2,r2,128
  802d2c:	10bfe004 	addi	r2,r2,-128
  802d30:	1000051e 	bne	r2,zero,802d48 <tick+0x22dc>
  802d34:	d0a78683 	ldbu	r2,-25062(gp)
  802d38:	10803fcc 	andi	r2,r2,255
  802d3c:	1080201c 	xori	r2,r2,128
  802d40:	10bfe004 	addi	r2,r2,-128
  802d44:	10000226 	beq	r2,zero,802d50 <tick+0x22e4>
  802d48:	00800044 	movi	r2,1
  802d4c:	00000106 	br	802d54 <tick+0x22e8>
  802d50:	0005883a 	mov	r2,zero
  802d54:	d0a75985 	stb	r2,-25242(gp)
      g134_e1_fix_fix =(g117||g124||g131||g25||g38||g55||g65||g81||g9||g27||g40||g67||g88||g86);
  802d58:	d0a76d03 	ldbu	r2,-25164(gp)
  802d5c:	10803fcc 	andi	r2,r2,255
  802d60:	1080201c 	xori	r2,r2,128
  802d64:	10bfe004 	addi	r2,r2,-128
  802d68:	1000411e 	bne	r2,zero,802e70 <tick+0x2404>
  802d6c:	d0a78a83 	ldbu	r2,-25046(gp)
  802d70:	10803fcc 	andi	r2,r2,255
  802d74:	1080201c 	xori	r2,r2,128
  802d78:	10bfe004 	addi	r2,r2,-128
  802d7c:	10003c1e 	bne	r2,zero,802e70 <tick+0x2404>
  802d80:	d0a779c3 	ldbu	r2,-25113(gp)
  802d84:	10803fcc 	andi	r2,r2,255
  802d88:	1080201c 	xori	r2,r2,128
  802d8c:	10bfe004 	addi	r2,r2,-128
  802d90:	1000371e 	bne	r2,zero,802e70 <tick+0x2404>
  802d94:	d0a78f83 	ldbu	r2,-25026(gp)
  802d98:	10803fcc 	andi	r2,r2,255
  802d9c:	1080201c 	xori	r2,r2,128
  802da0:	10bfe004 	addi	r2,r2,-128
  802da4:	1000321e 	bne	r2,zero,802e70 <tick+0x2404>
  802da8:	d0a76b83 	ldbu	r2,-25170(gp)
  802dac:	10803fcc 	andi	r2,r2,255
  802db0:	1080201c 	xori	r2,r2,128
  802db4:	10bfe004 	addi	r2,r2,-128
  802db8:	10002d1e 	bne	r2,zero,802e70 <tick+0x2404>
  802dbc:	d0a75843 	ldbu	r2,-25247(gp)
  802dc0:	10803fcc 	andi	r2,r2,255
  802dc4:	1080201c 	xori	r2,r2,128
  802dc8:	10bfe004 	addi	r2,r2,-128
  802dcc:	1000281e 	bne	r2,zero,802e70 <tick+0x2404>
  802dd0:	d0a79043 	ldbu	r2,-25023(gp)
  802dd4:	10803fcc 	andi	r2,r2,255
  802dd8:	1080201c 	xori	r2,r2,128
  802ddc:	10bfe004 	addi	r2,r2,-128
  802de0:	1000231e 	bne	r2,zero,802e70 <tick+0x2404>
  802de4:	d0a78a03 	ldbu	r2,-25048(gp)
  802de8:	10803fcc 	andi	r2,r2,255
  802dec:	1080201c 	xori	r2,r2,128
  802df0:	10bfe004 	addi	r2,r2,-128
  802df4:	10001e1e 	bne	r2,zero,802e70 <tick+0x2404>
  802df8:	d0a75c43 	ldbu	r2,-25231(gp)
  802dfc:	10803fcc 	andi	r2,r2,255
  802e00:	1080201c 	xori	r2,r2,128
  802e04:	10bfe004 	addi	r2,r2,-128
  802e08:	1000191e 	bne	r2,zero,802e70 <tick+0x2404>
  802e0c:	d0a75943 	ldbu	r2,-25243(gp)
  802e10:	10803fcc 	andi	r2,r2,255
  802e14:	1080201c 	xori	r2,r2,128
  802e18:	10bfe004 	addi	r2,r2,-128
  802e1c:	1000141e 	bne	r2,zero,802e70 <tick+0x2404>
  802e20:	d0a755c3 	ldbu	r2,-25257(gp)
  802e24:	10803fcc 	andi	r2,r2,255
  802e28:	1080201c 	xori	r2,r2,128
  802e2c:	10bfe004 	addi	r2,r2,-128
  802e30:	10000f1e 	bne	r2,zero,802e70 <tick+0x2404>
  802e34:	d0a797c3 	ldbu	r2,-24993(gp)
  802e38:	10803fcc 	andi	r2,r2,255
  802e3c:	1080201c 	xori	r2,r2,128
  802e40:	10bfe004 	addi	r2,r2,-128
  802e44:	10000a1e 	bne	r2,zero,802e70 <tick+0x2404>
  802e48:	d0a79343 	ldbu	r2,-25011(gp)
  802e4c:	10803fcc 	andi	r2,r2,255
  802e50:	1080201c 	xori	r2,r2,128
  802e54:	10bfe004 	addi	r2,r2,-128
  802e58:	1000051e 	bne	r2,zero,802e70 <tick+0x2404>
  802e5c:	d0a780c3 	ldbu	r2,-25085(gp)
  802e60:	10803fcc 	andi	r2,r2,255
  802e64:	1080201c 	xori	r2,r2,128
  802e68:	10bfe004 	addi	r2,r2,-128
  802e6c:	10000226 	beq	r2,zero,802e78 <tick+0x240c>
  802e70:	00800044 	movi	r2,1
  802e74:	00000106 	br	802e7c <tick+0x2410>
  802e78:	0005883a 	mov	r2,zero
  802e7c:	d0a772c5 	stb	r2,-25141(gp)
      g134_e1_fix =(g108||g115||g122||g129||g6||g96||g103||g110||g13||g134_e1_fix_fix);
  802e80:	d0a75703 	ldbu	r2,-25252(gp)
  802e84:	10803fcc 	andi	r2,r2,255
  802e88:	1080201c 	xori	r2,r2,128
  802e8c:	10bfe004 	addi	r2,r2,-128
  802e90:	10002d1e 	bne	r2,zero,802f48 <tick+0x24dc>
  802e94:	d0a75e83 	ldbu	r2,-25222(gp)
  802e98:	10803fcc 	andi	r2,r2,255
  802e9c:	1080201c 	xori	r2,r2,128
  802ea0:	10bfe004 	addi	r2,r2,-128
  802ea4:	1000281e 	bne	r2,zero,802f48 <tick+0x24dc>
  802ea8:	d0a77a83 	ldbu	r2,-25110(gp)
  802eac:	10803fcc 	andi	r2,r2,255
  802eb0:	1080201c 	xori	r2,r2,128
  802eb4:	10bfe004 	addi	r2,r2,-128
  802eb8:	1000231e 	bne	r2,zero,802f48 <tick+0x24dc>
  802ebc:	d0a77983 	ldbu	r2,-25114(gp)
  802ec0:	10803fcc 	andi	r2,r2,255
  802ec4:	1080201c 	xori	r2,r2,128
  802ec8:	10bfe004 	addi	r2,r2,-128
  802ecc:	10001e1e 	bne	r2,zero,802f48 <tick+0x24dc>
  802ed0:	d0a788c3 	ldbu	r2,-25053(gp)
  802ed4:	10803fcc 	andi	r2,r2,255
  802ed8:	1080201c 	xori	r2,r2,128
  802edc:	10bfe004 	addi	r2,r2,-128
  802ee0:	1000191e 	bne	r2,zero,802f48 <tick+0x24dc>
  802ee4:	d0a78343 	ldbu	r2,-25075(gp)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	1000141e 	bne	r2,zero,802f48 <tick+0x24dc>
  802ef8:	d0a75ac3 	ldbu	r2,-25237(gp)
  802efc:	10803fcc 	andi	r2,r2,255
  802f00:	1080201c 	xori	r2,r2,128
  802f04:	10bfe004 	addi	r2,r2,-128
  802f08:	10000f1e 	bne	r2,zero,802f48 <tick+0x24dc>
  802f0c:	d0a77103 	ldbu	r2,-25148(gp)
  802f10:	10803fcc 	andi	r2,r2,255
  802f14:	1080201c 	xori	r2,r2,128
  802f18:	10bfe004 	addi	r2,r2,-128
  802f1c:	10000a1e 	bne	r2,zero,802f48 <tick+0x24dc>
  802f20:	d0a78643 	ldbu	r2,-25063(gp)
  802f24:	10803fcc 	andi	r2,r2,255
  802f28:	1080201c 	xori	r2,r2,128
  802f2c:	10bfe004 	addi	r2,r2,-128
  802f30:	1000051e 	bne	r2,zero,802f48 <tick+0x24dc>
  802f34:	d0a772c3 	ldbu	r2,-25141(gp)
  802f38:	10803fcc 	andi	r2,r2,255
  802f3c:	1080201c 	xori	r2,r2,128
  802f40:	10bfe004 	addi	r2,r2,-128
  802f44:	10000226 	beq	r2,zero,802f50 <tick+0x24e4>
  802f48:	00800044 	movi	r2,1
  802f4c:	00000106 	br	802f54 <tick+0x24e8>
  802f50:	0005883a 	mov	r2,zero
  802f54:	d0a76505 	stb	r2,-25196(gp)
      g134_e1 =(!((g4||g22||g35||g52||g62||g78||g94||g101||g70||g134_e1_fix)));
  802f58:	d0a756c3 	ldbu	r2,-25253(gp)
  802f5c:	10803fcc 	andi	r2,r2,255
  802f60:	1080201c 	xori	r2,r2,128
  802f64:	10bfe004 	addi	r2,r2,-128
  802f68:	10002f1e 	bne	r2,zero,803028 <tick+0x25bc>
  802f6c:	d0a79083 	ldbu	r2,-25022(gp)
  802f70:	10803fcc 	andi	r2,r2,255
  802f74:	1080201c 	xori	r2,r2,128
  802f78:	10bfe004 	addi	r2,r2,-128
  802f7c:	10002a1e 	bne	r2,zero,803028 <tick+0x25bc>
  802f80:	d0a77c43 	ldbu	r2,-25103(gp)
  802f84:	10803fcc 	andi	r2,r2,255
  802f88:	1080201c 	xori	r2,r2,128
  802f8c:	10bfe004 	addi	r2,r2,-128
  802f90:	1000251e 	bne	r2,zero,803028 <tick+0x25bc>
  802f94:	d0a76483 	ldbu	r2,-25198(gp)
  802f98:	10803fcc 	andi	r2,r2,255
  802f9c:	1080201c 	xori	r2,r2,128
  802fa0:	10bfe004 	addi	r2,r2,-128
  802fa4:	1000201e 	bne	r2,zero,803028 <tick+0x25bc>
  802fa8:	d0a76743 	ldbu	r2,-25187(gp)
  802fac:	10803fcc 	andi	r2,r2,255
  802fb0:	1080201c 	xori	r2,r2,128
  802fb4:	10bfe004 	addi	r2,r2,-128
  802fb8:	10001b1e 	bne	r2,zero,803028 <tick+0x25bc>
  802fbc:	d0a77a03 	ldbu	r2,-25112(gp)
  802fc0:	10803fcc 	andi	r2,r2,255
  802fc4:	1080201c 	xori	r2,r2,128
  802fc8:	10bfe004 	addi	r2,r2,-128
  802fcc:	1000161e 	bne	r2,zero,803028 <tick+0x25bc>
  802fd0:	d0a770c3 	ldbu	r2,-25149(gp)
  802fd4:	10803fcc 	andi	r2,r2,255
  802fd8:	1080201c 	xori	r2,r2,128
  802fdc:	10bfe004 	addi	r2,r2,-128
  802fe0:	1000111e 	bne	r2,zero,803028 <tick+0x25bc>
  802fe4:	d0a77883 	ldbu	r2,-25118(gp)
  802fe8:	10803fcc 	andi	r2,r2,255
  802fec:	1080201c 	xori	r2,r2,128
  802ff0:	10bfe004 	addi	r2,r2,-128
  802ff4:	10000c1e 	bne	r2,zero,803028 <tick+0x25bc>
  802ff8:	d0a78803 	ldbu	r2,-25056(gp)
  802ffc:	10803fcc 	andi	r2,r2,255
  803000:	1080201c 	xori	r2,r2,128
  803004:	10bfe004 	addi	r2,r2,-128
  803008:	1000071e 	bne	r2,zero,803028 <tick+0x25bc>
  80300c:	d0a76503 	ldbu	r2,-25196(gp)
  803010:	10803fcc 	andi	r2,r2,255
  803014:	1080201c 	xori	r2,r2,128
  803018:	10bfe004 	addi	r2,r2,-128
  80301c:	1000021e 	bne	r2,zero,803028 <tick+0x25bc>
  803020:	00800044 	movi	r2,1
  803024:	00000106 	br	80302c <tick+0x25c0>
  803028:	0005883a 	mov	r2,zero
  80302c:	d0a78d45 	stb	r2,-25035(gp)
      g138_e2 =(!(g137));
  803030:	d0a78b43 	ldbu	r2,-25043(gp)
  803034:	10803fcc 	andi	r2,r2,255
  803038:	1080201c 	xori	r2,r2,128
  80303c:	10bfe004 	addi	r2,r2,-128
  803040:	1005003a 	cmpeq	r2,r2,zero
  803044:	d0a75785 	stb	r2,-25250(gp)
   }
   PRE_g3 = g3;
  803048:	d0a75a43 	ldbu	r2,-25239(gp)
  80304c:	d0a75e05 	stb	r2,-25224(gp)
   PRE_g5 = g5;
  803050:	d0a77083 	ldbu	r2,-25150(gp)
  803054:	d0a79585 	stb	r2,-25002(gp)
   PRE_g8 = g8;
  803058:	d0a78703 	ldbu	r2,-25060(gp)
  80305c:	d0a76905 	stb	r2,-25180(gp)
   PRE_g12 = g12;
  803060:	d0a76403 	ldbu	r2,-25200(gp)
  803064:	d0a76fc5 	stb	r2,-25153(gp)
   PRE_g21 = g21;
  803068:	d0a76f43 	ldbu	r2,-25155(gp)
  80306c:	d0a78e05 	stb	r2,-25032(gp)
   PRE_g24 = g24;
  803070:	d0a79803 	ldbu	r2,-24992(gp)
  803074:	d0a763c5 	stb	r2,-25201(gp)
   PRE_g26 = g26;
  803078:	d0a79b03 	ldbu	r2,-24980(gp)
  80307c:	d0a79305 	stb	r2,-25012(gp)
   PRE_g34 = g34;
  803080:	d0a77043 	ldbu	r2,-25151(gp)
  803084:	d0a76605 	stb	r2,-25192(gp)
   PRE_g37 = g37;
  803088:	d0a76703 	ldbu	r2,-25188(gp)
  80308c:	d0a79b45 	stb	r2,-24979(gp)
   PRE_g39 = g39;
  803090:	d0a79683 	ldbu	r2,-24998(gp)
  803094:	d0a75ec5 	stb	r2,-25221(gp)
   PRE_g51 = g51;
  803098:	d0a78383 	ldbu	r2,-25074(gp)
  80309c:	d0a75905 	stb	r2,-25244(gp)
   PRE_g54 = g54;
  8030a0:	d0a775c3 	ldbu	r2,-25129(gp)
  8030a4:	d0a77e45 	stb	r2,-25095(gp)
   PRE_g61 = g61;
  8030a8:	d0a761c3 	ldbu	r2,-25209(gp)
  8030ac:	d0a78585 	stb	r2,-25066(gp)
   PRE_g64 = g64;
  8030b0:	d0a76f03 	ldbu	r2,-25156(gp)
  8030b4:	d0a79545 	stb	r2,-25003(gp)
   PRE_g66 = g66;
  8030b8:	d0a77603 	ldbu	r2,-25128(gp)
  8030bc:	d0a78dc5 	stb	r2,-25033(gp)
   PRE_g69 = g69;
  8030c0:	d0a79ac3 	ldbu	r2,-24981(gp)
  8030c4:	d0a76385 	stb	r2,-25202(gp)
   PRE_g77 = g77;
  8030c8:	d0a79283 	ldbu	r2,-25014(gp)
  8030cc:	d0a765c5 	stb	r2,-25193(gp)
   PRE_g80 = g80;
  8030d0:	d0a77343 	ldbu	r2,-25139(gp)
  8030d4:	d0a77385 	stb	r2,-25138(gp)
   PRE_g85 = g85;
  8030d8:	d0a75b83 	ldbu	r2,-25234(gp)
  8030dc:	d0a76885 	stb	r2,-25182(gp)
   PRE_g87 = g87;
  8030e0:	d0a76003 	ldbu	r2,-25216(gp)
  8030e4:	d0a76c85 	stb	r2,-25166(gp)
   PRE_g93 = g93;
  8030e8:	d0a78003 	ldbu	r2,-25088(gp)
  8030ec:	d0a78fc5 	stb	r2,-25025(gp)
   PRE_g95 = g95;
  8030f0:	d0a78283 	ldbu	r2,-25078(gp)
  8030f4:	d0a75685 	stb	r2,-25254(gp)
   PRE_g100 = g100;
  8030f8:	d0a774c3 	ldbu	r2,-25133(gp)
  8030fc:	d0a78c45 	stb	r2,-25039(gp)
   PRE_g102 = g102;
  803100:	d0a75e43 	ldbu	r2,-25223(gp)
  803104:	d0a75805 	stb	r2,-25248(gp)
   PRE_g107 = g107;
  803108:	d0a78483 	ldbu	r2,-25070(gp)
  80310c:	d0a77f85 	stb	r2,-25090(gp)
   PRE_g109 = g109;
  803110:	d0a798c3 	ldbu	r2,-24989(gp)
  803114:	d0a76785 	stb	r2,-25186(gp)
   PRE_g114 = g114;
  803118:	d0a77903 	ldbu	r2,-25116(gp)
  80311c:	d0a75c05 	stb	r2,-25232(gp)
   PRE_g116 = g116;
  803120:	d0a78883 	ldbu	r2,-25054(gp)
  803124:	d0a76c45 	stb	r2,-25167(gp)
   PRE_g121 = g121;
  803128:	d0a79643 	ldbu	r2,-24999(gp)
  80312c:	d0a75f05 	stb	r2,-25220(gp)
   PRE_g123 = g123;
  803130:	d0a76083 	ldbu	r2,-25214(gp)
  803134:	d0a76d45 	stb	r2,-25163(gp)
   PRE_g128 = g128;
  803138:	d0a773c3 	ldbu	r2,-25137(gp)
  80313c:	d0a75a05 	stb	r2,-25240(gp)
   PRE_g130 = g130;
  803140:	d0a794c3 	ldbu	r2,-25005(gp)
  803144:	d0a78605 	stb	r2,-25064(gp)
   PRE_g136 = g136;
  803148:	d0a77443 	ldbu	r2,-25135(gp)
  80314c:	d0a76985 	stb	r2,-25178(gp)
   _PRE_GO = _GO;
  803150:	d0a77dc3 	ldbu	r2,-25097(gp)
  803154:	10803fcc 	andi	r2,r2,255
  803158:	1080201c 	xori	r2,r2,128
  80315c:	10bfe004 	addi	r2,r2,-128
  803160:	d0a75d15 	stw	r2,-25228(gp)
   return;
  803164:	0001883a 	nop
}
  803168:	e037883a 	mov	sp,fp
  80316c:	df000017 	ldw	fp,0(sp)
  803170:	dec00104 	addi	sp,sp,4
  803174:	f800283a 	ret

00803178 <_fopen_r>:
  803178:	defffa04 	addi	sp,sp,-24
  80317c:	3005883a 	mov	r2,r6
  803180:	dcc00415 	stw	r19,16(sp)
  803184:	d80d883a 	mov	r6,sp
  803188:	2827883a 	mov	r19,r5
  80318c:	100b883a 	mov	r5,r2
  803190:	dc800315 	stw	r18,12(sp)
  803194:	dfc00515 	stw	ra,20(sp)
  803198:	dc400215 	stw	r17,8(sp)
  80319c:	dc000115 	stw	r16,4(sp)
  8031a0:	2025883a 	mov	r18,r4
  8031a4:	08090100 	call	809010 <__sflags>
  8031a8:	10002726 	beq	r2,zero,803248 <_fopen_r+0xd0>
  8031ac:	9009883a 	mov	r4,r18
  8031b0:	1023883a 	mov	r17,r2
  8031b4:	0808e900 	call	808e90 <__sfp>
  8031b8:	1021883a 	mov	r16,r2
  8031bc:	10002226 	beq	r2,zero,803248 <_fopen_r+0xd0>
  8031c0:	d9800017 	ldw	r6,0(sp)
  8031c4:	01c06d84 	movi	r7,438
  8031c8:	980b883a 	mov	r5,r19
  8031cc:	9009883a 	mov	r4,r18
  8031d0:	08043f00 	call	8043f0 <_open_r>
  8031d4:	10001916 	blt	r2,zero,80323c <_fopen_r+0xc4>
  8031d8:	8080038d 	sth	r2,14(r16)
  8031dc:	00802034 	movhi	r2,128
  8031e0:	10924f04 	addi	r2,r2,18748
  8031e4:	80800815 	stw	r2,32(r16)
  8031e8:	00802034 	movhi	r2,128
  8031ec:	10926604 	addi	r2,r2,18840
  8031f0:	80800915 	stw	r2,36(r16)
  8031f4:	00802034 	movhi	r2,128
  8031f8:	10928504 	addi	r2,r2,18964
  8031fc:	80800a15 	stw	r2,40(r16)
  803200:	00802034 	movhi	r2,128
  803204:	10929c04 	addi	r2,r2,19056
  803208:	8440030d 	sth	r17,12(r16)
  80320c:	84000715 	stw	r16,28(r16)
  803210:	80800b15 	stw	r2,44(r16)
  803214:	8c40400c 	andi	r17,r17,256
  803218:	88000d1e 	bne	r17,zero,803250 <_fopen_r+0xd8>
  80321c:	8005883a 	mov	r2,r16
  803220:	dfc00517 	ldw	ra,20(sp)
  803224:	dcc00417 	ldw	r19,16(sp)
  803228:	dc800317 	ldw	r18,12(sp)
  80322c:	dc400217 	ldw	r17,8(sp)
  803230:	dc000117 	ldw	r16,4(sp)
  803234:	dec00604 	addi	sp,sp,24
  803238:	f800283a 	ret
  80323c:	0808fd00 	call	808fd0 <__sfp_lock_acquire>
  803240:	8000030d 	sth	zero,12(r16)
  803244:	0808fd40 	call	808fd4 <__sfp_lock_release>
  803248:	0005883a 	mov	r2,zero
  80324c:	003ff406 	br	803220 <__alt_mem_onchip_mem+0xff783220>
  803250:	01c00084 	movi	r7,2
  803254:	000d883a 	mov	r6,zero
  803258:	800b883a 	mov	r5,r16
  80325c:	9009883a 	mov	r4,r18
  803260:	08033240 	call	803324 <_fseek_r>
  803264:	8005883a 	mov	r2,r16
  803268:	003fed06 	br	803220 <__alt_mem_onchip_mem+0xff783220>

0080326c <fopen>:
  80326c:	00802074 	movhi	r2,129
  803270:	109aef04 	addi	r2,r2,27580
  803274:	280d883a 	mov	r6,r5
  803278:	200b883a 	mov	r5,r4
  80327c:	11000017 	ldw	r4,0(r2)
  803280:	08031781 	jmpi	803178 <_fopen_r>

00803284 <_fputc_r>:
  803284:	defffc04 	addi	sp,sp,-16
  803288:	dc000215 	stw	r16,8(sp)
  80328c:	dfc00315 	stw	ra,12(sp)
  803290:	2021883a 	mov	r16,r4
  803294:	20000726 	beq	r4,zero,8032b4 <_fputc_r+0x30>
  803298:	20800e17 	ldw	r2,56(r4)
  80329c:	1000051e 	bne	r2,zero,8032b4 <_fputc_r+0x30>
  8032a0:	d9400015 	stw	r5,0(sp)
  8032a4:	d9800115 	stw	r6,4(sp)
  8032a8:	0808fc00 	call	808fc0 <__sinit>
  8032ac:	d9800117 	ldw	r6,4(sp)
  8032b0:	d9400017 	ldw	r5,0(sp)
  8032b4:	8009883a 	mov	r4,r16
  8032b8:	dfc00317 	ldw	ra,12(sp)
  8032bc:	dc000217 	ldw	r16,8(sp)
  8032c0:	dec00404 	addi	sp,sp,16
  8032c4:	08044bc1 	jmpi	8044bc <_putc_r>

008032c8 <fputc>:
  8032c8:	00802074 	movhi	r2,129
  8032cc:	defffc04 	addi	sp,sp,-16
  8032d0:	109aef04 	addi	r2,r2,27580
  8032d4:	dc000115 	stw	r16,4(sp)
  8032d8:	14000017 	ldw	r16,0(r2)
  8032dc:	dc400215 	stw	r17,8(sp)
  8032e0:	dfc00315 	stw	ra,12(sp)
  8032e4:	2023883a 	mov	r17,r4
  8032e8:	80000626 	beq	r16,zero,803304 <fputc+0x3c>
  8032ec:	80800e17 	ldw	r2,56(r16)
  8032f0:	1000041e 	bne	r2,zero,803304 <fputc+0x3c>
  8032f4:	8009883a 	mov	r4,r16
  8032f8:	d9400015 	stw	r5,0(sp)
  8032fc:	0808fc00 	call	808fc0 <__sinit>
  803300:	d9400017 	ldw	r5,0(sp)
  803304:	280d883a 	mov	r6,r5
  803308:	8009883a 	mov	r4,r16
  80330c:	880b883a 	mov	r5,r17
  803310:	dfc00317 	ldw	ra,12(sp)
  803314:	dc400217 	ldw	r17,8(sp)
  803318:	dc000117 	ldw	r16,4(sp)
  80331c:	dec00404 	addi	sp,sp,16
  803320:	08044bc1 	jmpi	8044bc <_putc_r>

00803324 <_fseek_r>:
  803324:	08033441 	jmpi	803344 <_fseeko_r>

00803328 <fseek>:
  803328:	00802074 	movhi	r2,129
  80332c:	109aef04 	addi	r2,r2,27580
  803330:	300f883a 	mov	r7,r6
  803334:	280d883a 	mov	r6,r5
  803338:	200b883a 	mov	r5,r4
  80333c:	11000017 	ldw	r4,0(r2)
  803340:	08033441 	jmpi	803344 <_fseeko_r>

00803344 <_fseeko_r>:
  803344:	deffe804 	addi	sp,sp,-96
  803348:	dd401415 	stw	r21,80(sp)
  80334c:	dc801115 	stw	r18,68(sp)
  803350:	dc401015 	stw	r17,64(sp)
  803354:	dc000f15 	stw	r16,60(sp)
  803358:	dfc01715 	stw	ra,92(sp)
  80335c:	ddc01615 	stw	r23,88(sp)
  803360:	dd801515 	stw	r22,84(sp)
  803364:	dd001315 	stw	r20,76(sp)
  803368:	dcc01215 	stw	r19,72(sp)
  80336c:	2023883a 	mov	r17,r4
  803370:	2821883a 	mov	r16,r5
  803374:	302b883a 	mov	r21,r6
  803378:	3825883a 	mov	r18,r7
  80337c:	20000226 	beq	r4,zero,803388 <_fseeko_r+0x44>
  803380:	20800e17 	ldw	r2,56(r4)
  803384:	10005a26 	beq	r2,zero,8034f0 <_fseeko_r+0x1ac>
  803388:	8080030b 	ldhu	r2,12(r16)
  80338c:	00c04204 	movi	r3,264
  803390:	1080420c 	andi	r2,r2,264
  803394:	10c05b26 	beq	r2,r3,803504 <_fseeko_r+0x1c0>
  803398:	85000a17 	ldw	r20,40(r16)
  80339c:	a000f626 	beq	r20,zero,803778 <_fseeko_r+0x434>
  8033a0:	00800044 	movi	r2,1
  8033a4:	90803e26 	beq	r18,r2,8034a0 <_fseeko_r+0x15c>
  8033a8:	00800084 	movi	r2,2
  8033ac:	90801026 	beq	r18,r2,8033f0 <_fseeko_r+0xac>
  8033b0:	90000f26 	beq	r18,zero,8033f0 <_fseeko_r+0xac>
  8033b4:	00800584 	movi	r2,22
  8033b8:	88800015 	stw	r2,0(r17)
  8033bc:	04ffffc4 	movi	r19,-1
  8033c0:	9805883a 	mov	r2,r19
  8033c4:	dfc01717 	ldw	ra,92(sp)
  8033c8:	ddc01617 	ldw	r23,88(sp)
  8033cc:	dd801517 	ldw	r22,84(sp)
  8033d0:	dd401417 	ldw	r21,80(sp)
  8033d4:	dd001317 	ldw	r20,76(sp)
  8033d8:	dcc01217 	ldw	r19,72(sp)
  8033dc:	dc801117 	ldw	r18,68(sp)
  8033e0:	dc401017 	ldw	r17,64(sp)
  8033e4:	dc000f17 	ldw	r16,60(sp)
  8033e8:	dec01804 	addi	sp,sp,96
  8033ec:	f800283a 	ret
  8033f0:	80800417 	ldw	r2,16(r16)
  8033f4:	002f883a 	mov	r23,zero
  8033f8:	0027883a 	mov	r19,zero
  8033fc:	1000cb26 	beq	r2,zero,80372c <_fseeko_r+0x3e8>
  803400:	8080030b 	ldhu	r2,12(r16)
  803404:	10c2068c 	andi	r3,r2,2074
  803408:	1800071e 	bne	r3,zero,803428 <_fseeko_r+0xe4>
  80340c:	10c1000c 	andi	r3,r2,1024
  803410:	1800451e 	bne	r3,zero,803528 <_fseeko_r+0x1e4>
  803414:	00c02034 	movhi	r3,128
  803418:	18d28504 	addi	r3,r3,18964
  80341c:	a0c0b726 	beq	r20,r3,8036fc <_fseeko_r+0x3b8>
  803420:	10820014 	ori	r2,r2,2048
  803424:	8080030d 	sth	r2,12(r16)
  803428:	800b883a 	mov	r5,r16
  80342c:	8809883a 	mov	r4,r17
  803430:	0808be40 	call	808be4 <_fflush_r>
  803434:	1027883a 	mov	r19,r2
  803438:	103fe01e 	bne	r2,zero,8033bc <__alt_mem_onchip_mem+0xff7833bc>
  80343c:	81400717 	ldw	r5,28(r16)
  803440:	900f883a 	mov	r7,r18
  803444:	a80d883a 	mov	r6,r21
  803448:	8809883a 	mov	r4,r17
  80344c:	a03ee83a 	callr	r20
  803450:	00ffffc4 	movi	r3,-1
  803454:	10ffd926 	beq	r2,r3,8033bc <__alt_mem_onchip_mem+0xff7833bc>
  803458:	81400c17 	ldw	r5,48(r16)
  80345c:	28000526 	beq	r5,zero,803474 <_fseeko_r+0x130>
  803460:	80801004 	addi	r2,r16,64
  803464:	28800226 	beq	r5,r2,803470 <_fseeko_r+0x12c>
  803468:	8809883a 	mov	r4,r17
  80346c:	08091e00 	call	8091e0 <_free_r>
  803470:	80000c15 	stw	zero,48(r16)
  803474:	8080030b 	ldhu	r2,12(r16)
  803478:	80c00417 	ldw	r3,16(r16)
  80347c:	80000115 	stw	zero,4(r16)
  803480:	10bdf7cc 	andi	r2,r2,63455
  803484:	80c00015 	stw	r3,0(r16)
  803488:	8080030d 	sth	r2,12(r16)
  80348c:	01800204 	movi	r6,8
  803490:	000b883a 	mov	r5,zero
  803494:	81001704 	addi	r4,r16,92
  803498:	08042c80 	call	8042c8 <memset>
  80349c:	003fc806 	br	8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  8034a0:	800b883a 	mov	r5,r16
  8034a4:	8809883a 	mov	r4,r17
  8034a8:	0808be40 	call	808be4 <_fflush_r>
  8034ac:	8080030b 	ldhu	r2,12(r16)
  8034b0:	10c4000c 	andi	r3,r2,4096
  8034b4:	18008726 	beq	r3,zero,8036d4 <_fseeko_r+0x390>
  8034b8:	84c01417 	ldw	r19,80(r16)
  8034bc:	10c0010c 	andi	r3,r2,4
  8034c0:	1800431e 	bne	r3,zero,8035d0 <_fseeko_r+0x28c>
  8034c4:	1080020c 	andi	r2,r2,8
  8034c8:	10008026 	beq	r2,zero,8036cc <_fseeko_r+0x388>
  8034cc:	80c00017 	ldw	r3,0(r16)
  8034d0:	80800417 	ldw	r2,16(r16)
  8034d4:	18000226 	beq	r3,zero,8034e0 <_fseeko_r+0x19c>
  8034d8:	1887c83a 	sub	r3,r3,r2
  8034dc:	98e7883a 	add	r19,r19,r3
  8034e0:	aceb883a 	add	r21,r21,r19
  8034e4:	05c00044 	movi	r23,1
  8034e8:	0025883a 	mov	r18,zero
  8034ec:	003fc306 	br	8033fc <__alt_mem_onchip_mem+0xff7833fc>
  8034f0:	0808fc00 	call	808fc0 <__sinit>
  8034f4:	8080030b 	ldhu	r2,12(r16)
  8034f8:	00c04204 	movi	r3,264
  8034fc:	1080420c 	andi	r2,r2,264
  803500:	10ffa51e 	bne	r2,r3,803398 <__alt_mem_onchip_mem+0xff783398>
  803504:	800b883a 	mov	r5,r16
  803508:	8809883a 	mov	r4,r17
  80350c:	0808be40 	call	808be4 <_fflush_r>
  803510:	003fa106 	br	803398 <__alt_mem_onchip_mem+0xff783398>
  803514:	8080030b 	ldhu	r2,12(r16)
  803518:	00c10004 	movi	r3,1024
  80351c:	80c01315 	stw	r3,76(r16)
  803520:	10c4b03a 	or	r2,r2,r3
  803524:	8080030d 	sth	r2,12(r16)
  803528:	9000311e 	bne	r18,zero,8035f0 <_fseeko_r+0x2ac>
  80352c:	a82d883a 	mov	r22,r21
  803530:	b800371e 	bne	r23,zero,803610 <_fseeko_r+0x2cc>
  803534:	8080030b 	ldhu	r2,12(r16)
  803538:	1084000c 	andi	r2,r2,4096
  80353c:	10007f26 	beq	r2,zero,80373c <_fseeko_r+0x3f8>
  803540:	80801417 	ldw	r2,80(r16)
  803544:	81800117 	ldw	r6,4(r16)
  803548:	81400c17 	ldw	r5,48(r16)
  80354c:	11a7c83a 	sub	r19,r2,r6
  803550:	28008226 	beq	r5,zero,80375c <_fseeko_r+0x418>
  803554:	81c00f17 	ldw	r7,60(r16)
  803558:	99e7c83a 	sub	r19,r19,r7
  80355c:	81000e17 	ldw	r4,56(r16)
  803560:	80800417 	ldw	r2,16(r16)
  803564:	99a7883a 	add	r19,r19,r6
  803568:	2087c83a 	sub	r3,r4,r2
  80356c:	98e7c83a 	sub	r19,r19,r3
  803570:	38c7883a 	add	r3,r7,r3
  803574:	b4c02b16 	blt	r22,r19,803624 <_fseeko_r+0x2e0>
  803578:	98c9883a 	add	r4,r19,r3
  80357c:	b100292e 	bgeu	r22,r4,803624 <_fseeko_r+0x2e0>
  803580:	b4e7c83a 	sub	r19,r22,r19
  803584:	14c5883a 	add	r2,r2,r19
  803588:	1ce7c83a 	sub	r19,r3,r19
  80358c:	80800015 	stw	r2,0(r16)
  803590:	84c00115 	stw	r19,4(r16)
  803594:	28000526 	beq	r5,zero,8035ac <_fseeko_r+0x268>
  803598:	80801004 	addi	r2,r16,64
  80359c:	28800226 	beq	r5,r2,8035a8 <_fseeko_r+0x264>
  8035a0:	8809883a 	mov	r4,r17
  8035a4:	08091e00 	call	8091e0 <_free_r>
  8035a8:	80000c15 	stw	zero,48(r16)
  8035ac:	8080030b 	ldhu	r2,12(r16)
  8035b0:	01800204 	movi	r6,8
  8035b4:	000b883a 	mov	r5,zero
  8035b8:	10bff7cc 	andi	r2,r2,65503
  8035bc:	8080030d 	sth	r2,12(r16)
  8035c0:	81001704 	addi	r4,r16,92
  8035c4:	08042c80 	call	8042c8 <memset>
  8035c8:	0027883a 	mov	r19,zero
  8035cc:	003f7c06 	br	8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  8035d0:	80c00117 	ldw	r3,4(r16)
  8035d4:	80800c17 	ldw	r2,48(r16)
  8035d8:	98e7c83a 	sub	r19,r19,r3
  8035dc:	10003b26 	beq	r2,zero,8036cc <_fseeko_r+0x388>
  8035e0:	80c00f17 	ldw	r3,60(r16)
  8035e4:	80800417 	ldw	r2,16(r16)
  8035e8:	98e7c83a 	sub	r19,r19,r3
  8035ec:	003fbc06 	br	8034e0 <__alt_mem_onchip_mem+0xff7834e0>
  8035f0:	8140038f 	ldh	r5,14(r16)
  8035f4:	d80d883a 	mov	r6,sp
  8035f8:	8809883a 	mov	r4,r17
  8035fc:	08037a40 	call	8037a4 <_fstat_r>
  803600:	103f891e 	bne	r2,zero,803428 <__alt_mem_onchip_mem+0xff783428>
  803604:	dd800417 	ldw	r22,16(sp)
  803608:	adad883a 	add	r22,r21,r22
  80360c:	b83fc926 	beq	r23,zero,803534 <__alt_mem_onchip_mem+0xff783534>
  803610:	81400c17 	ldw	r5,48(r16)
  803614:	81800117 	ldw	r6,4(r16)
  803618:	28005026 	beq	r5,zero,80375c <_fseeko_r+0x418>
  80361c:	81c00f17 	ldw	r7,60(r16)
  803620:	003fce06 	br	80355c <__alt_mem_onchip_mem+0xff78355c>
  803624:	84c01317 	ldw	r19,76(r16)
  803628:	81400717 	ldw	r5,28(r16)
  80362c:	000f883a 	mov	r7,zero
  803630:	04e7c83a 	sub	r19,zero,r19
  803634:	9da6703a 	and	r19,r19,r22
  803638:	980d883a 	mov	r6,r19
  80363c:	8809883a 	mov	r4,r17
  803640:	a03ee83a 	callr	r20
  803644:	00ffffc4 	movi	r3,-1
  803648:	10ff7726 	beq	r2,r3,803428 <__alt_mem_onchip_mem+0xff783428>
  80364c:	80800417 	ldw	r2,16(r16)
  803650:	81400c17 	ldw	r5,48(r16)
  803654:	80000115 	stw	zero,4(r16)
  803658:	80800015 	stw	r2,0(r16)
  80365c:	28000526 	beq	r5,zero,803674 <_fseeko_r+0x330>
  803660:	80801004 	addi	r2,r16,64
  803664:	28800226 	beq	r5,r2,803670 <_fseeko_r+0x32c>
  803668:	8809883a 	mov	r4,r17
  80366c:	08091e00 	call	8091e0 <_free_r>
  803670:	80000c15 	stw	zero,48(r16)
  803674:	8080030b 	ldhu	r2,12(r16)
  803678:	b4e7c83a 	sub	r19,r22,r19
  80367c:	10bff7cc 	andi	r2,r2,65503
  803680:	8080030d 	sth	r2,12(r16)
  803684:	98000b26 	beq	r19,zero,8036b4 <_fseeko_r+0x370>
  803688:	800b883a 	mov	r5,r16
  80368c:	8809883a 	mov	r4,r17
  803690:	08047140 	call	804714 <__srefill_r>
  803694:	103f641e 	bne	r2,zero,803428 <__alt_mem_onchip_mem+0xff783428>
  803698:	80800117 	ldw	r2,4(r16)
  80369c:	14ff6236 	bltu	r2,r19,803428 <__alt_mem_onchip_mem+0xff783428>
  8036a0:	80c00017 	ldw	r3,0(r16)
  8036a4:	14c5c83a 	sub	r2,r2,r19
  8036a8:	80800115 	stw	r2,4(r16)
  8036ac:	1ce7883a 	add	r19,r3,r19
  8036b0:	84c00015 	stw	r19,0(r16)
  8036b4:	01800204 	movi	r6,8
  8036b8:	000b883a 	mov	r5,zero
  8036bc:	81001704 	addi	r4,r16,92
  8036c0:	08042c80 	call	8042c8 <memset>
  8036c4:	0027883a 	mov	r19,zero
  8036c8:	003f3d06 	br	8033c0 <__alt_mem_onchip_mem+0xff7833c0>
  8036cc:	80800417 	ldw	r2,16(r16)
  8036d0:	003f8306 	br	8034e0 <__alt_mem_onchip_mem+0xff7834e0>
  8036d4:	81400717 	ldw	r5,28(r16)
  8036d8:	900f883a 	mov	r7,r18
  8036dc:	000d883a 	mov	r6,zero
  8036e0:	8809883a 	mov	r4,r17
  8036e4:	a03ee83a 	callr	r20
  8036e8:	1027883a 	mov	r19,r2
  8036ec:	00bfffc4 	movi	r2,-1
  8036f0:	98bf3226 	beq	r19,r2,8033bc <__alt_mem_onchip_mem+0xff7833bc>
  8036f4:	8080030b 	ldhu	r2,12(r16)
  8036f8:	003f7006 	br	8034bc <__alt_mem_onchip_mem+0xff7834bc>
  8036fc:	8140038f 	ldh	r5,14(r16)
  803700:	283f4716 	blt	r5,zero,803420 <__alt_mem_onchip_mem+0xff783420>
  803704:	d80d883a 	mov	r6,sp
  803708:	8809883a 	mov	r4,r17
  80370c:	08037a40 	call	8037a4 <_fstat_r>
  803710:	1000041e 	bne	r2,zero,803724 <_fseeko_r+0x3e0>
  803714:	d8800117 	ldw	r2,4(sp)
  803718:	00e00014 	movui	r3,32768
  80371c:	10bc000c 	andi	r2,r2,61440
  803720:	10ff7c26 	beq	r2,r3,803514 <__alt_mem_onchip_mem+0xff783514>
  803724:	8080030b 	ldhu	r2,12(r16)
  803728:	003f3d06 	br	803420 <__alt_mem_onchip_mem+0xff783420>
  80372c:	800b883a 	mov	r5,r16
  803730:	8809883a 	mov	r4,r17
  803734:	08039000 	call	803900 <__smakebuf_r>
  803738:	003f3106 	br	803400 <__alt_mem_onchip_mem+0xff783400>
  80373c:	81400717 	ldw	r5,28(r16)
  803740:	01c00044 	movi	r7,1
  803744:	000d883a 	mov	r6,zero
  803748:	8809883a 	mov	r4,r17
  80374c:	a03ee83a 	callr	r20
  803750:	00ffffc4 	movi	r3,-1
  803754:	10ff7b1e 	bne	r2,r3,803544 <__alt_mem_onchip_mem+0xff783544>
  803758:	003f3306 	br	803428 <__alt_mem_onchip_mem+0xff783428>
  80375c:	80c00017 	ldw	r3,0(r16)
  803760:	80800417 	ldw	r2,16(r16)
  803764:	000b883a 	mov	r5,zero
  803768:	1887c83a 	sub	r3,r3,r2
  80376c:	98e7c83a 	sub	r19,r19,r3
  803770:	30c7883a 	add	r3,r6,r3
  803774:	003f7f06 	br	803574 <__alt_mem_onchip_mem+0xff783574>
  803778:	00800744 	movi	r2,29
  80377c:	88800015 	stw	r2,0(r17)
  803780:	04ffffc4 	movi	r19,-1
  803784:	003f0e06 	br	8033c0 <__alt_mem_onchip_mem+0xff7833c0>

00803788 <fseeko>:
  803788:	00802074 	movhi	r2,129
  80378c:	109aef04 	addi	r2,r2,27580
  803790:	300f883a 	mov	r7,r6
  803794:	280d883a 	mov	r6,r5
  803798:	200b883a 	mov	r5,r4
  80379c:	11000017 	ldw	r4,0(r2)
  8037a0:	08033441 	jmpi	803344 <_fseeko_r>

008037a4 <_fstat_r>:
  8037a4:	defffd04 	addi	sp,sp,-12
  8037a8:	2805883a 	mov	r2,r5
  8037ac:	dc000015 	stw	r16,0(sp)
  8037b0:	040020b4 	movhi	r16,130
  8037b4:	dc400115 	stw	r17,4(sp)
  8037b8:	84228a04 	addi	r16,r16,-30168
  8037bc:	2023883a 	mov	r17,r4
  8037c0:	300b883a 	mov	r5,r6
  8037c4:	1009883a 	mov	r4,r2
  8037c8:	dfc00215 	stw	ra,8(sp)
  8037cc:	80000015 	stw	zero,0(r16)
  8037d0:	081079c0 	call	81079c <fstat>
  8037d4:	00ffffc4 	movi	r3,-1
  8037d8:	10c00526 	beq	r2,r3,8037f0 <_fstat_r+0x4c>
  8037dc:	dfc00217 	ldw	ra,8(sp)
  8037e0:	dc400117 	ldw	r17,4(sp)
  8037e4:	dc000017 	ldw	r16,0(sp)
  8037e8:	dec00304 	addi	sp,sp,12
  8037ec:	f800283a 	ret
  8037f0:	80c00017 	ldw	r3,0(r16)
  8037f4:	183ff926 	beq	r3,zero,8037dc <__alt_mem_onchip_mem+0xff7837dc>
  8037f8:	88c00015 	stw	r3,0(r17)
  8037fc:	003ff706 	br	8037dc <__alt_mem_onchip_mem+0xff7837dc>

00803800 <_fwrite_r>:
  803800:	defff504 	addi	sp,sp,-44
  803804:	dc800815 	stw	r18,32(sp)
  803808:	39a5383a 	mul	r18,r7,r6
  80380c:	d8800304 	addi	r2,sp,12
  803810:	d8800015 	stw	r2,0(sp)
  803814:	00800044 	movi	r2,1
  803818:	dcc00915 	stw	r19,36(sp)
  80381c:	dc400715 	stw	r17,28(sp)
  803820:	dc000615 	stw	r16,24(sp)
  803824:	d9400315 	stw	r5,12(sp)
  803828:	dfc00a15 	stw	ra,40(sp)
  80382c:	dc800415 	stw	r18,16(sp)
  803830:	dc800215 	stw	r18,8(sp)
  803834:	d8800115 	stw	r2,4(sp)
  803838:	3027883a 	mov	r19,r6
  80383c:	3821883a 	mov	r16,r7
  803840:	2023883a 	mov	r17,r4
  803844:	d9400b17 	ldw	r5,44(sp)
  803848:	20000226 	beq	r4,zero,803854 <_fwrite_r+0x54>
  80384c:	20800e17 	ldw	r2,56(r4)
  803850:	10001a26 	beq	r2,zero,8038bc <_fwrite_r+0xbc>
  803854:	2880030b 	ldhu	r2,12(r5)
  803858:	10c8000c 	andi	r3,r2,8192
  80385c:	1800061e 	bne	r3,zero,803878 <_fwrite_r+0x78>
  803860:	29001917 	ldw	r4,100(r5)
  803864:	00f7ffc4 	movi	r3,-8193
  803868:	10880014 	ori	r2,r2,8192
  80386c:	20c6703a 	and	r3,r4,r3
  803870:	2880030d 	sth	r2,12(r5)
  803874:	28c01915 	stw	r3,100(r5)
  803878:	d80d883a 	mov	r6,sp
  80387c:	8809883a 	mov	r4,r17
  803880:	08094f00 	call	8094f0 <__sfvwrite_r>
  803884:	10000b26 	beq	r2,zero,8038b4 <_fwrite_r+0xb4>
  803888:	d9000217 	ldw	r4,8(sp)
  80388c:	980b883a 	mov	r5,r19
  803890:	9109c83a 	sub	r4,r18,r4
  803894:	080df040 	call	80df04 <__udivsi3>
  803898:	dfc00a17 	ldw	ra,40(sp)
  80389c:	dcc00917 	ldw	r19,36(sp)
  8038a0:	dc800817 	ldw	r18,32(sp)
  8038a4:	dc400717 	ldw	r17,28(sp)
  8038a8:	dc000617 	ldw	r16,24(sp)
  8038ac:	dec00b04 	addi	sp,sp,44
  8038b0:	f800283a 	ret
  8038b4:	8005883a 	mov	r2,r16
  8038b8:	003ff706 	br	803898 <__alt_mem_onchip_mem+0xff783898>
  8038bc:	d9400515 	stw	r5,20(sp)
  8038c0:	0808fc00 	call	808fc0 <__sinit>
  8038c4:	d9400517 	ldw	r5,20(sp)
  8038c8:	003fe206 	br	803854 <__alt_mem_onchip_mem+0xff783854>

008038cc <fwrite>:
  8038cc:	defffe04 	addi	sp,sp,-8
  8038d0:	00802074 	movhi	r2,129
  8038d4:	d9c00015 	stw	r7,0(sp)
  8038d8:	109aef04 	addi	r2,r2,27580
  8038dc:	300f883a 	mov	r7,r6
  8038e0:	280d883a 	mov	r6,r5
  8038e4:	200b883a 	mov	r5,r4
  8038e8:	11000017 	ldw	r4,0(r2)
  8038ec:	dfc00115 	stw	ra,4(sp)
  8038f0:	08038000 	call	803800 <_fwrite_r>
  8038f4:	dfc00117 	ldw	ra,4(sp)
  8038f8:	dec00204 	addi	sp,sp,8
  8038fc:	f800283a 	ret

00803900 <__smakebuf_r>:
  803900:	2880030b 	ldhu	r2,12(r5)
  803904:	10c0008c 	andi	r3,r2,2
  803908:	1800411e 	bne	r3,zero,803a10 <__smakebuf_r+0x110>
  80390c:	deffec04 	addi	sp,sp,-80
  803910:	dc000f15 	stw	r16,60(sp)
  803914:	2821883a 	mov	r16,r5
  803918:	2940038f 	ldh	r5,14(r5)
  80391c:	dc401015 	stw	r17,64(sp)
  803920:	dfc01315 	stw	ra,76(sp)
  803924:	dcc01215 	stw	r19,72(sp)
  803928:	dc801115 	stw	r18,68(sp)
  80392c:	2023883a 	mov	r17,r4
  803930:	28001c16 	blt	r5,zero,8039a4 <__smakebuf_r+0xa4>
  803934:	d80d883a 	mov	r6,sp
  803938:	08037a40 	call	8037a4 <_fstat_r>
  80393c:	10001816 	blt	r2,zero,8039a0 <__smakebuf_r+0xa0>
  803940:	d8800117 	ldw	r2,4(sp)
  803944:	00e00014 	movui	r3,32768
  803948:	10bc000c 	andi	r2,r2,61440
  80394c:	14c80020 	cmpeqi	r19,r2,8192
  803950:	10c03726 	beq	r2,r3,803a30 <__smakebuf_r+0x130>
  803954:	80c0030b 	ldhu	r3,12(r16)
  803958:	18c20014 	ori	r3,r3,2048
  80395c:	80c0030d 	sth	r3,12(r16)
  803960:	00c80004 	movi	r3,8192
  803964:	10c0521e 	bne	r2,r3,803ab0 <__smakebuf_r+0x1b0>
  803968:	8140038f 	ldh	r5,14(r16)
  80396c:	8809883a 	mov	r4,r17
  803970:	0809b340 	call	809b34 <_isatty_r>
  803974:	10004c26 	beq	r2,zero,803aa8 <__smakebuf_r+0x1a8>
  803978:	8080030b 	ldhu	r2,12(r16)
  80397c:	80c010c4 	addi	r3,r16,67
  803980:	80c00015 	stw	r3,0(r16)
  803984:	10800054 	ori	r2,r2,1
  803988:	8080030d 	sth	r2,12(r16)
  80398c:	00800044 	movi	r2,1
  803990:	80c00415 	stw	r3,16(r16)
  803994:	80800515 	stw	r2,20(r16)
  803998:	04810004 	movi	r18,1024
  80399c:	00000706 	br	8039bc <__smakebuf_r+0xbc>
  8039a0:	8080030b 	ldhu	r2,12(r16)
  8039a4:	10c0200c 	andi	r3,r2,128
  8039a8:	18001f1e 	bne	r3,zero,803a28 <__smakebuf_r+0x128>
  8039ac:	04810004 	movi	r18,1024
  8039b0:	10820014 	ori	r2,r2,2048
  8039b4:	8080030d 	sth	r2,12(r16)
  8039b8:	0027883a 	mov	r19,zero
  8039bc:	900b883a 	mov	r5,r18
  8039c0:	8809883a 	mov	r4,r17
  8039c4:	0803abc0 	call	803abc <_malloc_r>
  8039c8:	10002c26 	beq	r2,zero,803a7c <__smakebuf_r+0x17c>
  8039cc:	80c0030b 	ldhu	r3,12(r16)
  8039d0:	01002074 	movhi	r4,129
  8039d4:	21231e04 	addi	r4,r4,-29576
  8039d8:	89000f15 	stw	r4,60(r17)
  8039dc:	18c02014 	ori	r3,r3,128
  8039e0:	80c0030d 	sth	r3,12(r16)
  8039e4:	80800015 	stw	r2,0(r16)
  8039e8:	80800415 	stw	r2,16(r16)
  8039ec:	84800515 	stw	r18,20(r16)
  8039f0:	98001a1e 	bne	r19,zero,803a5c <__smakebuf_r+0x15c>
  8039f4:	dfc01317 	ldw	ra,76(sp)
  8039f8:	dcc01217 	ldw	r19,72(sp)
  8039fc:	dc801117 	ldw	r18,68(sp)
  803a00:	dc401017 	ldw	r17,64(sp)
  803a04:	dc000f17 	ldw	r16,60(sp)
  803a08:	dec01404 	addi	sp,sp,80
  803a0c:	f800283a 	ret
  803a10:	288010c4 	addi	r2,r5,67
  803a14:	28800015 	stw	r2,0(r5)
  803a18:	28800415 	stw	r2,16(r5)
  803a1c:	00800044 	movi	r2,1
  803a20:	28800515 	stw	r2,20(r5)
  803a24:	f800283a 	ret
  803a28:	04801004 	movi	r18,64
  803a2c:	003fe006 	br	8039b0 <__alt_mem_onchip_mem+0xff7839b0>
  803a30:	81000a17 	ldw	r4,40(r16)
  803a34:	00c02034 	movhi	r3,128
  803a38:	18d28504 	addi	r3,r3,18964
  803a3c:	20ffc51e 	bne	r4,r3,803954 <__alt_mem_onchip_mem+0xff783954>
  803a40:	8080030b 	ldhu	r2,12(r16)
  803a44:	04810004 	movi	r18,1024
  803a48:	84801315 	stw	r18,76(r16)
  803a4c:	1484b03a 	or	r2,r2,r18
  803a50:	8080030d 	sth	r2,12(r16)
  803a54:	0027883a 	mov	r19,zero
  803a58:	003fd806 	br	8039bc <__alt_mem_onchip_mem+0xff7839bc>
  803a5c:	8140038f 	ldh	r5,14(r16)
  803a60:	8809883a 	mov	r4,r17
  803a64:	0809b340 	call	809b34 <_isatty_r>
  803a68:	103fe226 	beq	r2,zero,8039f4 <__alt_mem_onchip_mem+0xff7839f4>
  803a6c:	8080030b 	ldhu	r2,12(r16)
  803a70:	10800054 	ori	r2,r2,1
  803a74:	8080030d 	sth	r2,12(r16)
  803a78:	003fde06 	br	8039f4 <__alt_mem_onchip_mem+0xff7839f4>
  803a7c:	8080030b 	ldhu	r2,12(r16)
  803a80:	10c0800c 	andi	r3,r2,512
  803a84:	183fdb1e 	bne	r3,zero,8039f4 <__alt_mem_onchip_mem+0xff7839f4>
  803a88:	10800094 	ori	r2,r2,2
  803a8c:	80c010c4 	addi	r3,r16,67
  803a90:	8080030d 	sth	r2,12(r16)
  803a94:	00800044 	movi	r2,1
  803a98:	80c00015 	stw	r3,0(r16)
  803a9c:	80c00415 	stw	r3,16(r16)
  803aa0:	80800515 	stw	r2,20(r16)
  803aa4:	003fd306 	br	8039f4 <__alt_mem_onchip_mem+0xff7839f4>
  803aa8:	04810004 	movi	r18,1024
  803aac:	003fc306 	br	8039bc <__alt_mem_onchip_mem+0xff7839bc>
  803ab0:	0027883a 	mov	r19,zero
  803ab4:	04810004 	movi	r18,1024
  803ab8:	003fc006 	br	8039bc <__alt_mem_onchip_mem+0xff7839bc>

00803abc <_malloc_r>:
  803abc:	defff504 	addi	sp,sp,-44
  803ac0:	dc800315 	stw	r18,12(sp)
  803ac4:	dfc00a15 	stw	ra,40(sp)
  803ac8:	df000915 	stw	fp,36(sp)
  803acc:	ddc00815 	stw	r23,32(sp)
  803ad0:	dd800715 	stw	r22,28(sp)
  803ad4:	dd400615 	stw	r21,24(sp)
  803ad8:	dd000515 	stw	r20,20(sp)
  803adc:	dcc00415 	stw	r19,16(sp)
  803ae0:	dc400215 	stw	r17,8(sp)
  803ae4:	dc000115 	stw	r16,4(sp)
  803ae8:	288002c4 	addi	r2,r5,11
  803aec:	00c00584 	movi	r3,22
  803af0:	2025883a 	mov	r18,r4
  803af4:	18807f2e 	bgeu	r3,r2,803cf4 <_malloc_r+0x238>
  803af8:	047ffe04 	movi	r17,-8
  803afc:	1462703a 	and	r17,r2,r17
  803b00:	8800a316 	blt	r17,zero,803d90 <_malloc_r+0x2d4>
  803b04:	8940a236 	bltu	r17,r5,803d90 <_malloc_r+0x2d4>
  803b08:	0810d240 	call	810d24 <__malloc_lock>
  803b0c:	00807dc4 	movi	r2,503
  803b10:	1441e92e 	bgeu	r2,r17,8042b8 <_malloc_r+0x7fc>
  803b14:	8804d27a 	srli	r2,r17,9
  803b18:	1000a126 	beq	r2,zero,803da0 <_malloc_r+0x2e4>
  803b1c:	00c00104 	movi	r3,4
  803b20:	18811e36 	bltu	r3,r2,803f9c <_malloc_r+0x4e0>
  803b24:	8804d1ba 	srli	r2,r17,6
  803b28:	12000e44 	addi	r8,r2,57
  803b2c:	11c00e04 	addi	r7,r2,56
  803b30:	4209883a 	add	r4,r8,r8
  803b34:	04c02074 	movhi	r19,129
  803b38:	2109883a 	add	r4,r4,r4
  803b3c:	9cd4d304 	addi	r19,r19,21324
  803b40:	2109883a 	add	r4,r4,r4
  803b44:	9909883a 	add	r4,r19,r4
  803b48:	24000117 	ldw	r16,4(r4)
  803b4c:	213ffe04 	addi	r4,r4,-8
  803b50:	24009726 	beq	r4,r16,803db0 <_malloc_r+0x2f4>
  803b54:	80800117 	ldw	r2,4(r16)
  803b58:	01bfff04 	movi	r6,-4
  803b5c:	014003c4 	movi	r5,15
  803b60:	1184703a 	and	r2,r2,r6
  803b64:	1447c83a 	sub	r3,r2,r17
  803b68:	28c00716 	blt	r5,r3,803b88 <_malloc_r+0xcc>
  803b6c:	1800920e 	bge	r3,zero,803db8 <_malloc_r+0x2fc>
  803b70:	84000317 	ldw	r16,12(r16)
  803b74:	24008e26 	beq	r4,r16,803db0 <_malloc_r+0x2f4>
  803b78:	80800117 	ldw	r2,4(r16)
  803b7c:	1184703a 	and	r2,r2,r6
  803b80:	1447c83a 	sub	r3,r2,r17
  803b84:	28fff90e 	bge	r5,r3,803b6c <__alt_mem_onchip_mem+0xff783b6c>
  803b88:	3809883a 	mov	r4,r7
  803b8c:	01802074 	movhi	r6,129
  803b90:	9c000417 	ldw	r16,16(r19)
  803b94:	3194d304 	addi	r6,r6,21324
  803b98:	32000204 	addi	r8,r6,8
  803b9c:	82013426 	beq	r16,r8,804070 <_malloc_r+0x5b4>
  803ba0:	80c00117 	ldw	r3,4(r16)
  803ba4:	00bfff04 	movi	r2,-4
  803ba8:	188e703a 	and	r7,r3,r2
  803bac:	3c45c83a 	sub	r2,r7,r17
  803bb0:	00c003c4 	movi	r3,15
  803bb4:	18811f16 	blt	r3,r2,804034 <_malloc_r+0x578>
  803bb8:	32000515 	stw	r8,20(r6)
  803bbc:	32000415 	stw	r8,16(r6)
  803bc0:	10007f0e 	bge	r2,zero,803dc0 <_malloc_r+0x304>
  803bc4:	00807fc4 	movi	r2,511
  803bc8:	11c0fd36 	bltu	r2,r7,803fc0 <_malloc_r+0x504>
  803bcc:	3806d0fa 	srli	r3,r7,3
  803bd0:	01c00044 	movi	r7,1
  803bd4:	30800117 	ldw	r2,4(r6)
  803bd8:	19400044 	addi	r5,r3,1
  803bdc:	294b883a 	add	r5,r5,r5
  803be0:	1807d0ba 	srai	r3,r3,2
  803be4:	294b883a 	add	r5,r5,r5
  803be8:	294b883a 	add	r5,r5,r5
  803bec:	298b883a 	add	r5,r5,r6
  803bf0:	38c6983a 	sll	r3,r7,r3
  803bf4:	29c00017 	ldw	r7,0(r5)
  803bf8:	2a7ffe04 	addi	r9,r5,-8
  803bfc:	1886b03a 	or	r3,r3,r2
  803c00:	82400315 	stw	r9,12(r16)
  803c04:	81c00215 	stw	r7,8(r16)
  803c08:	30c00115 	stw	r3,4(r6)
  803c0c:	2c000015 	stw	r16,0(r5)
  803c10:	3c000315 	stw	r16,12(r7)
  803c14:	2005d0ba 	srai	r2,r4,2
  803c18:	01400044 	movi	r5,1
  803c1c:	288a983a 	sll	r5,r5,r2
  803c20:	19406f36 	bltu	r3,r5,803de0 <_malloc_r+0x324>
  803c24:	28c4703a 	and	r2,r5,r3
  803c28:	10000a1e 	bne	r2,zero,803c54 <_malloc_r+0x198>
  803c2c:	00bfff04 	movi	r2,-4
  803c30:	294b883a 	add	r5,r5,r5
  803c34:	2088703a 	and	r4,r4,r2
  803c38:	28c4703a 	and	r2,r5,r3
  803c3c:	21000104 	addi	r4,r4,4
  803c40:	1000041e 	bne	r2,zero,803c54 <_malloc_r+0x198>
  803c44:	294b883a 	add	r5,r5,r5
  803c48:	28c4703a 	and	r2,r5,r3
  803c4c:	21000104 	addi	r4,r4,4
  803c50:	103ffc26 	beq	r2,zero,803c44 <__alt_mem_onchip_mem+0xff783c44>
  803c54:	02bfff04 	movi	r10,-4
  803c58:	024003c4 	movi	r9,15
  803c5c:	21800044 	addi	r6,r4,1
  803c60:	318d883a 	add	r6,r6,r6
  803c64:	318d883a 	add	r6,r6,r6
  803c68:	318d883a 	add	r6,r6,r6
  803c6c:	998d883a 	add	r6,r19,r6
  803c70:	333ffe04 	addi	r12,r6,-8
  803c74:	2017883a 	mov	r11,r4
  803c78:	31800104 	addi	r6,r6,4
  803c7c:	34000017 	ldw	r16,0(r6)
  803c80:	31fffd04 	addi	r7,r6,-12
  803c84:	81c0041e 	bne	r16,r7,803c98 <_malloc_r+0x1dc>
  803c88:	0000fb06 	br	804078 <_malloc_r+0x5bc>
  803c8c:	1801030e 	bge	r3,zero,80409c <_malloc_r+0x5e0>
  803c90:	84000317 	ldw	r16,12(r16)
  803c94:	81c0f826 	beq	r16,r7,804078 <_malloc_r+0x5bc>
  803c98:	80800117 	ldw	r2,4(r16)
  803c9c:	1284703a 	and	r2,r2,r10
  803ca0:	1447c83a 	sub	r3,r2,r17
  803ca4:	48fff90e 	bge	r9,r3,803c8c <__alt_mem_onchip_mem+0xff783c8c>
  803ca8:	80800317 	ldw	r2,12(r16)
  803cac:	81000217 	ldw	r4,8(r16)
  803cb0:	89400054 	ori	r5,r17,1
  803cb4:	81400115 	stw	r5,4(r16)
  803cb8:	20800315 	stw	r2,12(r4)
  803cbc:	11000215 	stw	r4,8(r2)
  803cc0:	8463883a 	add	r17,r16,r17
  803cc4:	9c400515 	stw	r17,20(r19)
  803cc8:	9c400415 	stw	r17,16(r19)
  803ccc:	18800054 	ori	r2,r3,1
  803cd0:	88800115 	stw	r2,4(r17)
  803cd4:	8a000315 	stw	r8,12(r17)
  803cd8:	8a000215 	stw	r8,8(r17)
  803cdc:	88e3883a 	add	r17,r17,r3
  803ce0:	88c00015 	stw	r3,0(r17)
  803ce4:	9009883a 	mov	r4,r18
  803ce8:	0810d480 	call	810d48 <__malloc_unlock>
  803cec:	80800204 	addi	r2,r16,8
  803cf0:	00001b06 	br	803d60 <_malloc_r+0x2a4>
  803cf4:	04400404 	movi	r17,16
  803cf8:	89402536 	bltu	r17,r5,803d90 <_malloc_r+0x2d4>
  803cfc:	0810d240 	call	810d24 <__malloc_lock>
  803d00:	00800184 	movi	r2,6
  803d04:	01000084 	movi	r4,2
  803d08:	04c02074 	movhi	r19,129
  803d0c:	1085883a 	add	r2,r2,r2
  803d10:	9cd4d304 	addi	r19,r19,21324
  803d14:	1085883a 	add	r2,r2,r2
  803d18:	9885883a 	add	r2,r19,r2
  803d1c:	14000117 	ldw	r16,4(r2)
  803d20:	10fffe04 	addi	r3,r2,-8
  803d24:	80c0d926 	beq	r16,r3,80408c <_malloc_r+0x5d0>
  803d28:	80c00117 	ldw	r3,4(r16)
  803d2c:	81000317 	ldw	r4,12(r16)
  803d30:	00bfff04 	movi	r2,-4
  803d34:	1884703a 	and	r2,r3,r2
  803d38:	81400217 	ldw	r5,8(r16)
  803d3c:	8085883a 	add	r2,r16,r2
  803d40:	10c00117 	ldw	r3,4(r2)
  803d44:	29000315 	stw	r4,12(r5)
  803d48:	21400215 	stw	r5,8(r4)
  803d4c:	18c00054 	ori	r3,r3,1
  803d50:	10c00115 	stw	r3,4(r2)
  803d54:	9009883a 	mov	r4,r18
  803d58:	0810d480 	call	810d48 <__malloc_unlock>
  803d5c:	80800204 	addi	r2,r16,8
  803d60:	dfc00a17 	ldw	ra,40(sp)
  803d64:	df000917 	ldw	fp,36(sp)
  803d68:	ddc00817 	ldw	r23,32(sp)
  803d6c:	dd800717 	ldw	r22,28(sp)
  803d70:	dd400617 	ldw	r21,24(sp)
  803d74:	dd000517 	ldw	r20,20(sp)
  803d78:	dcc00417 	ldw	r19,16(sp)
  803d7c:	dc800317 	ldw	r18,12(sp)
  803d80:	dc400217 	ldw	r17,8(sp)
  803d84:	dc000117 	ldw	r16,4(sp)
  803d88:	dec00b04 	addi	sp,sp,44
  803d8c:	f800283a 	ret
  803d90:	00800304 	movi	r2,12
  803d94:	90800015 	stw	r2,0(r18)
  803d98:	0005883a 	mov	r2,zero
  803d9c:	003ff006 	br	803d60 <__alt_mem_onchip_mem+0xff783d60>
  803da0:	01002004 	movi	r4,128
  803da4:	02001004 	movi	r8,64
  803da8:	01c00fc4 	movi	r7,63
  803dac:	003f6106 	br	803b34 <__alt_mem_onchip_mem+0xff783b34>
  803db0:	4009883a 	mov	r4,r8
  803db4:	003f7506 	br	803b8c <__alt_mem_onchip_mem+0xff783b8c>
  803db8:	81000317 	ldw	r4,12(r16)
  803dbc:	003fde06 	br	803d38 <__alt_mem_onchip_mem+0xff783d38>
  803dc0:	81c5883a 	add	r2,r16,r7
  803dc4:	11400117 	ldw	r5,4(r2)
  803dc8:	9009883a 	mov	r4,r18
  803dcc:	29400054 	ori	r5,r5,1
  803dd0:	11400115 	stw	r5,4(r2)
  803dd4:	0810d480 	call	810d48 <__malloc_unlock>
  803dd8:	80800204 	addi	r2,r16,8
  803ddc:	003fe006 	br	803d60 <__alt_mem_onchip_mem+0xff783d60>
  803de0:	9c000217 	ldw	r16,8(r19)
  803de4:	00bfff04 	movi	r2,-4
  803de8:	85800117 	ldw	r22,4(r16)
  803dec:	b0ac703a 	and	r22,r22,r2
  803df0:	b4400336 	bltu	r22,r17,803e00 <_malloc_r+0x344>
  803df4:	b445c83a 	sub	r2,r22,r17
  803df8:	00c003c4 	movi	r3,15
  803dfc:	18805d16 	blt	r3,r2,803f74 <_malloc_r+0x4b8>
  803e00:	05c02074 	movhi	r23,129
  803e04:	008020b4 	movhi	r2,130
  803e08:	10a28d04 	addi	r2,r2,-30156
  803e0c:	bddaf004 	addi	r23,r23,27584
  803e10:	15400017 	ldw	r21,0(r2)
  803e14:	b8c00017 	ldw	r3,0(r23)
  803e18:	00bfffc4 	movi	r2,-1
  803e1c:	858d883a 	add	r6,r16,r22
  803e20:	8d6b883a 	add	r21,r17,r21
  803e24:	1880ea26 	beq	r3,r2,8041d0 <_malloc_r+0x714>
  803e28:	ad4403c4 	addi	r21,r21,4111
  803e2c:	00bc0004 	movi	r2,-4096
  803e30:	a8aa703a 	and	r21,r21,r2
  803e34:	a80b883a 	mov	r5,r21
  803e38:	9009883a 	mov	r4,r18
  803e3c:	d9800015 	stw	r6,0(sp)
  803e40:	08048e80 	call	8048e8 <_sbrk_r>
  803e44:	1029883a 	mov	r20,r2
  803e48:	00bfffc4 	movi	r2,-1
  803e4c:	d9800017 	ldw	r6,0(sp)
  803e50:	a080e826 	beq	r20,r2,8041f4 <_malloc_r+0x738>
  803e54:	a180a636 	bltu	r20,r6,8040f0 <_malloc_r+0x634>
  803e58:	070020b4 	movhi	fp,130
  803e5c:	e7229e04 	addi	fp,fp,-30088
  803e60:	e0800017 	ldw	r2,0(fp)
  803e64:	a887883a 	add	r3,r21,r2
  803e68:	e0c00015 	stw	r3,0(fp)
  803e6c:	3500e626 	beq	r6,r20,804208 <_malloc_r+0x74c>
  803e70:	b9000017 	ldw	r4,0(r23)
  803e74:	00bfffc4 	movi	r2,-1
  803e78:	2080ee26 	beq	r4,r2,804234 <_malloc_r+0x778>
  803e7c:	a185c83a 	sub	r2,r20,r6
  803e80:	10c5883a 	add	r2,r2,r3
  803e84:	e0800015 	stw	r2,0(fp)
  803e88:	a0c001cc 	andi	r3,r20,7
  803e8c:	1800bc26 	beq	r3,zero,804180 <_malloc_r+0x6c4>
  803e90:	a0e9c83a 	sub	r20,r20,r3
  803e94:	00840204 	movi	r2,4104
  803e98:	a5000204 	addi	r20,r20,8
  803e9c:	10c7c83a 	sub	r3,r2,r3
  803ea0:	a545883a 	add	r2,r20,r21
  803ea4:	1083ffcc 	andi	r2,r2,4095
  803ea8:	18abc83a 	sub	r21,r3,r2
  803eac:	a80b883a 	mov	r5,r21
  803eb0:	9009883a 	mov	r4,r18
  803eb4:	08048e80 	call	8048e8 <_sbrk_r>
  803eb8:	00ffffc4 	movi	r3,-1
  803ebc:	10c0e126 	beq	r2,r3,804244 <_malloc_r+0x788>
  803ec0:	1505c83a 	sub	r2,r2,r20
  803ec4:	1545883a 	add	r2,r2,r21
  803ec8:	10800054 	ori	r2,r2,1
  803ecc:	e0c00017 	ldw	r3,0(fp)
  803ed0:	9d000215 	stw	r20,8(r19)
  803ed4:	a0800115 	stw	r2,4(r20)
  803ed8:	a8c7883a 	add	r3,r21,r3
  803edc:	e0c00015 	stw	r3,0(fp)
  803ee0:	84c00e26 	beq	r16,r19,803f1c <_malloc_r+0x460>
  803ee4:	018003c4 	movi	r6,15
  803ee8:	3580a72e 	bgeu	r6,r22,804188 <_malloc_r+0x6cc>
  803eec:	81400117 	ldw	r5,4(r16)
  803ef0:	013ffe04 	movi	r4,-8
  803ef4:	b0bffd04 	addi	r2,r22,-12
  803ef8:	1104703a 	and	r2,r2,r4
  803efc:	2900004c 	andi	r4,r5,1
  803f00:	2088b03a 	or	r4,r4,r2
  803f04:	81000115 	stw	r4,4(r16)
  803f08:	01400144 	movi	r5,5
  803f0c:	8089883a 	add	r4,r16,r2
  803f10:	21400115 	stw	r5,4(r4)
  803f14:	21400215 	stw	r5,8(r4)
  803f18:	3080cd36 	bltu	r6,r2,804250 <_malloc_r+0x794>
  803f1c:	008020b4 	movhi	r2,130
  803f20:	10a28c04 	addi	r2,r2,-30160
  803f24:	11000017 	ldw	r4,0(r2)
  803f28:	20c0012e 	bgeu	r4,r3,803f30 <_malloc_r+0x474>
  803f2c:	10c00015 	stw	r3,0(r2)
  803f30:	008020b4 	movhi	r2,130
  803f34:	10a28b04 	addi	r2,r2,-30164
  803f38:	11000017 	ldw	r4,0(r2)
  803f3c:	9c000217 	ldw	r16,8(r19)
  803f40:	20c0012e 	bgeu	r4,r3,803f48 <_malloc_r+0x48c>
  803f44:	10c00015 	stw	r3,0(r2)
  803f48:	80c00117 	ldw	r3,4(r16)
  803f4c:	00bfff04 	movi	r2,-4
  803f50:	1886703a 	and	r3,r3,r2
  803f54:	1c45c83a 	sub	r2,r3,r17
  803f58:	1c400236 	bltu	r3,r17,803f64 <_malloc_r+0x4a8>
  803f5c:	00c003c4 	movi	r3,15
  803f60:	18800416 	blt	r3,r2,803f74 <_malloc_r+0x4b8>
  803f64:	9009883a 	mov	r4,r18
  803f68:	0810d480 	call	810d48 <__malloc_unlock>
  803f6c:	0005883a 	mov	r2,zero
  803f70:	003f7b06 	br	803d60 <__alt_mem_onchip_mem+0xff783d60>
  803f74:	88c00054 	ori	r3,r17,1
  803f78:	80c00115 	stw	r3,4(r16)
  803f7c:	8463883a 	add	r17,r16,r17
  803f80:	10800054 	ori	r2,r2,1
  803f84:	9c400215 	stw	r17,8(r19)
  803f88:	88800115 	stw	r2,4(r17)
  803f8c:	9009883a 	mov	r4,r18
  803f90:	0810d480 	call	810d48 <__malloc_unlock>
  803f94:	80800204 	addi	r2,r16,8
  803f98:	003f7106 	br	803d60 <__alt_mem_onchip_mem+0xff783d60>
  803f9c:	00c00504 	movi	r3,20
  803fa0:	18804a2e 	bgeu	r3,r2,8040cc <_malloc_r+0x610>
  803fa4:	00c01504 	movi	r3,84
  803fa8:	18806e36 	bltu	r3,r2,804164 <_malloc_r+0x6a8>
  803fac:	8804d33a 	srli	r2,r17,12
  803fb0:	12001bc4 	addi	r8,r2,111
  803fb4:	11c01b84 	addi	r7,r2,110
  803fb8:	4209883a 	add	r4,r8,r8
  803fbc:	003edd06 	br	803b34 <__alt_mem_onchip_mem+0xff783b34>
  803fc0:	3804d27a 	srli	r2,r7,9
  803fc4:	00c00104 	movi	r3,4
  803fc8:	1880442e 	bgeu	r3,r2,8040dc <_malloc_r+0x620>
  803fcc:	00c00504 	movi	r3,20
  803fd0:	18808136 	bltu	r3,r2,8041d8 <_malloc_r+0x71c>
  803fd4:	11401704 	addi	r5,r2,92
  803fd8:	10c016c4 	addi	r3,r2,91
  803fdc:	294b883a 	add	r5,r5,r5
  803fe0:	294b883a 	add	r5,r5,r5
  803fe4:	294b883a 	add	r5,r5,r5
  803fe8:	994b883a 	add	r5,r19,r5
  803fec:	28800017 	ldw	r2,0(r5)
  803ff0:	01802074 	movhi	r6,129
  803ff4:	297ffe04 	addi	r5,r5,-8
  803ff8:	3194d304 	addi	r6,r6,21324
  803ffc:	28806526 	beq	r5,r2,804194 <_malloc_r+0x6d8>
  804000:	01bfff04 	movi	r6,-4
  804004:	10c00117 	ldw	r3,4(r2)
  804008:	1986703a 	and	r3,r3,r6
  80400c:	38c0022e 	bgeu	r7,r3,804018 <_malloc_r+0x55c>
  804010:	10800217 	ldw	r2,8(r2)
  804014:	28bffb1e 	bne	r5,r2,804004 <__alt_mem_onchip_mem+0xff784004>
  804018:	11400317 	ldw	r5,12(r2)
  80401c:	98c00117 	ldw	r3,4(r19)
  804020:	81400315 	stw	r5,12(r16)
  804024:	80800215 	stw	r2,8(r16)
  804028:	2c000215 	stw	r16,8(r5)
  80402c:	14000315 	stw	r16,12(r2)
  804030:	003ef806 	br	803c14 <__alt_mem_onchip_mem+0xff783c14>
  804034:	88c00054 	ori	r3,r17,1
  804038:	80c00115 	stw	r3,4(r16)
  80403c:	8463883a 	add	r17,r16,r17
  804040:	34400515 	stw	r17,20(r6)
  804044:	34400415 	stw	r17,16(r6)
  804048:	10c00054 	ori	r3,r2,1
  80404c:	8a000315 	stw	r8,12(r17)
  804050:	8a000215 	stw	r8,8(r17)
  804054:	88c00115 	stw	r3,4(r17)
  804058:	88a3883a 	add	r17,r17,r2
  80405c:	88800015 	stw	r2,0(r17)
  804060:	9009883a 	mov	r4,r18
  804064:	0810d480 	call	810d48 <__malloc_unlock>
  804068:	80800204 	addi	r2,r16,8
  80406c:	003f3c06 	br	803d60 <__alt_mem_onchip_mem+0xff783d60>
  804070:	30c00117 	ldw	r3,4(r6)
  804074:	003ee706 	br	803c14 <__alt_mem_onchip_mem+0xff783c14>
  804078:	5ac00044 	addi	r11,r11,1
  80407c:	588000cc 	andi	r2,r11,3
  804080:	31800204 	addi	r6,r6,8
  804084:	103efd1e 	bne	r2,zero,803c7c <__alt_mem_onchip_mem+0xff783c7c>
  804088:	00002406 	br	80411c <_malloc_r+0x660>
  80408c:	14000317 	ldw	r16,12(r2)
  804090:	143f251e 	bne	r2,r16,803d28 <__alt_mem_onchip_mem+0xff783d28>
  804094:	21000084 	addi	r4,r4,2
  804098:	003ebc06 	br	803b8c <__alt_mem_onchip_mem+0xff783b8c>
  80409c:	8085883a 	add	r2,r16,r2
  8040a0:	10c00117 	ldw	r3,4(r2)
  8040a4:	81000317 	ldw	r4,12(r16)
  8040a8:	81400217 	ldw	r5,8(r16)
  8040ac:	18c00054 	ori	r3,r3,1
  8040b0:	10c00115 	stw	r3,4(r2)
  8040b4:	29000315 	stw	r4,12(r5)
  8040b8:	21400215 	stw	r5,8(r4)
  8040bc:	9009883a 	mov	r4,r18
  8040c0:	0810d480 	call	810d48 <__malloc_unlock>
  8040c4:	80800204 	addi	r2,r16,8
  8040c8:	003f2506 	br	803d60 <__alt_mem_onchip_mem+0xff783d60>
  8040cc:	12001704 	addi	r8,r2,92
  8040d0:	11c016c4 	addi	r7,r2,91
  8040d4:	4209883a 	add	r4,r8,r8
  8040d8:	003e9606 	br	803b34 <__alt_mem_onchip_mem+0xff783b34>
  8040dc:	3804d1ba 	srli	r2,r7,6
  8040e0:	11400e44 	addi	r5,r2,57
  8040e4:	10c00e04 	addi	r3,r2,56
  8040e8:	294b883a 	add	r5,r5,r5
  8040ec:	003fbc06 	br	803fe0 <__alt_mem_onchip_mem+0xff783fe0>
  8040f0:	84ff5926 	beq	r16,r19,803e58 <__alt_mem_onchip_mem+0xff783e58>
  8040f4:	00802074 	movhi	r2,129
  8040f8:	1094d304 	addi	r2,r2,21324
  8040fc:	14000217 	ldw	r16,8(r2)
  804100:	00bfff04 	movi	r2,-4
  804104:	80c00117 	ldw	r3,4(r16)
  804108:	1886703a 	and	r3,r3,r2
  80410c:	003f9106 	br	803f54 <__alt_mem_onchip_mem+0xff783f54>
  804110:	60800217 	ldw	r2,8(r12)
  804114:	213fffc4 	addi	r4,r4,-1
  804118:	1300651e 	bne	r2,r12,8042b0 <_malloc_r+0x7f4>
  80411c:	208000cc 	andi	r2,r4,3
  804120:	633ffe04 	addi	r12,r12,-8
  804124:	103ffa1e 	bne	r2,zero,804110 <__alt_mem_onchip_mem+0xff784110>
  804128:	98800117 	ldw	r2,4(r19)
  80412c:	0146303a 	nor	r3,zero,r5
  804130:	1884703a 	and	r2,r3,r2
  804134:	98800115 	stw	r2,4(r19)
  804138:	294b883a 	add	r5,r5,r5
  80413c:	117f2836 	bltu	r2,r5,803de0 <__alt_mem_onchip_mem+0xff783de0>
  804140:	283f2726 	beq	r5,zero,803de0 <__alt_mem_onchip_mem+0xff783de0>
  804144:	2886703a 	and	r3,r5,r2
  804148:	5809883a 	mov	r4,r11
  80414c:	183ec31e 	bne	r3,zero,803c5c <__alt_mem_onchip_mem+0xff783c5c>
  804150:	294b883a 	add	r5,r5,r5
  804154:	2886703a 	and	r3,r5,r2
  804158:	21000104 	addi	r4,r4,4
  80415c:	183ffc26 	beq	r3,zero,804150 <__alt_mem_onchip_mem+0xff784150>
  804160:	003ebe06 	br	803c5c <__alt_mem_onchip_mem+0xff783c5c>
  804164:	00c05504 	movi	r3,340
  804168:	18801236 	bltu	r3,r2,8041b4 <_malloc_r+0x6f8>
  80416c:	8804d3fa 	srli	r2,r17,15
  804170:	12001e04 	addi	r8,r2,120
  804174:	11c01dc4 	addi	r7,r2,119
  804178:	4209883a 	add	r4,r8,r8
  80417c:	003e6d06 	br	803b34 <__alt_mem_onchip_mem+0xff783b34>
  804180:	00c40004 	movi	r3,4096
  804184:	003f4606 	br	803ea0 <__alt_mem_onchip_mem+0xff783ea0>
  804188:	00800044 	movi	r2,1
  80418c:	a0800115 	stw	r2,4(r20)
  804190:	003f7406 	br	803f64 <__alt_mem_onchip_mem+0xff783f64>
  804194:	1805d0ba 	srai	r2,r3,2
  804198:	01c00044 	movi	r7,1
  80419c:	30c00117 	ldw	r3,4(r6)
  8041a0:	388e983a 	sll	r7,r7,r2
  8041a4:	2805883a 	mov	r2,r5
  8041a8:	38c6b03a 	or	r3,r7,r3
  8041ac:	30c00115 	stw	r3,4(r6)
  8041b0:	003f9b06 	br	804020 <__alt_mem_onchip_mem+0xff784020>
  8041b4:	00c15504 	movi	r3,1364
  8041b8:	18801a36 	bltu	r3,r2,804224 <_malloc_r+0x768>
  8041bc:	8804d4ba 	srli	r2,r17,18
  8041c0:	12001f44 	addi	r8,r2,125
  8041c4:	11c01f04 	addi	r7,r2,124
  8041c8:	4209883a 	add	r4,r8,r8
  8041cc:	003e5906 	br	803b34 <__alt_mem_onchip_mem+0xff783b34>
  8041d0:	ad400404 	addi	r21,r21,16
  8041d4:	003f1706 	br	803e34 <__alt_mem_onchip_mem+0xff783e34>
  8041d8:	00c01504 	movi	r3,84
  8041dc:	18802336 	bltu	r3,r2,80426c <_malloc_r+0x7b0>
  8041e0:	3804d33a 	srli	r2,r7,12
  8041e4:	11401bc4 	addi	r5,r2,111
  8041e8:	10c01b84 	addi	r3,r2,110
  8041ec:	294b883a 	add	r5,r5,r5
  8041f0:	003f7b06 	br	803fe0 <__alt_mem_onchip_mem+0xff783fe0>
  8041f4:	9c000217 	ldw	r16,8(r19)
  8041f8:	00bfff04 	movi	r2,-4
  8041fc:	80c00117 	ldw	r3,4(r16)
  804200:	1886703a 	and	r3,r3,r2
  804204:	003f5306 	br	803f54 <__alt_mem_onchip_mem+0xff783f54>
  804208:	3083ffcc 	andi	r2,r6,4095
  80420c:	103f181e 	bne	r2,zero,803e70 <__alt_mem_onchip_mem+0xff783e70>
  804210:	99000217 	ldw	r4,8(r19)
  804214:	b545883a 	add	r2,r22,r21
  804218:	10800054 	ori	r2,r2,1
  80421c:	20800115 	stw	r2,4(r4)
  804220:	003f3e06 	br	803f1c <__alt_mem_onchip_mem+0xff783f1c>
  804224:	01003f84 	movi	r4,254
  804228:	02001fc4 	movi	r8,127
  80422c:	01c01f84 	movi	r7,126
  804230:	003e4006 	br	803b34 <__alt_mem_onchip_mem+0xff783b34>
  804234:	00802074 	movhi	r2,129
  804238:	109af004 	addi	r2,r2,27584
  80423c:	15000015 	stw	r20,0(r2)
  804240:	003f1106 	br	803e88 <__alt_mem_onchip_mem+0xff783e88>
  804244:	00800044 	movi	r2,1
  804248:	002b883a 	mov	r21,zero
  80424c:	003f1f06 	br	803ecc <__alt_mem_onchip_mem+0xff783ecc>
  804250:	81400204 	addi	r5,r16,8
  804254:	9009883a 	mov	r4,r18
  804258:	08091e00 	call	8091e0 <_free_r>
  80425c:	008020b4 	movhi	r2,130
  804260:	10a29e04 	addi	r2,r2,-30088
  804264:	10c00017 	ldw	r3,0(r2)
  804268:	003f2c06 	br	803f1c <__alt_mem_onchip_mem+0xff783f1c>
  80426c:	00c05504 	movi	r3,340
  804270:	18800536 	bltu	r3,r2,804288 <_malloc_r+0x7cc>
  804274:	3804d3fa 	srli	r2,r7,15
  804278:	11401e04 	addi	r5,r2,120
  80427c:	10c01dc4 	addi	r3,r2,119
  804280:	294b883a 	add	r5,r5,r5
  804284:	003f5606 	br	803fe0 <__alt_mem_onchip_mem+0xff783fe0>
  804288:	00c15504 	movi	r3,1364
  80428c:	18800536 	bltu	r3,r2,8042a4 <_malloc_r+0x7e8>
  804290:	3804d4ba 	srli	r2,r7,18
  804294:	11401f44 	addi	r5,r2,125
  804298:	10c01f04 	addi	r3,r2,124
  80429c:	294b883a 	add	r5,r5,r5
  8042a0:	003f4f06 	br	803fe0 <__alt_mem_onchip_mem+0xff783fe0>
  8042a4:	01403f84 	movi	r5,254
  8042a8:	00c01f84 	movi	r3,126
  8042ac:	003f4c06 	br	803fe0 <__alt_mem_onchip_mem+0xff783fe0>
  8042b0:	98800117 	ldw	r2,4(r19)
  8042b4:	003fa006 	br	804138 <__alt_mem_onchip_mem+0xff784138>
  8042b8:	8808d0fa 	srli	r4,r17,3
  8042bc:	20800044 	addi	r2,r4,1
  8042c0:	1085883a 	add	r2,r2,r2
  8042c4:	003e9006 	br	803d08 <__alt_mem_onchip_mem+0xff783d08>

008042c8 <memset>:
  8042c8:	20c000cc 	andi	r3,r4,3
  8042cc:	2005883a 	mov	r2,r4
  8042d0:	18004426 	beq	r3,zero,8043e4 <memset+0x11c>
  8042d4:	31ffffc4 	addi	r7,r6,-1
  8042d8:	30004026 	beq	r6,zero,8043dc <memset+0x114>
  8042dc:	2813883a 	mov	r9,r5
  8042e0:	200d883a 	mov	r6,r4
  8042e4:	2007883a 	mov	r3,r4
  8042e8:	00000406 	br	8042fc <memset+0x34>
  8042ec:	3a3fffc4 	addi	r8,r7,-1
  8042f0:	31800044 	addi	r6,r6,1
  8042f4:	38003926 	beq	r7,zero,8043dc <memset+0x114>
  8042f8:	400f883a 	mov	r7,r8
  8042fc:	18c00044 	addi	r3,r3,1
  804300:	32400005 	stb	r9,0(r6)
  804304:	1a0000cc 	andi	r8,r3,3
  804308:	403ff81e 	bne	r8,zero,8042ec <__alt_mem_onchip_mem+0xff7842ec>
  80430c:	010000c4 	movi	r4,3
  804310:	21c02d2e 	bgeu	r4,r7,8043c8 <memset+0x100>
  804314:	29003fcc 	andi	r4,r5,255
  804318:	200c923a 	slli	r6,r4,8
  80431c:	3108b03a 	or	r4,r6,r4
  804320:	200c943a 	slli	r6,r4,16
  804324:	218cb03a 	or	r6,r4,r6
  804328:	010003c4 	movi	r4,15
  80432c:	21c0182e 	bgeu	r4,r7,804390 <memset+0xc8>
  804330:	3b3ffc04 	addi	r12,r7,-16
  804334:	6018d13a 	srli	r12,r12,4
  804338:	1a000104 	addi	r8,r3,4
  80433c:	1ac00204 	addi	r11,r3,8
  804340:	6008913a 	slli	r4,r12,4
  804344:	1a800304 	addi	r10,r3,12
  804348:	1813883a 	mov	r9,r3
  80434c:	21000504 	addi	r4,r4,20
  804350:	1909883a 	add	r4,r3,r4
  804354:	49800015 	stw	r6,0(r9)
  804358:	41800015 	stw	r6,0(r8)
  80435c:	59800015 	stw	r6,0(r11)
  804360:	51800015 	stw	r6,0(r10)
  804364:	42000404 	addi	r8,r8,16
  804368:	4a400404 	addi	r9,r9,16
  80436c:	5ac00404 	addi	r11,r11,16
  804370:	52800404 	addi	r10,r10,16
  804374:	413ff71e 	bne	r8,r4,804354 <__alt_mem_onchip_mem+0xff784354>
  804378:	63000044 	addi	r12,r12,1
  80437c:	6018913a 	slli	r12,r12,4
  804380:	39c003cc 	andi	r7,r7,15
  804384:	010000c4 	movi	r4,3
  804388:	1b07883a 	add	r3,r3,r12
  80438c:	21c00e2e 	bgeu	r4,r7,8043c8 <memset+0x100>
  804390:	1813883a 	mov	r9,r3
  804394:	3811883a 	mov	r8,r7
  804398:	010000c4 	movi	r4,3
  80439c:	49800015 	stw	r6,0(r9)
  8043a0:	423fff04 	addi	r8,r8,-4
  8043a4:	4a400104 	addi	r9,r9,4
  8043a8:	223ffc36 	bltu	r4,r8,80439c <__alt_mem_onchip_mem+0xff78439c>
  8043ac:	393fff04 	addi	r4,r7,-4
  8043b0:	2008d0ba 	srli	r4,r4,2
  8043b4:	39c000cc 	andi	r7,r7,3
  8043b8:	21000044 	addi	r4,r4,1
  8043bc:	2109883a 	add	r4,r4,r4
  8043c0:	2109883a 	add	r4,r4,r4
  8043c4:	1907883a 	add	r3,r3,r4
  8043c8:	38000526 	beq	r7,zero,8043e0 <memset+0x118>
  8043cc:	19cf883a 	add	r7,r3,r7
  8043d0:	19400005 	stb	r5,0(r3)
  8043d4:	18c00044 	addi	r3,r3,1
  8043d8:	38fffd1e 	bne	r7,r3,8043d0 <__alt_mem_onchip_mem+0xff7843d0>
  8043dc:	f800283a 	ret
  8043e0:	f800283a 	ret
  8043e4:	2007883a 	mov	r3,r4
  8043e8:	300f883a 	mov	r7,r6
  8043ec:	003fc706 	br	80430c <__alt_mem_onchip_mem+0xff78430c>

008043f0 <_open_r>:
  8043f0:	defffd04 	addi	sp,sp,-12
  8043f4:	2805883a 	mov	r2,r5
  8043f8:	dc000015 	stw	r16,0(sp)
  8043fc:	040020b4 	movhi	r16,130
  804400:	dc400115 	stw	r17,4(sp)
  804404:	300b883a 	mov	r5,r6
  804408:	84228a04 	addi	r16,r16,-30168
  80440c:	2023883a 	mov	r17,r4
  804410:	380d883a 	mov	r6,r7
  804414:	1009883a 	mov	r4,r2
  804418:	dfc00215 	stw	ra,8(sp)
  80441c:	80000015 	stw	zero,0(r16)
  804420:	0810e6c0 	call	810e6c <open>
  804424:	00ffffc4 	movi	r3,-1
  804428:	10c00526 	beq	r2,r3,804440 <_open_r+0x50>
  80442c:	dfc00217 	ldw	ra,8(sp)
  804430:	dc400117 	ldw	r17,4(sp)
  804434:	dc000017 	ldw	r16,0(sp)
  804438:	dec00304 	addi	sp,sp,12
  80443c:	f800283a 	ret
  804440:	80c00017 	ldw	r3,0(r16)
  804444:	183ff926 	beq	r3,zero,80442c <__alt_mem_onchip_mem+0xff78442c>
  804448:	88c00015 	stw	r3,0(r17)
  80444c:	003ff706 	br	80442c <__alt_mem_onchip_mem+0xff78442c>

00804450 <_printf_r>:
  804450:	defffd04 	addi	sp,sp,-12
  804454:	2805883a 	mov	r2,r5
  804458:	dfc00015 	stw	ra,0(sp)
  80445c:	d9800115 	stw	r6,4(sp)
  804460:	d9c00215 	stw	r7,8(sp)
  804464:	21400217 	ldw	r5,8(r4)
  804468:	d9c00104 	addi	r7,sp,4
  80446c:	100d883a 	mov	r6,r2
  804470:	0804b100 	call	804b10 <___vfprintf_internal_r>
  804474:	dfc00017 	ldw	ra,0(sp)
  804478:	dec00304 	addi	sp,sp,12
  80447c:	f800283a 	ret

00804480 <printf>:
  804480:	defffc04 	addi	sp,sp,-16
  804484:	dfc00015 	stw	ra,0(sp)
  804488:	d9400115 	stw	r5,4(sp)
  80448c:	d9800215 	stw	r6,8(sp)
  804490:	d9c00315 	stw	r7,12(sp)
  804494:	00802074 	movhi	r2,129
  804498:	109aef04 	addi	r2,r2,27580
  80449c:	10800017 	ldw	r2,0(r2)
  8044a0:	200b883a 	mov	r5,r4
  8044a4:	d9800104 	addi	r6,sp,4
  8044a8:	11000217 	ldw	r4,8(r2)
  8044ac:	0806d080 	call	806d08 <__vfprintf_internal>
  8044b0:	dfc00017 	ldw	ra,0(sp)
  8044b4:	dec00404 	addi	sp,sp,16
  8044b8:	f800283a 	ret

008044bc <_putc_r>:
  8044bc:	defffc04 	addi	sp,sp,-16
  8044c0:	dc000215 	stw	r16,8(sp)
  8044c4:	dfc00315 	stw	ra,12(sp)
  8044c8:	2021883a 	mov	r16,r4
  8044cc:	20000226 	beq	r4,zero,8044d8 <_putc_r+0x1c>
  8044d0:	20800e17 	ldw	r2,56(r4)
  8044d4:	10001b26 	beq	r2,zero,804544 <_putc_r+0x88>
  8044d8:	30800217 	ldw	r2,8(r6)
  8044dc:	10bfffc4 	addi	r2,r2,-1
  8044e0:	30800215 	stw	r2,8(r6)
  8044e4:	10000a16 	blt	r2,zero,804510 <_putc_r+0x54>
  8044e8:	30800017 	ldw	r2,0(r6)
  8044ec:	11400005 	stb	r5,0(r2)
  8044f0:	30800017 	ldw	r2,0(r6)
  8044f4:	10c00044 	addi	r3,r2,1
  8044f8:	30c00015 	stw	r3,0(r6)
  8044fc:	10800003 	ldbu	r2,0(r2)
  804500:	dfc00317 	ldw	ra,12(sp)
  804504:	dc000217 	ldw	r16,8(sp)
  804508:	dec00404 	addi	sp,sp,16
  80450c:	f800283a 	ret
  804510:	30c00617 	ldw	r3,24(r6)
  804514:	10c00616 	blt	r2,r3,804530 <_putc_r+0x74>
  804518:	30800017 	ldw	r2,0(r6)
  80451c:	00c00284 	movi	r3,10
  804520:	11400005 	stb	r5,0(r2)
  804524:	30800017 	ldw	r2,0(r6)
  804528:	11400003 	ldbu	r5,0(r2)
  80452c:	28fff11e 	bne	r5,r3,8044f4 <__alt_mem_onchip_mem+0xff7844f4>
  804530:	8009883a 	mov	r4,r16
  804534:	dfc00317 	ldw	ra,12(sp)
  804538:	dc000217 	ldw	r16,8(sp)
  80453c:	dec00404 	addi	sp,sp,16
  804540:	0806de01 	jmpi	806de0 <__swbuf_r>
  804544:	d9400015 	stw	r5,0(sp)
  804548:	d9800115 	stw	r6,4(sp)
  80454c:	0808fc00 	call	808fc0 <__sinit>
  804550:	d9800117 	ldw	r6,4(sp)
  804554:	d9400017 	ldw	r5,0(sp)
  804558:	003fdf06 	br	8044d8 <__alt_mem_onchip_mem+0xff7844d8>

0080455c <putc>:
  80455c:	00802074 	movhi	r2,129
  804560:	defffc04 	addi	sp,sp,-16
  804564:	109aef04 	addi	r2,r2,27580
  804568:	dc000115 	stw	r16,4(sp)
  80456c:	14000017 	ldw	r16,0(r2)
  804570:	dc400215 	stw	r17,8(sp)
  804574:	dfc00315 	stw	ra,12(sp)
  804578:	2023883a 	mov	r17,r4
  80457c:	80000226 	beq	r16,zero,804588 <putc+0x2c>
  804580:	80800e17 	ldw	r2,56(r16)
  804584:	10001a26 	beq	r2,zero,8045f0 <putc+0x94>
  804588:	28800217 	ldw	r2,8(r5)
  80458c:	10bfffc4 	addi	r2,r2,-1
  804590:	28800215 	stw	r2,8(r5)
  804594:	10000b16 	blt	r2,zero,8045c4 <putc+0x68>
  804598:	28800017 	ldw	r2,0(r5)
  80459c:	14400005 	stb	r17,0(r2)
  8045a0:	28800017 	ldw	r2,0(r5)
  8045a4:	10c00044 	addi	r3,r2,1
  8045a8:	28c00015 	stw	r3,0(r5)
  8045ac:	10800003 	ldbu	r2,0(r2)
  8045b0:	dfc00317 	ldw	ra,12(sp)
  8045b4:	dc400217 	ldw	r17,8(sp)
  8045b8:	dc000117 	ldw	r16,4(sp)
  8045bc:	dec00404 	addi	sp,sp,16
  8045c0:	f800283a 	ret
  8045c4:	28c00617 	ldw	r3,24(r5)
  8045c8:	10c00e16 	blt	r2,r3,804604 <putc+0xa8>
  8045cc:	28800017 	ldw	r2,0(r5)
  8045d0:	01000284 	movi	r4,10
  8045d4:	14400005 	stb	r17,0(r2)
  8045d8:	28800017 	ldw	r2,0(r5)
  8045dc:	10c00003 	ldbu	r3,0(r2)
  8045e0:	193ff01e 	bne	r3,r4,8045a4 <__alt_mem_onchip_mem+0xff7845a4>
  8045e4:	280d883a 	mov	r6,r5
  8045e8:	180b883a 	mov	r5,r3
  8045ec:	00000706 	br	80460c <putc+0xb0>
  8045f0:	8009883a 	mov	r4,r16
  8045f4:	d9400015 	stw	r5,0(sp)
  8045f8:	0808fc00 	call	808fc0 <__sinit>
  8045fc:	d9400017 	ldw	r5,0(sp)
  804600:	003fe106 	br	804588 <__alt_mem_onchip_mem+0xff784588>
  804604:	280d883a 	mov	r6,r5
  804608:	880b883a 	mov	r5,r17
  80460c:	8009883a 	mov	r4,r16
  804610:	dfc00317 	ldw	ra,12(sp)
  804614:	dc400217 	ldw	r17,8(sp)
  804618:	dc000117 	ldw	r16,4(sp)
  80461c:	dec00404 	addi	sp,sp,16
  804620:	0806de01 	jmpi	806de0 <__swbuf_r>

00804624 <_puts_r>:
  804624:	defff604 	addi	sp,sp,-40
  804628:	dc000715 	stw	r16,28(sp)
  80462c:	2021883a 	mov	r16,r4
  804630:	2809883a 	mov	r4,r5
  804634:	dc400815 	stw	r17,32(sp)
  804638:	dfc00915 	stw	ra,36(sp)
  80463c:	2823883a 	mov	r17,r5
  804640:	0804a780 	call	804a78 <strlen>
  804644:	10c00044 	addi	r3,r2,1
  804648:	d8800115 	stw	r2,4(sp)
  80464c:	00802074 	movhi	r2,129
  804650:	10926104 	addi	r2,r2,18820
  804654:	d8800215 	stw	r2,8(sp)
  804658:	00800044 	movi	r2,1
  80465c:	d8800315 	stw	r2,12(sp)
  804660:	00800084 	movi	r2,2
  804664:	dc400015 	stw	r17,0(sp)
  804668:	d8c00615 	stw	r3,24(sp)
  80466c:	dec00415 	stw	sp,16(sp)
  804670:	d8800515 	stw	r2,20(sp)
  804674:	80000226 	beq	r16,zero,804680 <_puts_r+0x5c>
  804678:	80800e17 	ldw	r2,56(r16)
  80467c:	10001426 	beq	r2,zero,8046d0 <_puts_r+0xac>
  804680:	81400217 	ldw	r5,8(r16)
  804684:	2880030b 	ldhu	r2,12(r5)
  804688:	10c8000c 	andi	r3,r2,8192
  80468c:	1800061e 	bne	r3,zero,8046a8 <_puts_r+0x84>
  804690:	29001917 	ldw	r4,100(r5)
  804694:	00f7ffc4 	movi	r3,-8193
  804698:	10880014 	ori	r2,r2,8192
  80469c:	20c6703a 	and	r3,r4,r3
  8046a0:	2880030d 	sth	r2,12(r5)
  8046a4:	28c01915 	stw	r3,100(r5)
  8046a8:	d9800404 	addi	r6,sp,16
  8046ac:	8009883a 	mov	r4,r16
  8046b0:	08094f00 	call	8094f0 <__sfvwrite_r>
  8046b4:	1000091e 	bne	r2,zero,8046dc <_puts_r+0xb8>
  8046b8:	00800284 	movi	r2,10
  8046bc:	dfc00917 	ldw	ra,36(sp)
  8046c0:	dc400817 	ldw	r17,32(sp)
  8046c4:	dc000717 	ldw	r16,28(sp)
  8046c8:	dec00a04 	addi	sp,sp,40
  8046cc:	f800283a 	ret
  8046d0:	8009883a 	mov	r4,r16
  8046d4:	0808fc00 	call	808fc0 <__sinit>
  8046d8:	003fe906 	br	804680 <__alt_mem_onchip_mem+0xff784680>
  8046dc:	00bfffc4 	movi	r2,-1
  8046e0:	003ff606 	br	8046bc <__alt_mem_onchip_mem+0xff7846bc>

008046e4 <puts>:
  8046e4:	00802074 	movhi	r2,129
  8046e8:	109aef04 	addi	r2,r2,27580
  8046ec:	200b883a 	mov	r5,r4
  8046f0:	11000017 	ldw	r4,0(r2)
  8046f4:	08046241 	jmpi	804624 <_puts_r>

008046f8 <lflush>:
  8046f8:	2080030b 	ldhu	r2,12(r4)
  8046fc:	00c00244 	movi	r3,9
  804700:	1080024c 	andi	r2,r2,9
  804704:	10c00226 	beq	r2,r3,804710 <lflush+0x18>
  804708:	0005883a 	mov	r2,zero
  80470c:	f800283a 	ret
  804710:	0808c401 	jmpi	808c40 <fflush>

00804714 <__srefill_r>:
  804714:	defffc04 	addi	sp,sp,-16
  804718:	dc400115 	stw	r17,4(sp)
  80471c:	dc000015 	stw	r16,0(sp)
  804720:	dfc00315 	stw	ra,12(sp)
  804724:	dc800215 	stw	r18,8(sp)
  804728:	2023883a 	mov	r17,r4
  80472c:	2821883a 	mov	r16,r5
  804730:	20000226 	beq	r4,zero,80473c <__srefill_r+0x28>
  804734:	20800e17 	ldw	r2,56(r4)
  804738:	10003c26 	beq	r2,zero,80482c <__srefill_r+0x118>
  80473c:	80c0030b 	ldhu	r3,12(r16)
  804740:	1908000c 	andi	r4,r3,8192
  804744:	1805883a 	mov	r2,r3
  804748:	2000071e 	bne	r4,zero,804768 <__srefill_r+0x54>
  80474c:	81001917 	ldw	r4,100(r16)
  804750:	18880014 	ori	r2,r3,8192
  804754:	00f7ffc4 	movi	r3,-8193
  804758:	20c8703a 	and	r4,r4,r3
  80475c:	8080030d 	sth	r2,12(r16)
  804760:	1007883a 	mov	r3,r2
  804764:	81001915 	stw	r4,100(r16)
  804768:	80000115 	stw	zero,4(r16)
  80476c:	1100080c 	andi	r4,r2,32
  804770:	2000571e 	bne	r4,zero,8048d0 <__srefill_r+0x1bc>
  804774:	1100010c 	andi	r4,r2,4
  804778:	20001f26 	beq	r4,zero,8047f8 <__srefill_r+0xe4>
  80477c:	81400c17 	ldw	r5,48(r16)
  804780:	28000826 	beq	r5,zero,8047a4 <__srefill_r+0x90>
  804784:	80801004 	addi	r2,r16,64
  804788:	28800226 	beq	r5,r2,804794 <__srefill_r+0x80>
  80478c:	8809883a 	mov	r4,r17
  804790:	08091e00 	call	8091e0 <_free_r>
  804794:	80800f17 	ldw	r2,60(r16)
  804798:	80000c15 	stw	zero,48(r16)
  80479c:	80800115 	stw	r2,4(r16)
  8047a0:	1000391e 	bne	r2,zero,804888 <__srefill_r+0x174>
  8047a4:	80800417 	ldw	r2,16(r16)
  8047a8:	10004b26 	beq	r2,zero,8048d8 <__srefill_r+0x1c4>
  8047ac:	8480030b 	ldhu	r18,12(r16)
  8047b0:	908000cc 	andi	r2,r18,3
  8047b4:	10001f1e 	bne	r2,zero,804834 <__srefill_r+0x120>
  8047b8:	81800417 	ldw	r6,16(r16)
  8047bc:	80800817 	ldw	r2,32(r16)
  8047c0:	81c00517 	ldw	r7,20(r16)
  8047c4:	81400717 	ldw	r5,28(r16)
  8047c8:	81800015 	stw	r6,0(r16)
  8047cc:	8809883a 	mov	r4,r17
  8047d0:	103ee83a 	callr	r2
  8047d4:	80800115 	stw	r2,4(r16)
  8047d8:	00800e0e 	bge	zero,r2,804814 <__srefill_r+0x100>
  8047dc:	0005883a 	mov	r2,zero
  8047e0:	dfc00317 	ldw	ra,12(sp)
  8047e4:	dc800217 	ldw	r18,8(sp)
  8047e8:	dc400117 	ldw	r17,4(sp)
  8047ec:	dc000017 	ldw	r16,0(sp)
  8047f0:	dec00404 	addi	sp,sp,16
  8047f4:	f800283a 	ret
  8047f8:	1100040c 	andi	r4,r2,16
  8047fc:	20003026 	beq	r4,zero,8048c0 <__srefill_r+0x1ac>
  804800:	1080020c 	andi	r2,r2,8
  804804:	1000241e 	bne	r2,zero,804898 <__srefill_r+0x184>
  804808:	18c00114 	ori	r3,r3,4
  80480c:	80c0030d 	sth	r3,12(r16)
  804810:	003fe406 	br	8047a4 <__alt_mem_onchip_mem+0xff7847a4>
  804814:	80c0030b 	ldhu	r3,12(r16)
  804818:	1000161e 	bne	r2,zero,804874 <__srefill_r+0x160>
  80481c:	18c00814 	ori	r3,r3,32
  804820:	00bfffc4 	movi	r2,-1
  804824:	80c0030d 	sth	r3,12(r16)
  804828:	003fed06 	br	8047e0 <__alt_mem_onchip_mem+0xff7847e0>
  80482c:	0808fc00 	call	808fc0 <__sinit>
  804830:	003fc206 	br	80473c <__alt_mem_onchip_mem+0xff78473c>
  804834:	00802074 	movhi	r2,129
  804838:	109aee04 	addi	r2,r2,27576
  80483c:	11000017 	ldw	r4,0(r2)
  804840:	01402034 	movhi	r5,128
  804844:	00800044 	movi	r2,1
  804848:	2951be04 	addi	r5,r5,18168
  80484c:	8080030d 	sth	r2,12(r16)
  804850:	08099ac0 	call	8099ac <_fwalk>
  804854:	00800244 	movi	r2,9
  804858:	8480030d 	sth	r18,12(r16)
  80485c:	9480024c 	andi	r18,r18,9
  804860:	90bfd51e 	bne	r18,r2,8047b8 <__alt_mem_onchip_mem+0xff7847b8>
  804864:	800b883a 	mov	r5,r16
  804868:	8809883a 	mov	r4,r17
  80486c:	08089c80 	call	8089c8 <__sflush_r>
  804870:	003fd106 	br	8047b8 <__alt_mem_onchip_mem+0xff7847b8>
  804874:	18c01014 	ori	r3,r3,64
  804878:	80000115 	stw	zero,4(r16)
  80487c:	00bfffc4 	movi	r2,-1
  804880:	80c0030d 	sth	r3,12(r16)
  804884:	003fd606 	br	8047e0 <__alt_mem_onchip_mem+0xff7847e0>
  804888:	80c00e17 	ldw	r3,56(r16)
  80488c:	0005883a 	mov	r2,zero
  804890:	80c00015 	stw	r3,0(r16)
  804894:	003fd206 	br	8047e0 <__alt_mem_onchip_mem+0xff7847e0>
  804898:	800b883a 	mov	r5,r16
  80489c:	8809883a 	mov	r4,r17
  8048a0:	0808be40 	call	808be4 <_fflush_r>
  8048a4:	10000a1e 	bne	r2,zero,8048d0 <__srefill_r+0x1bc>
  8048a8:	8080030b 	ldhu	r2,12(r16)
  8048ac:	00fffdc4 	movi	r3,-9
  8048b0:	80000215 	stw	zero,8(r16)
  8048b4:	1886703a 	and	r3,r3,r2
  8048b8:	80000615 	stw	zero,24(r16)
  8048bc:	003fd206 	br	804808 <__alt_mem_onchip_mem+0xff784808>
  8048c0:	00800244 	movi	r2,9
  8048c4:	88800015 	stw	r2,0(r17)
  8048c8:	18c01014 	ori	r3,r3,64
  8048cc:	80c0030d 	sth	r3,12(r16)
  8048d0:	00bfffc4 	movi	r2,-1
  8048d4:	003fc206 	br	8047e0 <__alt_mem_onchip_mem+0xff7847e0>
  8048d8:	800b883a 	mov	r5,r16
  8048dc:	8809883a 	mov	r4,r17
  8048e0:	08039000 	call	803900 <__smakebuf_r>
  8048e4:	003fb106 	br	8047ac <__alt_mem_onchip_mem+0xff7847ac>

008048e8 <_sbrk_r>:
  8048e8:	defffd04 	addi	sp,sp,-12
  8048ec:	dc000015 	stw	r16,0(sp)
  8048f0:	040020b4 	movhi	r16,130
  8048f4:	dc400115 	stw	r17,4(sp)
  8048f8:	84228a04 	addi	r16,r16,-30168
  8048fc:	2023883a 	mov	r17,r4
  804900:	2809883a 	mov	r4,r5
  804904:	dfc00215 	stw	ra,8(sp)
  804908:	80000015 	stw	zero,0(r16)
  80490c:	081115c0 	call	81115c <sbrk>
  804910:	00ffffc4 	movi	r3,-1
  804914:	10c00526 	beq	r2,r3,80492c <_sbrk_r+0x44>
  804918:	dfc00217 	ldw	ra,8(sp)
  80491c:	dc400117 	ldw	r17,4(sp)
  804920:	dc000017 	ldw	r16,0(sp)
  804924:	dec00304 	addi	sp,sp,12
  804928:	f800283a 	ret
  80492c:	80c00017 	ldw	r3,0(r16)
  804930:	183ff926 	beq	r3,zero,804918 <__alt_mem_onchip_mem+0xff784918>
  804934:	88c00015 	stw	r3,0(r17)
  804938:	003ff706 	br	804918 <__alt_mem_onchip_mem+0xff784918>

0080493c <__sread>:
  80493c:	defffe04 	addi	sp,sp,-8
  804940:	dc000015 	stw	r16,0(sp)
  804944:	2821883a 	mov	r16,r5
  804948:	2940038f 	ldh	r5,14(r5)
  80494c:	dfc00115 	stw	ra,4(sp)
  804950:	080b0480 	call	80b048 <_read_r>
  804954:	10000716 	blt	r2,zero,804974 <__sread+0x38>
  804958:	80c01417 	ldw	r3,80(r16)
  80495c:	1887883a 	add	r3,r3,r2
  804960:	80c01415 	stw	r3,80(r16)
  804964:	dfc00117 	ldw	ra,4(sp)
  804968:	dc000017 	ldw	r16,0(sp)
  80496c:	dec00204 	addi	sp,sp,8
  804970:	f800283a 	ret
  804974:	80c0030b 	ldhu	r3,12(r16)
  804978:	18fbffcc 	andi	r3,r3,61439
  80497c:	80c0030d 	sth	r3,12(r16)
  804980:	dfc00117 	ldw	ra,4(sp)
  804984:	dc000017 	ldw	r16,0(sp)
  804988:	dec00204 	addi	sp,sp,8
  80498c:	f800283a 	ret

00804990 <__seofread>:
  804990:	0005883a 	mov	r2,zero
  804994:	f800283a 	ret

00804998 <__swrite>:
  804998:	2880030b 	ldhu	r2,12(r5)
  80499c:	defffb04 	addi	sp,sp,-20
  8049a0:	dcc00315 	stw	r19,12(sp)
  8049a4:	dc800215 	stw	r18,8(sp)
  8049a8:	dc400115 	stw	r17,4(sp)
  8049ac:	dc000015 	stw	r16,0(sp)
  8049b0:	dfc00415 	stw	ra,16(sp)
  8049b4:	10c0400c 	andi	r3,r2,256
  8049b8:	2821883a 	mov	r16,r5
  8049bc:	2023883a 	mov	r17,r4
  8049c0:	3025883a 	mov	r18,r6
  8049c4:	3827883a 	mov	r19,r7
  8049c8:	18000526 	beq	r3,zero,8049e0 <__swrite+0x48>
  8049cc:	2940038f 	ldh	r5,14(r5)
  8049d0:	01c00084 	movi	r7,2
  8049d4:	000d883a 	mov	r6,zero
  8049d8:	0809c640 	call	809c64 <_lseek_r>
  8049dc:	8080030b 	ldhu	r2,12(r16)
  8049e0:	8140038f 	ldh	r5,14(r16)
  8049e4:	10bbffcc 	andi	r2,r2,61439
  8049e8:	980f883a 	mov	r7,r19
  8049ec:	900d883a 	mov	r6,r18
  8049f0:	8809883a 	mov	r4,r17
  8049f4:	8080030d 	sth	r2,12(r16)
  8049f8:	dfc00417 	ldw	ra,16(sp)
  8049fc:	dcc00317 	ldw	r19,12(sp)
  804a00:	dc800217 	ldw	r18,8(sp)
  804a04:	dc400117 	ldw	r17,4(sp)
  804a08:	dc000017 	ldw	r16,0(sp)
  804a0c:	dec00504 	addi	sp,sp,20
  804a10:	0806f381 	jmpi	806f38 <_write_r>

00804a14 <__sseek>:
  804a14:	defffe04 	addi	sp,sp,-8
  804a18:	dc000015 	stw	r16,0(sp)
  804a1c:	2821883a 	mov	r16,r5
  804a20:	2940038f 	ldh	r5,14(r5)
  804a24:	dfc00115 	stw	ra,4(sp)
  804a28:	0809c640 	call	809c64 <_lseek_r>
  804a2c:	00ffffc4 	movi	r3,-1
  804a30:	10c00826 	beq	r2,r3,804a54 <__sseek+0x40>
  804a34:	80c0030b 	ldhu	r3,12(r16)
  804a38:	80801415 	stw	r2,80(r16)
  804a3c:	18c40014 	ori	r3,r3,4096
  804a40:	80c0030d 	sth	r3,12(r16)
  804a44:	dfc00117 	ldw	ra,4(sp)
  804a48:	dc000017 	ldw	r16,0(sp)
  804a4c:	dec00204 	addi	sp,sp,8
  804a50:	f800283a 	ret
  804a54:	80c0030b 	ldhu	r3,12(r16)
  804a58:	18fbffcc 	andi	r3,r3,61439
  804a5c:	80c0030d 	sth	r3,12(r16)
  804a60:	dfc00117 	ldw	ra,4(sp)
  804a64:	dc000017 	ldw	r16,0(sp)
  804a68:	dec00204 	addi	sp,sp,8
  804a6c:	f800283a 	ret

00804a70 <__sclose>:
  804a70:	2940038f 	ldh	r5,14(r5)
  804a74:	08070ec1 	jmpi	8070ec <_close_r>

00804a78 <strlen>:
  804a78:	208000cc 	andi	r2,r4,3
  804a7c:	10002026 	beq	r2,zero,804b00 <strlen+0x88>
  804a80:	20800007 	ldb	r2,0(r4)
  804a84:	10002026 	beq	r2,zero,804b08 <strlen+0x90>
  804a88:	2005883a 	mov	r2,r4
  804a8c:	00000206 	br	804a98 <strlen+0x20>
  804a90:	10c00007 	ldb	r3,0(r2)
  804a94:	18001826 	beq	r3,zero,804af8 <strlen+0x80>
  804a98:	10800044 	addi	r2,r2,1
  804a9c:	10c000cc 	andi	r3,r2,3
  804aa0:	183ffb1e 	bne	r3,zero,804a90 <__alt_mem_onchip_mem+0xff784a90>
  804aa4:	10c00017 	ldw	r3,0(r2)
  804aa8:	01ffbff4 	movhi	r7,65279
  804aac:	39ffbfc4 	addi	r7,r7,-257
  804ab0:	00ca303a 	nor	r5,zero,r3
  804ab4:	01a02074 	movhi	r6,32897
  804ab8:	19c7883a 	add	r3,r3,r7
  804abc:	31a02004 	addi	r6,r6,-32640
  804ac0:	1946703a 	and	r3,r3,r5
  804ac4:	1986703a 	and	r3,r3,r6
  804ac8:	1800091e 	bne	r3,zero,804af0 <strlen+0x78>
  804acc:	10800104 	addi	r2,r2,4
  804ad0:	10c00017 	ldw	r3,0(r2)
  804ad4:	19cb883a 	add	r5,r3,r7
  804ad8:	00c6303a 	nor	r3,zero,r3
  804adc:	28c6703a 	and	r3,r5,r3
  804ae0:	1986703a 	and	r3,r3,r6
  804ae4:	183ff926 	beq	r3,zero,804acc <__alt_mem_onchip_mem+0xff784acc>
  804ae8:	00000106 	br	804af0 <strlen+0x78>
  804aec:	10800044 	addi	r2,r2,1
  804af0:	10c00007 	ldb	r3,0(r2)
  804af4:	183ffd1e 	bne	r3,zero,804aec <__alt_mem_onchip_mem+0xff784aec>
  804af8:	1105c83a 	sub	r2,r2,r4
  804afc:	f800283a 	ret
  804b00:	2005883a 	mov	r2,r4
  804b04:	003fe706 	br	804aa4 <__alt_mem_onchip_mem+0xff784aa4>
  804b08:	0005883a 	mov	r2,zero
  804b0c:	f800283a 	ret

00804b10 <___vfprintf_internal_r>:
  804b10:	deffb804 	addi	sp,sp,-288
  804b14:	dfc04715 	stw	ra,284(sp)
  804b18:	ddc04515 	stw	r23,276(sp)
  804b1c:	dd404315 	stw	r21,268(sp)
  804b20:	d9002c15 	stw	r4,176(sp)
  804b24:	282f883a 	mov	r23,r5
  804b28:	302b883a 	mov	r21,r6
  804b2c:	d9c02d15 	stw	r7,180(sp)
  804b30:	df004615 	stw	fp,280(sp)
  804b34:	dd804415 	stw	r22,272(sp)
  804b38:	dd004215 	stw	r20,264(sp)
  804b3c:	dcc04115 	stw	r19,260(sp)
  804b40:	dc804015 	stw	r18,256(sp)
  804b44:	dc403f15 	stw	r17,252(sp)
  804b48:	dc003e15 	stw	r16,248(sp)
  804b4c:	0809c340 	call	809c34 <_localeconv_r>
  804b50:	10800017 	ldw	r2,0(r2)
  804b54:	1009883a 	mov	r4,r2
  804b58:	d8803415 	stw	r2,208(sp)
  804b5c:	0804a780 	call	804a78 <strlen>
  804b60:	d8803715 	stw	r2,220(sp)
  804b64:	d8802c17 	ldw	r2,176(sp)
  804b68:	10000226 	beq	r2,zero,804b74 <___vfprintf_internal_r+0x64>
  804b6c:	10800e17 	ldw	r2,56(r2)
  804b70:	1000f926 	beq	r2,zero,804f58 <___vfprintf_internal_r+0x448>
  804b74:	b880030b 	ldhu	r2,12(r23)
  804b78:	10c8000c 	andi	r3,r2,8192
  804b7c:	1800061e 	bne	r3,zero,804b98 <___vfprintf_internal_r+0x88>
  804b80:	b9001917 	ldw	r4,100(r23)
  804b84:	00f7ffc4 	movi	r3,-8193
  804b88:	10880014 	ori	r2,r2,8192
  804b8c:	20c6703a 	and	r3,r4,r3
  804b90:	b880030d 	sth	r2,12(r23)
  804b94:	b8c01915 	stw	r3,100(r23)
  804b98:	10c0020c 	andi	r3,r2,8
  804b9c:	1800c126 	beq	r3,zero,804ea4 <___vfprintf_internal_r+0x394>
  804ba0:	b8c00417 	ldw	r3,16(r23)
  804ba4:	1800bf26 	beq	r3,zero,804ea4 <___vfprintf_internal_r+0x394>
  804ba8:	1080068c 	andi	r2,r2,26
  804bac:	00c00284 	movi	r3,10
  804bb0:	10c0c426 	beq	r2,r3,804ec4 <___vfprintf_internal_r+0x3b4>
  804bb4:	d8c00404 	addi	r3,sp,16
  804bb8:	05002074 	movhi	r20,129
  804bbc:	d9001e04 	addi	r4,sp,120
  804bc0:	a5127284 	addi	r20,r20,18890
  804bc4:	d8c01e15 	stw	r3,120(sp)
  804bc8:	d8002015 	stw	zero,128(sp)
  804bcc:	d8001f15 	stw	zero,124(sp)
  804bd0:	d8003315 	stw	zero,204(sp)
  804bd4:	d8003615 	stw	zero,216(sp)
  804bd8:	d8003815 	stw	zero,224(sp)
  804bdc:	1811883a 	mov	r8,r3
  804be0:	d8003915 	stw	zero,228(sp)
  804be4:	d8003a15 	stw	zero,232(sp)
  804be8:	d8002f15 	stw	zero,188(sp)
  804bec:	d9002815 	stw	r4,160(sp)
  804bf0:	a8800007 	ldb	r2,0(r21)
  804bf4:	10027b26 	beq	r2,zero,8055e4 <___vfprintf_internal_r+0xad4>
  804bf8:	00c00944 	movi	r3,37
  804bfc:	a821883a 	mov	r16,r21
  804c00:	10c0021e 	bne	r2,r3,804c0c <___vfprintf_internal_r+0xfc>
  804c04:	00001406 	br	804c58 <___vfprintf_internal_r+0x148>
  804c08:	10c00326 	beq	r2,r3,804c18 <___vfprintf_internal_r+0x108>
  804c0c:	84000044 	addi	r16,r16,1
  804c10:	80800007 	ldb	r2,0(r16)
  804c14:	103ffc1e 	bne	r2,zero,804c08 <__alt_mem_onchip_mem+0xff784c08>
  804c18:	8563c83a 	sub	r17,r16,r21
  804c1c:	88000e26 	beq	r17,zero,804c58 <___vfprintf_internal_r+0x148>
  804c20:	d8c02017 	ldw	r3,128(sp)
  804c24:	d8801f17 	ldw	r2,124(sp)
  804c28:	45400015 	stw	r21,0(r8)
  804c2c:	1c47883a 	add	r3,r3,r17
  804c30:	10800044 	addi	r2,r2,1
  804c34:	d8c02015 	stw	r3,128(sp)
  804c38:	44400115 	stw	r17,4(r8)
  804c3c:	d8801f15 	stw	r2,124(sp)
  804c40:	00c001c4 	movi	r3,7
  804c44:	1880a716 	blt	r3,r2,804ee4 <___vfprintf_internal_r+0x3d4>
  804c48:	42000204 	addi	r8,r8,8
  804c4c:	d9402f17 	ldw	r5,188(sp)
  804c50:	2c4b883a 	add	r5,r5,r17
  804c54:	d9402f15 	stw	r5,188(sp)
  804c58:	80800007 	ldb	r2,0(r16)
  804c5c:	1000a826 	beq	r2,zero,804f00 <___vfprintf_internal_r+0x3f0>
  804c60:	84400047 	ldb	r17,1(r16)
  804c64:	00bfffc4 	movi	r2,-1
  804c68:	85400044 	addi	r21,r16,1
  804c6c:	d8002785 	stb	zero,158(sp)
  804c70:	0007883a 	mov	r3,zero
  804c74:	000f883a 	mov	r7,zero
  804c78:	d8802915 	stw	r2,164(sp)
  804c7c:	d8003115 	stw	zero,196(sp)
  804c80:	0025883a 	mov	r18,zero
  804c84:	01401604 	movi	r5,88
  804c88:	01800244 	movi	r6,9
  804c8c:	02800a84 	movi	r10,42
  804c90:	02401b04 	movi	r9,108
  804c94:	ad400044 	addi	r21,r21,1
  804c98:	88bff804 	addi	r2,r17,-32
  804c9c:	28830436 	bltu	r5,r2,8058b0 <___vfprintf_internal_r+0xda0>
  804ca0:	100490ba 	slli	r2,r2,2
  804ca4:	01002034 	movhi	r4,128
  804ca8:	21132e04 	addi	r4,r4,19640
  804cac:	1105883a 	add	r2,r2,r4
  804cb0:	10800017 	ldw	r2,0(r2)
  804cb4:	1000683a 	jmp	r2
  804cb8:	008057d0 	cmplti	r2,zero,351
  804cbc:	008058b0 	cmpltui	r2,zero,354
  804cc0:	008058b0 	cmpltui	r2,zero,354
  804cc4:	008057f0 	cmpltui	r2,zero,351
  804cc8:	008058b0 	cmpltui	r2,zero,354
  804ccc:	008058b0 	cmpltui	r2,zero,354
  804cd0:	008058b0 	cmpltui	r2,zero,354
  804cd4:	008058b0 	cmpltui	r2,zero,354
  804cd8:	008058b0 	cmpltui	r2,zero,354
  804cdc:	008058b0 	cmpltui	r2,zero,354
  804ce0:	00804f64 	muli	r2,zero,317
  804ce4:	0080570c 	andi	r2,zero,348
  804ce8:	008058b0 	cmpltui	r2,zero,354
  804cec:	00804e2c 	andhi	r2,zero,312
  804cf0:	00804f8c 	andi	r2,zero,318
  804cf4:	008058b0 	cmpltui	r2,zero,354
  804cf8:	00804fcc 	andi	r2,zero,319
  804cfc:	00804fd8 	cmpnei	r2,zero,319
  804d00:	00804fd8 	cmpnei	r2,zero,319
  804d04:	00804fd8 	cmpnei	r2,zero,319
  804d08:	00804fd8 	cmpnei	r2,zero,319
  804d0c:	00804fd8 	cmpnei	r2,zero,319
  804d10:	00804fd8 	cmpnei	r2,zero,319
  804d14:	00804fd8 	cmpnei	r2,zero,319
  804d18:	00804fd8 	cmpnei	r2,zero,319
  804d1c:	00804fd8 	cmpnei	r2,zero,319
  804d20:	008058b0 	cmpltui	r2,zero,354
  804d24:	008058b0 	cmpltui	r2,zero,354
  804d28:	008058b0 	cmpltui	r2,zero,354
  804d2c:	008058b0 	cmpltui	r2,zero,354
  804d30:	008058b0 	cmpltui	r2,zero,354
  804d34:	008058b0 	cmpltui	r2,zero,354
  804d38:	008058b0 	cmpltui	r2,zero,354
  804d3c:	008058b0 	cmpltui	r2,zero,354
  804d40:	008058b0 	cmpltui	r2,zero,354
  804d44:	008058b0 	cmpltui	r2,zero,354
  804d48:	0080500c 	andi	r2,zero,320
  804d4c:	008050c8 	cmpgei	r2,zero,323
  804d50:	008058b0 	cmpltui	r2,zero,354
  804d54:	008050c8 	cmpgei	r2,zero,323
  804d58:	008058b0 	cmpltui	r2,zero,354
  804d5c:	008058b0 	cmpltui	r2,zero,354
  804d60:	008058b0 	cmpltui	r2,zero,354
  804d64:	008058b0 	cmpltui	r2,zero,354
  804d68:	00805168 	cmpgeui	r2,zero,325
  804d6c:	008058b0 	cmpltui	r2,zero,354
  804d70:	008058b0 	cmpltui	r2,zero,354
  804d74:	00805174 	movhi	r2,325
  804d78:	008058b0 	cmpltui	r2,zero,354
  804d7c:	008058b0 	cmpltui	r2,zero,354
  804d80:	008058b0 	cmpltui	r2,zero,354
  804d84:	008058b0 	cmpltui	r2,zero,354
  804d88:	008058b0 	cmpltui	r2,zero,354
  804d8c:	008055ec 	andhi	r2,zero,343
  804d90:	008058b0 	cmpltui	r2,zero,354
  804d94:	008058b0 	cmpltui	r2,zero,354
  804d98:	0080564c 	andi	r2,zero,345
  804d9c:	008058b0 	cmpltui	r2,zero,354
  804da0:	008058b0 	cmpltui	r2,zero,354
  804da4:	008058b0 	cmpltui	r2,zero,354
  804da8:	008058b0 	cmpltui	r2,zero,354
  804dac:	008058b0 	cmpltui	r2,zero,354
  804db0:	008058b0 	cmpltui	r2,zero,354
  804db4:	008058b0 	cmpltui	r2,zero,354
  804db8:	008058b0 	cmpltui	r2,zero,354
  804dbc:	008058b0 	cmpltui	r2,zero,354
  804dc0:	008058b0 	cmpltui	r2,zero,354
  804dc4:	0080585c 	xori	r2,zero,353
  804dc8:	008057fc 	xorhi	r2,zero,351
  804dcc:	008050c8 	cmpgei	r2,zero,323
  804dd0:	008050c8 	cmpgei	r2,zero,323
  804dd4:	008050c8 	cmpgei	r2,zero,323
  804dd8:	0080580c 	andi	r2,zero,352
  804ddc:	008057fc 	xorhi	r2,zero,351
  804de0:	008058b0 	cmpltui	r2,zero,354
  804de4:	008058b0 	cmpltui	r2,zero,354
  804de8:	00805818 	cmpnei	r2,zero,352
  804dec:	008058b0 	cmpltui	r2,zero,354
  804df0:	00805828 	cmpgeui	r2,zero,352
  804df4:	008056fc 	xorhi	r2,zero,347
  804df8:	00804e38 	rdprs	r2,zero,312
  804dfc:	0080571c 	xori	r2,zero,348
  804e00:	008058b0 	cmpltui	r2,zero,354
  804e04:	00805728 	cmpgeui	r2,zero,348
  804e08:	008058b0 	cmpltui	r2,zero,354
  804e0c:	00805784 	movi	r2,350
  804e10:	008058b0 	cmpltui	r2,zero,354
  804e14:	008058b0 	cmpltui	r2,zero,354
  804e18:	00805794 	movui	r2,350
  804e1c:	d9003117 	ldw	r4,196(sp)
  804e20:	d8802d15 	stw	r2,180(sp)
  804e24:	0109c83a 	sub	r4,zero,r4
  804e28:	d9003115 	stw	r4,196(sp)
  804e2c:	94800114 	ori	r18,r18,4
  804e30:	ac400007 	ldb	r17,0(r21)
  804e34:	003f9706 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  804e38:	00800c04 	movi	r2,48
  804e3c:	d9002d17 	ldw	r4,180(sp)
  804e40:	d9402917 	ldw	r5,164(sp)
  804e44:	d8802705 	stb	r2,156(sp)
  804e48:	00801e04 	movi	r2,120
  804e4c:	d8802745 	stb	r2,157(sp)
  804e50:	d8002785 	stb	zero,158(sp)
  804e54:	20c00104 	addi	r3,r4,4
  804e58:	24c00017 	ldw	r19,0(r4)
  804e5c:	002d883a 	mov	r22,zero
  804e60:	90800094 	ori	r2,r18,2
  804e64:	28029a16 	blt	r5,zero,8058d0 <___vfprintf_internal_r+0xdc0>
  804e68:	00bfdfc4 	movi	r2,-129
  804e6c:	90a4703a 	and	r18,r18,r2
  804e70:	d8c02d15 	stw	r3,180(sp)
  804e74:	94800094 	ori	r18,r18,2
  804e78:	9802871e 	bne	r19,zero,805898 <___vfprintf_internal_r+0xd88>
  804e7c:	00802074 	movhi	r2,129
  804e80:	10926b04 	addi	r2,r2,18860
  804e84:	d8803915 	stw	r2,228(sp)
  804e88:	04401e04 	movi	r17,120
  804e8c:	d8802917 	ldw	r2,164(sp)
  804e90:	0039883a 	mov	fp,zero
  804e94:	1001e926 	beq	r2,zero,80563c <___vfprintf_internal_r+0xb2c>
  804e98:	0027883a 	mov	r19,zero
  804e9c:	002d883a 	mov	r22,zero
  804ea0:	00020506 	br	8056b8 <___vfprintf_internal_r+0xba8>
  804ea4:	d9002c17 	ldw	r4,176(sp)
  804ea8:	b80b883a 	mov	r5,r23
  804eac:	0806f980 	call	806f98 <__swsetup_r>
  804eb0:	1005ac1e 	bne	r2,zero,806564 <___vfprintf_internal_r+0x1a54>
  804eb4:	b880030b 	ldhu	r2,12(r23)
  804eb8:	00c00284 	movi	r3,10
  804ebc:	1080068c 	andi	r2,r2,26
  804ec0:	10ff3c1e 	bne	r2,r3,804bb4 <__alt_mem_onchip_mem+0xff784bb4>
  804ec4:	b880038f 	ldh	r2,14(r23)
  804ec8:	103f3a16 	blt	r2,zero,804bb4 <__alt_mem_onchip_mem+0xff784bb4>
  804ecc:	d9c02d17 	ldw	r7,180(sp)
  804ed0:	d9002c17 	ldw	r4,176(sp)
  804ed4:	a80d883a 	mov	r6,r21
  804ed8:	b80b883a 	mov	r5,r23
  804edc:	0806d240 	call	806d24 <__sbprintf>
  804ee0:	00001106 	br	804f28 <___vfprintf_internal_r+0x418>
  804ee4:	d9002c17 	ldw	r4,176(sp)
  804ee8:	d9801e04 	addi	r6,sp,120
  804eec:	b80b883a 	mov	r5,r23
  804ef0:	080b8580 	call	80b858 <__sprint_r>
  804ef4:	1000081e 	bne	r2,zero,804f18 <___vfprintf_internal_r+0x408>
  804ef8:	da000404 	addi	r8,sp,16
  804efc:	003f5306 	br	804c4c <__alt_mem_onchip_mem+0xff784c4c>
  804f00:	d8802017 	ldw	r2,128(sp)
  804f04:	10000426 	beq	r2,zero,804f18 <___vfprintf_internal_r+0x408>
  804f08:	d9002c17 	ldw	r4,176(sp)
  804f0c:	d9801e04 	addi	r6,sp,120
  804f10:	b80b883a 	mov	r5,r23
  804f14:	080b8580 	call	80b858 <__sprint_r>
  804f18:	b880030b 	ldhu	r2,12(r23)
  804f1c:	1080100c 	andi	r2,r2,64
  804f20:	1005901e 	bne	r2,zero,806564 <___vfprintf_internal_r+0x1a54>
  804f24:	d8802f17 	ldw	r2,188(sp)
  804f28:	dfc04717 	ldw	ra,284(sp)
  804f2c:	df004617 	ldw	fp,280(sp)
  804f30:	ddc04517 	ldw	r23,276(sp)
  804f34:	dd804417 	ldw	r22,272(sp)
  804f38:	dd404317 	ldw	r21,268(sp)
  804f3c:	dd004217 	ldw	r20,264(sp)
  804f40:	dcc04117 	ldw	r19,260(sp)
  804f44:	dc804017 	ldw	r18,256(sp)
  804f48:	dc403f17 	ldw	r17,252(sp)
  804f4c:	dc003e17 	ldw	r16,248(sp)
  804f50:	dec04804 	addi	sp,sp,288
  804f54:	f800283a 	ret
  804f58:	d9002c17 	ldw	r4,176(sp)
  804f5c:	0808fc00 	call	808fc0 <__sinit>
  804f60:	003f0406 	br	804b74 <__alt_mem_onchip_mem+0xff784b74>
  804f64:	d8802d17 	ldw	r2,180(sp)
  804f68:	d9002d17 	ldw	r4,180(sp)
  804f6c:	10800017 	ldw	r2,0(r2)
  804f70:	d8803115 	stw	r2,196(sp)
  804f74:	20800104 	addi	r2,r4,4
  804f78:	d9003117 	ldw	r4,196(sp)
  804f7c:	203fa716 	blt	r4,zero,804e1c <__alt_mem_onchip_mem+0xff784e1c>
  804f80:	d8802d15 	stw	r2,180(sp)
  804f84:	ac400007 	ldb	r17,0(r21)
  804f88:	003f4206 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  804f8c:	ac400007 	ldb	r17,0(r21)
  804f90:	aac00044 	addi	r11,r21,1
  804f94:	8a872826 	beq	r17,r10,806c38 <___vfprintf_internal_r+0x2128>
  804f98:	88bff404 	addi	r2,r17,-48
  804f9c:	0009883a 	mov	r4,zero
  804fa0:	30867d36 	bltu	r6,r2,806998 <___vfprintf_internal_r+0x1e88>
  804fa4:	5c400007 	ldb	r17,0(r11)
  804fa8:	210002a4 	muli	r4,r4,10
  804fac:	5d400044 	addi	r21,r11,1
  804fb0:	a817883a 	mov	r11,r21
  804fb4:	2089883a 	add	r4,r4,r2
  804fb8:	88bff404 	addi	r2,r17,-48
  804fbc:	30bff92e 	bgeu	r6,r2,804fa4 <__alt_mem_onchip_mem+0xff784fa4>
  804fc0:	2005c916 	blt	r4,zero,8066e8 <___vfprintf_internal_r+0x1bd8>
  804fc4:	d9002915 	stw	r4,164(sp)
  804fc8:	003f3306 	br	804c98 <__alt_mem_onchip_mem+0xff784c98>
  804fcc:	94802014 	ori	r18,r18,128
  804fd0:	ac400007 	ldb	r17,0(r21)
  804fd4:	003f2f06 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  804fd8:	a809883a 	mov	r4,r21
  804fdc:	d8003115 	stw	zero,196(sp)
  804fe0:	88bff404 	addi	r2,r17,-48
  804fe4:	0017883a 	mov	r11,zero
  804fe8:	24400007 	ldb	r17,0(r4)
  804fec:	5ac002a4 	muli	r11,r11,10
  804ff0:	ad400044 	addi	r21,r21,1
  804ff4:	a809883a 	mov	r4,r21
  804ff8:	12d7883a 	add	r11,r2,r11
  804ffc:	88bff404 	addi	r2,r17,-48
  805000:	30bff92e 	bgeu	r6,r2,804fe8 <__alt_mem_onchip_mem+0xff784fe8>
  805004:	dac03115 	stw	r11,196(sp)
  805008:	003f2306 	br	804c98 <__alt_mem_onchip_mem+0xff784c98>
  80500c:	18c03fcc 	andi	r3,r3,255
  805010:	18072b1e 	bne	r3,zero,806cc0 <___vfprintf_internal_r+0x21b0>
  805014:	94800414 	ori	r18,r18,16
  805018:	9080080c 	andi	r2,r18,32
  80501c:	10037b26 	beq	r2,zero,805e0c <___vfprintf_internal_r+0x12fc>
  805020:	d9402d17 	ldw	r5,180(sp)
  805024:	28800117 	ldw	r2,4(r5)
  805028:	2cc00017 	ldw	r19,0(r5)
  80502c:	29400204 	addi	r5,r5,8
  805030:	d9402d15 	stw	r5,180(sp)
  805034:	102d883a 	mov	r22,r2
  805038:	10044b16 	blt	r2,zero,806168 <___vfprintf_internal_r+0x1658>
  80503c:	d9402917 	ldw	r5,164(sp)
  805040:	df002783 	ldbu	fp,158(sp)
  805044:	2803bc16 	blt	r5,zero,805f38 <___vfprintf_internal_r+0x1428>
  805048:	00ffdfc4 	movi	r3,-129
  80504c:	9d84b03a 	or	r2,r19,r22
  805050:	90e4703a 	and	r18,r18,r3
  805054:	10017726 	beq	r2,zero,805634 <___vfprintf_internal_r+0xb24>
  805058:	b0038326 	beq	r22,zero,805e68 <___vfprintf_internal_r+0x1358>
  80505c:	dc402a15 	stw	r17,168(sp)
  805060:	dc001e04 	addi	r16,sp,120
  805064:	b023883a 	mov	r17,r22
  805068:	402d883a 	mov	r22,r8
  80506c:	9809883a 	mov	r4,r19
  805070:	880b883a 	mov	r5,r17
  805074:	01800284 	movi	r6,10
  805078:	000f883a 	mov	r7,zero
  80507c:	080d8d40 	call	80d8d4 <__umoddi3>
  805080:	10800c04 	addi	r2,r2,48
  805084:	843fffc4 	addi	r16,r16,-1
  805088:	9809883a 	mov	r4,r19
  80508c:	880b883a 	mov	r5,r17
  805090:	80800005 	stb	r2,0(r16)
  805094:	01800284 	movi	r6,10
  805098:	000f883a 	mov	r7,zero
  80509c:	080d35c0 	call	80d35c <__udivdi3>
  8050a0:	1027883a 	mov	r19,r2
  8050a4:	10c4b03a 	or	r2,r2,r3
  8050a8:	1823883a 	mov	r17,r3
  8050ac:	103fef1e 	bne	r2,zero,80506c <__alt_mem_onchip_mem+0xff78506c>
  8050b0:	d8c02817 	ldw	r3,160(sp)
  8050b4:	dc402a17 	ldw	r17,168(sp)
  8050b8:	b011883a 	mov	r8,r22
  8050bc:	1c07c83a 	sub	r3,r3,r16
  8050c0:	d8c02e15 	stw	r3,184(sp)
  8050c4:	00005906 	br	80522c <___vfprintf_internal_r+0x71c>
  8050c8:	18c03fcc 	andi	r3,r3,255
  8050cc:	1806fa1e 	bne	r3,zero,806cb8 <___vfprintf_internal_r+0x21a8>
  8050d0:	9080020c 	andi	r2,r18,8
  8050d4:	10048a26 	beq	r2,zero,806300 <___vfprintf_internal_r+0x17f0>
  8050d8:	d8c02d17 	ldw	r3,180(sp)
  8050dc:	d9002d17 	ldw	r4,180(sp)
  8050e0:	d9402d17 	ldw	r5,180(sp)
  8050e4:	18c00017 	ldw	r3,0(r3)
  8050e8:	21000117 	ldw	r4,4(r4)
  8050ec:	29400204 	addi	r5,r5,8
  8050f0:	d8c03615 	stw	r3,216(sp)
  8050f4:	d9003815 	stw	r4,224(sp)
  8050f8:	d9402d15 	stw	r5,180(sp)
  8050fc:	d9003617 	ldw	r4,216(sp)
  805100:	d9403817 	ldw	r5,224(sp)
  805104:	da003d15 	stw	r8,244(sp)
  805108:	04000044 	movi	r16,1
  80510c:	080b60c0 	call	80b60c <__fpclassifyd>
  805110:	da003d17 	ldw	r8,244(sp)
  805114:	14041f1e 	bne	r2,r16,806194 <___vfprintf_internal_r+0x1684>
  805118:	d9003617 	ldw	r4,216(sp)
  80511c:	d9403817 	ldw	r5,224(sp)
  805120:	000d883a 	mov	r6,zero
  805124:	000f883a 	mov	r7,zero
  805128:	080f2b80 	call	80f2b8 <__ledf2>
  80512c:	da003d17 	ldw	r8,244(sp)
  805130:	1005be16 	blt	r2,zero,80682c <___vfprintf_internal_r+0x1d1c>
  805134:	df002783 	ldbu	fp,158(sp)
  805138:	008011c4 	movi	r2,71
  80513c:	1445330e 	bge	r2,r17,80660c <___vfprintf_internal_r+0x1afc>
  805140:	04002074 	movhi	r16,129
  805144:	84126304 	addi	r16,r16,18828
  805148:	00c000c4 	movi	r3,3
  80514c:	00bfdfc4 	movi	r2,-129
  805150:	d8c02a15 	stw	r3,168(sp)
  805154:	90a4703a 	and	r18,r18,r2
  805158:	d8c02e15 	stw	r3,184(sp)
  80515c:	d8002915 	stw	zero,164(sp)
  805160:	d8003215 	stw	zero,200(sp)
  805164:	00003706 	br	805244 <___vfprintf_internal_r+0x734>
  805168:	94800214 	ori	r18,r18,8
  80516c:	ac400007 	ldb	r17,0(r21)
  805170:	003ec806 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  805174:	18c03fcc 	andi	r3,r3,255
  805178:	1806db1e 	bne	r3,zero,806ce8 <___vfprintf_internal_r+0x21d8>
  80517c:	94800414 	ori	r18,r18,16
  805180:	9080080c 	andi	r2,r18,32
  805184:	1002d826 	beq	r2,zero,805ce8 <___vfprintf_internal_r+0x11d8>
  805188:	d9402d17 	ldw	r5,180(sp)
  80518c:	d8c02917 	ldw	r3,164(sp)
  805190:	d8002785 	stb	zero,158(sp)
  805194:	28800204 	addi	r2,r5,8
  805198:	2cc00017 	ldw	r19,0(r5)
  80519c:	2d800117 	ldw	r22,4(r5)
  8051a0:	18048f16 	blt	r3,zero,8063e0 <___vfprintf_internal_r+0x18d0>
  8051a4:	013fdfc4 	movi	r4,-129
  8051a8:	9d86b03a 	or	r3,r19,r22
  8051ac:	d8802d15 	stw	r2,180(sp)
  8051b0:	9124703a 	and	r18,r18,r4
  8051b4:	1802d91e 	bne	r3,zero,805d1c <___vfprintf_internal_r+0x120c>
  8051b8:	d8c02917 	ldw	r3,164(sp)
  8051bc:	0039883a 	mov	fp,zero
  8051c0:	1805c326 	beq	r3,zero,8068d0 <___vfprintf_internal_r+0x1dc0>
  8051c4:	0027883a 	mov	r19,zero
  8051c8:	002d883a 	mov	r22,zero
  8051cc:	dc001e04 	addi	r16,sp,120
  8051d0:	9806d0fa 	srli	r3,r19,3
  8051d4:	b008977a 	slli	r4,r22,29
  8051d8:	b02cd0fa 	srli	r22,r22,3
  8051dc:	9cc001cc 	andi	r19,r19,7
  8051e0:	98800c04 	addi	r2,r19,48
  8051e4:	843fffc4 	addi	r16,r16,-1
  8051e8:	20e6b03a 	or	r19,r4,r3
  8051ec:	80800005 	stb	r2,0(r16)
  8051f0:	9d86b03a 	or	r3,r19,r22
  8051f4:	183ff61e 	bne	r3,zero,8051d0 <__alt_mem_onchip_mem+0xff7851d0>
  8051f8:	90c0004c 	andi	r3,r18,1
  8051fc:	18013b26 	beq	r3,zero,8056ec <___vfprintf_internal_r+0xbdc>
  805200:	10803fcc 	andi	r2,r2,255
  805204:	1080201c 	xori	r2,r2,128
  805208:	10bfe004 	addi	r2,r2,-128
  80520c:	00c00c04 	movi	r3,48
  805210:	10c13626 	beq	r2,r3,8056ec <___vfprintf_internal_r+0xbdc>
  805214:	80ffffc5 	stb	r3,-1(r16)
  805218:	d8c02817 	ldw	r3,160(sp)
  80521c:	80bfffc4 	addi	r2,r16,-1
  805220:	1021883a 	mov	r16,r2
  805224:	1887c83a 	sub	r3,r3,r2
  805228:	d8c02e15 	stw	r3,184(sp)
  80522c:	d8802e17 	ldw	r2,184(sp)
  805230:	d9002917 	ldw	r4,164(sp)
  805234:	1100010e 	bge	r2,r4,80523c <___vfprintf_internal_r+0x72c>
  805238:	2005883a 	mov	r2,r4
  80523c:	d8802a15 	stw	r2,168(sp)
  805240:	d8003215 	stw	zero,200(sp)
  805244:	e7003fcc 	andi	fp,fp,255
  805248:	e700201c 	xori	fp,fp,128
  80524c:	e73fe004 	addi	fp,fp,-128
  805250:	e0000326 	beq	fp,zero,805260 <___vfprintf_internal_r+0x750>
  805254:	d8c02a17 	ldw	r3,168(sp)
  805258:	18c00044 	addi	r3,r3,1
  80525c:	d8c02a15 	stw	r3,168(sp)
  805260:	90c0008c 	andi	r3,r18,2
  805264:	d8c02b15 	stw	r3,172(sp)
  805268:	18000326 	beq	r3,zero,805278 <___vfprintf_internal_r+0x768>
  80526c:	d8c02a17 	ldw	r3,168(sp)
  805270:	18c00084 	addi	r3,r3,2
  805274:	d8c02a15 	stw	r3,168(sp)
  805278:	90c0210c 	andi	r3,r18,132
  80527c:	d8c03015 	stw	r3,192(sp)
  805280:	1801a31e 	bne	r3,zero,805910 <___vfprintf_internal_r+0xe00>
  805284:	d9003117 	ldw	r4,196(sp)
  805288:	d8c02a17 	ldw	r3,168(sp)
  80528c:	20e7c83a 	sub	r19,r4,r3
  805290:	04c19f0e 	bge	zero,r19,805910 <___vfprintf_internal_r+0xe00>
  805294:	02400404 	movi	r9,16
  805298:	d8c02017 	ldw	r3,128(sp)
  80529c:	d8801f17 	ldw	r2,124(sp)
  8052a0:	4cc50d0e 	bge	r9,r19,8066d8 <___vfprintf_internal_r+0x1bc8>
  8052a4:	01402074 	movhi	r5,129
  8052a8:	29527684 	addi	r5,r5,18906
  8052ac:	dc403b15 	stw	r17,236(sp)
  8052b0:	d9403515 	stw	r5,212(sp)
  8052b4:	9823883a 	mov	r17,r19
  8052b8:	482d883a 	mov	r22,r9
  8052bc:	9027883a 	mov	r19,r18
  8052c0:	070001c4 	movi	fp,7
  8052c4:	8025883a 	mov	r18,r16
  8052c8:	dc002c17 	ldw	r16,176(sp)
  8052cc:	00000306 	br	8052dc <___vfprintf_internal_r+0x7cc>
  8052d0:	8c7ffc04 	addi	r17,r17,-16
  8052d4:	42000204 	addi	r8,r8,8
  8052d8:	b440130e 	bge	r22,r17,805328 <___vfprintf_internal_r+0x818>
  8052dc:	01002074 	movhi	r4,129
  8052e0:	18c00404 	addi	r3,r3,16
  8052e4:	10800044 	addi	r2,r2,1
  8052e8:	21127684 	addi	r4,r4,18906
  8052ec:	41000015 	stw	r4,0(r8)
  8052f0:	45800115 	stw	r22,4(r8)
  8052f4:	d8c02015 	stw	r3,128(sp)
  8052f8:	d8801f15 	stw	r2,124(sp)
  8052fc:	e0bff40e 	bge	fp,r2,8052d0 <__alt_mem_onchip_mem+0xff7852d0>
  805300:	d9801e04 	addi	r6,sp,120
  805304:	b80b883a 	mov	r5,r23
  805308:	8009883a 	mov	r4,r16
  80530c:	080b8580 	call	80b858 <__sprint_r>
  805310:	103f011e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805314:	8c7ffc04 	addi	r17,r17,-16
  805318:	d8c02017 	ldw	r3,128(sp)
  80531c:	d8801f17 	ldw	r2,124(sp)
  805320:	da000404 	addi	r8,sp,16
  805324:	b47fed16 	blt	r22,r17,8052dc <__alt_mem_onchip_mem+0xff7852dc>
  805328:	9021883a 	mov	r16,r18
  80532c:	9825883a 	mov	r18,r19
  805330:	8827883a 	mov	r19,r17
  805334:	dc403b17 	ldw	r17,236(sp)
  805338:	d9403517 	ldw	r5,212(sp)
  80533c:	98c7883a 	add	r3,r19,r3
  805340:	10800044 	addi	r2,r2,1
  805344:	41400015 	stw	r5,0(r8)
  805348:	44c00115 	stw	r19,4(r8)
  80534c:	d8c02015 	stw	r3,128(sp)
  805350:	d8801f15 	stw	r2,124(sp)
  805354:	010001c4 	movi	r4,7
  805358:	2082a316 	blt	r4,r2,805de8 <___vfprintf_internal_r+0x12d8>
  80535c:	df002787 	ldb	fp,158(sp)
  805360:	42000204 	addi	r8,r8,8
  805364:	e0000c26 	beq	fp,zero,805398 <___vfprintf_internal_r+0x888>
  805368:	d8801f17 	ldw	r2,124(sp)
  80536c:	d9002784 	addi	r4,sp,158
  805370:	18c00044 	addi	r3,r3,1
  805374:	10800044 	addi	r2,r2,1
  805378:	41000015 	stw	r4,0(r8)
  80537c:	01000044 	movi	r4,1
  805380:	41000115 	stw	r4,4(r8)
  805384:	d8c02015 	stw	r3,128(sp)
  805388:	d8801f15 	stw	r2,124(sp)
  80538c:	010001c4 	movi	r4,7
  805390:	20823c16 	blt	r4,r2,805c84 <___vfprintf_internal_r+0x1174>
  805394:	42000204 	addi	r8,r8,8
  805398:	d8802b17 	ldw	r2,172(sp)
  80539c:	10000c26 	beq	r2,zero,8053d0 <___vfprintf_internal_r+0x8c0>
  8053a0:	d8801f17 	ldw	r2,124(sp)
  8053a4:	d9002704 	addi	r4,sp,156
  8053a8:	18c00084 	addi	r3,r3,2
  8053ac:	10800044 	addi	r2,r2,1
  8053b0:	41000015 	stw	r4,0(r8)
  8053b4:	01000084 	movi	r4,2
  8053b8:	41000115 	stw	r4,4(r8)
  8053bc:	d8c02015 	stw	r3,128(sp)
  8053c0:	d8801f15 	stw	r2,124(sp)
  8053c4:	010001c4 	movi	r4,7
  8053c8:	20823616 	blt	r4,r2,805ca4 <___vfprintf_internal_r+0x1194>
  8053cc:	42000204 	addi	r8,r8,8
  8053d0:	d9003017 	ldw	r4,192(sp)
  8053d4:	00802004 	movi	r2,128
  8053d8:	20819926 	beq	r4,r2,805a40 <___vfprintf_internal_r+0xf30>
  8053dc:	d9402917 	ldw	r5,164(sp)
  8053e0:	d8802e17 	ldw	r2,184(sp)
  8053e4:	28adc83a 	sub	r22,r5,r2
  8053e8:	0580310e 	bge	zero,r22,8054b0 <___vfprintf_internal_r+0x9a0>
  8053ec:	07000404 	movi	fp,16
  8053f0:	d8801f17 	ldw	r2,124(sp)
  8053f4:	e584140e 	bge	fp,r22,806448 <___vfprintf_internal_r+0x1938>
  8053f8:	01402074 	movhi	r5,129
  8053fc:	29527284 	addi	r5,r5,18890
  805400:	dc402915 	stw	r17,164(sp)
  805404:	d9402b15 	stw	r5,172(sp)
  805408:	b023883a 	mov	r17,r22
  80540c:	04c001c4 	movi	r19,7
  805410:	a82d883a 	mov	r22,r21
  805414:	902b883a 	mov	r21,r18
  805418:	8025883a 	mov	r18,r16
  80541c:	dc002c17 	ldw	r16,176(sp)
  805420:	00000306 	br	805430 <___vfprintf_internal_r+0x920>
  805424:	8c7ffc04 	addi	r17,r17,-16
  805428:	42000204 	addi	r8,r8,8
  80542c:	e440110e 	bge	fp,r17,805474 <___vfprintf_internal_r+0x964>
  805430:	18c00404 	addi	r3,r3,16
  805434:	10800044 	addi	r2,r2,1
  805438:	45000015 	stw	r20,0(r8)
  80543c:	47000115 	stw	fp,4(r8)
  805440:	d8c02015 	stw	r3,128(sp)
  805444:	d8801f15 	stw	r2,124(sp)
  805448:	98bff60e 	bge	r19,r2,805424 <__alt_mem_onchip_mem+0xff785424>
  80544c:	d9801e04 	addi	r6,sp,120
  805450:	b80b883a 	mov	r5,r23
  805454:	8009883a 	mov	r4,r16
  805458:	080b8580 	call	80b858 <__sprint_r>
  80545c:	103eae1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805460:	8c7ffc04 	addi	r17,r17,-16
  805464:	d8c02017 	ldw	r3,128(sp)
  805468:	d8801f17 	ldw	r2,124(sp)
  80546c:	da000404 	addi	r8,sp,16
  805470:	e47fef16 	blt	fp,r17,805430 <__alt_mem_onchip_mem+0xff785430>
  805474:	9021883a 	mov	r16,r18
  805478:	a825883a 	mov	r18,r21
  80547c:	b02b883a 	mov	r21,r22
  805480:	882d883a 	mov	r22,r17
  805484:	dc402917 	ldw	r17,164(sp)
  805488:	d9002b17 	ldw	r4,172(sp)
  80548c:	1d87883a 	add	r3,r3,r22
  805490:	10800044 	addi	r2,r2,1
  805494:	41000015 	stw	r4,0(r8)
  805498:	45800115 	stw	r22,4(r8)
  80549c:	d8c02015 	stw	r3,128(sp)
  8054a0:	d8801f15 	stw	r2,124(sp)
  8054a4:	010001c4 	movi	r4,7
  8054a8:	2081ee16 	blt	r4,r2,805c64 <___vfprintf_internal_r+0x1154>
  8054ac:	42000204 	addi	r8,r8,8
  8054b0:	9080400c 	andi	r2,r18,256
  8054b4:	1001181e 	bne	r2,zero,805918 <___vfprintf_internal_r+0xe08>
  8054b8:	d9402e17 	ldw	r5,184(sp)
  8054bc:	d8801f17 	ldw	r2,124(sp)
  8054c0:	44000015 	stw	r16,0(r8)
  8054c4:	1947883a 	add	r3,r3,r5
  8054c8:	10800044 	addi	r2,r2,1
  8054cc:	41400115 	stw	r5,4(r8)
  8054d0:	d8c02015 	stw	r3,128(sp)
  8054d4:	d8801f15 	stw	r2,124(sp)
  8054d8:	010001c4 	movi	r4,7
  8054dc:	2081d316 	blt	r4,r2,805c2c <___vfprintf_internal_r+0x111c>
  8054e0:	42000204 	addi	r8,r8,8
  8054e4:	9480010c 	andi	r18,r18,4
  8054e8:	90003226 	beq	r18,zero,8055b4 <___vfprintf_internal_r+0xaa4>
  8054ec:	d9403117 	ldw	r5,196(sp)
  8054f0:	d8802a17 	ldw	r2,168(sp)
  8054f4:	28a1c83a 	sub	r16,r5,r2
  8054f8:	04002e0e 	bge	zero,r16,8055b4 <___vfprintf_internal_r+0xaa4>
  8054fc:	04400404 	movi	r17,16
  805500:	d8801f17 	ldw	r2,124(sp)
  805504:	8c04a20e 	bge	r17,r16,806790 <___vfprintf_internal_r+0x1c80>
  805508:	01402074 	movhi	r5,129
  80550c:	29527684 	addi	r5,r5,18906
  805510:	d9403515 	stw	r5,212(sp)
  805514:	048001c4 	movi	r18,7
  805518:	dcc02c17 	ldw	r19,176(sp)
  80551c:	00000306 	br	80552c <___vfprintf_internal_r+0xa1c>
  805520:	843ffc04 	addi	r16,r16,-16
  805524:	42000204 	addi	r8,r8,8
  805528:	8c00130e 	bge	r17,r16,805578 <___vfprintf_internal_r+0xa68>
  80552c:	01002074 	movhi	r4,129
  805530:	18c00404 	addi	r3,r3,16
  805534:	10800044 	addi	r2,r2,1
  805538:	21127684 	addi	r4,r4,18906
  80553c:	41000015 	stw	r4,0(r8)
  805540:	44400115 	stw	r17,4(r8)
  805544:	d8c02015 	stw	r3,128(sp)
  805548:	d8801f15 	stw	r2,124(sp)
  80554c:	90bff40e 	bge	r18,r2,805520 <__alt_mem_onchip_mem+0xff785520>
  805550:	d9801e04 	addi	r6,sp,120
  805554:	b80b883a 	mov	r5,r23
  805558:	9809883a 	mov	r4,r19
  80555c:	080b8580 	call	80b858 <__sprint_r>
  805560:	103e6d1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805564:	843ffc04 	addi	r16,r16,-16
  805568:	d8c02017 	ldw	r3,128(sp)
  80556c:	d8801f17 	ldw	r2,124(sp)
  805570:	da000404 	addi	r8,sp,16
  805574:	8c3fed16 	blt	r17,r16,80552c <__alt_mem_onchip_mem+0xff78552c>
  805578:	d9403517 	ldw	r5,212(sp)
  80557c:	1c07883a 	add	r3,r3,r16
  805580:	10800044 	addi	r2,r2,1
  805584:	41400015 	stw	r5,0(r8)
  805588:	44000115 	stw	r16,4(r8)
  80558c:	d8c02015 	stw	r3,128(sp)
  805590:	d8801f15 	stw	r2,124(sp)
  805594:	010001c4 	movi	r4,7
  805598:	2080060e 	bge	r4,r2,8055b4 <___vfprintf_internal_r+0xaa4>
  80559c:	d9002c17 	ldw	r4,176(sp)
  8055a0:	d9801e04 	addi	r6,sp,120
  8055a4:	b80b883a 	mov	r5,r23
  8055a8:	080b8580 	call	80b858 <__sprint_r>
  8055ac:	103e5a1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  8055b0:	d8c02017 	ldw	r3,128(sp)
  8055b4:	d8803117 	ldw	r2,196(sp)
  8055b8:	d9002a17 	ldw	r4,168(sp)
  8055bc:	1100010e 	bge	r2,r4,8055c4 <___vfprintf_internal_r+0xab4>
  8055c0:	2005883a 	mov	r2,r4
  8055c4:	d9402f17 	ldw	r5,188(sp)
  8055c8:	288b883a 	add	r5,r5,r2
  8055cc:	d9402f15 	stw	r5,188(sp)
  8055d0:	18019e1e 	bne	r3,zero,805c4c <___vfprintf_internal_r+0x113c>
  8055d4:	a8800007 	ldb	r2,0(r21)
  8055d8:	d8001f15 	stw	zero,124(sp)
  8055dc:	da000404 	addi	r8,sp,16
  8055e0:	103d851e 	bne	r2,zero,804bf8 <__alt_mem_onchip_mem+0xff784bf8>
  8055e4:	a821883a 	mov	r16,r21
  8055e8:	003d9b06 	br	804c58 <__alt_mem_onchip_mem+0xff784c58>
  8055ec:	18c03fcc 	andi	r3,r3,255
  8055f0:	1805c11e 	bne	r3,zero,806cf8 <___vfprintf_internal_r+0x21e8>
  8055f4:	94800414 	ori	r18,r18,16
  8055f8:	9080080c 	andi	r2,r18,32
  8055fc:	10020c26 	beq	r2,zero,805e30 <___vfprintf_internal_r+0x1320>
  805600:	d8802d17 	ldw	r2,180(sp)
  805604:	d9002917 	ldw	r4,164(sp)
  805608:	d8002785 	stb	zero,158(sp)
  80560c:	10c00204 	addi	r3,r2,8
  805610:	14c00017 	ldw	r19,0(r2)
  805614:	15800117 	ldw	r22,4(r2)
  805618:	20040f16 	blt	r4,zero,806658 <___vfprintf_internal_r+0x1b48>
  80561c:	013fdfc4 	movi	r4,-129
  805620:	9d84b03a 	or	r2,r19,r22
  805624:	d8c02d15 	stw	r3,180(sp)
  805628:	9124703a 	and	r18,r18,r4
  80562c:	0039883a 	mov	fp,zero
  805630:	103e891e 	bne	r2,zero,805058 <__alt_mem_onchip_mem+0xff785058>
  805634:	d9002917 	ldw	r4,164(sp)
  805638:	2002c11e 	bne	r4,zero,806140 <___vfprintf_internal_r+0x1630>
  80563c:	d8002915 	stw	zero,164(sp)
  805640:	d8002e15 	stw	zero,184(sp)
  805644:	dc001e04 	addi	r16,sp,120
  805648:	003ef806 	br	80522c <__alt_mem_onchip_mem+0xff78522c>
  80564c:	18c03fcc 	andi	r3,r3,255
  805650:	18059d1e 	bne	r3,zero,806cc8 <___vfprintf_internal_r+0x21b8>
  805654:	01402074 	movhi	r5,129
  805658:	29526604 	addi	r5,r5,18840
  80565c:	d9403915 	stw	r5,228(sp)
  805660:	9080080c 	andi	r2,r18,32
  805664:	10005226 	beq	r2,zero,8057b0 <___vfprintf_internal_r+0xca0>
  805668:	d8802d17 	ldw	r2,180(sp)
  80566c:	14c00017 	ldw	r19,0(r2)
  805670:	15800117 	ldw	r22,4(r2)
  805674:	10800204 	addi	r2,r2,8
  805678:	d8802d15 	stw	r2,180(sp)
  80567c:	9080004c 	andi	r2,r18,1
  805680:	10019026 	beq	r2,zero,805cc4 <___vfprintf_internal_r+0x11b4>
  805684:	9d84b03a 	or	r2,r19,r22
  805688:	10036926 	beq	r2,zero,806430 <___vfprintf_internal_r+0x1920>
  80568c:	d8c02917 	ldw	r3,164(sp)
  805690:	00800c04 	movi	r2,48
  805694:	d8802705 	stb	r2,156(sp)
  805698:	dc402745 	stb	r17,157(sp)
  80569c:	d8002785 	stb	zero,158(sp)
  8056a0:	90800094 	ori	r2,r18,2
  8056a4:	18045d16 	blt	r3,zero,80681c <___vfprintf_internal_r+0x1d0c>
  8056a8:	00bfdfc4 	movi	r2,-129
  8056ac:	90a4703a 	and	r18,r18,r2
  8056b0:	94800094 	ori	r18,r18,2
  8056b4:	0039883a 	mov	fp,zero
  8056b8:	d9003917 	ldw	r4,228(sp)
  8056bc:	dc001e04 	addi	r16,sp,120
  8056c0:	988003cc 	andi	r2,r19,15
  8056c4:	b006973a 	slli	r3,r22,28
  8056c8:	2085883a 	add	r2,r4,r2
  8056cc:	9826d13a 	srli	r19,r19,4
  8056d0:	10800003 	ldbu	r2,0(r2)
  8056d4:	b02cd13a 	srli	r22,r22,4
  8056d8:	843fffc4 	addi	r16,r16,-1
  8056dc:	1ce6b03a 	or	r19,r3,r19
  8056e0:	80800005 	stb	r2,0(r16)
  8056e4:	9d84b03a 	or	r2,r19,r22
  8056e8:	103ff51e 	bne	r2,zero,8056c0 <__alt_mem_onchip_mem+0xff7856c0>
  8056ec:	d8c02817 	ldw	r3,160(sp)
  8056f0:	1c07c83a 	sub	r3,r3,r16
  8056f4:	d8c02e15 	stw	r3,184(sp)
  8056f8:	003ecc06 	br	80522c <__alt_mem_onchip_mem+0xff78522c>
  8056fc:	18c03fcc 	andi	r3,r3,255
  805700:	183e9f26 	beq	r3,zero,805180 <__alt_mem_onchip_mem+0xff785180>
  805704:	d9c02785 	stb	r7,158(sp)
  805708:	003e9d06 	br	805180 <__alt_mem_onchip_mem+0xff785180>
  80570c:	00c00044 	movi	r3,1
  805710:	01c00ac4 	movi	r7,43
  805714:	ac400007 	ldb	r17,0(r21)
  805718:	003d5e06 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  80571c:	94800814 	ori	r18,r18,32
  805720:	ac400007 	ldb	r17,0(r21)
  805724:	003d5b06 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  805728:	d8c02d17 	ldw	r3,180(sp)
  80572c:	d8002785 	stb	zero,158(sp)
  805730:	1c000017 	ldw	r16,0(r3)
  805734:	1cc00104 	addi	r19,r3,4
  805738:	80041926 	beq	r16,zero,8067a0 <___vfprintf_internal_r+0x1c90>
  80573c:	d9002917 	ldw	r4,164(sp)
  805740:	2003d016 	blt	r4,zero,806684 <___vfprintf_internal_r+0x1b74>
  805744:	200d883a 	mov	r6,r4
  805748:	000b883a 	mov	r5,zero
  80574c:	8009883a 	mov	r4,r16
  805750:	da003d15 	stw	r8,244(sp)
  805754:	0809cc40 	call	809cc4 <memchr>
  805758:	da003d17 	ldw	r8,244(sp)
  80575c:	10045426 	beq	r2,zero,8068b0 <___vfprintf_internal_r+0x1da0>
  805760:	1405c83a 	sub	r2,r2,r16
  805764:	d8802e15 	stw	r2,184(sp)
  805768:	1003cc16 	blt	r2,zero,80669c <___vfprintf_internal_r+0x1b8c>
  80576c:	df002783 	ldbu	fp,158(sp)
  805770:	d8802a15 	stw	r2,168(sp)
  805774:	dcc02d15 	stw	r19,180(sp)
  805778:	d8002915 	stw	zero,164(sp)
  80577c:	d8003215 	stw	zero,200(sp)
  805780:	003eb006 	br	805244 <__alt_mem_onchip_mem+0xff785244>
  805784:	18c03fcc 	andi	r3,r3,255
  805788:	183f9b26 	beq	r3,zero,8055f8 <__alt_mem_onchip_mem+0xff7855f8>
  80578c:	d9c02785 	stb	r7,158(sp)
  805790:	003f9906 	br	8055f8 <__alt_mem_onchip_mem+0xff7855f8>
  805794:	18c03fcc 	andi	r3,r3,255
  805798:	1805551e 	bne	r3,zero,806cf0 <___vfprintf_internal_r+0x21e0>
  80579c:	01402074 	movhi	r5,129
  8057a0:	29526b04 	addi	r5,r5,18860
  8057a4:	d9403915 	stw	r5,228(sp)
  8057a8:	9080080c 	andi	r2,r18,32
  8057ac:	103fae1e 	bne	r2,zero,805668 <__alt_mem_onchip_mem+0xff785668>
  8057b0:	9080040c 	andi	r2,r18,16
  8057b4:	1002de26 	beq	r2,zero,806330 <___vfprintf_internal_r+0x1820>
  8057b8:	d8c02d17 	ldw	r3,180(sp)
  8057bc:	002d883a 	mov	r22,zero
  8057c0:	1cc00017 	ldw	r19,0(r3)
  8057c4:	18c00104 	addi	r3,r3,4
  8057c8:	d8c02d15 	stw	r3,180(sp)
  8057cc:	003fab06 	br	80567c <__alt_mem_onchip_mem+0xff78567c>
  8057d0:	38803fcc 	andi	r2,r7,255
  8057d4:	1080201c 	xori	r2,r2,128
  8057d8:	10bfe004 	addi	r2,r2,-128
  8057dc:	1002d21e 	bne	r2,zero,806328 <___vfprintf_internal_r+0x1818>
  8057e0:	00c00044 	movi	r3,1
  8057e4:	01c00804 	movi	r7,32
  8057e8:	ac400007 	ldb	r17,0(r21)
  8057ec:	003d2906 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  8057f0:	94800054 	ori	r18,r18,1
  8057f4:	ac400007 	ldb	r17,0(r21)
  8057f8:	003d2606 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  8057fc:	18c03fcc 	andi	r3,r3,255
  805800:	183e0526 	beq	r3,zero,805018 <__alt_mem_onchip_mem+0xff785018>
  805804:	d9c02785 	stb	r7,158(sp)
  805808:	003e0306 	br	805018 <__alt_mem_onchip_mem+0xff785018>
  80580c:	94801014 	ori	r18,r18,64
  805810:	ac400007 	ldb	r17,0(r21)
  805814:	003d1f06 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  805818:	ac400007 	ldb	r17,0(r21)
  80581c:	8a438726 	beq	r17,r9,80663c <___vfprintf_internal_r+0x1b2c>
  805820:	94800414 	ori	r18,r18,16
  805824:	003d1b06 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  805828:	18c03fcc 	andi	r3,r3,255
  80582c:	1805341e 	bne	r3,zero,806d00 <___vfprintf_internal_r+0x21f0>
  805830:	9080080c 	andi	r2,r18,32
  805834:	1002cd26 	beq	r2,zero,80636c <___vfprintf_internal_r+0x185c>
  805838:	d9402d17 	ldw	r5,180(sp)
  80583c:	d9002f17 	ldw	r4,188(sp)
  805840:	28800017 	ldw	r2,0(r5)
  805844:	2007d7fa 	srai	r3,r4,31
  805848:	29400104 	addi	r5,r5,4
  80584c:	d9402d15 	stw	r5,180(sp)
  805850:	11000015 	stw	r4,0(r2)
  805854:	10c00115 	stw	r3,4(r2)
  805858:	003ce506 	br	804bf0 <__alt_mem_onchip_mem+0xff784bf0>
  80585c:	d8c02d17 	ldw	r3,180(sp)
  805860:	d9002d17 	ldw	r4,180(sp)
  805864:	d8002785 	stb	zero,158(sp)
  805868:	18800017 	ldw	r2,0(r3)
  80586c:	21000104 	addi	r4,r4,4
  805870:	00c00044 	movi	r3,1
  805874:	d8c02a15 	stw	r3,168(sp)
  805878:	d8801405 	stb	r2,80(sp)
  80587c:	d9002d15 	stw	r4,180(sp)
  805880:	d8c02e15 	stw	r3,184(sp)
  805884:	d8002915 	stw	zero,164(sp)
  805888:	d8003215 	stw	zero,200(sp)
  80588c:	dc001404 	addi	r16,sp,80
  805890:	0039883a 	mov	fp,zero
  805894:	003e7206 	br	805260 <__alt_mem_onchip_mem+0xff785260>
  805898:	01002074 	movhi	r4,129
  80589c:	21126b04 	addi	r4,r4,18860
  8058a0:	0039883a 	mov	fp,zero
  8058a4:	d9003915 	stw	r4,228(sp)
  8058a8:	04401e04 	movi	r17,120
  8058ac:	003f8206 	br	8056b8 <__alt_mem_onchip_mem+0xff7856b8>
  8058b0:	18c03fcc 	andi	r3,r3,255
  8058b4:	1805061e 	bne	r3,zero,806cd0 <___vfprintf_internal_r+0x21c0>
  8058b8:	883d9126 	beq	r17,zero,804f00 <__alt_mem_onchip_mem+0xff784f00>
  8058bc:	00c00044 	movi	r3,1
  8058c0:	d8c02a15 	stw	r3,168(sp)
  8058c4:	dc401405 	stb	r17,80(sp)
  8058c8:	d8002785 	stb	zero,158(sp)
  8058cc:	003fec06 	br	805880 <__alt_mem_onchip_mem+0xff785880>
  8058d0:	01402074 	movhi	r5,129
  8058d4:	29526b04 	addi	r5,r5,18860
  8058d8:	d9403915 	stw	r5,228(sp)
  8058dc:	d8c02d15 	stw	r3,180(sp)
  8058e0:	1025883a 	mov	r18,r2
  8058e4:	04401e04 	movi	r17,120
  8058e8:	9d84b03a 	or	r2,r19,r22
  8058ec:	1000fc1e 	bne	r2,zero,805ce0 <___vfprintf_internal_r+0x11d0>
  8058f0:	0039883a 	mov	fp,zero
  8058f4:	00800084 	movi	r2,2
  8058f8:	10803fcc 	andi	r2,r2,255
  8058fc:	00c00044 	movi	r3,1
  805900:	10c20f26 	beq	r2,r3,806140 <___vfprintf_internal_r+0x1630>
  805904:	00c00084 	movi	r3,2
  805908:	10fd6326 	beq	r2,r3,804e98 <__alt_mem_onchip_mem+0xff784e98>
  80590c:	003e2d06 	br	8051c4 <__alt_mem_onchip_mem+0xff7851c4>
  805910:	d8c02017 	ldw	r3,128(sp)
  805914:	003e9306 	br	805364 <__alt_mem_onchip_mem+0xff785364>
  805918:	00801944 	movi	r2,101
  80591c:	14407e0e 	bge	r2,r17,805b18 <___vfprintf_internal_r+0x1008>
  805920:	d9003617 	ldw	r4,216(sp)
  805924:	d9403817 	ldw	r5,224(sp)
  805928:	000d883a 	mov	r6,zero
  80592c:	000f883a 	mov	r7,zero
  805930:	d8c03c15 	stw	r3,240(sp)
  805934:	da003d15 	stw	r8,244(sp)
  805938:	080f1540 	call	80f154 <__eqdf2>
  80593c:	d8c03c17 	ldw	r3,240(sp)
  805940:	da003d17 	ldw	r8,244(sp)
  805944:	1000f71e 	bne	r2,zero,805d24 <___vfprintf_internal_r+0x1214>
  805948:	d8801f17 	ldw	r2,124(sp)
  80594c:	01002074 	movhi	r4,129
  805950:	21127204 	addi	r4,r4,18888
  805954:	18c00044 	addi	r3,r3,1
  805958:	10800044 	addi	r2,r2,1
  80595c:	41000015 	stw	r4,0(r8)
  805960:	01000044 	movi	r4,1
  805964:	41000115 	stw	r4,4(r8)
  805968:	d8c02015 	stw	r3,128(sp)
  80596c:	d8801f15 	stw	r2,124(sp)
  805970:	010001c4 	movi	r4,7
  805974:	2082b816 	blt	r4,r2,806458 <___vfprintf_internal_r+0x1948>
  805978:	42000204 	addi	r8,r8,8
  80597c:	d8802617 	ldw	r2,152(sp)
  805980:	d9403317 	ldw	r5,204(sp)
  805984:	11400216 	blt	r2,r5,805990 <___vfprintf_internal_r+0xe80>
  805988:	9080004c 	andi	r2,r18,1
  80598c:	103ed526 	beq	r2,zero,8054e4 <__alt_mem_onchip_mem+0xff7854e4>
  805990:	d8803717 	ldw	r2,220(sp)
  805994:	d9003417 	ldw	r4,208(sp)
  805998:	d9403717 	ldw	r5,220(sp)
  80599c:	1887883a 	add	r3,r3,r2
  8059a0:	d8801f17 	ldw	r2,124(sp)
  8059a4:	41000015 	stw	r4,0(r8)
  8059a8:	41400115 	stw	r5,4(r8)
  8059ac:	10800044 	addi	r2,r2,1
  8059b0:	d8c02015 	stw	r3,128(sp)
  8059b4:	d8801f15 	stw	r2,124(sp)
  8059b8:	010001c4 	movi	r4,7
  8059bc:	20832916 	blt	r4,r2,806664 <___vfprintf_internal_r+0x1b54>
  8059c0:	42000204 	addi	r8,r8,8
  8059c4:	d8803317 	ldw	r2,204(sp)
  8059c8:	143fffc4 	addi	r16,r2,-1
  8059cc:	043ec50e 	bge	zero,r16,8054e4 <__alt_mem_onchip_mem+0xff7854e4>
  8059d0:	04400404 	movi	r17,16
  8059d4:	d8801f17 	ldw	r2,124(sp)
  8059d8:	8c00880e 	bge	r17,r16,805bfc <___vfprintf_internal_r+0x10ec>
  8059dc:	01402074 	movhi	r5,129
  8059e0:	29527284 	addi	r5,r5,18890
  8059e4:	d9402b15 	stw	r5,172(sp)
  8059e8:	058001c4 	movi	r22,7
  8059ec:	dcc02c17 	ldw	r19,176(sp)
  8059f0:	00000306 	br	805a00 <___vfprintf_internal_r+0xef0>
  8059f4:	42000204 	addi	r8,r8,8
  8059f8:	843ffc04 	addi	r16,r16,-16
  8059fc:	8c00820e 	bge	r17,r16,805c08 <___vfprintf_internal_r+0x10f8>
  805a00:	18c00404 	addi	r3,r3,16
  805a04:	10800044 	addi	r2,r2,1
  805a08:	45000015 	stw	r20,0(r8)
  805a0c:	44400115 	stw	r17,4(r8)
  805a10:	d8c02015 	stw	r3,128(sp)
  805a14:	d8801f15 	stw	r2,124(sp)
  805a18:	b0bff60e 	bge	r22,r2,8059f4 <__alt_mem_onchip_mem+0xff7859f4>
  805a1c:	d9801e04 	addi	r6,sp,120
  805a20:	b80b883a 	mov	r5,r23
  805a24:	9809883a 	mov	r4,r19
  805a28:	080b8580 	call	80b858 <__sprint_r>
  805a2c:	103d3a1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805a30:	d8c02017 	ldw	r3,128(sp)
  805a34:	d8801f17 	ldw	r2,124(sp)
  805a38:	da000404 	addi	r8,sp,16
  805a3c:	003fee06 	br	8059f8 <__alt_mem_onchip_mem+0xff7859f8>
  805a40:	d9403117 	ldw	r5,196(sp)
  805a44:	d8802a17 	ldw	r2,168(sp)
  805a48:	28adc83a 	sub	r22,r5,r2
  805a4c:	05be630e 	bge	zero,r22,8053dc <__alt_mem_onchip_mem+0xff7853dc>
  805a50:	07000404 	movi	fp,16
  805a54:	d8801f17 	ldw	r2,124(sp)
  805a58:	e5838f0e 	bge	fp,r22,806898 <___vfprintf_internal_r+0x1d88>
  805a5c:	01402074 	movhi	r5,129
  805a60:	29527284 	addi	r5,r5,18890
  805a64:	dc403015 	stw	r17,192(sp)
  805a68:	d9402b15 	stw	r5,172(sp)
  805a6c:	b023883a 	mov	r17,r22
  805a70:	04c001c4 	movi	r19,7
  805a74:	a82d883a 	mov	r22,r21
  805a78:	902b883a 	mov	r21,r18
  805a7c:	8025883a 	mov	r18,r16
  805a80:	dc002c17 	ldw	r16,176(sp)
  805a84:	00000306 	br	805a94 <___vfprintf_internal_r+0xf84>
  805a88:	8c7ffc04 	addi	r17,r17,-16
  805a8c:	42000204 	addi	r8,r8,8
  805a90:	e440110e 	bge	fp,r17,805ad8 <___vfprintf_internal_r+0xfc8>
  805a94:	18c00404 	addi	r3,r3,16
  805a98:	10800044 	addi	r2,r2,1
  805a9c:	45000015 	stw	r20,0(r8)
  805aa0:	47000115 	stw	fp,4(r8)
  805aa4:	d8c02015 	stw	r3,128(sp)
  805aa8:	d8801f15 	stw	r2,124(sp)
  805aac:	98bff60e 	bge	r19,r2,805a88 <__alt_mem_onchip_mem+0xff785a88>
  805ab0:	d9801e04 	addi	r6,sp,120
  805ab4:	b80b883a 	mov	r5,r23
  805ab8:	8009883a 	mov	r4,r16
  805abc:	080b8580 	call	80b858 <__sprint_r>
  805ac0:	103d151e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805ac4:	8c7ffc04 	addi	r17,r17,-16
  805ac8:	d8c02017 	ldw	r3,128(sp)
  805acc:	d8801f17 	ldw	r2,124(sp)
  805ad0:	da000404 	addi	r8,sp,16
  805ad4:	e47fef16 	blt	fp,r17,805a94 <__alt_mem_onchip_mem+0xff785a94>
  805ad8:	9021883a 	mov	r16,r18
  805adc:	a825883a 	mov	r18,r21
  805ae0:	b02b883a 	mov	r21,r22
  805ae4:	882d883a 	mov	r22,r17
  805ae8:	dc403017 	ldw	r17,192(sp)
  805aec:	d9002b17 	ldw	r4,172(sp)
  805af0:	1d87883a 	add	r3,r3,r22
  805af4:	10800044 	addi	r2,r2,1
  805af8:	41000015 	stw	r4,0(r8)
  805afc:	45800115 	stw	r22,4(r8)
  805b00:	d8c02015 	stw	r3,128(sp)
  805b04:	d8801f15 	stw	r2,124(sp)
  805b08:	010001c4 	movi	r4,7
  805b0c:	20818e16 	blt	r4,r2,806148 <___vfprintf_internal_r+0x1638>
  805b10:	42000204 	addi	r8,r8,8
  805b14:	003e3106 	br	8053dc <__alt_mem_onchip_mem+0xff7853dc>
  805b18:	d9403317 	ldw	r5,204(sp)
  805b1c:	00800044 	movi	r2,1
  805b20:	18c00044 	addi	r3,r3,1
  805b24:	1141530e 	bge	r2,r5,806074 <___vfprintf_internal_r+0x1564>
  805b28:	dc401f17 	ldw	r17,124(sp)
  805b2c:	00800044 	movi	r2,1
  805b30:	40800115 	stw	r2,4(r8)
  805b34:	8c400044 	addi	r17,r17,1
  805b38:	44000015 	stw	r16,0(r8)
  805b3c:	d8c02015 	stw	r3,128(sp)
  805b40:	dc401f15 	stw	r17,124(sp)
  805b44:	008001c4 	movi	r2,7
  805b48:	14416b16 	blt	r2,r17,8060f8 <___vfprintf_internal_r+0x15e8>
  805b4c:	42000204 	addi	r8,r8,8
  805b50:	d8803717 	ldw	r2,220(sp)
  805b54:	d9003417 	ldw	r4,208(sp)
  805b58:	8c400044 	addi	r17,r17,1
  805b5c:	10c7883a 	add	r3,r2,r3
  805b60:	40800115 	stw	r2,4(r8)
  805b64:	41000015 	stw	r4,0(r8)
  805b68:	d8c02015 	stw	r3,128(sp)
  805b6c:	dc401f15 	stw	r17,124(sp)
  805b70:	008001c4 	movi	r2,7
  805b74:	14416916 	blt	r2,r17,80611c <___vfprintf_internal_r+0x160c>
  805b78:	45800204 	addi	r22,r8,8
  805b7c:	d9003617 	ldw	r4,216(sp)
  805b80:	d9403817 	ldw	r5,224(sp)
  805b84:	000d883a 	mov	r6,zero
  805b88:	000f883a 	mov	r7,zero
  805b8c:	d8c03c15 	stw	r3,240(sp)
  805b90:	080f1540 	call	80f154 <__eqdf2>
  805b94:	d8c03c17 	ldw	r3,240(sp)
  805b98:	1000bc26 	beq	r2,zero,805e8c <___vfprintf_internal_r+0x137c>
  805b9c:	d9403317 	ldw	r5,204(sp)
  805ba0:	84000044 	addi	r16,r16,1
  805ba4:	8c400044 	addi	r17,r17,1
  805ba8:	28bfffc4 	addi	r2,r5,-1
  805bac:	1887883a 	add	r3,r3,r2
  805bb0:	b0800115 	stw	r2,4(r22)
  805bb4:	b4000015 	stw	r16,0(r22)
  805bb8:	d8c02015 	stw	r3,128(sp)
  805bbc:	dc401f15 	stw	r17,124(sp)
  805bc0:	008001c4 	movi	r2,7
  805bc4:	14414316 	blt	r2,r17,8060d4 <___vfprintf_internal_r+0x15c4>
  805bc8:	b5800204 	addi	r22,r22,8
  805bcc:	d9003a17 	ldw	r4,232(sp)
  805bd0:	df0022c4 	addi	fp,sp,139
  805bd4:	8c400044 	addi	r17,r17,1
  805bd8:	20c7883a 	add	r3,r4,r3
  805bdc:	b7000015 	stw	fp,0(r22)
  805be0:	b1000115 	stw	r4,4(r22)
  805be4:	d8c02015 	stw	r3,128(sp)
  805be8:	dc401f15 	stw	r17,124(sp)
  805bec:	008001c4 	movi	r2,7
  805bf0:	14400e16 	blt	r2,r17,805c2c <___vfprintf_internal_r+0x111c>
  805bf4:	b2000204 	addi	r8,r22,8
  805bf8:	003e3a06 	br	8054e4 <__alt_mem_onchip_mem+0xff7854e4>
  805bfc:	01002074 	movhi	r4,129
  805c00:	21127284 	addi	r4,r4,18890
  805c04:	d9002b15 	stw	r4,172(sp)
  805c08:	d9002b17 	ldw	r4,172(sp)
  805c0c:	1c07883a 	add	r3,r3,r16
  805c10:	44000115 	stw	r16,4(r8)
  805c14:	41000015 	stw	r4,0(r8)
  805c18:	10800044 	addi	r2,r2,1
  805c1c:	d8c02015 	stw	r3,128(sp)
  805c20:	d8801f15 	stw	r2,124(sp)
  805c24:	010001c4 	movi	r4,7
  805c28:	20be2d0e 	bge	r4,r2,8054e0 <__alt_mem_onchip_mem+0xff7854e0>
  805c2c:	d9002c17 	ldw	r4,176(sp)
  805c30:	d9801e04 	addi	r6,sp,120
  805c34:	b80b883a 	mov	r5,r23
  805c38:	080b8580 	call	80b858 <__sprint_r>
  805c3c:	103cb61e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805c40:	d8c02017 	ldw	r3,128(sp)
  805c44:	da000404 	addi	r8,sp,16
  805c48:	003e2606 	br	8054e4 <__alt_mem_onchip_mem+0xff7854e4>
  805c4c:	d9002c17 	ldw	r4,176(sp)
  805c50:	d9801e04 	addi	r6,sp,120
  805c54:	b80b883a 	mov	r5,r23
  805c58:	080b8580 	call	80b858 <__sprint_r>
  805c5c:	103e5d26 	beq	r2,zero,8055d4 <__alt_mem_onchip_mem+0xff7855d4>
  805c60:	003cad06 	br	804f18 <__alt_mem_onchip_mem+0xff784f18>
  805c64:	d9002c17 	ldw	r4,176(sp)
  805c68:	d9801e04 	addi	r6,sp,120
  805c6c:	b80b883a 	mov	r5,r23
  805c70:	080b8580 	call	80b858 <__sprint_r>
  805c74:	103ca81e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805c78:	d8c02017 	ldw	r3,128(sp)
  805c7c:	da000404 	addi	r8,sp,16
  805c80:	003e0b06 	br	8054b0 <__alt_mem_onchip_mem+0xff7854b0>
  805c84:	d9002c17 	ldw	r4,176(sp)
  805c88:	d9801e04 	addi	r6,sp,120
  805c8c:	b80b883a 	mov	r5,r23
  805c90:	080b8580 	call	80b858 <__sprint_r>
  805c94:	103ca01e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805c98:	d8c02017 	ldw	r3,128(sp)
  805c9c:	da000404 	addi	r8,sp,16
  805ca0:	003dbd06 	br	805398 <__alt_mem_onchip_mem+0xff785398>
  805ca4:	d9002c17 	ldw	r4,176(sp)
  805ca8:	d9801e04 	addi	r6,sp,120
  805cac:	b80b883a 	mov	r5,r23
  805cb0:	080b8580 	call	80b858 <__sprint_r>
  805cb4:	103c981e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805cb8:	d8c02017 	ldw	r3,128(sp)
  805cbc:	da000404 	addi	r8,sp,16
  805cc0:	003dc306 	br	8053d0 <__alt_mem_onchip_mem+0xff7853d0>
  805cc4:	d8802917 	ldw	r2,164(sp)
  805cc8:	d8002785 	stb	zero,158(sp)
  805ccc:	103f0616 	blt	r2,zero,8058e8 <__alt_mem_onchip_mem+0xff7858e8>
  805cd0:	00ffdfc4 	movi	r3,-129
  805cd4:	9d84b03a 	or	r2,r19,r22
  805cd8:	90e4703a 	and	r18,r18,r3
  805cdc:	103c6b26 	beq	r2,zero,804e8c <__alt_mem_onchip_mem+0xff784e8c>
  805ce0:	0039883a 	mov	fp,zero
  805ce4:	003e7406 	br	8056b8 <__alt_mem_onchip_mem+0xff7856b8>
  805ce8:	9080040c 	andi	r2,r18,16
  805cec:	1001b326 	beq	r2,zero,8063bc <___vfprintf_internal_r+0x18ac>
  805cf0:	d9002d17 	ldw	r4,180(sp)
  805cf4:	d9402917 	ldw	r5,164(sp)
  805cf8:	d8002785 	stb	zero,158(sp)
  805cfc:	20800104 	addi	r2,r4,4
  805d00:	24c00017 	ldw	r19,0(r4)
  805d04:	002d883a 	mov	r22,zero
  805d08:	2801b516 	blt	r5,zero,8063e0 <___vfprintf_internal_r+0x18d0>
  805d0c:	00ffdfc4 	movi	r3,-129
  805d10:	d8802d15 	stw	r2,180(sp)
  805d14:	90e4703a 	and	r18,r18,r3
  805d18:	983d2726 	beq	r19,zero,8051b8 <__alt_mem_onchip_mem+0xff7851b8>
  805d1c:	0039883a 	mov	fp,zero
  805d20:	003d2a06 	br	8051cc <__alt_mem_onchip_mem+0xff7851cc>
  805d24:	dc402617 	ldw	r17,152(sp)
  805d28:	0441d30e 	bge	zero,r17,806478 <___vfprintf_internal_r+0x1968>
  805d2c:	dc403217 	ldw	r17,200(sp)
  805d30:	d8803317 	ldw	r2,204(sp)
  805d34:	1440010e 	bge	r2,r17,805d3c <___vfprintf_internal_r+0x122c>
  805d38:	1023883a 	mov	r17,r2
  805d3c:	04400a0e 	bge	zero,r17,805d68 <___vfprintf_internal_r+0x1258>
  805d40:	d8801f17 	ldw	r2,124(sp)
  805d44:	1c47883a 	add	r3,r3,r17
  805d48:	44000015 	stw	r16,0(r8)
  805d4c:	10800044 	addi	r2,r2,1
  805d50:	44400115 	stw	r17,4(r8)
  805d54:	d8c02015 	stw	r3,128(sp)
  805d58:	d8801f15 	stw	r2,124(sp)
  805d5c:	010001c4 	movi	r4,7
  805d60:	20826516 	blt	r4,r2,8066f8 <___vfprintf_internal_r+0x1be8>
  805d64:	42000204 	addi	r8,r8,8
  805d68:	88026116 	blt	r17,zero,8066f0 <___vfprintf_internal_r+0x1be0>
  805d6c:	d9003217 	ldw	r4,200(sp)
  805d70:	2463c83a 	sub	r17,r4,r17
  805d74:	04407b0e 	bge	zero,r17,805f64 <___vfprintf_internal_r+0x1454>
  805d78:	05800404 	movi	r22,16
  805d7c:	d8801f17 	ldw	r2,124(sp)
  805d80:	b4419d0e 	bge	r22,r17,8063f8 <___vfprintf_internal_r+0x18e8>
  805d84:	01002074 	movhi	r4,129
  805d88:	21127284 	addi	r4,r4,18890
  805d8c:	d9002b15 	stw	r4,172(sp)
  805d90:	070001c4 	movi	fp,7
  805d94:	dcc02c17 	ldw	r19,176(sp)
  805d98:	00000306 	br	805da8 <___vfprintf_internal_r+0x1298>
  805d9c:	42000204 	addi	r8,r8,8
  805da0:	8c7ffc04 	addi	r17,r17,-16
  805da4:	b441970e 	bge	r22,r17,806404 <___vfprintf_internal_r+0x18f4>
  805da8:	18c00404 	addi	r3,r3,16
  805dac:	10800044 	addi	r2,r2,1
  805db0:	45000015 	stw	r20,0(r8)
  805db4:	45800115 	stw	r22,4(r8)
  805db8:	d8c02015 	stw	r3,128(sp)
  805dbc:	d8801f15 	stw	r2,124(sp)
  805dc0:	e0bff60e 	bge	fp,r2,805d9c <__alt_mem_onchip_mem+0xff785d9c>
  805dc4:	d9801e04 	addi	r6,sp,120
  805dc8:	b80b883a 	mov	r5,r23
  805dcc:	9809883a 	mov	r4,r19
  805dd0:	080b8580 	call	80b858 <__sprint_r>
  805dd4:	103c501e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805dd8:	d8c02017 	ldw	r3,128(sp)
  805ddc:	d8801f17 	ldw	r2,124(sp)
  805de0:	da000404 	addi	r8,sp,16
  805de4:	003fee06 	br	805da0 <__alt_mem_onchip_mem+0xff785da0>
  805de8:	d9002c17 	ldw	r4,176(sp)
  805dec:	d9801e04 	addi	r6,sp,120
  805df0:	b80b883a 	mov	r5,r23
  805df4:	080b8580 	call	80b858 <__sprint_r>
  805df8:	103c471e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805dfc:	d8c02017 	ldw	r3,128(sp)
  805e00:	df002787 	ldb	fp,158(sp)
  805e04:	da000404 	addi	r8,sp,16
  805e08:	003d5606 	br	805364 <__alt_mem_onchip_mem+0xff785364>
  805e0c:	9080040c 	andi	r2,r18,16
  805e10:	10016126 	beq	r2,zero,806398 <___vfprintf_internal_r+0x1888>
  805e14:	d8802d17 	ldw	r2,180(sp)
  805e18:	14c00017 	ldw	r19,0(r2)
  805e1c:	10800104 	addi	r2,r2,4
  805e20:	d8802d15 	stw	r2,180(sp)
  805e24:	982dd7fa 	srai	r22,r19,31
  805e28:	b005883a 	mov	r2,r22
  805e2c:	003c8206 	br	805038 <__alt_mem_onchip_mem+0xff785038>
  805e30:	9080040c 	andi	r2,r18,16
  805e34:	10003526 	beq	r2,zero,805f0c <___vfprintf_internal_r+0x13fc>
  805e38:	d9402d17 	ldw	r5,180(sp)
  805e3c:	d8c02917 	ldw	r3,164(sp)
  805e40:	d8002785 	stb	zero,158(sp)
  805e44:	28800104 	addi	r2,r5,4
  805e48:	2cc00017 	ldw	r19,0(r5)
  805e4c:	002d883a 	mov	r22,zero
  805e50:	18003716 	blt	r3,zero,805f30 <___vfprintf_internal_r+0x1420>
  805e54:	00ffdfc4 	movi	r3,-129
  805e58:	d8802d15 	stw	r2,180(sp)
  805e5c:	90e4703a 	and	r18,r18,r3
  805e60:	0039883a 	mov	fp,zero
  805e64:	983df326 	beq	r19,zero,805634 <__alt_mem_onchip_mem+0xff785634>
  805e68:	00800244 	movi	r2,9
  805e6c:	14fc7b36 	bltu	r2,r19,80505c <__alt_mem_onchip_mem+0xff78505c>
  805e70:	d8c02817 	ldw	r3,160(sp)
  805e74:	dc001dc4 	addi	r16,sp,119
  805e78:	9cc00c04 	addi	r19,r19,48
  805e7c:	1c07c83a 	sub	r3,r3,r16
  805e80:	dcc01dc5 	stb	r19,119(sp)
  805e84:	d8c02e15 	stw	r3,184(sp)
  805e88:	003ce806 	br	80522c <__alt_mem_onchip_mem+0xff78522c>
  805e8c:	d8803317 	ldw	r2,204(sp)
  805e90:	143fffc4 	addi	r16,r2,-1
  805e94:	043f4d0e 	bge	zero,r16,805bcc <__alt_mem_onchip_mem+0xff785bcc>
  805e98:	07000404 	movi	fp,16
  805e9c:	e400810e 	bge	fp,r16,8060a4 <___vfprintf_internal_r+0x1594>
  805ea0:	01402074 	movhi	r5,129
  805ea4:	29527284 	addi	r5,r5,18890
  805ea8:	d9402b15 	stw	r5,172(sp)
  805eac:	01c001c4 	movi	r7,7
  805eb0:	dcc02c17 	ldw	r19,176(sp)
  805eb4:	00000306 	br	805ec4 <___vfprintf_internal_r+0x13b4>
  805eb8:	b5800204 	addi	r22,r22,8
  805ebc:	843ffc04 	addi	r16,r16,-16
  805ec0:	e4007b0e 	bge	fp,r16,8060b0 <___vfprintf_internal_r+0x15a0>
  805ec4:	18c00404 	addi	r3,r3,16
  805ec8:	8c400044 	addi	r17,r17,1
  805ecc:	b5000015 	stw	r20,0(r22)
  805ed0:	b7000115 	stw	fp,4(r22)
  805ed4:	d8c02015 	stw	r3,128(sp)
  805ed8:	dc401f15 	stw	r17,124(sp)
  805edc:	3c7ff60e 	bge	r7,r17,805eb8 <__alt_mem_onchip_mem+0xff785eb8>
  805ee0:	d9801e04 	addi	r6,sp,120
  805ee4:	b80b883a 	mov	r5,r23
  805ee8:	9809883a 	mov	r4,r19
  805eec:	d9c03c15 	stw	r7,240(sp)
  805ef0:	080b8580 	call	80b858 <__sprint_r>
  805ef4:	d9c03c17 	ldw	r7,240(sp)
  805ef8:	103c071e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805efc:	d8c02017 	ldw	r3,128(sp)
  805f00:	dc401f17 	ldw	r17,124(sp)
  805f04:	dd800404 	addi	r22,sp,16
  805f08:	003fec06 	br	805ebc <__alt_mem_onchip_mem+0xff785ebc>
  805f0c:	9080100c 	andi	r2,r18,64
  805f10:	d8002785 	stb	zero,158(sp)
  805f14:	10010e26 	beq	r2,zero,806350 <___vfprintf_internal_r+0x1840>
  805f18:	d9002d17 	ldw	r4,180(sp)
  805f1c:	d9402917 	ldw	r5,164(sp)
  805f20:	002d883a 	mov	r22,zero
  805f24:	20800104 	addi	r2,r4,4
  805f28:	24c0000b 	ldhu	r19,0(r4)
  805f2c:	283fc90e 	bge	r5,zero,805e54 <__alt_mem_onchip_mem+0xff785e54>
  805f30:	d8802d15 	stw	r2,180(sp)
  805f34:	0039883a 	mov	fp,zero
  805f38:	9d84b03a 	or	r2,r19,r22
  805f3c:	103c461e 	bne	r2,zero,805058 <__alt_mem_onchip_mem+0xff785058>
  805f40:	00800044 	movi	r2,1
  805f44:	003e6c06 	br	8058f8 <__alt_mem_onchip_mem+0xff7858f8>
  805f48:	d9002c17 	ldw	r4,176(sp)
  805f4c:	d9801e04 	addi	r6,sp,120
  805f50:	b80b883a 	mov	r5,r23
  805f54:	080b8580 	call	80b858 <__sprint_r>
  805f58:	103bef1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  805f5c:	d8c02017 	ldw	r3,128(sp)
  805f60:	da000404 	addi	r8,sp,16
  805f64:	d9003217 	ldw	r4,200(sp)
  805f68:	d8802617 	ldw	r2,152(sp)
  805f6c:	d9403317 	ldw	r5,204(sp)
  805f70:	8123883a 	add	r17,r16,r4
  805f74:	11400216 	blt	r2,r5,805f80 <___vfprintf_internal_r+0x1470>
  805f78:	9100004c 	andi	r4,r18,1
  805f7c:	20000d26 	beq	r4,zero,805fb4 <___vfprintf_internal_r+0x14a4>
  805f80:	d9003717 	ldw	r4,220(sp)
  805f84:	d9403417 	ldw	r5,208(sp)
  805f88:	1907883a 	add	r3,r3,r4
  805f8c:	d9001f17 	ldw	r4,124(sp)
  805f90:	41400015 	stw	r5,0(r8)
  805f94:	d9403717 	ldw	r5,220(sp)
  805f98:	21000044 	addi	r4,r4,1
  805f9c:	d8c02015 	stw	r3,128(sp)
  805fa0:	41400115 	stw	r5,4(r8)
  805fa4:	d9001f15 	stw	r4,124(sp)
  805fa8:	014001c4 	movi	r5,7
  805fac:	2901e816 	blt	r5,r4,806750 <___vfprintf_internal_r+0x1c40>
  805fb0:	42000204 	addi	r8,r8,8
  805fb4:	d9003317 	ldw	r4,204(sp)
  805fb8:	8121883a 	add	r16,r16,r4
  805fbc:	2085c83a 	sub	r2,r4,r2
  805fc0:	8461c83a 	sub	r16,r16,r17
  805fc4:	1400010e 	bge	r2,r16,805fcc <___vfprintf_internal_r+0x14bc>
  805fc8:	1021883a 	mov	r16,r2
  805fcc:	04000a0e 	bge	zero,r16,805ff8 <___vfprintf_internal_r+0x14e8>
  805fd0:	d9001f17 	ldw	r4,124(sp)
  805fd4:	1c07883a 	add	r3,r3,r16
  805fd8:	44400015 	stw	r17,0(r8)
  805fdc:	21000044 	addi	r4,r4,1
  805fe0:	44000115 	stw	r16,4(r8)
  805fe4:	d8c02015 	stw	r3,128(sp)
  805fe8:	d9001f15 	stw	r4,124(sp)
  805fec:	014001c4 	movi	r5,7
  805ff0:	2901fb16 	blt	r5,r4,8067e0 <___vfprintf_internal_r+0x1cd0>
  805ff4:	42000204 	addi	r8,r8,8
  805ff8:	8001f716 	blt	r16,zero,8067d8 <___vfprintf_internal_r+0x1cc8>
  805ffc:	1421c83a 	sub	r16,r2,r16
  806000:	043d380e 	bge	zero,r16,8054e4 <__alt_mem_onchip_mem+0xff7854e4>
  806004:	04400404 	movi	r17,16
  806008:	d8801f17 	ldw	r2,124(sp)
  80600c:	8c3efb0e 	bge	r17,r16,805bfc <__alt_mem_onchip_mem+0xff785bfc>
  806010:	01402074 	movhi	r5,129
  806014:	29527284 	addi	r5,r5,18890
  806018:	d9402b15 	stw	r5,172(sp)
  80601c:	058001c4 	movi	r22,7
  806020:	dcc02c17 	ldw	r19,176(sp)
  806024:	00000306 	br	806034 <___vfprintf_internal_r+0x1524>
  806028:	42000204 	addi	r8,r8,8
  80602c:	843ffc04 	addi	r16,r16,-16
  806030:	8c3ef50e 	bge	r17,r16,805c08 <__alt_mem_onchip_mem+0xff785c08>
  806034:	18c00404 	addi	r3,r3,16
  806038:	10800044 	addi	r2,r2,1
  80603c:	45000015 	stw	r20,0(r8)
  806040:	44400115 	stw	r17,4(r8)
  806044:	d8c02015 	stw	r3,128(sp)
  806048:	d8801f15 	stw	r2,124(sp)
  80604c:	b0bff60e 	bge	r22,r2,806028 <__alt_mem_onchip_mem+0xff786028>
  806050:	d9801e04 	addi	r6,sp,120
  806054:	b80b883a 	mov	r5,r23
  806058:	9809883a 	mov	r4,r19
  80605c:	080b8580 	call	80b858 <__sprint_r>
  806060:	103bad1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  806064:	d8c02017 	ldw	r3,128(sp)
  806068:	d8801f17 	ldw	r2,124(sp)
  80606c:	da000404 	addi	r8,sp,16
  806070:	003fee06 	br	80602c <__alt_mem_onchip_mem+0xff78602c>
  806074:	9088703a 	and	r4,r18,r2
  806078:	203eab1e 	bne	r4,zero,805b28 <__alt_mem_onchip_mem+0xff785b28>
  80607c:	dc401f17 	ldw	r17,124(sp)
  806080:	40800115 	stw	r2,4(r8)
  806084:	44000015 	stw	r16,0(r8)
  806088:	8c400044 	addi	r17,r17,1
  80608c:	d8c02015 	stw	r3,128(sp)
  806090:	dc401f15 	stw	r17,124(sp)
  806094:	008001c4 	movi	r2,7
  806098:	14400e16 	blt	r2,r17,8060d4 <___vfprintf_internal_r+0x15c4>
  80609c:	45800204 	addi	r22,r8,8
  8060a0:	003eca06 	br	805bcc <__alt_mem_onchip_mem+0xff785bcc>
  8060a4:	01002074 	movhi	r4,129
  8060a8:	21127284 	addi	r4,r4,18890
  8060ac:	d9002b15 	stw	r4,172(sp)
  8060b0:	d8802b17 	ldw	r2,172(sp)
  8060b4:	1c07883a 	add	r3,r3,r16
  8060b8:	8c400044 	addi	r17,r17,1
  8060bc:	b0800015 	stw	r2,0(r22)
  8060c0:	b4000115 	stw	r16,4(r22)
  8060c4:	d8c02015 	stw	r3,128(sp)
  8060c8:	dc401f15 	stw	r17,124(sp)
  8060cc:	008001c4 	movi	r2,7
  8060d0:	147ebd0e 	bge	r2,r17,805bc8 <__alt_mem_onchip_mem+0xff785bc8>
  8060d4:	d9002c17 	ldw	r4,176(sp)
  8060d8:	d9801e04 	addi	r6,sp,120
  8060dc:	b80b883a 	mov	r5,r23
  8060e0:	080b8580 	call	80b858 <__sprint_r>
  8060e4:	103b8c1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  8060e8:	d8c02017 	ldw	r3,128(sp)
  8060ec:	dc401f17 	ldw	r17,124(sp)
  8060f0:	dd800404 	addi	r22,sp,16
  8060f4:	003eb506 	br	805bcc <__alt_mem_onchip_mem+0xff785bcc>
  8060f8:	d9002c17 	ldw	r4,176(sp)
  8060fc:	d9801e04 	addi	r6,sp,120
  806100:	b80b883a 	mov	r5,r23
  806104:	080b8580 	call	80b858 <__sprint_r>
  806108:	103b831e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  80610c:	d8c02017 	ldw	r3,128(sp)
  806110:	dc401f17 	ldw	r17,124(sp)
  806114:	da000404 	addi	r8,sp,16
  806118:	003e8d06 	br	805b50 <__alt_mem_onchip_mem+0xff785b50>
  80611c:	d9002c17 	ldw	r4,176(sp)
  806120:	d9801e04 	addi	r6,sp,120
  806124:	b80b883a 	mov	r5,r23
  806128:	080b8580 	call	80b858 <__sprint_r>
  80612c:	103b7a1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  806130:	d8c02017 	ldw	r3,128(sp)
  806134:	dc401f17 	ldw	r17,124(sp)
  806138:	dd800404 	addi	r22,sp,16
  80613c:	003e8f06 	br	805b7c <__alt_mem_onchip_mem+0xff785b7c>
  806140:	0027883a 	mov	r19,zero
  806144:	003f4a06 	br	805e70 <__alt_mem_onchip_mem+0xff785e70>
  806148:	d9002c17 	ldw	r4,176(sp)
  80614c:	d9801e04 	addi	r6,sp,120
  806150:	b80b883a 	mov	r5,r23
  806154:	080b8580 	call	80b858 <__sprint_r>
  806158:	103b6f1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  80615c:	d8c02017 	ldw	r3,128(sp)
  806160:	da000404 	addi	r8,sp,16
  806164:	003c9d06 	br	8053dc <__alt_mem_onchip_mem+0xff7853dc>
  806168:	04e7c83a 	sub	r19,zero,r19
  80616c:	9804c03a 	cmpne	r2,r19,zero
  806170:	05adc83a 	sub	r22,zero,r22
  806174:	b0adc83a 	sub	r22,r22,r2
  806178:	d8802917 	ldw	r2,164(sp)
  80617c:	07000b44 	movi	fp,45
  806180:	df002785 	stb	fp,158(sp)
  806184:	10017b16 	blt	r2,zero,806774 <___vfprintf_internal_r+0x1c64>
  806188:	00bfdfc4 	movi	r2,-129
  80618c:	90a4703a 	and	r18,r18,r2
  806190:	003bb106 	br	805058 <__alt_mem_onchip_mem+0xff785058>
  806194:	d9003617 	ldw	r4,216(sp)
  806198:	d9403817 	ldw	r5,224(sp)
  80619c:	da003d15 	stw	r8,244(sp)
  8061a0:	080b60c0 	call	80b60c <__fpclassifyd>
  8061a4:	da003d17 	ldw	r8,244(sp)
  8061a8:	1000f026 	beq	r2,zero,80656c <___vfprintf_internal_r+0x1a5c>
  8061ac:	d9002917 	ldw	r4,164(sp)
  8061b0:	05bff7c4 	movi	r22,-33
  8061b4:	00bfffc4 	movi	r2,-1
  8061b8:	8dac703a 	and	r22,r17,r22
  8061bc:	20820026 	beq	r4,r2,8069c0 <___vfprintf_internal_r+0x1eb0>
  8061c0:	008011c4 	movi	r2,71
  8061c4:	b081f726 	beq	r22,r2,8069a4 <___vfprintf_internal_r+0x1e94>
  8061c8:	d9003817 	ldw	r4,224(sp)
  8061cc:	90c04014 	ori	r3,r18,256
  8061d0:	d8c02b15 	stw	r3,172(sp)
  8061d4:	20021516 	blt	r4,zero,806a2c <___vfprintf_internal_r+0x1f1c>
  8061d8:	dcc03817 	ldw	r19,224(sp)
  8061dc:	d8002a05 	stb	zero,168(sp)
  8061e0:	00801984 	movi	r2,102
  8061e4:	8881f926 	beq	r17,r2,8069cc <___vfprintf_internal_r+0x1ebc>
  8061e8:	00801184 	movi	r2,70
  8061ec:	88821c26 	beq	r17,r2,806a60 <___vfprintf_internal_r+0x1f50>
  8061f0:	00801144 	movi	r2,69
  8061f4:	b081ef26 	beq	r22,r2,8069b4 <___vfprintf_internal_r+0x1ea4>
  8061f8:	d8c02917 	ldw	r3,164(sp)
  8061fc:	d8802104 	addi	r2,sp,132
  806200:	d8800315 	stw	r2,12(sp)
  806204:	d9403617 	ldw	r5,216(sp)
  806208:	d8802504 	addi	r2,sp,148
  80620c:	d9002c17 	ldw	r4,176(sp)
  806210:	d8800215 	stw	r2,8(sp)
  806214:	d8802604 	addi	r2,sp,152
  806218:	d8c00015 	stw	r3,0(sp)
  80621c:	d8800115 	stw	r2,4(sp)
  806220:	01c00084 	movi	r7,2
  806224:	980d883a 	mov	r6,r19
  806228:	d8c03c15 	stw	r3,240(sp)
  80622c:	da003d15 	stw	r8,244(sp)
  806230:	08073400 	call	807340 <_dtoa_r>
  806234:	1021883a 	mov	r16,r2
  806238:	008019c4 	movi	r2,103
  80623c:	d8c03c17 	ldw	r3,240(sp)
  806240:	da003d17 	ldw	r8,244(sp)
  806244:	88817126 	beq	r17,r2,80680c <___vfprintf_internal_r+0x1cfc>
  806248:	008011c4 	movi	r2,71
  80624c:	88829226 	beq	r17,r2,806c98 <___vfprintf_internal_r+0x2188>
  806250:	80f9883a 	add	fp,r16,r3
  806254:	d9003617 	ldw	r4,216(sp)
  806258:	000d883a 	mov	r6,zero
  80625c:	000f883a 	mov	r7,zero
  806260:	980b883a 	mov	r5,r19
  806264:	da003d15 	stw	r8,244(sp)
  806268:	080f1540 	call	80f154 <__eqdf2>
  80626c:	da003d17 	ldw	r8,244(sp)
  806270:	10018d26 	beq	r2,zero,8068a8 <___vfprintf_internal_r+0x1d98>
  806274:	d8802117 	ldw	r2,132(sp)
  806278:	1700062e 	bgeu	r2,fp,806294 <___vfprintf_internal_r+0x1784>
  80627c:	01000c04 	movi	r4,48
  806280:	10c00044 	addi	r3,r2,1
  806284:	d8c02115 	stw	r3,132(sp)
  806288:	11000005 	stb	r4,0(r2)
  80628c:	d8802117 	ldw	r2,132(sp)
  806290:	173ffb36 	bltu	r2,fp,806280 <__alt_mem_onchip_mem+0xff786280>
  806294:	1405c83a 	sub	r2,r2,r16
  806298:	d8803315 	stw	r2,204(sp)
  80629c:	008011c4 	movi	r2,71
  8062a0:	b0817626 	beq	r22,r2,80687c <___vfprintf_internal_r+0x1d6c>
  8062a4:	00801944 	movi	r2,101
  8062a8:	1442810e 	bge	r2,r17,806cb0 <___vfprintf_internal_r+0x21a0>
  8062ac:	d8c02617 	ldw	r3,152(sp)
  8062b0:	00801984 	movi	r2,102
  8062b4:	d8c03215 	stw	r3,200(sp)
  8062b8:	8881fe26 	beq	r17,r2,806ab4 <___vfprintf_internal_r+0x1fa4>
  8062bc:	d8c03217 	ldw	r3,200(sp)
  8062c0:	d9003317 	ldw	r4,204(sp)
  8062c4:	1901dd16 	blt	r3,r4,806a3c <___vfprintf_internal_r+0x1f2c>
  8062c8:	9480004c 	andi	r18,r18,1
  8062cc:	90022b1e 	bne	r18,zero,806b7c <___vfprintf_internal_r+0x206c>
  8062d0:	1805883a 	mov	r2,r3
  8062d4:	18028016 	blt	r3,zero,806cd8 <___vfprintf_internal_r+0x21c8>
  8062d8:	d8c03217 	ldw	r3,200(sp)
  8062dc:	044019c4 	movi	r17,103
  8062e0:	d8c02e15 	stw	r3,184(sp)
  8062e4:	df002a07 	ldb	fp,168(sp)
  8062e8:	e001531e 	bne	fp,zero,806838 <___vfprintf_internal_r+0x1d28>
  8062ec:	df002783 	ldbu	fp,158(sp)
  8062f0:	d8802a15 	stw	r2,168(sp)
  8062f4:	dc802b17 	ldw	r18,172(sp)
  8062f8:	d8002915 	stw	zero,164(sp)
  8062fc:	003bd106 	br	805244 <__alt_mem_onchip_mem+0xff785244>
  806300:	d8802d17 	ldw	r2,180(sp)
  806304:	d8c02d17 	ldw	r3,180(sp)
  806308:	d9002d17 	ldw	r4,180(sp)
  80630c:	10800017 	ldw	r2,0(r2)
  806310:	18c00117 	ldw	r3,4(r3)
  806314:	21000204 	addi	r4,r4,8
  806318:	d8803615 	stw	r2,216(sp)
  80631c:	d8c03815 	stw	r3,224(sp)
  806320:	d9002d15 	stw	r4,180(sp)
  806324:	003b7506 	br	8050fc <__alt_mem_onchip_mem+0xff7850fc>
  806328:	ac400007 	ldb	r17,0(r21)
  80632c:	003a5906 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  806330:	9080100c 	andi	r2,r18,64
  806334:	1000a826 	beq	r2,zero,8065d8 <___vfprintf_internal_r+0x1ac8>
  806338:	d9002d17 	ldw	r4,180(sp)
  80633c:	002d883a 	mov	r22,zero
  806340:	24c0000b 	ldhu	r19,0(r4)
  806344:	21000104 	addi	r4,r4,4
  806348:	d9002d15 	stw	r4,180(sp)
  80634c:	003ccb06 	br	80567c <__alt_mem_onchip_mem+0xff78567c>
  806350:	d8c02d17 	ldw	r3,180(sp)
  806354:	d9002917 	ldw	r4,164(sp)
  806358:	002d883a 	mov	r22,zero
  80635c:	18800104 	addi	r2,r3,4
  806360:	1cc00017 	ldw	r19,0(r3)
  806364:	203ebb0e 	bge	r4,zero,805e54 <__alt_mem_onchip_mem+0xff785e54>
  806368:	003ef106 	br	805f30 <__alt_mem_onchip_mem+0xff785f30>
  80636c:	9080040c 	andi	r2,r18,16
  806370:	1000921e 	bne	r2,zero,8065bc <___vfprintf_internal_r+0x1aac>
  806374:	9480100c 	andi	r18,r18,64
  806378:	90013926 	beq	r18,zero,806860 <___vfprintf_internal_r+0x1d50>
  80637c:	d9002d17 	ldw	r4,180(sp)
  806380:	d9402f17 	ldw	r5,188(sp)
  806384:	20800017 	ldw	r2,0(r4)
  806388:	21000104 	addi	r4,r4,4
  80638c:	d9002d15 	stw	r4,180(sp)
  806390:	1140000d 	sth	r5,0(r2)
  806394:	003a1606 	br	804bf0 <__alt_mem_onchip_mem+0xff784bf0>
  806398:	9080100c 	andi	r2,r18,64
  80639c:	10008026 	beq	r2,zero,8065a0 <___vfprintf_internal_r+0x1a90>
  8063a0:	d8c02d17 	ldw	r3,180(sp)
  8063a4:	1cc0000f 	ldh	r19,0(r3)
  8063a8:	18c00104 	addi	r3,r3,4
  8063ac:	d8c02d15 	stw	r3,180(sp)
  8063b0:	982dd7fa 	srai	r22,r19,31
  8063b4:	b005883a 	mov	r2,r22
  8063b8:	003b1f06 	br	805038 <__alt_mem_onchip_mem+0xff785038>
  8063bc:	9080100c 	andi	r2,r18,64
  8063c0:	d8002785 	stb	zero,158(sp)
  8063c4:	10008a1e 	bne	r2,zero,8065f0 <___vfprintf_internal_r+0x1ae0>
  8063c8:	d9402d17 	ldw	r5,180(sp)
  8063cc:	d8c02917 	ldw	r3,164(sp)
  8063d0:	002d883a 	mov	r22,zero
  8063d4:	28800104 	addi	r2,r5,4
  8063d8:	2cc00017 	ldw	r19,0(r5)
  8063dc:	183e4b0e 	bge	r3,zero,805d0c <__alt_mem_onchip_mem+0xff785d0c>
  8063e0:	9d86b03a 	or	r3,r19,r22
  8063e4:	d8802d15 	stw	r2,180(sp)
  8063e8:	183e4c1e 	bne	r3,zero,805d1c <__alt_mem_onchip_mem+0xff785d1c>
  8063ec:	0039883a 	mov	fp,zero
  8063f0:	0005883a 	mov	r2,zero
  8063f4:	003d4006 	br	8058f8 <__alt_mem_onchip_mem+0xff7858f8>
  8063f8:	01402074 	movhi	r5,129
  8063fc:	29527284 	addi	r5,r5,18890
  806400:	d9402b15 	stw	r5,172(sp)
  806404:	d9402b17 	ldw	r5,172(sp)
  806408:	1c47883a 	add	r3,r3,r17
  80640c:	10800044 	addi	r2,r2,1
  806410:	41400015 	stw	r5,0(r8)
  806414:	44400115 	stw	r17,4(r8)
  806418:	d8c02015 	stw	r3,128(sp)
  80641c:	d8801f15 	stw	r2,124(sp)
  806420:	010001c4 	movi	r4,7
  806424:	20bec816 	blt	r4,r2,805f48 <__alt_mem_onchip_mem+0xff785f48>
  806428:	42000204 	addi	r8,r8,8
  80642c:	003ecd06 	br	805f64 <__alt_mem_onchip_mem+0xff785f64>
  806430:	d9002917 	ldw	r4,164(sp)
  806434:	d8002785 	stb	zero,158(sp)
  806438:	203d2d16 	blt	r4,zero,8058f0 <__alt_mem_onchip_mem+0xff7858f0>
  80643c:	00bfdfc4 	movi	r2,-129
  806440:	90a4703a 	and	r18,r18,r2
  806444:	003a9106 	br	804e8c <__alt_mem_onchip_mem+0xff784e8c>
  806448:	01002074 	movhi	r4,129
  80644c:	21127284 	addi	r4,r4,18890
  806450:	d9002b15 	stw	r4,172(sp)
  806454:	003c0c06 	br	805488 <__alt_mem_onchip_mem+0xff785488>
  806458:	d9002c17 	ldw	r4,176(sp)
  80645c:	d9801e04 	addi	r6,sp,120
  806460:	b80b883a 	mov	r5,r23
  806464:	080b8580 	call	80b858 <__sprint_r>
  806468:	103aab1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  80646c:	d8c02017 	ldw	r3,128(sp)
  806470:	da000404 	addi	r8,sp,16
  806474:	003d4106 	br	80597c <__alt_mem_onchip_mem+0xff78597c>
  806478:	d8801f17 	ldw	r2,124(sp)
  80647c:	01402074 	movhi	r5,129
  806480:	01000044 	movi	r4,1
  806484:	18c00044 	addi	r3,r3,1
  806488:	10800044 	addi	r2,r2,1
  80648c:	29527204 	addi	r5,r5,18888
  806490:	41000115 	stw	r4,4(r8)
  806494:	41400015 	stw	r5,0(r8)
  806498:	d8c02015 	stw	r3,128(sp)
  80649c:	d8801f15 	stw	r2,124(sp)
  8064a0:	010001c4 	movi	r4,7
  8064a4:	20805c16 	blt	r4,r2,806618 <___vfprintf_internal_r+0x1b08>
  8064a8:	42000204 	addi	r8,r8,8
  8064ac:	8800041e 	bne	r17,zero,8064c0 <___vfprintf_internal_r+0x19b0>
  8064b0:	d8803317 	ldw	r2,204(sp)
  8064b4:	1000021e 	bne	r2,zero,8064c0 <___vfprintf_internal_r+0x19b0>
  8064b8:	9080004c 	andi	r2,r18,1
  8064bc:	103c0926 	beq	r2,zero,8054e4 <__alt_mem_onchip_mem+0xff7854e4>
  8064c0:	d9003717 	ldw	r4,220(sp)
  8064c4:	d8801f17 	ldw	r2,124(sp)
  8064c8:	d9403417 	ldw	r5,208(sp)
  8064cc:	20c7883a 	add	r3,r4,r3
  8064d0:	10800044 	addi	r2,r2,1
  8064d4:	41000115 	stw	r4,4(r8)
  8064d8:	41400015 	stw	r5,0(r8)
  8064dc:	d8c02015 	stw	r3,128(sp)
  8064e0:	d8801f15 	stw	r2,124(sp)
  8064e4:	010001c4 	movi	r4,7
  8064e8:	20812116 	blt	r4,r2,806970 <___vfprintf_internal_r+0x1e60>
  8064ec:	42000204 	addi	r8,r8,8
  8064f0:	0463c83a 	sub	r17,zero,r17
  8064f4:	0440730e 	bge	zero,r17,8066c4 <___vfprintf_internal_r+0x1bb4>
  8064f8:	05800404 	movi	r22,16
  8064fc:	b440860e 	bge	r22,r17,806718 <___vfprintf_internal_r+0x1c08>
  806500:	01402074 	movhi	r5,129
  806504:	29527284 	addi	r5,r5,18890
  806508:	d9402b15 	stw	r5,172(sp)
  80650c:	070001c4 	movi	fp,7
  806510:	dcc02c17 	ldw	r19,176(sp)
  806514:	00000306 	br	806524 <___vfprintf_internal_r+0x1a14>
  806518:	42000204 	addi	r8,r8,8
  80651c:	8c7ffc04 	addi	r17,r17,-16
  806520:	b440800e 	bge	r22,r17,806724 <___vfprintf_internal_r+0x1c14>
  806524:	18c00404 	addi	r3,r3,16
  806528:	10800044 	addi	r2,r2,1
  80652c:	45000015 	stw	r20,0(r8)
  806530:	45800115 	stw	r22,4(r8)
  806534:	d8c02015 	stw	r3,128(sp)
  806538:	d8801f15 	stw	r2,124(sp)
  80653c:	e0bff60e 	bge	fp,r2,806518 <__alt_mem_onchip_mem+0xff786518>
  806540:	d9801e04 	addi	r6,sp,120
  806544:	b80b883a 	mov	r5,r23
  806548:	9809883a 	mov	r4,r19
  80654c:	080b8580 	call	80b858 <__sprint_r>
  806550:	103a711e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  806554:	d8c02017 	ldw	r3,128(sp)
  806558:	d8801f17 	ldw	r2,124(sp)
  80655c:	da000404 	addi	r8,sp,16
  806560:	003fee06 	br	80651c <__alt_mem_onchip_mem+0xff78651c>
  806564:	00bfffc4 	movi	r2,-1
  806568:	003a6f06 	br	804f28 <__alt_mem_onchip_mem+0xff784f28>
  80656c:	008011c4 	movi	r2,71
  806570:	1440b816 	blt	r2,r17,806854 <___vfprintf_internal_r+0x1d44>
  806574:	04002074 	movhi	r16,129
  806578:	84126404 	addi	r16,r16,18832
  80657c:	00c000c4 	movi	r3,3
  806580:	00bfdfc4 	movi	r2,-129
  806584:	d8c02a15 	stw	r3,168(sp)
  806588:	90a4703a 	and	r18,r18,r2
  80658c:	df002783 	ldbu	fp,158(sp)
  806590:	d8c02e15 	stw	r3,184(sp)
  806594:	d8002915 	stw	zero,164(sp)
  806598:	d8003215 	stw	zero,200(sp)
  80659c:	003b2906 	br	805244 <__alt_mem_onchip_mem+0xff785244>
  8065a0:	d9002d17 	ldw	r4,180(sp)
  8065a4:	24c00017 	ldw	r19,0(r4)
  8065a8:	21000104 	addi	r4,r4,4
  8065ac:	d9002d15 	stw	r4,180(sp)
  8065b0:	982dd7fa 	srai	r22,r19,31
  8065b4:	b005883a 	mov	r2,r22
  8065b8:	003a9f06 	br	805038 <__alt_mem_onchip_mem+0xff785038>
  8065bc:	d9402d17 	ldw	r5,180(sp)
  8065c0:	d8c02f17 	ldw	r3,188(sp)
  8065c4:	28800017 	ldw	r2,0(r5)
  8065c8:	29400104 	addi	r5,r5,4
  8065cc:	d9402d15 	stw	r5,180(sp)
  8065d0:	10c00015 	stw	r3,0(r2)
  8065d4:	00398606 	br	804bf0 <__alt_mem_onchip_mem+0xff784bf0>
  8065d8:	d9402d17 	ldw	r5,180(sp)
  8065dc:	002d883a 	mov	r22,zero
  8065e0:	2cc00017 	ldw	r19,0(r5)
  8065e4:	29400104 	addi	r5,r5,4
  8065e8:	d9402d15 	stw	r5,180(sp)
  8065ec:	003c2306 	br	80567c <__alt_mem_onchip_mem+0xff78567c>
  8065f0:	d8c02d17 	ldw	r3,180(sp)
  8065f4:	d9002917 	ldw	r4,164(sp)
  8065f8:	002d883a 	mov	r22,zero
  8065fc:	18800104 	addi	r2,r3,4
  806600:	1cc0000b 	ldhu	r19,0(r3)
  806604:	203dc10e 	bge	r4,zero,805d0c <__alt_mem_onchip_mem+0xff785d0c>
  806608:	003f7506 	br	8063e0 <__alt_mem_onchip_mem+0xff7863e0>
  80660c:	04002074 	movhi	r16,129
  806610:	84126204 	addi	r16,r16,18824
  806614:	003acc06 	br	805148 <__alt_mem_onchip_mem+0xff785148>
  806618:	d9002c17 	ldw	r4,176(sp)
  80661c:	d9801e04 	addi	r6,sp,120
  806620:	b80b883a 	mov	r5,r23
  806624:	080b8580 	call	80b858 <__sprint_r>
  806628:	103a3b1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  80662c:	dc402617 	ldw	r17,152(sp)
  806630:	d8c02017 	ldw	r3,128(sp)
  806634:	da000404 	addi	r8,sp,16
  806638:	003f9c06 	br	8064ac <__alt_mem_onchip_mem+0xff7864ac>
  80663c:	ac400043 	ldbu	r17,1(r21)
  806640:	94800814 	ori	r18,r18,32
  806644:	ad400044 	addi	r21,r21,1
  806648:	8c403fcc 	andi	r17,r17,255
  80664c:	8c40201c 	xori	r17,r17,128
  806650:	8c7fe004 	addi	r17,r17,-128
  806654:	00398f06 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  806658:	d8c02d15 	stw	r3,180(sp)
  80665c:	0039883a 	mov	fp,zero
  806660:	003e3506 	br	805f38 <__alt_mem_onchip_mem+0xff785f38>
  806664:	d9002c17 	ldw	r4,176(sp)
  806668:	d9801e04 	addi	r6,sp,120
  80666c:	b80b883a 	mov	r5,r23
  806670:	080b8580 	call	80b858 <__sprint_r>
  806674:	103a281e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  806678:	d8c02017 	ldw	r3,128(sp)
  80667c:	da000404 	addi	r8,sp,16
  806680:	003cd006 	br	8059c4 <__alt_mem_onchip_mem+0xff7859c4>
  806684:	8009883a 	mov	r4,r16
  806688:	da003d15 	stw	r8,244(sp)
  80668c:	0804a780 	call	804a78 <strlen>
  806690:	d8802e15 	stw	r2,184(sp)
  806694:	da003d17 	ldw	r8,244(sp)
  806698:	103c340e 	bge	r2,zero,80576c <__alt_mem_onchip_mem+0xff78576c>
  80669c:	0005883a 	mov	r2,zero
  8066a0:	003c3206 	br	80576c <__alt_mem_onchip_mem+0xff78576c>
  8066a4:	d9002c17 	ldw	r4,176(sp)
  8066a8:	d9801e04 	addi	r6,sp,120
  8066ac:	b80b883a 	mov	r5,r23
  8066b0:	080b8580 	call	80b858 <__sprint_r>
  8066b4:	103a181e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  8066b8:	d8c02017 	ldw	r3,128(sp)
  8066bc:	d8801f17 	ldw	r2,124(sp)
  8066c0:	da000404 	addi	r8,sp,16
  8066c4:	d9403317 	ldw	r5,204(sp)
  8066c8:	10800044 	addi	r2,r2,1
  8066cc:	44000015 	stw	r16,0(r8)
  8066d0:	28c7883a 	add	r3,r5,r3
  8066d4:	003b7d06 	br	8054cc <__alt_mem_onchip_mem+0xff7854cc>
  8066d8:	01002074 	movhi	r4,129
  8066dc:	21127684 	addi	r4,r4,18906
  8066e0:	d9003515 	stw	r4,212(sp)
  8066e4:	003b1406 	br	805338 <__alt_mem_onchip_mem+0xff785338>
  8066e8:	013fffc4 	movi	r4,-1
  8066ec:	003a3506 	br	804fc4 <__alt_mem_onchip_mem+0xff784fc4>
  8066f0:	0023883a 	mov	r17,zero
  8066f4:	003d9d06 	br	805d6c <__alt_mem_onchip_mem+0xff785d6c>
  8066f8:	d9002c17 	ldw	r4,176(sp)
  8066fc:	d9801e04 	addi	r6,sp,120
  806700:	b80b883a 	mov	r5,r23
  806704:	080b8580 	call	80b858 <__sprint_r>
  806708:	103a031e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  80670c:	d8c02017 	ldw	r3,128(sp)
  806710:	da000404 	addi	r8,sp,16
  806714:	003d9406 	br	805d68 <__alt_mem_onchip_mem+0xff785d68>
  806718:	01002074 	movhi	r4,129
  80671c:	21127284 	addi	r4,r4,18890
  806720:	d9002b15 	stw	r4,172(sp)
  806724:	d9002b17 	ldw	r4,172(sp)
  806728:	1c47883a 	add	r3,r3,r17
  80672c:	10800044 	addi	r2,r2,1
  806730:	41000015 	stw	r4,0(r8)
  806734:	44400115 	stw	r17,4(r8)
  806738:	d8c02015 	stw	r3,128(sp)
  80673c:	d8801f15 	stw	r2,124(sp)
  806740:	010001c4 	movi	r4,7
  806744:	20bfd716 	blt	r4,r2,8066a4 <__alt_mem_onchip_mem+0xff7866a4>
  806748:	42000204 	addi	r8,r8,8
  80674c:	003fdd06 	br	8066c4 <__alt_mem_onchip_mem+0xff7866c4>
  806750:	d9002c17 	ldw	r4,176(sp)
  806754:	d9801e04 	addi	r6,sp,120
  806758:	b80b883a 	mov	r5,r23
  80675c:	080b8580 	call	80b858 <__sprint_r>
  806760:	1039ed1e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  806764:	d8802617 	ldw	r2,152(sp)
  806768:	d8c02017 	ldw	r3,128(sp)
  80676c:	da000404 	addi	r8,sp,16
  806770:	003e1006 	br	805fb4 <__alt_mem_onchip_mem+0xff785fb4>
  806774:	00800044 	movi	r2,1
  806778:	10803fcc 	andi	r2,r2,255
  80677c:	00c00044 	movi	r3,1
  806780:	10fa3526 	beq	r2,r3,805058 <__alt_mem_onchip_mem+0xff785058>
  806784:	00c00084 	movi	r3,2
  806788:	10fbcb26 	beq	r2,r3,8056b8 <__alt_mem_onchip_mem+0xff7856b8>
  80678c:	003a8f06 	br	8051cc <__alt_mem_onchip_mem+0xff7851cc>
  806790:	01002074 	movhi	r4,129
  806794:	21127684 	addi	r4,r4,18906
  806798:	d9003515 	stw	r4,212(sp)
  80679c:	003b7606 	br	805578 <__alt_mem_onchip_mem+0xff785578>
  8067a0:	d8802917 	ldw	r2,164(sp)
  8067a4:	00c00184 	movi	r3,6
  8067a8:	1880012e 	bgeu	r3,r2,8067b0 <___vfprintf_internal_r+0x1ca0>
  8067ac:	1805883a 	mov	r2,r3
  8067b0:	d8802e15 	stw	r2,184(sp)
  8067b4:	1000ef16 	blt	r2,zero,806b74 <___vfprintf_internal_r+0x2064>
  8067b8:	04002074 	movhi	r16,129
  8067bc:	d8802a15 	stw	r2,168(sp)
  8067c0:	dcc02d15 	stw	r19,180(sp)
  8067c4:	d8002915 	stw	zero,164(sp)
  8067c8:	d8003215 	stw	zero,200(sp)
  8067cc:	84127004 	addi	r16,r16,18880
  8067d0:	0039883a 	mov	fp,zero
  8067d4:	003aa206 	br	805260 <__alt_mem_onchip_mem+0xff785260>
  8067d8:	0021883a 	mov	r16,zero
  8067dc:	003e0706 	br	805ffc <__alt_mem_onchip_mem+0xff785ffc>
  8067e0:	d9002c17 	ldw	r4,176(sp)
  8067e4:	d9801e04 	addi	r6,sp,120
  8067e8:	b80b883a 	mov	r5,r23
  8067ec:	080b8580 	call	80b858 <__sprint_r>
  8067f0:	1039c91e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  8067f4:	d8802617 	ldw	r2,152(sp)
  8067f8:	d9403317 	ldw	r5,204(sp)
  8067fc:	d8c02017 	ldw	r3,128(sp)
  806800:	da000404 	addi	r8,sp,16
  806804:	2885c83a 	sub	r2,r5,r2
  806808:	003dfb06 	br	805ff8 <__alt_mem_onchip_mem+0xff785ff8>
  80680c:	9080004c 	andi	r2,r18,1
  806810:	103e8f1e 	bne	r2,zero,806250 <__alt_mem_onchip_mem+0xff786250>
  806814:	d8802117 	ldw	r2,132(sp)
  806818:	003e9e06 	br	806294 <__alt_mem_onchip_mem+0xff786294>
  80681c:	1025883a 	mov	r18,r2
  806820:	0039883a 	mov	fp,zero
  806824:	00800084 	movi	r2,2
  806828:	003fd306 	br	806778 <__alt_mem_onchip_mem+0xff786778>
  80682c:	07000b44 	movi	fp,45
  806830:	df002785 	stb	fp,158(sp)
  806834:	003a4006 	br	805138 <__alt_mem_onchip_mem+0xff785138>
  806838:	00c00b44 	movi	r3,45
  80683c:	d8c02785 	stb	r3,158(sp)
  806840:	d8802a15 	stw	r2,168(sp)
  806844:	dc802b17 	ldw	r18,172(sp)
  806848:	d8002915 	stw	zero,164(sp)
  80684c:	07000b44 	movi	fp,45
  806850:	003a8006 	br	805254 <__alt_mem_onchip_mem+0xff785254>
  806854:	04002074 	movhi	r16,129
  806858:	84126504 	addi	r16,r16,18836
  80685c:	003f4706 	br	80657c <__alt_mem_onchip_mem+0xff78657c>
  806860:	d8c02d17 	ldw	r3,180(sp)
  806864:	d9002f17 	ldw	r4,188(sp)
  806868:	18800017 	ldw	r2,0(r3)
  80686c:	18c00104 	addi	r3,r3,4
  806870:	d8c02d15 	stw	r3,180(sp)
  806874:	11000015 	stw	r4,0(r2)
  806878:	0038dd06 	br	804bf0 <__alt_mem_onchip_mem+0xff784bf0>
  80687c:	dd802617 	ldw	r22,152(sp)
  806880:	00bfff44 	movi	r2,-3
  806884:	b0801c16 	blt	r22,r2,8068f8 <___vfprintf_internal_r+0x1de8>
  806888:	d9402917 	ldw	r5,164(sp)
  80688c:	2d801a16 	blt	r5,r22,8068f8 <___vfprintf_internal_r+0x1de8>
  806890:	dd803215 	stw	r22,200(sp)
  806894:	003e8906 	br	8062bc <__alt_mem_onchip_mem+0xff7862bc>
  806898:	01002074 	movhi	r4,129
  80689c:	21127284 	addi	r4,r4,18890
  8068a0:	d9002b15 	stw	r4,172(sp)
  8068a4:	003c9106 	br	805aec <__alt_mem_onchip_mem+0xff785aec>
  8068a8:	e005883a 	mov	r2,fp
  8068ac:	003e7906 	br	806294 <__alt_mem_onchip_mem+0xff786294>
  8068b0:	d9402917 	ldw	r5,164(sp)
  8068b4:	df002783 	ldbu	fp,158(sp)
  8068b8:	dcc02d15 	stw	r19,180(sp)
  8068bc:	d9402a15 	stw	r5,168(sp)
  8068c0:	d9402e15 	stw	r5,184(sp)
  8068c4:	d8002915 	stw	zero,164(sp)
  8068c8:	d8003215 	stw	zero,200(sp)
  8068cc:	003a5d06 	br	805244 <__alt_mem_onchip_mem+0xff785244>
  8068d0:	9080004c 	andi	r2,r18,1
  8068d4:	0039883a 	mov	fp,zero
  8068d8:	10000426 	beq	r2,zero,8068ec <___vfprintf_internal_r+0x1ddc>
  8068dc:	00800c04 	movi	r2,48
  8068e0:	dc001dc4 	addi	r16,sp,119
  8068e4:	d8801dc5 	stb	r2,119(sp)
  8068e8:	003b8006 	br	8056ec <__alt_mem_onchip_mem+0xff7856ec>
  8068ec:	d8002e15 	stw	zero,184(sp)
  8068f0:	dc001e04 	addi	r16,sp,120
  8068f4:	003a4d06 	br	80522c <__alt_mem_onchip_mem+0xff78522c>
  8068f8:	8c7fff84 	addi	r17,r17,-2
  8068fc:	b5bfffc4 	addi	r22,r22,-1
  806900:	dd802615 	stw	r22,152(sp)
  806904:	dc4022c5 	stb	r17,139(sp)
  806908:	b000bf16 	blt	r22,zero,806c08 <___vfprintf_internal_r+0x20f8>
  80690c:	00800ac4 	movi	r2,43
  806910:	d8802305 	stb	r2,140(sp)
  806914:	00800244 	movi	r2,9
  806918:	15807016 	blt	r2,r22,806adc <___vfprintf_internal_r+0x1fcc>
  80691c:	00800c04 	movi	r2,48
  806920:	b5800c04 	addi	r22,r22,48
  806924:	d8802345 	stb	r2,141(sp)
  806928:	dd802385 	stb	r22,142(sp)
  80692c:	d88023c4 	addi	r2,sp,143
  806930:	df0022c4 	addi	fp,sp,139
  806934:	d8c03317 	ldw	r3,204(sp)
  806938:	1739c83a 	sub	fp,r2,fp
  80693c:	d9003317 	ldw	r4,204(sp)
  806940:	e0c7883a 	add	r3,fp,r3
  806944:	df003a15 	stw	fp,232(sp)
  806948:	d8c02e15 	stw	r3,184(sp)
  80694c:	00800044 	movi	r2,1
  806950:	1100b30e 	bge	r2,r4,806c20 <___vfprintf_internal_r+0x2110>
  806954:	d8c02e17 	ldw	r3,184(sp)
  806958:	18c00044 	addi	r3,r3,1
  80695c:	d8c02e15 	stw	r3,184(sp)
  806960:	1805883a 	mov	r2,r3
  806964:	1800ac16 	blt	r3,zero,806c18 <___vfprintf_internal_r+0x2108>
  806968:	d8003215 	stw	zero,200(sp)
  80696c:	003e5d06 	br	8062e4 <__alt_mem_onchip_mem+0xff7862e4>
  806970:	d9002c17 	ldw	r4,176(sp)
  806974:	d9801e04 	addi	r6,sp,120
  806978:	b80b883a 	mov	r5,r23
  80697c:	080b8580 	call	80b858 <__sprint_r>
  806980:	1039651e 	bne	r2,zero,804f18 <__alt_mem_onchip_mem+0xff784f18>
  806984:	dc402617 	ldw	r17,152(sp)
  806988:	d8c02017 	ldw	r3,128(sp)
  80698c:	d8801f17 	ldw	r2,124(sp)
  806990:	da000404 	addi	r8,sp,16
  806994:	003ed606 	br	8064f0 <__alt_mem_onchip_mem+0xff7864f0>
  806998:	582b883a 	mov	r21,r11
  80699c:	d8002915 	stw	zero,164(sp)
  8069a0:	0038bd06 	br	804c98 <__alt_mem_onchip_mem+0xff784c98>
  8069a4:	d8802917 	ldw	r2,164(sp)
  8069a8:	103e071e 	bne	r2,zero,8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  8069ac:	dc002915 	stw	r16,164(sp)
  8069b0:	003e0506 	br	8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  8069b4:	d9002917 	ldw	r4,164(sp)
  8069b8:	20c00044 	addi	r3,r4,1
  8069bc:	003e0f06 	br	8061fc <__alt_mem_onchip_mem+0xff7861fc>
  8069c0:	01400184 	movi	r5,6
  8069c4:	d9402915 	stw	r5,164(sp)
  8069c8:	003dff06 	br	8061c8 <__alt_mem_onchip_mem+0xff7861c8>
  8069cc:	d8802104 	addi	r2,sp,132
  8069d0:	d8800315 	stw	r2,12(sp)
  8069d4:	d8802504 	addi	r2,sp,148
  8069d8:	d8800215 	stw	r2,8(sp)
  8069dc:	d8802604 	addi	r2,sp,152
  8069e0:	d8800115 	stw	r2,4(sp)
  8069e4:	d8802917 	ldw	r2,164(sp)
  8069e8:	d9403617 	ldw	r5,216(sp)
  8069ec:	d9002c17 	ldw	r4,176(sp)
  8069f0:	d8800015 	stw	r2,0(sp)
  8069f4:	01c000c4 	movi	r7,3
  8069f8:	980d883a 	mov	r6,r19
  8069fc:	da003d15 	stw	r8,244(sp)
  806a00:	08073400 	call	807340 <_dtoa_r>
  806a04:	d8c02917 	ldw	r3,164(sp)
  806a08:	da003d17 	ldw	r8,244(sp)
  806a0c:	1021883a 	mov	r16,r2
  806a10:	10f9883a 	add	fp,r2,r3
  806a14:	81000007 	ldb	r4,0(r16)
  806a18:	00800c04 	movi	r2,48
  806a1c:	20805e26 	beq	r4,r2,806b98 <___vfprintf_internal_r+0x2088>
  806a20:	d8c02617 	ldw	r3,152(sp)
  806a24:	e0f9883a 	add	fp,fp,r3
  806a28:	003e0a06 	br	806254 <__alt_mem_onchip_mem+0xff786254>
  806a2c:	00c00b44 	movi	r3,45
  806a30:	24e0003c 	xorhi	r19,r4,32768
  806a34:	d8c02a05 	stb	r3,168(sp)
  806a38:	003de906 	br	8061e0 <__alt_mem_onchip_mem+0xff7861e0>
  806a3c:	d8c03217 	ldw	r3,200(sp)
  806a40:	00c07a0e 	bge	zero,r3,806c2c <___vfprintf_internal_r+0x211c>
  806a44:	00800044 	movi	r2,1
  806a48:	d9003317 	ldw	r4,204(sp)
  806a4c:	1105883a 	add	r2,r2,r4
  806a50:	d8802e15 	stw	r2,184(sp)
  806a54:	10004e16 	blt	r2,zero,806b90 <___vfprintf_internal_r+0x2080>
  806a58:	044019c4 	movi	r17,103
  806a5c:	003e2106 	br	8062e4 <__alt_mem_onchip_mem+0xff7862e4>
  806a60:	d9002917 	ldw	r4,164(sp)
  806a64:	d8802104 	addi	r2,sp,132
  806a68:	d8800315 	stw	r2,12(sp)
  806a6c:	d9000015 	stw	r4,0(sp)
  806a70:	d8802504 	addi	r2,sp,148
  806a74:	d9403617 	ldw	r5,216(sp)
  806a78:	d9002c17 	ldw	r4,176(sp)
  806a7c:	d8800215 	stw	r2,8(sp)
  806a80:	d8802604 	addi	r2,sp,152
  806a84:	d8800115 	stw	r2,4(sp)
  806a88:	01c000c4 	movi	r7,3
  806a8c:	980d883a 	mov	r6,r19
  806a90:	da003d15 	stw	r8,244(sp)
  806a94:	08073400 	call	807340 <_dtoa_r>
  806a98:	d8c02917 	ldw	r3,164(sp)
  806a9c:	da003d17 	ldw	r8,244(sp)
  806aa0:	1021883a 	mov	r16,r2
  806aa4:	00801184 	movi	r2,70
  806aa8:	80f9883a 	add	fp,r16,r3
  806aac:	88bfd926 	beq	r17,r2,806a14 <__alt_mem_onchip_mem+0xff786a14>
  806ab0:	003de806 	br	806254 <__alt_mem_onchip_mem+0xff786254>
  806ab4:	d9002917 	ldw	r4,164(sp)
  806ab8:	00c04d0e 	bge	zero,r3,806bf0 <___vfprintf_internal_r+0x20e0>
  806abc:	2000441e 	bne	r4,zero,806bd0 <___vfprintf_internal_r+0x20c0>
  806ac0:	9480004c 	andi	r18,r18,1
  806ac4:	9000421e 	bne	r18,zero,806bd0 <___vfprintf_internal_r+0x20c0>
  806ac8:	1805883a 	mov	r2,r3
  806acc:	18007016 	blt	r3,zero,806c90 <___vfprintf_internal_r+0x2180>
  806ad0:	d8c03217 	ldw	r3,200(sp)
  806ad4:	d8c02e15 	stw	r3,184(sp)
  806ad8:	003e0206 	br	8062e4 <__alt_mem_onchip_mem+0xff7862e4>
  806adc:	df0022c4 	addi	fp,sp,139
  806ae0:	dc002915 	stw	r16,164(sp)
  806ae4:	4027883a 	mov	r19,r8
  806ae8:	e021883a 	mov	r16,fp
  806aec:	b009883a 	mov	r4,r22
  806af0:	01400284 	movi	r5,10
  806af4:	080de900 	call	80de90 <__modsi3>
  806af8:	10800c04 	addi	r2,r2,48
  806afc:	843fffc4 	addi	r16,r16,-1
  806b00:	b009883a 	mov	r4,r22
  806b04:	01400284 	movi	r5,10
  806b08:	80800005 	stb	r2,0(r16)
  806b0c:	080de0c0 	call	80de0c <__divsi3>
  806b10:	102d883a 	mov	r22,r2
  806b14:	00800244 	movi	r2,9
  806b18:	15bff416 	blt	r2,r22,806aec <__alt_mem_onchip_mem+0xff786aec>
  806b1c:	9811883a 	mov	r8,r19
  806b20:	b0800c04 	addi	r2,r22,48
  806b24:	8027883a 	mov	r19,r16
  806b28:	997fffc4 	addi	r5,r19,-1
  806b2c:	98bfffc5 	stb	r2,-1(r19)
  806b30:	dc002917 	ldw	r16,164(sp)
  806b34:	2f006a2e 	bgeu	r5,fp,806ce0 <___vfprintf_internal_r+0x21d0>
  806b38:	d9c02384 	addi	r7,sp,142
  806b3c:	3ccfc83a 	sub	r7,r7,r19
  806b40:	d9002344 	addi	r4,sp,141
  806b44:	e1cf883a 	add	r7,fp,r7
  806b48:	00000106 	br	806b50 <___vfprintf_internal_r+0x2040>
  806b4c:	28800003 	ldbu	r2,0(r5)
  806b50:	20800005 	stb	r2,0(r4)
  806b54:	21000044 	addi	r4,r4,1
  806b58:	29400044 	addi	r5,r5,1
  806b5c:	393ffb1e 	bne	r7,r4,806b4c <__alt_mem_onchip_mem+0xff786b4c>
  806b60:	d8802304 	addi	r2,sp,140
  806b64:	14c5c83a 	sub	r2,r2,r19
  806b68:	d8c02344 	addi	r3,sp,141
  806b6c:	1885883a 	add	r2,r3,r2
  806b70:	003f7006 	br	806934 <__alt_mem_onchip_mem+0xff786934>
  806b74:	0005883a 	mov	r2,zero
  806b78:	003f0f06 	br	8067b8 <__alt_mem_onchip_mem+0xff7867b8>
  806b7c:	d8c03217 	ldw	r3,200(sp)
  806b80:	18c00044 	addi	r3,r3,1
  806b84:	d8c02e15 	stw	r3,184(sp)
  806b88:	1805883a 	mov	r2,r3
  806b8c:	183fb20e 	bge	r3,zero,806a58 <__alt_mem_onchip_mem+0xff786a58>
  806b90:	0005883a 	mov	r2,zero
  806b94:	003fb006 	br	806a58 <__alt_mem_onchip_mem+0xff786a58>
  806b98:	d9003617 	ldw	r4,216(sp)
  806b9c:	000d883a 	mov	r6,zero
  806ba0:	000f883a 	mov	r7,zero
  806ba4:	980b883a 	mov	r5,r19
  806ba8:	d8c03c15 	stw	r3,240(sp)
  806bac:	da003d15 	stw	r8,244(sp)
  806bb0:	080f1540 	call	80f154 <__eqdf2>
  806bb4:	d8c03c17 	ldw	r3,240(sp)
  806bb8:	da003d17 	ldw	r8,244(sp)
  806bbc:	103f9826 	beq	r2,zero,806a20 <__alt_mem_onchip_mem+0xff786a20>
  806bc0:	00800044 	movi	r2,1
  806bc4:	10c7c83a 	sub	r3,r2,r3
  806bc8:	d8c02615 	stw	r3,152(sp)
  806bcc:	003f9506 	br	806a24 <__alt_mem_onchip_mem+0xff786a24>
  806bd0:	d9002917 	ldw	r4,164(sp)
  806bd4:	d8c03217 	ldw	r3,200(sp)
  806bd8:	20800044 	addi	r2,r4,1
  806bdc:	1885883a 	add	r2,r3,r2
  806be0:	d8802e15 	stw	r2,184(sp)
  806be4:	103dbf0e 	bge	r2,zero,8062e4 <__alt_mem_onchip_mem+0xff7862e4>
  806be8:	0005883a 	mov	r2,zero
  806bec:	003dbd06 	br	8062e4 <__alt_mem_onchip_mem+0xff7862e4>
  806bf0:	2000211e 	bne	r4,zero,806c78 <___vfprintf_internal_r+0x2168>
  806bf4:	9480004c 	andi	r18,r18,1
  806bf8:	90001f1e 	bne	r18,zero,806c78 <___vfprintf_internal_r+0x2168>
  806bfc:	00800044 	movi	r2,1
  806c00:	d8802e15 	stw	r2,184(sp)
  806c04:	003db706 	br	8062e4 <__alt_mem_onchip_mem+0xff7862e4>
  806c08:	00800b44 	movi	r2,45
  806c0c:	05adc83a 	sub	r22,zero,r22
  806c10:	d8802305 	stb	r2,140(sp)
  806c14:	003f3f06 	br	806914 <__alt_mem_onchip_mem+0xff786914>
  806c18:	0005883a 	mov	r2,zero
  806c1c:	003f5206 	br	806968 <__alt_mem_onchip_mem+0xff786968>
  806c20:	90a4703a 	and	r18,r18,r2
  806c24:	903f4e26 	beq	r18,zero,806960 <__alt_mem_onchip_mem+0xff786960>
  806c28:	003f4a06 	br	806954 <__alt_mem_onchip_mem+0xff786954>
  806c2c:	00800084 	movi	r2,2
  806c30:	10c5c83a 	sub	r2,r2,r3
  806c34:	003f8406 	br	806a48 <__alt_mem_onchip_mem+0xff786a48>
  806c38:	d8802d17 	ldw	r2,180(sp)
  806c3c:	d9002d17 	ldw	r4,180(sp)
  806c40:	ac400043 	ldbu	r17,1(r21)
  806c44:	10800017 	ldw	r2,0(r2)
  806c48:	582b883a 	mov	r21,r11
  806c4c:	d8802915 	stw	r2,164(sp)
  806c50:	20800104 	addi	r2,r4,4
  806c54:	d9002917 	ldw	r4,164(sp)
  806c58:	d8802d15 	stw	r2,180(sp)
  806c5c:	203e7a0e 	bge	r4,zero,806648 <__alt_mem_onchip_mem+0xff786648>
  806c60:	8c403fcc 	andi	r17,r17,255
  806c64:	00bfffc4 	movi	r2,-1
  806c68:	8c40201c 	xori	r17,r17,128
  806c6c:	d8802915 	stw	r2,164(sp)
  806c70:	8c7fe004 	addi	r17,r17,-128
  806c74:	00380706 	br	804c94 <__alt_mem_onchip_mem+0xff784c94>
  806c78:	d8c02917 	ldw	r3,164(sp)
  806c7c:	18c00084 	addi	r3,r3,2
  806c80:	d8c02e15 	stw	r3,184(sp)
  806c84:	1805883a 	mov	r2,r3
  806c88:	183d960e 	bge	r3,zero,8062e4 <__alt_mem_onchip_mem+0xff7862e4>
  806c8c:	003fd606 	br	806be8 <__alt_mem_onchip_mem+0xff786be8>
  806c90:	0005883a 	mov	r2,zero
  806c94:	003f8e06 	br	806ad0 <__alt_mem_onchip_mem+0xff786ad0>
  806c98:	9080004c 	andi	r2,r18,1
  806c9c:	103f811e 	bne	r2,zero,806aa4 <__alt_mem_onchip_mem+0xff786aa4>
  806ca0:	d8802117 	ldw	r2,132(sp)
  806ca4:	1405c83a 	sub	r2,r2,r16
  806ca8:	d8803315 	stw	r2,204(sp)
  806cac:	b47ef326 	beq	r22,r17,80687c <__alt_mem_onchip_mem+0xff78687c>
  806cb0:	dd802617 	ldw	r22,152(sp)
  806cb4:	003f1106 	br	8068fc <__alt_mem_onchip_mem+0xff7868fc>
  806cb8:	d9c02785 	stb	r7,158(sp)
  806cbc:	00390406 	br	8050d0 <__alt_mem_onchip_mem+0xff7850d0>
  806cc0:	d9c02785 	stb	r7,158(sp)
  806cc4:	0038d306 	br	805014 <__alt_mem_onchip_mem+0xff785014>
  806cc8:	d9c02785 	stb	r7,158(sp)
  806ccc:	003a6106 	br	805654 <__alt_mem_onchip_mem+0xff785654>
  806cd0:	d9c02785 	stb	r7,158(sp)
  806cd4:	003af806 	br	8058b8 <__alt_mem_onchip_mem+0xff7858b8>
  806cd8:	0005883a 	mov	r2,zero
  806cdc:	003d7e06 	br	8062d8 <__alt_mem_onchip_mem+0xff7862d8>
  806ce0:	d8802344 	addi	r2,sp,141
  806ce4:	003f1306 	br	806934 <__alt_mem_onchip_mem+0xff786934>
  806ce8:	d9c02785 	stb	r7,158(sp)
  806cec:	00392306 	br	80517c <__alt_mem_onchip_mem+0xff78517c>
  806cf0:	d9c02785 	stb	r7,158(sp)
  806cf4:	003aa906 	br	80579c <__alt_mem_onchip_mem+0xff78579c>
  806cf8:	d9c02785 	stb	r7,158(sp)
  806cfc:	003a3d06 	br	8055f4 <__alt_mem_onchip_mem+0xff7855f4>
  806d00:	d9c02785 	stb	r7,158(sp)
  806d04:	003aca06 	br	805830 <__alt_mem_onchip_mem+0xff785830>

00806d08 <__vfprintf_internal>:
  806d08:	00802074 	movhi	r2,129
  806d0c:	109aef04 	addi	r2,r2,27580
  806d10:	300f883a 	mov	r7,r6
  806d14:	280d883a 	mov	r6,r5
  806d18:	200b883a 	mov	r5,r4
  806d1c:	11000017 	ldw	r4,0(r2)
  806d20:	0804b101 	jmpi	804b10 <___vfprintf_internal_r>

00806d24 <__sbprintf>:
  806d24:	2880030b 	ldhu	r2,12(r5)
  806d28:	2ac01917 	ldw	r11,100(r5)
  806d2c:	2a80038b 	ldhu	r10,14(r5)
  806d30:	2a400717 	ldw	r9,28(r5)
  806d34:	2a000917 	ldw	r8,36(r5)
  806d38:	defee204 	addi	sp,sp,-1144
  806d3c:	00c10004 	movi	r3,1024
  806d40:	dc011a15 	stw	r16,1128(sp)
  806d44:	10bfff4c 	andi	r2,r2,65533
  806d48:	2821883a 	mov	r16,r5
  806d4c:	d8cb883a 	add	r5,sp,r3
  806d50:	dc811c15 	stw	r18,1136(sp)
  806d54:	dc411b15 	stw	r17,1132(sp)
  806d58:	dfc11d15 	stw	ra,1140(sp)
  806d5c:	2025883a 	mov	r18,r4
  806d60:	d881030d 	sth	r2,1036(sp)
  806d64:	dac11915 	stw	r11,1124(sp)
  806d68:	da81038d 	sth	r10,1038(sp)
  806d6c:	da410715 	stw	r9,1052(sp)
  806d70:	da010915 	stw	r8,1060(sp)
  806d74:	dec10015 	stw	sp,1024(sp)
  806d78:	dec10415 	stw	sp,1040(sp)
  806d7c:	d8c10215 	stw	r3,1032(sp)
  806d80:	d8c10515 	stw	r3,1044(sp)
  806d84:	d8010615 	stw	zero,1048(sp)
  806d88:	0804b100 	call	804b10 <___vfprintf_internal_r>
  806d8c:	1023883a 	mov	r17,r2
  806d90:	10000416 	blt	r2,zero,806da4 <__sbprintf+0x80>
  806d94:	d9410004 	addi	r5,sp,1024
  806d98:	9009883a 	mov	r4,r18
  806d9c:	0808be40 	call	808be4 <_fflush_r>
  806da0:	10000d1e 	bne	r2,zero,806dd8 <__sbprintf+0xb4>
  806da4:	d881030b 	ldhu	r2,1036(sp)
  806da8:	1080100c 	andi	r2,r2,64
  806dac:	10000326 	beq	r2,zero,806dbc <__sbprintf+0x98>
  806db0:	8080030b 	ldhu	r2,12(r16)
  806db4:	10801014 	ori	r2,r2,64
  806db8:	8080030d 	sth	r2,12(r16)
  806dbc:	8805883a 	mov	r2,r17
  806dc0:	dfc11d17 	ldw	ra,1140(sp)
  806dc4:	dc811c17 	ldw	r18,1136(sp)
  806dc8:	dc411b17 	ldw	r17,1132(sp)
  806dcc:	dc011a17 	ldw	r16,1128(sp)
  806dd0:	dec11e04 	addi	sp,sp,1144
  806dd4:	f800283a 	ret
  806dd8:	047fffc4 	movi	r17,-1
  806ddc:	003ff106 	br	806da4 <__alt_mem_onchip_mem+0xff786da4>

00806de0 <__swbuf_r>:
  806de0:	defffb04 	addi	sp,sp,-20
  806de4:	dcc00315 	stw	r19,12(sp)
  806de8:	dc800215 	stw	r18,8(sp)
  806dec:	dc000015 	stw	r16,0(sp)
  806df0:	dfc00415 	stw	ra,16(sp)
  806df4:	dc400115 	stw	r17,4(sp)
  806df8:	2025883a 	mov	r18,r4
  806dfc:	2827883a 	mov	r19,r5
  806e00:	3021883a 	mov	r16,r6
  806e04:	20000226 	beq	r4,zero,806e10 <__swbuf_r+0x30>
  806e08:	20800e17 	ldw	r2,56(r4)
  806e0c:	10004226 	beq	r2,zero,806f18 <__swbuf_r+0x138>
  806e10:	80800617 	ldw	r2,24(r16)
  806e14:	8100030b 	ldhu	r4,12(r16)
  806e18:	80800215 	stw	r2,8(r16)
  806e1c:	2080020c 	andi	r2,r4,8
  806e20:	10003626 	beq	r2,zero,806efc <__swbuf_r+0x11c>
  806e24:	80c00417 	ldw	r3,16(r16)
  806e28:	18003426 	beq	r3,zero,806efc <__swbuf_r+0x11c>
  806e2c:	2088000c 	andi	r2,r4,8192
  806e30:	9c403fcc 	andi	r17,r19,255
  806e34:	10001a26 	beq	r2,zero,806ea0 <__swbuf_r+0xc0>
  806e38:	80800017 	ldw	r2,0(r16)
  806e3c:	81000517 	ldw	r4,20(r16)
  806e40:	10c7c83a 	sub	r3,r2,r3
  806e44:	1900200e 	bge	r3,r4,806ec8 <__swbuf_r+0xe8>
  806e48:	18c00044 	addi	r3,r3,1
  806e4c:	81000217 	ldw	r4,8(r16)
  806e50:	11400044 	addi	r5,r2,1
  806e54:	81400015 	stw	r5,0(r16)
  806e58:	213fffc4 	addi	r4,r4,-1
  806e5c:	81000215 	stw	r4,8(r16)
  806e60:	14c00005 	stb	r19,0(r2)
  806e64:	80800517 	ldw	r2,20(r16)
  806e68:	10c01e26 	beq	r2,r3,806ee4 <__swbuf_r+0x104>
  806e6c:	8080030b 	ldhu	r2,12(r16)
  806e70:	1080004c 	andi	r2,r2,1
  806e74:	10000226 	beq	r2,zero,806e80 <__swbuf_r+0xa0>
  806e78:	00800284 	movi	r2,10
  806e7c:	88801926 	beq	r17,r2,806ee4 <__swbuf_r+0x104>
  806e80:	8805883a 	mov	r2,r17
  806e84:	dfc00417 	ldw	ra,16(sp)
  806e88:	dcc00317 	ldw	r19,12(sp)
  806e8c:	dc800217 	ldw	r18,8(sp)
  806e90:	dc400117 	ldw	r17,4(sp)
  806e94:	dc000017 	ldw	r16,0(sp)
  806e98:	dec00504 	addi	sp,sp,20
  806e9c:	f800283a 	ret
  806ea0:	81401917 	ldw	r5,100(r16)
  806ea4:	00b7ffc4 	movi	r2,-8193
  806ea8:	21080014 	ori	r4,r4,8192
  806eac:	2884703a 	and	r2,r5,r2
  806eb0:	80801915 	stw	r2,100(r16)
  806eb4:	80800017 	ldw	r2,0(r16)
  806eb8:	8100030d 	sth	r4,12(r16)
  806ebc:	81000517 	ldw	r4,20(r16)
  806ec0:	10c7c83a 	sub	r3,r2,r3
  806ec4:	193fe016 	blt	r3,r4,806e48 <__alt_mem_onchip_mem+0xff786e48>
  806ec8:	800b883a 	mov	r5,r16
  806ecc:	9009883a 	mov	r4,r18
  806ed0:	0808be40 	call	808be4 <_fflush_r>
  806ed4:	1000071e 	bne	r2,zero,806ef4 <__swbuf_r+0x114>
  806ed8:	80800017 	ldw	r2,0(r16)
  806edc:	00c00044 	movi	r3,1
  806ee0:	003fda06 	br	806e4c <__alt_mem_onchip_mem+0xff786e4c>
  806ee4:	800b883a 	mov	r5,r16
  806ee8:	9009883a 	mov	r4,r18
  806eec:	0808be40 	call	808be4 <_fflush_r>
  806ef0:	103fe326 	beq	r2,zero,806e80 <__alt_mem_onchip_mem+0xff786e80>
  806ef4:	00bfffc4 	movi	r2,-1
  806ef8:	003fe206 	br	806e84 <__alt_mem_onchip_mem+0xff786e84>
  806efc:	800b883a 	mov	r5,r16
  806f00:	9009883a 	mov	r4,r18
  806f04:	0806f980 	call	806f98 <__swsetup_r>
  806f08:	103ffa1e 	bne	r2,zero,806ef4 <__alt_mem_onchip_mem+0xff786ef4>
  806f0c:	8100030b 	ldhu	r4,12(r16)
  806f10:	80c00417 	ldw	r3,16(r16)
  806f14:	003fc506 	br	806e2c <__alt_mem_onchip_mem+0xff786e2c>
  806f18:	0808fc00 	call	808fc0 <__sinit>
  806f1c:	003fbc06 	br	806e10 <__alt_mem_onchip_mem+0xff786e10>

00806f20 <__swbuf>:
  806f20:	00802074 	movhi	r2,129
  806f24:	109aef04 	addi	r2,r2,27580
  806f28:	280d883a 	mov	r6,r5
  806f2c:	200b883a 	mov	r5,r4
  806f30:	11000017 	ldw	r4,0(r2)
  806f34:	0806de01 	jmpi	806de0 <__swbuf_r>

00806f38 <_write_r>:
  806f38:	defffd04 	addi	sp,sp,-12
  806f3c:	2805883a 	mov	r2,r5
  806f40:	dc000015 	stw	r16,0(sp)
  806f44:	040020b4 	movhi	r16,130
  806f48:	dc400115 	stw	r17,4(sp)
  806f4c:	300b883a 	mov	r5,r6
  806f50:	84228a04 	addi	r16,r16,-30168
  806f54:	2023883a 	mov	r17,r4
  806f58:	380d883a 	mov	r6,r7
  806f5c:	1009883a 	mov	r4,r2
  806f60:	dfc00215 	stw	ra,8(sp)
  806f64:	80000015 	stw	zero,0(r16)
  806f68:	08113ec0 	call	8113ec <write>
  806f6c:	00ffffc4 	movi	r3,-1
  806f70:	10c00526 	beq	r2,r3,806f88 <_write_r+0x50>
  806f74:	dfc00217 	ldw	ra,8(sp)
  806f78:	dc400117 	ldw	r17,4(sp)
  806f7c:	dc000017 	ldw	r16,0(sp)
  806f80:	dec00304 	addi	sp,sp,12
  806f84:	f800283a 	ret
  806f88:	80c00017 	ldw	r3,0(r16)
  806f8c:	183ff926 	beq	r3,zero,806f74 <__alt_mem_onchip_mem+0xff786f74>
  806f90:	88c00015 	stw	r3,0(r17)
  806f94:	003ff706 	br	806f74 <__alt_mem_onchip_mem+0xff786f74>

00806f98 <__swsetup_r>:
  806f98:	00802074 	movhi	r2,129
  806f9c:	defffd04 	addi	sp,sp,-12
  806fa0:	109aef04 	addi	r2,r2,27580
  806fa4:	dc400115 	stw	r17,4(sp)
  806fa8:	2023883a 	mov	r17,r4
  806fac:	11000017 	ldw	r4,0(r2)
  806fb0:	dc000015 	stw	r16,0(sp)
  806fb4:	dfc00215 	stw	ra,8(sp)
  806fb8:	2821883a 	mov	r16,r5
  806fbc:	20000226 	beq	r4,zero,806fc8 <__swsetup_r+0x30>
  806fc0:	20800e17 	ldw	r2,56(r4)
  806fc4:	10003126 	beq	r2,zero,80708c <__swsetup_r+0xf4>
  806fc8:	8080030b 	ldhu	r2,12(r16)
  806fcc:	10c0020c 	andi	r3,r2,8
  806fd0:	1009883a 	mov	r4,r2
  806fd4:	18000f26 	beq	r3,zero,807014 <__swsetup_r+0x7c>
  806fd8:	80c00417 	ldw	r3,16(r16)
  806fdc:	18001526 	beq	r3,zero,807034 <__swsetup_r+0x9c>
  806fe0:	1100004c 	andi	r4,r2,1
  806fe4:	20001c1e 	bne	r4,zero,807058 <__swsetup_r+0xc0>
  806fe8:	1080008c 	andi	r2,r2,2
  806fec:	1000291e 	bne	r2,zero,807094 <__swsetup_r+0xfc>
  806ff0:	80800517 	ldw	r2,20(r16)
  806ff4:	80800215 	stw	r2,8(r16)
  806ff8:	18001c26 	beq	r3,zero,80706c <__swsetup_r+0xd4>
  806ffc:	0005883a 	mov	r2,zero
  807000:	dfc00217 	ldw	ra,8(sp)
  807004:	dc400117 	ldw	r17,4(sp)
  807008:	dc000017 	ldw	r16,0(sp)
  80700c:	dec00304 	addi	sp,sp,12
  807010:	f800283a 	ret
  807014:	2080040c 	andi	r2,r4,16
  807018:	10002e26 	beq	r2,zero,8070d4 <__swsetup_r+0x13c>
  80701c:	2080010c 	andi	r2,r4,4
  807020:	10001e1e 	bne	r2,zero,80709c <__swsetup_r+0x104>
  807024:	80c00417 	ldw	r3,16(r16)
  807028:	20800214 	ori	r2,r4,8
  80702c:	8080030d 	sth	r2,12(r16)
  807030:	183feb1e 	bne	r3,zero,806fe0 <__alt_mem_onchip_mem+0xff786fe0>
  807034:	1100a00c 	andi	r4,r2,640
  807038:	01408004 	movi	r5,512
  80703c:	217fe826 	beq	r4,r5,806fe0 <__alt_mem_onchip_mem+0xff786fe0>
  807040:	800b883a 	mov	r5,r16
  807044:	8809883a 	mov	r4,r17
  807048:	08039000 	call	803900 <__smakebuf_r>
  80704c:	8080030b 	ldhu	r2,12(r16)
  807050:	80c00417 	ldw	r3,16(r16)
  807054:	003fe206 	br	806fe0 <__alt_mem_onchip_mem+0xff786fe0>
  807058:	80800517 	ldw	r2,20(r16)
  80705c:	80000215 	stw	zero,8(r16)
  807060:	0085c83a 	sub	r2,zero,r2
  807064:	80800615 	stw	r2,24(r16)
  807068:	183fe41e 	bne	r3,zero,806ffc <__alt_mem_onchip_mem+0xff786ffc>
  80706c:	80c0030b 	ldhu	r3,12(r16)
  807070:	0005883a 	mov	r2,zero
  807074:	1900200c 	andi	r4,r3,128
  807078:	203fe126 	beq	r4,zero,807000 <__alt_mem_onchip_mem+0xff787000>
  80707c:	18c01014 	ori	r3,r3,64
  807080:	80c0030d 	sth	r3,12(r16)
  807084:	00bfffc4 	movi	r2,-1
  807088:	003fdd06 	br	807000 <__alt_mem_onchip_mem+0xff787000>
  80708c:	0808fc00 	call	808fc0 <__sinit>
  807090:	003fcd06 	br	806fc8 <__alt_mem_onchip_mem+0xff786fc8>
  807094:	0005883a 	mov	r2,zero
  807098:	003fd606 	br	806ff4 <__alt_mem_onchip_mem+0xff786ff4>
  80709c:	81400c17 	ldw	r5,48(r16)
  8070a0:	28000626 	beq	r5,zero,8070bc <__swsetup_r+0x124>
  8070a4:	80801004 	addi	r2,r16,64
  8070a8:	28800326 	beq	r5,r2,8070b8 <__swsetup_r+0x120>
  8070ac:	8809883a 	mov	r4,r17
  8070b0:	08091e00 	call	8091e0 <_free_r>
  8070b4:	8100030b 	ldhu	r4,12(r16)
  8070b8:	80000c15 	stw	zero,48(r16)
  8070bc:	80c00417 	ldw	r3,16(r16)
  8070c0:	00bff6c4 	movi	r2,-37
  8070c4:	1108703a 	and	r4,r2,r4
  8070c8:	80000115 	stw	zero,4(r16)
  8070cc:	80c00015 	stw	r3,0(r16)
  8070d0:	003fd506 	br	807028 <__alt_mem_onchip_mem+0xff787028>
  8070d4:	00800244 	movi	r2,9
  8070d8:	88800015 	stw	r2,0(r17)
  8070dc:	20801014 	ori	r2,r4,64
  8070e0:	8080030d 	sth	r2,12(r16)
  8070e4:	00bfffc4 	movi	r2,-1
  8070e8:	003fc506 	br	807000 <__alt_mem_onchip_mem+0xff787000>

008070ec <_close_r>:
  8070ec:	defffd04 	addi	sp,sp,-12
  8070f0:	dc000015 	stw	r16,0(sp)
  8070f4:	040020b4 	movhi	r16,130
  8070f8:	dc400115 	stw	r17,4(sp)
  8070fc:	84228a04 	addi	r16,r16,-30168
  807100:	2023883a 	mov	r17,r4
  807104:	2809883a 	mov	r4,r5
  807108:	dfc00215 	stw	ra,8(sp)
  80710c:	80000015 	stw	zero,0(r16)
  807110:	08106640 	call	810664 <close>
  807114:	00ffffc4 	movi	r3,-1
  807118:	10c00526 	beq	r2,r3,807130 <_close_r+0x44>
  80711c:	dfc00217 	ldw	ra,8(sp)
  807120:	dc400117 	ldw	r17,4(sp)
  807124:	dc000017 	ldw	r16,0(sp)
  807128:	dec00304 	addi	sp,sp,12
  80712c:	f800283a 	ret
  807130:	80c00017 	ldw	r3,0(r16)
  807134:	183ff926 	beq	r3,zero,80711c <__alt_mem_onchip_mem+0xff78711c>
  807138:	88c00015 	stw	r3,0(r17)
  80713c:	003ff706 	br	80711c <__alt_mem_onchip_mem+0xff78711c>

00807140 <quorem>:
  807140:	defff704 	addi	sp,sp,-36
  807144:	dc800215 	stw	r18,8(sp)
  807148:	20800417 	ldw	r2,16(r4)
  80714c:	2c800417 	ldw	r18,16(r5)
  807150:	dfc00815 	stw	ra,32(sp)
  807154:	ddc00715 	stw	r23,28(sp)
  807158:	dd800615 	stw	r22,24(sp)
  80715c:	dd400515 	stw	r21,20(sp)
  807160:	dd000415 	stw	r20,16(sp)
  807164:	dcc00315 	stw	r19,12(sp)
  807168:	dc400115 	stw	r17,4(sp)
  80716c:	dc000015 	stw	r16,0(sp)
  807170:	14807116 	blt	r2,r18,807338 <quorem+0x1f8>
  807174:	94bfffc4 	addi	r18,r18,-1
  807178:	94ad883a 	add	r22,r18,r18
  80717c:	b5ad883a 	add	r22,r22,r22
  807180:	2c400504 	addi	r17,r5,20
  807184:	8da9883a 	add	r20,r17,r22
  807188:	25400504 	addi	r21,r4,20
  80718c:	282f883a 	mov	r23,r5
  807190:	adad883a 	add	r22,r21,r22
  807194:	a1400017 	ldw	r5,0(r20)
  807198:	2021883a 	mov	r16,r4
  80719c:	b1000017 	ldw	r4,0(r22)
  8071a0:	29400044 	addi	r5,r5,1
  8071a4:	080df040 	call	80df04 <__udivsi3>
  8071a8:	1027883a 	mov	r19,r2
  8071ac:	10002c26 	beq	r2,zero,807260 <quorem+0x120>
  8071b0:	a813883a 	mov	r9,r21
  8071b4:	880b883a 	mov	r5,r17
  8071b8:	0009883a 	mov	r4,zero
  8071bc:	000d883a 	mov	r6,zero
  8071c0:	2a000017 	ldw	r8,0(r5)
  8071c4:	49c00017 	ldw	r7,0(r9)
  8071c8:	29400104 	addi	r5,r5,4
  8071cc:	40bfffcc 	andi	r2,r8,65535
  8071d0:	14c5383a 	mul	r2,r2,r19
  8071d4:	4010d43a 	srli	r8,r8,16
  8071d8:	38ffffcc 	andi	r3,r7,65535
  8071dc:	1105883a 	add	r2,r2,r4
  8071e0:	1008d43a 	srli	r4,r2,16
  8071e4:	44d1383a 	mul	r8,r8,r19
  8071e8:	198d883a 	add	r6,r3,r6
  8071ec:	10ffffcc 	andi	r3,r2,65535
  8071f0:	30c7c83a 	sub	r3,r6,r3
  8071f4:	380ed43a 	srli	r7,r7,16
  8071f8:	4105883a 	add	r2,r8,r4
  8071fc:	180dd43a 	srai	r6,r3,16
  807200:	113fffcc 	andi	r4,r2,65535
  807204:	390fc83a 	sub	r7,r7,r4
  807208:	398d883a 	add	r6,r7,r6
  80720c:	300e943a 	slli	r7,r6,16
  807210:	18ffffcc 	andi	r3,r3,65535
  807214:	1008d43a 	srli	r4,r2,16
  807218:	38ceb03a 	or	r7,r7,r3
  80721c:	49c00015 	stw	r7,0(r9)
  807220:	300dd43a 	srai	r6,r6,16
  807224:	4a400104 	addi	r9,r9,4
  807228:	a17fe52e 	bgeu	r20,r5,8071c0 <__alt_mem_onchip_mem+0xff7871c0>
  80722c:	b0800017 	ldw	r2,0(r22)
  807230:	10000b1e 	bne	r2,zero,807260 <quorem+0x120>
  807234:	b0bfff04 	addi	r2,r22,-4
  807238:	a880082e 	bgeu	r21,r2,80725c <quorem+0x11c>
  80723c:	b0ffff17 	ldw	r3,-4(r22)
  807240:	18000326 	beq	r3,zero,807250 <quorem+0x110>
  807244:	00000506 	br	80725c <quorem+0x11c>
  807248:	10c00017 	ldw	r3,0(r2)
  80724c:	1800031e 	bne	r3,zero,80725c <quorem+0x11c>
  807250:	10bfff04 	addi	r2,r2,-4
  807254:	94bfffc4 	addi	r18,r18,-1
  807258:	a8bffb36 	bltu	r21,r2,807248 <__alt_mem_onchip_mem+0xff787248>
  80725c:	84800415 	stw	r18,16(r16)
  807260:	b80b883a 	mov	r5,r23
  807264:	8009883a 	mov	r4,r16
  807268:	080a9140 	call	80a914 <__mcmp>
  80726c:	10002616 	blt	r2,zero,807308 <quorem+0x1c8>
  807270:	9cc00044 	addi	r19,r19,1
  807274:	a805883a 	mov	r2,r21
  807278:	000b883a 	mov	r5,zero
  80727c:	11000017 	ldw	r4,0(r2)
  807280:	89800017 	ldw	r6,0(r17)
  807284:	10800104 	addi	r2,r2,4
  807288:	20ffffcc 	andi	r3,r4,65535
  80728c:	194b883a 	add	r5,r3,r5
  807290:	30ffffcc 	andi	r3,r6,65535
  807294:	28c7c83a 	sub	r3,r5,r3
  807298:	300cd43a 	srli	r6,r6,16
  80729c:	2008d43a 	srli	r4,r4,16
  8072a0:	180bd43a 	srai	r5,r3,16
  8072a4:	18ffffcc 	andi	r3,r3,65535
  8072a8:	2189c83a 	sub	r4,r4,r6
  8072ac:	2149883a 	add	r4,r4,r5
  8072b0:	200c943a 	slli	r6,r4,16
  8072b4:	8c400104 	addi	r17,r17,4
  8072b8:	200bd43a 	srai	r5,r4,16
  8072bc:	30c6b03a 	or	r3,r6,r3
  8072c0:	10ffff15 	stw	r3,-4(r2)
  8072c4:	a47fed2e 	bgeu	r20,r17,80727c <__alt_mem_onchip_mem+0xff78727c>
  8072c8:	9485883a 	add	r2,r18,r18
  8072cc:	1085883a 	add	r2,r2,r2
  8072d0:	a887883a 	add	r3,r21,r2
  8072d4:	18800017 	ldw	r2,0(r3)
  8072d8:	10000b1e 	bne	r2,zero,807308 <quorem+0x1c8>
  8072dc:	18bfff04 	addi	r2,r3,-4
  8072e0:	a880082e 	bgeu	r21,r2,807304 <quorem+0x1c4>
  8072e4:	18ffff17 	ldw	r3,-4(r3)
  8072e8:	18000326 	beq	r3,zero,8072f8 <quorem+0x1b8>
  8072ec:	00000506 	br	807304 <quorem+0x1c4>
  8072f0:	10c00017 	ldw	r3,0(r2)
  8072f4:	1800031e 	bne	r3,zero,807304 <quorem+0x1c4>
  8072f8:	10bfff04 	addi	r2,r2,-4
  8072fc:	94bfffc4 	addi	r18,r18,-1
  807300:	a8bffb36 	bltu	r21,r2,8072f0 <__alt_mem_onchip_mem+0xff7872f0>
  807304:	84800415 	stw	r18,16(r16)
  807308:	9805883a 	mov	r2,r19
  80730c:	dfc00817 	ldw	ra,32(sp)
  807310:	ddc00717 	ldw	r23,28(sp)
  807314:	dd800617 	ldw	r22,24(sp)
  807318:	dd400517 	ldw	r21,20(sp)
  80731c:	dd000417 	ldw	r20,16(sp)
  807320:	dcc00317 	ldw	r19,12(sp)
  807324:	dc800217 	ldw	r18,8(sp)
  807328:	dc400117 	ldw	r17,4(sp)
  80732c:	dc000017 	ldw	r16,0(sp)
  807330:	dec00904 	addi	sp,sp,36
  807334:	f800283a 	ret
  807338:	0005883a 	mov	r2,zero
  80733c:	003ff306 	br	80730c <__alt_mem_onchip_mem+0xff78730c>

00807340 <_dtoa_r>:
  807340:	20801017 	ldw	r2,64(r4)
  807344:	deffde04 	addi	sp,sp,-136
  807348:	df002015 	stw	fp,128(sp)
  80734c:	dcc01b15 	stw	r19,108(sp)
  807350:	dc801a15 	stw	r18,104(sp)
  807354:	dc401915 	stw	r17,100(sp)
  807358:	dc001815 	stw	r16,96(sp)
  80735c:	dfc02115 	stw	ra,132(sp)
  807360:	ddc01f15 	stw	r23,124(sp)
  807364:	dd801e15 	stw	r22,120(sp)
  807368:	dd401d15 	stw	r21,116(sp)
  80736c:	dd001c15 	stw	r20,112(sp)
  807370:	d9c00315 	stw	r7,12(sp)
  807374:	2039883a 	mov	fp,r4
  807378:	3023883a 	mov	r17,r6
  80737c:	2825883a 	mov	r18,r5
  807380:	dc002417 	ldw	r16,144(sp)
  807384:	3027883a 	mov	r19,r6
  807388:	10000826 	beq	r2,zero,8073ac <_dtoa_r+0x6c>
  80738c:	21801117 	ldw	r6,68(r4)
  807390:	00c00044 	movi	r3,1
  807394:	100b883a 	mov	r5,r2
  807398:	1986983a 	sll	r3,r3,r6
  80739c:	11800115 	stw	r6,4(r2)
  8073a0:	10c00215 	stw	r3,8(r2)
  8073a4:	080a0f40 	call	80a0f4 <_Bfree>
  8073a8:	e0001015 	stw	zero,64(fp)
  8073ac:	88002e16 	blt	r17,zero,807468 <_dtoa_r+0x128>
  8073b0:	80000015 	stw	zero,0(r16)
  8073b4:	889ffc2c 	andhi	r2,r17,32752
  8073b8:	00dffc34 	movhi	r3,32752
  8073bc:	10c01c26 	beq	r2,r3,807430 <_dtoa_r+0xf0>
  8073c0:	000d883a 	mov	r6,zero
  8073c4:	000f883a 	mov	r7,zero
  8073c8:	9009883a 	mov	r4,r18
  8073cc:	980b883a 	mov	r5,r19
  8073d0:	080f1540 	call	80f154 <__eqdf2>
  8073d4:	10002b1e 	bne	r2,zero,807484 <_dtoa_r+0x144>
  8073d8:	d9c02317 	ldw	r7,140(sp)
  8073dc:	00800044 	movi	r2,1
  8073e0:	38800015 	stw	r2,0(r7)
  8073e4:	d8802517 	ldw	r2,148(sp)
  8073e8:	10019e26 	beq	r2,zero,807a64 <_dtoa_r+0x724>
  8073ec:	d8c02517 	ldw	r3,148(sp)
  8073f0:	00802074 	movhi	r2,129
  8073f4:	10927244 	addi	r2,r2,18889
  8073f8:	18800015 	stw	r2,0(r3)
  8073fc:	10bfffc4 	addi	r2,r2,-1
  807400:	dfc02117 	ldw	ra,132(sp)
  807404:	df002017 	ldw	fp,128(sp)
  807408:	ddc01f17 	ldw	r23,124(sp)
  80740c:	dd801e17 	ldw	r22,120(sp)
  807410:	dd401d17 	ldw	r21,116(sp)
  807414:	dd001c17 	ldw	r20,112(sp)
  807418:	dcc01b17 	ldw	r19,108(sp)
  80741c:	dc801a17 	ldw	r18,104(sp)
  807420:	dc401917 	ldw	r17,100(sp)
  807424:	dc001817 	ldw	r16,96(sp)
  807428:	dec02204 	addi	sp,sp,136
  80742c:	f800283a 	ret
  807430:	d8c02317 	ldw	r3,140(sp)
  807434:	0089c3c4 	movi	r2,9999
  807438:	18800015 	stw	r2,0(r3)
  80743c:	90017726 	beq	r18,zero,807a1c <_dtoa_r+0x6dc>
  807440:	00802074 	movhi	r2,129
  807444:	10927e04 	addi	r2,r2,18936
  807448:	d9002517 	ldw	r4,148(sp)
  80744c:	203fec26 	beq	r4,zero,807400 <__alt_mem_onchip_mem+0xff787400>
  807450:	10c000c7 	ldb	r3,3(r2)
  807454:	1801781e 	bne	r3,zero,807a38 <_dtoa_r+0x6f8>
  807458:	10c000c4 	addi	r3,r2,3
  80745c:	d9802517 	ldw	r6,148(sp)
  807460:	30c00015 	stw	r3,0(r6)
  807464:	003fe606 	br	807400 <__alt_mem_onchip_mem+0xff787400>
  807468:	04e00034 	movhi	r19,32768
  80746c:	9cffffc4 	addi	r19,r19,-1
  807470:	00800044 	movi	r2,1
  807474:	8ce6703a 	and	r19,r17,r19
  807478:	80800015 	stw	r2,0(r16)
  80747c:	9823883a 	mov	r17,r19
  807480:	003fcc06 	br	8073b4 <__alt_mem_onchip_mem+0xff7873b4>
  807484:	d8800204 	addi	r2,sp,8
  807488:	d8800015 	stw	r2,0(sp)
  80748c:	d9c00104 	addi	r7,sp,4
  807490:	900b883a 	mov	r5,r18
  807494:	980d883a 	mov	r6,r19
  807498:	e009883a 	mov	r4,fp
  80749c:	8820d53a 	srli	r16,r17,20
  8074a0:	080ace00 	call	80ace0 <__d2b>
  8074a4:	d8800915 	stw	r2,36(sp)
  8074a8:	8001651e 	bne	r16,zero,807a40 <_dtoa_r+0x700>
  8074ac:	dd800217 	ldw	r22,8(sp)
  8074b0:	dc000117 	ldw	r16,4(sp)
  8074b4:	00800804 	movi	r2,32
  8074b8:	b421883a 	add	r16,r22,r16
  8074bc:	80c10c84 	addi	r3,r16,1074
  8074c0:	10c2d10e 	bge	r2,r3,808008 <_dtoa_r+0xcc8>
  8074c4:	00801004 	movi	r2,64
  8074c8:	81010484 	addi	r4,r16,1042
  8074cc:	10c7c83a 	sub	r3,r2,r3
  8074d0:	9108d83a 	srl	r4,r18,r4
  8074d4:	88e2983a 	sll	r17,r17,r3
  8074d8:	2448b03a 	or	r4,r4,r17
  8074dc:	081051c0 	call	81051c <__floatunsidf>
  8074e0:	017f8434 	movhi	r5,65040
  8074e4:	01800044 	movi	r6,1
  8074e8:	1009883a 	mov	r4,r2
  8074ec:	194b883a 	add	r5,r3,r5
  8074f0:	843fffc4 	addi	r16,r16,-1
  8074f4:	d9801115 	stw	r6,68(sp)
  8074f8:	000d883a 	mov	r6,zero
  8074fc:	01cffe34 	movhi	r7,16376
  807500:	080fac40 	call	80fac4 <__subdf3>
  807504:	0198dbf4 	movhi	r6,25455
  807508:	01cff4f4 	movhi	r7,16339
  80750c:	3190d844 	addi	r6,r6,17249
  807510:	39e1e9c4 	addi	r7,r7,-30809
  807514:	1009883a 	mov	r4,r2
  807518:	180b883a 	mov	r5,r3
  80751c:	080f3ac0 	call	80f3ac <__muldf3>
  807520:	01a2d874 	movhi	r6,35681
  807524:	01cff1f4 	movhi	r7,16327
  807528:	31b22cc4 	addi	r6,r6,-14157
  80752c:	39e28a04 	addi	r7,r7,-30168
  807530:	180b883a 	mov	r5,r3
  807534:	1009883a 	mov	r4,r2
  807538:	080dfc00 	call	80dfc0 <__adddf3>
  80753c:	8009883a 	mov	r4,r16
  807540:	1029883a 	mov	r20,r2
  807544:	1823883a 	mov	r17,r3
  807548:	08104400 	call	810440 <__floatsidf>
  80754c:	019427f4 	movhi	r6,20639
  807550:	01cff4f4 	movhi	r7,16339
  807554:	319e7ec4 	addi	r6,r6,31227
  807558:	39d104c4 	addi	r7,r7,17427
  80755c:	1009883a 	mov	r4,r2
  807560:	180b883a 	mov	r5,r3
  807564:	080f3ac0 	call	80f3ac <__muldf3>
  807568:	100d883a 	mov	r6,r2
  80756c:	180f883a 	mov	r7,r3
  807570:	a009883a 	mov	r4,r20
  807574:	880b883a 	mov	r5,r17
  807578:	080dfc00 	call	80dfc0 <__adddf3>
  80757c:	1009883a 	mov	r4,r2
  807580:	180b883a 	mov	r5,r3
  807584:	1029883a 	mov	r20,r2
  807588:	1823883a 	mov	r17,r3
  80758c:	08103c00 	call	8103c0 <__fixdfsi>
  807590:	000d883a 	mov	r6,zero
  807594:	000f883a 	mov	r7,zero
  807598:	a009883a 	mov	r4,r20
  80759c:	880b883a 	mov	r5,r17
  8075a0:	d8800515 	stw	r2,20(sp)
  8075a4:	080f2b80 	call	80f2b8 <__ledf2>
  8075a8:	10028716 	blt	r2,zero,807fc8 <_dtoa_r+0xc88>
  8075ac:	d8c00517 	ldw	r3,20(sp)
  8075b0:	00800584 	movi	r2,22
  8075b4:	10c27536 	bltu	r2,r3,807f8c <_dtoa_r+0xc4c>
  8075b8:	180490fa 	slli	r2,r3,3
  8075bc:	00c02074 	movhi	r3,129
  8075c0:	18d29904 	addi	r3,r3,19044
  8075c4:	1885883a 	add	r2,r3,r2
  8075c8:	11000017 	ldw	r4,0(r2)
  8075cc:	11400117 	ldw	r5,4(r2)
  8075d0:	900d883a 	mov	r6,r18
  8075d4:	980f883a 	mov	r7,r19
  8075d8:	080f1dc0 	call	80f1dc <__gedf2>
  8075dc:	00828d0e 	bge	zero,r2,808014 <_dtoa_r+0xcd4>
  8075e0:	d9000517 	ldw	r4,20(sp)
  8075e4:	d8000e15 	stw	zero,56(sp)
  8075e8:	213fffc4 	addi	r4,r4,-1
  8075ec:	d9000515 	stw	r4,20(sp)
  8075f0:	b42dc83a 	sub	r22,r22,r16
  8075f4:	b5bfffc4 	addi	r22,r22,-1
  8075f8:	b0026f16 	blt	r22,zero,807fb8 <_dtoa_r+0xc78>
  8075fc:	d8000815 	stw	zero,32(sp)
  807600:	d9c00517 	ldw	r7,20(sp)
  807604:	38026416 	blt	r7,zero,807f98 <_dtoa_r+0xc58>
  807608:	b1ed883a 	add	r22,r22,r7
  80760c:	d9c00d15 	stw	r7,52(sp)
  807610:	d8000a15 	stw	zero,40(sp)
  807614:	d9800317 	ldw	r6,12(sp)
  807618:	00800244 	movi	r2,9
  80761c:	11811436 	bltu	r2,r6,807a70 <_dtoa_r+0x730>
  807620:	00800144 	movi	r2,5
  807624:	1184e10e 	bge	r2,r6,8089ac <_dtoa_r+0x166c>
  807628:	31bfff04 	addi	r6,r6,-4
  80762c:	d9800315 	stw	r6,12(sp)
  807630:	0023883a 	mov	r17,zero
  807634:	d9800317 	ldw	r6,12(sp)
  807638:	008000c4 	movi	r2,3
  80763c:	30836726 	beq	r6,r2,8083dc <_dtoa_r+0x109c>
  807640:	1183410e 	bge	r2,r6,808348 <_dtoa_r+0x1008>
  807644:	d9c00317 	ldw	r7,12(sp)
  807648:	00800104 	movi	r2,4
  80764c:	38827c26 	beq	r7,r2,808040 <_dtoa_r+0xd00>
  807650:	00800144 	movi	r2,5
  807654:	3884c41e 	bne	r7,r2,808968 <_dtoa_r+0x1628>
  807658:	00800044 	movi	r2,1
  80765c:	d8800b15 	stw	r2,44(sp)
  807660:	d8c00517 	ldw	r3,20(sp)
  807664:	d9002217 	ldw	r4,136(sp)
  807668:	1907883a 	add	r3,r3,r4
  80766c:	19800044 	addi	r6,r3,1
  807670:	d8c00c15 	stw	r3,48(sp)
  807674:	d9800615 	stw	r6,24(sp)
  807678:	0183a40e 	bge	zero,r6,80850c <_dtoa_r+0x11cc>
  80767c:	d9800617 	ldw	r6,24(sp)
  807680:	3021883a 	mov	r16,r6
  807684:	e0001115 	stw	zero,68(fp)
  807688:	008005c4 	movi	r2,23
  80768c:	1184c92e 	bgeu	r2,r6,8089b4 <_dtoa_r+0x1674>
  807690:	00c00044 	movi	r3,1
  807694:	00800104 	movi	r2,4
  807698:	1085883a 	add	r2,r2,r2
  80769c:	11000504 	addi	r4,r2,20
  8076a0:	180b883a 	mov	r5,r3
  8076a4:	18c00044 	addi	r3,r3,1
  8076a8:	313ffb2e 	bgeu	r6,r4,807698 <__alt_mem_onchip_mem+0xff787698>
  8076ac:	e1401115 	stw	r5,68(fp)
  8076b0:	e009883a 	mov	r4,fp
  8076b4:	080a04c0 	call	80a04c <_Balloc>
  8076b8:	d8800715 	stw	r2,28(sp)
  8076bc:	e0801015 	stw	r2,64(fp)
  8076c0:	00800384 	movi	r2,14
  8076c4:	1400f736 	bltu	r2,r16,807aa4 <_dtoa_r+0x764>
  8076c8:	8800f626 	beq	r17,zero,807aa4 <_dtoa_r+0x764>
  8076cc:	d9c00517 	ldw	r7,20(sp)
  8076d0:	01c39a0e 	bge	zero,r7,80853c <_dtoa_r+0x11fc>
  8076d4:	388003cc 	andi	r2,r7,15
  8076d8:	100490fa 	slli	r2,r2,3
  8076dc:	382bd13a 	srai	r21,r7,4
  8076e0:	00c02074 	movhi	r3,129
  8076e4:	18d29904 	addi	r3,r3,19044
  8076e8:	1885883a 	add	r2,r3,r2
  8076ec:	a8c0040c 	andi	r3,r21,16
  8076f0:	12400017 	ldw	r9,0(r2)
  8076f4:	12000117 	ldw	r8,4(r2)
  8076f8:	18037926 	beq	r3,zero,8084e0 <_dtoa_r+0x11a0>
  8076fc:	00802074 	movhi	r2,129
  807700:	10928f04 	addi	r2,r2,19004
  807704:	11800817 	ldw	r6,32(r2)
  807708:	11c00917 	ldw	r7,36(r2)
  80770c:	9009883a 	mov	r4,r18
  807710:	980b883a 	mov	r5,r19
  807714:	da001715 	stw	r8,92(sp)
  807718:	da401615 	stw	r9,88(sp)
  80771c:	080e86c0 	call	80e86c <__divdf3>
  807720:	da001717 	ldw	r8,92(sp)
  807724:	da401617 	ldw	r9,88(sp)
  807728:	ad4003cc 	andi	r21,r21,15
  80772c:	040000c4 	movi	r16,3
  807730:	1023883a 	mov	r17,r2
  807734:	1829883a 	mov	r20,r3
  807738:	a8001126 	beq	r21,zero,807780 <_dtoa_r+0x440>
  80773c:	05c02074 	movhi	r23,129
  807740:	bdd28f04 	addi	r23,r23,19004
  807744:	4805883a 	mov	r2,r9
  807748:	4007883a 	mov	r3,r8
  80774c:	a980004c 	andi	r6,r21,1
  807750:	1009883a 	mov	r4,r2
  807754:	a82bd07a 	srai	r21,r21,1
  807758:	180b883a 	mov	r5,r3
  80775c:	30000426 	beq	r6,zero,807770 <_dtoa_r+0x430>
  807760:	b9800017 	ldw	r6,0(r23)
  807764:	b9c00117 	ldw	r7,4(r23)
  807768:	84000044 	addi	r16,r16,1
  80776c:	080f3ac0 	call	80f3ac <__muldf3>
  807770:	bdc00204 	addi	r23,r23,8
  807774:	a83ff51e 	bne	r21,zero,80774c <__alt_mem_onchip_mem+0xff78774c>
  807778:	1013883a 	mov	r9,r2
  80777c:	1811883a 	mov	r8,r3
  807780:	480d883a 	mov	r6,r9
  807784:	400f883a 	mov	r7,r8
  807788:	8809883a 	mov	r4,r17
  80778c:	a00b883a 	mov	r5,r20
  807790:	080e86c0 	call	80e86c <__divdf3>
  807794:	d8800f15 	stw	r2,60(sp)
  807798:	d8c01015 	stw	r3,64(sp)
  80779c:	d8c00e17 	ldw	r3,56(sp)
  8077a0:	18000626 	beq	r3,zero,8077bc <_dtoa_r+0x47c>
  8077a4:	d9000f17 	ldw	r4,60(sp)
  8077a8:	d9401017 	ldw	r5,64(sp)
  8077ac:	000d883a 	mov	r6,zero
  8077b0:	01cffc34 	movhi	r7,16368
  8077b4:	080f2b80 	call	80f2b8 <__ledf2>
  8077b8:	10040b16 	blt	r2,zero,8087e8 <_dtoa_r+0x14a8>
  8077bc:	8009883a 	mov	r4,r16
  8077c0:	08104400 	call	810440 <__floatsidf>
  8077c4:	d9800f17 	ldw	r6,60(sp)
  8077c8:	d9c01017 	ldw	r7,64(sp)
  8077cc:	1009883a 	mov	r4,r2
  8077d0:	180b883a 	mov	r5,r3
  8077d4:	080f3ac0 	call	80f3ac <__muldf3>
  8077d8:	000d883a 	mov	r6,zero
  8077dc:	01d00734 	movhi	r7,16412
  8077e0:	1009883a 	mov	r4,r2
  8077e4:	180b883a 	mov	r5,r3
  8077e8:	080dfc00 	call	80dfc0 <__adddf3>
  8077ec:	1021883a 	mov	r16,r2
  8077f0:	d8800617 	ldw	r2,24(sp)
  8077f4:	047f3034 	movhi	r17,64704
  8077f8:	1c63883a 	add	r17,r3,r17
  8077fc:	10031826 	beq	r2,zero,808460 <_dtoa_r+0x1120>
  807800:	d8c00517 	ldw	r3,20(sp)
  807804:	db000617 	ldw	r12,24(sp)
  807808:	d8c01315 	stw	r3,76(sp)
  80780c:	d9000b17 	ldw	r4,44(sp)
  807810:	20038f26 	beq	r4,zero,808650 <_dtoa_r+0x1310>
  807814:	60bfffc4 	addi	r2,r12,-1
  807818:	100490fa 	slli	r2,r2,3
  80781c:	00c02074 	movhi	r3,129
  807820:	18d29904 	addi	r3,r3,19044
  807824:	1885883a 	add	r2,r3,r2
  807828:	11800017 	ldw	r6,0(r2)
  80782c:	11c00117 	ldw	r7,4(r2)
  807830:	d8800717 	ldw	r2,28(sp)
  807834:	0009883a 	mov	r4,zero
  807838:	014ff834 	movhi	r5,16352
  80783c:	db001615 	stw	r12,88(sp)
  807840:	15c00044 	addi	r23,r2,1
  807844:	080e86c0 	call	80e86c <__divdf3>
  807848:	800d883a 	mov	r6,r16
  80784c:	880f883a 	mov	r7,r17
  807850:	1009883a 	mov	r4,r2
  807854:	180b883a 	mov	r5,r3
  807858:	080fac40 	call	80fac4 <__subdf3>
  80785c:	d9401017 	ldw	r5,64(sp)
  807860:	d9000f17 	ldw	r4,60(sp)
  807864:	102b883a 	mov	r21,r2
  807868:	d8c01215 	stw	r3,72(sp)
  80786c:	08103c00 	call	8103c0 <__fixdfsi>
  807870:	1009883a 	mov	r4,r2
  807874:	1029883a 	mov	r20,r2
  807878:	08104400 	call	810440 <__floatsidf>
  80787c:	d9000f17 	ldw	r4,60(sp)
  807880:	d9401017 	ldw	r5,64(sp)
  807884:	100d883a 	mov	r6,r2
  807888:	180f883a 	mov	r7,r3
  80788c:	080fac40 	call	80fac4 <__subdf3>
  807890:	1823883a 	mov	r17,r3
  807894:	d8c00717 	ldw	r3,28(sp)
  807898:	d9401217 	ldw	r5,72(sp)
  80789c:	a2000c04 	addi	r8,r20,48
  8078a0:	1021883a 	mov	r16,r2
  8078a4:	1a000005 	stb	r8,0(r3)
  8078a8:	800d883a 	mov	r6,r16
  8078ac:	880f883a 	mov	r7,r17
  8078b0:	a809883a 	mov	r4,r21
  8078b4:	4029883a 	mov	r20,r8
  8078b8:	080f1dc0 	call	80f1dc <__gedf2>
  8078bc:	00841d16 	blt	zero,r2,808934 <_dtoa_r+0x15f4>
  8078c0:	800d883a 	mov	r6,r16
  8078c4:	880f883a 	mov	r7,r17
  8078c8:	0009883a 	mov	r4,zero
  8078cc:	014ffc34 	movhi	r5,16368
  8078d0:	080fac40 	call	80fac4 <__subdf3>
  8078d4:	d9401217 	ldw	r5,72(sp)
  8078d8:	100d883a 	mov	r6,r2
  8078dc:	180f883a 	mov	r7,r3
  8078e0:	a809883a 	mov	r4,r21
  8078e4:	080f1dc0 	call	80f1dc <__gedf2>
  8078e8:	db001617 	ldw	r12,88(sp)
  8078ec:	00840e16 	blt	zero,r2,808928 <_dtoa_r+0x15e8>
  8078f0:	00800044 	movi	r2,1
  8078f4:	13006b0e 	bge	r2,r12,807aa4 <_dtoa_r+0x764>
  8078f8:	d9000717 	ldw	r4,28(sp)
  8078fc:	dd800f15 	stw	r22,60(sp)
  807900:	dcc01015 	stw	r19,64(sp)
  807904:	2319883a 	add	r12,r4,r12
  807908:	dcc01217 	ldw	r19,72(sp)
  80790c:	602d883a 	mov	r22,r12
  807910:	dc801215 	stw	r18,72(sp)
  807914:	b825883a 	mov	r18,r23
  807918:	00000906 	br	807940 <_dtoa_r+0x600>
  80791c:	080fac40 	call	80fac4 <__subdf3>
  807920:	a80d883a 	mov	r6,r21
  807924:	980f883a 	mov	r7,r19
  807928:	1009883a 	mov	r4,r2
  80792c:	180b883a 	mov	r5,r3
  807930:	080f2b80 	call	80f2b8 <__ledf2>
  807934:	1003e816 	blt	r2,zero,8088d8 <_dtoa_r+0x1598>
  807938:	b825883a 	mov	r18,r23
  80793c:	bd83e926 	beq	r23,r22,8088e4 <_dtoa_r+0x15a4>
  807940:	a809883a 	mov	r4,r21
  807944:	980b883a 	mov	r5,r19
  807948:	000d883a 	mov	r6,zero
  80794c:	01d00934 	movhi	r7,16420
  807950:	080f3ac0 	call	80f3ac <__muldf3>
  807954:	000d883a 	mov	r6,zero
  807958:	01d00934 	movhi	r7,16420
  80795c:	8009883a 	mov	r4,r16
  807960:	880b883a 	mov	r5,r17
  807964:	102b883a 	mov	r21,r2
  807968:	1827883a 	mov	r19,r3
  80796c:	080f3ac0 	call	80f3ac <__muldf3>
  807970:	180b883a 	mov	r5,r3
  807974:	1009883a 	mov	r4,r2
  807978:	1821883a 	mov	r16,r3
  80797c:	1023883a 	mov	r17,r2
  807980:	08103c00 	call	8103c0 <__fixdfsi>
  807984:	1009883a 	mov	r4,r2
  807988:	1029883a 	mov	r20,r2
  80798c:	08104400 	call	810440 <__floatsidf>
  807990:	8809883a 	mov	r4,r17
  807994:	800b883a 	mov	r5,r16
  807998:	100d883a 	mov	r6,r2
  80799c:	180f883a 	mov	r7,r3
  8079a0:	080fac40 	call	80fac4 <__subdf3>
  8079a4:	a5000c04 	addi	r20,r20,48
  8079a8:	a80d883a 	mov	r6,r21
  8079ac:	980f883a 	mov	r7,r19
  8079b0:	1009883a 	mov	r4,r2
  8079b4:	180b883a 	mov	r5,r3
  8079b8:	95000005 	stb	r20,0(r18)
  8079bc:	1021883a 	mov	r16,r2
  8079c0:	1823883a 	mov	r17,r3
  8079c4:	080f2b80 	call	80f2b8 <__ledf2>
  8079c8:	bdc00044 	addi	r23,r23,1
  8079cc:	800d883a 	mov	r6,r16
  8079d0:	880f883a 	mov	r7,r17
  8079d4:	0009883a 	mov	r4,zero
  8079d8:	014ffc34 	movhi	r5,16368
  8079dc:	103fcf0e 	bge	r2,zero,80791c <__alt_mem_onchip_mem+0xff78791c>
  8079e0:	d8c01317 	ldw	r3,76(sp)
  8079e4:	d8c00515 	stw	r3,20(sp)
  8079e8:	d9400917 	ldw	r5,36(sp)
  8079ec:	e009883a 	mov	r4,fp
  8079f0:	080a0f40 	call	80a0f4 <_Bfree>
  8079f4:	d9000517 	ldw	r4,20(sp)
  8079f8:	d9802317 	ldw	r6,140(sp)
  8079fc:	d9c02517 	ldw	r7,148(sp)
  807a00:	b8000005 	stb	zero,0(r23)
  807a04:	20800044 	addi	r2,r4,1
  807a08:	30800015 	stw	r2,0(r6)
  807a0c:	3802aa26 	beq	r7,zero,8084b8 <_dtoa_r+0x1178>
  807a10:	3dc00015 	stw	r23,0(r7)
  807a14:	d8800717 	ldw	r2,28(sp)
  807a18:	003e7906 	br	807400 <__alt_mem_onchip_mem+0xff787400>
  807a1c:	00800434 	movhi	r2,16
  807a20:	10bfffc4 	addi	r2,r2,-1
  807a24:	88a2703a 	and	r17,r17,r2
  807a28:	883e851e 	bne	r17,zero,807440 <__alt_mem_onchip_mem+0xff787440>
  807a2c:	00802074 	movhi	r2,129
  807a30:	10927b04 	addi	r2,r2,18924
  807a34:	003e8406 	br	807448 <__alt_mem_onchip_mem+0xff787448>
  807a38:	10c00204 	addi	r3,r2,8
  807a3c:	003e8706 	br	80745c <__alt_mem_onchip_mem+0xff78745c>
  807a40:	01400434 	movhi	r5,16
  807a44:	297fffc4 	addi	r5,r5,-1
  807a48:	994a703a 	and	r5,r19,r5
  807a4c:	9009883a 	mov	r4,r18
  807a50:	843f0044 	addi	r16,r16,-1023
  807a54:	294ffc34 	orhi	r5,r5,16368
  807a58:	dd800217 	ldw	r22,8(sp)
  807a5c:	d8001115 	stw	zero,68(sp)
  807a60:	003ea506 	br	8074f8 <__alt_mem_onchip_mem+0xff7874f8>
  807a64:	00802074 	movhi	r2,129
  807a68:	10927204 	addi	r2,r2,18888
  807a6c:	003e6406 	br	807400 <__alt_mem_onchip_mem+0xff787400>
  807a70:	e0001115 	stw	zero,68(fp)
  807a74:	000b883a 	mov	r5,zero
  807a78:	e009883a 	mov	r4,fp
  807a7c:	080a04c0 	call	80a04c <_Balloc>
  807a80:	01bfffc4 	movi	r6,-1
  807a84:	01c00044 	movi	r7,1
  807a88:	d8800715 	stw	r2,28(sp)
  807a8c:	d9800c15 	stw	r6,48(sp)
  807a90:	e0801015 	stw	r2,64(fp)
  807a94:	d8000315 	stw	zero,12(sp)
  807a98:	d9c00b15 	stw	r7,44(sp)
  807a9c:	d9800615 	stw	r6,24(sp)
  807aa0:	d8002215 	stw	zero,136(sp)
  807aa4:	d8800117 	ldw	r2,4(sp)
  807aa8:	10008916 	blt	r2,zero,807cd0 <_dtoa_r+0x990>
  807aac:	d9000517 	ldw	r4,20(sp)
  807ab0:	00c00384 	movi	r3,14
  807ab4:	19008616 	blt	r3,r4,807cd0 <_dtoa_r+0x990>
  807ab8:	200490fa 	slli	r2,r4,3
  807abc:	00c02074 	movhi	r3,129
  807ac0:	d9802217 	ldw	r6,136(sp)
  807ac4:	18d29904 	addi	r3,r3,19044
  807ac8:	1885883a 	add	r2,r3,r2
  807acc:	14000017 	ldw	r16,0(r2)
  807ad0:	14400117 	ldw	r17,4(r2)
  807ad4:	30016316 	blt	r6,zero,808064 <_dtoa_r+0xd24>
  807ad8:	800d883a 	mov	r6,r16
  807adc:	880f883a 	mov	r7,r17
  807ae0:	9009883a 	mov	r4,r18
  807ae4:	980b883a 	mov	r5,r19
  807ae8:	080e86c0 	call	80e86c <__divdf3>
  807aec:	180b883a 	mov	r5,r3
  807af0:	1009883a 	mov	r4,r2
  807af4:	08103c00 	call	8103c0 <__fixdfsi>
  807af8:	1009883a 	mov	r4,r2
  807afc:	102b883a 	mov	r21,r2
  807b00:	08104400 	call	810440 <__floatsidf>
  807b04:	800d883a 	mov	r6,r16
  807b08:	880f883a 	mov	r7,r17
  807b0c:	1009883a 	mov	r4,r2
  807b10:	180b883a 	mov	r5,r3
  807b14:	080f3ac0 	call	80f3ac <__muldf3>
  807b18:	100d883a 	mov	r6,r2
  807b1c:	180f883a 	mov	r7,r3
  807b20:	9009883a 	mov	r4,r18
  807b24:	980b883a 	mov	r5,r19
  807b28:	080fac40 	call	80fac4 <__subdf3>
  807b2c:	d9c00717 	ldw	r7,28(sp)
  807b30:	1009883a 	mov	r4,r2
  807b34:	a8800c04 	addi	r2,r21,48
  807b38:	38800005 	stb	r2,0(r7)
  807b3c:	3dc00044 	addi	r23,r7,1
  807b40:	d9c00617 	ldw	r7,24(sp)
  807b44:	01800044 	movi	r6,1
  807b48:	180b883a 	mov	r5,r3
  807b4c:	2005883a 	mov	r2,r4
  807b50:	39803826 	beq	r7,r6,807c34 <_dtoa_r+0x8f4>
  807b54:	000d883a 	mov	r6,zero
  807b58:	01d00934 	movhi	r7,16420
  807b5c:	080f3ac0 	call	80f3ac <__muldf3>
  807b60:	000d883a 	mov	r6,zero
  807b64:	000f883a 	mov	r7,zero
  807b68:	1009883a 	mov	r4,r2
  807b6c:	180b883a 	mov	r5,r3
  807b70:	1025883a 	mov	r18,r2
  807b74:	1827883a 	mov	r19,r3
  807b78:	080f1540 	call	80f154 <__eqdf2>
  807b7c:	103f9a26 	beq	r2,zero,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807b80:	d9c00617 	ldw	r7,24(sp)
  807b84:	d8c00717 	ldw	r3,28(sp)
  807b88:	b829883a 	mov	r20,r23
  807b8c:	38bfffc4 	addi	r2,r7,-1
  807b90:	18ad883a 	add	r22,r3,r2
  807b94:	00000a06 	br	807bc0 <_dtoa_r+0x880>
  807b98:	080f3ac0 	call	80f3ac <__muldf3>
  807b9c:	000d883a 	mov	r6,zero
  807ba0:	000f883a 	mov	r7,zero
  807ba4:	1009883a 	mov	r4,r2
  807ba8:	180b883a 	mov	r5,r3
  807bac:	1025883a 	mov	r18,r2
  807bb0:	1827883a 	mov	r19,r3
  807bb4:	b829883a 	mov	r20,r23
  807bb8:	080f1540 	call	80f154 <__eqdf2>
  807bbc:	103f8a26 	beq	r2,zero,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807bc0:	800d883a 	mov	r6,r16
  807bc4:	880f883a 	mov	r7,r17
  807bc8:	9009883a 	mov	r4,r18
  807bcc:	980b883a 	mov	r5,r19
  807bd0:	080e86c0 	call	80e86c <__divdf3>
  807bd4:	180b883a 	mov	r5,r3
  807bd8:	1009883a 	mov	r4,r2
  807bdc:	08103c00 	call	8103c0 <__fixdfsi>
  807be0:	1009883a 	mov	r4,r2
  807be4:	102b883a 	mov	r21,r2
  807be8:	08104400 	call	810440 <__floatsidf>
  807bec:	800d883a 	mov	r6,r16
  807bf0:	880f883a 	mov	r7,r17
  807bf4:	1009883a 	mov	r4,r2
  807bf8:	180b883a 	mov	r5,r3
  807bfc:	080f3ac0 	call	80f3ac <__muldf3>
  807c00:	100d883a 	mov	r6,r2
  807c04:	180f883a 	mov	r7,r3
  807c08:	9009883a 	mov	r4,r18
  807c0c:	980b883a 	mov	r5,r19
  807c10:	080fac40 	call	80fac4 <__subdf3>
  807c14:	aa000c04 	addi	r8,r21,48
  807c18:	a2000005 	stb	r8,0(r20)
  807c1c:	000d883a 	mov	r6,zero
  807c20:	01d00934 	movhi	r7,16420
  807c24:	1009883a 	mov	r4,r2
  807c28:	180b883a 	mov	r5,r3
  807c2c:	a5c00044 	addi	r23,r20,1
  807c30:	b53fd91e 	bne	r22,r20,807b98 <__alt_mem_onchip_mem+0xff787b98>
  807c34:	100d883a 	mov	r6,r2
  807c38:	180f883a 	mov	r7,r3
  807c3c:	1009883a 	mov	r4,r2
  807c40:	180b883a 	mov	r5,r3
  807c44:	080dfc00 	call	80dfc0 <__adddf3>
  807c48:	100d883a 	mov	r6,r2
  807c4c:	180f883a 	mov	r7,r3
  807c50:	8009883a 	mov	r4,r16
  807c54:	880b883a 	mov	r5,r17
  807c58:	1027883a 	mov	r19,r2
  807c5c:	1825883a 	mov	r18,r3
  807c60:	080f2b80 	call	80f2b8 <__ledf2>
  807c64:	10000816 	blt	r2,zero,807c88 <_dtoa_r+0x948>
  807c68:	980d883a 	mov	r6,r19
  807c6c:	900f883a 	mov	r7,r18
  807c70:	8009883a 	mov	r4,r16
  807c74:	880b883a 	mov	r5,r17
  807c78:	080f1540 	call	80f154 <__eqdf2>
  807c7c:	103f5a1e 	bne	r2,zero,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807c80:	ad40004c 	andi	r21,r21,1
  807c84:	a83f5826 	beq	r21,zero,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807c88:	bd3fffc3 	ldbu	r20,-1(r23)
  807c8c:	b8bfffc4 	addi	r2,r23,-1
  807c90:	1007883a 	mov	r3,r2
  807c94:	01400e44 	movi	r5,57
  807c98:	d9800717 	ldw	r6,28(sp)
  807c9c:	00000506 	br	807cb4 <_dtoa_r+0x974>
  807ca0:	18ffffc4 	addi	r3,r3,-1
  807ca4:	11824726 	beq	r2,r6,8085c4 <_dtoa_r+0x1284>
  807ca8:	1d000003 	ldbu	r20,0(r3)
  807cac:	102f883a 	mov	r23,r2
  807cb0:	10bfffc4 	addi	r2,r2,-1
  807cb4:	a1003fcc 	andi	r4,r20,255
  807cb8:	2100201c 	xori	r4,r4,128
  807cbc:	213fe004 	addi	r4,r4,-128
  807cc0:	217ff726 	beq	r4,r5,807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  807cc4:	a2000044 	addi	r8,r20,1
  807cc8:	12000005 	stb	r8,0(r2)
  807ccc:	003f4606 	br	8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807cd0:	d9000b17 	ldw	r4,44(sp)
  807cd4:	2000c826 	beq	r4,zero,807ff8 <_dtoa_r+0xcb8>
  807cd8:	d9800317 	ldw	r6,12(sp)
  807cdc:	00c00044 	movi	r3,1
  807ce0:	1980f90e 	bge	r3,r6,8080c8 <_dtoa_r+0xd88>
  807ce4:	d8800617 	ldw	r2,24(sp)
  807ce8:	d8c00a17 	ldw	r3,40(sp)
  807cec:	157fffc4 	addi	r21,r2,-1
  807cf0:	1d41f316 	blt	r3,r21,8084c0 <_dtoa_r+0x1180>
  807cf4:	1d6bc83a 	sub	r21,r3,r21
  807cf8:	d9c00617 	ldw	r7,24(sp)
  807cfc:	3802aa16 	blt	r7,zero,8087a8 <_dtoa_r+0x1468>
  807d00:	dd000817 	ldw	r20,32(sp)
  807d04:	d8800617 	ldw	r2,24(sp)
  807d08:	d8c00817 	ldw	r3,32(sp)
  807d0c:	01400044 	movi	r5,1
  807d10:	e009883a 	mov	r4,fp
  807d14:	1887883a 	add	r3,r3,r2
  807d18:	d8c00815 	stw	r3,32(sp)
  807d1c:	b0ad883a 	add	r22,r22,r2
  807d20:	080a4580 	call	80a458 <__i2b>
  807d24:	1023883a 	mov	r17,r2
  807d28:	a0000826 	beq	r20,zero,807d4c <_dtoa_r+0xa0c>
  807d2c:	0580070e 	bge	zero,r22,807d4c <_dtoa_r+0xa0c>
  807d30:	a005883a 	mov	r2,r20
  807d34:	b500b916 	blt	r22,r20,80801c <_dtoa_r+0xcdc>
  807d38:	d9000817 	ldw	r4,32(sp)
  807d3c:	a0a9c83a 	sub	r20,r20,r2
  807d40:	b0adc83a 	sub	r22,r22,r2
  807d44:	2089c83a 	sub	r4,r4,r2
  807d48:	d9000815 	stw	r4,32(sp)
  807d4c:	d9800a17 	ldw	r6,40(sp)
  807d50:	0181810e 	bge	zero,r6,808358 <_dtoa_r+0x1018>
  807d54:	d9c00b17 	ldw	r7,44(sp)
  807d58:	3800b326 	beq	r7,zero,808028 <_dtoa_r+0xce8>
  807d5c:	a800b226 	beq	r21,zero,808028 <_dtoa_r+0xce8>
  807d60:	880b883a 	mov	r5,r17
  807d64:	a80d883a 	mov	r6,r21
  807d68:	e009883a 	mov	r4,fp
  807d6c:	080a68c0 	call	80a68c <__pow5mult>
  807d70:	d9800917 	ldw	r6,36(sp)
  807d74:	100b883a 	mov	r5,r2
  807d78:	e009883a 	mov	r4,fp
  807d7c:	1023883a 	mov	r17,r2
  807d80:	080a4940 	call	80a494 <__multiply>
  807d84:	1021883a 	mov	r16,r2
  807d88:	d8800a17 	ldw	r2,40(sp)
  807d8c:	d9400917 	ldw	r5,36(sp)
  807d90:	e009883a 	mov	r4,fp
  807d94:	1545c83a 	sub	r2,r2,r21
  807d98:	d8800a15 	stw	r2,40(sp)
  807d9c:	080a0f40 	call	80a0f4 <_Bfree>
  807da0:	d8c00a17 	ldw	r3,40(sp)
  807da4:	18009f1e 	bne	r3,zero,808024 <_dtoa_r+0xce4>
  807da8:	05c00044 	movi	r23,1
  807dac:	e009883a 	mov	r4,fp
  807db0:	b80b883a 	mov	r5,r23
  807db4:	080a4580 	call	80a458 <__i2b>
  807db8:	d9000d17 	ldw	r4,52(sp)
  807dbc:	102b883a 	mov	r21,r2
  807dc0:	2000ce26 	beq	r4,zero,8080fc <_dtoa_r+0xdbc>
  807dc4:	200d883a 	mov	r6,r4
  807dc8:	100b883a 	mov	r5,r2
  807dcc:	e009883a 	mov	r4,fp
  807dd0:	080a68c0 	call	80a68c <__pow5mult>
  807dd4:	d9800317 	ldw	r6,12(sp)
  807dd8:	102b883a 	mov	r21,r2
  807ddc:	b981810e 	bge	r23,r6,8083e4 <_dtoa_r+0x10a4>
  807de0:	0027883a 	mov	r19,zero
  807de4:	a8800417 	ldw	r2,16(r21)
  807de8:	05c00804 	movi	r23,32
  807dec:	10800104 	addi	r2,r2,4
  807df0:	1085883a 	add	r2,r2,r2
  807df4:	1085883a 	add	r2,r2,r2
  807df8:	a885883a 	add	r2,r21,r2
  807dfc:	11000017 	ldw	r4,0(r2)
  807e00:	080a3400 	call	80a340 <__hi0bits>
  807e04:	b885c83a 	sub	r2,r23,r2
  807e08:	1585883a 	add	r2,r2,r22
  807e0c:	108007cc 	andi	r2,r2,31
  807e10:	1000b326 	beq	r2,zero,8080e0 <_dtoa_r+0xda0>
  807e14:	00c00804 	movi	r3,32
  807e18:	1887c83a 	sub	r3,r3,r2
  807e1c:	01000104 	movi	r4,4
  807e20:	20c2cd0e 	bge	r4,r3,808958 <_dtoa_r+0x1618>
  807e24:	00c00704 	movi	r3,28
  807e28:	1885c83a 	sub	r2,r3,r2
  807e2c:	d8c00817 	ldw	r3,32(sp)
  807e30:	a0a9883a 	add	r20,r20,r2
  807e34:	b0ad883a 	add	r22,r22,r2
  807e38:	1887883a 	add	r3,r3,r2
  807e3c:	d8c00815 	stw	r3,32(sp)
  807e40:	d9800817 	ldw	r6,32(sp)
  807e44:	0180040e 	bge	zero,r6,807e58 <_dtoa_r+0xb18>
  807e48:	800b883a 	mov	r5,r16
  807e4c:	e009883a 	mov	r4,fp
  807e50:	080a7cc0 	call	80a7cc <__lshift>
  807e54:	1021883a 	mov	r16,r2
  807e58:	0580050e 	bge	zero,r22,807e70 <_dtoa_r+0xb30>
  807e5c:	a80b883a 	mov	r5,r21
  807e60:	b00d883a 	mov	r6,r22
  807e64:	e009883a 	mov	r4,fp
  807e68:	080a7cc0 	call	80a7cc <__lshift>
  807e6c:	102b883a 	mov	r21,r2
  807e70:	d9c00e17 	ldw	r7,56(sp)
  807e74:	3801211e 	bne	r7,zero,8082fc <_dtoa_r+0xfbc>
  807e78:	d9800617 	ldw	r6,24(sp)
  807e7c:	0181380e 	bge	zero,r6,808360 <_dtoa_r+0x1020>
  807e80:	d8c00b17 	ldw	r3,44(sp)
  807e84:	1800ab1e 	bne	r3,zero,808134 <_dtoa_r+0xdf4>
  807e88:	dc800717 	ldw	r18,28(sp)
  807e8c:	dcc00617 	ldw	r19,24(sp)
  807e90:	9029883a 	mov	r20,r18
  807e94:	00000206 	br	807ea0 <_dtoa_r+0xb60>
  807e98:	080a11c0 	call	80a11c <__multadd>
  807e9c:	1021883a 	mov	r16,r2
  807ea0:	a80b883a 	mov	r5,r21
  807ea4:	8009883a 	mov	r4,r16
  807ea8:	08071400 	call	807140 <quorem>
  807eac:	10800c04 	addi	r2,r2,48
  807eb0:	90800005 	stb	r2,0(r18)
  807eb4:	94800044 	addi	r18,r18,1
  807eb8:	9507c83a 	sub	r3,r18,r20
  807ebc:	000f883a 	mov	r7,zero
  807ec0:	01800284 	movi	r6,10
  807ec4:	800b883a 	mov	r5,r16
  807ec8:	e009883a 	mov	r4,fp
  807ecc:	1cfff216 	blt	r3,r19,807e98 <__alt_mem_onchip_mem+0xff787e98>
  807ed0:	1011883a 	mov	r8,r2
  807ed4:	d8800617 	ldw	r2,24(sp)
  807ed8:	0082370e 	bge	zero,r2,8087b8 <_dtoa_r+0x1478>
  807edc:	d9000717 	ldw	r4,28(sp)
  807ee0:	0025883a 	mov	r18,zero
  807ee4:	20af883a 	add	r23,r4,r2
  807ee8:	01800044 	movi	r6,1
  807eec:	800b883a 	mov	r5,r16
  807ef0:	e009883a 	mov	r4,fp
  807ef4:	da001715 	stw	r8,92(sp)
  807ef8:	080a7cc0 	call	80a7cc <__lshift>
  807efc:	a80b883a 	mov	r5,r21
  807f00:	1009883a 	mov	r4,r2
  807f04:	d8800915 	stw	r2,36(sp)
  807f08:	080a9140 	call	80a914 <__mcmp>
  807f0c:	da001717 	ldw	r8,92(sp)
  807f10:	0081800e 	bge	zero,r2,808514 <_dtoa_r+0x11d4>
  807f14:	b93fffc3 	ldbu	r4,-1(r23)
  807f18:	b8bfffc4 	addi	r2,r23,-1
  807f1c:	1007883a 	mov	r3,r2
  807f20:	01800e44 	movi	r6,57
  807f24:	d9c00717 	ldw	r7,28(sp)
  807f28:	00000506 	br	807f40 <_dtoa_r+0xc00>
  807f2c:	18ffffc4 	addi	r3,r3,-1
  807f30:	11c12326 	beq	r2,r7,8083c0 <_dtoa_r+0x1080>
  807f34:	19000003 	ldbu	r4,0(r3)
  807f38:	102f883a 	mov	r23,r2
  807f3c:	10bfffc4 	addi	r2,r2,-1
  807f40:	21403fcc 	andi	r5,r4,255
  807f44:	2940201c 	xori	r5,r5,128
  807f48:	297fe004 	addi	r5,r5,-128
  807f4c:	29bff726 	beq	r5,r6,807f2c <__alt_mem_onchip_mem+0xff787f2c>
  807f50:	21000044 	addi	r4,r4,1
  807f54:	11000005 	stb	r4,0(r2)
  807f58:	a80b883a 	mov	r5,r21
  807f5c:	e009883a 	mov	r4,fp
  807f60:	080a0f40 	call	80a0f4 <_Bfree>
  807f64:	883ea026 	beq	r17,zero,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807f68:	90000426 	beq	r18,zero,807f7c <_dtoa_r+0xc3c>
  807f6c:	94400326 	beq	r18,r17,807f7c <_dtoa_r+0xc3c>
  807f70:	900b883a 	mov	r5,r18
  807f74:	e009883a 	mov	r4,fp
  807f78:	080a0f40 	call	80a0f4 <_Bfree>
  807f7c:	880b883a 	mov	r5,r17
  807f80:	e009883a 	mov	r4,fp
  807f84:	080a0f40 	call	80a0f4 <_Bfree>
  807f88:	003e9706 	br	8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  807f8c:	01800044 	movi	r6,1
  807f90:	d9800e15 	stw	r6,56(sp)
  807f94:	003d9606 	br	8075f0 <__alt_mem_onchip_mem+0xff7875f0>
  807f98:	d8800817 	ldw	r2,32(sp)
  807f9c:	d8c00517 	ldw	r3,20(sp)
  807fa0:	d8000d15 	stw	zero,52(sp)
  807fa4:	10c5c83a 	sub	r2,r2,r3
  807fa8:	00c9c83a 	sub	r4,zero,r3
  807fac:	d8800815 	stw	r2,32(sp)
  807fb0:	d9000a15 	stw	r4,40(sp)
  807fb4:	003d9706 	br	807614 <__alt_mem_onchip_mem+0xff787614>
  807fb8:	05adc83a 	sub	r22,zero,r22
  807fbc:	dd800815 	stw	r22,32(sp)
  807fc0:	002d883a 	mov	r22,zero
  807fc4:	003d8e06 	br	807600 <__alt_mem_onchip_mem+0xff787600>
  807fc8:	d9000517 	ldw	r4,20(sp)
  807fcc:	08104400 	call	810440 <__floatsidf>
  807fd0:	100d883a 	mov	r6,r2
  807fd4:	180f883a 	mov	r7,r3
  807fd8:	a009883a 	mov	r4,r20
  807fdc:	880b883a 	mov	r5,r17
  807fe0:	080f1540 	call	80f154 <__eqdf2>
  807fe4:	103d7126 	beq	r2,zero,8075ac <__alt_mem_onchip_mem+0xff7875ac>
  807fe8:	d9c00517 	ldw	r7,20(sp)
  807fec:	39ffffc4 	addi	r7,r7,-1
  807ff0:	d9c00515 	stw	r7,20(sp)
  807ff4:	003d6d06 	br	8075ac <__alt_mem_onchip_mem+0xff7875ac>
  807ff8:	dd400a17 	ldw	r21,40(sp)
  807ffc:	dd000817 	ldw	r20,32(sp)
  808000:	0023883a 	mov	r17,zero
  808004:	003f4806 	br	807d28 <__alt_mem_onchip_mem+0xff787d28>
  808008:	10e3c83a 	sub	r17,r2,r3
  80800c:	9448983a 	sll	r4,r18,r17
  808010:	003d3206 	br	8074dc <__alt_mem_onchip_mem+0xff7874dc>
  808014:	d8000e15 	stw	zero,56(sp)
  808018:	003d7506 	br	8075f0 <__alt_mem_onchip_mem+0xff7875f0>
  80801c:	b005883a 	mov	r2,r22
  808020:	003f4506 	br	807d38 <__alt_mem_onchip_mem+0xff787d38>
  808024:	dc000915 	stw	r16,36(sp)
  808028:	d9800a17 	ldw	r6,40(sp)
  80802c:	d9400917 	ldw	r5,36(sp)
  808030:	e009883a 	mov	r4,fp
  808034:	080a68c0 	call	80a68c <__pow5mult>
  808038:	1021883a 	mov	r16,r2
  80803c:	003f5a06 	br	807da8 <__alt_mem_onchip_mem+0xff787da8>
  808040:	01c00044 	movi	r7,1
  808044:	d9c00b15 	stw	r7,44(sp)
  808048:	d8802217 	ldw	r2,136(sp)
  80804c:	0081280e 	bge	zero,r2,8084f0 <_dtoa_r+0x11b0>
  808050:	100d883a 	mov	r6,r2
  808054:	1021883a 	mov	r16,r2
  808058:	d8800c15 	stw	r2,48(sp)
  80805c:	d8800615 	stw	r2,24(sp)
  808060:	003d8806 	br	807684 <__alt_mem_onchip_mem+0xff787684>
  808064:	d8800617 	ldw	r2,24(sp)
  808068:	00be9b16 	blt	zero,r2,807ad8 <__alt_mem_onchip_mem+0xff787ad8>
  80806c:	10010f1e 	bne	r2,zero,8084ac <_dtoa_r+0x116c>
  808070:	880b883a 	mov	r5,r17
  808074:	000d883a 	mov	r6,zero
  808078:	01d00534 	movhi	r7,16404
  80807c:	8009883a 	mov	r4,r16
  808080:	080f3ac0 	call	80f3ac <__muldf3>
  808084:	900d883a 	mov	r6,r18
  808088:	980f883a 	mov	r7,r19
  80808c:	1009883a 	mov	r4,r2
  808090:	180b883a 	mov	r5,r3
  808094:	080f1dc0 	call	80f1dc <__gedf2>
  808098:	002b883a 	mov	r21,zero
  80809c:	0023883a 	mov	r17,zero
  8080a0:	1000bf16 	blt	r2,zero,8083a0 <_dtoa_r+0x1060>
  8080a4:	d9802217 	ldw	r6,136(sp)
  8080a8:	ddc00717 	ldw	r23,28(sp)
  8080ac:	018c303a 	nor	r6,zero,r6
  8080b0:	d9800515 	stw	r6,20(sp)
  8080b4:	a80b883a 	mov	r5,r21
  8080b8:	e009883a 	mov	r4,fp
  8080bc:	080a0f40 	call	80a0f4 <_Bfree>
  8080c0:	883e4926 	beq	r17,zero,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  8080c4:	003fad06 	br	807f7c <__alt_mem_onchip_mem+0xff787f7c>
  8080c8:	d9c01117 	ldw	r7,68(sp)
  8080cc:	3801bc26 	beq	r7,zero,8087c0 <_dtoa_r+0x1480>
  8080d0:	10810cc4 	addi	r2,r2,1075
  8080d4:	dd400a17 	ldw	r21,40(sp)
  8080d8:	dd000817 	ldw	r20,32(sp)
  8080dc:	003f0a06 	br	807d08 <__alt_mem_onchip_mem+0xff787d08>
  8080e0:	00800704 	movi	r2,28
  8080e4:	d9000817 	ldw	r4,32(sp)
  8080e8:	a0a9883a 	add	r20,r20,r2
  8080ec:	b0ad883a 	add	r22,r22,r2
  8080f0:	2089883a 	add	r4,r4,r2
  8080f4:	d9000815 	stw	r4,32(sp)
  8080f8:	003f5106 	br	807e40 <__alt_mem_onchip_mem+0xff787e40>
  8080fc:	d8c00317 	ldw	r3,12(sp)
  808100:	b8c1fc0e 	bge	r23,r3,8088f4 <_dtoa_r+0x15b4>
  808104:	0027883a 	mov	r19,zero
  808108:	b805883a 	mov	r2,r23
  80810c:	003f3e06 	br	807e08 <__alt_mem_onchip_mem+0xff787e08>
  808110:	880b883a 	mov	r5,r17
  808114:	e009883a 	mov	r4,fp
  808118:	000f883a 	mov	r7,zero
  80811c:	01800284 	movi	r6,10
  808120:	080a11c0 	call	80a11c <__multadd>
  808124:	d9000c17 	ldw	r4,48(sp)
  808128:	1023883a 	mov	r17,r2
  80812c:	0102040e 	bge	zero,r4,808940 <_dtoa_r+0x1600>
  808130:	d9000615 	stw	r4,24(sp)
  808134:	0500050e 	bge	zero,r20,80814c <_dtoa_r+0xe0c>
  808138:	880b883a 	mov	r5,r17
  80813c:	a00d883a 	mov	r6,r20
  808140:	e009883a 	mov	r4,fp
  808144:	080a7cc0 	call	80a7cc <__lshift>
  808148:	1023883a 	mov	r17,r2
  80814c:	9801241e 	bne	r19,zero,8085e0 <_dtoa_r+0x12a0>
  808150:	8829883a 	mov	r20,r17
  808154:	d9000617 	ldw	r4,24(sp)
  808158:	dcc00717 	ldw	r19,28(sp)
  80815c:	9480004c 	andi	r18,r18,1
  808160:	20bfffc4 	addi	r2,r4,-1
  808164:	9885883a 	add	r2,r19,r2
  808168:	d8800415 	stw	r2,16(sp)
  80816c:	dc800615 	stw	r18,24(sp)
  808170:	a80b883a 	mov	r5,r21
  808174:	8009883a 	mov	r4,r16
  808178:	08071400 	call	807140 <quorem>
  80817c:	880b883a 	mov	r5,r17
  808180:	8009883a 	mov	r4,r16
  808184:	102f883a 	mov	r23,r2
  808188:	080a9140 	call	80a914 <__mcmp>
  80818c:	a80b883a 	mov	r5,r21
  808190:	a00d883a 	mov	r6,r20
  808194:	e009883a 	mov	r4,fp
  808198:	102d883a 	mov	r22,r2
  80819c:	080a9740 	call	80a974 <__mdiff>
  8081a0:	1007883a 	mov	r3,r2
  8081a4:	10800317 	ldw	r2,12(r2)
  8081a8:	bc800c04 	addi	r18,r23,48
  8081ac:	180b883a 	mov	r5,r3
  8081b0:	10004e1e 	bne	r2,zero,8082ec <_dtoa_r+0xfac>
  8081b4:	8009883a 	mov	r4,r16
  8081b8:	d8c01615 	stw	r3,88(sp)
  8081bc:	080a9140 	call	80a914 <__mcmp>
  8081c0:	d8c01617 	ldw	r3,88(sp)
  8081c4:	e009883a 	mov	r4,fp
  8081c8:	d8801615 	stw	r2,88(sp)
  8081cc:	180b883a 	mov	r5,r3
  8081d0:	080a0f40 	call	80a0f4 <_Bfree>
  8081d4:	d8801617 	ldw	r2,88(sp)
  8081d8:	1000041e 	bne	r2,zero,8081ec <_dtoa_r+0xeac>
  8081dc:	d9800317 	ldw	r6,12(sp)
  8081e0:	3000021e 	bne	r6,zero,8081ec <_dtoa_r+0xeac>
  8081e4:	d8c00617 	ldw	r3,24(sp)
  8081e8:	18003726 	beq	r3,zero,8082c8 <_dtoa_r+0xf88>
  8081ec:	b0002016 	blt	r22,zero,808270 <_dtoa_r+0xf30>
  8081f0:	b000041e 	bne	r22,zero,808204 <_dtoa_r+0xec4>
  8081f4:	d9000317 	ldw	r4,12(sp)
  8081f8:	2000021e 	bne	r4,zero,808204 <_dtoa_r+0xec4>
  8081fc:	d8c00617 	ldw	r3,24(sp)
  808200:	18001b26 	beq	r3,zero,808270 <_dtoa_r+0xf30>
  808204:	00810716 	blt	zero,r2,808624 <_dtoa_r+0x12e4>
  808208:	d8c00417 	ldw	r3,16(sp)
  80820c:	9d800044 	addi	r22,r19,1
  808210:	9c800005 	stb	r18,0(r19)
  808214:	b02f883a 	mov	r23,r22
  808218:	98c10626 	beq	r19,r3,808634 <_dtoa_r+0x12f4>
  80821c:	800b883a 	mov	r5,r16
  808220:	000f883a 	mov	r7,zero
  808224:	01800284 	movi	r6,10
  808228:	e009883a 	mov	r4,fp
  80822c:	080a11c0 	call	80a11c <__multadd>
  808230:	1021883a 	mov	r16,r2
  808234:	000f883a 	mov	r7,zero
  808238:	01800284 	movi	r6,10
  80823c:	880b883a 	mov	r5,r17
  808240:	e009883a 	mov	r4,fp
  808244:	8d002526 	beq	r17,r20,8082dc <_dtoa_r+0xf9c>
  808248:	080a11c0 	call	80a11c <__multadd>
  80824c:	a00b883a 	mov	r5,r20
  808250:	000f883a 	mov	r7,zero
  808254:	01800284 	movi	r6,10
  808258:	e009883a 	mov	r4,fp
  80825c:	1023883a 	mov	r17,r2
  808260:	080a11c0 	call	80a11c <__multadd>
  808264:	1029883a 	mov	r20,r2
  808268:	b027883a 	mov	r19,r22
  80826c:	003fc006 	br	808170 <__alt_mem_onchip_mem+0xff788170>
  808270:	9011883a 	mov	r8,r18
  808274:	00800e0e 	bge	zero,r2,8082b0 <_dtoa_r+0xf70>
  808278:	800b883a 	mov	r5,r16
  80827c:	01800044 	movi	r6,1
  808280:	e009883a 	mov	r4,fp
  808284:	da001715 	stw	r8,92(sp)
  808288:	080a7cc0 	call	80a7cc <__lshift>
  80828c:	a80b883a 	mov	r5,r21
  808290:	1009883a 	mov	r4,r2
  808294:	1021883a 	mov	r16,r2
  808298:	080a9140 	call	80a914 <__mcmp>
  80829c:	da001717 	ldw	r8,92(sp)
  8082a0:	0081960e 	bge	zero,r2,8088fc <_dtoa_r+0x15bc>
  8082a4:	00800e44 	movi	r2,57
  8082a8:	40817026 	beq	r8,r2,80886c <_dtoa_r+0x152c>
  8082ac:	ba000c44 	addi	r8,r23,49
  8082b0:	8825883a 	mov	r18,r17
  8082b4:	9dc00044 	addi	r23,r19,1
  8082b8:	9a000005 	stb	r8,0(r19)
  8082bc:	a023883a 	mov	r17,r20
  8082c0:	dc000915 	stw	r16,36(sp)
  8082c4:	003f2406 	br	807f58 <__alt_mem_onchip_mem+0xff787f58>
  8082c8:	00800e44 	movi	r2,57
  8082cc:	9011883a 	mov	r8,r18
  8082d0:	90816626 	beq	r18,r2,80886c <_dtoa_r+0x152c>
  8082d4:	05bff516 	blt	zero,r22,8082ac <__alt_mem_onchip_mem+0xff7882ac>
  8082d8:	003ff506 	br	8082b0 <__alt_mem_onchip_mem+0xff7882b0>
  8082dc:	080a11c0 	call	80a11c <__multadd>
  8082e0:	1023883a 	mov	r17,r2
  8082e4:	1029883a 	mov	r20,r2
  8082e8:	003fdf06 	br	808268 <__alt_mem_onchip_mem+0xff788268>
  8082ec:	e009883a 	mov	r4,fp
  8082f0:	080a0f40 	call	80a0f4 <_Bfree>
  8082f4:	00800044 	movi	r2,1
  8082f8:	003fbc06 	br	8081ec <__alt_mem_onchip_mem+0xff7881ec>
  8082fc:	a80b883a 	mov	r5,r21
  808300:	8009883a 	mov	r4,r16
  808304:	080a9140 	call	80a914 <__mcmp>
  808308:	103edb0e 	bge	r2,zero,807e78 <__alt_mem_onchip_mem+0xff787e78>
  80830c:	800b883a 	mov	r5,r16
  808310:	000f883a 	mov	r7,zero
  808314:	01800284 	movi	r6,10
  808318:	e009883a 	mov	r4,fp
  80831c:	080a11c0 	call	80a11c <__multadd>
  808320:	1021883a 	mov	r16,r2
  808324:	d8800517 	ldw	r2,20(sp)
  808328:	d8c00b17 	ldw	r3,44(sp)
  80832c:	10bfffc4 	addi	r2,r2,-1
  808330:	d8800515 	stw	r2,20(sp)
  808334:	183f761e 	bne	r3,zero,808110 <__alt_mem_onchip_mem+0xff788110>
  808338:	d9000c17 	ldw	r4,48(sp)
  80833c:	0101730e 	bge	zero,r4,80890c <_dtoa_r+0x15cc>
  808340:	d9000615 	stw	r4,24(sp)
  808344:	003ed006 	br	807e88 <__alt_mem_onchip_mem+0xff787e88>
  808348:	00800084 	movi	r2,2
  80834c:	3081861e 	bne	r6,r2,808968 <_dtoa_r+0x1628>
  808350:	d8000b15 	stw	zero,44(sp)
  808354:	003f3c06 	br	808048 <__alt_mem_onchip_mem+0xff788048>
  808358:	dc000917 	ldw	r16,36(sp)
  80835c:	003e9206 	br	807da8 <__alt_mem_onchip_mem+0xff787da8>
  808360:	d9c00317 	ldw	r7,12(sp)
  808364:	00800084 	movi	r2,2
  808368:	11fec50e 	bge	r2,r7,807e80 <__alt_mem_onchip_mem+0xff787e80>
  80836c:	d9000617 	ldw	r4,24(sp)
  808370:	20013c1e 	bne	r4,zero,808864 <_dtoa_r+0x1524>
  808374:	a80b883a 	mov	r5,r21
  808378:	000f883a 	mov	r7,zero
  80837c:	01800144 	movi	r6,5
  808380:	e009883a 	mov	r4,fp
  808384:	080a11c0 	call	80a11c <__multadd>
  808388:	100b883a 	mov	r5,r2
  80838c:	8009883a 	mov	r4,r16
  808390:	102b883a 	mov	r21,r2
  808394:	080a9140 	call	80a914 <__mcmp>
  808398:	dc000915 	stw	r16,36(sp)
  80839c:	00bf410e 	bge	zero,r2,8080a4 <__alt_mem_onchip_mem+0xff7880a4>
  8083a0:	d9c00717 	ldw	r7,28(sp)
  8083a4:	00800c44 	movi	r2,49
  8083a8:	38800005 	stb	r2,0(r7)
  8083ac:	d8800517 	ldw	r2,20(sp)
  8083b0:	3dc00044 	addi	r23,r7,1
  8083b4:	10800044 	addi	r2,r2,1
  8083b8:	d8800515 	stw	r2,20(sp)
  8083bc:	003f3d06 	br	8080b4 <__alt_mem_onchip_mem+0xff7880b4>
  8083c0:	d9800517 	ldw	r6,20(sp)
  8083c4:	d9c00717 	ldw	r7,28(sp)
  8083c8:	00800c44 	movi	r2,49
  8083cc:	31800044 	addi	r6,r6,1
  8083d0:	d9800515 	stw	r6,20(sp)
  8083d4:	38800005 	stb	r2,0(r7)
  8083d8:	003edf06 	br	807f58 <__alt_mem_onchip_mem+0xff787f58>
  8083dc:	d8000b15 	stw	zero,44(sp)
  8083e0:	003c9f06 	br	807660 <__alt_mem_onchip_mem+0xff787660>
  8083e4:	903e7e1e 	bne	r18,zero,807de0 <__alt_mem_onchip_mem+0xff787de0>
  8083e8:	00800434 	movhi	r2,16
  8083ec:	10bfffc4 	addi	r2,r2,-1
  8083f0:	9884703a 	and	r2,r19,r2
  8083f4:	1000ea1e 	bne	r2,zero,8087a0 <_dtoa_r+0x1460>
  8083f8:	9cdffc2c 	andhi	r19,r19,32752
  8083fc:	9800e826 	beq	r19,zero,8087a0 <_dtoa_r+0x1460>
  808400:	d9c00817 	ldw	r7,32(sp)
  808404:	b5800044 	addi	r22,r22,1
  808408:	04c00044 	movi	r19,1
  80840c:	39c00044 	addi	r7,r7,1
  808410:	d9c00815 	stw	r7,32(sp)
  808414:	d8800d17 	ldw	r2,52(sp)
  808418:	103e721e 	bne	r2,zero,807de4 <__alt_mem_onchip_mem+0xff787de4>
  80841c:	00800044 	movi	r2,1
  808420:	003e7906 	br	807e08 <__alt_mem_onchip_mem+0xff787e08>
  808424:	8009883a 	mov	r4,r16
  808428:	08104400 	call	810440 <__floatsidf>
  80842c:	d9800f17 	ldw	r6,60(sp)
  808430:	d9c01017 	ldw	r7,64(sp)
  808434:	1009883a 	mov	r4,r2
  808438:	180b883a 	mov	r5,r3
  80843c:	080f3ac0 	call	80f3ac <__muldf3>
  808440:	000d883a 	mov	r6,zero
  808444:	01d00734 	movhi	r7,16412
  808448:	1009883a 	mov	r4,r2
  80844c:	180b883a 	mov	r5,r3
  808450:	080dfc00 	call	80dfc0 <__adddf3>
  808454:	047f3034 	movhi	r17,64704
  808458:	1021883a 	mov	r16,r2
  80845c:	1c63883a 	add	r17,r3,r17
  808460:	d9000f17 	ldw	r4,60(sp)
  808464:	d9401017 	ldw	r5,64(sp)
  808468:	000d883a 	mov	r6,zero
  80846c:	01d00534 	movhi	r7,16404
  808470:	080fac40 	call	80fac4 <__subdf3>
  808474:	800d883a 	mov	r6,r16
  808478:	880f883a 	mov	r7,r17
  80847c:	1009883a 	mov	r4,r2
  808480:	180b883a 	mov	r5,r3
  808484:	102b883a 	mov	r21,r2
  808488:	1829883a 	mov	r20,r3
  80848c:	080f1dc0 	call	80f1dc <__gedf2>
  808490:	00806c16 	blt	zero,r2,808644 <_dtoa_r+0x1304>
  808494:	89e0003c 	xorhi	r7,r17,32768
  808498:	800d883a 	mov	r6,r16
  80849c:	a809883a 	mov	r4,r21
  8084a0:	a00b883a 	mov	r5,r20
  8084a4:	080f2b80 	call	80f2b8 <__ledf2>
  8084a8:	103d7e0e 	bge	r2,zero,807aa4 <__alt_mem_onchip_mem+0xff787aa4>
  8084ac:	002b883a 	mov	r21,zero
  8084b0:	0023883a 	mov	r17,zero
  8084b4:	003efb06 	br	8080a4 <__alt_mem_onchip_mem+0xff7880a4>
  8084b8:	d8800717 	ldw	r2,28(sp)
  8084bc:	003bd006 	br	807400 <__alt_mem_onchip_mem+0xff787400>
  8084c0:	d9000a17 	ldw	r4,40(sp)
  8084c4:	d9800d17 	ldw	r6,52(sp)
  8084c8:	dd400a15 	stw	r21,40(sp)
  8084cc:	a905c83a 	sub	r2,r21,r4
  8084d0:	308d883a 	add	r6,r6,r2
  8084d4:	d9800d15 	stw	r6,52(sp)
  8084d8:	002b883a 	mov	r21,zero
  8084dc:	003e0606 	br	807cf8 <__alt_mem_onchip_mem+0xff787cf8>
  8084e0:	9023883a 	mov	r17,r18
  8084e4:	9829883a 	mov	r20,r19
  8084e8:	04000084 	movi	r16,2
  8084ec:	003c9206 	br	807738 <__alt_mem_onchip_mem+0xff787738>
  8084f0:	04000044 	movi	r16,1
  8084f4:	dc000c15 	stw	r16,48(sp)
  8084f8:	dc000615 	stw	r16,24(sp)
  8084fc:	dc002215 	stw	r16,136(sp)
  808500:	e0001115 	stw	zero,68(fp)
  808504:	000b883a 	mov	r5,zero
  808508:	003c6906 	br	8076b0 <__alt_mem_onchip_mem+0xff7876b0>
  80850c:	3021883a 	mov	r16,r6
  808510:	003ffb06 	br	808500 <__alt_mem_onchip_mem+0xff788500>
  808514:	1000021e 	bne	r2,zero,808520 <_dtoa_r+0x11e0>
  808518:	4200004c 	andi	r8,r8,1
  80851c:	403e7d1e 	bne	r8,zero,807f14 <__alt_mem_onchip_mem+0xff787f14>
  808520:	01000c04 	movi	r4,48
  808524:	00000106 	br	80852c <_dtoa_r+0x11ec>
  808528:	102f883a 	mov	r23,r2
  80852c:	b8bfffc4 	addi	r2,r23,-1
  808530:	10c00007 	ldb	r3,0(r2)
  808534:	193ffc26 	beq	r3,r4,808528 <__alt_mem_onchip_mem+0xff788528>
  808538:	003e8706 	br	807f58 <__alt_mem_onchip_mem+0xff787f58>
  80853c:	d8800517 	ldw	r2,20(sp)
  808540:	00a3c83a 	sub	r17,zero,r2
  808544:	8800a426 	beq	r17,zero,8087d8 <_dtoa_r+0x1498>
  808548:	888003cc 	andi	r2,r17,15
  80854c:	100490fa 	slli	r2,r2,3
  808550:	00c02074 	movhi	r3,129
  808554:	18d29904 	addi	r3,r3,19044
  808558:	1885883a 	add	r2,r3,r2
  80855c:	11800017 	ldw	r6,0(r2)
  808560:	11c00117 	ldw	r7,4(r2)
  808564:	9009883a 	mov	r4,r18
  808568:	980b883a 	mov	r5,r19
  80856c:	8823d13a 	srai	r17,r17,4
  808570:	080f3ac0 	call	80f3ac <__muldf3>
  808574:	d8800f15 	stw	r2,60(sp)
  808578:	d8c01015 	stw	r3,64(sp)
  80857c:	8800e826 	beq	r17,zero,808920 <_dtoa_r+0x15e0>
  808580:	05002074 	movhi	r20,129
  808584:	a5128f04 	addi	r20,r20,19004
  808588:	04000084 	movi	r16,2
  80858c:	8980004c 	andi	r6,r17,1
  808590:	1009883a 	mov	r4,r2
  808594:	8823d07a 	srai	r17,r17,1
  808598:	180b883a 	mov	r5,r3
  80859c:	30000426 	beq	r6,zero,8085b0 <_dtoa_r+0x1270>
  8085a0:	a1800017 	ldw	r6,0(r20)
  8085a4:	a1c00117 	ldw	r7,4(r20)
  8085a8:	84000044 	addi	r16,r16,1
  8085ac:	080f3ac0 	call	80f3ac <__muldf3>
  8085b0:	a5000204 	addi	r20,r20,8
  8085b4:	883ff51e 	bne	r17,zero,80858c <__alt_mem_onchip_mem+0xff78858c>
  8085b8:	d8800f15 	stw	r2,60(sp)
  8085bc:	d8c01015 	stw	r3,64(sp)
  8085c0:	003c7606 	br	80779c <__alt_mem_onchip_mem+0xff78779c>
  8085c4:	00c00c04 	movi	r3,48
  8085c8:	10c00005 	stb	r3,0(r2)
  8085cc:	d8c00517 	ldw	r3,20(sp)
  8085d0:	bd3fffc3 	ldbu	r20,-1(r23)
  8085d4:	18c00044 	addi	r3,r3,1
  8085d8:	d8c00515 	stw	r3,20(sp)
  8085dc:	003db906 	br	807cc4 <__alt_mem_onchip_mem+0xff787cc4>
  8085e0:	89400117 	ldw	r5,4(r17)
  8085e4:	e009883a 	mov	r4,fp
  8085e8:	080a04c0 	call	80a04c <_Balloc>
  8085ec:	89800417 	ldw	r6,16(r17)
  8085f0:	89400304 	addi	r5,r17,12
  8085f4:	11000304 	addi	r4,r2,12
  8085f8:	31800084 	addi	r6,r6,2
  8085fc:	318d883a 	add	r6,r6,r6
  808600:	318d883a 	add	r6,r6,r6
  808604:	1027883a 	mov	r19,r2
  808608:	0809da80 	call	809da8 <memcpy>
  80860c:	01800044 	movi	r6,1
  808610:	980b883a 	mov	r5,r19
  808614:	e009883a 	mov	r4,fp
  808618:	080a7cc0 	call	80a7cc <__lshift>
  80861c:	1029883a 	mov	r20,r2
  808620:	003ecc06 	br	808154 <__alt_mem_onchip_mem+0xff788154>
  808624:	00800e44 	movi	r2,57
  808628:	90809026 	beq	r18,r2,80886c <_dtoa_r+0x152c>
  80862c:	92000044 	addi	r8,r18,1
  808630:	003f1f06 	br	8082b0 <__alt_mem_onchip_mem+0xff7882b0>
  808634:	9011883a 	mov	r8,r18
  808638:	8825883a 	mov	r18,r17
  80863c:	a023883a 	mov	r17,r20
  808640:	003e2906 	br	807ee8 <__alt_mem_onchip_mem+0xff787ee8>
  808644:	002b883a 	mov	r21,zero
  808648:	0023883a 	mov	r17,zero
  80864c:	003f5406 	br	8083a0 <__alt_mem_onchip_mem+0xff7883a0>
  808650:	61bfffc4 	addi	r6,r12,-1
  808654:	300490fa 	slli	r2,r6,3
  808658:	00c02074 	movhi	r3,129
  80865c:	18d29904 	addi	r3,r3,19044
  808660:	1885883a 	add	r2,r3,r2
  808664:	11000017 	ldw	r4,0(r2)
  808668:	11400117 	ldw	r5,4(r2)
  80866c:	d8800717 	ldw	r2,28(sp)
  808670:	880f883a 	mov	r7,r17
  808674:	d9801215 	stw	r6,72(sp)
  808678:	800d883a 	mov	r6,r16
  80867c:	db001615 	stw	r12,88(sp)
  808680:	15c00044 	addi	r23,r2,1
  808684:	080f3ac0 	call	80f3ac <__muldf3>
  808688:	d9401017 	ldw	r5,64(sp)
  80868c:	d9000f17 	ldw	r4,60(sp)
  808690:	d8c01515 	stw	r3,84(sp)
  808694:	d8801415 	stw	r2,80(sp)
  808698:	08103c00 	call	8103c0 <__fixdfsi>
  80869c:	1009883a 	mov	r4,r2
  8086a0:	1021883a 	mov	r16,r2
  8086a4:	08104400 	call	810440 <__floatsidf>
  8086a8:	d9000f17 	ldw	r4,60(sp)
  8086ac:	d9401017 	ldw	r5,64(sp)
  8086b0:	100d883a 	mov	r6,r2
  8086b4:	180f883a 	mov	r7,r3
  8086b8:	080fac40 	call	80fac4 <__subdf3>
  8086bc:	1829883a 	mov	r20,r3
  8086c0:	d8c00717 	ldw	r3,28(sp)
  8086c4:	84000c04 	addi	r16,r16,48
  8086c8:	1023883a 	mov	r17,r2
  8086cc:	1c000005 	stb	r16,0(r3)
  8086d0:	db001617 	ldw	r12,88(sp)
  8086d4:	00800044 	movi	r2,1
  8086d8:	60802226 	beq	r12,r2,808764 <_dtoa_r+0x1424>
  8086dc:	d9c00717 	ldw	r7,28(sp)
  8086e0:	8805883a 	mov	r2,r17
  8086e4:	b82b883a 	mov	r21,r23
  8086e8:	3b19883a 	add	r12,r7,r12
  8086ec:	6023883a 	mov	r17,r12
  8086f0:	a007883a 	mov	r3,r20
  8086f4:	dc800f15 	stw	r18,60(sp)
  8086f8:	000d883a 	mov	r6,zero
  8086fc:	01d00934 	movhi	r7,16420
  808700:	1009883a 	mov	r4,r2
  808704:	180b883a 	mov	r5,r3
  808708:	080f3ac0 	call	80f3ac <__muldf3>
  80870c:	180b883a 	mov	r5,r3
  808710:	1009883a 	mov	r4,r2
  808714:	1829883a 	mov	r20,r3
  808718:	1025883a 	mov	r18,r2
  80871c:	08103c00 	call	8103c0 <__fixdfsi>
  808720:	1009883a 	mov	r4,r2
  808724:	1021883a 	mov	r16,r2
  808728:	08104400 	call	810440 <__floatsidf>
  80872c:	100d883a 	mov	r6,r2
  808730:	180f883a 	mov	r7,r3
  808734:	9009883a 	mov	r4,r18
  808738:	a00b883a 	mov	r5,r20
  80873c:	84000c04 	addi	r16,r16,48
  808740:	080fac40 	call	80fac4 <__subdf3>
  808744:	ad400044 	addi	r21,r21,1
  808748:	ac3fffc5 	stb	r16,-1(r21)
  80874c:	ac7fea1e 	bne	r21,r17,8086f8 <__alt_mem_onchip_mem+0xff7886f8>
  808750:	1023883a 	mov	r17,r2
  808754:	d8801217 	ldw	r2,72(sp)
  808758:	dc800f17 	ldw	r18,60(sp)
  80875c:	1829883a 	mov	r20,r3
  808760:	b8af883a 	add	r23,r23,r2
  808764:	d9001417 	ldw	r4,80(sp)
  808768:	d9401517 	ldw	r5,84(sp)
  80876c:	000d883a 	mov	r6,zero
  808770:	01cff834 	movhi	r7,16352
  808774:	080dfc00 	call	80dfc0 <__adddf3>
  808778:	880d883a 	mov	r6,r17
  80877c:	a00f883a 	mov	r7,r20
  808780:	1009883a 	mov	r4,r2
  808784:	180b883a 	mov	r5,r3
  808788:	080f2b80 	call	80f2b8 <__ledf2>
  80878c:	10003e0e 	bge	r2,zero,808888 <_dtoa_r+0x1548>
  808790:	d9001317 	ldw	r4,76(sp)
  808794:	bd3fffc3 	ldbu	r20,-1(r23)
  808798:	d9000515 	stw	r4,20(sp)
  80879c:	003d3b06 	br	807c8c <__alt_mem_onchip_mem+0xff787c8c>
  8087a0:	0027883a 	mov	r19,zero
  8087a4:	003f1b06 	br	808414 <__alt_mem_onchip_mem+0xff788414>
  8087a8:	d8800817 	ldw	r2,32(sp)
  8087ac:	11e9c83a 	sub	r20,r2,r7
  8087b0:	0005883a 	mov	r2,zero
  8087b4:	003d5406 	br	807d08 <__alt_mem_onchip_mem+0xff787d08>
  8087b8:	00800044 	movi	r2,1
  8087bc:	003dc706 	br	807edc <__alt_mem_onchip_mem+0xff787edc>
  8087c0:	d8c00217 	ldw	r3,8(sp)
  8087c4:	00800d84 	movi	r2,54
  8087c8:	dd400a17 	ldw	r21,40(sp)
  8087cc:	10c5c83a 	sub	r2,r2,r3
  8087d0:	dd000817 	ldw	r20,32(sp)
  8087d4:	003d4c06 	br	807d08 <__alt_mem_onchip_mem+0xff787d08>
  8087d8:	dc800f15 	stw	r18,60(sp)
  8087dc:	dcc01015 	stw	r19,64(sp)
  8087e0:	04000084 	movi	r16,2
  8087e4:	003bed06 	br	80779c <__alt_mem_onchip_mem+0xff78779c>
  8087e8:	d9000617 	ldw	r4,24(sp)
  8087ec:	203f0d26 	beq	r4,zero,808424 <__alt_mem_onchip_mem+0xff788424>
  8087f0:	d9800c17 	ldw	r6,48(sp)
  8087f4:	01bcab0e 	bge	zero,r6,807aa4 <__alt_mem_onchip_mem+0xff787aa4>
  8087f8:	d9401017 	ldw	r5,64(sp)
  8087fc:	d9000f17 	ldw	r4,60(sp)
  808800:	000d883a 	mov	r6,zero
  808804:	01d00934 	movhi	r7,16420
  808808:	080f3ac0 	call	80f3ac <__muldf3>
  80880c:	81000044 	addi	r4,r16,1
  808810:	d8800f15 	stw	r2,60(sp)
  808814:	d8c01015 	stw	r3,64(sp)
  808818:	08104400 	call	810440 <__floatsidf>
  80881c:	d9800f17 	ldw	r6,60(sp)
  808820:	d9c01017 	ldw	r7,64(sp)
  808824:	1009883a 	mov	r4,r2
  808828:	180b883a 	mov	r5,r3
  80882c:	080f3ac0 	call	80f3ac <__muldf3>
  808830:	01d00734 	movhi	r7,16412
  808834:	000d883a 	mov	r6,zero
  808838:	1009883a 	mov	r4,r2
  80883c:	180b883a 	mov	r5,r3
  808840:	080dfc00 	call	80dfc0 <__adddf3>
  808844:	d9c00517 	ldw	r7,20(sp)
  808848:	047f3034 	movhi	r17,64704
  80884c:	1021883a 	mov	r16,r2
  808850:	39ffffc4 	addi	r7,r7,-1
  808854:	d9c01315 	stw	r7,76(sp)
  808858:	1c63883a 	add	r17,r3,r17
  80885c:	db000c17 	ldw	r12,48(sp)
  808860:	003bea06 	br	80780c <__alt_mem_onchip_mem+0xff78780c>
  808864:	dc000915 	stw	r16,36(sp)
  808868:	003e0e06 	br	8080a4 <__alt_mem_onchip_mem+0xff7880a4>
  80886c:	01000e44 	movi	r4,57
  808870:	8825883a 	mov	r18,r17
  808874:	9dc00044 	addi	r23,r19,1
  808878:	99000005 	stb	r4,0(r19)
  80887c:	a023883a 	mov	r17,r20
  808880:	dc000915 	stw	r16,36(sp)
  808884:	003da406 	br	807f18 <__alt_mem_onchip_mem+0xff787f18>
  808888:	d9801417 	ldw	r6,80(sp)
  80888c:	d9c01517 	ldw	r7,84(sp)
  808890:	0009883a 	mov	r4,zero
  808894:	014ff834 	movhi	r5,16352
  808898:	080fac40 	call	80fac4 <__subdf3>
  80889c:	880d883a 	mov	r6,r17
  8088a0:	a00f883a 	mov	r7,r20
  8088a4:	1009883a 	mov	r4,r2
  8088a8:	180b883a 	mov	r5,r3
  8088ac:	080f1dc0 	call	80f1dc <__gedf2>
  8088b0:	00bc7c0e 	bge	zero,r2,807aa4 <__alt_mem_onchip_mem+0xff787aa4>
  8088b4:	01000c04 	movi	r4,48
  8088b8:	00000106 	br	8088c0 <_dtoa_r+0x1580>
  8088bc:	102f883a 	mov	r23,r2
  8088c0:	b8bfffc4 	addi	r2,r23,-1
  8088c4:	10c00007 	ldb	r3,0(r2)
  8088c8:	193ffc26 	beq	r3,r4,8088bc <__alt_mem_onchip_mem+0xff7888bc>
  8088cc:	d9801317 	ldw	r6,76(sp)
  8088d0:	d9800515 	stw	r6,20(sp)
  8088d4:	003c4406 	br	8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  8088d8:	d9801317 	ldw	r6,76(sp)
  8088dc:	d9800515 	stw	r6,20(sp)
  8088e0:	003cea06 	br	807c8c <__alt_mem_onchip_mem+0xff787c8c>
  8088e4:	dd800f17 	ldw	r22,60(sp)
  8088e8:	dcc01017 	ldw	r19,64(sp)
  8088ec:	dc801217 	ldw	r18,72(sp)
  8088f0:	003c6c06 	br	807aa4 <__alt_mem_onchip_mem+0xff787aa4>
  8088f4:	903e031e 	bne	r18,zero,808104 <__alt_mem_onchip_mem+0xff788104>
  8088f8:	003ebb06 	br	8083e8 <__alt_mem_onchip_mem+0xff7883e8>
  8088fc:	103e6c1e 	bne	r2,zero,8082b0 <__alt_mem_onchip_mem+0xff7882b0>
  808900:	4080004c 	andi	r2,r8,1
  808904:	103e6a26 	beq	r2,zero,8082b0 <__alt_mem_onchip_mem+0xff7882b0>
  808908:	003e6606 	br	8082a4 <__alt_mem_onchip_mem+0xff7882a4>
  80890c:	d8c00317 	ldw	r3,12(sp)
  808910:	00800084 	movi	r2,2
  808914:	10c02916 	blt	r2,r3,8089bc <_dtoa_r+0x167c>
  808918:	d9000c17 	ldw	r4,48(sp)
  80891c:	003e8806 	br	808340 <__alt_mem_onchip_mem+0xff788340>
  808920:	04000084 	movi	r16,2
  808924:	003b9d06 	br	80779c <__alt_mem_onchip_mem+0xff78779c>
  808928:	d9001317 	ldw	r4,76(sp)
  80892c:	d9000515 	stw	r4,20(sp)
  808930:	003cd606 	br	807c8c <__alt_mem_onchip_mem+0xff787c8c>
  808934:	d8801317 	ldw	r2,76(sp)
  808938:	d8800515 	stw	r2,20(sp)
  80893c:	003c2a06 	br	8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  808940:	d9800317 	ldw	r6,12(sp)
  808944:	00800084 	movi	r2,2
  808948:	11801516 	blt	r2,r6,8089a0 <_dtoa_r+0x1660>
  80894c:	d9c00c17 	ldw	r7,48(sp)
  808950:	d9c00615 	stw	r7,24(sp)
  808954:	003df706 	br	808134 <__alt_mem_onchip_mem+0xff788134>
  808958:	193d3926 	beq	r3,r4,807e40 <__alt_mem_onchip_mem+0xff787e40>
  80895c:	00c00f04 	movi	r3,60
  808960:	1885c83a 	sub	r2,r3,r2
  808964:	003ddf06 	br	8080e4 <__alt_mem_onchip_mem+0xff7880e4>
  808968:	e009883a 	mov	r4,fp
  80896c:	e0001115 	stw	zero,68(fp)
  808970:	000b883a 	mov	r5,zero
  808974:	080a04c0 	call	80a04c <_Balloc>
  808978:	d8800715 	stw	r2,28(sp)
  80897c:	d8c00717 	ldw	r3,28(sp)
  808980:	00bfffc4 	movi	r2,-1
  808984:	01000044 	movi	r4,1
  808988:	d8800c15 	stw	r2,48(sp)
  80898c:	e0c01015 	stw	r3,64(fp)
  808990:	d9000b15 	stw	r4,44(sp)
  808994:	d8800615 	stw	r2,24(sp)
  808998:	d8002215 	stw	zero,136(sp)
  80899c:	003c4106 	br	807aa4 <__alt_mem_onchip_mem+0xff787aa4>
  8089a0:	d8c00c17 	ldw	r3,48(sp)
  8089a4:	d8c00615 	stw	r3,24(sp)
  8089a8:	003e7006 	br	80836c <__alt_mem_onchip_mem+0xff78836c>
  8089ac:	04400044 	movi	r17,1
  8089b0:	003b2006 	br	807634 <__alt_mem_onchip_mem+0xff787634>
  8089b4:	000b883a 	mov	r5,zero
  8089b8:	003b3d06 	br	8076b0 <__alt_mem_onchip_mem+0xff7876b0>
  8089bc:	d8800c17 	ldw	r2,48(sp)
  8089c0:	d8800615 	stw	r2,24(sp)
  8089c4:	003e6906 	br	80836c <__alt_mem_onchip_mem+0xff78836c>

008089c8 <__sflush_r>:
  8089c8:	2880030b 	ldhu	r2,12(r5)
  8089cc:	defffb04 	addi	sp,sp,-20
  8089d0:	dcc00315 	stw	r19,12(sp)
  8089d4:	dc400115 	stw	r17,4(sp)
  8089d8:	dfc00415 	stw	ra,16(sp)
  8089dc:	dc800215 	stw	r18,8(sp)
  8089e0:	dc000015 	stw	r16,0(sp)
  8089e4:	10c0020c 	andi	r3,r2,8
  8089e8:	2823883a 	mov	r17,r5
  8089ec:	2027883a 	mov	r19,r4
  8089f0:	1800311e 	bne	r3,zero,808ab8 <__sflush_r+0xf0>
  8089f4:	28c00117 	ldw	r3,4(r5)
  8089f8:	10820014 	ori	r2,r2,2048
  8089fc:	2880030d 	sth	r2,12(r5)
  808a00:	00c04b0e 	bge	zero,r3,808b30 <__sflush_r+0x168>
  808a04:	8a000a17 	ldw	r8,40(r17)
  808a08:	40002326 	beq	r8,zero,808a98 <__sflush_r+0xd0>
  808a0c:	9c000017 	ldw	r16,0(r19)
  808a10:	10c4000c 	andi	r3,r2,4096
  808a14:	98000015 	stw	zero,0(r19)
  808a18:	18004826 	beq	r3,zero,808b3c <__sflush_r+0x174>
  808a1c:	89801417 	ldw	r6,80(r17)
  808a20:	10c0010c 	andi	r3,r2,4
  808a24:	18000626 	beq	r3,zero,808a40 <__sflush_r+0x78>
  808a28:	88c00117 	ldw	r3,4(r17)
  808a2c:	88800c17 	ldw	r2,48(r17)
  808a30:	30cdc83a 	sub	r6,r6,r3
  808a34:	10000226 	beq	r2,zero,808a40 <__sflush_r+0x78>
  808a38:	88800f17 	ldw	r2,60(r17)
  808a3c:	308dc83a 	sub	r6,r6,r2
  808a40:	89400717 	ldw	r5,28(r17)
  808a44:	000f883a 	mov	r7,zero
  808a48:	9809883a 	mov	r4,r19
  808a4c:	403ee83a 	callr	r8
  808a50:	00ffffc4 	movi	r3,-1
  808a54:	10c04426 	beq	r2,r3,808b68 <__sflush_r+0x1a0>
  808a58:	88c0030b 	ldhu	r3,12(r17)
  808a5c:	89000417 	ldw	r4,16(r17)
  808a60:	88000115 	stw	zero,4(r17)
  808a64:	197dffcc 	andi	r5,r3,63487
  808a68:	8940030d 	sth	r5,12(r17)
  808a6c:	89000015 	stw	r4,0(r17)
  808a70:	18c4000c 	andi	r3,r3,4096
  808a74:	18002c1e 	bne	r3,zero,808b28 <__sflush_r+0x160>
  808a78:	89400c17 	ldw	r5,48(r17)
  808a7c:	9c000015 	stw	r16,0(r19)
  808a80:	28000526 	beq	r5,zero,808a98 <__sflush_r+0xd0>
  808a84:	88801004 	addi	r2,r17,64
  808a88:	28800226 	beq	r5,r2,808a94 <__sflush_r+0xcc>
  808a8c:	9809883a 	mov	r4,r19
  808a90:	08091e00 	call	8091e0 <_free_r>
  808a94:	88000c15 	stw	zero,48(r17)
  808a98:	0005883a 	mov	r2,zero
  808a9c:	dfc00417 	ldw	ra,16(sp)
  808aa0:	dcc00317 	ldw	r19,12(sp)
  808aa4:	dc800217 	ldw	r18,8(sp)
  808aa8:	dc400117 	ldw	r17,4(sp)
  808aac:	dc000017 	ldw	r16,0(sp)
  808ab0:	dec00504 	addi	sp,sp,20
  808ab4:	f800283a 	ret
  808ab8:	2c800417 	ldw	r18,16(r5)
  808abc:	903ff626 	beq	r18,zero,808a98 <__alt_mem_onchip_mem+0xff788a98>
  808ac0:	2c000017 	ldw	r16,0(r5)
  808ac4:	108000cc 	andi	r2,r2,3
  808ac8:	2c800015 	stw	r18,0(r5)
  808acc:	84a1c83a 	sub	r16,r16,r18
  808ad0:	1000131e 	bne	r2,zero,808b20 <__sflush_r+0x158>
  808ad4:	28800517 	ldw	r2,20(r5)
  808ad8:	88800215 	stw	r2,8(r17)
  808adc:	04000316 	blt	zero,r16,808aec <__sflush_r+0x124>
  808ae0:	003fed06 	br	808a98 <__alt_mem_onchip_mem+0xff788a98>
  808ae4:	90a5883a 	add	r18,r18,r2
  808ae8:	043feb0e 	bge	zero,r16,808a98 <__alt_mem_onchip_mem+0xff788a98>
  808aec:	88800917 	ldw	r2,36(r17)
  808af0:	89400717 	ldw	r5,28(r17)
  808af4:	800f883a 	mov	r7,r16
  808af8:	900d883a 	mov	r6,r18
  808afc:	9809883a 	mov	r4,r19
  808b00:	103ee83a 	callr	r2
  808b04:	80a1c83a 	sub	r16,r16,r2
  808b08:	00bff616 	blt	zero,r2,808ae4 <__alt_mem_onchip_mem+0xff788ae4>
  808b0c:	88c0030b 	ldhu	r3,12(r17)
  808b10:	00bfffc4 	movi	r2,-1
  808b14:	18c01014 	ori	r3,r3,64
  808b18:	88c0030d 	sth	r3,12(r17)
  808b1c:	003fdf06 	br	808a9c <__alt_mem_onchip_mem+0xff788a9c>
  808b20:	0005883a 	mov	r2,zero
  808b24:	003fec06 	br	808ad8 <__alt_mem_onchip_mem+0xff788ad8>
  808b28:	88801415 	stw	r2,80(r17)
  808b2c:	003fd206 	br	808a78 <__alt_mem_onchip_mem+0xff788a78>
  808b30:	28c00f17 	ldw	r3,60(r5)
  808b34:	00ffb316 	blt	zero,r3,808a04 <__alt_mem_onchip_mem+0xff788a04>
  808b38:	003fd706 	br	808a98 <__alt_mem_onchip_mem+0xff788a98>
  808b3c:	89400717 	ldw	r5,28(r17)
  808b40:	000d883a 	mov	r6,zero
  808b44:	01c00044 	movi	r7,1
  808b48:	9809883a 	mov	r4,r19
  808b4c:	403ee83a 	callr	r8
  808b50:	100d883a 	mov	r6,r2
  808b54:	00bfffc4 	movi	r2,-1
  808b58:	30801426 	beq	r6,r2,808bac <__sflush_r+0x1e4>
  808b5c:	8880030b 	ldhu	r2,12(r17)
  808b60:	8a000a17 	ldw	r8,40(r17)
  808b64:	003fae06 	br	808a20 <__alt_mem_onchip_mem+0xff788a20>
  808b68:	98c00017 	ldw	r3,0(r19)
  808b6c:	183fba26 	beq	r3,zero,808a58 <__alt_mem_onchip_mem+0xff788a58>
  808b70:	01000744 	movi	r4,29
  808b74:	19000626 	beq	r3,r4,808b90 <__sflush_r+0x1c8>
  808b78:	01000584 	movi	r4,22
  808b7c:	19000426 	beq	r3,r4,808b90 <__sflush_r+0x1c8>
  808b80:	88c0030b 	ldhu	r3,12(r17)
  808b84:	18c01014 	ori	r3,r3,64
  808b88:	88c0030d 	sth	r3,12(r17)
  808b8c:	003fc306 	br	808a9c <__alt_mem_onchip_mem+0xff788a9c>
  808b90:	8880030b 	ldhu	r2,12(r17)
  808b94:	88c00417 	ldw	r3,16(r17)
  808b98:	88000115 	stw	zero,4(r17)
  808b9c:	10bdffcc 	andi	r2,r2,63487
  808ba0:	8880030d 	sth	r2,12(r17)
  808ba4:	88c00015 	stw	r3,0(r17)
  808ba8:	003fb306 	br	808a78 <__alt_mem_onchip_mem+0xff788a78>
  808bac:	98800017 	ldw	r2,0(r19)
  808bb0:	103fea26 	beq	r2,zero,808b5c <__alt_mem_onchip_mem+0xff788b5c>
  808bb4:	00c00744 	movi	r3,29
  808bb8:	10c00226 	beq	r2,r3,808bc4 <__sflush_r+0x1fc>
  808bbc:	00c00584 	movi	r3,22
  808bc0:	10c0031e 	bne	r2,r3,808bd0 <__sflush_r+0x208>
  808bc4:	9c000015 	stw	r16,0(r19)
  808bc8:	0005883a 	mov	r2,zero
  808bcc:	003fb306 	br	808a9c <__alt_mem_onchip_mem+0xff788a9c>
  808bd0:	88c0030b 	ldhu	r3,12(r17)
  808bd4:	3005883a 	mov	r2,r6
  808bd8:	18c01014 	ori	r3,r3,64
  808bdc:	88c0030d 	sth	r3,12(r17)
  808be0:	003fae06 	br	808a9c <__alt_mem_onchip_mem+0xff788a9c>

00808be4 <_fflush_r>:
  808be4:	defffd04 	addi	sp,sp,-12
  808be8:	dc000115 	stw	r16,4(sp)
  808bec:	dfc00215 	stw	ra,8(sp)
  808bf0:	2021883a 	mov	r16,r4
  808bf4:	20000226 	beq	r4,zero,808c00 <_fflush_r+0x1c>
  808bf8:	20800e17 	ldw	r2,56(r4)
  808bfc:	10000c26 	beq	r2,zero,808c30 <_fflush_r+0x4c>
  808c00:	2880030f 	ldh	r2,12(r5)
  808c04:	1000051e 	bne	r2,zero,808c1c <_fflush_r+0x38>
  808c08:	0005883a 	mov	r2,zero
  808c0c:	dfc00217 	ldw	ra,8(sp)
  808c10:	dc000117 	ldw	r16,4(sp)
  808c14:	dec00304 	addi	sp,sp,12
  808c18:	f800283a 	ret
  808c1c:	8009883a 	mov	r4,r16
  808c20:	dfc00217 	ldw	ra,8(sp)
  808c24:	dc000117 	ldw	r16,4(sp)
  808c28:	dec00304 	addi	sp,sp,12
  808c2c:	08089c81 	jmpi	8089c8 <__sflush_r>
  808c30:	d9400015 	stw	r5,0(sp)
  808c34:	0808fc00 	call	808fc0 <__sinit>
  808c38:	d9400017 	ldw	r5,0(sp)
  808c3c:	003ff006 	br	808c00 <__alt_mem_onchip_mem+0xff788c00>

00808c40 <fflush>:
  808c40:	20000526 	beq	r4,zero,808c58 <fflush+0x18>
  808c44:	00802074 	movhi	r2,129
  808c48:	109aef04 	addi	r2,r2,27580
  808c4c:	200b883a 	mov	r5,r4
  808c50:	11000017 	ldw	r4,0(r2)
  808c54:	0808be41 	jmpi	808be4 <_fflush_r>
  808c58:	00802074 	movhi	r2,129
  808c5c:	109aee04 	addi	r2,r2,27576
  808c60:	11000017 	ldw	r4,0(r2)
  808c64:	01402074 	movhi	r5,129
  808c68:	2962f904 	addi	r5,r5,-29724
  808c6c:	0809a701 	jmpi	809a70 <_fwalk_reent>

00808c70 <__fp_unlock>:
  808c70:	0005883a 	mov	r2,zero
  808c74:	f800283a 	ret

00808c78 <_cleanup_r>:
  808c78:	01402074 	movhi	r5,129
  808c7c:	29739a04 	addi	r5,r5,-12696
  808c80:	0809a701 	jmpi	809a70 <_fwalk_reent>

00808c84 <__sinit.part.1>:
  808c84:	defff704 	addi	sp,sp,-36
  808c88:	00c02074 	movhi	r3,129
  808c8c:	dfc00815 	stw	ra,32(sp)
  808c90:	ddc00715 	stw	r23,28(sp)
  808c94:	dd800615 	stw	r22,24(sp)
  808c98:	dd400515 	stw	r21,20(sp)
  808c9c:	dd000415 	stw	r20,16(sp)
  808ca0:	dcc00315 	stw	r19,12(sp)
  808ca4:	dc800215 	stw	r18,8(sp)
  808ca8:	dc400115 	stw	r17,4(sp)
  808cac:	dc000015 	stw	r16,0(sp)
  808cb0:	18e31e04 	addi	r3,r3,-29576
  808cb4:	24000117 	ldw	r16,4(r4)
  808cb8:	20c00f15 	stw	r3,60(r4)
  808cbc:	2080bb04 	addi	r2,r4,748
  808cc0:	00c000c4 	movi	r3,3
  808cc4:	20c0b915 	stw	r3,740(r4)
  808cc8:	2080ba15 	stw	r2,744(r4)
  808ccc:	2000b815 	stw	zero,736(r4)
  808cd0:	05c00204 	movi	r23,8
  808cd4:	00800104 	movi	r2,4
  808cd8:	2025883a 	mov	r18,r4
  808cdc:	b80d883a 	mov	r6,r23
  808ce0:	81001704 	addi	r4,r16,92
  808ce4:	000b883a 	mov	r5,zero
  808ce8:	80000015 	stw	zero,0(r16)
  808cec:	80000115 	stw	zero,4(r16)
  808cf0:	80000215 	stw	zero,8(r16)
  808cf4:	8080030d 	sth	r2,12(r16)
  808cf8:	80001915 	stw	zero,100(r16)
  808cfc:	8000038d 	sth	zero,14(r16)
  808d00:	80000415 	stw	zero,16(r16)
  808d04:	80000515 	stw	zero,20(r16)
  808d08:	80000615 	stw	zero,24(r16)
  808d0c:	08042c80 	call	8042c8 <memset>
  808d10:	05802034 	movhi	r22,128
  808d14:	94400217 	ldw	r17,8(r18)
  808d18:	05402034 	movhi	r21,128
  808d1c:	05002034 	movhi	r20,128
  808d20:	04c02034 	movhi	r19,128
  808d24:	b5924f04 	addi	r22,r22,18748
  808d28:	ad526604 	addi	r21,r21,18840
  808d2c:	a5128504 	addi	r20,r20,18964
  808d30:	9cd29c04 	addi	r19,r19,19056
  808d34:	85800815 	stw	r22,32(r16)
  808d38:	85400915 	stw	r21,36(r16)
  808d3c:	85000a15 	stw	r20,40(r16)
  808d40:	84c00b15 	stw	r19,44(r16)
  808d44:	84000715 	stw	r16,28(r16)
  808d48:	00800284 	movi	r2,10
  808d4c:	8880030d 	sth	r2,12(r17)
  808d50:	00800044 	movi	r2,1
  808d54:	b80d883a 	mov	r6,r23
  808d58:	89001704 	addi	r4,r17,92
  808d5c:	000b883a 	mov	r5,zero
  808d60:	88000015 	stw	zero,0(r17)
  808d64:	88000115 	stw	zero,4(r17)
  808d68:	88000215 	stw	zero,8(r17)
  808d6c:	88001915 	stw	zero,100(r17)
  808d70:	8880038d 	sth	r2,14(r17)
  808d74:	88000415 	stw	zero,16(r17)
  808d78:	88000515 	stw	zero,20(r17)
  808d7c:	88000615 	stw	zero,24(r17)
  808d80:	08042c80 	call	8042c8 <memset>
  808d84:	94000317 	ldw	r16,12(r18)
  808d88:	00800484 	movi	r2,18
  808d8c:	8c400715 	stw	r17,28(r17)
  808d90:	8d800815 	stw	r22,32(r17)
  808d94:	8d400915 	stw	r21,36(r17)
  808d98:	8d000a15 	stw	r20,40(r17)
  808d9c:	8cc00b15 	stw	r19,44(r17)
  808da0:	8080030d 	sth	r2,12(r16)
  808da4:	00800084 	movi	r2,2
  808da8:	80000015 	stw	zero,0(r16)
  808dac:	80000115 	stw	zero,4(r16)
  808db0:	80000215 	stw	zero,8(r16)
  808db4:	80001915 	stw	zero,100(r16)
  808db8:	8080038d 	sth	r2,14(r16)
  808dbc:	80000415 	stw	zero,16(r16)
  808dc0:	80000515 	stw	zero,20(r16)
  808dc4:	80000615 	stw	zero,24(r16)
  808dc8:	b80d883a 	mov	r6,r23
  808dcc:	000b883a 	mov	r5,zero
  808dd0:	81001704 	addi	r4,r16,92
  808dd4:	08042c80 	call	8042c8 <memset>
  808dd8:	00800044 	movi	r2,1
  808ddc:	84000715 	stw	r16,28(r16)
  808de0:	85800815 	stw	r22,32(r16)
  808de4:	85400915 	stw	r21,36(r16)
  808de8:	85000a15 	stw	r20,40(r16)
  808dec:	84c00b15 	stw	r19,44(r16)
  808df0:	90800e15 	stw	r2,56(r18)
  808df4:	dfc00817 	ldw	ra,32(sp)
  808df8:	ddc00717 	ldw	r23,28(sp)
  808dfc:	dd800617 	ldw	r22,24(sp)
  808e00:	dd400517 	ldw	r21,20(sp)
  808e04:	dd000417 	ldw	r20,16(sp)
  808e08:	dcc00317 	ldw	r19,12(sp)
  808e0c:	dc800217 	ldw	r18,8(sp)
  808e10:	dc400117 	ldw	r17,4(sp)
  808e14:	dc000017 	ldw	r16,0(sp)
  808e18:	dec00904 	addi	sp,sp,36
  808e1c:	f800283a 	ret

00808e20 <__fp_lock>:
  808e20:	0005883a 	mov	r2,zero
  808e24:	f800283a 	ret

00808e28 <__sfmoreglue>:
  808e28:	defffc04 	addi	sp,sp,-16
  808e2c:	dc400115 	stw	r17,4(sp)
  808e30:	2c7fffc4 	addi	r17,r5,-1
  808e34:	8c401a24 	muli	r17,r17,104
  808e38:	dc800215 	stw	r18,8(sp)
  808e3c:	2825883a 	mov	r18,r5
  808e40:	89401d04 	addi	r5,r17,116
  808e44:	dc000015 	stw	r16,0(sp)
  808e48:	dfc00315 	stw	ra,12(sp)
  808e4c:	0803abc0 	call	803abc <_malloc_r>
  808e50:	1021883a 	mov	r16,r2
  808e54:	10000726 	beq	r2,zero,808e74 <__sfmoreglue+0x4c>
  808e58:	11000304 	addi	r4,r2,12
  808e5c:	10000015 	stw	zero,0(r2)
  808e60:	14800115 	stw	r18,4(r2)
  808e64:	11000215 	stw	r4,8(r2)
  808e68:	89801a04 	addi	r6,r17,104
  808e6c:	000b883a 	mov	r5,zero
  808e70:	08042c80 	call	8042c8 <memset>
  808e74:	8005883a 	mov	r2,r16
  808e78:	dfc00317 	ldw	ra,12(sp)
  808e7c:	dc800217 	ldw	r18,8(sp)
  808e80:	dc400117 	ldw	r17,4(sp)
  808e84:	dc000017 	ldw	r16,0(sp)
  808e88:	dec00404 	addi	sp,sp,16
  808e8c:	f800283a 	ret

00808e90 <__sfp>:
  808e90:	defffb04 	addi	sp,sp,-20
  808e94:	dc000015 	stw	r16,0(sp)
  808e98:	04002074 	movhi	r16,129
  808e9c:	841aee04 	addi	r16,r16,27576
  808ea0:	dcc00315 	stw	r19,12(sp)
  808ea4:	2027883a 	mov	r19,r4
  808ea8:	81000017 	ldw	r4,0(r16)
  808eac:	dfc00415 	stw	ra,16(sp)
  808eb0:	dc800215 	stw	r18,8(sp)
  808eb4:	20800e17 	ldw	r2,56(r4)
  808eb8:	dc400115 	stw	r17,4(sp)
  808ebc:	1000021e 	bne	r2,zero,808ec8 <__sfp+0x38>
  808ec0:	0808c840 	call	808c84 <__sinit.part.1>
  808ec4:	81000017 	ldw	r4,0(r16)
  808ec8:	2480b804 	addi	r18,r4,736
  808ecc:	047fffc4 	movi	r17,-1
  808ed0:	91000117 	ldw	r4,4(r18)
  808ed4:	94000217 	ldw	r16,8(r18)
  808ed8:	213fffc4 	addi	r4,r4,-1
  808edc:	20000a16 	blt	r4,zero,808f08 <__sfp+0x78>
  808ee0:	8080030f 	ldh	r2,12(r16)
  808ee4:	10000c26 	beq	r2,zero,808f18 <__sfp+0x88>
  808ee8:	80c01d04 	addi	r3,r16,116
  808eec:	00000206 	br	808ef8 <__sfp+0x68>
  808ef0:	18bfe60f 	ldh	r2,-104(r3)
  808ef4:	10000826 	beq	r2,zero,808f18 <__sfp+0x88>
  808ef8:	213fffc4 	addi	r4,r4,-1
  808efc:	1c3ffd04 	addi	r16,r3,-12
  808f00:	18c01a04 	addi	r3,r3,104
  808f04:	247ffa1e 	bne	r4,r17,808ef0 <__alt_mem_onchip_mem+0xff788ef0>
  808f08:	90800017 	ldw	r2,0(r18)
  808f0c:	10001d26 	beq	r2,zero,808f84 <__sfp+0xf4>
  808f10:	1025883a 	mov	r18,r2
  808f14:	003fee06 	br	808ed0 <__alt_mem_onchip_mem+0xff788ed0>
  808f18:	00bfffc4 	movi	r2,-1
  808f1c:	8080038d 	sth	r2,14(r16)
  808f20:	00800044 	movi	r2,1
  808f24:	8080030d 	sth	r2,12(r16)
  808f28:	80001915 	stw	zero,100(r16)
  808f2c:	80000015 	stw	zero,0(r16)
  808f30:	80000215 	stw	zero,8(r16)
  808f34:	80000115 	stw	zero,4(r16)
  808f38:	80000415 	stw	zero,16(r16)
  808f3c:	80000515 	stw	zero,20(r16)
  808f40:	80000615 	stw	zero,24(r16)
  808f44:	01800204 	movi	r6,8
  808f48:	000b883a 	mov	r5,zero
  808f4c:	81001704 	addi	r4,r16,92
  808f50:	08042c80 	call	8042c8 <memset>
  808f54:	8005883a 	mov	r2,r16
  808f58:	80000c15 	stw	zero,48(r16)
  808f5c:	80000d15 	stw	zero,52(r16)
  808f60:	80001115 	stw	zero,68(r16)
  808f64:	80001215 	stw	zero,72(r16)
  808f68:	dfc00417 	ldw	ra,16(sp)
  808f6c:	dcc00317 	ldw	r19,12(sp)
  808f70:	dc800217 	ldw	r18,8(sp)
  808f74:	dc400117 	ldw	r17,4(sp)
  808f78:	dc000017 	ldw	r16,0(sp)
  808f7c:	dec00504 	addi	sp,sp,20
  808f80:	f800283a 	ret
  808f84:	01400104 	movi	r5,4
  808f88:	9809883a 	mov	r4,r19
  808f8c:	0808e280 	call	808e28 <__sfmoreglue>
  808f90:	90800015 	stw	r2,0(r18)
  808f94:	103fde1e 	bne	r2,zero,808f10 <__alt_mem_onchip_mem+0xff788f10>
  808f98:	00800304 	movi	r2,12
  808f9c:	98800015 	stw	r2,0(r19)
  808fa0:	0005883a 	mov	r2,zero
  808fa4:	003ff006 	br	808f68 <__alt_mem_onchip_mem+0xff788f68>

00808fa8 <_cleanup>:
  808fa8:	00802074 	movhi	r2,129
  808fac:	109aee04 	addi	r2,r2,27576
  808fb0:	11000017 	ldw	r4,0(r2)
  808fb4:	01402074 	movhi	r5,129
  808fb8:	29739a04 	addi	r5,r5,-12696
  808fbc:	0809a701 	jmpi	809a70 <_fwalk_reent>

00808fc0 <__sinit>:
  808fc0:	20800e17 	ldw	r2,56(r4)
  808fc4:	10000126 	beq	r2,zero,808fcc <__sinit+0xc>
  808fc8:	f800283a 	ret
  808fcc:	0808c841 	jmpi	808c84 <__sinit.part.1>

00808fd0 <__sfp_lock_acquire>:
  808fd0:	f800283a 	ret

00808fd4 <__sfp_lock_release>:
  808fd4:	f800283a 	ret

00808fd8 <__sinit_lock_acquire>:
  808fd8:	f800283a 	ret

00808fdc <__sinit_lock_release>:
  808fdc:	f800283a 	ret

00808fe0 <__fp_lock_all>:
  808fe0:	00802074 	movhi	r2,129
  808fe4:	109aef04 	addi	r2,r2,27580
  808fe8:	11000017 	ldw	r4,0(r2)
  808fec:	01402074 	movhi	r5,129
  808ff0:	29638804 	addi	r5,r5,-29152
  808ff4:	08099ac1 	jmpi	8099ac <_fwalk>

00808ff8 <__fp_unlock_all>:
  808ff8:	00802074 	movhi	r2,129
  808ffc:	109aef04 	addi	r2,r2,27580
  809000:	11000017 	ldw	r4,0(r2)
  809004:	01402074 	movhi	r5,129
  809008:	29631c04 	addi	r5,r5,-29584
  80900c:	08099ac1 	jmpi	8099ac <_fwalk>

00809010 <__sflags>:
  809010:	28800007 	ldb	r2,0(r5)
  809014:	00c01c84 	movi	r3,114
  809018:	10c02426 	beq	r2,r3,8090ac <__sflags+0x9c>
  80901c:	00c01dc4 	movi	r3,119
  809020:	10c01e26 	beq	r2,r3,80909c <__sflags+0x8c>
  809024:	00c01844 	movi	r3,97
  809028:	10c00426 	beq	r2,r3,80903c <__sflags+0x2c>
  80902c:	00800584 	movi	r2,22
  809030:	20800015 	stw	r2,0(r4)
  809034:	0005883a 	mov	r2,zero
  809038:	f800283a 	ret
  80903c:	02c08204 	movi	r11,520
  809040:	01000044 	movi	r4,1
  809044:	00804204 	movi	r2,264
  809048:	01c00ac4 	movi	r7,43
  80904c:	02bff8c4 	movi	r10,-29
  809050:	027fff04 	movi	r9,-4
  809054:	02001e04 	movi	r8,120
  809058:	29400044 	addi	r5,r5,1
  80905c:	28c00007 	ldb	r3,0(r5)
  809060:	18000626 	beq	r3,zero,80907c <__sflags+0x6c>
  809064:	19c00826 	beq	r3,r7,809088 <__sflags+0x78>
  809068:	1a3ffb1e 	bne	r3,r8,809058 <__alt_mem_onchip_mem+0xff789058>
  80906c:	29400044 	addi	r5,r5,1
  809070:	28c00007 	ldb	r3,0(r5)
  809074:	21020014 	ori	r4,r4,2048
  809078:	183ffa1e 	bne	r3,zero,809064 <__alt_mem_onchip_mem+0xff789064>
  80907c:	22c8b03a 	or	r4,r4,r11
  809080:	31000015 	stw	r4,0(r6)
  809084:	f800283a 	ret
  809088:	1284703a 	and	r2,r2,r10
  80908c:	2248703a 	and	r4,r4,r9
  809090:	10800414 	ori	r2,r2,16
  809094:	21000094 	ori	r4,r4,2
  809098:	003fef06 	br	809058 <__alt_mem_onchip_mem+0xff789058>
  80909c:	02c18004 	movi	r11,1536
  8090a0:	01000044 	movi	r4,1
  8090a4:	00800204 	movi	r2,8
  8090a8:	003fe706 	br	809048 <__alt_mem_onchip_mem+0xff789048>
  8090ac:	0017883a 	mov	r11,zero
  8090b0:	0009883a 	mov	r4,zero
  8090b4:	00800104 	movi	r2,4
  8090b8:	003fe306 	br	809048 <__alt_mem_onchip_mem+0xff789048>

008090bc <_malloc_trim_r>:
  8090bc:	defffb04 	addi	sp,sp,-20
  8090c0:	dcc00315 	stw	r19,12(sp)
  8090c4:	04c02074 	movhi	r19,129
  8090c8:	dc800215 	stw	r18,8(sp)
  8090cc:	dc400115 	stw	r17,4(sp)
  8090d0:	dc000015 	stw	r16,0(sp)
  8090d4:	dfc00415 	stw	ra,16(sp)
  8090d8:	2821883a 	mov	r16,r5
  8090dc:	9cd4d304 	addi	r19,r19,21324
  8090e0:	2025883a 	mov	r18,r4
  8090e4:	0810d240 	call	810d24 <__malloc_lock>
  8090e8:	98800217 	ldw	r2,8(r19)
  8090ec:	14400117 	ldw	r17,4(r2)
  8090f0:	00bfff04 	movi	r2,-4
  8090f4:	88a2703a 	and	r17,r17,r2
  8090f8:	8c21c83a 	sub	r16,r17,r16
  8090fc:	8403fbc4 	addi	r16,r16,4079
  809100:	8020d33a 	srli	r16,r16,12
  809104:	0083ffc4 	movi	r2,4095
  809108:	843fffc4 	addi	r16,r16,-1
  80910c:	8020933a 	slli	r16,r16,12
  809110:	1400060e 	bge	r2,r16,80912c <_malloc_trim_r+0x70>
  809114:	000b883a 	mov	r5,zero
  809118:	9009883a 	mov	r4,r18
  80911c:	08048e80 	call	8048e8 <_sbrk_r>
  809120:	98c00217 	ldw	r3,8(r19)
  809124:	1c47883a 	add	r3,r3,r17
  809128:	10c00a26 	beq	r2,r3,809154 <_malloc_trim_r+0x98>
  80912c:	9009883a 	mov	r4,r18
  809130:	0810d480 	call	810d48 <__malloc_unlock>
  809134:	0005883a 	mov	r2,zero
  809138:	dfc00417 	ldw	ra,16(sp)
  80913c:	dcc00317 	ldw	r19,12(sp)
  809140:	dc800217 	ldw	r18,8(sp)
  809144:	dc400117 	ldw	r17,4(sp)
  809148:	dc000017 	ldw	r16,0(sp)
  80914c:	dec00504 	addi	sp,sp,20
  809150:	f800283a 	ret
  809154:	040bc83a 	sub	r5,zero,r16
  809158:	9009883a 	mov	r4,r18
  80915c:	08048e80 	call	8048e8 <_sbrk_r>
  809160:	00ffffc4 	movi	r3,-1
  809164:	10c00d26 	beq	r2,r3,80919c <_malloc_trim_r+0xe0>
  809168:	00c020b4 	movhi	r3,130
  80916c:	18e29e04 	addi	r3,r3,-30088
  809170:	18800017 	ldw	r2,0(r3)
  809174:	99000217 	ldw	r4,8(r19)
  809178:	8c23c83a 	sub	r17,r17,r16
  80917c:	8c400054 	ori	r17,r17,1
  809180:	1421c83a 	sub	r16,r2,r16
  809184:	24400115 	stw	r17,4(r4)
  809188:	9009883a 	mov	r4,r18
  80918c:	1c000015 	stw	r16,0(r3)
  809190:	0810d480 	call	810d48 <__malloc_unlock>
  809194:	00800044 	movi	r2,1
  809198:	003fe706 	br	809138 <__alt_mem_onchip_mem+0xff789138>
  80919c:	000b883a 	mov	r5,zero
  8091a0:	9009883a 	mov	r4,r18
  8091a4:	08048e80 	call	8048e8 <_sbrk_r>
  8091a8:	99000217 	ldw	r4,8(r19)
  8091ac:	014003c4 	movi	r5,15
  8091b0:	1107c83a 	sub	r3,r2,r4
  8091b4:	28ffdd0e 	bge	r5,r3,80912c <__alt_mem_onchip_mem+0xff78912c>
  8091b8:	01402074 	movhi	r5,129
  8091bc:	295af004 	addi	r5,r5,27584
  8091c0:	29400017 	ldw	r5,0(r5)
  8091c4:	18c00054 	ori	r3,r3,1
  8091c8:	20c00115 	stw	r3,4(r4)
  8091cc:	00c020b4 	movhi	r3,130
  8091d0:	1145c83a 	sub	r2,r2,r5
  8091d4:	18e29e04 	addi	r3,r3,-30088
  8091d8:	18800015 	stw	r2,0(r3)
  8091dc:	003fd306 	br	80912c <__alt_mem_onchip_mem+0xff78912c>

008091e0 <_free_r>:
  8091e0:	28004126 	beq	r5,zero,8092e8 <_free_r+0x108>
  8091e4:	defffd04 	addi	sp,sp,-12
  8091e8:	dc400115 	stw	r17,4(sp)
  8091ec:	dc000015 	stw	r16,0(sp)
  8091f0:	2023883a 	mov	r17,r4
  8091f4:	2821883a 	mov	r16,r5
  8091f8:	dfc00215 	stw	ra,8(sp)
  8091fc:	0810d240 	call	810d24 <__malloc_lock>
  809200:	81ffff17 	ldw	r7,-4(r16)
  809204:	00bfff84 	movi	r2,-2
  809208:	01002074 	movhi	r4,129
  80920c:	81bffe04 	addi	r6,r16,-8
  809210:	3884703a 	and	r2,r7,r2
  809214:	2114d304 	addi	r4,r4,21324
  809218:	308b883a 	add	r5,r6,r2
  80921c:	2a400117 	ldw	r9,4(r5)
  809220:	22000217 	ldw	r8,8(r4)
  809224:	00ffff04 	movi	r3,-4
  809228:	48c6703a 	and	r3,r9,r3
  80922c:	2a005726 	beq	r5,r8,80938c <_free_r+0x1ac>
  809230:	28c00115 	stw	r3,4(r5)
  809234:	39c0004c 	andi	r7,r7,1
  809238:	3800091e 	bne	r7,zero,809260 <_free_r+0x80>
  80923c:	823ffe17 	ldw	r8,-8(r16)
  809240:	22400204 	addi	r9,r4,8
  809244:	320dc83a 	sub	r6,r6,r8
  809248:	31c00217 	ldw	r7,8(r6)
  80924c:	1205883a 	add	r2,r2,r8
  809250:	3a406526 	beq	r7,r9,8093e8 <_free_r+0x208>
  809254:	32000317 	ldw	r8,12(r6)
  809258:	3a000315 	stw	r8,12(r7)
  80925c:	41c00215 	stw	r7,8(r8)
  809260:	28cf883a 	add	r7,r5,r3
  809264:	39c00117 	ldw	r7,4(r7)
  809268:	39c0004c 	andi	r7,r7,1
  80926c:	38003a26 	beq	r7,zero,809358 <_free_r+0x178>
  809270:	10c00054 	ori	r3,r2,1
  809274:	30c00115 	stw	r3,4(r6)
  809278:	3087883a 	add	r3,r6,r2
  80927c:	18800015 	stw	r2,0(r3)
  809280:	00c07fc4 	movi	r3,511
  809284:	18801936 	bltu	r3,r2,8092ec <_free_r+0x10c>
  809288:	1004d0fa 	srli	r2,r2,3
  80928c:	01c00044 	movi	r7,1
  809290:	21400117 	ldw	r5,4(r4)
  809294:	10c00044 	addi	r3,r2,1
  809298:	18c7883a 	add	r3,r3,r3
  80929c:	1005d0ba 	srai	r2,r2,2
  8092a0:	18c7883a 	add	r3,r3,r3
  8092a4:	18c7883a 	add	r3,r3,r3
  8092a8:	1907883a 	add	r3,r3,r4
  8092ac:	3884983a 	sll	r2,r7,r2
  8092b0:	19c00017 	ldw	r7,0(r3)
  8092b4:	1a3ffe04 	addi	r8,r3,-8
  8092b8:	1144b03a 	or	r2,r2,r5
  8092bc:	32000315 	stw	r8,12(r6)
  8092c0:	31c00215 	stw	r7,8(r6)
  8092c4:	20800115 	stw	r2,4(r4)
  8092c8:	19800015 	stw	r6,0(r3)
  8092cc:	39800315 	stw	r6,12(r7)
  8092d0:	8809883a 	mov	r4,r17
  8092d4:	dfc00217 	ldw	ra,8(sp)
  8092d8:	dc400117 	ldw	r17,4(sp)
  8092dc:	dc000017 	ldw	r16,0(sp)
  8092e0:	dec00304 	addi	sp,sp,12
  8092e4:	0810d481 	jmpi	810d48 <__malloc_unlock>
  8092e8:	f800283a 	ret
  8092ec:	100ad27a 	srli	r5,r2,9
  8092f0:	00c00104 	movi	r3,4
  8092f4:	19404a36 	bltu	r3,r5,809420 <_free_r+0x240>
  8092f8:	100ad1ba 	srli	r5,r2,6
  8092fc:	28c00e44 	addi	r3,r5,57
  809300:	18c7883a 	add	r3,r3,r3
  809304:	29400e04 	addi	r5,r5,56
  809308:	18c7883a 	add	r3,r3,r3
  80930c:	18c7883a 	add	r3,r3,r3
  809310:	1909883a 	add	r4,r3,r4
  809314:	20c00017 	ldw	r3,0(r4)
  809318:	01c02074 	movhi	r7,129
  80931c:	213ffe04 	addi	r4,r4,-8
  809320:	39d4d304 	addi	r7,r7,21324
  809324:	20c04426 	beq	r4,r3,809438 <_free_r+0x258>
  809328:	01ffff04 	movi	r7,-4
  80932c:	19400117 	ldw	r5,4(r3)
  809330:	29ca703a 	and	r5,r5,r7
  809334:	1140022e 	bgeu	r2,r5,809340 <_free_r+0x160>
  809338:	18c00217 	ldw	r3,8(r3)
  80933c:	20fffb1e 	bne	r4,r3,80932c <__alt_mem_onchip_mem+0xff78932c>
  809340:	19000317 	ldw	r4,12(r3)
  809344:	31000315 	stw	r4,12(r6)
  809348:	30c00215 	stw	r3,8(r6)
  80934c:	21800215 	stw	r6,8(r4)
  809350:	19800315 	stw	r6,12(r3)
  809354:	003fde06 	br	8092d0 <__alt_mem_onchip_mem+0xff7892d0>
  809358:	29c00217 	ldw	r7,8(r5)
  80935c:	10c5883a 	add	r2,r2,r3
  809360:	00c02074 	movhi	r3,129
  809364:	18d4d504 	addi	r3,r3,21332
  809368:	38c03b26 	beq	r7,r3,809458 <_free_r+0x278>
  80936c:	2a000317 	ldw	r8,12(r5)
  809370:	11400054 	ori	r5,r2,1
  809374:	3087883a 	add	r3,r6,r2
  809378:	3a000315 	stw	r8,12(r7)
  80937c:	41c00215 	stw	r7,8(r8)
  809380:	31400115 	stw	r5,4(r6)
  809384:	18800015 	stw	r2,0(r3)
  809388:	003fbd06 	br	809280 <__alt_mem_onchip_mem+0xff789280>
  80938c:	39c0004c 	andi	r7,r7,1
  809390:	10c5883a 	add	r2,r2,r3
  809394:	3800071e 	bne	r7,zero,8093b4 <_free_r+0x1d4>
  809398:	81fffe17 	ldw	r7,-8(r16)
  80939c:	31cdc83a 	sub	r6,r6,r7
  8093a0:	30c00317 	ldw	r3,12(r6)
  8093a4:	31400217 	ldw	r5,8(r6)
  8093a8:	11c5883a 	add	r2,r2,r7
  8093ac:	28c00315 	stw	r3,12(r5)
  8093b0:	19400215 	stw	r5,8(r3)
  8093b4:	10c00054 	ori	r3,r2,1
  8093b8:	30c00115 	stw	r3,4(r6)
  8093bc:	00c02074 	movhi	r3,129
  8093c0:	18daf104 	addi	r3,r3,27588
  8093c4:	18c00017 	ldw	r3,0(r3)
  8093c8:	21800215 	stw	r6,8(r4)
  8093cc:	10ffc036 	bltu	r2,r3,8092d0 <__alt_mem_onchip_mem+0xff7892d0>
  8093d0:	008020b4 	movhi	r2,130
  8093d4:	10a28d04 	addi	r2,r2,-30156
  8093d8:	11400017 	ldw	r5,0(r2)
  8093dc:	8809883a 	mov	r4,r17
  8093e0:	08090bc0 	call	8090bc <_malloc_trim_r>
  8093e4:	003fba06 	br	8092d0 <__alt_mem_onchip_mem+0xff7892d0>
  8093e8:	28c9883a 	add	r4,r5,r3
  8093ec:	21000117 	ldw	r4,4(r4)
  8093f0:	2100004c 	andi	r4,r4,1
  8093f4:	2000391e 	bne	r4,zero,8094dc <_free_r+0x2fc>
  8093f8:	29c00217 	ldw	r7,8(r5)
  8093fc:	29000317 	ldw	r4,12(r5)
  809400:	1885883a 	add	r2,r3,r2
  809404:	10c00054 	ori	r3,r2,1
  809408:	39000315 	stw	r4,12(r7)
  80940c:	21c00215 	stw	r7,8(r4)
  809410:	30c00115 	stw	r3,4(r6)
  809414:	308d883a 	add	r6,r6,r2
  809418:	30800015 	stw	r2,0(r6)
  80941c:	003fac06 	br	8092d0 <__alt_mem_onchip_mem+0xff7892d0>
  809420:	00c00504 	movi	r3,20
  809424:	19401536 	bltu	r3,r5,80947c <_free_r+0x29c>
  809428:	28c01704 	addi	r3,r5,92
  80942c:	18c7883a 	add	r3,r3,r3
  809430:	294016c4 	addi	r5,r5,91
  809434:	003fb406 	br	809308 <__alt_mem_onchip_mem+0xff789308>
  809438:	280bd0ba 	srai	r5,r5,2
  80943c:	00c00044 	movi	r3,1
  809440:	38800117 	ldw	r2,4(r7)
  809444:	194a983a 	sll	r5,r3,r5
  809448:	2007883a 	mov	r3,r4
  80944c:	2884b03a 	or	r2,r5,r2
  809450:	38800115 	stw	r2,4(r7)
  809454:	003fbb06 	br	809344 <__alt_mem_onchip_mem+0xff789344>
  809458:	21800515 	stw	r6,20(r4)
  80945c:	21800415 	stw	r6,16(r4)
  809460:	10c00054 	ori	r3,r2,1
  809464:	31c00315 	stw	r7,12(r6)
  809468:	31c00215 	stw	r7,8(r6)
  80946c:	30c00115 	stw	r3,4(r6)
  809470:	308d883a 	add	r6,r6,r2
  809474:	30800015 	stw	r2,0(r6)
  809478:	003f9506 	br	8092d0 <__alt_mem_onchip_mem+0xff7892d0>
  80947c:	00c01504 	movi	r3,84
  809480:	19400536 	bltu	r3,r5,809498 <_free_r+0x2b8>
  809484:	100ad33a 	srli	r5,r2,12
  809488:	28c01bc4 	addi	r3,r5,111
  80948c:	18c7883a 	add	r3,r3,r3
  809490:	29401b84 	addi	r5,r5,110
  809494:	003f9c06 	br	809308 <__alt_mem_onchip_mem+0xff789308>
  809498:	00c05504 	movi	r3,340
  80949c:	19400536 	bltu	r3,r5,8094b4 <_free_r+0x2d4>
  8094a0:	100ad3fa 	srli	r5,r2,15
  8094a4:	28c01e04 	addi	r3,r5,120
  8094a8:	18c7883a 	add	r3,r3,r3
  8094ac:	29401dc4 	addi	r5,r5,119
  8094b0:	003f9506 	br	809308 <__alt_mem_onchip_mem+0xff789308>
  8094b4:	00c15504 	movi	r3,1364
  8094b8:	19400536 	bltu	r3,r5,8094d0 <_free_r+0x2f0>
  8094bc:	100ad4ba 	srli	r5,r2,18
  8094c0:	28c01f44 	addi	r3,r5,125
  8094c4:	18c7883a 	add	r3,r3,r3
  8094c8:	29401f04 	addi	r5,r5,124
  8094cc:	003f8e06 	br	809308 <__alt_mem_onchip_mem+0xff789308>
  8094d0:	00c03f84 	movi	r3,254
  8094d4:	01401f84 	movi	r5,126
  8094d8:	003f8b06 	br	809308 <__alt_mem_onchip_mem+0xff789308>
  8094dc:	10c00054 	ori	r3,r2,1
  8094e0:	30c00115 	stw	r3,4(r6)
  8094e4:	308d883a 	add	r6,r6,r2
  8094e8:	30800015 	stw	r2,0(r6)
  8094ec:	003f7806 	br	8092d0 <__alt_mem_onchip_mem+0xff7892d0>

008094f0 <__sfvwrite_r>:
  8094f0:	30800217 	ldw	r2,8(r6)
  8094f4:	10006726 	beq	r2,zero,809694 <__sfvwrite_r+0x1a4>
  8094f8:	28c0030b 	ldhu	r3,12(r5)
  8094fc:	defff404 	addi	sp,sp,-48
  809500:	dd400715 	stw	r21,28(sp)
  809504:	dd000615 	stw	r20,24(sp)
  809508:	dc000215 	stw	r16,8(sp)
  80950c:	dfc00b15 	stw	ra,44(sp)
  809510:	df000a15 	stw	fp,40(sp)
  809514:	ddc00915 	stw	r23,36(sp)
  809518:	dd800815 	stw	r22,32(sp)
  80951c:	dcc00515 	stw	r19,20(sp)
  809520:	dc800415 	stw	r18,16(sp)
  809524:	dc400315 	stw	r17,12(sp)
  809528:	1880020c 	andi	r2,r3,8
  80952c:	2821883a 	mov	r16,r5
  809530:	202b883a 	mov	r21,r4
  809534:	3029883a 	mov	r20,r6
  809538:	10002726 	beq	r2,zero,8095d8 <__sfvwrite_r+0xe8>
  80953c:	28800417 	ldw	r2,16(r5)
  809540:	10002526 	beq	r2,zero,8095d8 <__sfvwrite_r+0xe8>
  809544:	1880008c 	andi	r2,r3,2
  809548:	a4400017 	ldw	r17,0(r20)
  80954c:	10002a26 	beq	r2,zero,8095f8 <__sfvwrite_r+0x108>
  809550:	05a00034 	movhi	r22,32768
  809554:	0027883a 	mov	r19,zero
  809558:	0025883a 	mov	r18,zero
  80955c:	b5bf0004 	addi	r22,r22,-1024
  809560:	980d883a 	mov	r6,r19
  809564:	a809883a 	mov	r4,r21
  809568:	90004626 	beq	r18,zero,809684 <__sfvwrite_r+0x194>
  80956c:	900f883a 	mov	r7,r18
  809570:	b480022e 	bgeu	r22,r18,80957c <__sfvwrite_r+0x8c>
  809574:	01e00034 	movhi	r7,32768
  809578:	39ff0004 	addi	r7,r7,-1024
  80957c:	80800917 	ldw	r2,36(r16)
  809580:	81400717 	ldw	r5,28(r16)
  809584:	103ee83a 	callr	r2
  809588:	0080570e 	bge	zero,r2,8096e8 <__sfvwrite_r+0x1f8>
  80958c:	a0c00217 	ldw	r3,8(r20)
  809590:	98a7883a 	add	r19,r19,r2
  809594:	90a5c83a 	sub	r18,r18,r2
  809598:	1885c83a 	sub	r2,r3,r2
  80959c:	a0800215 	stw	r2,8(r20)
  8095a0:	103fef1e 	bne	r2,zero,809560 <__alt_mem_onchip_mem+0xff789560>
  8095a4:	0005883a 	mov	r2,zero
  8095a8:	dfc00b17 	ldw	ra,44(sp)
  8095ac:	df000a17 	ldw	fp,40(sp)
  8095b0:	ddc00917 	ldw	r23,36(sp)
  8095b4:	dd800817 	ldw	r22,32(sp)
  8095b8:	dd400717 	ldw	r21,28(sp)
  8095bc:	dd000617 	ldw	r20,24(sp)
  8095c0:	dcc00517 	ldw	r19,20(sp)
  8095c4:	dc800417 	ldw	r18,16(sp)
  8095c8:	dc400317 	ldw	r17,12(sp)
  8095cc:	dc000217 	ldw	r16,8(sp)
  8095d0:	dec00c04 	addi	sp,sp,48
  8095d4:	f800283a 	ret
  8095d8:	800b883a 	mov	r5,r16
  8095dc:	a809883a 	mov	r4,r21
  8095e0:	0806f980 	call	806f98 <__swsetup_r>
  8095e4:	1000eb1e 	bne	r2,zero,809994 <__sfvwrite_r+0x4a4>
  8095e8:	80c0030b 	ldhu	r3,12(r16)
  8095ec:	a4400017 	ldw	r17,0(r20)
  8095f0:	1880008c 	andi	r2,r3,2
  8095f4:	103fd61e 	bne	r2,zero,809550 <__alt_mem_onchip_mem+0xff789550>
  8095f8:	1880004c 	andi	r2,r3,1
  8095fc:	10003f1e 	bne	r2,zero,8096fc <__sfvwrite_r+0x20c>
  809600:	0039883a 	mov	fp,zero
  809604:	0025883a 	mov	r18,zero
  809608:	90001a26 	beq	r18,zero,809674 <__sfvwrite_r+0x184>
  80960c:	1880800c 	andi	r2,r3,512
  809610:	84c00217 	ldw	r19,8(r16)
  809614:	10002126 	beq	r2,zero,80969c <__sfvwrite_r+0x1ac>
  809618:	982f883a 	mov	r23,r19
  80961c:	94c09336 	bltu	r18,r19,80986c <__sfvwrite_r+0x37c>
  809620:	1881200c 	andi	r2,r3,1152
  809624:	10009e1e 	bne	r2,zero,8098a0 <__sfvwrite_r+0x3b0>
  809628:	81000017 	ldw	r4,0(r16)
  80962c:	b80d883a 	mov	r6,r23
  809630:	e00b883a 	mov	r5,fp
  809634:	0809ef00 	call	809ef0 <memmove>
  809638:	80c00217 	ldw	r3,8(r16)
  80963c:	81000017 	ldw	r4,0(r16)
  809640:	9005883a 	mov	r2,r18
  809644:	1ce7c83a 	sub	r19,r3,r19
  809648:	25cf883a 	add	r7,r4,r23
  80964c:	84c00215 	stw	r19,8(r16)
  809650:	81c00015 	stw	r7,0(r16)
  809654:	a0c00217 	ldw	r3,8(r20)
  809658:	e0b9883a 	add	fp,fp,r2
  80965c:	90a5c83a 	sub	r18,r18,r2
  809660:	18a7c83a 	sub	r19,r3,r2
  809664:	a4c00215 	stw	r19,8(r20)
  809668:	983fce26 	beq	r19,zero,8095a4 <__alt_mem_onchip_mem+0xff7895a4>
  80966c:	80c0030b 	ldhu	r3,12(r16)
  809670:	903fe61e 	bne	r18,zero,80960c <__alt_mem_onchip_mem+0xff78960c>
  809674:	8f000017 	ldw	fp,0(r17)
  809678:	8c800117 	ldw	r18,4(r17)
  80967c:	8c400204 	addi	r17,r17,8
  809680:	003fe106 	br	809608 <__alt_mem_onchip_mem+0xff789608>
  809684:	8cc00017 	ldw	r19,0(r17)
  809688:	8c800117 	ldw	r18,4(r17)
  80968c:	8c400204 	addi	r17,r17,8
  809690:	003fb306 	br	809560 <__alt_mem_onchip_mem+0xff789560>
  809694:	0005883a 	mov	r2,zero
  809698:	f800283a 	ret
  80969c:	81000017 	ldw	r4,0(r16)
  8096a0:	80800417 	ldw	r2,16(r16)
  8096a4:	11005736 	bltu	r2,r4,809804 <__sfvwrite_r+0x314>
  8096a8:	85c00517 	ldw	r23,20(r16)
  8096ac:	95c05536 	bltu	r18,r23,809804 <__sfvwrite_r+0x314>
  8096b0:	00a00034 	movhi	r2,32768
  8096b4:	10bfffc4 	addi	r2,r2,-1
  8096b8:	9009883a 	mov	r4,r18
  8096bc:	1480012e 	bgeu	r2,r18,8096c4 <__sfvwrite_r+0x1d4>
  8096c0:	1009883a 	mov	r4,r2
  8096c4:	b80b883a 	mov	r5,r23
  8096c8:	080de0c0 	call	80de0c <__divsi3>
  8096cc:	15cf383a 	mul	r7,r2,r23
  8096d0:	81400717 	ldw	r5,28(r16)
  8096d4:	80800917 	ldw	r2,36(r16)
  8096d8:	e00d883a 	mov	r6,fp
  8096dc:	a809883a 	mov	r4,r21
  8096e0:	103ee83a 	callr	r2
  8096e4:	00bfdb16 	blt	zero,r2,809654 <__alt_mem_onchip_mem+0xff789654>
  8096e8:	8080030b 	ldhu	r2,12(r16)
  8096ec:	10801014 	ori	r2,r2,64
  8096f0:	8080030d 	sth	r2,12(r16)
  8096f4:	00bfffc4 	movi	r2,-1
  8096f8:	003fab06 	br	8095a8 <__alt_mem_onchip_mem+0xff7895a8>
  8096fc:	0027883a 	mov	r19,zero
  809700:	0011883a 	mov	r8,zero
  809704:	0039883a 	mov	fp,zero
  809708:	0025883a 	mov	r18,zero
  80970c:	90001f26 	beq	r18,zero,80978c <__sfvwrite_r+0x29c>
  809710:	40005a26 	beq	r8,zero,80987c <__sfvwrite_r+0x38c>
  809714:	982d883a 	mov	r22,r19
  809718:	94c0012e 	bgeu	r18,r19,809720 <__sfvwrite_r+0x230>
  80971c:	902d883a 	mov	r22,r18
  809720:	81000017 	ldw	r4,0(r16)
  809724:	80800417 	ldw	r2,16(r16)
  809728:	b02f883a 	mov	r23,r22
  80972c:	81c00517 	ldw	r7,20(r16)
  809730:	1100032e 	bgeu	r2,r4,809740 <__sfvwrite_r+0x250>
  809734:	80c00217 	ldw	r3,8(r16)
  809738:	38c7883a 	add	r3,r7,r3
  80973c:	1d801816 	blt	r3,r22,8097a0 <__sfvwrite_r+0x2b0>
  809740:	b1c03e16 	blt	r22,r7,80983c <__sfvwrite_r+0x34c>
  809744:	80800917 	ldw	r2,36(r16)
  809748:	81400717 	ldw	r5,28(r16)
  80974c:	e00d883a 	mov	r6,fp
  809750:	da000115 	stw	r8,4(sp)
  809754:	a809883a 	mov	r4,r21
  809758:	103ee83a 	callr	r2
  80975c:	102f883a 	mov	r23,r2
  809760:	da000117 	ldw	r8,4(sp)
  809764:	00bfe00e 	bge	zero,r2,8096e8 <__alt_mem_onchip_mem+0xff7896e8>
  809768:	9de7c83a 	sub	r19,r19,r23
  80976c:	98001f26 	beq	r19,zero,8097ec <__sfvwrite_r+0x2fc>
  809770:	a0800217 	ldw	r2,8(r20)
  809774:	e5f9883a 	add	fp,fp,r23
  809778:	95e5c83a 	sub	r18,r18,r23
  80977c:	15efc83a 	sub	r23,r2,r23
  809780:	a5c00215 	stw	r23,8(r20)
  809784:	b83f8726 	beq	r23,zero,8095a4 <__alt_mem_onchip_mem+0xff7895a4>
  809788:	903fe11e 	bne	r18,zero,809710 <__alt_mem_onchip_mem+0xff789710>
  80978c:	8f000017 	ldw	fp,0(r17)
  809790:	8c800117 	ldw	r18,4(r17)
  809794:	0011883a 	mov	r8,zero
  809798:	8c400204 	addi	r17,r17,8
  80979c:	003fdb06 	br	80970c <__alt_mem_onchip_mem+0xff78970c>
  8097a0:	180d883a 	mov	r6,r3
  8097a4:	e00b883a 	mov	r5,fp
  8097a8:	da000115 	stw	r8,4(sp)
  8097ac:	d8c00015 	stw	r3,0(sp)
  8097b0:	0809ef00 	call	809ef0 <memmove>
  8097b4:	d8c00017 	ldw	r3,0(sp)
  8097b8:	80800017 	ldw	r2,0(r16)
  8097bc:	800b883a 	mov	r5,r16
  8097c0:	a809883a 	mov	r4,r21
  8097c4:	10c5883a 	add	r2,r2,r3
  8097c8:	80800015 	stw	r2,0(r16)
  8097cc:	d8c00015 	stw	r3,0(sp)
  8097d0:	0808be40 	call	808be4 <_fflush_r>
  8097d4:	d8c00017 	ldw	r3,0(sp)
  8097d8:	da000117 	ldw	r8,4(sp)
  8097dc:	103fc21e 	bne	r2,zero,8096e8 <__alt_mem_onchip_mem+0xff7896e8>
  8097e0:	182f883a 	mov	r23,r3
  8097e4:	9de7c83a 	sub	r19,r19,r23
  8097e8:	983fe11e 	bne	r19,zero,809770 <__alt_mem_onchip_mem+0xff789770>
  8097ec:	800b883a 	mov	r5,r16
  8097f0:	a809883a 	mov	r4,r21
  8097f4:	0808be40 	call	808be4 <_fflush_r>
  8097f8:	103fbb1e 	bne	r2,zero,8096e8 <__alt_mem_onchip_mem+0xff7896e8>
  8097fc:	0011883a 	mov	r8,zero
  809800:	003fdb06 	br	809770 <__alt_mem_onchip_mem+0xff789770>
  809804:	94c0012e 	bgeu	r18,r19,80980c <__sfvwrite_r+0x31c>
  809808:	9027883a 	mov	r19,r18
  80980c:	980d883a 	mov	r6,r19
  809810:	e00b883a 	mov	r5,fp
  809814:	0809ef00 	call	809ef0 <memmove>
  809818:	80800217 	ldw	r2,8(r16)
  80981c:	80c00017 	ldw	r3,0(r16)
  809820:	14c5c83a 	sub	r2,r2,r19
  809824:	1cc7883a 	add	r3,r3,r19
  809828:	80800215 	stw	r2,8(r16)
  80982c:	80c00015 	stw	r3,0(r16)
  809830:	10004326 	beq	r2,zero,809940 <__sfvwrite_r+0x450>
  809834:	9805883a 	mov	r2,r19
  809838:	003f8606 	br	809654 <__alt_mem_onchip_mem+0xff789654>
  80983c:	b00d883a 	mov	r6,r22
  809840:	e00b883a 	mov	r5,fp
  809844:	da000115 	stw	r8,4(sp)
  809848:	0809ef00 	call	809ef0 <memmove>
  80984c:	80800217 	ldw	r2,8(r16)
  809850:	80c00017 	ldw	r3,0(r16)
  809854:	da000117 	ldw	r8,4(sp)
  809858:	1585c83a 	sub	r2,r2,r22
  80985c:	1dad883a 	add	r22,r3,r22
  809860:	80800215 	stw	r2,8(r16)
  809864:	85800015 	stw	r22,0(r16)
  809868:	003fbf06 	br	809768 <__alt_mem_onchip_mem+0xff789768>
  80986c:	81000017 	ldw	r4,0(r16)
  809870:	9027883a 	mov	r19,r18
  809874:	902f883a 	mov	r23,r18
  809878:	003f6c06 	br	80962c <__alt_mem_onchip_mem+0xff78962c>
  80987c:	900d883a 	mov	r6,r18
  809880:	01400284 	movi	r5,10
  809884:	e009883a 	mov	r4,fp
  809888:	0809cc40 	call	809cc4 <memchr>
  80988c:	10003e26 	beq	r2,zero,809988 <__sfvwrite_r+0x498>
  809890:	10800044 	addi	r2,r2,1
  809894:	1727c83a 	sub	r19,r2,fp
  809898:	02000044 	movi	r8,1
  80989c:	003f9d06 	br	809714 <__alt_mem_onchip_mem+0xff789714>
  8098a0:	80800517 	ldw	r2,20(r16)
  8098a4:	81400417 	ldw	r5,16(r16)
  8098a8:	81c00017 	ldw	r7,0(r16)
  8098ac:	10a7883a 	add	r19,r2,r2
  8098b0:	9885883a 	add	r2,r19,r2
  8098b4:	1026d7fa 	srli	r19,r2,31
  8098b8:	396dc83a 	sub	r22,r7,r5
  8098bc:	b1000044 	addi	r4,r22,1
  8098c0:	9885883a 	add	r2,r19,r2
  8098c4:	1027d07a 	srai	r19,r2,1
  8098c8:	2485883a 	add	r2,r4,r18
  8098cc:	980d883a 	mov	r6,r19
  8098d0:	9880022e 	bgeu	r19,r2,8098dc <__sfvwrite_r+0x3ec>
  8098d4:	1027883a 	mov	r19,r2
  8098d8:	100d883a 	mov	r6,r2
  8098dc:	18c1000c 	andi	r3,r3,1024
  8098e0:	18001c26 	beq	r3,zero,809954 <__sfvwrite_r+0x464>
  8098e4:	300b883a 	mov	r5,r6
  8098e8:	a809883a 	mov	r4,r21
  8098ec:	0803abc0 	call	803abc <_malloc_r>
  8098f0:	102f883a 	mov	r23,r2
  8098f4:	10002926 	beq	r2,zero,80999c <__sfvwrite_r+0x4ac>
  8098f8:	81400417 	ldw	r5,16(r16)
  8098fc:	b00d883a 	mov	r6,r22
  809900:	1009883a 	mov	r4,r2
  809904:	0809da80 	call	809da8 <memcpy>
  809908:	8080030b 	ldhu	r2,12(r16)
  80990c:	00fedfc4 	movi	r3,-1153
  809910:	10c4703a 	and	r2,r2,r3
  809914:	10802014 	ori	r2,r2,128
  809918:	8080030d 	sth	r2,12(r16)
  80991c:	bd89883a 	add	r4,r23,r22
  809920:	9d8fc83a 	sub	r7,r19,r22
  809924:	85c00415 	stw	r23,16(r16)
  809928:	84c00515 	stw	r19,20(r16)
  80992c:	81000015 	stw	r4,0(r16)
  809930:	9027883a 	mov	r19,r18
  809934:	81c00215 	stw	r7,8(r16)
  809938:	902f883a 	mov	r23,r18
  80993c:	003f3b06 	br	80962c <__alt_mem_onchip_mem+0xff78962c>
  809940:	800b883a 	mov	r5,r16
  809944:	a809883a 	mov	r4,r21
  809948:	0808be40 	call	808be4 <_fflush_r>
  80994c:	103fb926 	beq	r2,zero,809834 <__alt_mem_onchip_mem+0xff789834>
  809950:	003f6506 	br	8096e8 <__alt_mem_onchip_mem+0xff7896e8>
  809954:	a809883a 	mov	r4,r21
  809958:	080b0a80 	call	80b0a8 <_realloc_r>
  80995c:	102f883a 	mov	r23,r2
  809960:	103fee1e 	bne	r2,zero,80991c <__alt_mem_onchip_mem+0xff78991c>
  809964:	81400417 	ldw	r5,16(r16)
  809968:	a809883a 	mov	r4,r21
  80996c:	08091e00 	call	8091e0 <_free_r>
  809970:	8080030b 	ldhu	r2,12(r16)
  809974:	00ffdfc4 	movi	r3,-129
  809978:	1884703a 	and	r2,r3,r2
  80997c:	00c00304 	movi	r3,12
  809980:	a8c00015 	stw	r3,0(r21)
  809984:	003f5906 	br	8096ec <__alt_mem_onchip_mem+0xff7896ec>
  809988:	94c00044 	addi	r19,r18,1
  80998c:	02000044 	movi	r8,1
  809990:	003f6006 	br	809714 <__alt_mem_onchip_mem+0xff789714>
  809994:	00bfffc4 	movi	r2,-1
  809998:	003f0306 	br	8095a8 <__alt_mem_onchip_mem+0xff7895a8>
  80999c:	00800304 	movi	r2,12
  8099a0:	a8800015 	stw	r2,0(r21)
  8099a4:	8080030b 	ldhu	r2,12(r16)
  8099a8:	003f5006 	br	8096ec <__alt_mem_onchip_mem+0xff7896ec>

008099ac <_fwalk>:
  8099ac:	defff704 	addi	sp,sp,-36
  8099b0:	dd000415 	stw	r20,16(sp)
  8099b4:	dfc00815 	stw	ra,32(sp)
  8099b8:	ddc00715 	stw	r23,28(sp)
  8099bc:	dd800615 	stw	r22,24(sp)
  8099c0:	dd400515 	stw	r21,20(sp)
  8099c4:	dcc00315 	stw	r19,12(sp)
  8099c8:	dc800215 	stw	r18,8(sp)
  8099cc:	dc400115 	stw	r17,4(sp)
  8099d0:	dc000015 	stw	r16,0(sp)
  8099d4:	2500b804 	addi	r20,r4,736
  8099d8:	a0002326 	beq	r20,zero,809a68 <_fwalk+0xbc>
  8099dc:	282b883a 	mov	r21,r5
  8099e0:	002f883a 	mov	r23,zero
  8099e4:	05800044 	movi	r22,1
  8099e8:	04ffffc4 	movi	r19,-1
  8099ec:	a4400117 	ldw	r17,4(r20)
  8099f0:	a4800217 	ldw	r18,8(r20)
  8099f4:	8c7fffc4 	addi	r17,r17,-1
  8099f8:	88000d16 	blt	r17,zero,809a30 <_fwalk+0x84>
  8099fc:	94000304 	addi	r16,r18,12
  809a00:	94800384 	addi	r18,r18,14
  809a04:	8080000b 	ldhu	r2,0(r16)
  809a08:	8c7fffc4 	addi	r17,r17,-1
  809a0c:	813ffd04 	addi	r4,r16,-12
  809a10:	b080042e 	bgeu	r22,r2,809a24 <_fwalk+0x78>
  809a14:	9080000f 	ldh	r2,0(r18)
  809a18:	14c00226 	beq	r2,r19,809a24 <_fwalk+0x78>
  809a1c:	a83ee83a 	callr	r21
  809a20:	b8aeb03a 	or	r23,r23,r2
  809a24:	84001a04 	addi	r16,r16,104
  809a28:	94801a04 	addi	r18,r18,104
  809a2c:	8cfff51e 	bne	r17,r19,809a04 <__alt_mem_onchip_mem+0xff789a04>
  809a30:	a5000017 	ldw	r20,0(r20)
  809a34:	a03fed1e 	bne	r20,zero,8099ec <__alt_mem_onchip_mem+0xff7899ec>
  809a38:	b805883a 	mov	r2,r23
  809a3c:	dfc00817 	ldw	ra,32(sp)
  809a40:	ddc00717 	ldw	r23,28(sp)
  809a44:	dd800617 	ldw	r22,24(sp)
  809a48:	dd400517 	ldw	r21,20(sp)
  809a4c:	dd000417 	ldw	r20,16(sp)
  809a50:	dcc00317 	ldw	r19,12(sp)
  809a54:	dc800217 	ldw	r18,8(sp)
  809a58:	dc400117 	ldw	r17,4(sp)
  809a5c:	dc000017 	ldw	r16,0(sp)
  809a60:	dec00904 	addi	sp,sp,36
  809a64:	f800283a 	ret
  809a68:	002f883a 	mov	r23,zero
  809a6c:	003ff206 	br	809a38 <__alt_mem_onchip_mem+0xff789a38>

00809a70 <_fwalk_reent>:
  809a70:	defff704 	addi	sp,sp,-36
  809a74:	dd000415 	stw	r20,16(sp)
  809a78:	dfc00815 	stw	ra,32(sp)
  809a7c:	ddc00715 	stw	r23,28(sp)
  809a80:	dd800615 	stw	r22,24(sp)
  809a84:	dd400515 	stw	r21,20(sp)
  809a88:	dcc00315 	stw	r19,12(sp)
  809a8c:	dc800215 	stw	r18,8(sp)
  809a90:	dc400115 	stw	r17,4(sp)
  809a94:	dc000015 	stw	r16,0(sp)
  809a98:	2500b804 	addi	r20,r4,736
  809a9c:	a0002326 	beq	r20,zero,809b2c <_fwalk_reent+0xbc>
  809aa0:	282b883a 	mov	r21,r5
  809aa4:	2027883a 	mov	r19,r4
  809aa8:	002f883a 	mov	r23,zero
  809aac:	05800044 	movi	r22,1
  809ab0:	04bfffc4 	movi	r18,-1
  809ab4:	a4400117 	ldw	r17,4(r20)
  809ab8:	a4000217 	ldw	r16,8(r20)
  809abc:	8c7fffc4 	addi	r17,r17,-1
  809ac0:	88000c16 	blt	r17,zero,809af4 <_fwalk_reent+0x84>
  809ac4:	84000304 	addi	r16,r16,12
  809ac8:	8080000b 	ldhu	r2,0(r16)
  809acc:	8c7fffc4 	addi	r17,r17,-1
  809ad0:	817ffd04 	addi	r5,r16,-12
  809ad4:	b080052e 	bgeu	r22,r2,809aec <_fwalk_reent+0x7c>
  809ad8:	8080008f 	ldh	r2,2(r16)
  809adc:	9809883a 	mov	r4,r19
  809ae0:	14800226 	beq	r2,r18,809aec <_fwalk_reent+0x7c>
  809ae4:	a83ee83a 	callr	r21
  809ae8:	b8aeb03a 	or	r23,r23,r2
  809aec:	84001a04 	addi	r16,r16,104
  809af0:	8cbff51e 	bne	r17,r18,809ac8 <__alt_mem_onchip_mem+0xff789ac8>
  809af4:	a5000017 	ldw	r20,0(r20)
  809af8:	a03fee1e 	bne	r20,zero,809ab4 <__alt_mem_onchip_mem+0xff789ab4>
  809afc:	b805883a 	mov	r2,r23
  809b00:	dfc00817 	ldw	ra,32(sp)
  809b04:	ddc00717 	ldw	r23,28(sp)
  809b08:	dd800617 	ldw	r22,24(sp)
  809b0c:	dd400517 	ldw	r21,20(sp)
  809b10:	dd000417 	ldw	r20,16(sp)
  809b14:	dcc00317 	ldw	r19,12(sp)
  809b18:	dc800217 	ldw	r18,8(sp)
  809b1c:	dc400117 	ldw	r17,4(sp)
  809b20:	dc000017 	ldw	r16,0(sp)
  809b24:	dec00904 	addi	sp,sp,36
  809b28:	f800283a 	ret
  809b2c:	002f883a 	mov	r23,zero
  809b30:	003ff206 	br	809afc <__alt_mem_onchip_mem+0xff789afc>

00809b34 <_isatty_r>:
  809b34:	defffd04 	addi	sp,sp,-12
  809b38:	dc000015 	stw	r16,0(sp)
  809b3c:	040020b4 	movhi	r16,130
  809b40:	dc400115 	stw	r17,4(sp)
  809b44:	84228a04 	addi	r16,r16,-30168
  809b48:	2023883a 	mov	r17,r4
  809b4c:	2809883a 	mov	r4,r5
  809b50:	dfc00215 	stw	ra,8(sp)
  809b54:	80000015 	stw	zero,0(r16)
  809b58:	0810a080 	call	810a08 <isatty>
  809b5c:	00ffffc4 	movi	r3,-1
  809b60:	10c00526 	beq	r2,r3,809b78 <_isatty_r+0x44>
  809b64:	dfc00217 	ldw	ra,8(sp)
  809b68:	dc400117 	ldw	r17,4(sp)
  809b6c:	dc000017 	ldw	r16,0(sp)
  809b70:	dec00304 	addi	sp,sp,12
  809b74:	f800283a 	ret
  809b78:	80c00017 	ldw	r3,0(r16)
  809b7c:	183ff926 	beq	r3,zero,809b64 <__alt_mem_onchip_mem+0xff789b64>
  809b80:	88c00015 	stw	r3,0(r17)
  809b84:	003ff706 	br	809b64 <__alt_mem_onchip_mem+0xff789b64>

00809b88 <_setlocale_r>:
  809b88:	30001b26 	beq	r6,zero,809bf8 <_setlocale_r+0x70>
  809b8c:	01402074 	movhi	r5,129
  809b90:	defffe04 	addi	sp,sp,-8
  809b94:	29527f04 	addi	r5,r5,18940
  809b98:	3009883a 	mov	r4,r6
  809b9c:	dc000015 	stw	r16,0(sp)
  809ba0:	dfc00115 	stw	ra,4(sp)
  809ba4:	3021883a 	mov	r16,r6
  809ba8:	080b6800 	call	80b680 <strcmp>
  809bac:	1000061e 	bne	r2,zero,809bc8 <_setlocale_r+0x40>
  809bb0:	00802074 	movhi	r2,129
  809bb4:	10926004 	addi	r2,r2,18816
  809bb8:	dfc00117 	ldw	ra,4(sp)
  809bbc:	dc000017 	ldw	r16,0(sp)
  809bc0:	dec00204 	addi	sp,sp,8
  809bc4:	f800283a 	ret
  809bc8:	01402074 	movhi	r5,129
  809bcc:	29526004 	addi	r5,r5,18816
  809bd0:	8009883a 	mov	r4,r16
  809bd4:	080b6800 	call	80b680 <strcmp>
  809bd8:	103ff526 	beq	r2,zero,809bb0 <__alt_mem_onchip_mem+0xff789bb0>
  809bdc:	01402074 	movhi	r5,129
  809be0:	29526a04 	addi	r5,r5,18856
  809be4:	8009883a 	mov	r4,r16
  809be8:	080b6800 	call	80b680 <strcmp>
  809bec:	103ff026 	beq	r2,zero,809bb0 <__alt_mem_onchip_mem+0xff789bb0>
  809bf0:	0005883a 	mov	r2,zero
  809bf4:	003ff006 	br	809bb8 <__alt_mem_onchip_mem+0xff789bb8>
  809bf8:	00802074 	movhi	r2,129
  809bfc:	10926004 	addi	r2,r2,18816
  809c00:	f800283a 	ret

00809c04 <__locale_charset>:
  809c04:	00802074 	movhi	r2,129
  809c08:	1095dd04 	addi	r2,r2,22388
  809c0c:	f800283a 	ret

00809c10 <__locale_mb_cur_max>:
  809c10:	00802074 	movhi	r2,129
  809c14:	109af204 	addi	r2,r2,27592
  809c18:	10800017 	ldw	r2,0(r2)
  809c1c:	f800283a 	ret

00809c20 <__locale_msgcharset>:
  809c20:	00802074 	movhi	r2,129
  809c24:	1095d504 	addi	r2,r2,22356
  809c28:	f800283a 	ret

00809c2c <__locale_cjk_lang>:
  809c2c:	0005883a 	mov	r2,zero
  809c30:	f800283a 	ret

00809c34 <_localeconv_r>:
  809c34:	00802074 	movhi	r2,129
  809c38:	1095e504 	addi	r2,r2,22420
  809c3c:	f800283a 	ret

00809c40 <setlocale>:
  809c40:	00802074 	movhi	r2,129
  809c44:	109aef04 	addi	r2,r2,27580
  809c48:	280d883a 	mov	r6,r5
  809c4c:	200b883a 	mov	r5,r4
  809c50:	11000017 	ldw	r4,0(r2)
  809c54:	0809b881 	jmpi	809b88 <_setlocale_r>

00809c58 <localeconv>:
  809c58:	00802074 	movhi	r2,129
  809c5c:	1095e504 	addi	r2,r2,22420
  809c60:	f800283a 	ret

00809c64 <_lseek_r>:
  809c64:	defffd04 	addi	sp,sp,-12
  809c68:	2805883a 	mov	r2,r5
  809c6c:	dc000015 	stw	r16,0(sp)
  809c70:	040020b4 	movhi	r16,130
  809c74:	dc400115 	stw	r17,4(sp)
  809c78:	300b883a 	mov	r5,r6
  809c7c:	84228a04 	addi	r16,r16,-30168
  809c80:	2023883a 	mov	r17,r4
  809c84:	380d883a 	mov	r6,r7
  809c88:	1009883a 	mov	r4,r2
  809c8c:	dfc00215 	stw	ra,8(sp)
  809c90:	80000015 	stw	zero,0(r16)
  809c94:	0810bd40 	call	810bd4 <lseek>
  809c98:	00ffffc4 	movi	r3,-1
  809c9c:	10c00526 	beq	r2,r3,809cb4 <_lseek_r+0x50>
  809ca0:	dfc00217 	ldw	ra,8(sp)
  809ca4:	dc400117 	ldw	r17,4(sp)
  809ca8:	dc000017 	ldw	r16,0(sp)
  809cac:	dec00304 	addi	sp,sp,12
  809cb0:	f800283a 	ret
  809cb4:	80c00017 	ldw	r3,0(r16)
  809cb8:	183ff926 	beq	r3,zero,809ca0 <__alt_mem_onchip_mem+0xff789ca0>
  809cbc:	88c00015 	stw	r3,0(r17)
  809cc0:	003ff706 	br	809ca0 <__alt_mem_onchip_mem+0xff789ca0>

00809cc4 <memchr>:
  809cc4:	208000cc 	andi	r2,r4,3
  809cc8:	280f883a 	mov	r7,r5
  809ccc:	10003426 	beq	r2,zero,809da0 <memchr+0xdc>
  809cd0:	30bfffc4 	addi	r2,r6,-1
  809cd4:	30001a26 	beq	r6,zero,809d40 <memchr+0x7c>
  809cd8:	20c00003 	ldbu	r3,0(r4)
  809cdc:	29803fcc 	andi	r6,r5,255
  809ce0:	30c0051e 	bne	r6,r3,809cf8 <memchr+0x34>
  809ce4:	00001806 	br	809d48 <memchr+0x84>
  809ce8:	10001526 	beq	r2,zero,809d40 <memchr+0x7c>
  809cec:	20c00003 	ldbu	r3,0(r4)
  809cf0:	10bfffc4 	addi	r2,r2,-1
  809cf4:	30c01426 	beq	r6,r3,809d48 <memchr+0x84>
  809cf8:	21000044 	addi	r4,r4,1
  809cfc:	20c000cc 	andi	r3,r4,3
  809d00:	183ff91e 	bne	r3,zero,809ce8 <__alt_mem_onchip_mem+0xff789ce8>
  809d04:	020000c4 	movi	r8,3
  809d08:	40801136 	bltu	r8,r2,809d50 <memchr+0x8c>
  809d0c:	10000c26 	beq	r2,zero,809d40 <memchr+0x7c>
  809d10:	20c00003 	ldbu	r3,0(r4)
  809d14:	29403fcc 	andi	r5,r5,255
  809d18:	28c00b26 	beq	r5,r3,809d48 <memchr+0x84>
  809d1c:	20c00044 	addi	r3,r4,1
  809d20:	39803fcc 	andi	r6,r7,255
  809d24:	2089883a 	add	r4,r4,r2
  809d28:	00000306 	br	809d38 <memchr+0x74>
  809d2c:	18c00044 	addi	r3,r3,1
  809d30:	197fffc3 	ldbu	r5,-1(r3)
  809d34:	31400526 	beq	r6,r5,809d4c <memchr+0x88>
  809d38:	1805883a 	mov	r2,r3
  809d3c:	20fffb1e 	bne	r4,r3,809d2c <__alt_mem_onchip_mem+0xff789d2c>
  809d40:	0005883a 	mov	r2,zero
  809d44:	f800283a 	ret
  809d48:	2005883a 	mov	r2,r4
  809d4c:	f800283a 	ret
  809d50:	28c03fcc 	andi	r3,r5,255
  809d54:	1812923a 	slli	r9,r3,8
  809d58:	02ffbff4 	movhi	r11,65279
  809d5c:	02a02074 	movhi	r10,32897
  809d60:	48d2b03a 	or	r9,r9,r3
  809d64:	4806943a 	slli	r3,r9,16
  809d68:	5affbfc4 	addi	r11,r11,-257
  809d6c:	52a02004 	addi	r10,r10,-32640
  809d70:	48d2b03a 	or	r9,r9,r3
  809d74:	20c00017 	ldw	r3,0(r4)
  809d78:	48c6f03a 	xor	r3,r9,r3
  809d7c:	1acd883a 	add	r6,r3,r11
  809d80:	00c6303a 	nor	r3,zero,r3
  809d84:	30c6703a 	and	r3,r6,r3
  809d88:	1a86703a 	and	r3,r3,r10
  809d8c:	183fe01e 	bne	r3,zero,809d10 <__alt_mem_onchip_mem+0xff789d10>
  809d90:	10bfff04 	addi	r2,r2,-4
  809d94:	21000104 	addi	r4,r4,4
  809d98:	40bff636 	bltu	r8,r2,809d74 <__alt_mem_onchip_mem+0xff789d74>
  809d9c:	003fdb06 	br	809d0c <__alt_mem_onchip_mem+0xff789d0c>
  809da0:	3005883a 	mov	r2,r6
  809da4:	003fd706 	br	809d04 <__alt_mem_onchip_mem+0xff789d04>

00809da8 <memcpy>:
  809da8:	defffd04 	addi	sp,sp,-12
  809dac:	dfc00215 	stw	ra,8(sp)
  809db0:	dc400115 	stw	r17,4(sp)
  809db4:	dc000015 	stw	r16,0(sp)
  809db8:	00c003c4 	movi	r3,15
  809dbc:	2005883a 	mov	r2,r4
  809dc0:	1980452e 	bgeu	r3,r6,809ed8 <memcpy+0x130>
  809dc4:	2906b03a 	or	r3,r5,r4
  809dc8:	18c000cc 	andi	r3,r3,3
  809dcc:	1800441e 	bne	r3,zero,809ee0 <memcpy+0x138>
  809dd0:	347ffc04 	addi	r17,r6,-16
  809dd4:	8822d13a 	srli	r17,r17,4
  809dd8:	28c00104 	addi	r3,r5,4
  809ddc:	23400104 	addi	r13,r4,4
  809de0:	8820913a 	slli	r16,r17,4
  809de4:	2b000204 	addi	r12,r5,8
  809de8:	22c00204 	addi	r11,r4,8
  809dec:	84000504 	addi	r16,r16,20
  809df0:	2a800304 	addi	r10,r5,12
  809df4:	22400304 	addi	r9,r4,12
  809df8:	2c21883a 	add	r16,r5,r16
  809dfc:	2811883a 	mov	r8,r5
  809e00:	200f883a 	mov	r7,r4
  809e04:	41000017 	ldw	r4,0(r8)
  809e08:	1fc00017 	ldw	ra,0(r3)
  809e0c:	63c00017 	ldw	r15,0(r12)
  809e10:	39000015 	stw	r4,0(r7)
  809e14:	53800017 	ldw	r14,0(r10)
  809e18:	6fc00015 	stw	ra,0(r13)
  809e1c:	5bc00015 	stw	r15,0(r11)
  809e20:	4b800015 	stw	r14,0(r9)
  809e24:	18c00404 	addi	r3,r3,16
  809e28:	39c00404 	addi	r7,r7,16
  809e2c:	42000404 	addi	r8,r8,16
  809e30:	6b400404 	addi	r13,r13,16
  809e34:	63000404 	addi	r12,r12,16
  809e38:	5ac00404 	addi	r11,r11,16
  809e3c:	52800404 	addi	r10,r10,16
  809e40:	4a400404 	addi	r9,r9,16
  809e44:	1c3fef1e 	bne	r3,r16,809e04 <__alt_mem_onchip_mem+0xff789e04>
  809e48:	89c00044 	addi	r7,r17,1
  809e4c:	380e913a 	slli	r7,r7,4
  809e50:	310003cc 	andi	r4,r6,15
  809e54:	02c000c4 	movi	r11,3
  809e58:	11c7883a 	add	r3,r2,r7
  809e5c:	29cb883a 	add	r5,r5,r7
  809e60:	5900212e 	bgeu	r11,r4,809ee8 <memcpy+0x140>
  809e64:	1813883a 	mov	r9,r3
  809e68:	2811883a 	mov	r8,r5
  809e6c:	200f883a 	mov	r7,r4
  809e70:	42800017 	ldw	r10,0(r8)
  809e74:	4a400104 	addi	r9,r9,4
  809e78:	39ffff04 	addi	r7,r7,-4
  809e7c:	4abfff15 	stw	r10,-4(r9)
  809e80:	42000104 	addi	r8,r8,4
  809e84:	59fffa36 	bltu	r11,r7,809e70 <__alt_mem_onchip_mem+0xff789e70>
  809e88:	213fff04 	addi	r4,r4,-4
  809e8c:	2008d0ba 	srli	r4,r4,2
  809e90:	318000cc 	andi	r6,r6,3
  809e94:	21000044 	addi	r4,r4,1
  809e98:	2109883a 	add	r4,r4,r4
  809e9c:	2109883a 	add	r4,r4,r4
  809ea0:	1907883a 	add	r3,r3,r4
  809ea4:	290b883a 	add	r5,r5,r4
  809ea8:	30000626 	beq	r6,zero,809ec4 <memcpy+0x11c>
  809eac:	198d883a 	add	r6,r3,r6
  809eb0:	29c00003 	ldbu	r7,0(r5)
  809eb4:	18c00044 	addi	r3,r3,1
  809eb8:	29400044 	addi	r5,r5,1
  809ebc:	19ffffc5 	stb	r7,-1(r3)
  809ec0:	19bffb1e 	bne	r3,r6,809eb0 <__alt_mem_onchip_mem+0xff789eb0>
  809ec4:	dfc00217 	ldw	ra,8(sp)
  809ec8:	dc400117 	ldw	r17,4(sp)
  809ecc:	dc000017 	ldw	r16,0(sp)
  809ed0:	dec00304 	addi	sp,sp,12
  809ed4:	f800283a 	ret
  809ed8:	2007883a 	mov	r3,r4
  809edc:	003ff206 	br	809ea8 <__alt_mem_onchip_mem+0xff789ea8>
  809ee0:	2007883a 	mov	r3,r4
  809ee4:	003ff106 	br	809eac <__alt_mem_onchip_mem+0xff789eac>
  809ee8:	200d883a 	mov	r6,r4
  809eec:	003fee06 	br	809ea8 <__alt_mem_onchip_mem+0xff789ea8>

00809ef0 <memmove>:
  809ef0:	2005883a 	mov	r2,r4
  809ef4:	29000b2e 	bgeu	r5,r4,809f24 <memmove+0x34>
  809ef8:	298f883a 	add	r7,r5,r6
  809efc:	21c0092e 	bgeu	r4,r7,809f24 <memmove+0x34>
  809f00:	2187883a 	add	r3,r4,r6
  809f04:	198bc83a 	sub	r5,r3,r6
  809f08:	30004826 	beq	r6,zero,80a02c <memmove+0x13c>
  809f0c:	39ffffc4 	addi	r7,r7,-1
  809f10:	39000003 	ldbu	r4,0(r7)
  809f14:	18ffffc4 	addi	r3,r3,-1
  809f18:	19000005 	stb	r4,0(r3)
  809f1c:	28fffb1e 	bne	r5,r3,809f0c <__alt_mem_onchip_mem+0xff789f0c>
  809f20:	f800283a 	ret
  809f24:	00c003c4 	movi	r3,15
  809f28:	1980412e 	bgeu	r3,r6,80a030 <memmove+0x140>
  809f2c:	2886b03a 	or	r3,r5,r2
  809f30:	18c000cc 	andi	r3,r3,3
  809f34:	1800401e 	bne	r3,zero,80a038 <memmove+0x148>
  809f38:	33fffc04 	addi	r15,r6,-16
  809f3c:	781ed13a 	srli	r15,r15,4
  809f40:	28c00104 	addi	r3,r5,4
  809f44:	13400104 	addi	r13,r2,4
  809f48:	781c913a 	slli	r14,r15,4
  809f4c:	2b000204 	addi	r12,r5,8
  809f50:	12c00204 	addi	r11,r2,8
  809f54:	73800504 	addi	r14,r14,20
  809f58:	2a800304 	addi	r10,r5,12
  809f5c:	12400304 	addi	r9,r2,12
  809f60:	2b9d883a 	add	r14,r5,r14
  809f64:	2811883a 	mov	r8,r5
  809f68:	100f883a 	mov	r7,r2
  809f6c:	41000017 	ldw	r4,0(r8)
  809f70:	39c00404 	addi	r7,r7,16
  809f74:	18c00404 	addi	r3,r3,16
  809f78:	393ffc15 	stw	r4,-16(r7)
  809f7c:	193ffc17 	ldw	r4,-16(r3)
  809f80:	6b400404 	addi	r13,r13,16
  809f84:	5ac00404 	addi	r11,r11,16
  809f88:	693ffc15 	stw	r4,-16(r13)
  809f8c:	61000017 	ldw	r4,0(r12)
  809f90:	4a400404 	addi	r9,r9,16
  809f94:	42000404 	addi	r8,r8,16
  809f98:	593ffc15 	stw	r4,-16(r11)
  809f9c:	51000017 	ldw	r4,0(r10)
  809fa0:	63000404 	addi	r12,r12,16
  809fa4:	52800404 	addi	r10,r10,16
  809fa8:	493ffc15 	stw	r4,-16(r9)
  809fac:	1bbfef1e 	bne	r3,r14,809f6c <__alt_mem_onchip_mem+0xff789f6c>
  809fb0:	79000044 	addi	r4,r15,1
  809fb4:	2008913a 	slli	r4,r4,4
  809fb8:	328003cc 	andi	r10,r6,15
  809fbc:	02c000c4 	movi	r11,3
  809fc0:	1107883a 	add	r3,r2,r4
  809fc4:	290b883a 	add	r5,r5,r4
  809fc8:	5a801e2e 	bgeu	r11,r10,80a044 <memmove+0x154>
  809fcc:	1813883a 	mov	r9,r3
  809fd0:	2811883a 	mov	r8,r5
  809fd4:	500f883a 	mov	r7,r10
  809fd8:	41000017 	ldw	r4,0(r8)
  809fdc:	4a400104 	addi	r9,r9,4
  809fe0:	39ffff04 	addi	r7,r7,-4
  809fe4:	493fff15 	stw	r4,-4(r9)
  809fe8:	42000104 	addi	r8,r8,4
  809fec:	59fffa36 	bltu	r11,r7,809fd8 <__alt_mem_onchip_mem+0xff789fd8>
  809ff0:	513fff04 	addi	r4,r10,-4
  809ff4:	2008d0ba 	srli	r4,r4,2
  809ff8:	318000cc 	andi	r6,r6,3
  809ffc:	21000044 	addi	r4,r4,1
  80a000:	2109883a 	add	r4,r4,r4
  80a004:	2109883a 	add	r4,r4,r4
  80a008:	1907883a 	add	r3,r3,r4
  80a00c:	290b883a 	add	r5,r5,r4
  80a010:	30000b26 	beq	r6,zero,80a040 <memmove+0x150>
  80a014:	198d883a 	add	r6,r3,r6
  80a018:	29c00003 	ldbu	r7,0(r5)
  80a01c:	18c00044 	addi	r3,r3,1
  80a020:	29400044 	addi	r5,r5,1
  80a024:	19ffffc5 	stb	r7,-1(r3)
  80a028:	19bffb1e 	bne	r3,r6,80a018 <__alt_mem_onchip_mem+0xff78a018>
  80a02c:	f800283a 	ret
  80a030:	1007883a 	mov	r3,r2
  80a034:	003ff606 	br	80a010 <__alt_mem_onchip_mem+0xff78a010>
  80a038:	1007883a 	mov	r3,r2
  80a03c:	003ff506 	br	80a014 <__alt_mem_onchip_mem+0xff78a014>
  80a040:	f800283a 	ret
  80a044:	500d883a 	mov	r6,r10
  80a048:	003ff106 	br	80a010 <__alt_mem_onchip_mem+0xff78a010>

0080a04c <_Balloc>:
  80a04c:	20801317 	ldw	r2,76(r4)
  80a050:	defffc04 	addi	sp,sp,-16
  80a054:	dc400115 	stw	r17,4(sp)
  80a058:	dc000015 	stw	r16,0(sp)
  80a05c:	dfc00315 	stw	ra,12(sp)
  80a060:	dc800215 	stw	r18,8(sp)
  80a064:	2023883a 	mov	r17,r4
  80a068:	2821883a 	mov	r16,r5
  80a06c:	10000f26 	beq	r2,zero,80a0ac <_Balloc+0x60>
  80a070:	8407883a 	add	r3,r16,r16
  80a074:	18c7883a 	add	r3,r3,r3
  80a078:	10c7883a 	add	r3,r2,r3
  80a07c:	18800017 	ldw	r2,0(r3)
  80a080:	10001126 	beq	r2,zero,80a0c8 <_Balloc+0x7c>
  80a084:	11000017 	ldw	r4,0(r2)
  80a088:	19000015 	stw	r4,0(r3)
  80a08c:	10000415 	stw	zero,16(r2)
  80a090:	10000315 	stw	zero,12(r2)
  80a094:	dfc00317 	ldw	ra,12(sp)
  80a098:	dc800217 	ldw	r18,8(sp)
  80a09c:	dc400117 	ldw	r17,4(sp)
  80a0a0:	dc000017 	ldw	r16,0(sp)
  80a0a4:	dec00404 	addi	sp,sp,16
  80a0a8:	f800283a 	ret
  80a0ac:	01800844 	movi	r6,33
  80a0b0:	01400104 	movi	r5,4
  80a0b4:	080cda40 	call	80cda4 <_calloc_r>
  80a0b8:	88801315 	stw	r2,76(r17)
  80a0bc:	103fec1e 	bne	r2,zero,80a070 <__alt_mem_onchip_mem+0xff78a070>
  80a0c0:	0005883a 	mov	r2,zero
  80a0c4:	003ff306 	br	80a094 <__alt_mem_onchip_mem+0xff78a094>
  80a0c8:	01400044 	movi	r5,1
  80a0cc:	2c24983a 	sll	r18,r5,r16
  80a0d0:	8809883a 	mov	r4,r17
  80a0d4:	91800144 	addi	r6,r18,5
  80a0d8:	318d883a 	add	r6,r6,r6
  80a0dc:	318d883a 	add	r6,r6,r6
  80a0e0:	080cda40 	call	80cda4 <_calloc_r>
  80a0e4:	103ff626 	beq	r2,zero,80a0c0 <__alt_mem_onchip_mem+0xff78a0c0>
  80a0e8:	14000115 	stw	r16,4(r2)
  80a0ec:	14800215 	stw	r18,8(r2)
  80a0f0:	003fe606 	br	80a08c <__alt_mem_onchip_mem+0xff78a08c>

0080a0f4 <_Bfree>:
  80a0f4:	28000826 	beq	r5,zero,80a118 <_Bfree+0x24>
  80a0f8:	28c00117 	ldw	r3,4(r5)
  80a0fc:	20801317 	ldw	r2,76(r4)
  80a100:	18c7883a 	add	r3,r3,r3
  80a104:	18c7883a 	add	r3,r3,r3
  80a108:	10c5883a 	add	r2,r2,r3
  80a10c:	10c00017 	ldw	r3,0(r2)
  80a110:	28c00015 	stw	r3,0(r5)
  80a114:	11400015 	stw	r5,0(r2)
  80a118:	f800283a 	ret

0080a11c <__multadd>:
  80a11c:	defffa04 	addi	sp,sp,-24
  80a120:	dc800315 	stw	r18,12(sp)
  80a124:	dc400215 	stw	r17,8(sp)
  80a128:	dc000115 	stw	r16,4(sp)
  80a12c:	2823883a 	mov	r17,r5
  80a130:	2c000417 	ldw	r16,16(r5)
  80a134:	dfc00515 	stw	ra,20(sp)
  80a138:	dcc00415 	stw	r19,16(sp)
  80a13c:	2025883a 	mov	r18,r4
  80a140:	29400504 	addi	r5,r5,20
  80a144:	0011883a 	mov	r8,zero
  80a148:	28c00017 	ldw	r3,0(r5)
  80a14c:	29400104 	addi	r5,r5,4
  80a150:	42000044 	addi	r8,r8,1
  80a154:	18bfffcc 	andi	r2,r3,65535
  80a158:	1185383a 	mul	r2,r2,r6
  80a15c:	1806d43a 	srli	r3,r3,16
  80a160:	11cf883a 	add	r7,r2,r7
  80a164:	3808d43a 	srli	r4,r7,16
  80a168:	1987383a 	mul	r3,r3,r6
  80a16c:	38bfffcc 	andi	r2,r7,65535
  80a170:	1907883a 	add	r3,r3,r4
  80a174:	1808943a 	slli	r4,r3,16
  80a178:	180ed43a 	srli	r7,r3,16
  80a17c:	2085883a 	add	r2,r4,r2
  80a180:	28bfff15 	stw	r2,-4(r5)
  80a184:	443ff016 	blt	r8,r16,80a148 <__alt_mem_onchip_mem+0xff78a148>
  80a188:	38000926 	beq	r7,zero,80a1b0 <__multadd+0x94>
  80a18c:	88800217 	ldw	r2,8(r17)
  80a190:	80800f0e 	bge	r16,r2,80a1d0 <__multadd+0xb4>
  80a194:	80800144 	addi	r2,r16,5
  80a198:	1085883a 	add	r2,r2,r2
  80a19c:	1085883a 	add	r2,r2,r2
  80a1a0:	8885883a 	add	r2,r17,r2
  80a1a4:	11c00015 	stw	r7,0(r2)
  80a1a8:	84000044 	addi	r16,r16,1
  80a1ac:	8c000415 	stw	r16,16(r17)
  80a1b0:	8805883a 	mov	r2,r17
  80a1b4:	dfc00517 	ldw	ra,20(sp)
  80a1b8:	dcc00417 	ldw	r19,16(sp)
  80a1bc:	dc800317 	ldw	r18,12(sp)
  80a1c0:	dc400217 	ldw	r17,8(sp)
  80a1c4:	dc000117 	ldw	r16,4(sp)
  80a1c8:	dec00604 	addi	sp,sp,24
  80a1cc:	f800283a 	ret
  80a1d0:	89400117 	ldw	r5,4(r17)
  80a1d4:	9009883a 	mov	r4,r18
  80a1d8:	d9c00015 	stw	r7,0(sp)
  80a1dc:	29400044 	addi	r5,r5,1
  80a1e0:	080a04c0 	call	80a04c <_Balloc>
  80a1e4:	89800417 	ldw	r6,16(r17)
  80a1e8:	89400304 	addi	r5,r17,12
  80a1ec:	11000304 	addi	r4,r2,12
  80a1f0:	31800084 	addi	r6,r6,2
  80a1f4:	318d883a 	add	r6,r6,r6
  80a1f8:	318d883a 	add	r6,r6,r6
  80a1fc:	1027883a 	mov	r19,r2
  80a200:	0809da80 	call	809da8 <memcpy>
  80a204:	d9c00017 	ldw	r7,0(sp)
  80a208:	88000a26 	beq	r17,zero,80a234 <__multadd+0x118>
  80a20c:	88c00117 	ldw	r3,4(r17)
  80a210:	90801317 	ldw	r2,76(r18)
  80a214:	18c7883a 	add	r3,r3,r3
  80a218:	18c7883a 	add	r3,r3,r3
  80a21c:	10c5883a 	add	r2,r2,r3
  80a220:	10c00017 	ldw	r3,0(r2)
  80a224:	88c00015 	stw	r3,0(r17)
  80a228:	14400015 	stw	r17,0(r2)
  80a22c:	9823883a 	mov	r17,r19
  80a230:	003fd806 	br	80a194 <__alt_mem_onchip_mem+0xff78a194>
  80a234:	9823883a 	mov	r17,r19
  80a238:	003fd606 	br	80a194 <__alt_mem_onchip_mem+0xff78a194>

0080a23c <__s2b>:
  80a23c:	defff904 	addi	sp,sp,-28
  80a240:	dc400115 	stw	r17,4(sp)
  80a244:	dc000015 	stw	r16,0(sp)
  80a248:	2023883a 	mov	r17,r4
  80a24c:	2821883a 	mov	r16,r5
  80a250:	39000204 	addi	r4,r7,8
  80a254:	01400244 	movi	r5,9
  80a258:	dcc00315 	stw	r19,12(sp)
  80a25c:	dc800215 	stw	r18,8(sp)
  80a260:	dfc00615 	stw	ra,24(sp)
  80a264:	dd400515 	stw	r21,20(sp)
  80a268:	dd000415 	stw	r20,16(sp)
  80a26c:	3825883a 	mov	r18,r7
  80a270:	3027883a 	mov	r19,r6
  80a274:	080de0c0 	call	80de0c <__divsi3>
  80a278:	00c00044 	movi	r3,1
  80a27c:	000b883a 	mov	r5,zero
  80a280:	1880030e 	bge	r3,r2,80a290 <__s2b+0x54>
  80a284:	18c7883a 	add	r3,r3,r3
  80a288:	29400044 	addi	r5,r5,1
  80a28c:	18bffd16 	blt	r3,r2,80a284 <__alt_mem_onchip_mem+0xff78a284>
  80a290:	8809883a 	mov	r4,r17
  80a294:	080a04c0 	call	80a04c <_Balloc>
  80a298:	d8c00717 	ldw	r3,28(sp)
  80a29c:	10c00515 	stw	r3,20(r2)
  80a2a0:	00c00044 	movi	r3,1
  80a2a4:	10c00415 	stw	r3,16(r2)
  80a2a8:	00c00244 	movi	r3,9
  80a2ac:	1cc0210e 	bge	r3,r19,80a334 <__s2b+0xf8>
  80a2b0:	80eb883a 	add	r21,r16,r3
  80a2b4:	a829883a 	mov	r20,r21
  80a2b8:	84e1883a 	add	r16,r16,r19
  80a2bc:	a1c00007 	ldb	r7,0(r20)
  80a2c0:	01800284 	movi	r6,10
  80a2c4:	a5000044 	addi	r20,r20,1
  80a2c8:	100b883a 	mov	r5,r2
  80a2cc:	39fff404 	addi	r7,r7,-48
  80a2d0:	8809883a 	mov	r4,r17
  80a2d4:	080a11c0 	call	80a11c <__multadd>
  80a2d8:	a43ff81e 	bne	r20,r16,80a2bc <__alt_mem_onchip_mem+0xff78a2bc>
  80a2dc:	ace1883a 	add	r16,r21,r19
  80a2e0:	843ffe04 	addi	r16,r16,-8
  80a2e4:	9c800a0e 	bge	r19,r18,80a310 <__s2b+0xd4>
  80a2e8:	94e5c83a 	sub	r18,r18,r19
  80a2ec:	84a5883a 	add	r18,r16,r18
  80a2f0:	81c00007 	ldb	r7,0(r16)
  80a2f4:	01800284 	movi	r6,10
  80a2f8:	84000044 	addi	r16,r16,1
  80a2fc:	100b883a 	mov	r5,r2
  80a300:	39fff404 	addi	r7,r7,-48
  80a304:	8809883a 	mov	r4,r17
  80a308:	080a11c0 	call	80a11c <__multadd>
  80a30c:	84bff81e 	bne	r16,r18,80a2f0 <__alt_mem_onchip_mem+0xff78a2f0>
  80a310:	dfc00617 	ldw	ra,24(sp)
  80a314:	dd400517 	ldw	r21,20(sp)
  80a318:	dd000417 	ldw	r20,16(sp)
  80a31c:	dcc00317 	ldw	r19,12(sp)
  80a320:	dc800217 	ldw	r18,8(sp)
  80a324:	dc400117 	ldw	r17,4(sp)
  80a328:	dc000017 	ldw	r16,0(sp)
  80a32c:	dec00704 	addi	sp,sp,28
  80a330:	f800283a 	ret
  80a334:	84000284 	addi	r16,r16,10
  80a338:	1827883a 	mov	r19,r3
  80a33c:	003fe906 	br	80a2e4 <__alt_mem_onchip_mem+0xff78a2e4>

0080a340 <__hi0bits>:
  80a340:	20bfffec 	andhi	r2,r4,65535
  80a344:	1000141e 	bne	r2,zero,80a398 <__hi0bits+0x58>
  80a348:	2008943a 	slli	r4,r4,16
  80a34c:	00800404 	movi	r2,16
  80a350:	20ffc02c 	andhi	r3,r4,65280
  80a354:	1800021e 	bne	r3,zero,80a360 <__hi0bits+0x20>
  80a358:	2008923a 	slli	r4,r4,8
  80a35c:	10800204 	addi	r2,r2,8
  80a360:	20fc002c 	andhi	r3,r4,61440
  80a364:	1800021e 	bne	r3,zero,80a370 <__hi0bits+0x30>
  80a368:	2008913a 	slli	r4,r4,4
  80a36c:	10800104 	addi	r2,r2,4
  80a370:	20f0002c 	andhi	r3,r4,49152
  80a374:	1800031e 	bne	r3,zero,80a384 <__hi0bits+0x44>
  80a378:	2109883a 	add	r4,r4,r4
  80a37c:	10800084 	addi	r2,r2,2
  80a380:	2109883a 	add	r4,r4,r4
  80a384:	20000316 	blt	r4,zero,80a394 <__hi0bits+0x54>
  80a388:	2110002c 	andhi	r4,r4,16384
  80a38c:	2000041e 	bne	r4,zero,80a3a0 <__hi0bits+0x60>
  80a390:	00800804 	movi	r2,32
  80a394:	f800283a 	ret
  80a398:	0005883a 	mov	r2,zero
  80a39c:	003fec06 	br	80a350 <__alt_mem_onchip_mem+0xff78a350>
  80a3a0:	10800044 	addi	r2,r2,1
  80a3a4:	f800283a 	ret

0080a3a8 <__lo0bits>:
  80a3a8:	20c00017 	ldw	r3,0(r4)
  80a3ac:	188001cc 	andi	r2,r3,7
  80a3b0:	10000826 	beq	r2,zero,80a3d4 <__lo0bits+0x2c>
  80a3b4:	1880004c 	andi	r2,r3,1
  80a3b8:	1000211e 	bne	r2,zero,80a440 <__lo0bits+0x98>
  80a3bc:	1880008c 	andi	r2,r3,2
  80a3c0:	1000211e 	bne	r2,zero,80a448 <__lo0bits+0xa0>
  80a3c4:	1806d0ba 	srli	r3,r3,2
  80a3c8:	00800084 	movi	r2,2
  80a3cc:	20c00015 	stw	r3,0(r4)
  80a3d0:	f800283a 	ret
  80a3d4:	18bfffcc 	andi	r2,r3,65535
  80a3d8:	10001326 	beq	r2,zero,80a428 <__lo0bits+0x80>
  80a3dc:	0005883a 	mov	r2,zero
  80a3e0:	19403fcc 	andi	r5,r3,255
  80a3e4:	2800021e 	bne	r5,zero,80a3f0 <__lo0bits+0x48>
  80a3e8:	1806d23a 	srli	r3,r3,8
  80a3ec:	10800204 	addi	r2,r2,8
  80a3f0:	194003cc 	andi	r5,r3,15
  80a3f4:	2800021e 	bne	r5,zero,80a400 <__lo0bits+0x58>
  80a3f8:	1806d13a 	srli	r3,r3,4
  80a3fc:	10800104 	addi	r2,r2,4
  80a400:	194000cc 	andi	r5,r3,3
  80a404:	2800021e 	bne	r5,zero,80a410 <__lo0bits+0x68>
  80a408:	1806d0ba 	srli	r3,r3,2
  80a40c:	10800084 	addi	r2,r2,2
  80a410:	1940004c 	andi	r5,r3,1
  80a414:	2800081e 	bne	r5,zero,80a438 <__lo0bits+0x90>
  80a418:	1806d07a 	srli	r3,r3,1
  80a41c:	1800051e 	bne	r3,zero,80a434 <__lo0bits+0x8c>
  80a420:	00800804 	movi	r2,32
  80a424:	f800283a 	ret
  80a428:	1806d43a 	srli	r3,r3,16
  80a42c:	00800404 	movi	r2,16
  80a430:	003feb06 	br	80a3e0 <__alt_mem_onchip_mem+0xff78a3e0>
  80a434:	10800044 	addi	r2,r2,1
  80a438:	20c00015 	stw	r3,0(r4)
  80a43c:	f800283a 	ret
  80a440:	0005883a 	mov	r2,zero
  80a444:	f800283a 	ret
  80a448:	1806d07a 	srli	r3,r3,1
  80a44c:	00800044 	movi	r2,1
  80a450:	20c00015 	stw	r3,0(r4)
  80a454:	f800283a 	ret

0080a458 <__i2b>:
  80a458:	defffd04 	addi	sp,sp,-12
  80a45c:	dc000015 	stw	r16,0(sp)
  80a460:	04000044 	movi	r16,1
  80a464:	dc400115 	stw	r17,4(sp)
  80a468:	2823883a 	mov	r17,r5
  80a46c:	800b883a 	mov	r5,r16
  80a470:	dfc00215 	stw	ra,8(sp)
  80a474:	080a04c0 	call	80a04c <_Balloc>
  80a478:	14400515 	stw	r17,20(r2)
  80a47c:	14000415 	stw	r16,16(r2)
  80a480:	dfc00217 	ldw	ra,8(sp)
  80a484:	dc400117 	ldw	r17,4(sp)
  80a488:	dc000017 	ldw	r16,0(sp)
  80a48c:	dec00304 	addi	sp,sp,12
  80a490:	f800283a 	ret

0080a494 <__multiply>:
  80a494:	defffa04 	addi	sp,sp,-24
  80a498:	dcc00315 	stw	r19,12(sp)
  80a49c:	dc800215 	stw	r18,8(sp)
  80a4a0:	34c00417 	ldw	r19,16(r6)
  80a4a4:	2c800417 	ldw	r18,16(r5)
  80a4a8:	dd000415 	stw	r20,16(sp)
  80a4ac:	dc400115 	stw	r17,4(sp)
  80a4b0:	dfc00515 	stw	ra,20(sp)
  80a4b4:	dc000015 	stw	r16,0(sp)
  80a4b8:	2829883a 	mov	r20,r5
  80a4bc:	3023883a 	mov	r17,r6
  80a4c0:	94c0050e 	bge	r18,r19,80a4d8 <__multiply+0x44>
  80a4c4:	9007883a 	mov	r3,r18
  80a4c8:	3029883a 	mov	r20,r6
  80a4cc:	9825883a 	mov	r18,r19
  80a4d0:	2823883a 	mov	r17,r5
  80a4d4:	1827883a 	mov	r19,r3
  80a4d8:	a0800217 	ldw	r2,8(r20)
  80a4dc:	94e1883a 	add	r16,r18,r19
  80a4e0:	a1400117 	ldw	r5,4(r20)
  80a4e4:	1400010e 	bge	r2,r16,80a4ec <__multiply+0x58>
  80a4e8:	29400044 	addi	r5,r5,1
  80a4ec:	080a04c0 	call	80a04c <_Balloc>
  80a4f0:	8415883a 	add	r10,r16,r16
  80a4f4:	12c00504 	addi	r11,r2,20
  80a4f8:	5295883a 	add	r10,r10,r10
  80a4fc:	5a95883a 	add	r10,r11,r10
  80a500:	5807883a 	mov	r3,r11
  80a504:	5a80032e 	bgeu	r11,r10,80a514 <__multiply+0x80>
  80a508:	18000015 	stw	zero,0(r3)
  80a50c:	18c00104 	addi	r3,r3,4
  80a510:	1abffd36 	bltu	r3,r10,80a508 <__alt_mem_onchip_mem+0xff78a508>
  80a514:	9ce7883a 	add	r19,r19,r19
  80a518:	94a5883a 	add	r18,r18,r18
  80a51c:	89800504 	addi	r6,r17,20
  80a520:	9ce7883a 	add	r19,r19,r19
  80a524:	a3400504 	addi	r13,r20,20
  80a528:	94a5883a 	add	r18,r18,r18
  80a52c:	34d9883a 	add	r12,r6,r19
  80a530:	6c93883a 	add	r9,r13,r18
  80a534:	3300422e 	bgeu	r6,r12,80a640 <__multiply+0x1ac>
  80a538:	37c00017 	ldw	ra,0(r6)
  80a53c:	fbffffcc 	andi	r15,ra,65535
  80a540:	78001b26 	beq	r15,zero,80a5b0 <__multiply+0x11c>
  80a544:	5811883a 	mov	r8,r11
  80a548:	681d883a 	mov	r14,r13
  80a54c:	000f883a 	mov	r7,zero
  80a550:	71000017 	ldw	r4,0(r14)
  80a554:	40c00017 	ldw	r3,0(r8)
  80a558:	73800104 	addi	r14,r14,4
  80a55c:	217fffcc 	andi	r5,r4,65535
  80a560:	2bcb383a 	mul	r5,r5,r15
  80a564:	2008d43a 	srli	r4,r4,16
  80a568:	1c7fffcc 	andi	r17,r3,65535
  80a56c:	2c4b883a 	add	r5,r5,r17
  80a570:	29cb883a 	add	r5,r5,r7
  80a574:	23c9383a 	mul	r4,r4,r15
  80a578:	1806d43a 	srli	r3,r3,16
  80a57c:	280ed43a 	srli	r7,r5,16
  80a580:	297fffcc 	andi	r5,r5,65535
  80a584:	20c7883a 	add	r3,r4,r3
  80a588:	19c7883a 	add	r3,r3,r7
  80a58c:	1808943a 	slli	r4,r3,16
  80a590:	4023883a 	mov	r17,r8
  80a594:	180ed43a 	srli	r7,r3,16
  80a598:	214ab03a 	or	r5,r4,r5
  80a59c:	41400015 	stw	r5,0(r8)
  80a5a0:	42000104 	addi	r8,r8,4
  80a5a4:	727fea36 	bltu	r14,r9,80a550 <__alt_mem_onchip_mem+0xff78a550>
  80a5a8:	89c00115 	stw	r7,4(r17)
  80a5ac:	37c00017 	ldw	ra,0(r6)
  80a5b0:	f83ed43a 	srli	ra,ra,16
  80a5b4:	f8001f26 	beq	ra,zero,80a634 <__multiply+0x1a0>
  80a5b8:	58c00017 	ldw	r3,0(r11)
  80a5bc:	681d883a 	mov	r14,r13
  80a5c0:	581f883a 	mov	r15,r11
  80a5c4:	1811883a 	mov	r8,r3
  80a5c8:	5825883a 	mov	r18,r11
  80a5cc:	000f883a 	mov	r7,zero
  80a5d0:	00000106 	br	80a5d8 <__multiply+0x144>
  80a5d4:	8825883a 	mov	r18,r17
  80a5d8:	7140000b 	ldhu	r5,0(r14)
  80a5dc:	4010d43a 	srli	r8,r8,16
  80a5e0:	193fffcc 	andi	r4,r3,65535
  80a5e4:	2fcb383a 	mul	r5,r5,ra
  80a5e8:	7bc00104 	addi	r15,r15,4
  80a5ec:	73800104 	addi	r14,r14,4
  80a5f0:	2a0b883a 	add	r5,r5,r8
  80a5f4:	29cb883a 	add	r5,r5,r7
  80a5f8:	2806943a 	slli	r3,r5,16
  80a5fc:	94400104 	addi	r17,r18,4
  80a600:	280ad43a 	srli	r5,r5,16
  80a604:	1908b03a 	or	r4,r3,r4
  80a608:	793fff15 	stw	r4,-4(r15)
  80a60c:	70ffff17 	ldw	r3,-4(r14)
  80a610:	8a000017 	ldw	r8,0(r17)
  80a614:	1806d43a 	srli	r3,r3,16
  80a618:	413fffcc 	andi	r4,r8,65535
  80a61c:	1fc7383a 	mul	r3,r3,ra
  80a620:	1907883a 	add	r3,r3,r4
  80a624:	1947883a 	add	r3,r3,r5
  80a628:	180ed43a 	srli	r7,r3,16
  80a62c:	727fe936 	bltu	r14,r9,80a5d4 <__alt_mem_onchip_mem+0xff78a5d4>
  80a630:	90c00115 	stw	r3,4(r18)
  80a634:	31800104 	addi	r6,r6,4
  80a638:	5ac00104 	addi	r11,r11,4
  80a63c:	333fbe36 	bltu	r6,r12,80a538 <__alt_mem_onchip_mem+0xff78a538>
  80a640:	0400090e 	bge	zero,r16,80a668 <__multiply+0x1d4>
  80a644:	50ffff17 	ldw	r3,-4(r10)
  80a648:	52bfff04 	addi	r10,r10,-4
  80a64c:	18000326 	beq	r3,zero,80a65c <__multiply+0x1c8>
  80a650:	00000506 	br	80a668 <__multiply+0x1d4>
  80a654:	50c00017 	ldw	r3,0(r10)
  80a658:	1800031e 	bne	r3,zero,80a668 <__multiply+0x1d4>
  80a65c:	843fffc4 	addi	r16,r16,-1
  80a660:	52bfff04 	addi	r10,r10,-4
  80a664:	803ffb1e 	bne	r16,zero,80a654 <__alt_mem_onchip_mem+0xff78a654>
  80a668:	14000415 	stw	r16,16(r2)
  80a66c:	dfc00517 	ldw	ra,20(sp)
  80a670:	dd000417 	ldw	r20,16(sp)
  80a674:	dcc00317 	ldw	r19,12(sp)
  80a678:	dc800217 	ldw	r18,8(sp)
  80a67c:	dc400117 	ldw	r17,4(sp)
  80a680:	dc000017 	ldw	r16,0(sp)
  80a684:	dec00604 	addi	sp,sp,24
  80a688:	f800283a 	ret

0080a68c <__pow5mult>:
  80a68c:	defffa04 	addi	sp,sp,-24
  80a690:	dcc00315 	stw	r19,12(sp)
  80a694:	dc000015 	stw	r16,0(sp)
  80a698:	dfc00515 	stw	ra,20(sp)
  80a69c:	dd000415 	stw	r20,16(sp)
  80a6a0:	dc800215 	stw	r18,8(sp)
  80a6a4:	dc400115 	stw	r17,4(sp)
  80a6a8:	308000cc 	andi	r2,r6,3
  80a6ac:	3021883a 	mov	r16,r6
  80a6b0:	2027883a 	mov	r19,r4
  80a6b4:	10002f1e 	bne	r2,zero,80a774 <__pow5mult+0xe8>
  80a6b8:	2825883a 	mov	r18,r5
  80a6bc:	8021d0ba 	srai	r16,r16,2
  80a6c0:	80001a26 	beq	r16,zero,80a72c <__pow5mult+0xa0>
  80a6c4:	9c401217 	ldw	r17,72(r19)
  80a6c8:	8800061e 	bne	r17,zero,80a6e4 <__pow5mult+0x58>
  80a6cc:	00003406 	br	80a7a0 <__pow5mult+0x114>
  80a6d0:	8021d07a 	srai	r16,r16,1
  80a6d4:	80001526 	beq	r16,zero,80a72c <__pow5mult+0xa0>
  80a6d8:	88800017 	ldw	r2,0(r17)
  80a6dc:	10001c26 	beq	r2,zero,80a750 <__pow5mult+0xc4>
  80a6e0:	1023883a 	mov	r17,r2
  80a6e4:	8080004c 	andi	r2,r16,1
  80a6e8:	103ff926 	beq	r2,zero,80a6d0 <__alt_mem_onchip_mem+0xff78a6d0>
  80a6ec:	880d883a 	mov	r6,r17
  80a6f0:	900b883a 	mov	r5,r18
  80a6f4:	9809883a 	mov	r4,r19
  80a6f8:	080a4940 	call	80a494 <__multiply>
  80a6fc:	90001b26 	beq	r18,zero,80a76c <__pow5mult+0xe0>
  80a700:	91000117 	ldw	r4,4(r18)
  80a704:	98c01317 	ldw	r3,76(r19)
  80a708:	8021d07a 	srai	r16,r16,1
  80a70c:	2109883a 	add	r4,r4,r4
  80a710:	2109883a 	add	r4,r4,r4
  80a714:	1907883a 	add	r3,r3,r4
  80a718:	19000017 	ldw	r4,0(r3)
  80a71c:	91000015 	stw	r4,0(r18)
  80a720:	1c800015 	stw	r18,0(r3)
  80a724:	1025883a 	mov	r18,r2
  80a728:	803feb1e 	bne	r16,zero,80a6d8 <__alt_mem_onchip_mem+0xff78a6d8>
  80a72c:	9005883a 	mov	r2,r18
  80a730:	dfc00517 	ldw	ra,20(sp)
  80a734:	dd000417 	ldw	r20,16(sp)
  80a738:	dcc00317 	ldw	r19,12(sp)
  80a73c:	dc800217 	ldw	r18,8(sp)
  80a740:	dc400117 	ldw	r17,4(sp)
  80a744:	dc000017 	ldw	r16,0(sp)
  80a748:	dec00604 	addi	sp,sp,24
  80a74c:	f800283a 	ret
  80a750:	880d883a 	mov	r6,r17
  80a754:	880b883a 	mov	r5,r17
  80a758:	9809883a 	mov	r4,r19
  80a75c:	080a4940 	call	80a494 <__multiply>
  80a760:	88800015 	stw	r2,0(r17)
  80a764:	10000015 	stw	zero,0(r2)
  80a768:	003fdd06 	br	80a6e0 <__alt_mem_onchip_mem+0xff78a6e0>
  80a76c:	1025883a 	mov	r18,r2
  80a770:	003fd706 	br	80a6d0 <__alt_mem_onchip_mem+0xff78a6d0>
  80a774:	10bfffc4 	addi	r2,r2,-1
  80a778:	1085883a 	add	r2,r2,r2
  80a77c:	00c02074 	movhi	r3,129
  80a780:	18d28204 	addi	r3,r3,18952
  80a784:	1085883a 	add	r2,r2,r2
  80a788:	1885883a 	add	r2,r3,r2
  80a78c:	11800017 	ldw	r6,0(r2)
  80a790:	000f883a 	mov	r7,zero
  80a794:	080a11c0 	call	80a11c <__multadd>
  80a798:	1025883a 	mov	r18,r2
  80a79c:	003fc706 	br	80a6bc <__alt_mem_onchip_mem+0xff78a6bc>
  80a7a0:	05000044 	movi	r20,1
  80a7a4:	a00b883a 	mov	r5,r20
  80a7a8:	9809883a 	mov	r4,r19
  80a7ac:	080a04c0 	call	80a04c <_Balloc>
  80a7b0:	1023883a 	mov	r17,r2
  80a7b4:	00809c44 	movi	r2,625
  80a7b8:	88800515 	stw	r2,20(r17)
  80a7bc:	8d000415 	stw	r20,16(r17)
  80a7c0:	9c401215 	stw	r17,72(r19)
  80a7c4:	88000015 	stw	zero,0(r17)
  80a7c8:	003fc606 	br	80a6e4 <__alt_mem_onchip_mem+0xff78a6e4>

0080a7cc <__lshift>:
  80a7cc:	defff904 	addi	sp,sp,-28
  80a7d0:	dd400515 	stw	r21,20(sp)
  80a7d4:	dcc00315 	stw	r19,12(sp)
  80a7d8:	302bd17a 	srai	r21,r6,5
  80a7dc:	2cc00417 	ldw	r19,16(r5)
  80a7e0:	28800217 	ldw	r2,8(r5)
  80a7e4:	dd000415 	stw	r20,16(sp)
  80a7e8:	ace7883a 	add	r19,r21,r19
  80a7ec:	dc800215 	stw	r18,8(sp)
  80a7f0:	dc400115 	stw	r17,4(sp)
  80a7f4:	dc000015 	stw	r16,0(sp)
  80a7f8:	dfc00615 	stw	ra,24(sp)
  80a7fc:	9c000044 	addi	r16,r19,1
  80a800:	2823883a 	mov	r17,r5
  80a804:	3029883a 	mov	r20,r6
  80a808:	2025883a 	mov	r18,r4
  80a80c:	29400117 	ldw	r5,4(r5)
  80a810:	1400030e 	bge	r2,r16,80a820 <__lshift+0x54>
  80a814:	1085883a 	add	r2,r2,r2
  80a818:	29400044 	addi	r5,r5,1
  80a81c:	143ffd16 	blt	r2,r16,80a814 <__alt_mem_onchip_mem+0xff78a814>
  80a820:	9009883a 	mov	r4,r18
  80a824:	080a04c0 	call	80a04c <_Balloc>
  80a828:	10c00504 	addi	r3,r2,20
  80a82c:	0540070e 	bge	zero,r21,80a84c <__lshift+0x80>
  80a830:	ad6b883a 	add	r21,r21,r21
  80a834:	ad6b883a 	add	r21,r21,r21
  80a838:	1809883a 	mov	r4,r3
  80a83c:	1d47883a 	add	r3,r3,r21
  80a840:	20000015 	stw	zero,0(r4)
  80a844:	21000104 	addi	r4,r4,4
  80a848:	193ffd1e 	bne	r3,r4,80a840 <__alt_mem_onchip_mem+0xff78a840>
  80a84c:	8a000417 	ldw	r8,16(r17)
  80a850:	89000504 	addi	r4,r17,20
  80a854:	a18007cc 	andi	r6,r20,31
  80a858:	4211883a 	add	r8,r8,r8
  80a85c:	4211883a 	add	r8,r8,r8
  80a860:	2211883a 	add	r8,r4,r8
  80a864:	30002326 	beq	r6,zero,80a8f4 <__lshift+0x128>
  80a868:	02400804 	movi	r9,32
  80a86c:	4993c83a 	sub	r9,r9,r6
  80a870:	000b883a 	mov	r5,zero
  80a874:	21c00017 	ldw	r7,0(r4)
  80a878:	1815883a 	mov	r10,r3
  80a87c:	18c00104 	addi	r3,r3,4
  80a880:	398e983a 	sll	r7,r7,r6
  80a884:	21000104 	addi	r4,r4,4
  80a888:	394ab03a 	or	r5,r7,r5
  80a88c:	197fff15 	stw	r5,-4(r3)
  80a890:	217fff17 	ldw	r5,-4(r4)
  80a894:	2a4ad83a 	srl	r5,r5,r9
  80a898:	223ff636 	bltu	r4,r8,80a874 <__alt_mem_onchip_mem+0xff78a874>
  80a89c:	51400115 	stw	r5,4(r10)
  80a8a0:	28001a1e 	bne	r5,zero,80a90c <__lshift+0x140>
  80a8a4:	843fffc4 	addi	r16,r16,-1
  80a8a8:	14000415 	stw	r16,16(r2)
  80a8ac:	88000826 	beq	r17,zero,80a8d0 <__lshift+0x104>
  80a8b0:	89000117 	ldw	r4,4(r17)
  80a8b4:	90c01317 	ldw	r3,76(r18)
  80a8b8:	2109883a 	add	r4,r4,r4
  80a8bc:	2109883a 	add	r4,r4,r4
  80a8c0:	1907883a 	add	r3,r3,r4
  80a8c4:	19000017 	ldw	r4,0(r3)
  80a8c8:	89000015 	stw	r4,0(r17)
  80a8cc:	1c400015 	stw	r17,0(r3)
  80a8d0:	dfc00617 	ldw	ra,24(sp)
  80a8d4:	dd400517 	ldw	r21,20(sp)
  80a8d8:	dd000417 	ldw	r20,16(sp)
  80a8dc:	dcc00317 	ldw	r19,12(sp)
  80a8e0:	dc800217 	ldw	r18,8(sp)
  80a8e4:	dc400117 	ldw	r17,4(sp)
  80a8e8:	dc000017 	ldw	r16,0(sp)
  80a8ec:	dec00704 	addi	sp,sp,28
  80a8f0:	f800283a 	ret
  80a8f4:	21400017 	ldw	r5,0(r4)
  80a8f8:	18c00104 	addi	r3,r3,4
  80a8fc:	21000104 	addi	r4,r4,4
  80a900:	197fff15 	stw	r5,-4(r3)
  80a904:	223ffb36 	bltu	r4,r8,80a8f4 <__alt_mem_onchip_mem+0xff78a8f4>
  80a908:	003fe606 	br	80a8a4 <__alt_mem_onchip_mem+0xff78a8a4>
  80a90c:	9c000084 	addi	r16,r19,2
  80a910:	003fe406 	br	80a8a4 <__alt_mem_onchip_mem+0xff78a8a4>

0080a914 <__mcmp>:
  80a914:	20800417 	ldw	r2,16(r4)
  80a918:	28c00417 	ldw	r3,16(r5)
  80a91c:	10c5c83a 	sub	r2,r2,r3
  80a920:	1000111e 	bne	r2,zero,80a968 <__mcmp+0x54>
  80a924:	18c7883a 	add	r3,r3,r3
  80a928:	18c7883a 	add	r3,r3,r3
  80a92c:	21000504 	addi	r4,r4,20
  80a930:	29400504 	addi	r5,r5,20
  80a934:	20c5883a 	add	r2,r4,r3
  80a938:	28cb883a 	add	r5,r5,r3
  80a93c:	00000106 	br	80a944 <__mcmp+0x30>
  80a940:	20800a2e 	bgeu	r4,r2,80a96c <__mcmp+0x58>
  80a944:	10bfff04 	addi	r2,r2,-4
  80a948:	297fff04 	addi	r5,r5,-4
  80a94c:	11800017 	ldw	r6,0(r2)
  80a950:	28c00017 	ldw	r3,0(r5)
  80a954:	30fffa26 	beq	r6,r3,80a940 <__alt_mem_onchip_mem+0xff78a940>
  80a958:	30c00236 	bltu	r6,r3,80a964 <__mcmp+0x50>
  80a95c:	00800044 	movi	r2,1
  80a960:	f800283a 	ret
  80a964:	00bfffc4 	movi	r2,-1
  80a968:	f800283a 	ret
  80a96c:	0005883a 	mov	r2,zero
  80a970:	f800283a 	ret

0080a974 <__mdiff>:
  80a974:	28c00417 	ldw	r3,16(r5)
  80a978:	30800417 	ldw	r2,16(r6)
  80a97c:	defffa04 	addi	sp,sp,-24
  80a980:	dcc00315 	stw	r19,12(sp)
  80a984:	dc800215 	stw	r18,8(sp)
  80a988:	dfc00515 	stw	ra,20(sp)
  80a98c:	dd000415 	stw	r20,16(sp)
  80a990:	dc400115 	stw	r17,4(sp)
  80a994:	dc000015 	stw	r16,0(sp)
  80a998:	1887c83a 	sub	r3,r3,r2
  80a99c:	2825883a 	mov	r18,r5
  80a9a0:	3027883a 	mov	r19,r6
  80a9a4:	1800141e 	bne	r3,zero,80a9f8 <__mdiff+0x84>
  80a9a8:	1085883a 	add	r2,r2,r2
  80a9ac:	1085883a 	add	r2,r2,r2
  80a9b0:	2a000504 	addi	r8,r5,20
  80a9b4:	34000504 	addi	r16,r6,20
  80a9b8:	4087883a 	add	r3,r8,r2
  80a9bc:	8085883a 	add	r2,r16,r2
  80a9c0:	00000106 	br	80a9c8 <__mdiff+0x54>
  80a9c4:	40c0592e 	bgeu	r8,r3,80ab2c <__mdiff+0x1b8>
  80a9c8:	18ffff04 	addi	r3,r3,-4
  80a9cc:	10bfff04 	addi	r2,r2,-4
  80a9d0:	19c00017 	ldw	r7,0(r3)
  80a9d4:	11400017 	ldw	r5,0(r2)
  80a9d8:	397ffa26 	beq	r7,r5,80a9c4 <__alt_mem_onchip_mem+0xff78a9c4>
  80a9dc:	3940592e 	bgeu	r7,r5,80ab44 <__mdiff+0x1d0>
  80a9e0:	9005883a 	mov	r2,r18
  80a9e4:	4023883a 	mov	r17,r8
  80a9e8:	9825883a 	mov	r18,r19
  80a9ec:	05000044 	movi	r20,1
  80a9f0:	1027883a 	mov	r19,r2
  80a9f4:	00000406 	br	80aa08 <__mdiff+0x94>
  80a9f8:	18005616 	blt	r3,zero,80ab54 <__mdiff+0x1e0>
  80a9fc:	34400504 	addi	r17,r6,20
  80aa00:	2c000504 	addi	r16,r5,20
  80aa04:	0029883a 	mov	r20,zero
  80aa08:	91400117 	ldw	r5,4(r18)
  80aa0c:	080a04c0 	call	80a04c <_Balloc>
  80aa10:	92400417 	ldw	r9,16(r18)
  80aa14:	9b000417 	ldw	r12,16(r19)
  80aa18:	12c00504 	addi	r11,r2,20
  80aa1c:	4a51883a 	add	r8,r9,r9
  80aa20:	6319883a 	add	r12,r12,r12
  80aa24:	4211883a 	add	r8,r8,r8
  80aa28:	6319883a 	add	r12,r12,r12
  80aa2c:	15000315 	stw	r20,12(r2)
  80aa30:	8211883a 	add	r8,r16,r8
  80aa34:	8b19883a 	add	r12,r17,r12
  80aa38:	0007883a 	mov	r3,zero
  80aa3c:	81400017 	ldw	r5,0(r16)
  80aa40:	89c00017 	ldw	r7,0(r17)
  80aa44:	59800104 	addi	r6,r11,4
  80aa48:	293fffcc 	andi	r4,r5,65535
  80aa4c:	20c7883a 	add	r3,r4,r3
  80aa50:	393fffcc 	andi	r4,r7,65535
  80aa54:	1909c83a 	sub	r4,r3,r4
  80aa58:	280ad43a 	srli	r5,r5,16
  80aa5c:	380ed43a 	srli	r7,r7,16
  80aa60:	2007d43a 	srai	r3,r4,16
  80aa64:	213fffcc 	andi	r4,r4,65535
  80aa68:	29cbc83a 	sub	r5,r5,r7
  80aa6c:	28c7883a 	add	r3,r5,r3
  80aa70:	180a943a 	slli	r5,r3,16
  80aa74:	8c400104 	addi	r17,r17,4
  80aa78:	84000104 	addi	r16,r16,4
  80aa7c:	2908b03a 	or	r4,r5,r4
  80aa80:	59000015 	stw	r4,0(r11)
  80aa84:	1807d43a 	srai	r3,r3,16
  80aa88:	3015883a 	mov	r10,r6
  80aa8c:	3017883a 	mov	r11,r6
  80aa90:	8b3fea36 	bltu	r17,r12,80aa3c <__alt_mem_onchip_mem+0xff78aa3c>
  80aa94:	8200162e 	bgeu	r16,r8,80aaf0 <__mdiff+0x17c>
  80aa98:	8017883a 	mov	r11,r16
  80aa9c:	59400017 	ldw	r5,0(r11)
  80aaa0:	31800104 	addi	r6,r6,4
  80aaa4:	5ac00104 	addi	r11,r11,4
  80aaa8:	293fffcc 	andi	r4,r5,65535
  80aaac:	20c7883a 	add	r3,r4,r3
  80aab0:	280ed43a 	srli	r7,r5,16
  80aab4:	180bd43a 	srai	r5,r3,16
  80aab8:	193fffcc 	andi	r4,r3,65535
  80aabc:	3947883a 	add	r3,r7,r5
  80aac0:	180a943a 	slli	r5,r3,16
  80aac4:	1807d43a 	srai	r3,r3,16
  80aac8:	2908b03a 	or	r4,r5,r4
  80aacc:	313fff15 	stw	r4,-4(r6)
  80aad0:	5a3ff236 	bltu	r11,r8,80aa9c <__alt_mem_onchip_mem+0xff78aa9c>
  80aad4:	0406303a 	nor	r3,zero,r16
  80aad8:	1a07883a 	add	r3,r3,r8
  80aadc:	1806d0ba 	srli	r3,r3,2
  80aae0:	18c00044 	addi	r3,r3,1
  80aae4:	18c7883a 	add	r3,r3,r3
  80aae8:	18c7883a 	add	r3,r3,r3
  80aaec:	50d5883a 	add	r10,r10,r3
  80aaf0:	50ffff04 	addi	r3,r10,-4
  80aaf4:	2000041e 	bne	r4,zero,80ab08 <__mdiff+0x194>
  80aaf8:	18ffff04 	addi	r3,r3,-4
  80aafc:	19000017 	ldw	r4,0(r3)
  80ab00:	4a7fffc4 	addi	r9,r9,-1
  80ab04:	203ffc26 	beq	r4,zero,80aaf8 <__alt_mem_onchip_mem+0xff78aaf8>
  80ab08:	12400415 	stw	r9,16(r2)
  80ab0c:	dfc00517 	ldw	ra,20(sp)
  80ab10:	dd000417 	ldw	r20,16(sp)
  80ab14:	dcc00317 	ldw	r19,12(sp)
  80ab18:	dc800217 	ldw	r18,8(sp)
  80ab1c:	dc400117 	ldw	r17,4(sp)
  80ab20:	dc000017 	ldw	r16,0(sp)
  80ab24:	dec00604 	addi	sp,sp,24
  80ab28:	f800283a 	ret
  80ab2c:	000b883a 	mov	r5,zero
  80ab30:	080a04c0 	call	80a04c <_Balloc>
  80ab34:	00c00044 	movi	r3,1
  80ab38:	10c00415 	stw	r3,16(r2)
  80ab3c:	10000515 	stw	zero,20(r2)
  80ab40:	003ff206 	br	80ab0c <__alt_mem_onchip_mem+0xff78ab0c>
  80ab44:	8023883a 	mov	r17,r16
  80ab48:	0029883a 	mov	r20,zero
  80ab4c:	4021883a 	mov	r16,r8
  80ab50:	003fad06 	br	80aa08 <__alt_mem_onchip_mem+0xff78aa08>
  80ab54:	9005883a 	mov	r2,r18
  80ab58:	94400504 	addi	r17,r18,20
  80ab5c:	9c000504 	addi	r16,r19,20
  80ab60:	9825883a 	mov	r18,r19
  80ab64:	05000044 	movi	r20,1
  80ab68:	1027883a 	mov	r19,r2
  80ab6c:	003fa606 	br	80aa08 <__alt_mem_onchip_mem+0xff78aa08>

0080ab70 <__ulp>:
  80ab70:	295ffc2c 	andhi	r5,r5,32752
  80ab74:	00bf3034 	movhi	r2,64704
  80ab78:	2887883a 	add	r3,r5,r2
  80ab7c:	00c0020e 	bge	zero,r3,80ab88 <__ulp+0x18>
  80ab80:	0005883a 	mov	r2,zero
  80ab84:	f800283a 	ret
  80ab88:	00c7c83a 	sub	r3,zero,r3
  80ab8c:	1807d53a 	srai	r3,r3,20
  80ab90:	008004c4 	movi	r2,19
  80ab94:	10c00b0e 	bge	r2,r3,80abc4 <__ulp+0x54>
  80ab98:	18bffb04 	addi	r2,r3,-20
  80ab9c:	01000784 	movi	r4,30
  80aba0:	0007883a 	mov	r3,zero
  80aba4:	20800516 	blt	r4,r2,80abbc <__ulp+0x4c>
  80aba8:	010007c4 	movi	r4,31
  80abac:	2089c83a 	sub	r4,r4,r2
  80abb0:	00800044 	movi	r2,1
  80abb4:	1104983a 	sll	r2,r2,r4
  80abb8:	f800283a 	ret
  80abbc:	00800044 	movi	r2,1
  80abc0:	f800283a 	ret
  80abc4:	01400234 	movhi	r5,8
  80abc8:	28c7d83a 	sra	r3,r5,r3
  80abcc:	0005883a 	mov	r2,zero
  80abd0:	f800283a 	ret

0080abd4 <__b2d>:
  80abd4:	defffa04 	addi	sp,sp,-24
  80abd8:	dc000015 	stw	r16,0(sp)
  80abdc:	24000417 	ldw	r16,16(r4)
  80abe0:	dc400115 	stw	r17,4(sp)
  80abe4:	24400504 	addi	r17,r4,20
  80abe8:	8421883a 	add	r16,r16,r16
  80abec:	8421883a 	add	r16,r16,r16
  80abf0:	8c21883a 	add	r16,r17,r16
  80abf4:	dc800215 	stw	r18,8(sp)
  80abf8:	84bfff17 	ldw	r18,-4(r16)
  80abfc:	dd000415 	stw	r20,16(sp)
  80ac00:	dcc00315 	stw	r19,12(sp)
  80ac04:	9009883a 	mov	r4,r18
  80ac08:	2829883a 	mov	r20,r5
  80ac0c:	dfc00515 	stw	ra,20(sp)
  80ac10:	080a3400 	call	80a340 <__hi0bits>
  80ac14:	00c00804 	movi	r3,32
  80ac18:	1889c83a 	sub	r4,r3,r2
  80ac1c:	a1000015 	stw	r4,0(r20)
  80ac20:	01000284 	movi	r4,10
  80ac24:	84ffff04 	addi	r19,r16,-4
  80ac28:	20801216 	blt	r4,r2,80ac74 <__b2d+0xa0>
  80ac2c:	018002c4 	movi	r6,11
  80ac30:	308dc83a 	sub	r6,r6,r2
  80ac34:	9186d83a 	srl	r3,r18,r6
  80ac38:	18cffc34 	orhi	r3,r3,16368
  80ac3c:	8cc0212e 	bgeu	r17,r19,80acc4 <__b2d+0xf0>
  80ac40:	813ffe17 	ldw	r4,-8(r16)
  80ac44:	218cd83a 	srl	r6,r4,r6
  80ac48:	10800544 	addi	r2,r2,21
  80ac4c:	9084983a 	sll	r2,r18,r2
  80ac50:	1184b03a 	or	r2,r2,r6
  80ac54:	dfc00517 	ldw	ra,20(sp)
  80ac58:	dd000417 	ldw	r20,16(sp)
  80ac5c:	dcc00317 	ldw	r19,12(sp)
  80ac60:	dc800217 	ldw	r18,8(sp)
  80ac64:	dc400117 	ldw	r17,4(sp)
  80ac68:	dc000017 	ldw	r16,0(sp)
  80ac6c:	dec00604 	addi	sp,sp,24
  80ac70:	f800283a 	ret
  80ac74:	8cc00f2e 	bgeu	r17,r19,80acb4 <__b2d+0xe0>
  80ac78:	117ffd44 	addi	r5,r2,-11
  80ac7c:	80bffe17 	ldw	r2,-8(r16)
  80ac80:	28000e26 	beq	r5,zero,80acbc <__b2d+0xe8>
  80ac84:	1949c83a 	sub	r4,r3,r5
  80ac88:	9164983a 	sll	r18,r18,r5
  80ac8c:	1106d83a 	srl	r3,r2,r4
  80ac90:	81bffe04 	addi	r6,r16,-8
  80ac94:	948ffc34 	orhi	r18,r18,16368
  80ac98:	90c6b03a 	or	r3,r18,r3
  80ac9c:	89800e2e 	bgeu	r17,r6,80acd8 <__b2d+0x104>
  80aca0:	81bffd17 	ldw	r6,-12(r16)
  80aca4:	1144983a 	sll	r2,r2,r5
  80aca8:	310ad83a 	srl	r5,r6,r4
  80acac:	2884b03a 	or	r2,r5,r2
  80acb0:	003fe806 	br	80ac54 <__alt_mem_onchip_mem+0xff78ac54>
  80acb4:	10bffd44 	addi	r2,r2,-11
  80acb8:	1000041e 	bne	r2,zero,80accc <__b2d+0xf8>
  80acbc:	90cffc34 	orhi	r3,r18,16368
  80acc0:	003fe406 	br	80ac54 <__alt_mem_onchip_mem+0xff78ac54>
  80acc4:	000d883a 	mov	r6,zero
  80acc8:	003fdf06 	br	80ac48 <__alt_mem_onchip_mem+0xff78ac48>
  80accc:	90a4983a 	sll	r18,r18,r2
  80acd0:	0005883a 	mov	r2,zero
  80acd4:	003ff906 	br	80acbc <__alt_mem_onchip_mem+0xff78acbc>
  80acd8:	1144983a 	sll	r2,r2,r5
  80acdc:	003fdd06 	br	80ac54 <__alt_mem_onchip_mem+0xff78ac54>

0080ace0 <__d2b>:
  80ace0:	defff804 	addi	sp,sp,-32
  80ace4:	dc000215 	stw	r16,8(sp)
  80ace8:	3021883a 	mov	r16,r6
  80acec:	dc400315 	stw	r17,12(sp)
  80acf0:	8022907a 	slli	r17,r16,1
  80acf4:	dd000615 	stw	r20,24(sp)
  80acf8:	2829883a 	mov	r20,r5
  80acfc:	01400044 	movi	r5,1
  80ad00:	dcc00515 	stw	r19,20(sp)
  80ad04:	dc800415 	stw	r18,16(sp)
  80ad08:	dfc00715 	stw	ra,28(sp)
  80ad0c:	3825883a 	mov	r18,r7
  80ad10:	8822d57a 	srli	r17,r17,21
  80ad14:	080a04c0 	call	80a04c <_Balloc>
  80ad18:	1027883a 	mov	r19,r2
  80ad1c:	00800434 	movhi	r2,16
  80ad20:	10bfffc4 	addi	r2,r2,-1
  80ad24:	808c703a 	and	r6,r16,r2
  80ad28:	88000126 	beq	r17,zero,80ad30 <__d2b+0x50>
  80ad2c:	31800434 	orhi	r6,r6,16
  80ad30:	d9800015 	stw	r6,0(sp)
  80ad34:	a0002426 	beq	r20,zero,80adc8 <__d2b+0xe8>
  80ad38:	d9000104 	addi	r4,sp,4
  80ad3c:	dd000115 	stw	r20,4(sp)
  80ad40:	080a3a80 	call	80a3a8 <__lo0bits>
  80ad44:	d8c00017 	ldw	r3,0(sp)
  80ad48:	10002f1e 	bne	r2,zero,80ae08 <__d2b+0x128>
  80ad4c:	d9000117 	ldw	r4,4(sp)
  80ad50:	99000515 	stw	r4,20(r19)
  80ad54:	1821003a 	cmpeq	r16,r3,zero
  80ad58:	01000084 	movi	r4,2
  80ad5c:	2421c83a 	sub	r16,r4,r16
  80ad60:	98c00615 	stw	r3,24(r19)
  80ad64:	9c000415 	stw	r16,16(r19)
  80ad68:	88001f1e 	bne	r17,zero,80ade8 <__d2b+0x108>
  80ad6c:	10bef384 	addi	r2,r2,-1074
  80ad70:	90800015 	stw	r2,0(r18)
  80ad74:	00900034 	movhi	r2,16384
  80ad78:	10bfffc4 	addi	r2,r2,-1
  80ad7c:	8085883a 	add	r2,r16,r2
  80ad80:	1085883a 	add	r2,r2,r2
  80ad84:	1085883a 	add	r2,r2,r2
  80ad88:	9885883a 	add	r2,r19,r2
  80ad8c:	11000517 	ldw	r4,20(r2)
  80ad90:	8020917a 	slli	r16,r16,5
  80ad94:	080a3400 	call	80a340 <__hi0bits>
  80ad98:	d8c00817 	ldw	r3,32(sp)
  80ad9c:	8085c83a 	sub	r2,r16,r2
  80ada0:	18800015 	stw	r2,0(r3)
  80ada4:	9805883a 	mov	r2,r19
  80ada8:	dfc00717 	ldw	ra,28(sp)
  80adac:	dd000617 	ldw	r20,24(sp)
  80adb0:	dcc00517 	ldw	r19,20(sp)
  80adb4:	dc800417 	ldw	r18,16(sp)
  80adb8:	dc400317 	ldw	r17,12(sp)
  80adbc:	dc000217 	ldw	r16,8(sp)
  80adc0:	dec00804 	addi	sp,sp,32
  80adc4:	f800283a 	ret
  80adc8:	d809883a 	mov	r4,sp
  80adcc:	080a3a80 	call	80a3a8 <__lo0bits>
  80add0:	d8c00017 	ldw	r3,0(sp)
  80add4:	04000044 	movi	r16,1
  80add8:	9c000415 	stw	r16,16(r19)
  80addc:	98c00515 	stw	r3,20(r19)
  80ade0:	10800804 	addi	r2,r2,32
  80ade4:	883fe126 	beq	r17,zero,80ad6c <__alt_mem_onchip_mem+0xff78ad6c>
  80ade8:	00c00d44 	movi	r3,53
  80adec:	8c7ef344 	addi	r17,r17,-1075
  80adf0:	88a3883a 	add	r17,r17,r2
  80adf4:	1885c83a 	sub	r2,r3,r2
  80adf8:	d8c00817 	ldw	r3,32(sp)
  80adfc:	94400015 	stw	r17,0(r18)
  80ae00:	18800015 	stw	r2,0(r3)
  80ae04:	003fe706 	br	80ada4 <__alt_mem_onchip_mem+0xff78ada4>
  80ae08:	01000804 	movi	r4,32
  80ae0c:	2089c83a 	sub	r4,r4,r2
  80ae10:	1908983a 	sll	r4,r3,r4
  80ae14:	d9400117 	ldw	r5,4(sp)
  80ae18:	1886d83a 	srl	r3,r3,r2
  80ae1c:	2148b03a 	or	r4,r4,r5
  80ae20:	99000515 	stw	r4,20(r19)
  80ae24:	d8c00015 	stw	r3,0(sp)
  80ae28:	003fca06 	br	80ad54 <__alt_mem_onchip_mem+0xff78ad54>

0080ae2c <__ratio>:
  80ae2c:	defff904 	addi	sp,sp,-28
  80ae30:	dc400315 	stw	r17,12(sp)
  80ae34:	2823883a 	mov	r17,r5
  80ae38:	d9400104 	addi	r5,sp,4
  80ae3c:	dfc00615 	stw	ra,24(sp)
  80ae40:	dcc00515 	stw	r19,20(sp)
  80ae44:	dc800415 	stw	r18,16(sp)
  80ae48:	2027883a 	mov	r19,r4
  80ae4c:	dc000215 	stw	r16,8(sp)
  80ae50:	080abd40 	call	80abd4 <__b2d>
  80ae54:	d80b883a 	mov	r5,sp
  80ae58:	8809883a 	mov	r4,r17
  80ae5c:	1025883a 	mov	r18,r2
  80ae60:	1821883a 	mov	r16,r3
  80ae64:	080abd40 	call	80abd4 <__b2d>
  80ae68:	8a000417 	ldw	r8,16(r17)
  80ae6c:	99000417 	ldw	r4,16(r19)
  80ae70:	d9400117 	ldw	r5,4(sp)
  80ae74:	2209c83a 	sub	r4,r4,r8
  80ae78:	2010917a 	slli	r8,r4,5
  80ae7c:	d9000017 	ldw	r4,0(sp)
  80ae80:	2909c83a 	sub	r4,r5,r4
  80ae84:	4109883a 	add	r4,r8,r4
  80ae88:	01000e0e 	bge	zero,r4,80aec4 <__ratio+0x98>
  80ae8c:	2008953a 	slli	r4,r4,20
  80ae90:	2421883a 	add	r16,r4,r16
  80ae94:	100d883a 	mov	r6,r2
  80ae98:	180f883a 	mov	r7,r3
  80ae9c:	9009883a 	mov	r4,r18
  80aea0:	800b883a 	mov	r5,r16
  80aea4:	080e86c0 	call	80e86c <__divdf3>
  80aea8:	dfc00617 	ldw	ra,24(sp)
  80aeac:	dcc00517 	ldw	r19,20(sp)
  80aeb0:	dc800417 	ldw	r18,16(sp)
  80aeb4:	dc400317 	ldw	r17,12(sp)
  80aeb8:	dc000217 	ldw	r16,8(sp)
  80aebc:	dec00704 	addi	sp,sp,28
  80aec0:	f800283a 	ret
  80aec4:	2008953a 	slli	r4,r4,20
  80aec8:	1907c83a 	sub	r3,r3,r4
  80aecc:	003ff106 	br	80ae94 <__alt_mem_onchip_mem+0xff78ae94>

0080aed0 <_mprec_log10>:
  80aed0:	defffe04 	addi	sp,sp,-8
  80aed4:	dc000015 	stw	r16,0(sp)
  80aed8:	dfc00115 	stw	ra,4(sp)
  80aedc:	008005c4 	movi	r2,23
  80aee0:	2021883a 	mov	r16,r4
  80aee4:	11000d0e 	bge	r2,r4,80af1c <_mprec_log10+0x4c>
  80aee8:	0005883a 	mov	r2,zero
  80aeec:	00cffc34 	movhi	r3,16368
  80aef0:	843fffc4 	addi	r16,r16,-1
  80aef4:	000d883a 	mov	r6,zero
  80aef8:	01d00934 	movhi	r7,16420
  80aefc:	1009883a 	mov	r4,r2
  80af00:	180b883a 	mov	r5,r3
  80af04:	080f3ac0 	call	80f3ac <__muldf3>
  80af08:	803ff91e 	bne	r16,zero,80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80af0c:	dfc00117 	ldw	ra,4(sp)
  80af10:	dc000017 	ldw	r16,0(sp)
  80af14:	dec00204 	addi	sp,sp,8
  80af18:	f800283a 	ret
  80af1c:	202090fa 	slli	r16,r4,3
  80af20:	00802074 	movhi	r2,129
  80af24:	10929904 	addi	r2,r2,19044
  80af28:	1421883a 	add	r16,r2,r16
  80af2c:	80800017 	ldw	r2,0(r16)
  80af30:	80c00117 	ldw	r3,4(r16)
  80af34:	dfc00117 	ldw	ra,4(sp)
  80af38:	dc000017 	ldw	r16,0(sp)
  80af3c:	dec00204 	addi	sp,sp,8
  80af40:	f800283a 	ret

0080af44 <__copybits>:
  80af44:	297fffc4 	addi	r5,r5,-1
  80af48:	280fd17a 	srai	r7,r5,5
  80af4c:	30c00417 	ldw	r3,16(r6)
  80af50:	30800504 	addi	r2,r6,20
  80af54:	39c00044 	addi	r7,r7,1
  80af58:	18c7883a 	add	r3,r3,r3
  80af5c:	39cf883a 	add	r7,r7,r7
  80af60:	18c7883a 	add	r3,r3,r3
  80af64:	39cf883a 	add	r7,r7,r7
  80af68:	10c7883a 	add	r3,r2,r3
  80af6c:	21cf883a 	add	r7,r4,r7
  80af70:	10c00d2e 	bgeu	r2,r3,80afa8 <__copybits+0x64>
  80af74:	200b883a 	mov	r5,r4
  80af78:	12000017 	ldw	r8,0(r2)
  80af7c:	29400104 	addi	r5,r5,4
  80af80:	10800104 	addi	r2,r2,4
  80af84:	2a3fff15 	stw	r8,-4(r5)
  80af88:	10fffb36 	bltu	r2,r3,80af78 <__alt_mem_onchip_mem+0xff78af78>
  80af8c:	1985c83a 	sub	r2,r3,r6
  80af90:	10bffac4 	addi	r2,r2,-21
  80af94:	1004d0ba 	srli	r2,r2,2
  80af98:	10800044 	addi	r2,r2,1
  80af9c:	1085883a 	add	r2,r2,r2
  80afa0:	1085883a 	add	r2,r2,r2
  80afa4:	2089883a 	add	r4,r4,r2
  80afa8:	21c0032e 	bgeu	r4,r7,80afb8 <__copybits+0x74>
  80afac:	20000015 	stw	zero,0(r4)
  80afb0:	21000104 	addi	r4,r4,4
  80afb4:	21fffd36 	bltu	r4,r7,80afac <__alt_mem_onchip_mem+0xff78afac>
  80afb8:	f800283a 	ret

0080afbc <__any_on>:
  80afbc:	20c00417 	ldw	r3,16(r4)
  80afc0:	2805d17a 	srai	r2,r5,5
  80afc4:	21000504 	addi	r4,r4,20
  80afc8:	18800d0e 	bge	r3,r2,80b000 <__any_on+0x44>
  80afcc:	18c7883a 	add	r3,r3,r3
  80afd0:	18c7883a 	add	r3,r3,r3
  80afd4:	20c7883a 	add	r3,r4,r3
  80afd8:	20c0192e 	bgeu	r4,r3,80b040 <__any_on+0x84>
  80afdc:	18bfff17 	ldw	r2,-4(r3)
  80afe0:	18ffff04 	addi	r3,r3,-4
  80afe4:	1000041e 	bne	r2,zero,80aff8 <__any_on+0x3c>
  80afe8:	20c0142e 	bgeu	r4,r3,80b03c <__any_on+0x80>
  80afec:	18ffff04 	addi	r3,r3,-4
  80aff0:	19400017 	ldw	r5,0(r3)
  80aff4:	283ffc26 	beq	r5,zero,80afe8 <__alt_mem_onchip_mem+0xff78afe8>
  80aff8:	00800044 	movi	r2,1
  80affc:	f800283a 	ret
  80b000:	10c00a0e 	bge	r2,r3,80b02c <__any_on+0x70>
  80b004:	1085883a 	add	r2,r2,r2
  80b008:	1085883a 	add	r2,r2,r2
  80b00c:	294007cc 	andi	r5,r5,31
  80b010:	2087883a 	add	r3,r4,r2
  80b014:	283ff026 	beq	r5,zero,80afd8 <__alt_mem_onchip_mem+0xff78afd8>
  80b018:	19800017 	ldw	r6,0(r3)
  80b01c:	3144d83a 	srl	r2,r6,r5
  80b020:	114a983a 	sll	r5,r2,r5
  80b024:	317ff41e 	bne	r6,r5,80aff8 <__alt_mem_onchip_mem+0xff78aff8>
  80b028:	003feb06 	br	80afd8 <__alt_mem_onchip_mem+0xff78afd8>
  80b02c:	1085883a 	add	r2,r2,r2
  80b030:	1085883a 	add	r2,r2,r2
  80b034:	2087883a 	add	r3,r4,r2
  80b038:	003fe706 	br	80afd8 <__alt_mem_onchip_mem+0xff78afd8>
  80b03c:	f800283a 	ret
  80b040:	0005883a 	mov	r2,zero
  80b044:	f800283a 	ret

0080b048 <_read_r>:
  80b048:	defffd04 	addi	sp,sp,-12
  80b04c:	2805883a 	mov	r2,r5
  80b050:	dc000015 	stw	r16,0(sp)
  80b054:	040020b4 	movhi	r16,130
  80b058:	dc400115 	stw	r17,4(sp)
  80b05c:	300b883a 	mov	r5,r6
  80b060:	84228a04 	addi	r16,r16,-30168
  80b064:	2023883a 	mov	r17,r4
  80b068:	380d883a 	mov	r6,r7
  80b06c:	1009883a 	mov	r4,r2
  80b070:	dfc00215 	stw	ra,8(sp)
  80b074:	80000015 	stw	zero,0(r16)
  80b078:	0810ffc0 	call	810ffc <read>
  80b07c:	00ffffc4 	movi	r3,-1
  80b080:	10c00526 	beq	r2,r3,80b098 <_read_r+0x50>
  80b084:	dfc00217 	ldw	ra,8(sp)
  80b088:	dc400117 	ldw	r17,4(sp)
  80b08c:	dc000017 	ldw	r16,0(sp)
  80b090:	dec00304 	addi	sp,sp,12
  80b094:	f800283a 	ret
  80b098:	80c00017 	ldw	r3,0(r16)
  80b09c:	183ff926 	beq	r3,zero,80b084 <__alt_mem_onchip_mem+0xff78b084>
  80b0a0:	88c00015 	stw	r3,0(r17)
  80b0a4:	003ff706 	br	80b084 <__alt_mem_onchip_mem+0xff78b084>

0080b0a8 <_realloc_r>:
  80b0a8:	defff604 	addi	sp,sp,-40
  80b0ac:	dc800215 	stw	r18,8(sp)
  80b0b0:	dfc00915 	stw	ra,36(sp)
  80b0b4:	df000815 	stw	fp,32(sp)
  80b0b8:	ddc00715 	stw	r23,28(sp)
  80b0bc:	dd800615 	stw	r22,24(sp)
  80b0c0:	dd400515 	stw	r21,20(sp)
  80b0c4:	dd000415 	stw	r20,16(sp)
  80b0c8:	dcc00315 	stw	r19,12(sp)
  80b0cc:	dc400115 	stw	r17,4(sp)
  80b0d0:	dc000015 	stw	r16,0(sp)
  80b0d4:	3025883a 	mov	r18,r6
  80b0d8:	2800b726 	beq	r5,zero,80b3b8 <_realloc_r+0x310>
  80b0dc:	282b883a 	mov	r21,r5
  80b0e0:	2029883a 	mov	r20,r4
  80b0e4:	0810d240 	call	810d24 <__malloc_lock>
  80b0e8:	a8bfff17 	ldw	r2,-4(r21)
  80b0ec:	043fff04 	movi	r16,-4
  80b0f0:	90c002c4 	addi	r3,r18,11
  80b0f4:	01000584 	movi	r4,22
  80b0f8:	acfffe04 	addi	r19,r21,-8
  80b0fc:	1420703a 	and	r16,r2,r16
  80b100:	20c0332e 	bgeu	r4,r3,80b1d0 <_realloc_r+0x128>
  80b104:	047ffe04 	movi	r17,-8
  80b108:	1c62703a 	and	r17,r3,r17
  80b10c:	8807883a 	mov	r3,r17
  80b110:	88005816 	blt	r17,zero,80b274 <_realloc_r+0x1cc>
  80b114:	8c805736 	bltu	r17,r18,80b274 <_realloc_r+0x1cc>
  80b118:	80c0300e 	bge	r16,r3,80b1dc <_realloc_r+0x134>
  80b11c:	07002074 	movhi	fp,129
  80b120:	e714d304 	addi	fp,fp,21324
  80b124:	e1c00217 	ldw	r7,8(fp)
  80b128:	9c09883a 	add	r4,r19,r16
  80b12c:	22000117 	ldw	r8,4(r4)
  80b130:	21c06326 	beq	r4,r7,80b2c0 <_realloc_r+0x218>
  80b134:	017fff84 	movi	r5,-2
  80b138:	414a703a 	and	r5,r8,r5
  80b13c:	214b883a 	add	r5,r4,r5
  80b140:	29800117 	ldw	r6,4(r5)
  80b144:	3180004c 	andi	r6,r6,1
  80b148:	30003f26 	beq	r6,zero,80b248 <_realloc_r+0x1a0>
  80b14c:	1080004c 	andi	r2,r2,1
  80b150:	10008326 	beq	r2,zero,80b360 <_realloc_r+0x2b8>
  80b154:	900b883a 	mov	r5,r18
  80b158:	a009883a 	mov	r4,r20
  80b15c:	0803abc0 	call	803abc <_malloc_r>
  80b160:	1025883a 	mov	r18,r2
  80b164:	10011e26 	beq	r2,zero,80b5e0 <_realloc_r+0x538>
  80b168:	a93fff17 	ldw	r4,-4(r21)
  80b16c:	10fffe04 	addi	r3,r2,-8
  80b170:	00bfff84 	movi	r2,-2
  80b174:	2084703a 	and	r2,r4,r2
  80b178:	9885883a 	add	r2,r19,r2
  80b17c:	1880ee26 	beq	r3,r2,80b538 <_realloc_r+0x490>
  80b180:	81bfff04 	addi	r6,r16,-4
  80b184:	00800904 	movi	r2,36
  80b188:	1180b836 	bltu	r2,r6,80b46c <_realloc_r+0x3c4>
  80b18c:	00c004c4 	movi	r3,19
  80b190:	19809636 	bltu	r3,r6,80b3ec <_realloc_r+0x344>
  80b194:	9005883a 	mov	r2,r18
  80b198:	a807883a 	mov	r3,r21
  80b19c:	19000017 	ldw	r4,0(r3)
  80b1a0:	11000015 	stw	r4,0(r2)
  80b1a4:	19000117 	ldw	r4,4(r3)
  80b1a8:	11000115 	stw	r4,4(r2)
  80b1ac:	18c00217 	ldw	r3,8(r3)
  80b1b0:	10c00215 	stw	r3,8(r2)
  80b1b4:	a80b883a 	mov	r5,r21
  80b1b8:	a009883a 	mov	r4,r20
  80b1bc:	08091e00 	call	8091e0 <_free_r>
  80b1c0:	a009883a 	mov	r4,r20
  80b1c4:	0810d480 	call	810d48 <__malloc_unlock>
  80b1c8:	9005883a 	mov	r2,r18
  80b1cc:	00001206 	br	80b218 <_realloc_r+0x170>
  80b1d0:	00c00404 	movi	r3,16
  80b1d4:	1823883a 	mov	r17,r3
  80b1d8:	003fce06 	br	80b114 <__alt_mem_onchip_mem+0xff78b114>
  80b1dc:	a825883a 	mov	r18,r21
  80b1e0:	8445c83a 	sub	r2,r16,r17
  80b1e4:	00c003c4 	movi	r3,15
  80b1e8:	18802636 	bltu	r3,r2,80b284 <_realloc_r+0x1dc>
  80b1ec:	99800117 	ldw	r6,4(r19)
  80b1f0:	9c07883a 	add	r3,r19,r16
  80b1f4:	3180004c 	andi	r6,r6,1
  80b1f8:	3420b03a 	or	r16,r6,r16
  80b1fc:	9c000115 	stw	r16,4(r19)
  80b200:	18800117 	ldw	r2,4(r3)
  80b204:	10800054 	ori	r2,r2,1
  80b208:	18800115 	stw	r2,4(r3)
  80b20c:	a009883a 	mov	r4,r20
  80b210:	0810d480 	call	810d48 <__malloc_unlock>
  80b214:	9005883a 	mov	r2,r18
  80b218:	dfc00917 	ldw	ra,36(sp)
  80b21c:	df000817 	ldw	fp,32(sp)
  80b220:	ddc00717 	ldw	r23,28(sp)
  80b224:	dd800617 	ldw	r22,24(sp)
  80b228:	dd400517 	ldw	r21,20(sp)
  80b22c:	dd000417 	ldw	r20,16(sp)
  80b230:	dcc00317 	ldw	r19,12(sp)
  80b234:	dc800217 	ldw	r18,8(sp)
  80b238:	dc400117 	ldw	r17,4(sp)
  80b23c:	dc000017 	ldw	r16,0(sp)
  80b240:	dec00a04 	addi	sp,sp,40
  80b244:	f800283a 	ret
  80b248:	017fff04 	movi	r5,-4
  80b24c:	414a703a 	and	r5,r8,r5
  80b250:	814d883a 	add	r6,r16,r5
  80b254:	30c01f16 	blt	r6,r3,80b2d4 <_realloc_r+0x22c>
  80b258:	20800317 	ldw	r2,12(r4)
  80b25c:	20c00217 	ldw	r3,8(r4)
  80b260:	a825883a 	mov	r18,r21
  80b264:	3021883a 	mov	r16,r6
  80b268:	18800315 	stw	r2,12(r3)
  80b26c:	10c00215 	stw	r3,8(r2)
  80b270:	003fdb06 	br	80b1e0 <__alt_mem_onchip_mem+0xff78b1e0>
  80b274:	00800304 	movi	r2,12
  80b278:	a0800015 	stw	r2,0(r20)
  80b27c:	0005883a 	mov	r2,zero
  80b280:	003fe506 	br	80b218 <__alt_mem_onchip_mem+0xff78b218>
  80b284:	98c00117 	ldw	r3,4(r19)
  80b288:	9c4b883a 	add	r5,r19,r17
  80b28c:	11000054 	ori	r4,r2,1
  80b290:	18c0004c 	andi	r3,r3,1
  80b294:	1c62b03a 	or	r17,r3,r17
  80b298:	9c400115 	stw	r17,4(r19)
  80b29c:	29000115 	stw	r4,4(r5)
  80b2a0:	2885883a 	add	r2,r5,r2
  80b2a4:	10c00117 	ldw	r3,4(r2)
  80b2a8:	29400204 	addi	r5,r5,8
  80b2ac:	a009883a 	mov	r4,r20
  80b2b0:	18c00054 	ori	r3,r3,1
  80b2b4:	10c00115 	stw	r3,4(r2)
  80b2b8:	08091e00 	call	8091e0 <_free_r>
  80b2bc:	003fd306 	br	80b20c <__alt_mem_onchip_mem+0xff78b20c>
  80b2c0:	017fff04 	movi	r5,-4
  80b2c4:	414a703a 	and	r5,r8,r5
  80b2c8:	89800404 	addi	r6,r17,16
  80b2cc:	8151883a 	add	r8,r16,r5
  80b2d0:	4180590e 	bge	r8,r6,80b438 <_realloc_r+0x390>
  80b2d4:	1080004c 	andi	r2,r2,1
  80b2d8:	103f9e1e 	bne	r2,zero,80b154 <__alt_mem_onchip_mem+0xff78b154>
  80b2dc:	adbffe17 	ldw	r22,-8(r21)
  80b2e0:	00bfff04 	movi	r2,-4
  80b2e4:	9dadc83a 	sub	r22,r19,r22
  80b2e8:	b1800117 	ldw	r6,4(r22)
  80b2ec:	3084703a 	and	r2,r6,r2
  80b2f0:	20002026 	beq	r4,zero,80b374 <_realloc_r+0x2cc>
  80b2f4:	80af883a 	add	r23,r16,r2
  80b2f8:	b96f883a 	add	r23,r23,r5
  80b2fc:	21c05f26 	beq	r4,r7,80b47c <_realloc_r+0x3d4>
  80b300:	b8c01c16 	blt	r23,r3,80b374 <_realloc_r+0x2cc>
  80b304:	20800317 	ldw	r2,12(r4)
  80b308:	20c00217 	ldw	r3,8(r4)
  80b30c:	81bfff04 	addi	r6,r16,-4
  80b310:	01000904 	movi	r4,36
  80b314:	18800315 	stw	r2,12(r3)
  80b318:	10c00215 	stw	r3,8(r2)
  80b31c:	b0c00217 	ldw	r3,8(r22)
  80b320:	b0800317 	ldw	r2,12(r22)
  80b324:	b4800204 	addi	r18,r22,8
  80b328:	18800315 	stw	r2,12(r3)
  80b32c:	10c00215 	stw	r3,8(r2)
  80b330:	21801b36 	bltu	r4,r6,80b3a0 <_realloc_r+0x2f8>
  80b334:	008004c4 	movi	r2,19
  80b338:	1180352e 	bgeu	r2,r6,80b410 <_realloc_r+0x368>
  80b33c:	a8800017 	ldw	r2,0(r21)
  80b340:	b0800215 	stw	r2,8(r22)
  80b344:	a8800117 	ldw	r2,4(r21)
  80b348:	b0800315 	stw	r2,12(r22)
  80b34c:	008006c4 	movi	r2,27
  80b350:	11807f36 	bltu	r2,r6,80b550 <_realloc_r+0x4a8>
  80b354:	b0800404 	addi	r2,r22,16
  80b358:	ad400204 	addi	r21,r21,8
  80b35c:	00002d06 	br	80b414 <_realloc_r+0x36c>
  80b360:	adbffe17 	ldw	r22,-8(r21)
  80b364:	00bfff04 	movi	r2,-4
  80b368:	9dadc83a 	sub	r22,r19,r22
  80b36c:	b1000117 	ldw	r4,4(r22)
  80b370:	2084703a 	and	r2,r4,r2
  80b374:	b03f7726 	beq	r22,zero,80b154 <__alt_mem_onchip_mem+0xff78b154>
  80b378:	80af883a 	add	r23,r16,r2
  80b37c:	b8ff7516 	blt	r23,r3,80b154 <__alt_mem_onchip_mem+0xff78b154>
  80b380:	b0800317 	ldw	r2,12(r22)
  80b384:	b0c00217 	ldw	r3,8(r22)
  80b388:	81bfff04 	addi	r6,r16,-4
  80b38c:	01000904 	movi	r4,36
  80b390:	18800315 	stw	r2,12(r3)
  80b394:	10c00215 	stw	r3,8(r2)
  80b398:	b4800204 	addi	r18,r22,8
  80b39c:	21bfe52e 	bgeu	r4,r6,80b334 <__alt_mem_onchip_mem+0xff78b334>
  80b3a0:	a80b883a 	mov	r5,r21
  80b3a4:	9009883a 	mov	r4,r18
  80b3a8:	0809ef00 	call	809ef0 <memmove>
  80b3ac:	b821883a 	mov	r16,r23
  80b3b0:	b027883a 	mov	r19,r22
  80b3b4:	003f8a06 	br	80b1e0 <__alt_mem_onchip_mem+0xff78b1e0>
  80b3b8:	300b883a 	mov	r5,r6
  80b3bc:	dfc00917 	ldw	ra,36(sp)
  80b3c0:	df000817 	ldw	fp,32(sp)
  80b3c4:	ddc00717 	ldw	r23,28(sp)
  80b3c8:	dd800617 	ldw	r22,24(sp)
  80b3cc:	dd400517 	ldw	r21,20(sp)
  80b3d0:	dd000417 	ldw	r20,16(sp)
  80b3d4:	dcc00317 	ldw	r19,12(sp)
  80b3d8:	dc800217 	ldw	r18,8(sp)
  80b3dc:	dc400117 	ldw	r17,4(sp)
  80b3e0:	dc000017 	ldw	r16,0(sp)
  80b3e4:	dec00a04 	addi	sp,sp,40
  80b3e8:	0803abc1 	jmpi	803abc <_malloc_r>
  80b3ec:	a8c00017 	ldw	r3,0(r21)
  80b3f0:	90c00015 	stw	r3,0(r18)
  80b3f4:	a8c00117 	ldw	r3,4(r21)
  80b3f8:	90c00115 	stw	r3,4(r18)
  80b3fc:	00c006c4 	movi	r3,27
  80b400:	19804536 	bltu	r3,r6,80b518 <_realloc_r+0x470>
  80b404:	90800204 	addi	r2,r18,8
  80b408:	a8c00204 	addi	r3,r21,8
  80b40c:	003f6306 	br	80b19c <__alt_mem_onchip_mem+0xff78b19c>
  80b410:	9005883a 	mov	r2,r18
  80b414:	a8c00017 	ldw	r3,0(r21)
  80b418:	b821883a 	mov	r16,r23
  80b41c:	b027883a 	mov	r19,r22
  80b420:	10c00015 	stw	r3,0(r2)
  80b424:	a8c00117 	ldw	r3,4(r21)
  80b428:	10c00115 	stw	r3,4(r2)
  80b42c:	a8c00217 	ldw	r3,8(r21)
  80b430:	10c00215 	stw	r3,8(r2)
  80b434:	003f6a06 	br	80b1e0 <__alt_mem_onchip_mem+0xff78b1e0>
  80b438:	9c67883a 	add	r19,r19,r17
  80b43c:	4445c83a 	sub	r2,r8,r17
  80b440:	e4c00215 	stw	r19,8(fp)
  80b444:	10800054 	ori	r2,r2,1
  80b448:	98800115 	stw	r2,4(r19)
  80b44c:	a8bfff17 	ldw	r2,-4(r21)
  80b450:	a009883a 	mov	r4,r20
  80b454:	1080004c 	andi	r2,r2,1
  80b458:	1462b03a 	or	r17,r2,r17
  80b45c:	ac7fff15 	stw	r17,-4(r21)
  80b460:	0810d480 	call	810d48 <__malloc_unlock>
  80b464:	a805883a 	mov	r2,r21
  80b468:	003f6b06 	br	80b218 <__alt_mem_onchip_mem+0xff78b218>
  80b46c:	a80b883a 	mov	r5,r21
  80b470:	9009883a 	mov	r4,r18
  80b474:	0809ef00 	call	809ef0 <memmove>
  80b478:	003f4e06 	br	80b1b4 <__alt_mem_onchip_mem+0xff78b1b4>
  80b47c:	89000404 	addi	r4,r17,16
  80b480:	b93fbc16 	blt	r23,r4,80b374 <__alt_mem_onchip_mem+0xff78b374>
  80b484:	b0800317 	ldw	r2,12(r22)
  80b488:	b0c00217 	ldw	r3,8(r22)
  80b48c:	81bfff04 	addi	r6,r16,-4
  80b490:	01000904 	movi	r4,36
  80b494:	18800315 	stw	r2,12(r3)
  80b498:	10c00215 	stw	r3,8(r2)
  80b49c:	b4800204 	addi	r18,r22,8
  80b4a0:	21804336 	bltu	r4,r6,80b5b0 <_realloc_r+0x508>
  80b4a4:	008004c4 	movi	r2,19
  80b4a8:	11803f2e 	bgeu	r2,r6,80b5a8 <_realloc_r+0x500>
  80b4ac:	a8800017 	ldw	r2,0(r21)
  80b4b0:	b0800215 	stw	r2,8(r22)
  80b4b4:	a8800117 	ldw	r2,4(r21)
  80b4b8:	b0800315 	stw	r2,12(r22)
  80b4bc:	008006c4 	movi	r2,27
  80b4c0:	11803f36 	bltu	r2,r6,80b5c0 <_realloc_r+0x518>
  80b4c4:	b0800404 	addi	r2,r22,16
  80b4c8:	ad400204 	addi	r21,r21,8
  80b4cc:	a8c00017 	ldw	r3,0(r21)
  80b4d0:	10c00015 	stw	r3,0(r2)
  80b4d4:	a8c00117 	ldw	r3,4(r21)
  80b4d8:	10c00115 	stw	r3,4(r2)
  80b4dc:	a8c00217 	ldw	r3,8(r21)
  80b4e0:	10c00215 	stw	r3,8(r2)
  80b4e4:	b447883a 	add	r3,r22,r17
  80b4e8:	bc45c83a 	sub	r2,r23,r17
  80b4ec:	e0c00215 	stw	r3,8(fp)
  80b4f0:	10800054 	ori	r2,r2,1
  80b4f4:	18800115 	stw	r2,4(r3)
  80b4f8:	b0800117 	ldw	r2,4(r22)
  80b4fc:	a009883a 	mov	r4,r20
  80b500:	1080004c 	andi	r2,r2,1
  80b504:	1462b03a 	or	r17,r2,r17
  80b508:	b4400115 	stw	r17,4(r22)
  80b50c:	0810d480 	call	810d48 <__malloc_unlock>
  80b510:	9005883a 	mov	r2,r18
  80b514:	003f4006 	br	80b218 <__alt_mem_onchip_mem+0xff78b218>
  80b518:	a8c00217 	ldw	r3,8(r21)
  80b51c:	90c00215 	stw	r3,8(r18)
  80b520:	a8c00317 	ldw	r3,12(r21)
  80b524:	90c00315 	stw	r3,12(r18)
  80b528:	30801126 	beq	r6,r2,80b570 <_realloc_r+0x4c8>
  80b52c:	90800404 	addi	r2,r18,16
  80b530:	a8c00404 	addi	r3,r21,16
  80b534:	003f1906 	br	80b19c <__alt_mem_onchip_mem+0xff78b19c>
  80b538:	90ffff17 	ldw	r3,-4(r18)
  80b53c:	00bfff04 	movi	r2,-4
  80b540:	a825883a 	mov	r18,r21
  80b544:	1884703a 	and	r2,r3,r2
  80b548:	80a1883a 	add	r16,r16,r2
  80b54c:	003f2406 	br	80b1e0 <__alt_mem_onchip_mem+0xff78b1e0>
  80b550:	a8800217 	ldw	r2,8(r21)
  80b554:	b0800415 	stw	r2,16(r22)
  80b558:	a8800317 	ldw	r2,12(r21)
  80b55c:	b0800515 	stw	r2,20(r22)
  80b560:	31000a26 	beq	r6,r4,80b58c <_realloc_r+0x4e4>
  80b564:	b0800604 	addi	r2,r22,24
  80b568:	ad400404 	addi	r21,r21,16
  80b56c:	003fa906 	br	80b414 <__alt_mem_onchip_mem+0xff78b414>
  80b570:	a9000417 	ldw	r4,16(r21)
  80b574:	90800604 	addi	r2,r18,24
  80b578:	a8c00604 	addi	r3,r21,24
  80b57c:	91000415 	stw	r4,16(r18)
  80b580:	a9000517 	ldw	r4,20(r21)
  80b584:	91000515 	stw	r4,20(r18)
  80b588:	003f0406 	br	80b19c <__alt_mem_onchip_mem+0xff78b19c>
  80b58c:	a8c00417 	ldw	r3,16(r21)
  80b590:	ad400604 	addi	r21,r21,24
  80b594:	b0800804 	addi	r2,r22,32
  80b598:	b0c00615 	stw	r3,24(r22)
  80b59c:	a8ffff17 	ldw	r3,-4(r21)
  80b5a0:	b0c00715 	stw	r3,28(r22)
  80b5a4:	003f9b06 	br	80b414 <__alt_mem_onchip_mem+0xff78b414>
  80b5a8:	9005883a 	mov	r2,r18
  80b5ac:	003fc706 	br	80b4cc <__alt_mem_onchip_mem+0xff78b4cc>
  80b5b0:	a80b883a 	mov	r5,r21
  80b5b4:	9009883a 	mov	r4,r18
  80b5b8:	0809ef00 	call	809ef0 <memmove>
  80b5bc:	003fc906 	br	80b4e4 <__alt_mem_onchip_mem+0xff78b4e4>
  80b5c0:	a8800217 	ldw	r2,8(r21)
  80b5c4:	b0800415 	stw	r2,16(r22)
  80b5c8:	a8800317 	ldw	r2,12(r21)
  80b5cc:	b0800515 	stw	r2,20(r22)
  80b5d0:	31000726 	beq	r6,r4,80b5f0 <_realloc_r+0x548>
  80b5d4:	b0800604 	addi	r2,r22,24
  80b5d8:	ad400404 	addi	r21,r21,16
  80b5dc:	003fbb06 	br	80b4cc <__alt_mem_onchip_mem+0xff78b4cc>
  80b5e0:	a009883a 	mov	r4,r20
  80b5e4:	0810d480 	call	810d48 <__malloc_unlock>
  80b5e8:	0005883a 	mov	r2,zero
  80b5ec:	003f0a06 	br	80b218 <__alt_mem_onchip_mem+0xff78b218>
  80b5f0:	a8c00417 	ldw	r3,16(r21)
  80b5f4:	ad400604 	addi	r21,r21,24
  80b5f8:	b0800804 	addi	r2,r22,32
  80b5fc:	b0c00615 	stw	r3,24(r22)
  80b600:	a8ffff17 	ldw	r3,-4(r21)
  80b604:	b0c00715 	stw	r3,28(r22)
  80b608:	003fb006 	br	80b4cc <__alt_mem_onchip_mem+0xff78b4cc>

0080b60c <__fpclassifyd>:
  80b60c:	00a00034 	movhi	r2,32768
  80b610:	10bfffc4 	addi	r2,r2,-1
  80b614:	2884703a 	and	r2,r5,r2
  80b618:	10000726 	beq	r2,zero,80b638 <__fpclassifyd+0x2c>
  80b61c:	00fffc34 	movhi	r3,65520
  80b620:	019ff834 	movhi	r6,32736
  80b624:	28c7883a 	add	r3,r5,r3
  80b628:	31bfffc4 	addi	r6,r6,-1
  80b62c:	30c00536 	bltu	r6,r3,80b644 <__fpclassifyd+0x38>
  80b630:	00800104 	movi	r2,4
  80b634:	f800283a 	ret
  80b638:	2000021e 	bne	r4,zero,80b644 <__fpclassifyd+0x38>
  80b63c:	00800084 	movi	r2,2
  80b640:	f800283a 	ret
  80b644:	00dffc34 	movhi	r3,32752
  80b648:	019ff834 	movhi	r6,32736
  80b64c:	28cb883a 	add	r5,r5,r3
  80b650:	31bfffc4 	addi	r6,r6,-1
  80b654:	317ff62e 	bgeu	r6,r5,80b630 <__alt_mem_onchip_mem+0xff78b630>
  80b658:	01400434 	movhi	r5,16
  80b65c:	297fffc4 	addi	r5,r5,-1
  80b660:	28800236 	bltu	r5,r2,80b66c <__fpclassifyd+0x60>
  80b664:	008000c4 	movi	r2,3
  80b668:	f800283a 	ret
  80b66c:	10c00226 	beq	r2,r3,80b678 <__fpclassifyd+0x6c>
  80b670:	0005883a 	mov	r2,zero
  80b674:	f800283a 	ret
  80b678:	2005003a 	cmpeq	r2,r4,zero
  80b67c:	f800283a 	ret

0080b680 <strcmp>:
  80b680:	2144b03a 	or	r2,r4,r5
  80b684:	108000cc 	andi	r2,r2,3
  80b688:	1000171e 	bne	r2,zero,80b6e8 <strcmp+0x68>
  80b68c:	20800017 	ldw	r2,0(r4)
  80b690:	28c00017 	ldw	r3,0(r5)
  80b694:	10c0141e 	bne	r2,r3,80b6e8 <strcmp+0x68>
  80b698:	027fbff4 	movhi	r9,65279
  80b69c:	4a7fbfc4 	addi	r9,r9,-257
  80b6a0:	0086303a 	nor	r3,zero,r2
  80b6a4:	02202074 	movhi	r8,32897
  80b6a8:	1245883a 	add	r2,r2,r9
  80b6ac:	42202004 	addi	r8,r8,-32640
  80b6b0:	10c4703a 	and	r2,r2,r3
  80b6b4:	1204703a 	and	r2,r2,r8
  80b6b8:	10000226 	beq	r2,zero,80b6c4 <strcmp+0x44>
  80b6bc:	00002306 	br	80b74c <strcmp+0xcc>
  80b6c0:	1000221e 	bne	r2,zero,80b74c <strcmp+0xcc>
  80b6c4:	21000104 	addi	r4,r4,4
  80b6c8:	20c00017 	ldw	r3,0(r4)
  80b6cc:	29400104 	addi	r5,r5,4
  80b6d0:	29800017 	ldw	r6,0(r5)
  80b6d4:	1a4f883a 	add	r7,r3,r9
  80b6d8:	00c4303a 	nor	r2,zero,r3
  80b6dc:	3884703a 	and	r2,r7,r2
  80b6e0:	1204703a 	and	r2,r2,r8
  80b6e4:	19bff626 	beq	r3,r6,80b6c0 <__alt_mem_onchip_mem+0xff78b6c0>
  80b6e8:	20800003 	ldbu	r2,0(r4)
  80b6ec:	10c03fcc 	andi	r3,r2,255
  80b6f0:	18c0201c 	xori	r3,r3,128
  80b6f4:	18ffe004 	addi	r3,r3,-128
  80b6f8:	18000c26 	beq	r3,zero,80b72c <strcmp+0xac>
  80b6fc:	29800007 	ldb	r6,0(r5)
  80b700:	19800326 	beq	r3,r6,80b710 <strcmp+0x90>
  80b704:	00001306 	br	80b754 <strcmp+0xd4>
  80b708:	29800007 	ldb	r6,0(r5)
  80b70c:	11800b1e 	bne	r2,r6,80b73c <strcmp+0xbc>
  80b710:	21000044 	addi	r4,r4,1
  80b714:	20c00003 	ldbu	r3,0(r4)
  80b718:	29400044 	addi	r5,r5,1
  80b71c:	18803fcc 	andi	r2,r3,255
  80b720:	1080201c 	xori	r2,r2,128
  80b724:	10bfe004 	addi	r2,r2,-128
  80b728:	103ff71e 	bne	r2,zero,80b708 <__alt_mem_onchip_mem+0xff78b708>
  80b72c:	0007883a 	mov	r3,zero
  80b730:	28800003 	ldbu	r2,0(r5)
  80b734:	1885c83a 	sub	r2,r3,r2
  80b738:	f800283a 	ret
  80b73c:	28800003 	ldbu	r2,0(r5)
  80b740:	18c03fcc 	andi	r3,r3,255
  80b744:	1885c83a 	sub	r2,r3,r2
  80b748:	f800283a 	ret
  80b74c:	0005883a 	mov	r2,zero
  80b750:	f800283a 	ret
  80b754:	10c03fcc 	andi	r3,r2,255
  80b758:	003ff506 	br	80b730 <__alt_mem_onchip_mem+0xff78b730>

0080b75c <__sprint_r.part.0>:
  80b75c:	28801917 	ldw	r2,100(r5)
  80b760:	defff604 	addi	sp,sp,-40
  80b764:	dd400515 	stw	r21,20(sp)
  80b768:	dfc00915 	stw	ra,36(sp)
  80b76c:	df000815 	stw	fp,32(sp)
  80b770:	ddc00715 	stw	r23,28(sp)
  80b774:	dd800615 	stw	r22,24(sp)
  80b778:	dd000415 	stw	r20,16(sp)
  80b77c:	dcc00315 	stw	r19,12(sp)
  80b780:	dc800215 	stw	r18,8(sp)
  80b784:	dc400115 	stw	r17,4(sp)
  80b788:	dc000015 	stw	r16,0(sp)
  80b78c:	1088000c 	andi	r2,r2,8192
  80b790:	302b883a 	mov	r21,r6
  80b794:	10002e26 	beq	r2,zero,80b850 <__sprint_r.part.0+0xf4>
  80b798:	30800217 	ldw	r2,8(r6)
  80b79c:	35800017 	ldw	r22,0(r6)
  80b7a0:	10002926 	beq	r2,zero,80b848 <__sprint_r.part.0+0xec>
  80b7a4:	2827883a 	mov	r19,r5
  80b7a8:	2029883a 	mov	r20,r4
  80b7ac:	b5c00104 	addi	r23,r22,4
  80b7b0:	04bfffc4 	movi	r18,-1
  80b7b4:	bc400017 	ldw	r17,0(r23)
  80b7b8:	b4000017 	ldw	r16,0(r22)
  80b7bc:	0039883a 	mov	fp,zero
  80b7c0:	8822d0ba 	srli	r17,r17,2
  80b7c4:	8800031e 	bne	r17,zero,80b7d4 <__sprint_r.part.0+0x78>
  80b7c8:	00001806 	br	80b82c <__sprint_r.part.0+0xd0>
  80b7cc:	84000104 	addi	r16,r16,4
  80b7d0:	8f001526 	beq	r17,fp,80b828 <__sprint_r.part.0+0xcc>
  80b7d4:	81400017 	ldw	r5,0(r16)
  80b7d8:	980d883a 	mov	r6,r19
  80b7dc:	a009883a 	mov	r4,r20
  80b7e0:	080d0d00 	call	80d0d0 <_fputwc_r>
  80b7e4:	e7000044 	addi	fp,fp,1
  80b7e8:	14bff81e 	bne	r2,r18,80b7cc <__alt_mem_onchip_mem+0xff78b7cc>
  80b7ec:	9005883a 	mov	r2,r18
  80b7f0:	a8000215 	stw	zero,8(r21)
  80b7f4:	a8000115 	stw	zero,4(r21)
  80b7f8:	dfc00917 	ldw	ra,36(sp)
  80b7fc:	df000817 	ldw	fp,32(sp)
  80b800:	ddc00717 	ldw	r23,28(sp)
  80b804:	dd800617 	ldw	r22,24(sp)
  80b808:	dd400517 	ldw	r21,20(sp)
  80b80c:	dd000417 	ldw	r20,16(sp)
  80b810:	dcc00317 	ldw	r19,12(sp)
  80b814:	dc800217 	ldw	r18,8(sp)
  80b818:	dc400117 	ldw	r17,4(sp)
  80b81c:	dc000017 	ldw	r16,0(sp)
  80b820:	dec00a04 	addi	sp,sp,40
  80b824:	f800283a 	ret
  80b828:	a8800217 	ldw	r2,8(r21)
  80b82c:	8c63883a 	add	r17,r17,r17
  80b830:	8c63883a 	add	r17,r17,r17
  80b834:	1445c83a 	sub	r2,r2,r17
  80b838:	a8800215 	stw	r2,8(r21)
  80b83c:	b5800204 	addi	r22,r22,8
  80b840:	bdc00204 	addi	r23,r23,8
  80b844:	103fdb1e 	bne	r2,zero,80b7b4 <__alt_mem_onchip_mem+0xff78b7b4>
  80b848:	0005883a 	mov	r2,zero
  80b84c:	003fe806 	br	80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>
  80b850:	08094f00 	call	8094f0 <__sfvwrite_r>
  80b854:	003fe606 	br	80b7f0 <__alt_mem_onchip_mem+0xff78b7f0>

0080b858 <__sprint_r>:
  80b858:	30c00217 	ldw	r3,8(r6)
  80b85c:	18000126 	beq	r3,zero,80b864 <__sprint_r+0xc>
  80b860:	080b75c1 	jmpi	80b75c <__sprint_r.part.0>
  80b864:	30000115 	stw	zero,4(r6)
  80b868:	0005883a 	mov	r2,zero
  80b86c:	f800283a 	ret

0080b870 <___vfiprintf_internal_r>:
  80b870:	deffc904 	addi	sp,sp,-220
  80b874:	df003515 	stw	fp,212(sp)
  80b878:	dd003115 	stw	r20,196(sp)
  80b87c:	dfc03615 	stw	ra,216(sp)
  80b880:	ddc03415 	stw	r23,208(sp)
  80b884:	dd803315 	stw	r22,204(sp)
  80b888:	dd403215 	stw	r21,200(sp)
  80b88c:	dcc03015 	stw	r19,192(sp)
  80b890:	dc802f15 	stw	r18,188(sp)
  80b894:	dc402e15 	stw	r17,184(sp)
  80b898:	dc002d15 	stw	r16,180(sp)
  80b89c:	d9002015 	stw	r4,128(sp)
  80b8a0:	d9c02215 	stw	r7,136(sp)
  80b8a4:	2829883a 	mov	r20,r5
  80b8a8:	3039883a 	mov	fp,r6
  80b8ac:	20000226 	beq	r4,zero,80b8b8 <___vfiprintf_internal_r+0x48>
  80b8b0:	20800e17 	ldw	r2,56(r4)
  80b8b4:	1000cf26 	beq	r2,zero,80bbf4 <___vfiprintf_internal_r+0x384>
  80b8b8:	a080030b 	ldhu	r2,12(r20)
  80b8bc:	10c8000c 	andi	r3,r2,8192
  80b8c0:	1800061e 	bne	r3,zero,80b8dc <___vfiprintf_internal_r+0x6c>
  80b8c4:	a1001917 	ldw	r4,100(r20)
  80b8c8:	00f7ffc4 	movi	r3,-8193
  80b8cc:	10880014 	ori	r2,r2,8192
  80b8d0:	20c6703a 	and	r3,r4,r3
  80b8d4:	a080030d 	sth	r2,12(r20)
  80b8d8:	a0c01915 	stw	r3,100(r20)
  80b8dc:	10c0020c 	andi	r3,r2,8
  80b8e0:	1800a926 	beq	r3,zero,80bb88 <___vfiprintf_internal_r+0x318>
  80b8e4:	a0c00417 	ldw	r3,16(r20)
  80b8e8:	1800a726 	beq	r3,zero,80bb88 <___vfiprintf_internal_r+0x318>
  80b8ec:	1080068c 	andi	r2,r2,26
  80b8f0:	00c00284 	movi	r3,10
  80b8f4:	10c0ac26 	beq	r2,r3,80bba8 <___vfiprintf_internal_r+0x338>
  80b8f8:	da801a04 	addi	r10,sp,104
  80b8fc:	da801e15 	stw	r10,120(sp)
  80b900:	d8801e17 	ldw	r2,120(sp)
  80b904:	da8019c4 	addi	r10,sp,103
  80b908:	05802074 	movhi	r22,129
  80b90c:	05c02074 	movhi	r23,129
  80b910:	da801f15 	stw	r10,124(sp)
  80b914:	1295c83a 	sub	r10,r2,r10
  80b918:	b592cf04 	addi	r22,r22,19260
  80b91c:	bdd2cb04 	addi	r23,r23,19244
  80b920:	dec01a15 	stw	sp,104(sp)
  80b924:	d8001c15 	stw	zero,112(sp)
  80b928:	d8001b15 	stw	zero,108(sp)
  80b92c:	d8002615 	stw	zero,152(sp)
  80b930:	d8002315 	stw	zero,140(sp)
  80b934:	da802715 	stw	r10,156(sp)
  80b938:	d811883a 	mov	r8,sp
  80b93c:	dd002115 	stw	r20,132(sp)
  80b940:	e021883a 	mov	r16,fp
  80b944:	80800007 	ldb	r2,0(r16)
  80b948:	1003ea26 	beq	r2,zero,80c8f4 <___vfiprintf_internal_r+0x1084>
  80b94c:	00c00944 	movi	r3,37
  80b950:	8025883a 	mov	r18,r16
  80b954:	10c0021e 	bne	r2,r3,80b960 <___vfiprintf_internal_r+0xf0>
  80b958:	00001606 	br	80b9b4 <___vfiprintf_internal_r+0x144>
  80b95c:	10c00326 	beq	r2,r3,80b96c <___vfiprintf_internal_r+0xfc>
  80b960:	94800044 	addi	r18,r18,1
  80b964:	90800007 	ldb	r2,0(r18)
  80b968:	103ffc1e 	bne	r2,zero,80b95c <__alt_mem_onchip_mem+0xff78b95c>
  80b96c:	9423c83a 	sub	r17,r18,r16
  80b970:	88001026 	beq	r17,zero,80b9b4 <___vfiprintf_internal_r+0x144>
  80b974:	d8c01c17 	ldw	r3,112(sp)
  80b978:	d8801b17 	ldw	r2,108(sp)
  80b97c:	44000015 	stw	r16,0(r8)
  80b980:	88c7883a 	add	r3,r17,r3
  80b984:	10800044 	addi	r2,r2,1
  80b988:	44400115 	stw	r17,4(r8)
  80b98c:	d8c01c15 	stw	r3,112(sp)
  80b990:	d8801b15 	stw	r2,108(sp)
  80b994:	010001c4 	movi	r4,7
  80b998:	2080760e 	bge	r4,r2,80bb74 <___vfiprintf_internal_r+0x304>
  80b99c:	1803821e 	bne	r3,zero,80c7a8 <___vfiprintf_internal_r+0xf38>
  80b9a0:	da802317 	ldw	r10,140(sp)
  80b9a4:	d8001b15 	stw	zero,108(sp)
  80b9a8:	d811883a 	mov	r8,sp
  80b9ac:	5455883a 	add	r10,r10,r17
  80b9b0:	da802315 	stw	r10,140(sp)
  80b9b4:	90800007 	ldb	r2,0(r18)
  80b9b8:	10044626 	beq	r2,zero,80cad4 <___vfiprintf_internal_r+0x1264>
  80b9bc:	90c00047 	ldb	r3,1(r18)
  80b9c0:	94000044 	addi	r16,r18,1
  80b9c4:	d8001d85 	stb	zero,118(sp)
  80b9c8:	0009883a 	mov	r4,zero
  80b9cc:	000f883a 	mov	r7,zero
  80b9d0:	027fffc4 	movi	r9,-1
  80b9d4:	0023883a 	mov	r17,zero
  80b9d8:	0029883a 	mov	r20,zero
  80b9dc:	01401604 	movi	r5,88
  80b9e0:	01800244 	movi	r6,9
  80b9e4:	03400a84 	movi	r13,42
  80b9e8:	03001b04 	movi	r12,108
  80b9ec:	84000044 	addi	r16,r16,1
  80b9f0:	18bff804 	addi	r2,r3,-32
  80b9f4:	28827336 	bltu	r5,r2,80c3c4 <___vfiprintf_internal_r+0xb54>
  80b9f8:	100490ba 	slli	r2,r2,2
  80b9fc:	02802074 	movhi	r10,129
  80ba00:	52ae8404 	addi	r10,r10,-17904
  80ba04:	1285883a 	add	r2,r2,r10
  80ba08:	10800017 	ldw	r2,0(r2)
  80ba0c:	1000683a 	jmp	r2
  80ba10:	0080c0f8 	rdprs	r2,zero,771
  80ba14:	0080c3c4 	movi	r2,783
  80ba18:	0080c3c4 	movi	r2,783
  80ba1c:	0080c118 	cmpnei	r2,zero,772
  80ba20:	0080c3c4 	movi	r2,783
  80ba24:	0080c3c4 	movi	r2,783
  80ba28:	0080c3c4 	movi	r2,783
  80ba2c:	0080c3c4 	movi	r2,783
  80ba30:	0080c3c4 	movi	r2,783
  80ba34:	0080c3c4 	movi	r2,783
  80ba38:	0080c300 	call	80c30 <__reset-0x77f3d0>
  80ba3c:	0080c31c 	xori	r2,zero,780
  80ba40:	0080c3c4 	movi	r2,783
  80ba44:	0080bc04 	movi	r2,752
  80ba48:	0080c32c 	andhi	r2,zero,780
  80ba4c:	0080c3c4 	movi	r2,783
  80ba50:	0080c124 	muli	r2,zero,772
  80ba54:	0080c130 	cmpltui	r2,zero,772
  80ba58:	0080c130 	cmpltui	r2,zero,772
  80ba5c:	0080c130 	cmpltui	r2,zero,772
  80ba60:	0080c130 	cmpltui	r2,zero,772
  80ba64:	0080c130 	cmpltui	r2,zero,772
  80ba68:	0080c130 	cmpltui	r2,zero,772
  80ba6c:	0080c130 	cmpltui	r2,zero,772
  80ba70:	0080c130 	cmpltui	r2,zero,772
  80ba74:	0080c130 	cmpltui	r2,zero,772
  80ba78:	0080c3c4 	movi	r2,783
  80ba7c:	0080c3c4 	movi	r2,783
  80ba80:	0080c3c4 	movi	r2,783
  80ba84:	0080c3c4 	movi	r2,783
  80ba88:	0080c3c4 	movi	r2,783
  80ba8c:	0080c3c4 	movi	r2,783
  80ba90:	0080c3c4 	movi	r2,783
  80ba94:	0080c3c4 	movi	r2,783
  80ba98:	0080c3c4 	movi	r2,783
  80ba9c:	0080c3c4 	movi	r2,783
  80baa0:	0080c15c 	xori	r2,zero,773
  80baa4:	0080c3c4 	movi	r2,783
  80baa8:	0080c3c4 	movi	r2,783
  80baac:	0080c3c4 	movi	r2,783
  80bab0:	0080c3c4 	movi	r2,783
  80bab4:	0080c3c4 	movi	r2,783
  80bab8:	0080c3c4 	movi	r2,783
  80babc:	0080c3c4 	movi	r2,783
  80bac0:	0080c3c4 	movi	r2,783
  80bac4:	0080c3c4 	movi	r2,783
  80bac8:	0080c3c4 	movi	r2,783
  80bacc:	0080c194 	movui	r2,774
  80bad0:	0080c3c4 	movi	r2,783
  80bad4:	0080c3c4 	movi	r2,783
  80bad8:	0080c3c4 	movi	r2,783
  80badc:	0080c3c4 	movi	r2,783
  80bae0:	0080c3c4 	movi	r2,783
  80bae4:	0080c1ec 	andhi	r2,zero,775
  80bae8:	0080c3c4 	movi	r2,783
  80baec:	0080c3c4 	movi	r2,783
  80baf0:	0080c25c 	xori	r2,zero,777
  80baf4:	0080c3c4 	movi	r2,783
  80baf8:	0080c3c4 	movi	r2,783
  80bafc:	0080c3c4 	movi	r2,783
  80bb00:	0080c3c4 	movi	r2,783
  80bb04:	0080c3c4 	movi	r2,783
  80bb08:	0080c3c4 	movi	r2,783
  80bb0c:	0080c3c4 	movi	r2,783
  80bb10:	0080c3c4 	movi	r2,783
  80bb14:	0080c3c4 	movi	r2,783
  80bb18:	0080c3c4 	movi	r2,783
  80bb1c:	0080c008 	cmpgei	r2,zero,768
  80bb20:	0080c034 	movhi	r2,768
  80bb24:	0080c3c4 	movi	r2,783
  80bb28:	0080c3c4 	movi	r2,783
  80bb2c:	0080c3c4 	movi	r2,783
  80bb30:	0080c36c 	andhi	r2,zero,781
  80bb34:	0080c034 	movhi	r2,768
  80bb38:	0080c3c4 	movi	r2,783
  80bb3c:	0080c3c4 	movi	r2,783
  80bb40:	0080bec8 	cmpgei	r2,zero,763
  80bb44:	0080c3c4 	movi	r2,783
  80bb48:	0080bed8 	cmpnei	r2,zero,763
  80bb4c:	0080bf14 	movui	r2,764
  80bb50:	0080bc10 	cmplti	r2,zero,752
  80bb54:	0080bebc 	xorhi	r2,zero,762
  80bb58:	0080c3c4 	movi	r2,783
  80bb5c:	0080c298 	cmpnei	r2,zero,778
  80bb60:	0080c3c4 	movi	r2,783
  80bb64:	0080c2f0 	cmpltui	r2,zero,779
  80bb68:	0080c3c4 	movi	r2,783
  80bb6c:	0080c3c4 	movi	r2,783
  80bb70:	0080bfb4 	movhi	r2,766
  80bb74:	42000204 	addi	r8,r8,8
  80bb78:	da802317 	ldw	r10,140(sp)
  80bb7c:	5455883a 	add	r10,r10,r17
  80bb80:	da802315 	stw	r10,140(sp)
  80bb84:	003f8b06 	br	80b9b4 <__alt_mem_onchip_mem+0xff78b9b4>
  80bb88:	d9002017 	ldw	r4,128(sp)
  80bb8c:	a00b883a 	mov	r5,r20
  80bb90:	0806f980 	call	806f98 <__swsetup_r>
  80bb94:	1003b11e 	bne	r2,zero,80ca5c <___vfiprintf_internal_r+0x11ec>
  80bb98:	a080030b 	ldhu	r2,12(r20)
  80bb9c:	00c00284 	movi	r3,10
  80bba0:	1080068c 	andi	r2,r2,26
  80bba4:	10ff541e 	bne	r2,r3,80b8f8 <__alt_mem_onchip_mem+0xff78b8f8>
  80bba8:	a080038f 	ldh	r2,14(r20)
  80bbac:	103f5216 	blt	r2,zero,80b8f8 <__alt_mem_onchip_mem+0xff78b8f8>
  80bbb0:	d9c02217 	ldw	r7,136(sp)
  80bbb4:	d9002017 	ldw	r4,128(sp)
  80bbb8:	e00d883a 	mov	r6,fp
  80bbbc:	a00b883a 	mov	r5,r20
  80bbc0:	080cce80 	call	80cce8 <__sbprintf>
  80bbc4:	dfc03617 	ldw	ra,216(sp)
  80bbc8:	df003517 	ldw	fp,212(sp)
  80bbcc:	ddc03417 	ldw	r23,208(sp)
  80bbd0:	dd803317 	ldw	r22,204(sp)
  80bbd4:	dd403217 	ldw	r21,200(sp)
  80bbd8:	dd003117 	ldw	r20,196(sp)
  80bbdc:	dcc03017 	ldw	r19,192(sp)
  80bbe0:	dc802f17 	ldw	r18,188(sp)
  80bbe4:	dc402e17 	ldw	r17,184(sp)
  80bbe8:	dc002d17 	ldw	r16,180(sp)
  80bbec:	dec03704 	addi	sp,sp,220
  80bbf0:	f800283a 	ret
  80bbf4:	0808fc00 	call	808fc0 <__sinit>
  80bbf8:	003f2f06 	br	80b8b8 <__alt_mem_onchip_mem+0xff78b8b8>
  80bbfc:	0463c83a 	sub	r17,zero,r17
  80bc00:	d8802215 	stw	r2,136(sp)
  80bc04:	a5000114 	ori	r20,r20,4
  80bc08:	80c00007 	ldb	r3,0(r16)
  80bc0c:	003f7706 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80bc10:	00800c04 	movi	r2,48
  80bc14:	da802217 	ldw	r10,136(sp)
  80bc18:	d8801d05 	stb	r2,116(sp)
  80bc1c:	00801e04 	movi	r2,120
  80bc20:	d8801d45 	stb	r2,117(sp)
  80bc24:	d8001d85 	stb	zero,118(sp)
  80bc28:	50c00104 	addi	r3,r10,4
  80bc2c:	54800017 	ldw	r18,0(r10)
  80bc30:	0027883a 	mov	r19,zero
  80bc34:	a0800094 	ori	r2,r20,2
  80bc38:	48030b16 	blt	r9,zero,80c868 <___vfiprintf_internal_r+0xff8>
  80bc3c:	00bfdfc4 	movi	r2,-129
  80bc40:	a096703a 	and	r11,r20,r2
  80bc44:	d8c02215 	stw	r3,136(sp)
  80bc48:	5d000094 	ori	r20,r11,2
  80bc4c:	90032b1e 	bne	r18,zero,80c8fc <___vfiprintf_internal_r+0x108c>
  80bc50:	00802074 	movhi	r2,129
  80bc54:	10926b04 	addi	r2,r2,18860
  80bc58:	d8802615 	stw	r2,152(sp)
  80bc5c:	0039883a 	mov	fp,zero
  80bc60:	48017b1e 	bne	r9,zero,80c250 <___vfiprintf_internal_r+0x9e0>
  80bc64:	0013883a 	mov	r9,zero
  80bc68:	0027883a 	mov	r19,zero
  80bc6c:	dd401a04 	addi	r21,sp,104
  80bc70:	4825883a 	mov	r18,r9
  80bc74:	4cc0010e 	bge	r9,r19,80bc7c <___vfiprintf_internal_r+0x40c>
  80bc78:	9825883a 	mov	r18,r19
  80bc7c:	e7003fcc 	andi	fp,fp,255
  80bc80:	e700201c 	xori	fp,fp,128
  80bc84:	e73fe004 	addi	fp,fp,-128
  80bc88:	e0000126 	beq	fp,zero,80bc90 <___vfiprintf_internal_r+0x420>
  80bc8c:	94800044 	addi	r18,r18,1
  80bc90:	a380008c 	andi	r14,r20,2
  80bc94:	70000126 	beq	r14,zero,80bc9c <___vfiprintf_internal_r+0x42c>
  80bc98:	94800084 	addi	r18,r18,2
  80bc9c:	a700210c 	andi	fp,r20,132
  80bca0:	e001df1e 	bne	fp,zero,80c420 <___vfiprintf_internal_r+0xbb0>
  80bca4:	8c87c83a 	sub	r3,r17,r18
  80bca8:	00c1dd0e 	bge	zero,r3,80c420 <___vfiprintf_internal_r+0xbb0>
  80bcac:	01c00404 	movi	r7,16
  80bcb0:	d8801c17 	ldw	r2,112(sp)
  80bcb4:	38c3ad0e 	bge	r7,r3,80cb6c <___vfiprintf_internal_r+0x12fc>
  80bcb8:	02802074 	movhi	r10,129
  80bcbc:	5292cf04 	addi	r10,r10,19260
  80bcc0:	dc002915 	stw	r16,164(sp)
  80bcc4:	d9801b17 	ldw	r6,108(sp)
  80bcc8:	da802415 	stw	r10,144(sp)
  80bccc:	03c001c4 	movi	r15,7
  80bcd0:	da402515 	stw	r9,148(sp)
  80bcd4:	db802815 	stw	r14,160(sp)
  80bcd8:	1821883a 	mov	r16,r3
  80bcdc:	00000506 	br	80bcf4 <___vfiprintf_internal_r+0x484>
  80bce0:	31400084 	addi	r5,r6,2
  80bce4:	42000204 	addi	r8,r8,8
  80bce8:	200d883a 	mov	r6,r4
  80bcec:	843ffc04 	addi	r16,r16,-16
  80bcf0:	3c000d0e 	bge	r7,r16,80bd28 <___vfiprintf_internal_r+0x4b8>
  80bcf4:	10800404 	addi	r2,r2,16
  80bcf8:	31000044 	addi	r4,r6,1
  80bcfc:	45800015 	stw	r22,0(r8)
  80bd00:	41c00115 	stw	r7,4(r8)
  80bd04:	d8801c15 	stw	r2,112(sp)
  80bd08:	d9001b15 	stw	r4,108(sp)
  80bd0c:	793ff40e 	bge	r15,r4,80bce0 <__alt_mem_onchip_mem+0xff78bce0>
  80bd10:	1001b51e 	bne	r2,zero,80c3e8 <___vfiprintf_internal_r+0xb78>
  80bd14:	843ffc04 	addi	r16,r16,-16
  80bd18:	000d883a 	mov	r6,zero
  80bd1c:	01400044 	movi	r5,1
  80bd20:	d811883a 	mov	r8,sp
  80bd24:	3c3ff316 	blt	r7,r16,80bcf4 <__alt_mem_onchip_mem+0xff78bcf4>
  80bd28:	8007883a 	mov	r3,r16
  80bd2c:	da402517 	ldw	r9,148(sp)
  80bd30:	db802817 	ldw	r14,160(sp)
  80bd34:	dc002917 	ldw	r16,164(sp)
  80bd38:	da802417 	ldw	r10,144(sp)
  80bd3c:	1885883a 	add	r2,r3,r2
  80bd40:	40c00115 	stw	r3,4(r8)
  80bd44:	42800015 	stw	r10,0(r8)
  80bd48:	d8801c15 	stw	r2,112(sp)
  80bd4c:	d9401b15 	stw	r5,108(sp)
  80bd50:	00c001c4 	movi	r3,7
  80bd54:	19426016 	blt	r3,r5,80c6d8 <___vfiprintf_internal_r+0xe68>
  80bd58:	d8c01d87 	ldb	r3,118(sp)
  80bd5c:	42000204 	addi	r8,r8,8
  80bd60:	29000044 	addi	r4,r5,1
  80bd64:	1801b31e 	bne	r3,zero,80c434 <___vfiprintf_internal_r+0xbc4>
  80bd68:	7001c026 	beq	r14,zero,80c46c <___vfiprintf_internal_r+0xbfc>
  80bd6c:	d8c01d04 	addi	r3,sp,116
  80bd70:	10800084 	addi	r2,r2,2
  80bd74:	40c00015 	stw	r3,0(r8)
  80bd78:	00c00084 	movi	r3,2
  80bd7c:	40c00115 	stw	r3,4(r8)
  80bd80:	d8801c15 	stw	r2,112(sp)
  80bd84:	d9001b15 	stw	r4,108(sp)
  80bd88:	00c001c4 	movi	r3,7
  80bd8c:	1902650e 	bge	r3,r4,80c724 <___vfiprintf_internal_r+0xeb4>
  80bd90:	10029a1e 	bne	r2,zero,80c7fc <___vfiprintf_internal_r+0xf8c>
  80bd94:	00c02004 	movi	r3,128
  80bd98:	01000044 	movi	r4,1
  80bd9c:	000b883a 	mov	r5,zero
  80bda0:	d811883a 	mov	r8,sp
  80bda4:	e0c1b31e 	bne	fp,r3,80c474 <___vfiprintf_internal_r+0xc04>
  80bda8:	8cb9c83a 	sub	fp,r17,r18
  80bdac:	0701b10e 	bge	zero,fp,80c474 <___vfiprintf_internal_r+0xc04>
  80bdb0:	01c00404 	movi	r7,16
  80bdb4:	3f03890e 	bge	r7,fp,80cbdc <___vfiprintf_internal_r+0x136c>
  80bdb8:	00c02074 	movhi	r3,129
  80bdbc:	18d2cb04 	addi	r3,r3,19244
  80bdc0:	d8c02415 	stw	r3,144(sp)
  80bdc4:	8007883a 	mov	r3,r16
  80bdc8:	034001c4 	movi	r13,7
  80bdcc:	e021883a 	mov	r16,fp
  80bdd0:	da402515 	stw	r9,148(sp)
  80bdd4:	1839883a 	mov	fp,r3
  80bdd8:	00000506 	br	80bdf0 <___vfiprintf_internal_r+0x580>
  80bddc:	29800084 	addi	r6,r5,2
  80bde0:	42000204 	addi	r8,r8,8
  80bde4:	180b883a 	mov	r5,r3
  80bde8:	843ffc04 	addi	r16,r16,-16
  80bdec:	3c000d0e 	bge	r7,r16,80be24 <___vfiprintf_internal_r+0x5b4>
  80bdf0:	10800404 	addi	r2,r2,16
  80bdf4:	28c00044 	addi	r3,r5,1
  80bdf8:	45c00015 	stw	r23,0(r8)
  80bdfc:	41c00115 	stw	r7,4(r8)
  80be00:	d8801c15 	stw	r2,112(sp)
  80be04:	d8c01b15 	stw	r3,108(sp)
  80be08:	68fff40e 	bge	r13,r3,80bddc <__alt_mem_onchip_mem+0xff78bddc>
  80be0c:	1002241e 	bne	r2,zero,80c6a0 <___vfiprintf_internal_r+0xe30>
  80be10:	843ffc04 	addi	r16,r16,-16
  80be14:	01800044 	movi	r6,1
  80be18:	000b883a 	mov	r5,zero
  80be1c:	d811883a 	mov	r8,sp
  80be20:	3c3ff316 	blt	r7,r16,80bdf0 <__alt_mem_onchip_mem+0xff78bdf0>
  80be24:	da402517 	ldw	r9,148(sp)
  80be28:	e007883a 	mov	r3,fp
  80be2c:	8039883a 	mov	fp,r16
  80be30:	1821883a 	mov	r16,r3
  80be34:	d8c02417 	ldw	r3,144(sp)
  80be38:	1705883a 	add	r2,r2,fp
  80be3c:	47000115 	stw	fp,4(r8)
  80be40:	40c00015 	stw	r3,0(r8)
  80be44:	d8801c15 	stw	r2,112(sp)
  80be48:	d9801b15 	stw	r6,108(sp)
  80be4c:	00c001c4 	movi	r3,7
  80be50:	19827616 	blt	r3,r6,80c82c <___vfiprintf_internal_r+0xfbc>
  80be54:	4cf9c83a 	sub	fp,r9,r19
  80be58:	42000204 	addi	r8,r8,8
  80be5c:	31000044 	addi	r4,r6,1
  80be60:	300b883a 	mov	r5,r6
  80be64:	07018516 	blt	zero,fp,80c47c <___vfiprintf_internal_r+0xc0c>
  80be68:	9885883a 	add	r2,r19,r2
  80be6c:	45400015 	stw	r21,0(r8)
  80be70:	44c00115 	stw	r19,4(r8)
  80be74:	d8801c15 	stw	r2,112(sp)
  80be78:	d9001b15 	stw	r4,108(sp)
  80be7c:	00c001c4 	movi	r3,7
  80be80:	1901dd0e 	bge	r3,r4,80c5f8 <___vfiprintf_internal_r+0xd88>
  80be84:	1002401e 	bne	r2,zero,80c788 <___vfiprintf_internal_r+0xf18>
  80be88:	d8001b15 	stw	zero,108(sp)
  80be8c:	a2c0010c 	andi	r11,r20,4
  80be90:	58000226 	beq	r11,zero,80be9c <___vfiprintf_internal_r+0x62c>
  80be94:	8ca7c83a 	sub	r19,r17,r18
  80be98:	04c2f216 	blt	zero,r19,80ca64 <___vfiprintf_internal_r+0x11f4>
  80be9c:	8c80010e 	bge	r17,r18,80bea4 <___vfiprintf_internal_r+0x634>
  80bea0:	9023883a 	mov	r17,r18
  80bea4:	da802317 	ldw	r10,140(sp)
  80bea8:	5455883a 	add	r10,r10,r17
  80beac:	da802315 	stw	r10,140(sp)
  80beb0:	d8001b15 	stw	zero,108(sp)
  80beb4:	d811883a 	mov	r8,sp
  80beb8:	003ea206 	br	80b944 <__alt_mem_onchip_mem+0xff78b944>
  80bebc:	a5000814 	ori	r20,r20,32
  80bec0:	80c00007 	ldb	r3,0(r16)
  80bec4:	003ec906 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80bec8:	80c00007 	ldb	r3,0(r16)
  80becc:	1b030926 	beq	r3,r12,80caf4 <___vfiprintf_internal_r+0x1284>
  80bed0:	a5000414 	ori	r20,r20,16
  80bed4:	003ec506 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80bed8:	21003fcc 	andi	r4,r4,255
  80bedc:	20035e1e 	bne	r4,zero,80cc58 <___vfiprintf_internal_r+0x13e8>
  80bee0:	a080080c 	andi	r2,r20,32
  80bee4:	1002a526 	beq	r2,zero,80c97c <___vfiprintf_internal_r+0x110c>
  80bee8:	da802217 	ldw	r10,136(sp)
  80beec:	50800017 	ldw	r2,0(r10)
  80bef0:	da802317 	ldw	r10,140(sp)
  80bef4:	5007d7fa 	srai	r3,r10,31
  80bef8:	da802217 	ldw	r10,136(sp)
  80befc:	10c00115 	stw	r3,4(r2)
  80bf00:	52800104 	addi	r10,r10,4
  80bf04:	da802215 	stw	r10,136(sp)
  80bf08:	da802317 	ldw	r10,140(sp)
  80bf0c:	12800015 	stw	r10,0(r2)
  80bf10:	003e8c06 	br	80b944 <__alt_mem_onchip_mem+0xff78b944>
  80bf14:	21003fcc 	andi	r4,r4,255
  80bf18:	2003511e 	bne	r4,zero,80cc60 <___vfiprintf_internal_r+0x13f0>
  80bf1c:	a080080c 	andi	r2,r20,32
  80bf20:	1000a126 	beq	r2,zero,80c1a8 <___vfiprintf_internal_r+0x938>
  80bf24:	da802217 	ldw	r10,136(sp)
  80bf28:	d8001d85 	stb	zero,118(sp)
  80bf2c:	50800204 	addi	r2,r10,8
  80bf30:	54800017 	ldw	r18,0(r10)
  80bf34:	54c00117 	ldw	r19,4(r10)
  80bf38:	4802b416 	blt	r9,zero,80ca0c <___vfiprintf_internal_r+0x119c>
  80bf3c:	013fdfc4 	movi	r4,-129
  80bf40:	94c6b03a 	or	r3,r18,r19
  80bf44:	d8802215 	stw	r2,136(sp)
  80bf48:	a128703a 	and	r20,r20,r4
  80bf4c:	1800a226 	beq	r3,zero,80c1d8 <___vfiprintf_internal_r+0x968>
  80bf50:	0039883a 	mov	fp,zero
  80bf54:	dd401a04 	addi	r21,sp,104
  80bf58:	9006d0fa 	srli	r3,r18,3
  80bf5c:	9808977a 	slli	r4,r19,29
  80bf60:	9826d0fa 	srli	r19,r19,3
  80bf64:	948001cc 	andi	r18,r18,7
  80bf68:	90800c04 	addi	r2,r18,48
  80bf6c:	ad7fffc4 	addi	r21,r21,-1
  80bf70:	20e4b03a 	or	r18,r4,r3
  80bf74:	a8800005 	stb	r2,0(r21)
  80bf78:	94c6b03a 	or	r3,r18,r19
  80bf7c:	183ff61e 	bne	r3,zero,80bf58 <__alt_mem_onchip_mem+0xff78bf58>
  80bf80:	a0c0004c 	andi	r3,r20,1
  80bf84:	18005926 	beq	r3,zero,80c0ec <___vfiprintf_internal_r+0x87c>
  80bf88:	10803fcc 	andi	r2,r2,255
  80bf8c:	1080201c 	xori	r2,r2,128
  80bf90:	10bfe004 	addi	r2,r2,-128
  80bf94:	00c00c04 	movi	r3,48
  80bf98:	10c05426 	beq	r2,r3,80c0ec <___vfiprintf_internal_r+0x87c>
  80bf9c:	da801e17 	ldw	r10,120(sp)
  80bfa0:	a8bfffc4 	addi	r2,r21,-1
  80bfa4:	a8ffffc5 	stb	r3,-1(r21)
  80bfa8:	50a7c83a 	sub	r19,r10,r2
  80bfac:	102b883a 	mov	r21,r2
  80bfb0:	003f2f06 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80bfb4:	21003fcc 	andi	r4,r4,255
  80bfb8:	2003421e 	bne	r4,zero,80ccc4 <___vfiprintf_internal_r+0x1454>
  80bfbc:	00802074 	movhi	r2,129
  80bfc0:	10926b04 	addi	r2,r2,18860
  80bfc4:	d8802615 	stw	r2,152(sp)
  80bfc8:	a080080c 	andi	r2,r20,32
  80bfcc:	1000aa26 	beq	r2,zero,80c278 <___vfiprintf_internal_r+0xa08>
  80bfd0:	da802217 	ldw	r10,136(sp)
  80bfd4:	54800017 	ldw	r18,0(r10)
  80bfd8:	54c00117 	ldw	r19,4(r10)
  80bfdc:	52800204 	addi	r10,r10,8
  80bfe0:	da802215 	stw	r10,136(sp)
  80bfe4:	a080004c 	andi	r2,r20,1
  80bfe8:	1001d226 	beq	r2,zero,80c734 <___vfiprintf_internal_r+0xec4>
  80bfec:	94c4b03a 	or	r2,r18,r19
  80bff0:	1002351e 	bne	r2,zero,80c8c8 <___vfiprintf_internal_r+0x1058>
  80bff4:	d8001d85 	stb	zero,118(sp)
  80bff8:	48022216 	blt	r9,zero,80c884 <___vfiprintf_internal_r+0x1014>
  80bffc:	00bfdfc4 	movi	r2,-129
  80c000:	a0a8703a 	and	r20,r20,r2
  80c004:	003f1506 	br	80bc5c <__alt_mem_onchip_mem+0xff78bc5c>
  80c008:	da802217 	ldw	r10,136(sp)
  80c00c:	04800044 	movi	r18,1
  80c010:	d8001d85 	stb	zero,118(sp)
  80c014:	50800017 	ldw	r2,0(r10)
  80c018:	52800104 	addi	r10,r10,4
  80c01c:	da802215 	stw	r10,136(sp)
  80c020:	d8801005 	stb	r2,64(sp)
  80c024:	9027883a 	mov	r19,r18
  80c028:	dd401004 	addi	r21,sp,64
  80c02c:	0013883a 	mov	r9,zero
  80c030:	003f1706 	br	80bc90 <__alt_mem_onchip_mem+0xff78bc90>
  80c034:	21003fcc 	andi	r4,r4,255
  80c038:	2003201e 	bne	r4,zero,80ccbc <___vfiprintf_internal_r+0x144c>
  80c03c:	a080080c 	andi	r2,r20,32
  80c040:	10004b26 	beq	r2,zero,80c170 <___vfiprintf_internal_r+0x900>
  80c044:	da802217 	ldw	r10,136(sp)
  80c048:	50800117 	ldw	r2,4(r10)
  80c04c:	54800017 	ldw	r18,0(r10)
  80c050:	52800204 	addi	r10,r10,8
  80c054:	da802215 	stw	r10,136(sp)
  80c058:	1027883a 	mov	r19,r2
  80c05c:	10022c16 	blt	r2,zero,80c910 <___vfiprintf_internal_r+0x10a0>
  80c060:	df001d83 	ldbu	fp,118(sp)
  80c064:	48007216 	blt	r9,zero,80c230 <___vfiprintf_internal_r+0x9c0>
  80c068:	00ffdfc4 	movi	r3,-129
  80c06c:	94c4b03a 	or	r2,r18,r19
  80c070:	a0e8703a 	and	r20,r20,r3
  80c074:	1000cc26 	beq	r2,zero,80c3a8 <___vfiprintf_internal_r+0xb38>
  80c078:	98021026 	beq	r19,zero,80c8bc <___vfiprintf_internal_r+0x104c>
  80c07c:	dc402415 	stw	r17,144(sp)
  80c080:	dc002515 	stw	r16,148(sp)
  80c084:	9823883a 	mov	r17,r19
  80c088:	9021883a 	mov	r16,r18
  80c08c:	dd401a04 	addi	r21,sp,104
  80c090:	4825883a 	mov	r18,r9
  80c094:	4027883a 	mov	r19,r8
  80c098:	8009883a 	mov	r4,r16
  80c09c:	880b883a 	mov	r5,r17
  80c0a0:	01800284 	movi	r6,10
  80c0a4:	000f883a 	mov	r7,zero
  80c0a8:	080d8d40 	call	80d8d4 <__umoddi3>
  80c0ac:	10800c04 	addi	r2,r2,48
  80c0b0:	ad7fffc4 	addi	r21,r21,-1
  80c0b4:	8009883a 	mov	r4,r16
  80c0b8:	880b883a 	mov	r5,r17
  80c0bc:	a8800005 	stb	r2,0(r21)
  80c0c0:	01800284 	movi	r6,10
  80c0c4:	000f883a 	mov	r7,zero
  80c0c8:	080d35c0 	call	80d35c <__udivdi3>
  80c0cc:	1021883a 	mov	r16,r2
  80c0d0:	10c4b03a 	or	r2,r2,r3
  80c0d4:	1823883a 	mov	r17,r3
  80c0d8:	103fef1e 	bne	r2,zero,80c098 <__alt_mem_onchip_mem+0xff78c098>
  80c0dc:	dc402417 	ldw	r17,144(sp)
  80c0e0:	dc002517 	ldw	r16,148(sp)
  80c0e4:	9013883a 	mov	r9,r18
  80c0e8:	9811883a 	mov	r8,r19
  80c0ec:	da801e17 	ldw	r10,120(sp)
  80c0f0:	5567c83a 	sub	r19,r10,r21
  80c0f4:	003ede06 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80c0f8:	38803fcc 	andi	r2,r7,255
  80c0fc:	1080201c 	xori	r2,r2,128
  80c100:	10bfe004 	addi	r2,r2,-128
  80c104:	1002371e 	bne	r2,zero,80c9e4 <___vfiprintf_internal_r+0x1174>
  80c108:	01000044 	movi	r4,1
  80c10c:	01c00804 	movi	r7,32
  80c110:	80c00007 	ldb	r3,0(r16)
  80c114:	003e3506 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80c118:	a5000054 	ori	r20,r20,1
  80c11c:	80c00007 	ldb	r3,0(r16)
  80c120:	003e3206 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80c124:	a5002014 	ori	r20,r20,128
  80c128:	80c00007 	ldb	r3,0(r16)
  80c12c:	003e2f06 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80c130:	8015883a 	mov	r10,r16
  80c134:	0023883a 	mov	r17,zero
  80c138:	18bff404 	addi	r2,r3,-48
  80c13c:	50c00007 	ldb	r3,0(r10)
  80c140:	8c4002a4 	muli	r17,r17,10
  80c144:	84000044 	addi	r16,r16,1
  80c148:	8015883a 	mov	r10,r16
  80c14c:	1463883a 	add	r17,r2,r17
  80c150:	18bff404 	addi	r2,r3,-48
  80c154:	30bff92e 	bgeu	r6,r2,80c13c <__alt_mem_onchip_mem+0xff78c13c>
  80c158:	003e2506 	br	80b9f0 <__alt_mem_onchip_mem+0xff78b9f0>
  80c15c:	21003fcc 	andi	r4,r4,255
  80c160:	2002d41e 	bne	r4,zero,80ccb4 <___vfiprintf_internal_r+0x1444>
  80c164:	a5000414 	ori	r20,r20,16
  80c168:	a080080c 	andi	r2,r20,32
  80c16c:	103fb51e 	bne	r2,zero,80c044 <__alt_mem_onchip_mem+0xff78c044>
  80c170:	a080040c 	andi	r2,r20,16
  80c174:	1001f826 	beq	r2,zero,80c958 <___vfiprintf_internal_r+0x10e8>
  80c178:	da802217 	ldw	r10,136(sp)
  80c17c:	54800017 	ldw	r18,0(r10)
  80c180:	52800104 	addi	r10,r10,4
  80c184:	da802215 	stw	r10,136(sp)
  80c188:	9027d7fa 	srai	r19,r18,31
  80c18c:	9805883a 	mov	r2,r19
  80c190:	003fb206 	br	80c05c <__alt_mem_onchip_mem+0xff78c05c>
  80c194:	21003fcc 	andi	r4,r4,255
  80c198:	2002c41e 	bne	r4,zero,80ccac <___vfiprintf_internal_r+0x143c>
  80c19c:	a5000414 	ori	r20,r20,16
  80c1a0:	a080080c 	andi	r2,r20,32
  80c1a4:	103f5f1e 	bne	r2,zero,80bf24 <__alt_mem_onchip_mem+0xff78bf24>
  80c1a8:	a080040c 	andi	r2,r20,16
  80c1ac:	10020f26 	beq	r2,zero,80c9ec <___vfiprintf_internal_r+0x117c>
  80c1b0:	da802217 	ldw	r10,136(sp)
  80c1b4:	d8001d85 	stb	zero,118(sp)
  80c1b8:	0027883a 	mov	r19,zero
  80c1bc:	50800104 	addi	r2,r10,4
  80c1c0:	54800017 	ldw	r18,0(r10)
  80c1c4:	48021116 	blt	r9,zero,80ca0c <___vfiprintf_internal_r+0x119c>
  80c1c8:	00ffdfc4 	movi	r3,-129
  80c1cc:	d8802215 	stw	r2,136(sp)
  80c1d0:	a0e8703a 	and	r20,r20,r3
  80c1d4:	903f5e1e 	bne	r18,zero,80bf50 <__alt_mem_onchip_mem+0xff78bf50>
  80c1d8:	0039883a 	mov	fp,zero
  80c1dc:	4802a626 	beq	r9,zero,80cc78 <___vfiprintf_internal_r+0x1408>
  80c1e0:	0025883a 	mov	r18,zero
  80c1e4:	0027883a 	mov	r19,zero
  80c1e8:	003f5a06 	br	80bf54 <__alt_mem_onchip_mem+0xff78bf54>
  80c1ec:	21003fcc 	andi	r4,r4,255
  80c1f0:	20029f1e 	bne	r4,zero,80cc70 <___vfiprintf_internal_r+0x1400>
  80c1f4:	a5000414 	ori	r20,r20,16
  80c1f8:	a080080c 	andi	r2,r20,32
  80c1fc:	10005e1e 	bne	r2,zero,80c378 <___vfiprintf_internal_r+0xb08>
  80c200:	a080040c 	andi	r2,r20,16
  80c204:	1001a21e 	bne	r2,zero,80c890 <___vfiprintf_internal_r+0x1020>
  80c208:	a080100c 	andi	r2,r20,64
  80c20c:	d8001d85 	stb	zero,118(sp)
  80c210:	da802217 	ldw	r10,136(sp)
  80c214:	1002231e 	bne	r2,zero,80caa4 <___vfiprintf_internal_r+0x1234>
  80c218:	50800104 	addi	r2,r10,4
  80c21c:	54800017 	ldw	r18,0(r10)
  80c220:	0027883a 	mov	r19,zero
  80c224:	4801a00e 	bge	r9,zero,80c8a8 <___vfiprintf_internal_r+0x1038>
  80c228:	d8802215 	stw	r2,136(sp)
  80c22c:	0039883a 	mov	fp,zero
  80c230:	94c4b03a 	or	r2,r18,r19
  80c234:	103f901e 	bne	r2,zero,80c078 <__alt_mem_onchip_mem+0xff78c078>
  80c238:	00800044 	movi	r2,1
  80c23c:	10803fcc 	andi	r2,r2,255
  80c240:	00c00044 	movi	r3,1
  80c244:	10c05926 	beq	r2,r3,80c3ac <___vfiprintf_internal_r+0xb3c>
  80c248:	00c00084 	movi	r3,2
  80c24c:	10ffe41e 	bne	r2,r3,80c1e0 <__alt_mem_onchip_mem+0xff78c1e0>
  80c250:	0025883a 	mov	r18,zero
  80c254:	0027883a 	mov	r19,zero
  80c258:	00013d06 	br	80c750 <___vfiprintf_internal_r+0xee0>
  80c25c:	21003fcc 	andi	r4,r4,255
  80c260:	2002811e 	bne	r4,zero,80cc68 <___vfiprintf_internal_r+0x13f8>
  80c264:	00802074 	movhi	r2,129
  80c268:	10926604 	addi	r2,r2,18840
  80c26c:	d8802615 	stw	r2,152(sp)
  80c270:	a080080c 	andi	r2,r20,32
  80c274:	103f561e 	bne	r2,zero,80bfd0 <__alt_mem_onchip_mem+0xff78bfd0>
  80c278:	a080040c 	andi	r2,r20,16
  80c27c:	1001d126 	beq	r2,zero,80c9c4 <___vfiprintf_internal_r+0x1154>
  80c280:	da802217 	ldw	r10,136(sp)
  80c284:	0027883a 	mov	r19,zero
  80c288:	54800017 	ldw	r18,0(r10)
  80c28c:	52800104 	addi	r10,r10,4
  80c290:	da802215 	stw	r10,136(sp)
  80c294:	003f5306 	br	80bfe4 <__alt_mem_onchip_mem+0xff78bfe4>
  80c298:	da802217 	ldw	r10,136(sp)
  80c29c:	d8001d85 	stb	zero,118(sp)
  80c2a0:	55400017 	ldw	r21,0(r10)
  80c2a4:	50c00104 	addi	r3,r10,4
  80c2a8:	a8024226 	beq	r21,zero,80cbb4 <___vfiprintf_internal_r+0x1344>
  80c2ac:	48021816 	blt	r9,zero,80cb10 <___vfiprintf_internal_r+0x12a0>
  80c2b0:	480d883a 	mov	r6,r9
  80c2b4:	000b883a 	mov	r5,zero
  80c2b8:	a809883a 	mov	r4,r21
  80c2bc:	d8c02a15 	stw	r3,168(sp)
  80c2c0:	da002b15 	stw	r8,172(sp)
  80c2c4:	da402c15 	stw	r9,176(sp)
  80c2c8:	0809cc40 	call	809cc4 <memchr>
  80c2cc:	d8c02a17 	ldw	r3,168(sp)
  80c2d0:	da002b17 	ldw	r8,172(sp)
  80c2d4:	da402c17 	ldw	r9,176(sp)
  80c2d8:	10024826 	beq	r2,zero,80cbfc <___vfiprintf_internal_r+0x138c>
  80c2dc:	1567c83a 	sub	r19,r2,r21
  80c2e0:	df001d83 	ldbu	fp,118(sp)
  80c2e4:	d8c02215 	stw	r3,136(sp)
  80c2e8:	0013883a 	mov	r9,zero
  80c2ec:	003e6006 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80c2f0:	21003fcc 	andi	r4,r4,255
  80c2f4:	203fc026 	beq	r4,zero,80c1f8 <__alt_mem_onchip_mem+0xff78c1f8>
  80c2f8:	d9c01d85 	stb	r7,118(sp)
  80c2fc:	003fbe06 	br	80c1f8 <__alt_mem_onchip_mem+0xff78c1f8>
  80c300:	da802217 	ldw	r10,136(sp)
  80c304:	54400017 	ldw	r17,0(r10)
  80c308:	50800104 	addi	r2,r10,4
  80c30c:	883e3b16 	blt	r17,zero,80bbfc <__alt_mem_onchip_mem+0xff78bbfc>
  80c310:	d8802215 	stw	r2,136(sp)
  80c314:	80c00007 	ldb	r3,0(r16)
  80c318:	003db406 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80c31c:	01000044 	movi	r4,1
  80c320:	01c00ac4 	movi	r7,43
  80c324:	80c00007 	ldb	r3,0(r16)
  80c328:	003db006 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80c32c:	80c00007 	ldb	r3,0(r16)
  80c330:	82800044 	addi	r10,r16,1
  80c334:	1b423c26 	beq	r3,r13,80cc28 <___vfiprintf_internal_r+0x13b8>
  80c338:	18bff404 	addi	r2,r3,-48
  80c33c:	0013883a 	mov	r9,zero
  80c340:	30822b36 	bltu	r6,r2,80cbf0 <___vfiprintf_internal_r+0x1380>
  80c344:	50c00007 	ldb	r3,0(r10)
  80c348:	4a4002a4 	muli	r9,r9,10
  80c34c:	54000044 	addi	r16,r10,1
  80c350:	8015883a 	mov	r10,r16
  80c354:	4893883a 	add	r9,r9,r2
  80c358:	18bff404 	addi	r2,r3,-48
  80c35c:	30bff92e 	bgeu	r6,r2,80c344 <__alt_mem_onchip_mem+0xff78c344>
  80c360:	483da30e 	bge	r9,zero,80b9f0 <__alt_mem_onchip_mem+0xff78b9f0>
  80c364:	027fffc4 	movi	r9,-1
  80c368:	003da106 	br	80b9f0 <__alt_mem_onchip_mem+0xff78b9f0>
  80c36c:	a5001014 	ori	r20,r20,64
  80c370:	80c00007 	ldb	r3,0(r16)
  80c374:	003d9d06 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80c378:	da802217 	ldw	r10,136(sp)
  80c37c:	d8001d85 	stb	zero,118(sp)
  80c380:	50c00204 	addi	r3,r10,8
  80c384:	54800017 	ldw	r18,0(r10)
  80c388:	54c00117 	ldw	r19,4(r10)
  80c38c:	4801ca16 	blt	r9,zero,80cab8 <___vfiprintf_internal_r+0x1248>
  80c390:	013fdfc4 	movi	r4,-129
  80c394:	94c4b03a 	or	r2,r18,r19
  80c398:	d8c02215 	stw	r3,136(sp)
  80c39c:	a128703a 	and	r20,r20,r4
  80c3a0:	0039883a 	mov	fp,zero
  80c3a4:	103f341e 	bne	r2,zero,80c078 <__alt_mem_onchip_mem+0xff78c078>
  80c3a8:	483e2e26 	beq	r9,zero,80bc64 <__alt_mem_onchip_mem+0xff78bc64>
  80c3ac:	0025883a 	mov	r18,zero
  80c3b0:	94800c04 	addi	r18,r18,48
  80c3b4:	dc8019c5 	stb	r18,103(sp)
  80c3b8:	dcc02717 	ldw	r19,156(sp)
  80c3bc:	dd4019c4 	addi	r21,sp,103
  80c3c0:	003e2b06 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80c3c4:	21003fcc 	andi	r4,r4,255
  80c3c8:	2002361e 	bne	r4,zero,80cca4 <___vfiprintf_internal_r+0x1434>
  80c3cc:	1801c126 	beq	r3,zero,80cad4 <___vfiprintf_internal_r+0x1264>
  80c3d0:	04800044 	movi	r18,1
  80c3d4:	d8c01005 	stb	r3,64(sp)
  80c3d8:	d8001d85 	stb	zero,118(sp)
  80c3dc:	9027883a 	mov	r19,r18
  80c3e0:	dd401004 	addi	r21,sp,64
  80c3e4:	003f1106 	br	80c02c <__alt_mem_onchip_mem+0xff78c02c>
  80c3e8:	d9402117 	ldw	r5,132(sp)
  80c3ec:	d9002017 	ldw	r4,128(sp)
  80c3f0:	d9801a04 	addi	r6,sp,104
  80c3f4:	d9c02b15 	stw	r7,172(sp)
  80c3f8:	dbc02a15 	stw	r15,168(sp)
  80c3fc:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c400:	d9c02b17 	ldw	r7,172(sp)
  80c404:	dbc02a17 	ldw	r15,168(sp)
  80c408:	10006d1e 	bne	r2,zero,80c5c0 <___vfiprintf_internal_r+0xd50>
  80c40c:	d9801b17 	ldw	r6,108(sp)
  80c410:	d8801c17 	ldw	r2,112(sp)
  80c414:	d811883a 	mov	r8,sp
  80c418:	31400044 	addi	r5,r6,1
  80c41c:	003e3306 	br	80bcec <__alt_mem_onchip_mem+0xff78bcec>
  80c420:	d9401b17 	ldw	r5,108(sp)
  80c424:	d8801c17 	ldw	r2,112(sp)
  80c428:	29000044 	addi	r4,r5,1
  80c42c:	d8c01d87 	ldb	r3,118(sp)
  80c430:	183e4d26 	beq	r3,zero,80bd68 <__alt_mem_onchip_mem+0xff78bd68>
  80c434:	00c00044 	movi	r3,1
  80c438:	d9401d84 	addi	r5,sp,118
  80c43c:	10c5883a 	add	r2,r2,r3
  80c440:	41400015 	stw	r5,0(r8)
  80c444:	40c00115 	stw	r3,4(r8)
  80c448:	d8801c15 	stw	r2,112(sp)
  80c44c:	d9001b15 	stw	r4,108(sp)
  80c450:	014001c4 	movi	r5,7
  80c454:	2900a90e 	bge	r5,r4,80c6fc <___vfiprintf_internal_r+0xe8c>
  80c458:	1000da1e 	bne	r2,zero,80c7c4 <___vfiprintf_internal_r+0xf54>
  80c45c:	7000ab1e 	bne	r14,zero,80c70c <___vfiprintf_internal_r+0xe9c>
  80c460:	000b883a 	mov	r5,zero
  80c464:	1809883a 	mov	r4,r3
  80c468:	d811883a 	mov	r8,sp
  80c46c:	00c02004 	movi	r3,128
  80c470:	e0fe4d26 	beq	fp,r3,80bda8 <__alt_mem_onchip_mem+0xff78bda8>
  80c474:	4cf9c83a 	sub	fp,r9,r19
  80c478:	073e7b0e 	bge	zero,fp,80be68 <__alt_mem_onchip_mem+0xff78be68>
  80c47c:	01c00404 	movi	r7,16
  80c480:	3f01900e 	bge	r7,fp,80cac4 <___vfiprintf_internal_r+0x1254>
  80c484:	00c02074 	movhi	r3,129
  80c488:	18d2cb04 	addi	r3,r3,19244
  80c48c:	d8c02415 	stw	r3,144(sp)
  80c490:	034001c4 	movi	r13,7
  80c494:	00000506 	br	80c4ac <___vfiprintf_internal_r+0xc3c>
  80c498:	29000084 	addi	r4,r5,2
  80c49c:	42000204 	addi	r8,r8,8
  80c4a0:	180b883a 	mov	r5,r3
  80c4a4:	e73ffc04 	addi	fp,fp,-16
  80c4a8:	3f000d0e 	bge	r7,fp,80c4e0 <___vfiprintf_internal_r+0xc70>
  80c4ac:	10800404 	addi	r2,r2,16
  80c4b0:	28c00044 	addi	r3,r5,1
  80c4b4:	45c00015 	stw	r23,0(r8)
  80c4b8:	41c00115 	stw	r7,4(r8)
  80c4bc:	d8801c15 	stw	r2,112(sp)
  80c4c0:	d8c01b15 	stw	r3,108(sp)
  80c4c4:	68fff40e 	bge	r13,r3,80c498 <__alt_mem_onchip_mem+0xff78c498>
  80c4c8:	1000101e 	bne	r2,zero,80c50c <___vfiprintf_internal_r+0xc9c>
  80c4cc:	e73ffc04 	addi	fp,fp,-16
  80c4d0:	01000044 	movi	r4,1
  80c4d4:	000b883a 	mov	r5,zero
  80c4d8:	d811883a 	mov	r8,sp
  80c4dc:	3f3ff316 	blt	r7,fp,80c4ac <__alt_mem_onchip_mem+0xff78c4ac>
  80c4e0:	da802417 	ldw	r10,144(sp)
  80c4e4:	1705883a 	add	r2,r2,fp
  80c4e8:	47000115 	stw	fp,4(r8)
  80c4ec:	42800015 	stw	r10,0(r8)
  80c4f0:	d8801c15 	stw	r2,112(sp)
  80c4f4:	d9001b15 	stw	r4,108(sp)
  80c4f8:	00c001c4 	movi	r3,7
  80c4fc:	19003616 	blt	r3,r4,80c5d8 <___vfiprintf_internal_r+0xd68>
  80c500:	42000204 	addi	r8,r8,8
  80c504:	21000044 	addi	r4,r4,1
  80c508:	003e5706 	br	80be68 <__alt_mem_onchip_mem+0xff78be68>
  80c50c:	d9402117 	ldw	r5,132(sp)
  80c510:	d9002017 	ldw	r4,128(sp)
  80c514:	d9801a04 	addi	r6,sp,104
  80c518:	d9c02b15 	stw	r7,172(sp)
  80c51c:	db402a15 	stw	r13,168(sp)
  80c520:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c524:	d9c02b17 	ldw	r7,172(sp)
  80c528:	db402a17 	ldw	r13,168(sp)
  80c52c:	1000241e 	bne	r2,zero,80c5c0 <___vfiprintf_internal_r+0xd50>
  80c530:	d9401b17 	ldw	r5,108(sp)
  80c534:	d8801c17 	ldw	r2,112(sp)
  80c538:	d811883a 	mov	r8,sp
  80c53c:	29000044 	addi	r4,r5,1
  80c540:	003fd806 	br	80c4a4 <__alt_mem_onchip_mem+0xff78c4a4>
  80c544:	d9401b17 	ldw	r5,108(sp)
  80c548:	00c02074 	movhi	r3,129
  80c54c:	18d2cf04 	addi	r3,r3,19260
  80c550:	d8c02415 	stw	r3,144(sp)
  80c554:	29400044 	addi	r5,r5,1
  80c558:	d8c02417 	ldw	r3,144(sp)
  80c55c:	14c5883a 	add	r2,r2,r19
  80c560:	44c00115 	stw	r19,4(r8)
  80c564:	40c00015 	stw	r3,0(r8)
  80c568:	d8801c15 	stw	r2,112(sp)
  80c56c:	d9401b15 	stw	r5,108(sp)
  80c570:	00c001c4 	movi	r3,7
  80c574:	1940070e 	bge	r3,r5,80c594 <___vfiprintf_internal_r+0xd24>
  80c578:	103e4826 	beq	r2,zero,80be9c <__alt_mem_onchip_mem+0xff78be9c>
  80c57c:	d9402117 	ldw	r5,132(sp)
  80c580:	d9002017 	ldw	r4,128(sp)
  80c584:	d9801a04 	addi	r6,sp,104
  80c588:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c58c:	10000c1e 	bne	r2,zero,80c5c0 <___vfiprintf_internal_r+0xd50>
  80c590:	d8801c17 	ldw	r2,112(sp)
  80c594:	8c80010e 	bge	r17,r18,80c59c <___vfiprintf_internal_r+0xd2c>
  80c598:	9023883a 	mov	r17,r18
  80c59c:	da802317 	ldw	r10,140(sp)
  80c5a0:	5455883a 	add	r10,r10,r17
  80c5a4:	da802315 	stw	r10,140(sp)
  80c5a8:	103e4126 	beq	r2,zero,80beb0 <__alt_mem_onchip_mem+0xff78beb0>
  80c5ac:	d9402117 	ldw	r5,132(sp)
  80c5b0:	d9002017 	ldw	r4,128(sp)
  80c5b4:	d9801a04 	addi	r6,sp,104
  80c5b8:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c5bc:	103e3c26 	beq	r2,zero,80beb0 <__alt_mem_onchip_mem+0xff78beb0>
  80c5c0:	dd002117 	ldw	r20,132(sp)
  80c5c4:	a080030b 	ldhu	r2,12(r20)
  80c5c8:	1080100c 	andi	r2,r2,64
  80c5cc:	1001231e 	bne	r2,zero,80ca5c <___vfiprintf_internal_r+0x11ec>
  80c5d0:	d8802317 	ldw	r2,140(sp)
  80c5d4:	003d7b06 	br	80bbc4 <__alt_mem_onchip_mem+0xff78bbc4>
  80c5d8:	1000991e 	bne	r2,zero,80c840 <___vfiprintf_internal_r+0xfd0>
  80c5dc:	00c00044 	movi	r3,1
  80c5e0:	9805883a 	mov	r2,r19
  80c5e4:	dd400015 	stw	r21,0(sp)
  80c5e8:	dcc00115 	stw	r19,4(sp)
  80c5ec:	dcc01c15 	stw	r19,112(sp)
  80c5f0:	d8c01b15 	stw	r3,108(sp)
  80c5f4:	d811883a 	mov	r8,sp
  80c5f8:	42000204 	addi	r8,r8,8
  80c5fc:	a2c0010c 	andi	r11,r20,4
  80c600:	583fe426 	beq	r11,zero,80c594 <__alt_mem_onchip_mem+0xff78c594>
  80c604:	8ca7c83a 	sub	r19,r17,r18
  80c608:	04ffe20e 	bge	zero,r19,80c594 <__alt_mem_onchip_mem+0xff78c594>
  80c60c:	01c00404 	movi	r7,16
  80c610:	3cffcc0e 	bge	r7,r19,80c544 <__alt_mem_onchip_mem+0xff78c544>
  80c614:	02802074 	movhi	r10,129
  80c618:	5292cf04 	addi	r10,r10,19260
  80c61c:	d9001b17 	ldw	r4,108(sp)
  80c620:	da802415 	stw	r10,144(sp)
  80c624:	382b883a 	mov	r21,r7
  80c628:	050001c4 	movi	r20,7
  80c62c:	df002017 	ldw	fp,128(sp)
  80c630:	00000506 	br	80c648 <___vfiprintf_internal_r+0xdd8>
  80c634:	21400084 	addi	r5,r4,2
  80c638:	42000204 	addi	r8,r8,8
  80c63c:	1809883a 	mov	r4,r3
  80c640:	9cfffc04 	addi	r19,r19,-16
  80c644:	acffc40e 	bge	r21,r19,80c558 <__alt_mem_onchip_mem+0xff78c558>
  80c648:	10800404 	addi	r2,r2,16
  80c64c:	20c00044 	addi	r3,r4,1
  80c650:	45800015 	stw	r22,0(r8)
  80c654:	45400115 	stw	r21,4(r8)
  80c658:	d8801c15 	stw	r2,112(sp)
  80c65c:	d8c01b15 	stw	r3,108(sp)
  80c660:	a0fff40e 	bge	r20,r3,80c634 <__alt_mem_onchip_mem+0xff78c634>
  80c664:	1000041e 	bne	r2,zero,80c678 <___vfiprintf_internal_r+0xe08>
  80c668:	01400044 	movi	r5,1
  80c66c:	0009883a 	mov	r4,zero
  80c670:	d811883a 	mov	r8,sp
  80c674:	003ff206 	br	80c640 <__alt_mem_onchip_mem+0xff78c640>
  80c678:	d9402117 	ldw	r5,132(sp)
  80c67c:	d9801a04 	addi	r6,sp,104
  80c680:	e009883a 	mov	r4,fp
  80c684:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c688:	103fcd1e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80c68c:	d9001b17 	ldw	r4,108(sp)
  80c690:	d8801c17 	ldw	r2,112(sp)
  80c694:	d811883a 	mov	r8,sp
  80c698:	21400044 	addi	r5,r4,1
  80c69c:	003fe806 	br	80c640 <__alt_mem_onchip_mem+0xff78c640>
  80c6a0:	d9402117 	ldw	r5,132(sp)
  80c6a4:	d9002017 	ldw	r4,128(sp)
  80c6a8:	d9801a04 	addi	r6,sp,104
  80c6ac:	d9c02b15 	stw	r7,172(sp)
  80c6b0:	db402a15 	stw	r13,168(sp)
  80c6b4:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c6b8:	d9c02b17 	ldw	r7,172(sp)
  80c6bc:	db402a17 	ldw	r13,168(sp)
  80c6c0:	103fbf1e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80c6c4:	d9401b17 	ldw	r5,108(sp)
  80c6c8:	d8801c17 	ldw	r2,112(sp)
  80c6cc:	d811883a 	mov	r8,sp
  80c6d0:	29800044 	addi	r6,r5,1
  80c6d4:	003dc406 	br	80bde8 <__alt_mem_onchip_mem+0xff78bde8>
  80c6d8:	1000d21e 	bne	r2,zero,80ca24 <___vfiprintf_internal_r+0x11b4>
  80c6dc:	d8c01d87 	ldb	r3,118(sp)
  80c6e0:	18009526 	beq	r3,zero,80c938 <___vfiprintf_internal_r+0x10c8>
  80c6e4:	00800044 	movi	r2,1
  80c6e8:	d8c01d84 	addi	r3,sp,118
  80c6ec:	1009883a 	mov	r4,r2
  80c6f0:	d8c00015 	stw	r3,0(sp)
  80c6f4:	d8800115 	stw	r2,4(sp)
  80c6f8:	d811883a 	mov	r8,sp
  80c6fc:	200b883a 	mov	r5,r4
  80c700:	42000204 	addi	r8,r8,8
  80c704:	21000044 	addi	r4,r4,1
  80c708:	003d9706 	br	80bd68 <__alt_mem_onchip_mem+0xff78bd68>
  80c70c:	d9001d04 	addi	r4,sp,116
  80c710:	00800084 	movi	r2,2
  80c714:	d9000015 	stw	r4,0(sp)
  80c718:	d8800115 	stw	r2,4(sp)
  80c71c:	1809883a 	mov	r4,r3
  80c720:	d811883a 	mov	r8,sp
  80c724:	200b883a 	mov	r5,r4
  80c728:	42000204 	addi	r8,r8,8
  80c72c:	21000044 	addi	r4,r4,1
  80c730:	003f4e06 	br	80c46c <__alt_mem_onchip_mem+0xff78c46c>
  80c734:	d8001d85 	stb	zero,118(sp)
  80c738:	48005016 	blt	r9,zero,80c87c <___vfiprintf_internal_r+0x100c>
  80c73c:	00ffdfc4 	movi	r3,-129
  80c740:	94c4b03a 	or	r2,r18,r19
  80c744:	a0e8703a 	and	r20,r20,r3
  80c748:	103d4426 	beq	r2,zero,80bc5c <__alt_mem_onchip_mem+0xff78bc5c>
  80c74c:	0039883a 	mov	fp,zero
  80c750:	d9002617 	ldw	r4,152(sp)
  80c754:	dd401a04 	addi	r21,sp,104
  80c758:	908003cc 	andi	r2,r18,15
  80c75c:	9806973a 	slli	r3,r19,28
  80c760:	2085883a 	add	r2,r4,r2
  80c764:	9024d13a 	srli	r18,r18,4
  80c768:	10800003 	ldbu	r2,0(r2)
  80c76c:	9826d13a 	srli	r19,r19,4
  80c770:	ad7fffc4 	addi	r21,r21,-1
  80c774:	1ca4b03a 	or	r18,r3,r18
  80c778:	a8800005 	stb	r2,0(r21)
  80c77c:	94c4b03a 	or	r2,r18,r19
  80c780:	103ff51e 	bne	r2,zero,80c758 <__alt_mem_onchip_mem+0xff78c758>
  80c784:	003e5906 	br	80c0ec <__alt_mem_onchip_mem+0xff78c0ec>
  80c788:	d9402117 	ldw	r5,132(sp)
  80c78c:	d9002017 	ldw	r4,128(sp)
  80c790:	d9801a04 	addi	r6,sp,104
  80c794:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c798:	103f891e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80c79c:	d8801c17 	ldw	r2,112(sp)
  80c7a0:	d811883a 	mov	r8,sp
  80c7a4:	003f9506 	br	80c5fc <__alt_mem_onchip_mem+0xff78c5fc>
  80c7a8:	d9402117 	ldw	r5,132(sp)
  80c7ac:	d9002017 	ldw	r4,128(sp)
  80c7b0:	d9801a04 	addi	r6,sp,104
  80c7b4:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c7b8:	103f811e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80c7bc:	d811883a 	mov	r8,sp
  80c7c0:	003ced06 	br	80bb78 <__alt_mem_onchip_mem+0xff78bb78>
  80c7c4:	d9402117 	ldw	r5,132(sp)
  80c7c8:	d9002017 	ldw	r4,128(sp)
  80c7cc:	d9801a04 	addi	r6,sp,104
  80c7d0:	da402c15 	stw	r9,176(sp)
  80c7d4:	db802a15 	stw	r14,168(sp)
  80c7d8:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c7dc:	da402c17 	ldw	r9,176(sp)
  80c7e0:	db802a17 	ldw	r14,168(sp)
  80c7e4:	103f761e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80c7e8:	d9401b17 	ldw	r5,108(sp)
  80c7ec:	d8801c17 	ldw	r2,112(sp)
  80c7f0:	d811883a 	mov	r8,sp
  80c7f4:	29000044 	addi	r4,r5,1
  80c7f8:	003d5b06 	br	80bd68 <__alt_mem_onchip_mem+0xff78bd68>
  80c7fc:	d9402117 	ldw	r5,132(sp)
  80c800:	d9002017 	ldw	r4,128(sp)
  80c804:	d9801a04 	addi	r6,sp,104
  80c808:	da402c15 	stw	r9,176(sp)
  80c80c:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c810:	da402c17 	ldw	r9,176(sp)
  80c814:	103f6a1e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80c818:	d9401b17 	ldw	r5,108(sp)
  80c81c:	d8801c17 	ldw	r2,112(sp)
  80c820:	d811883a 	mov	r8,sp
  80c824:	29000044 	addi	r4,r5,1
  80c828:	003f1006 	br	80c46c <__alt_mem_onchip_mem+0xff78c46c>
  80c82c:	1000c31e 	bne	r2,zero,80cb3c <___vfiprintf_internal_r+0x12cc>
  80c830:	01000044 	movi	r4,1
  80c834:	000b883a 	mov	r5,zero
  80c838:	d811883a 	mov	r8,sp
  80c83c:	003f0d06 	br	80c474 <__alt_mem_onchip_mem+0xff78c474>
  80c840:	d9402117 	ldw	r5,132(sp)
  80c844:	d9002017 	ldw	r4,128(sp)
  80c848:	d9801a04 	addi	r6,sp,104
  80c84c:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80c850:	103f5b1e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80c854:	d9001b17 	ldw	r4,108(sp)
  80c858:	d8801c17 	ldw	r2,112(sp)
  80c85c:	d811883a 	mov	r8,sp
  80c860:	21000044 	addi	r4,r4,1
  80c864:	003d8006 	br	80be68 <__alt_mem_onchip_mem+0xff78be68>
  80c868:	01002074 	movhi	r4,129
  80c86c:	21126b04 	addi	r4,r4,18860
  80c870:	d9002615 	stw	r4,152(sp)
  80c874:	d8c02215 	stw	r3,136(sp)
  80c878:	1029883a 	mov	r20,r2
  80c87c:	94c4b03a 	or	r2,r18,r19
  80c880:	103fb21e 	bne	r2,zero,80c74c <__alt_mem_onchip_mem+0xff78c74c>
  80c884:	0039883a 	mov	fp,zero
  80c888:	00800084 	movi	r2,2
  80c88c:	003e6b06 	br	80c23c <__alt_mem_onchip_mem+0xff78c23c>
  80c890:	da802217 	ldw	r10,136(sp)
  80c894:	d8001d85 	stb	zero,118(sp)
  80c898:	0027883a 	mov	r19,zero
  80c89c:	50800104 	addi	r2,r10,4
  80c8a0:	54800017 	ldw	r18,0(r10)
  80c8a4:	483e6016 	blt	r9,zero,80c228 <__alt_mem_onchip_mem+0xff78c228>
  80c8a8:	00ffdfc4 	movi	r3,-129
  80c8ac:	d8802215 	stw	r2,136(sp)
  80c8b0:	a0e8703a 	and	r20,r20,r3
  80c8b4:	0039883a 	mov	fp,zero
  80c8b8:	903ebb26 	beq	r18,zero,80c3a8 <__alt_mem_onchip_mem+0xff78c3a8>
  80c8bc:	00800244 	movi	r2,9
  80c8c0:	14bdee36 	bltu	r2,r18,80c07c <__alt_mem_onchip_mem+0xff78c07c>
  80c8c4:	003eba06 	br	80c3b0 <__alt_mem_onchip_mem+0xff78c3b0>
  80c8c8:	00800c04 	movi	r2,48
  80c8cc:	d8c01d45 	stb	r3,117(sp)
  80c8d0:	d8801d05 	stb	r2,116(sp)
  80c8d4:	d8001d85 	stb	zero,118(sp)
  80c8d8:	a0c00094 	ori	r3,r20,2
  80c8dc:	4800a916 	blt	r9,zero,80cb84 <___vfiprintf_internal_r+0x1314>
  80c8e0:	00bfdfc4 	movi	r2,-129
  80c8e4:	a096703a 	and	r11,r20,r2
  80c8e8:	5d000094 	ori	r20,r11,2
  80c8ec:	0039883a 	mov	fp,zero
  80c8f0:	003f9706 	br	80c750 <__alt_mem_onchip_mem+0xff78c750>
  80c8f4:	8025883a 	mov	r18,r16
  80c8f8:	003c2e06 	br	80b9b4 <__alt_mem_onchip_mem+0xff78b9b4>
  80c8fc:	00802074 	movhi	r2,129
  80c900:	10926b04 	addi	r2,r2,18860
  80c904:	0039883a 	mov	fp,zero
  80c908:	d8802615 	stw	r2,152(sp)
  80c90c:	003f9006 	br	80c750 <__alt_mem_onchip_mem+0xff78c750>
  80c910:	04a5c83a 	sub	r18,zero,r18
  80c914:	07000b44 	movi	fp,45
  80c918:	9004c03a 	cmpne	r2,r18,zero
  80c91c:	04e7c83a 	sub	r19,zero,r19
  80c920:	df001d85 	stb	fp,118(sp)
  80c924:	98a7c83a 	sub	r19,r19,r2
  80c928:	48009f16 	blt	r9,zero,80cba8 <___vfiprintf_internal_r+0x1338>
  80c92c:	00bfdfc4 	movi	r2,-129
  80c930:	a0a8703a 	and	r20,r20,r2
  80c934:	003dd006 	br	80c078 <__alt_mem_onchip_mem+0xff78c078>
  80c938:	70004c26 	beq	r14,zero,80ca6c <___vfiprintf_internal_r+0x11fc>
  80c93c:	00800084 	movi	r2,2
  80c940:	d8c01d04 	addi	r3,sp,116
  80c944:	d8c00015 	stw	r3,0(sp)
  80c948:	d8800115 	stw	r2,4(sp)
  80c94c:	01000044 	movi	r4,1
  80c950:	d811883a 	mov	r8,sp
  80c954:	003f7306 	br	80c724 <__alt_mem_onchip_mem+0xff78c724>
  80c958:	a080100c 	andi	r2,r20,64
  80c95c:	da802217 	ldw	r10,136(sp)
  80c960:	103e0626 	beq	r2,zero,80c17c <__alt_mem_onchip_mem+0xff78c17c>
  80c964:	5480000f 	ldh	r18,0(r10)
  80c968:	52800104 	addi	r10,r10,4
  80c96c:	da802215 	stw	r10,136(sp)
  80c970:	9027d7fa 	srai	r19,r18,31
  80c974:	9805883a 	mov	r2,r19
  80c978:	003db806 	br	80c05c <__alt_mem_onchip_mem+0xff78c05c>
  80c97c:	a080040c 	andi	r2,r20,16
  80c980:	1000091e 	bne	r2,zero,80c9a8 <___vfiprintf_internal_r+0x1138>
  80c984:	a2c0100c 	andi	r11,r20,64
  80c988:	58000726 	beq	r11,zero,80c9a8 <___vfiprintf_internal_r+0x1138>
  80c98c:	da802217 	ldw	r10,136(sp)
  80c990:	50800017 	ldw	r2,0(r10)
  80c994:	52800104 	addi	r10,r10,4
  80c998:	da802215 	stw	r10,136(sp)
  80c99c:	da802317 	ldw	r10,140(sp)
  80c9a0:	1280000d 	sth	r10,0(r2)
  80c9a4:	003be706 	br	80b944 <__alt_mem_onchip_mem+0xff78b944>
  80c9a8:	da802217 	ldw	r10,136(sp)
  80c9ac:	50800017 	ldw	r2,0(r10)
  80c9b0:	52800104 	addi	r10,r10,4
  80c9b4:	da802215 	stw	r10,136(sp)
  80c9b8:	da802317 	ldw	r10,140(sp)
  80c9bc:	12800015 	stw	r10,0(r2)
  80c9c0:	003be006 	br	80b944 <__alt_mem_onchip_mem+0xff78b944>
  80c9c4:	a080100c 	andi	r2,r20,64
  80c9c8:	da802217 	ldw	r10,136(sp)
  80c9cc:	10003026 	beq	r2,zero,80ca90 <___vfiprintf_internal_r+0x1220>
  80c9d0:	5480000b 	ldhu	r18,0(r10)
  80c9d4:	52800104 	addi	r10,r10,4
  80c9d8:	0027883a 	mov	r19,zero
  80c9dc:	da802215 	stw	r10,136(sp)
  80c9e0:	003d8006 	br	80bfe4 <__alt_mem_onchip_mem+0xff78bfe4>
  80c9e4:	80c00007 	ldb	r3,0(r16)
  80c9e8:	003c0006 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80c9ec:	a080100c 	andi	r2,r20,64
  80c9f0:	d8001d85 	stb	zero,118(sp)
  80c9f4:	da802217 	ldw	r10,136(sp)
  80c9f8:	1000201e 	bne	r2,zero,80ca7c <___vfiprintf_internal_r+0x120c>
  80c9fc:	50800104 	addi	r2,r10,4
  80ca00:	54800017 	ldw	r18,0(r10)
  80ca04:	0027883a 	mov	r19,zero
  80ca08:	483def0e 	bge	r9,zero,80c1c8 <__alt_mem_onchip_mem+0xff78c1c8>
  80ca0c:	94c6b03a 	or	r3,r18,r19
  80ca10:	d8802215 	stw	r2,136(sp)
  80ca14:	183d4e1e 	bne	r3,zero,80bf50 <__alt_mem_onchip_mem+0xff78bf50>
  80ca18:	0039883a 	mov	fp,zero
  80ca1c:	0005883a 	mov	r2,zero
  80ca20:	003e0606 	br	80c23c <__alt_mem_onchip_mem+0xff78c23c>
  80ca24:	d9402117 	ldw	r5,132(sp)
  80ca28:	d9002017 	ldw	r4,128(sp)
  80ca2c:	d9801a04 	addi	r6,sp,104
  80ca30:	da402c15 	stw	r9,176(sp)
  80ca34:	db802a15 	stw	r14,168(sp)
  80ca38:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80ca3c:	da402c17 	ldw	r9,176(sp)
  80ca40:	db802a17 	ldw	r14,168(sp)
  80ca44:	103ede1e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80ca48:	d9401b17 	ldw	r5,108(sp)
  80ca4c:	d8801c17 	ldw	r2,112(sp)
  80ca50:	d811883a 	mov	r8,sp
  80ca54:	29000044 	addi	r4,r5,1
  80ca58:	003e7406 	br	80c42c <__alt_mem_onchip_mem+0xff78c42c>
  80ca5c:	00bfffc4 	movi	r2,-1
  80ca60:	003c5806 	br	80bbc4 <__alt_mem_onchip_mem+0xff78bbc4>
  80ca64:	d811883a 	mov	r8,sp
  80ca68:	003ee806 	br	80c60c <__alt_mem_onchip_mem+0xff78c60c>
  80ca6c:	000b883a 	mov	r5,zero
  80ca70:	01000044 	movi	r4,1
  80ca74:	d811883a 	mov	r8,sp
  80ca78:	003e7c06 	br	80c46c <__alt_mem_onchip_mem+0xff78c46c>
  80ca7c:	50800104 	addi	r2,r10,4
  80ca80:	5480000b 	ldhu	r18,0(r10)
  80ca84:	0027883a 	mov	r19,zero
  80ca88:	483dcf0e 	bge	r9,zero,80c1c8 <__alt_mem_onchip_mem+0xff78c1c8>
  80ca8c:	003fdf06 	br	80ca0c <__alt_mem_onchip_mem+0xff78ca0c>
  80ca90:	54800017 	ldw	r18,0(r10)
  80ca94:	52800104 	addi	r10,r10,4
  80ca98:	0027883a 	mov	r19,zero
  80ca9c:	da802215 	stw	r10,136(sp)
  80caa0:	003d5006 	br	80bfe4 <__alt_mem_onchip_mem+0xff78bfe4>
  80caa4:	50800104 	addi	r2,r10,4
  80caa8:	5480000b 	ldhu	r18,0(r10)
  80caac:	0027883a 	mov	r19,zero
  80cab0:	483f7d0e 	bge	r9,zero,80c8a8 <__alt_mem_onchip_mem+0xff78c8a8>
  80cab4:	003ddc06 	br	80c228 <__alt_mem_onchip_mem+0xff78c228>
  80cab8:	d8c02215 	stw	r3,136(sp)
  80cabc:	0039883a 	mov	fp,zero
  80cac0:	003ddb06 	br	80c230 <__alt_mem_onchip_mem+0xff78c230>
  80cac4:	02802074 	movhi	r10,129
  80cac8:	5292cb04 	addi	r10,r10,19244
  80cacc:	da802415 	stw	r10,144(sp)
  80cad0:	003e8306 	br	80c4e0 <__alt_mem_onchip_mem+0xff78c4e0>
  80cad4:	d8801c17 	ldw	r2,112(sp)
  80cad8:	dd002117 	ldw	r20,132(sp)
  80cadc:	103eb926 	beq	r2,zero,80c5c4 <__alt_mem_onchip_mem+0xff78c5c4>
  80cae0:	d9002017 	ldw	r4,128(sp)
  80cae4:	d9801a04 	addi	r6,sp,104
  80cae8:	a00b883a 	mov	r5,r20
  80caec:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80caf0:	003eb406 	br	80c5c4 <__alt_mem_onchip_mem+0xff78c5c4>
  80caf4:	80c00043 	ldbu	r3,1(r16)
  80caf8:	a5000814 	ori	r20,r20,32
  80cafc:	84000044 	addi	r16,r16,1
  80cb00:	18c03fcc 	andi	r3,r3,255
  80cb04:	18c0201c 	xori	r3,r3,128
  80cb08:	18ffe004 	addi	r3,r3,-128
  80cb0c:	003bb706 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80cb10:	a809883a 	mov	r4,r21
  80cb14:	d8c02a15 	stw	r3,168(sp)
  80cb18:	da002b15 	stw	r8,172(sp)
  80cb1c:	0804a780 	call	804a78 <strlen>
  80cb20:	d8c02a17 	ldw	r3,168(sp)
  80cb24:	1027883a 	mov	r19,r2
  80cb28:	df001d83 	ldbu	fp,118(sp)
  80cb2c:	d8c02215 	stw	r3,136(sp)
  80cb30:	0013883a 	mov	r9,zero
  80cb34:	da002b17 	ldw	r8,172(sp)
  80cb38:	003c4d06 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80cb3c:	d9402117 	ldw	r5,132(sp)
  80cb40:	d9002017 	ldw	r4,128(sp)
  80cb44:	d9801a04 	addi	r6,sp,104
  80cb48:	da402c15 	stw	r9,176(sp)
  80cb4c:	080b75c0 	call	80b75c <__sprint_r.part.0>
  80cb50:	da402c17 	ldw	r9,176(sp)
  80cb54:	103e9a1e 	bne	r2,zero,80c5c0 <__alt_mem_onchip_mem+0xff78c5c0>
  80cb58:	d9401b17 	ldw	r5,108(sp)
  80cb5c:	d8801c17 	ldw	r2,112(sp)
  80cb60:	d811883a 	mov	r8,sp
  80cb64:	29000044 	addi	r4,r5,1
  80cb68:	003e4206 	br	80c474 <__alt_mem_onchip_mem+0xff78c474>
  80cb6c:	d9401b17 	ldw	r5,108(sp)
  80cb70:	01002074 	movhi	r4,129
  80cb74:	2112cf04 	addi	r4,r4,19260
  80cb78:	d9002415 	stw	r4,144(sp)
  80cb7c:	29400044 	addi	r5,r5,1
  80cb80:	003c6d06 	br	80bd38 <__alt_mem_onchip_mem+0xff78bd38>
  80cb84:	0039883a 	mov	fp,zero
  80cb88:	00800084 	movi	r2,2
  80cb8c:	10803fcc 	andi	r2,r2,255
  80cb90:	01000044 	movi	r4,1
  80cb94:	11001e26 	beq	r2,r4,80cc10 <___vfiprintf_internal_r+0x13a0>
  80cb98:	01000084 	movi	r4,2
  80cb9c:	11001e1e 	bne	r2,r4,80cc18 <___vfiprintf_internal_r+0x13a8>
  80cba0:	1829883a 	mov	r20,r3
  80cba4:	003eea06 	br	80c750 <__alt_mem_onchip_mem+0xff78c750>
  80cba8:	a007883a 	mov	r3,r20
  80cbac:	00800044 	movi	r2,1
  80cbb0:	003ff606 	br	80cb8c <__alt_mem_onchip_mem+0xff78cb8c>
  80cbb4:	00800184 	movi	r2,6
  80cbb8:	1240012e 	bgeu	r2,r9,80cbc0 <___vfiprintf_internal_r+0x1350>
  80cbbc:	1013883a 	mov	r9,r2
  80cbc0:	4827883a 	mov	r19,r9
  80cbc4:	4825883a 	mov	r18,r9
  80cbc8:	48001516 	blt	r9,zero,80cc20 <___vfiprintf_internal_r+0x13b0>
  80cbcc:	05402074 	movhi	r21,129
  80cbd0:	d8c02215 	stw	r3,136(sp)
  80cbd4:	ad527004 	addi	r21,r21,18880
  80cbd8:	003d1406 	br	80c02c <__alt_mem_onchip_mem+0xff78c02c>
  80cbdc:	02802074 	movhi	r10,129
  80cbe0:	5292cb04 	addi	r10,r10,19244
  80cbe4:	da802415 	stw	r10,144(sp)
  80cbe8:	200d883a 	mov	r6,r4
  80cbec:	003c9106 	br	80be34 <__alt_mem_onchip_mem+0xff78be34>
  80cbf0:	5021883a 	mov	r16,r10
  80cbf4:	0013883a 	mov	r9,zero
  80cbf8:	003b7d06 	br	80b9f0 <__alt_mem_onchip_mem+0xff78b9f0>
  80cbfc:	4827883a 	mov	r19,r9
  80cc00:	df001d83 	ldbu	fp,118(sp)
  80cc04:	d8c02215 	stw	r3,136(sp)
  80cc08:	0013883a 	mov	r9,zero
  80cc0c:	003c1806 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80cc10:	1829883a 	mov	r20,r3
  80cc14:	003d1806 	br	80c078 <__alt_mem_onchip_mem+0xff78c078>
  80cc18:	1829883a 	mov	r20,r3
  80cc1c:	003ccd06 	br	80bf54 <__alt_mem_onchip_mem+0xff78bf54>
  80cc20:	0025883a 	mov	r18,zero
  80cc24:	003fe906 	br	80cbcc <__alt_mem_onchip_mem+0xff78cbcc>
  80cc28:	d8802217 	ldw	r2,136(sp)
  80cc2c:	80c00043 	ldbu	r3,1(r16)
  80cc30:	5021883a 	mov	r16,r10
  80cc34:	12400017 	ldw	r9,0(r2)
  80cc38:	10800104 	addi	r2,r2,4
  80cc3c:	d8802215 	stw	r2,136(sp)
  80cc40:	483faf0e 	bge	r9,zero,80cb00 <__alt_mem_onchip_mem+0xff78cb00>
  80cc44:	18c03fcc 	andi	r3,r3,255
  80cc48:	18c0201c 	xori	r3,r3,128
  80cc4c:	027fffc4 	movi	r9,-1
  80cc50:	18ffe004 	addi	r3,r3,-128
  80cc54:	003b6506 	br	80b9ec <__alt_mem_onchip_mem+0xff78b9ec>
  80cc58:	d9c01d85 	stb	r7,118(sp)
  80cc5c:	003ca006 	br	80bee0 <__alt_mem_onchip_mem+0xff78bee0>
  80cc60:	d9c01d85 	stb	r7,118(sp)
  80cc64:	003cad06 	br	80bf1c <__alt_mem_onchip_mem+0xff78bf1c>
  80cc68:	d9c01d85 	stb	r7,118(sp)
  80cc6c:	003d7d06 	br	80c264 <__alt_mem_onchip_mem+0xff78c264>
  80cc70:	d9c01d85 	stb	r7,118(sp)
  80cc74:	003d5f06 	br	80c1f4 <__alt_mem_onchip_mem+0xff78c1f4>
  80cc78:	a080004c 	andi	r2,r20,1
  80cc7c:	0039883a 	mov	fp,zero
  80cc80:	10000526 	beq	r2,zero,80cc98 <___vfiprintf_internal_r+0x1428>
  80cc84:	00800c04 	movi	r2,48
  80cc88:	d88019c5 	stb	r2,103(sp)
  80cc8c:	dcc02717 	ldw	r19,156(sp)
  80cc90:	dd4019c4 	addi	r21,sp,103
  80cc94:	003bf606 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80cc98:	0027883a 	mov	r19,zero
  80cc9c:	dd401a04 	addi	r21,sp,104
  80cca0:	003bf306 	br	80bc70 <__alt_mem_onchip_mem+0xff78bc70>
  80cca4:	d9c01d85 	stb	r7,118(sp)
  80cca8:	003dc806 	br	80c3cc <__alt_mem_onchip_mem+0xff78c3cc>
  80ccac:	d9c01d85 	stb	r7,118(sp)
  80ccb0:	003d3a06 	br	80c19c <__alt_mem_onchip_mem+0xff78c19c>
  80ccb4:	d9c01d85 	stb	r7,118(sp)
  80ccb8:	003d2a06 	br	80c164 <__alt_mem_onchip_mem+0xff78c164>
  80ccbc:	d9c01d85 	stb	r7,118(sp)
  80ccc0:	003cde06 	br	80c03c <__alt_mem_onchip_mem+0xff78c03c>
  80ccc4:	d9c01d85 	stb	r7,118(sp)
  80ccc8:	003cbc06 	br	80bfbc <__alt_mem_onchip_mem+0xff78bfbc>

0080cccc <__vfiprintf_internal>:
  80cccc:	00802074 	movhi	r2,129
  80ccd0:	109aef04 	addi	r2,r2,27580
  80ccd4:	300f883a 	mov	r7,r6
  80ccd8:	280d883a 	mov	r6,r5
  80ccdc:	200b883a 	mov	r5,r4
  80cce0:	11000017 	ldw	r4,0(r2)
  80cce4:	080b8701 	jmpi	80b870 <___vfiprintf_internal_r>

0080cce8 <__sbprintf>:
  80cce8:	2880030b 	ldhu	r2,12(r5)
  80ccec:	2ac01917 	ldw	r11,100(r5)
  80ccf0:	2a80038b 	ldhu	r10,14(r5)
  80ccf4:	2a400717 	ldw	r9,28(r5)
  80ccf8:	2a000917 	ldw	r8,36(r5)
  80ccfc:	defee204 	addi	sp,sp,-1144
  80cd00:	00c10004 	movi	r3,1024
  80cd04:	dc011a15 	stw	r16,1128(sp)
  80cd08:	10bfff4c 	andi	r2,r2,65533
  80cd0c:	2821883a 	mov	r16,r5
  80cd10:	d8cb883a 	add	r5,sp,r3
  80cd14:	dc811c15 	stw	r18,1136(sp)
  80cd18:	dc411b15 	stw	r17,1132(sp)
  80cd1c:	dfc11d15 	stw	ra,1140(sp)
  80cd20:	2025883a 	mov	r18,r4
  80cd24:	d881030d 	sth	r2,1036(sp)
  80cd28:	dac11915 	stw	r11,1124(sp)
  80cd2c:	da81038d 	sth	r10,1038(sp)
  80cd30:	da410715 	stw	r9,1052(sp)
  80cd34:	da010915 	stw	r8,1060(sp)
  80cd38:	dec10015 	stw	sp,1024(sp)
  80cd3c:	dec10415 	stw	sp,1040(sp)
  80cd40:	d8c10215 	stw	r3,1032(sp)
  80cd44:	d8c10515 	stw	r3,1044(sp)
  80cd48:	d8010615 	stw	zero,1048(sp)
  80cd4c:	080b8700 	call	80b870 <___vfiprintf_internal_r>
  80cd50:	1023883a 	mov	r17,r2
  80cd54:	10000416 	blt	r2,zero,80cd68 <__sbprintf+0x80>
  80cd58:	d9410004 	addi	r5,sp,1024
  80cd5c:	9009883a 	mov	r4,r18
  80cd60:	0808be40 	call	808be4 <_fflush_r>
  80cd64:	10000d1e 	bne	r2,zero,80cd9c <__sbprintf+0xb4>
  80cd68:	d881030b 	ldhu	r2,1036(sp)
  80cd6c:	1080100c 	andi	r2,r2,64
  80cd70:	10000326 	beq	r2,zero,80cd80 <__sbprintf+0x98>
  80cd74:	8080030b 	ldhu	r2,12(r16)
  80cd78:	10801014 	ori	r2,r2,64
  80cd7c:	8080030d 	sth	r2,12(r16)
  80cd80:	8805883a 	mov	r2,r17
  80cd84:	dfc11d17 	ldw	ra,1140(sp)
  80cd88:	dc811c17 	ldw	r18,1136(sp)
  80cd8c:	dc411b17 	ldw	r17,1132(sp)
  80cd90:	dc011a17 	ldw	r16,1128(sp)
  80cd94:	dec11e04 	addi	sp,sp,1144
  80cd98:	f800283a 	ret
  80cd9c:	047fffc4 	movi	r17,-1
  80cda0:	003ff106 	br	80cd68 <__alt_mem_onchip_mem+0xff78cd68>

0080cda4 <_calloc_r>:
  80cda4:	298b383a 	mul	r5,r5,r6
  80cda8:	defffe04 	addi	sp,sp,-8
  80cdac:	dfc00115 	stw	ra,4(sp)
  80cdb0:	dc000015 	stw	r16,0(sp)
  80cdb4:	0803abc0 	call	803abc <_malloc_r>
  80cdb8:	10002926 	beq	r2,zero,80ce60 <_calloc_r+0xbc>
  80cdbc:	11bfff17 	ldw	r6,-4(r2)
  80cdc0:	1021883a 	mov	r16,r2
  80cdc4:	00bfff04 	movi	r2,-4
  80cdc8:	308c703a 	and	r6,r6,r2
  80cdcc:	00c00904 	movi	r3,36
  80cdd0:	308d883a 	add	r6,r6,r2
  80cdd4:	19801636 	bltu	r3,r6,80ce30 <_calloc_r+0x8c>
  80cdd8:	008004c4 	movi	r2,19
  80cddc:	11800b2e 	bgeu	r2,r6,80ce0c <_calloc_r+0x68>
  80cde0:	80000015 	stw	zero,0(r16)
  80cde4:	80000115 	stw	zero,4(r16)
  80cde8:	008006c4 	movi	r2,27
  80cdec:	11801a2e 	bgeu	r2,r6,80ce58 <_calloc_r+0xb4>
  80cdf0:	80000215 	stw	zero,8(r16)
  80cdf4:	80000315 	stw	zero,12(r16)
  80cdf8:	30c0151e 	bne	r6,r3,80ce50 <_calloc_r+0xac>
  80cdfc:	80000415 	stw	zero,16(r16)
  80ce00:	80800604 	addi	r2,r16,24
  80ce04:	80000515 	stw	zero,20(r16)
  80ce08:	00000106 	br	80ce10 <_calloc_r+0x6c>
  80ce0c:	8005883a 	mov	r2,r16
  80ce10:	10000015 	stw	zero,0(r2)
  80ce14:	10000115 	stw	zero,4(r2)
  80ce18:	10000215 	stw	zero,8(r2)
  80ce1c:	8005883a 	mov	r2,r16
  80ce20:	dfc00117 	ldw	ra,4(sp)
  80ce24:	dc000017 	ldw	r16,0(sp)
  80ce28:	dec00204 	addi	sp,sp,8
  80ce2c:	f800283a 	ret
  80ce30:	000b883a 	mov	r5,zero
  80ce34:	8009883a 	mov	r4,r16
  80ce38:	08042c80 	call	8042c8 <memset>
  80ce3c:	8005883a 	mov	r2,r16
  80ce40:	dfc00117 	ldw	ra,4(sp)
  80ce44:	dc000017 	ldw	r16,0(sp)
  80ce48:	dec00204 	addi	sp,sp,8
  80ce4c:	f800283a 	ret
  80ce50:	80800404 	addi	r2,r16,16
  80ce54:	003fee06 	br	80ce10 <__alt_mem_onchip_mem+0xff78ce10>
  80ce58:	80800204 	addi	r2,r16,8
  80ce5c:	003fec06 	br	80ce10 <__alt_mem_onchip_mem+0xff78ce10>
  80ce60:	0005883a 	mov	r2,zero
  80ce64:	003fee06 	br	80ce20 <__alt_mem_onchip_mem+0xff78ce20>

0080ce68 <_fclose_r>:
  80ce68:	28003926 	beq	r5,zero,80cf50 <_fclose_r+0xe8>
  80ce6c:	defffc04 	addi	sp,sp,-16
  80ce70:	dc400115 	stw	r17,4(sp)
  80ce74:	dc000015 	stw	r16,0(sp)
  80ce78:	dfc00315 	stw	ra,12(sp)
  80ce7c:	dc800215 	stw	r18,8(sp)
  80ce80:	2023883a 	mov	r17,r4
  80ce84:	2821883a 	mov	r16,r5
  80ce88:	20000226 	beq	r4,zero,80ce94 <_fclose_r+0x2c>
  80ce8c:	20800e17 	ldw	r2,56(r4)
  80ce90:	10002726 	beq	r2,zero,80cf30 <_fclose_r+0xc8>
  80ce94:	8080030f 	ldh	r2,12(r16)
  80ce98:	1000071e 	bne	r2,zero,80ceb8 <_fclose_r+0x50>
  80ce9c:	0005883a 	mov	r2,zero
  80cea0:	dfc00317 	ldw	ra,12(sp)
  80cea4:	dc800217 	ldw	r18,8(sp)
  80cea8:	dc400117 	ldw	r17,4(sp)
  80ceac:	dc000017 	ldw	r16,0(sp)
  80ceb0:	dec00404 	addi	sp,sp,16
  80ceb4:	f800283a 	ret
  80ceb8:	800b883a 	mov	r5,r16
  80cebc:	8809883a 	mov	r4,r17
  80cec0:	08089c80 	call	8089c8 <__sflush_r>
  80cec4:	1025883a 	mov	r18,r2
  80cec8:	80800b17 	ldw	r2,44(r16)
  80cecc:	10000426 	beq	r2,zero,80cee0 <_fclose_r+0x78>
  80ced0:	81400717 	ldw	r5,28(r16)
  80ced4:	8809883a 	mov	r4,r17
  80ced8:	103ee83a 	callr	r2
  80cedc:	10001616 	blt	r2,zero,80cf38 <_fclose_r+0xd0>
  80cee0:	8080030b 	ldhu	r2,12(r16)
  80cee4:	1080200c 	andi	r2,r2,128
  80cee8:	1000151e 	bne	r2,zero,80cf40 <_fclose_r+0xd8>
  80ceec:	81400c17 	ldw	r5,48(r16)
  80cef0:	28000526 	beq	r5,zero,80cf08 <_fclose_r+0xa0>
  80cef4:	80801004 	addi	r2,r16,64
  80cef8:	28800226 	beq	r5,r2,80cf04 <_fclose_r+0x9c>
  80cefc:	8809883a 	mov	r4,r17
  80cf00:	08091e00 	call	8091e0 <_free_r>
  80cf04:	80000c15 	stw	zero,48(r16)
  80cf08:	81401117 	ldw	r5,68(r16)
  80cf0c:	28000326 	beq	r5,zero,80cf1c <_fclose_r+0xb4>
  80cf10:	8809883a 	mov	r4,r17
  80cf14:	08091e00 	call	8091e0 <_free_r>
  80cf18:	80001115 	stw	zero,68(r16)
  80cf1c:	0808fd00 	call	808fd0 <__sfp_lock_acquire>
  80cf20:	8000030d 	sth	zero,12(r16)
  80cf24:	0808fd40 	call	808fd4 <__sfp_lock_release>
  80cf28:	9005883a 	mov	r2,r18
  80cf2c:	003fdc06 	br	80cea0 <__alt_mem_onchip_mem+0xff78cea0>
  80cf30:	0808fc00 	call	808fc0 <__sinit>
  80cf34:	003fd706 	br	80ce94 <__alt_mem_onchip_mem+0xff78ce94>
  80cf38:	04bfffc4 	movi	r18,-1
  80cf3c:	003fe806 	br	80cee0 <__alt_mem_onchip_mem+0xff78cee0>
  80cf40:	81400417 	ldw	r5,16(r16)
  80cf44:	8809883a 	mov	r4,r17
  80cf48:	08091e00 	call	8091e0 <_free_r>
  80cf4c:	003fe706 	br	80ceec <__alt_mem_onchip_mem+0xff78ceec>
  80cf50:	0005883a 	mov	r2,zero
  80cf54:	f800283a 	ret

0080cf58 <fclose>:
  80cf58:	00802074 	movhi	r2,129
  80cf5c:	109aef04 	addi	r2,r2,27580
  80cf60:	200b883a 	mov	r5,r4
  80cf64:	11000017 	ldw	r4,0(r2)
  80cf68:	080ce681 	jmpi	80ce68 <_fclose_r>

0080cf6c <__fputwc>:
  80cf6c:	defff804 	addi	sp,sp,-32
  80cf70:	dcc00415 	stw	r19,16(sp)
  80cf74:	dc800315 	stw	r18,12(sp)
  80cf78:	dc000115 	stw	r16,4(sp)
  80cf7c:	dfc00715 	stw	ra,28(sp)
  80cf80:	dd400615 	stw	r21,24(sp)
  80cf84:	dd000515 	stw	r20,20(sp)
  80cf88:	dc400215 	stw	r17,8(sp)
  80cf8c:	2027883a 	mov	r19,r4
  80cf90:	2825883a 	mov	r18,r5
  80cf94:	3021883a 	mov	r16,r6
  80cf98:	0809c100 	call	809c10 <__locale_mb_cur_max>
  80cf9c:	00c00044 	movi	r3,1
  80cfa0:	10c03e26 	beq	r2,r3,80d09c <__fputwc+0x130>
  80cfa4:	81c01704 	addi	r7,r16,92
  80cfa8:	900d883a 	mov	r6,r18
  80cfac:	d80b883a 	mov	r5,sp
  80cfb0:	9809883a 	mov	r4,r19
  80cfb4:	080d1740 	call	80d174 <_wcrtomb_r>
  80cfb8:	1029883a 	mov	r20,r2
  80cfbc:	00bfffc4 	movi	r2,-1
  80cfc0:	a0802026 	beq	r20,r2,80d044 <__fputwc+0xd8>
  80cfc4:	d9400003 	ldbu	r5,0(sp)
  80cfc8:	a0001c26 	beq	r20,zero,80d03c <__fputwc+0xd0>
  80cfcc:	0023883a 	mov	r17,zero
  80cfd0:	05400284 	movi	r21,10
  80cfd4:	00000906 	br	80cffc <__fputwc+0x90>
  80cfd8:	80800017 	ldw	r2,0(r16)
  80cfdc:	11400005 	stb	r5,0(r2)
  80cfe0:	80c00017 	ldw	r3,0(r16)
  80cfe4:	18c00044 	addi	r3,r3,1
  80cfe8:	80c00015 	stw	r3,0(r16)
  80cfec:	8c400044 	addi	r17,r17,1
  80cff0:	dc45883a 	add	r2,sp,r17
  80cff4:	8d00112e 	bgeu	r17,r20,80d03c <__fputwc+0xd0>
  80cff8:	11400003 	ldbu	r5,0(r2)
  80cffc:	80c00217 	ldw	r3,8(r16)
  80d000:	18ffffc4 	addi	r3,r3,-1
  80d004:	80c00215 	stw	r3,8(r16)
  80d008:	183ff30e 	bge	r3,zero,80cfd8 <__alt_mem_onchip_mem+0xff78cfd8>
  80d00c:	80800617 	ldw	r2,24(r16)
  80d010:	18801916 	blt	r3,r2,80d078 <__fputwc+0x10c>
  80d014:	80800017 	ldw	r2,0(r16)
  80d018:	11400005 	stb	r5,0(r2)
  80d01c:	80800017 	ldw	r2,0(r16)
  80d020:	10c00003 	ldbu	r3,0(r2)
  80d024:	10800044 	addi	r2,r2,1
  80d028:	1d402326 	beq	r3,r21,80d0b8 <__fputwc+0x14c>
  80d02c:	80800015 	stw	r2,0(r16)
  80d030:	8c400044 	addi	r17,r17,1
  80d034:	dc45883a 	add	r2,sp,r17
  80d038:	8d3fef36 	bltu	r17,r20,80cff8 <__alt_mem_onchip_mem+0xff78cff8>
  80d03c:	9005883a 	mov	r2,r18
  80d040:	00000406 	br	80d054 <__fputwc+0xe8>
  80d044:	80c0030b 	ldhu	r3,12(r16)
  80d048:	a005883a 	mov	r2,r20
  80d04c:	18c01014 	ori	r3,r3,64
  80d050:	80c0030d 	sth	r3,12(r16)
  80d054:	dfc00717 	ldw	ra,28(sp)
  80d058:	dd400617 	ldw	r21,24(sp)
  80d05c:	dd000517 	ldw	r20,20(sp)
  80d060:	dcc00417 	ldw	r19,16(sp)
  80d064:	dc800317 	ldw	r18,12(sp)
  80d068:	dc400217 	ldw	r17,8(sp)
  80d06c:	dc000117 	ldw	r16,4(sp)
  80d070:	dec00804 	addi	sp,sp,32
  80d074:	f800283a 	ret
  80d078:	800d883a 	mov	r6,r16
  80d07c:	29403fcc 	andi	r5,r5,255
  80d080:	9809883a 	mov	r4,r19
  80d084:	0806de00 	call	806de0 <__swbuf_r>
  80d088:	10bfffe0 	cmpeqi	r2,r2,-1
  80d08c:	10803fcc 	andi	r2,r2,255
  80d090:	103fd626 	beq	r2,zero,80cfec <__alt_mem_onchip_mem+0xff78cfec>
  80d094:	00bfffc4 	movi	r2,-1
  80d098:	003fee06 	br	80d054 <__alt_mem_onchip_mem+0xff78d054>
  80d09c:	90ffffc4 	addi	r3,r18,-1
  80d0a0:	01003f84 	movi	r4,254
  80d0a4:	20ffbf36 	bltu	r4,r3,80cfa4 <__alt_mem_onchip_mem+0xff78cfa4>
  80d0a8:	900b883a 	mov	r5,r18
  80d0ac:	dc800005 	stb	r18,0(sp)
  80d0b0:	1029883a 	mov	r20,r2
  80d0b4:	003fc506 	br	80cfcc <__alt_mem_onchip_mem+0xff78cfcc>
  80d0b8:	800d883a 	mov	r6,r16
  80d0bc:	a80b883a 	mov	r5,r21
  80d0c0:	9809883a 	mov	r4,r19
  80d0c4:	0806de00 	call	806de0 <__swbuf_r>
  80d0c8:	10bfffe0 	cmpeqi	r2,r2,-1
  80d0cc:	003fef06 	br	80d08c <__alt_mem_onchip_mem+0xff78d08c>

0080d0d0 <_fputwc_r>:
  80d0d0:	3080030b 	ldhu	r2,12(r6)
  80d0d4:	10c8000c 	andi	r3,r2,8192
  80d0d8:	1800051e 	bne	r3,zero,80d0f0 <_fputwc_r+0x20>
  80d0dc:	30c01917 	ldw	r3,100(r6)
  80d0e0:	10880014 	ori	r2,r2,8192
  80d0e4:	3080030d 	sth	r2,12(r6)
  80d0e8:	18880014 	ori	r2,r3,8192
  80d0ec:	30801915 	stw	r2,100(r6)
  80d0f0:	080cf6c1 	jmpi	80cf6c <__fputwc>

0080d0f4 <fputwc>:
  80d0f4:	00802074 	movhi	r2,129
  80d0f8:	defffc04 	addi	sp,sp,-16
  80d0fc:	109aef04 	addi	r2,r2,27580
  80d100:	dc000115 	stw	r16,4(sp)
  80d104:	14000017 	ldw	r16,0(r2)
  80d108:	dc400215 	stw	r17,8(sp)
  80d10c:	dfc00315 	stw	ra,12(sp)
  80d110:	2023883a 	mov	r17,r4
  80d114:	80000226 	beq	r16,zero,80d120 <fputwc+0x2c>
  80d118:	80800e17 	ldw	r2,56(r16)
  80d11c:	10001026 	beq	r2,zero,80d160 <fputwc+0x6c>
  80d120:	2880030b 	ldhu	r2,12(r5)
  80d124:	10c8000c 	andi	r3,r2,8192
  80d128:	1800051e 	bne	r3,zero,80d140 <fputwc+0x4c>
  80d12c:	28c01917 	ldw	r3,100(r5)
  80d130:	10880014 	ori	r2,r2,8192
  80d134:	2880030d 	sth	r2,12(r5)
  80d138:	18880014 	ori	r2,r3,8192
  80d13c:	28801915 	stw	r2,100(r5)
  80d140:	280d883a 	mov	r6,r5
  80d144:	8009883a 	mov	r4,r16
  80d148:	880b883a 	mov	r5,r17
  80d14c:	dfc00317 	ldw	ra,12(sp)
  80d150:	dc400217 	ldw	r17,8(sp)
  80d154:	dc000117 	ldw	r16,4(sp)
  80d158:	dec00404 	addi	sp,sp,16
  80d15c:	080cf6c1 	jmpi	80cf6c <__fputwc>
  80d160:	8009883a 	mov	r4,r16
  80d164:	d9400015 	stw	r5,0(sp)
  80d168:	0808fc00 	call	808fc0 <__sinit>
  80d16c:	d9400017 	ldw	r5,0(sp)
  80d170:	003feb06 	br	80d120 <__alt_mem_onchip_mem+0xff78d120>

0080d174 <_wcrtomb_r>:
  80d174:	defff604 	addi	sp,sp,-40
  80d178:	00802074 	movhi	r2,129
  80d17c:	dc800815 	stw	r18,32(sp)
  80d180:	dc400715 	stw	r17,28(sp)
  80d184:	dc000615 	stw	r16,24(sp)
  80d188:	109af304 	addi	r2,r2,27596
  80d18c:	dfc00915 	stw	ra,36(sp)
  80d190:	2021883a 	mov	r16,r4
  80d194:	3823883a 	mov	r17,r7
  80d198:	14800017 	ldw	r18,0(r2)
  80d19c:	28001426 	beq	r5,zero,80d1f0 <_wcrtomb_r+0x7c>
  80d1a0:	d9400415 	stw	r5,16(sp)
  80d1a4:	d9800515 	stw	r6,20(sp)
  80d1a8:	0809c040 	call	809c04 <__locale_charset>
  80d1ac:	d9800517 	ldw	r6,20(sp)
  80d1b0:	d9400417 	ldw	r5,16(sp)
  80d1b4:	100f883a 	mov	r7,r2
  80d1b8:	dc400015 	stw	r17,0(sp)
  80d1bc:	8009883a 	mov	r4,r16
  80d1c0:	903ee83a 	callr	r18
  80d1c4:	00ffffc4 	movi	r3,-1
  80d1c8:	10c0031e 	bne	r2,r3,80d1d8 <_wcrtomb_r+0x64>
  80d1cc:	88000015 	stw	zero,0(r17)
  80d1d0:	00c02284 	movi	r3,138
  80d1d4:	80c00015 	stw	r3,0(r16)
  80d1d8:	dfc00917 	ldw	ra,36(sp)
  80d1dc:	dc800817 	ldw	r18,32(sp)
  80d1e0:	dc400717 	ldw	r17,28(sp)
  80d1e4:	dc000617 	ldw	r16,24(sp)
  80d1e8:	dec00a04 	addi	sp,sp,40
  80d1ec:	f800283a 	ret
  80d1f0:	0809c040 	call	809c04 <__locale_charset>
  80d1f4:	100f883a 	mov	r7,r2
  80d1f8:	dc400015 	stw	r17,0(sp)
  80d1fc:	000d883a 	mov	r6,zero
  80d200:	d9400104 	addi	r5,sp,4
  80d204:	8009883a 	mov	r4,r16
  80d208:	903ee83a 	callr	r18
  80d20c:	003fed06 	br	80d1c4 <__alt_mem_onchip_mem+0xff78d1c4>

0080d210 <wcrtomb>:
  80d210:	defff604 	addi	sp,sp,-40
  80d214:	00802074 	movhi	r2,129
  80d218:	dc800615 	stw	r18,24(sp)
  80d21c:	dc400515 	stw	r17,20(sp)
  80d220:	109aef04 	addi	r2,r2,27580
  80d224:	dfc00915 	stw	ra,36(sp)
  80d228:	dd000815 	stw	r20,32(sp)
  80d22c:	dcc00715 	stw	r19,28(sp)
  80d230:	dc000415 	stw	r16,16(sp)
  80d234:	3025883a 	mov	r18,r6
  80d238:	14400017 	ldw	r17,0(r2)
  80d23c:	20001926 	beq	r4,zero,80d2a4 <wcrtomb+0x94>
  80d240:	00802074 	movhi	r2,129
  80d244:	109af304 	addi	r2,r2,27596
  80d248:	15000017 	ldw	r20,0(r2)
  80d24c:	2021883a 	mov	r16,r4
  80d250:	2827883a 	mov	r19,r5
  80d254:	0809c040 	call	809c04 <__locale_charset>
  80d258:	100f883a 	mov	r7,r2
  80d25c:	dc800015 	stw	r18,0(sp)
  80d260:	980d883a 	mov	r6,r19
  80d264:	800b883a 	mov	r5,r16
  80d268:	8809883a 	mov	r4,r17
  80d26c:	a03ee83a 	callr	r20
  80d270:	00ffffc4 	movi	r3,-1
  80d274:	10c0031e 	bne	r2,r3,80d284 <wcrtomb+0x74>
  80d278:	90000015 	stw	zero,0(r18)
  80d27c:	00c02284 	movi	r3,138
  80d280:	88c00015 	stw	r3,0(r17)
  80d284:	dfc00917 	ldw	ra,36(sp)
  80d288:	dd000817 	ldw	r20,32(sp)
  80d28c:	dcc00717 	ldw	r19,28(sp)
  80d290:	dc800617 	ldw	r18,24(sp)
  80d294:	dc400517 	ldw	r17,20(sp)
  80d298:	dc000417 	ldw	r16,16(sp)
  80d29c:	dec00a04 	addi	sp,sp,40
  80d2a0:	f800283a 	ret
  80d2a4:	00802074 	movhi	r2,129
  80d2a8:	109af304 	addi	r2,r2,27596
  80d2ac:	14000017 	ldw	r16,0(r2)
  80d2b0:	0809c040 	call	809c04 <__locale_charset>
  80d2b4:	100f883a 	mov	r7,r2
  80d2b8:	dc800015 	stw	r18,0(sp)
  80d2bc:	000d883a 	mov	r6,zero
  80d2c0:	d9400104 	addi	r5,sp,4
  80d2c4:	8809883a 	mov	r4,r17
  80d2c8:	803ee83a 	callr	r16
  80d2cc:	003fe806 	br	80d270 <__alt_mem_onchip_mem+0xff78d270>

0080d2d0 <__ascii_wctomb>:
  80d2d0:	28000526 	beq	r5,zero,80d2e8 <__ascii_wctomb+0x18>
  80d2d4:	00803fc4 	movi	r2,255
  80d2d8:	11800536 	bltu	r2,r6,80d2f0 <__ascii_wctomb+0x20>
  80d2dc:	29800005 	stb	r6,0(r5)
  80d2e0:	00800044 	movi	r2,1
  80d2e4:	f800283a 	ret
  80d2e8:	0005883a 	mov	r2,zero
  80d2ec:	f800283a 	ret
  80d2f0:	00802284 	movi	r2,138
  80d2f4:	20800015 	stw	r2,0(r4)
  80d2f8:	00bfffc4 	movi	r2,-1
  80d2fc:	f800283a 	ret

0080d300 <_wctomb_r>:
  80d300:	00802074 	movhi	r2,129
  80d304:	defff904 	addi	sp,sp,-28
  80d308:	109af304 	addi	r2,r2,27596
  80d30c:	dfc00615 	stw	ra,24(sp)
  80d310:	dc400515 	stw	r17,20(sp)
  80d314:	dc000415 	stw	r16,16(sp)
  80d318:	3823883a 	mov	r17,r7
  80d31c:	14000017 	ldw	r16,0(r2)
  80d320:	d9000115 	stw	r4,4(sp)
  80d324:	d9400215 	stw	r5,8(sp)
  80d328:	d9800315 	stw	r6,12(sp)
  80d32c:	0809c040 	call	809c04 <__locale_charset>
  80d330:	d9800317 	ldw	r6,12(sp)
  80d334:	d9400217 	ldw	r5,8(sp)
  80d338:	d9000117 	ldw	r4,4(sp)
  80d33c:	100f883a 	mov	r7,r2
  80d340:	dc400015 	stw	r17,0(sp)
  80d344:	803ee83a 	callr	r16
  80d348:	dfc00617 	ldw	ra,24(sp)
  80d34c:	dc400517 	ldw	r17,20(sp)
  80d350:	dc000417 	ldw	r16,16(sp)
  80d354:	dec00704 	addi	sp,sp,28
  80d358:	f800283a 	ret

0080d35c <__udivdi3>:
  80d35c:	defff504 	addi	sp,sp,-44
  80d360:	dcc00415 	stw	r19,16(sp)
  80d364:	dc000115 	stw	r16,4(sp)
  80d368:	dfc00a15 	stw	ra,40(sp)
  80d36c:	df000915 	stw	fp,36(sp)
  80d370:	ddc00815 	stw	r23,32(sp)
  80d374:	dd800715 	stw	r22,28(sp)
  80d378:	dd400615 	stw	r21,24(sp)
  80d37c:	dd000515 	stw	r20,20(sp)
  80d380:	dc800315 	stw	r18,12(sp)
  80d384:	dc400215 	stw	r17,8(sp)
  80d388:	2027883a 	mov	r19,r4
  80d38c:	2821883a 	mov	r16,r5
  80d390:	3800411e 	bne	r7,zero,80d498 <__udivdi3+0x13c>
  80d394:	3023883a 	mov	r17,r6
  80d398:	2025883a 	mov	r18,r4
  80d39c:	2980522e 	bgeu	r5,r6,80d4e8 <__udivdi3+0x18c>
  80d3a0:	00bfffd4 	movui	r2,65535
  80d3a4:	282d883a 	mov	r22,r5
  80d3a8:	1180a836 	bltu	r2,r6,80d64c <__udivdi3+0x2f0>
  80d3ac:	00803fc4 	movi	r2,255
  80d3b0:	1185803a 	cmpltu	r2,r2,r6
  80d3b4:	100490fa 	slli	r2,r2,3
  80d3b8:	3086d83a 	srl	r3,r6,r2
  80d3bc:	01002074 	movhi	r4,129
  80d3c0:	2112d304 	addi	r4,r4,19276
  80d3c4:	20c7883a 	add	r3,r4,r3
  80d3c8:	18c00003 	ldbu	r3,0(r3)
  80d3cc:	1885883a 	add	r2,r3,r2
  80d3d0:	00c00804 	movi	r3,32
  80d3d4:	1887c83a 	sub	r3,r3,r2
  80d3d8:	18000526 	beq	r3,zero,80d3f0 <__udivdi3+0x94>
  80d3dc:	80e0983a 	sll	r16,r16,r3
  80d3e0:	9884d83a 	srl	r2,r19,r2
  80d3e4:	30e2983a 	sll	r17,r6,r3
  80d3e8:	98e4983a 	sll	r18,r19,r3
  80d3ec:	142cb03a 	or	r22,r2,r16
  80d3f0:	882ad43a 	srli	r21,r17,16
  80d3f4:	b009883a 	mov	r4,r22
  80d3f8:	8d3fffcc 	andi	r20,r17,65535
  80d3fc:	a80b883a 	mov	r5,r21
  80d400:	080df680 	call	80df68 <__umodsi3>
  80d404:	b009883a 	mov	r4,r22
  80d408:	a80b883a 	mov	r5,r21
  80d40c:	1027883a 	mov	r19,r2
  80d410:	080df040 	call	80df04 <__udivsi3>
  80d414:	102d883a 	mov	r22,r2
  80d418:	9826943a 	slli	r19,r19,16
  80d41c:	9004d43a 	srli	r2,r18,16
  80d420:	a5a1383a 	mul	r16,r20,r22
  80d424:	14c4b03a 	or	r2,r2,r19
  80d428:	1400052e 	bgeu	r2,r16,80d440 <__udivdi3+0xe4>
  80d42c:	1445883a 	add	r2,r2,r17
  80d430:	b0ffffc4 	addi	r3,r22,-1
  80d434:	14400136 	bltu	r2,r17,80d43c <__udivdi3+0xe0>
  80d438:	14012336 	bltu	r2,r16,80d8c8 <__udivdi3+0x56c>
  80d43c:	182d883a 	mov	r22,r3
  80d440:	1421c83a 	sub	r16,r2,r16
  80d444:	a80b883a 	mov	r5,r21
  80d448:	8009883a 	mov	r4,r16
  80d44c:	080df680 	call	80df68 <__umodsi3>
  80d450:	1027883a 	mov	r19,r2
  80d454:	a80b883a 	mov	r5,r21
  80d458:	8009883a 	mov	r4,r16
  80d45c:	080df040 	call	80df04 <__udivsi3>
  80d460:	9826943a 	slli	r19,r19,16
  80d464:	a0a9383a 	mul	r20,r20,r2
  80d468:	94bfffcc 	andi	r18,r18,65535
  80d46c:	94e4b03a 	or	r18,r18,r19
  80d470:	9500052e 	bgeu	r18,r20,80d488 <__udivdi3+0x12c>
  80d474:	8ca5883a 	add	r18,r17,r18
  80d478:	10ffffc4 	addi	r3,r2,-1
  80d47c:	9440f136 	bltu	r18,r17,80d844 <__udivdi3+0x4e8>
  80d480:	9500f02e 	bgeu	r18,r20,80d844 <__udivdi3+0x4e8>
  80d484:	10bfff84 	addi	r2,r2,-2
  80d488:	b00c943a 	slli	r6,r22,16
  80d48c:	0007883a 	mov	r3,zero
  80d490:	3084b03a 	or	r2,r6,r2
  80d494:	00005906 	br	80d5fc <__udivdi3+0x2a0>
  80d498:	29c05636 	bltu	r5,r7,80d5f4 <__udivdi3+0x298>
  80d49c:	00bfffd4 	movui	r2,65535
  80d4a0:	11c0622e 	bgeu	r2,r7,80d62c <__udivdi3+0x2d0>
  80d4a4:	00804034 	movhi	r2,256
  80d4a8:	10bfffc4 	addi	r2,r2,-1
  80d4ac:	11c0ee36 	bltu	r2,r7,80d868 <__udivdi3+0x50c>
  80d4b0:	00800404 	movi	r2,16
  80d4b4:	3886d83a 	srl	r3,r7,r2
  80d4b8:	01002074 	movhi	r4,129
  80d4bc:	2112d304 	addi	r4,r4,19276
  80d4c0:	20c7883a 	add	r3,r4,r3
  80d4c4:	18c00003 	ldbu	r3,0(r3)
  80d4c8:	05400804 	movi	r21,32
  80d4cc:	1885883a 	add	r2,r3,r2
  80d4d0:	a8abc83a 	sub	r21,r21,r2
  80d4d4:	a800621e 	bne	r21,zero,80d660 <__udivdi3+0x304>
  80d4d8:	3c00e936 	bltu	r7,r16,80d880 <__udivdi3+0x524>
  80d4dc:	9985403a 	cmpgeu	r2,r19,r6
  80d4e0:	0007883a 	mov	r3,zero
  80d4e4:	00004506 	br	80d5fc <__udivdi3+0x2a0>
  80d4e8:	3000041e 	bne	r6,zero,80d4fc <__udivdi3+0x1a0>
  80d4ec:	000b883a 	mov	r5,zero
  80d4f0:	01000044 	movi	r4,1
  80d4f4:	080df040 	call	80df04 <__udivsi3>
  80d4f8:	1023883a 	mov	r17,r2
  80d4fc:	00bfffd4 	movui	r2,65535
  80d500:	14404e2e 	bgeu	r2,r17,80d63c <__udivdi3+0x2e0>
  80d504:	00804034 	movhi	r2,256
  80d508:	10bfffc4 	addi	r2,r2,-1
  80d50c:	1440d836 	bltu	r2,r17,80d870 <__udivdi3+0x514>
  80d510:	00800404 	movi	r2,16
  80d514:	8886d83a 	srl	r3,r17,r2
  80d518:	01002074 	movhi	r4,129
  80d51c:	2112d304 	addi	r4,r4,19276
  80d520:	20c7883a 	add	r3,r4,r3
  80d524:	18c00003 	ldbu	r3,0(r3)
  80d528:	1885883a 	add	r2,r3,r2
  80d52c:	00c00804 	movi	r3,32
  80d530:	1887c83a 	sub	r3,r3,r2
  80d534:	18008f1e 	bne	r3,zero,80d774 <__udivdi3+0x418>
  80d538:	882ad43a 	srli	r21,r17,16
  80d53c:	8461c83a 	sub	r16,r16,r17
  80d540:	8d3fffcc 	andi	r20,r17,65535
  80d544:	00c00044 	movi	r3,1
  80d548:	8009883a 	mov	r4,r16
  80d54c:	a80b883a 	mov	r5,r21
  80d550:	d8c00015 	stw	r3,0(sp)
  80d554:	080df680 	call	80df68 <__umodsi3>
  80d558:	8009883a 	mov	r4,r16
  80d55c:	a80b883a 	mov	r5,r21
  80d560:	1027883a 	mov	r19,r2
  80d564:	080df040 	call	80df04 <__udivsi3>
  80d568:	9826943a 	slli	r19,r19,16
  80d56c:	9008d43a 	srli	r4,r18,16
  80d570:	1521383a 	mul	r16,r2,r20
  80d574:	102d883a 	mov	r22,r2
  80d578:	24c8b03a 	or	r4,r4,r19
  80d57c:	d8c00017 	ldw	r3,0(sp)
  80d580:	2400052e 	bgeu	r4,r16,80d598 <__udivdi3+0x23c>
  80d584:	2449883a 	add	r4,r4,r17
  80d588:	b0bfffc4 	addi	r2,r22,-1
  80d58c:	24400136 	bltu	r4,r17,80d594 <__udivdi3+0x238>
  80d590:	2400ca36 	bltu	r4,r16,80d8bc <__udivdi3+0x560>
  80d594:	102d883a 	mov	r22,r2
  80d598:	2421c83a 	sub	r16,r4,r16
  80d59c:	a80b883a 	mov	r5,r21
  80d5a0:	8009883a 	mov	r4,r16
  80d5a4:	d8c00015 	stw	r3,0(sp)
  80d5a8:	080df680 	call	80df68 <__umodsi3>
  80d5ac:	1027883a 	mov	r19,r2
  80d5b0:	a80b883a 	mov	r5,r21
  80d5b4:	8009883a 	mov	r4,r16
  80d5b8:	080df040 	call	80df04 <__udivsi3>
  80d5bc:	9826943a 	slli	r19,r19,16
  80d5c0:	1529383a 	mul	r20,r2,r20
  80d5c4:	94bfffcc 	andi	r18,r18,65535
  80d5c8:	94e4b03a 	or	r18,r18,r19
  80d5cc:	d8c00017 	ldw	r3,0(sp)
  80d5d0:	9500052e 	bgeu	r18,r20,80d5e8 <__udivdi3+0x28c>
  80d5d4:	8ca5883a 	add	r18,r17,r18
  80d5d8:	113fffc4 	addi	r4,r2,-1
  80d5dc:	94409736 	bltu	r18,r17,80d83c <__udivdi3+0x4e0>
  80d5e0:	9500962e 	bgeu	r18,r20,80d83c <__udivdi3+0x4e0>
  80d5e4:	10bfff84 	addi	r2,r2,-2
  80d5e8:	b00c943a 	slli	r6,r22,16
  80d5ec:	3084b03a 	or	r2,r6,r2
  80d5f0:	00000206 	br	80d5fc <__udivdi3+0x2a0>
  80d5f4:	0007883a 	mov	r3,zero
  80d5f8:	0005883a 	mov	r2,zero
  80d5fc:	dfc00a17 	ldw	ra,40(sp)
  80d600:	df000917 	ldw	fp,36(sp)
  80d604:	ddc00817 	ldw	r23,32(sp)
  80d608:	dd800717 	ldw	r22,28(sp)
  80d60c:	dd400617 	ldw	r21,24(sp)
  80d610:	dd000517 	ldw	r20,20(sp)
  80d614:	dcc00417 	ldw	r19,16(sp)
  80d618:	dc800317 	ldw	r18,12(sp)
  80d61c:	dc400217 	ldw	r17,8(sp)
  80d620:	dc000117 	ldw	r16,4(sp)
  80d624:	dec00b04 	addi	sp,sp,44
  80d628:	f800283a 	ret
  80d62c:	00803fc4 	movi	r2,255
  80d630:	11c5803a 	cmpltu	r2,r2,r7
  80d634:	100490fa 	slli	r2,r2,3
  80d638:	003f9e06 	br	80d4b4 <__alt_mem_onchip_mem+0xff78d4b4>
  80d63c:	00803fc4 	movi	r2,255
  80d640:	1445803a 	cmpltu	r2,r2,r17
  80d644:	100490fa 	slli	r2,r2,3
  80d648:	003fb206 	br	80d514 <__alt_mem_onchip_mem+0xff78d514>
  80d64c:	00804034 	movhi	r2,256
  80d650:	10bfffc4 	addi	r2,r2,-1
  80d654:	11808836 	bltu	r2,r6,80d878 <__udivdi3+0x51c>
  80d658:	00800404 	movi	r2,16
  80d65c:	003f5606 	br	80d3b8 <__alt_mem_onchip_mem+0xff78d3b8>
  80d660:	30aed83a 	srl	r23,r6,r2
  80d664:	3d4e983a 	sll	r7,r7,r21
  80d668:	80acd83a 	srl	r22,r16,r2
  80d66c:	9884d83a 	srl	r2,r19,r2
  80d670:	3deeb03a 	or	r23,r7,r23
  80d674:	b824d43a 	srli	r18,r23,16
  80d678:	8560983a 	sll	r16,r16,r21
  80d67c:	b009883a 	mov	r4,r22
  80d680:	900b883a 	mov	r5,r18
  80d684:	3568983a 	sll	r20,r6,r21
  80d688:	1420b03a 	or	r16,r2,r16
  80d68c:	080df680 	call	80df68 <__umodsi3>
  80d690:	b009883a 	mov	r4,r22
  80d694:	900b883a 	mov	r5,r18
  80d698:	1023883a 	mov	r17,r2
  80d69c:	080df040 	call	80df04 <__udivsi3>
  80d6a0:	8808943a 	slli	r4,r17,16
  80d6a4:	bf3fffcc 	andi	fp,r23,65535
  80d6a8:	8006d43a 	srli	r3,r16,16
  80d6ac:	e0a3383a 	mul	r17,fp,r2
  80d6b0:	100d883a 	mov	r6,r2
  80d6b4:	1906b03a 	or	r3,r3,r4
  80d6b8:	1c40042e 	bgeu	r3,r17,80d6cc <__udivdi3+0x370>
  80d6bc:	1dc7883a 	add	r3,r3,r23
  80d6c0:	10bfffc4 	addi	r2,r2,-1
  80d6c4:	1dc0752e 	bgeu	r3,r23,80d89c <__udivdi3+0x540>
  80d6c8:	100d883a 	mov	r6,r2
  80d6cc:	1c63c83a 	sub	r17,r3,r17
  80d6d0:	900b883a 	mov	r5,r18
  80d6d4:	8809883a 	mov	r4,r17
  80d6d8:	d9800015 	stw	r6,0(sp)
  80d6dc:	080df680 	call	80df68 <__umodsi3>
  80d6e0:	102d883a 	mov	r22,r2
  80d6e4:	8809883a 	mov	r4,r17
  80d6e8:	900b883a 	mov	r5,r18
  80d6ec:	080df040 	call	80df04 <__udivsi3>
  80d6f0:	b02c943a 	slli	r22,r22,16
  80d6f4:	e089383a 	mul	r4,fp,r2
  80d6f8:	843fffcc 	andi	r16,r16,65535
  80d6fc:	85a0b03a 	or	r16,r16,r22
  80d700:	d9800017 	ldw	r6,0(sp)
  80d704:	8100042e 	bgeu	r16,r4,80d718 <__udivdi3+0x3bc>
  80d708:	85e1883a 	add	r16,r16,r23
  80d70c:	10ffffc4 	addi	r3,r2,-1
  80d710:	85c05e2e 	bgeu	r16,r23,80d88c <__udivdi3+0x530>
  80d714:	1805883a 	mov	r2,r3
  80d718:	300c943a 	slli	r6,r6,16
  80d71c:	a17fffcc 	andi	r5,r20,65535
  80d720:	a028d43a 	srli	r20,r20,16
  80d724:	3084b03a 	or	r2,r6,r2
  80d728:	10ffffcc 	andi	r3,r2,65535
  80d72c:	100cd43a 	srli	r6,r2,16
  80d730:	194f383a 	mul	r7,r3,r5
  80d734:	1d07383a 	mul	r3,r3,r20
  80d738:	314b383a 	mul	r5,r6,r5
  80d73c:	3810d43a 	srli	r8,r7,16
  80d740:	8121c83a 	sub	r16,r16,r4
  80d744:	1947883a 	add	r3,r3,r5
  80d748:	40c7883a 	add	r3,r8,r3
  80d74c:	350d383a 	mul	r6,r6,r20
  80d750:	1940022e 	bgeu	r3,r5,80d75c <__udivdi3+0x400>
  80d754:	01000074 	movhi	r4,1
  80d758:	310d883a 	add	r6,r6,r4
  80d75c:	1828d43a 	srli	r20,r3,16
  80d760:	a18d883a 	add	r6,r20,r6
  80d764:	81803e36 	bltu	r16,r6,80d860 <__udivdi3+0x504>
  80d768:	81803826 	beq	r16,r6,80d84c <__udivdi3+0x4f0>
  80d76c:	0007883a 	mov	r3,zero
  80d770:	003fa206 	br	80d5fc <__alt_mem_onchip_mem+0xff78d5fc>
  80d774:	88e2983a 	sll	r17,r17,r3
  80d778:	80a8d83a 	srl	r20,r16,r2
  80d77c:	80e0983a 	sll	r16,r16,r3
  80d780:	882ad43a 	srli	r21,r17,16
  80d784:	9884d83a 	srl	r2,r19,r2
  80d788:	a009883a 	mov	r4,r20
  80d78c:	a80b883a 	mov	r5,r21
  80d790:	142eb03a 	or	r23,r2,r16
  80d794:	98e4983a 	sll	r18,r19,r3
  80d798:	080df680 	call	80df68 <__umodsi3>
  80d79c:	a009883a 	mov	r4,r20
  80d7a0:	a80b883a 	mov	r5,r21
  80d7a4:	1021883a 	mov	r16,r2
  80d7a8:	080df040 	call	80df04 <__udivsi3>
  80d7ac:	1039883a 	mov	fp,r2
  80d7b0:	8d3fffcc 	andi	r20,r17,65535
  80d7b4:	8020943a 	slli	r16,r16,16
  80d7b8:	b804d43a 	srli	r2,r23,16
  80d7bc:	a72d383a 	mul	r22,r20,fp
  80d7c0:	1404b03a 	or	r2,r2,r16
  80d7c4:	1580062e 	bgeu	r2,r22,80d7e0 <__udivdi3+0x484>
  80d7c8:	1445883a 	add	r2,r2,r17
  80d7cc:	e0ffffc4 	addi	r3,fp,-1
  80d7d0:	14403836 	bltu	r2,r17,80d8b4 <__udivdi3+0x558>
  80d7d4:	1580372e 	bgeu	r2,r22,80d8b4 <__udivdi3+0x558>
  80d7d8:	e73fff84 	addi	fp,fp,-2
  80d7dc:	1445883a 	add	r2,r2,r17
  80d7e0:	15adc83a 	sub	r22,r2,r22
  80d7e4:	a80b883a 	mov	r5,r21
  80d7e8:	b009883a 	mov	r4,r22
  80d7ec:	080df680 	call	80df68 <__umodsi3>
  80d7f0:	1027883a 	mov	r19,r2
  80d7f4:	b009883a 	mov	r4,r22
  80d7f8:	a80b883a 	mov	r5,r21
  80d7fc:	080df040 	call	80df04 <__udivsi3>
  80d800:	9826943a 	slli	r19,r19,16
  80d804:	a0a1383a 	mul	r16,r20,r2
  80d808:	b93fffcc 	andi	r4,r23,65535
  80d80c:	24c8b03a 	or	r4,r4,r19
  80d810:	2400062e 	bgeu	r4,r16,80d82c <__udivdi3+0x4d0>
  80d814:	2449883a 	add	r4,r4,r17
  80d818:	10ffffc4 	addi	r3,r2,-1
  80d81c:	24402336 	bltu	r4,r17,80d8ac <__udivdi3+0x550>
  80d820:	2400222e 	bgeu	r4,r16,80d8ac <__udivdi3+0x550>
  80d824:	10bfff84 	addi	r2,r2,-2
  80d828:	2449883a 	add	r4,r4,r17
  80d82c:	e038943a 	slli	fp,fp,16
  80d830:	2421c83a 	sub	r16,r4,r16
  80d834:	e086b03a 	or	r3,fp,r2
  80d838:	003f4306 	br	80d548 <__alt_mem_onchip_mem+0xff78d548>
  80d83c:	2005883a 	mov	r2,r4
  80d840:	003f6906 	br	80d5e8 <__alt_mem_onchip_mem+0xff78d5e8>
  80d844:	1805883a 	mov	r2,r3
  80d848:	003f0f06 	br	80d488 <__alt_mem_onchip_mem+0xff78d488>
  80d84c:	1806943a 	slli	r3,r3,16
  80d850:	9d66983a 	sll	r19,r19,r21
  80d854:	39ffffcc 	andi	r7,r7,65535
  80d858:	19c7883a 	add	r3,r3,r7
  80d85c:	98ffc32e 	bgeu	r19,r3,80d76c <__alt_mem_onchip_mem+0xff78d76c>
  80d860:	10bfffc4 	addi	r2,r2,-1
  80d864:	003fc106 	br	80d76c <__alt_mem_onchip_mem+0xff78d76c>
  80d868:	00800604 	movi	r2,24
  80d86c:	003f1106 	br	80d4b4 <__alt_mem_onchip_mem+0xff78d4b4>
  80d870:	00800604 	movi	r2,24
  80d874:	003f2706 	br	80d514 <__alt_mem_onchip_mem+0xff78d514>
  80d878:	00800604 	movi	r2,24
  80d87c:	003ece06 	br	80d3b8 <__alt_mem_onchip_mem+0xff78d3b8>
  80d880:	0007883a 	mov	r3,zero
  80d884:	00800044 	movi	r2,1
  80d888:	003f5c06 	br	80d5fc <__alt_mem_onchip_mem+0xff78d5fc>
  80d88c:	813fa12e 	bgeu	r16,r4,80d714 <__alt_mem_onchip_mem+0xff78d714>
  80d890:	10bfff84 	addi	r2,r2,-2
  80d894:	85e1883a 	add	r16,r16,r23
  80d898:	003f9f06 	br	80d718 <__alt_mem_onchip_mem+0xff78d718>
  80d89c:	1c7f8a2e 	bgeu	r3,r17,80d6c8 <__alt_mem_onchip_mem+0xff78d6c8>
  80d8a0:	31bfff84 	addi	r6,r6,-2
  80d8a4:	1dc7883a 	add	r3,r3,r23
  80d8a8:	003f8806 	br	80d6cc <__alt_mem_onchip_mem+0xff78d6cc>
  80d8ac:	1805883a 	mov	r2,r3
  80d8b0:	003fde06 	br	80d82c <__alt_mem_onchip_mem+0xff78d82c>
  80d8b4:	1839883a 	mov	fp,r3
  80d8b8:	003fc906 	br	80d7e0 <__alt_mem_onchip_mem+0xff78d7e0>
  80d8bc:	b5bfff84 	addi	r22,r22,-2
  80d8c0:	2449883a 	add	r4,r4,r17
  80d8c4:	003f3406 	br	80d598 <__alt_mem_onchip_mem+0xff78d598>
  80d8c8:	b5bfff84 	addi	r22,r22,-2
  80d8cc:	1445883a 	add	r2,r2,r17
  80d8d0:	003edb06 	br	80d440 <__alt_mem_onchip_mem+0xff78d440>

0080d8d4 <__umoddi3>:
  80d8d4:	defff404 	addi	sp,sp,-48
  80d8d8:	df000a15 	stw	fp,40(sp)
  80d8dc:	dc400315 	stw	r17,12(sp)
  80d8e0:	dc000215 	stw	r16,8(sp)
  80d8e4:	dfc00b15 	stw	ra,44(sp)
  80d8e8:	ddc00915 	stw	r23,36(sp)
  80d8ec:	dd800815 	stw	r22,32(sp)
  80d8f0:	dd400715 	stw	r21,28(sp)
  80d8f4:	dd000615 	stw	r20,24(sp)
  80d8f8:	dcc00515 	stw	r19,20(sp)
  80d8fc:	dc800415 	stw	r18,16(sp)
  80d900:	2021883a 	mov	r16,r4
  80d904:	2823883a 	mov	r17,r5
  80d908:	2839883a 	mov	fp,r5
  80d90c:	38003c1e 	bne	r7,zero,80da00 <__umoddi3+0x12c>
  80d910:	3027883a 	mov	r19,r6
  80d914:	2029883a 	mov	r20,r4
  80d918:	2980512e 	bgeu	r5,r6,80da60 <__umoddi3+0x18c>
  80d91c:	00bfffd4 	movui	r2,65535
  80d920:	11809a36 	bltu	r2,r6,80db8c <__umoddi3+0x2b8>
  80d924:	01003fc4 	movi	r4,255
  80d928:	2189803a 	cmpltu	r4,r4,r6
  80d92c:	200890fa 	slli	r4,r4,3
  80d930:	3104d83a 	srl	r2,r6,r4
  80d934:	00c02074 	movhi	r3,129
  80d938:	18d2d304 	addi	r3,r3,19276
  80d93c:	1885883a 	add	r2,r3,r2
  80d940:	10c00003 	ldbu	r3,0(r2)
  80d944:	00800804 	movi	r2,32
  80d948:	1909883a 	add	r4,r3,r4
  80d94c:	1125c83a 	sub	r18,r2,r4
  80d950:	90000526 	beq	r18,zero,80d968 <__umoddi3+0x94>
  80d954:	8ca2983a 	sll	r17,r17,r18
  80d958:	8108d83a 	srl	r4,r16,r4
  80d95c:	34a6983a 	sll	r19,r6,r18
  80d960:	84a8983a 	sll	r20,r16,r18
  80d964:	2478b03a 	or	fp,r4,r17
  80d968:	982ed43a 	srli	r23,r19,16
  80d96c:	e009883a 	mov	r4,fp
  80d970:	9dbfffcc 	andi	r22,r19,65535
  80d974:	b80b883a 	mov	r5,r23
  80d978:	080df680 	call	80df68 <__umodsi3>
  80d97c:	e009883a 	mov	r4,fp
  80d980:	b80b883a 	mov	r5,r23
  80d984:	102b883a 	mov	r21,r2
  80d988:	080df040 	call	80df04 <__udivsi3>
  80d98c:	a806943a 	slli	r3,r21,16
  80d990:	a008d43a 	srli	r4,r20,16
  80d994:	b085383a 	mul	r2,r22,r2
  80d998:	20c8b03a 	or	r4,r4,r3
  80d99c:	2080032e 	bgeu	r4,r2,80d9ac <__umoddi3+0xd8>
  80d9a0:	24c9883a 	add	r4,r4,r19
  80d9a4:	24c00136 	bltu	r4,r19,80d9ac <__umoddi3+0xd8>
  80d9a8:	20811036 	bltu	r4,r2,80ddec <__umoddi3+0x518>
  80d9ac:	20abc83a 	sub	r21,r4,r2
  80d9b0:	b80b883a 	mov	r5,r23
  80d9b4:	a809883a 	mov	r4,r21
  80d9b8:	080df680 	call	80df68 <__umodsi3>
  80d9bc:	1023883a 	mov	r17,r2
  80d9c0:	b80b883a 	mov	r5,r23
  80d9c4:	a809883a 	mov	r4,r21
  80d9c8:	080df040 	call	80df04 <__udivsi3>
  80d9cc:	8822943a 	slli	r17,r17,16
  80d9d0:	b085383a 	mul	r2,r22,r2
  80d9d4:	a0ffffcc 	andi	r3,r20,65535
  80d9d8:	1c46b03a 	or	r3,r3,r17
  80d9dc:	1880042e 	bgeu	r3,r2,80d9f0 <__umoddi3+0x11c>
  80d9e0:	1cc7883a 	add	r3,r3,r19
  80d9e4:	1cc00236 	bltu	r3,r19,80d9f0 <__umoddi3+0x11c>
  80d9e8:	1880012e 	bgeu	r3,r2,80d9f0 <__umoddi3+0x11c>
  80d9ec:	1cc7883a 	add	r3,r3,r19
  80d9f0:	1885c83a 	sub	r2,r3,r2
  80d9f4:	1484d83a 	srl	r2,r2,r18
  80d9f8:	0007883a 	mov	r3,zero
  80d9fc:	00004f06 	br	80db3c <__umoddi3+0x268>
  80da00:	29c04c36 	bltu	r5,r7,80db34 <__umoddi3+0x260>
  80da04:	00bfffd4 	movui	r2,65535
  80da08:	11c0582e 	bgeu	r2,r7,80db6c <__umoddi3+0x298>
  80da0c:	00804034 	movhi	r2,256
  80da10:	10bfffc4 	addi	r2,r2,-1
  80da14:	11c0e736 	bltu	r2,r7,80ddb4 <__umoddi3+0x4e0>
  80da18:	01000404 	movi	r4,16
  80da1c:	3904d83a 	srl	r2,r7,r4
  80da20:	00c02074 	movhi	r3,129
  80da24:	18d2d304 	addi	r3,r3,19276
  80da28:	1885883a 	add	r2,r3,r2
  80da2c:	14c00003 	ldbu	r19,0(r2)
  80da30:	00c00804 	movi	r3,32
  80da34:	9927883a 	add	r19,r19,r4
  80da38:	1ce9c83a 	sub	r20,r3,r19
  80da3c:	a000581e 	bne	r20,zero,80dba0 <__umoddi3+0x2cc>
  80da40:	3c400136 	bltu	r7,r17,80da48 <__umoddi3+0x174>
  80da44:	8180eb36 	bltu	r16,r6,80ddf4 <__umoddi3+0x520>
  80da48:	8185c83a 	sub	r2,r16,r6
  80da4c:	89e3c83a 	sub	r17,r17,r7
  80da50:	8089803a 	cmpltu	r4,r16,r2
  80da54:	8939c83a 	sub	fp,r17,r4
  80da58:	e007883a 	mov	r3,fp
  80da5c:	00003706 	br	80db3c <__umoddi3+0x268>
  80da60:	3000041e 	bne	r6,zero,80da74 <__umoddi3+0x1a0>
  80da64:	000b883a 	mov	r5,zero
  80da68:	01000044 	movi	r4,1
  80da6c:	080df040 	call	80df04 <__udivsi3>
  80da70:	1027883a 	mov	r19,r2
  80da74:	00bfffd4 	movui	r2,65535
  80da78:	14c0402e 	bgeu	r2,r19,80db7c <__umoddi3+0x2a8>
  80da7c:	00804034 	movhi	r2,256
  80da80:	10bfffc4 	addi	r2,r2,-1
  80da84:	14c0cd36 	bltu	r2,r19,80ddbc <__umoddi3+0x4e8>
  80da88:	00800404 	movi	r2,16
  80da8c:	9886d83a 	srl	r3,r19,r2
  80da90:	01002074 	movhi	r4,129
  80da94:	2112d304 	addi	r4,r4,19276
  80da98:	20c7883a 	add	r3,r4,r3
  80da9c:	18c00003 	ldbu	r3,0(r3)
  80daa0:	1887883a 	add	r3,r3,r2
  80daa4:	00800804 	movi	r2,32
  80daa8:	10e5c83a 	sub	r18,r2,r3
  80daac:	9000901e 	bne	r18,zero,80dcf0 <__umoddi3+0x41c>
  80dab0:	982cd43a 	srli	r22,r19,16
  80dab4:	8ce3c83a 	sub	r17,r17,r19
  80dab8:	9d7fffcc 	andi	r21,r19,65535
  80dabc:	b00b883a 	mov	r5,r22
  80dac0:	8809883a 	mov	r4,r17
  80dac4:	080df680 	call	80df68 <__umodsi3>
  80dac8:	8809883a 	mov	r4,r17
  80dacc:	b00b883a 	mov	r5,r22
  80dad0:	1021883a 	mov	r16,r2
  80dad4:	080df040 	call	80df04 <__udivsi3>
  80dad8:	8006943a 	slli	r3,r16,16
  80dadc:	a008d43a 	srli	r4,r20,16
  80dae0:	1545383a 	mul	r2,r2,r21
  80dae4:	20c8b03a 	or	r4,r4,r3
  80dae8:	2080042e 	bgeu	r4,r2,80dafc <__umoddi3+0x228>
  80daec:	24c9883a 	add	r4,r4,r19
  80daf0:	24c00236 	bltu	r4,r19,80dafc <__umoddi3+0x228>
  80daf4:	2080012e 	bgeu	r4,r2,80dafc <__umoddi3+0x228>
  80daf8:	24c9883a 	add	r4,r4,r19
  80dafc:	20a1c83a 	sub	r16,r4,r2
  80db00:	b00b883a 	mov	r5,r22
  80db04:	8009883a 	mov	r4,r16
  80db08:	080df680 	call	80df68 <__umodsi3>
  80db0c:	1023883a 	mov	r17,r2
  80db10:	b00b883a 	mov	r5,r22
  80db14:	8009883a 	mov	r4,r16
  80db18:	080df040 	call	80df04 <__udivsi3>
  80db1c:	8822943a 	slli	r17,r17,16
  80db20:	1545383a 	mul	r2,r2,r21
  80db24:	a53fffcc 	andi	r20,r20,65535
  80db28:	a446b03a 	or	r3,r20,r17
  80db2c:	18bfb02e 	bgeu	r3,r2,80d9f0 <__alt_mem_onchip_mem+0xff78d9f0>
  80db30:	003fab06 	br	80d9e0 <__alt_mem_onchip_mem+0xff78d9e0>
  80db34:	2005883a 	mov	r2,r4
  80db38:	2807883a 	mov	r3,r5
  80db3c:	dfc00b17 	ldw	ra,44(sp)
  80db40:	df000a17 	ldw	fp,40(sp)
  80db44:	ddc00917 	ldw	r23,36(sp)
  80db48:	dd800817 	ldw	r22,32(sp)
  80db4c:	dd400717 	ldw	r21,28(sp)
  80db50:	dd000617 	ldw	r20,24(sp)
  80db54:	dcc00517 	ldw	r19,20(sp)
  80db58:	dc800417 	ldw	r18,16(sp)
  80db5c:	dc400317 	ldw	r17,12(sp)
  80db60:	dc000217 	ldw	r16,8(sp)
  80db64:	dec00c04 	addi	sp,sp,48
  80db68:	f800283a 	ret
  80db6c:	04c03fc4 	movi	r19,255
  80db70:	99c9803a 	cmpltu	r4,r19,r7
  80db74:	200890fa 	slli	r4,r4,3
  80db78:	003fa806 	br	80da1c <__alt_mem_onchip_mem+0xff78da1c>
  80db7c:	00803fc4 	movi	r2,255
  80db80:	14c5803a 	cmpltu	r2,r2,r19
  80db84:	100490fa 	slli	r2,r2,3
  80db88:	003fc006 	br	80da8c <__alt_mem_onchip_mem+0xff78da8c>
  80db8c:	00804034 	movhi	r2,256
  80db90:	10bfffc4 	addi	r2,r2,-1
  80db94:	11808b36 	bltu	r2,r6,80ddc4 <__umoddi3+0x4f0>
  80db98:	01000404 	movi	r4,16
  80db9c:	003f6406 	br	80d930 <__alt_mem_onchip_mem+0xff78d930>
  80dba0:	34c4d83a 	srl	r2,r6,r19
  80dba4:	3d0e983a 	sll	r7,r7,r20
  80dba8:	8cf8d83a 	srl	fp,r17,r19
  80dbac:	8d10983a 	sll	r8,r17,r20
  80dbb0:	38aab03a 	or	r21,r7,r2
  80dbb4:	a82cd43a 	srli	r22,r21,16
  80dbb8:	84e2d83a 	srl	r17,r16,r19
  80dbbc:	e009883a 	mov	r4,fp
  80dbc0:	b00b883a 	mov	r5,r22
  80dbc4:	8a22b03a 	or	r17,r17,r8
  80dbc8:	3524983a 	sll	r18,r6,r20
  80dbcc:	080df680 	call	80df68 <__umodsi3>
  80dbd0:	e009883a 	mov	r4,fp
  80dbd4:	b00b883a 	mov	r5,r22
  80dbd8:	102f883a 	mov	r23,r2
  80dbdc:	080df040 	call	80df04 <__udivsi3>
  80dbe0:	100d883a 	mov	r6,r2
  80dbe4:	b808943a 	slli	r4,r23,16
  80dbe8:	aa3fffcc 	andi	r8,r21,65535
  80dbec:	8804d43a 	srli	r2,r17,16
  80dbf0:	41af383a 	mul	r23,r8,r6
  80dbf4:	8520983a 	sll	r16,r16,r20
  80dbf8:	1104b03a 	or	r2,r2,r4
  80dbfc:	15c0042e 	bgeu	r2,r23,80dc10 <__umoddi3+0x33c>
  80dc00:	1545883a 	add	r2,r2,r21
  80dc04:	30ffffc4 	addi	r3,r6,-1
  80dc08:	1540742e 	bgeu	r2,r21,80dddc <__umoddi3+0x508>
  80dc0c:	180d883a 	mov	r6,r3
  80dc10:	15efc83a 	sub	r23,r2,r23
  80dc14:	b00b883a 	mov	r5,r22
  80dc18:	b809883a 	mov	r4,r23
  80dc1c:	d9800115 	stw	r6,4(sp)
  80dc20:	da000015 	stw	r8,0(sp)
  80dc24:	080df680 	call	80df68 <__umodsi3>
  80dc28:	b00b883a 	mov	r5,r22
  80dc2c:	b809883a 	mov	r4,r23
  80dc30:	1039883a 	mov	fp,r2
  80dc34:	080df040 	call	80df04 <__udivsi3>
  80dc38:	da000017 	ldw	r8,0(sp)
  80dc3c:	e038943a 	slli	fp,fp,16
  80dc40:	100b883a 	mov	r5,r2
  80dc44:	4089383a 	mul	r4,r8,r2
  80dc48:	8a3fffcc 	andi	r8,r17,65535
  80dc4c:	4710b03a 	or	r8,r8,fp
  80dc50:	d9800117 	ldw	r6,4(sp)
  80dc54:	4100042e 	bgeu	r8,r4,80dc68 <__umoddi3+0x394>
  80dc58:	4551883a 	add	r8,r8,r21
  80dc5c:	10bfffc4 	addi	r2,r2,-1
  80dc60:	45405a2e 	bgeu	r8,r21,80ddcc <__umoddi3+0x4f8>
  80dc64:	100b883a 	mov	r5,r2
  80dc68:	300c943a 	slli	r6,r6,16
  80dc6c:	91ffffcc 	andi	r7,r18,65535
  80dc70:	9004d43a 	srli	r2,r18,16
  80dc74:	314cb03a 	or	r6,r6,r5
  80dc78:	317fffcc 	andi	r5,r6,65535
  80dc7c:	300cd43a 	srli	r6,r6,16
  80dc80:	29d3383a 	mul	r9,r5,r7
  80dc84:	288b383a 	mul	r5,r5,r2
  80dc88:	31cf383a 	mul	r7,r6,r7
  80dc8c:	4806d43a 	srli	r3,r9,16
  80dc90:	4111c83a 	sub	r8,r8,r4
  80dc94:	29cb883a 	add	r5,r5,r7
  80dc98:	194b883a 	add	r5,r3,r5
  80dc9c:	3085383a 	mul	r2,r6,r2
  80dca0:	29c0022e 	bgeu	r5,r7,80dcac <__umoddi3+0x3d8>
  80dca4:	00c00074 	movhi	r3,1
  80dca8:	10c5883a 	add	r2,r2,r3
  80dcac:	2808d43a 	srli	r4,r5,16
  80dcb0:	280a943a 	slli	r5,r5,16
  80dcb4:	4a7fffcc 	andi	r9,r9,65535
  80dcb8:	2085883a 	add	r2,r4,r2
  80dcbc:	2a4b883a 	add	r5,r5,r9
  80dcc0:	40803636 	bltu	r8,r2,80dd9c <__umoddi3+0x4c8>
  80dcc4:	40804d26 	beq	r8,r2,80ddfc <__umoddi3+0x528>
  80dcc8:	4089c83a 	sub	r4,r8,r2
  80dccc:	280f883a 	mov	r7,r5
  80dcd0:	81cfc83a 	sub	r7,r16,r7
  80dcd4:	81c7803a 	cmpltu	r3,r16,r7
  80dcd8:	20c7c83a 	sub	r3,r4,r3
  80dcdc:	1cc4983a 	sll	r2,r3,r19
  80dce0:	3d0ed83a 	srl	r7,r7,r20
  80dce4:	1d06d83a 	srl	r3,r3,r20
  80dce8:	11c4b03a 	or	r2,r2,r7
  80dcec:	003f9306 	br	80db3c <__alt_mem_onchip_mem+0xff78db3c>
  80dcf0:	9ca6983a 	sll	r19,r19,r18
  80dcf4:	88e8d83a 	srl	r20,r17,r3
  80dcf8:	80c4d83a 	srl	r2,r16,r3
  80dcfc:	982cd43a 	srli	r22,r19,16
  80dd00:	8ca2983a 	sll	r17,r17,r18
  80dd04:	a009883a 	mov	r4,r20
  80dd08:	b00b883a 	mov	r5,r22
  80dd0c:	1478b03a 	or	fp,r2,r17
  80dd10:	080df680 	call	80df68 <__umodsi3>
  80dd14:	a009883a 	mov	r4,r20
  80dd18:	b00b883a 	mov	r5,r22
  80dd1c:	1023883a 	mov	r17,r2
  80dd20:	080df040 	call	80df04 <__udivsi3>
  80dd24:	9d7fffcc 	andi	r21,r19,65535
  80dd28:	880a943a 	slli	r5,r17,16
  80dd2c:	e008d43a 	srli	r4,fp,16
  80dd30:	a885383a 	mul	r2,r21,r2
  80dd34:	84a8983a 	sll	r20,r16,r18
  80dd38:	2148b03a 	or	r4,r4,r5
  80dd3c:	2080042e 	bgeu	r4,r2,80dd50 <__umoddi3+0x47c>
  80dd40:	24c9883a 	add	r4,r4,r19
  80dd44:	24c00236 	bltu	r4,r19,80dd50 <__umoddi3+0x47c>
  80dd48:	2080012e 	bgeu	r4,r2,80dd50 <__umoddi3+0x47c>
  80dd4c:	24c9883a 	add	r4,r4,r19
  80dd50:	20a3c83a 	sub	r17,r4,r2
  80dd54:	b00b883a 	mov	r5,r22
  80dd58:	8809883a 	mov	r4,r17
  80dd5c:	080df680 	call	80df68 <__umodsi3>
  80dd60:	102f883a 	mov	r23,r2
  80dd64:	8809883a 	mov	r4,r17
  80dd68:	b00b883a 	mov	r5,r22
  80dd6c:	080df040 	call	80df04 <__udivsi3>
  80dd70:	b82e943a 	slli	r23,r23,16
  80dd74:	a885383a 	mul	r2,r21,r2
  80dd78:	e13fffcc 	andi	r4,fp,65535
  80dd7c:	25c8b03a 	or	r4,r4,r23
  80dd80:	2080042e 	bgeu	r4,r2,80dd94 <__umoddi3+0x4c0>
  80dd84:	24c9883a 	add	r4,r4,r19
  80dd88:	24c00236 	bltu	r4,r19,80dd94 <__umoddi3+0x4c0>
  80dd8c:	2080012e 	bgeu	r4,r2,80dd94 <__umoddi3+0x4c0>
  80dd90:	24c9883a 	add	r4,r4,r19
  80dd94:	20a3c83a 	sub	r17,r4,r2
  80dd98:	003f4806 	br	80dabc <__alt_mem_onchip_mem+0xff78dabc>
  80dd9c:	2c8fc83a 	sub	r7,r5,r18
  80dda0:	1545c83a 	sub	r2,r2,r21
  80dda4:	29cb803a 	cmpltu	r5,r5,r7
  80dda8:	1145c83a 	sub	r2,r2,r5
  80ddac:	4089c83a 	sub	r4,r8,r2
  80ddb0:	003fc706 	br	80dcd0 <__alt_mem_onchip_mem+0xff78dcd0>
  80ddb4:	01000604 	movi	r4,24
  80ddb8:	003f1806 	br	80da1c <__alt_mem_onchip_mem+0xff78da1c>
  80ddbc:	00800604 	movi	r2,24
  80ddc0:	003f3206 	br	80da8c <__alt_mem_onchip_mem+0xff78da8c>
  80ddc4:	01000604 	movi	r4,24
  80ddc8:	003ed906 	br	80d930 <__alt_mem_onchip_mem+0xff78d930>
  80ddcc:	413fa52e 	bgeu	r8,r4,80dc64 <__alt_mem_onchip_mem+0xff78dc64>
  80ddd0:	297fff84 	addi	r5,r5,-2
  80ddd4:	4551883a 	add	r8,r8,r21
  80ddd8:	003fa306 	br	80dc68 <__alt_mem_onchip_mem+0xff78dc68>
  80dddc:	15ff8b2e 	bgeu	r2,r23,80dc0c <__alt_mem_onchip_mem+0xff78dc0c>
  80dde0:	31bfff84 	addi	r6,r6,-2
  80dde4:	1545883a 	add	r2,r2,r21
  80dde8:	003f8906 	br	80dc10 <__alt_mem_onchip_mem+0xff78dc10>
  80ddec:	24c9883a 	add	r4,r4,r19
  80ddf0:	003eee06 	br	80d9ac <__alt_mem_onchip_mem+0xff78d9ac>
  80ddf4:	8005883a 	mov	r2,r16
  80ddf8:	003f1706 	br	80da58 <__alt_mem_onchip_mem+0xff78da58>
  80ddfc:	817fe736 	bltu	r16,r5,80dd9c <__alt_mem_onchip_mem+0xff78dd9c>
  80de00:	280f883a 	mov	r7,r5
  80de04:	0009883a 	mov	r4,zero
  80de08:	003fb106 	br	80dcd0 <__alt_mem_onchip_mem+0xff78dcd0>

0080de0c <__divsi3>:
  80de0c:	20001b16 	blt	r4,zero,80de7c <__divsi3+0x70>
  80de10:	000f883a 	mov	r7,zero
  80de14:	28001616 	blt	r5,zero,80de70 <__divsi3+0x64>
  80de18:	200d883a 	mov	r6,r4
  80de1c:	29001a2e 	bgeu	r5,r4,80de88 <__divsi3+0x7c>
  80de20:	00800804 	movi	r2,32
  80de24:	00c00044 	movi	r3,1
  80de28:	00000106 	br	80de30 <__divsi3+0x24>
  80de2c:	10000d26 	beq	r2,zero,80de64 <__divsi3+0x58>
  80de30:	294b883a 	add	r5,r5,r5
  80de34:	10bfffc4 	addi	r2,r2,-1
  80de38:	18c7883a 	add	r3,r3,r3
  80de3c:	293ffb36 	bltu	r5,r4,80de2c <__alt_mem_onchip_mem+0xff78de2c>
  80de40:	0005883a 	mov	r2,zero
  80de44:	18000726 	beq	r3,zero,80de64 <__divsi3+0x58>
  80de48:	0005883a 	mov	r2,zero
  80de4c:	31400236 	bltu	r6,r5,80de58 <__divsi3+0x4c>
  80de50:	314dc83a 	sub	r6,r6,r5
  80de54:	10c4b03a 	or	r2,r2,r3
  80de58:	1806d07a 	srli	r3,r3,1
  80de5c:	280ad07a 	srli	r5,r5,1
  80de60:	183ffa1e 	bne	r3,zero,80de4c <__alt_mem_onchip_mem+0xff78de4c>
  80de64:	38000126 	beq	r7,zero,80de6c <__divsi3+0x60>
  80de68:	0085c83a 	sub	r2,zero,r2
  80de6c:	f800283a 	ret
  80de70:	014bc83a 	sub	r5,zero,r5
  80de74:	39c0005c 	xori	r7,r7,1
  80de78:	003fe706 	br	80de18 <__alt_mem_onchip_mem+0xff78de18>
  80de7c:	0109c83a 	sub	r4,zero,r4
  80de80:	01c00044 	movi	r7,1
  80de84:	003fe306 	br	80de14 <__alt_mem_onchip_mem+0xff78de14>
  80de88:	00c00044 	movi	r3,1
  80de8c:	003fee06 	br	80de48 <__alt_mem_onchip_mem+0xff78de48>

0080de90 <__modsi3>:
  80de90:	20001716 	blt	r4,zero,80def0 <__modsi3+0x60>
  80de94:	000f883a 	mov	r7,zero
  80de98:	2005883a 	mov	r2,r4
  80de9c:	28001216 	blt	r5,zero,80dee8 <__modsi3+0x58>
  80dea0:	2900162e 	bgeu	r5,r4,80defc <__modsi3+0x6c>
  80dea4:	01800804 	movi	r6,32
  80dea8:	00c00044 	movi	r3,1
  80deac:	00000106 	br	80deb4 <__modsi3+0x24>
  80deb0:	30000a26 	beq	r6,zero,80dedc <__modsi3+0x4c>
  80deb4:	294b883a 	add	r5,r5,r5
  80deb8:	31bfffc4 	addi	r6,r6,-1
  80debc:	18c7883a 	add	r3,r3,r3
  80dec0:	293ffb36 	bltu	r5,r4,80deb0 <__alt_mem_onchip_mem+0xff78deb0>
  80dec4:	18000526 	beq	r3,zero,80dedc <__modsi3+0x4c>
  80dec8:	1806d07a 	srli	r3,r3,1
  80decc:	11400136 	bltu	r2,r5,80ded4 <__modsi3+0x44>
  80ded0:	1145c83a 	sub	r2,r2,r5
  80ded4:	280ad07a 	srli	r5,r5,1
  80ded8:	183ffb1e 	bne	r3,zero,80dec8 <__alt_mem_onchip_mem+0xff78dec8>
  80dedc:	38000126 	beq	r7,zero,80dee4 <__modsi3+0x54>
  80dee0:	0085c83a 	sub	r2,zero,r2
  80dee4:	f800283a 	ret
  80dee8:	014bc83a 	sub	r5,zero,r5
  80deec:	003fec06 	br	80dea0 <__alt_mem_onchip_mem+0xff78dea0>
  80def0:	0109c83a 	sub	r4,zero,r4
  80def4:	01c00044 	movi	r7,1
  80def8:	003fe706 	br	80de98 <__alt_mem_onchip_mem+0xff78de98>
  80defc:	00c00044 	movi	r3,1
  80df00:	003ff106 	br	80dec8 <__alt_mem_onchip_mem+0xff78dec8>

0080df04 <__udivsi3>:
  80df04:	200d883a 	mov	r6,r4
  80df08:	2900152e 	bgeu	r5,r4,80df60 <__udivsi3+0x5c>
  80df0c:	28001416 	blt	r5,zero,80df60 <__udivsi3+0x5c>
  80df10:	00800804 	movi	r2,32
  80df14:	00c00044 	movi	r3,1
  80df18:	00000206 	br	80df24 <__udivsi3+0x20>
  80df1c:	10000e26 	beq	r2,zero,80df58 <__udivsi3+0x54>
  80df20:	28000516 	blt	r5,zero,80df38 <__udivsi3+0x34>
  80df24:	294b883a 	add	r5,r5,r5
  80df28:	10bfffc4 	addi	r2,r2,-1
  80df2c:	18c7883a 	add	r3,r3,r3
  80df30:	293ffa36 	bltu	r5,r4,80df1c <__alt_mem_onchip_mem+0xff78df1c>
  80df34:	18000826 	beq	r3,zero,80df58 <__udivsi3+0x54>
  80df38:	0005883a 	mov	r2,zero
  80df3c:	31400236 	bltu	r6,r5,80df48 <__udivsi3+0x44>
  80df40:	314dc83a 	sub	r6,r6,r5
  80df44:	10c4b03a 	or	r2,r2,r3
  80df48:	1806d07a 	srli	r3,r3,1
  80df4c:	280ad07a 	srli	r5,r5,1
  80df50:	183ffa1e 	bne	r3,zero,80df3c <__alt_mem_onchip_mem+0xff78df3c>
  80df54:	f800283a 	ret
  80df58:	0005883a 	mov	r2,zero
  80df5c:	f800283a 	ret
  80df60:	00c00044 	movi	r3,1
  80df64:	003ff406 	br	80df38 <__alt_mem_onchip_mem+0xff78df38>

0080df68 <__umodsi3>:
  80df68:	2005883a 	mov	r2,r4
  80df6c:	2900122e 	bgeu	r5,r4,80dfb8 <__umodsi3+0x50>
  80df70:	28001116 	blt	r5,zero,80dfb8 <__umodsi3+0x50>
  80df74:	01800804 	movi	r6,32
  80df78:	00c00044 	movi	r3,1
  80df7c:	00000206 	br	80df88 <__umodsi3+0x20>
  80df80:	30000c26 	beq	r6,zero,80dfb4 <__umodsi3+0x4c>
  80df84:	28000516 	blt	r5,zero,80df9c <__umodsi3+0x34>
  80df88:	294b883a 	add	r5,r5,r5
  80df8c:	31bfffc4 	addi	r6,r6,-1
  80df90:	18c7883a 	add	r3,r3,r3
  80df94:	293ffa36 	bltu	r5,r4,80df80 <__alt_mem_onchip_mem+0xff78df80>
  80df98:	18000626 	beq	r3,zero,80dfb4 <__umodsi3+0x4c>
  80df9c:	1806d07a 	srli	r3,r3,1
  80dfa0:	11400136 	bltu	r2,r5,80dfa8 <__umodsi3+0x40>
  80dfa4:	1145c83a 	sub	r2,r2,r5
  80dfa8:	280ad07a 	srli	r5,r5,1
  80dfac:	183ffb1e 	bne	r3,zero,80df9c <__alt_mem_onchip_mem+0xff78df9c>
  80dfb0:	f800283a 	ret
  80dfb4:	f800283a 	ret
  80dfb8:	00c00044 	movi	r3,1
  80dfbc:	003ff706 	br	80df9c <__alt_mem_onchip_mem+0xff78df9c>

0080dfc0 <__adddf3>:
  80dfc0:	02c00434 	movhi	r11,16
  80dfc4:	5affffc4 	addi	r11,r11,-1
  80dfc8:	2806d7fa 	srli	r3,r5,31
  80dfcc:	2ad4703a 	and	r10,r5,r11
  80dfd0:	3ad2703a 	and	r9,r7,r11
  80dfd4:	3804d53a 	srli	r2,r7,20
  80dfd8:	3018d77a 	srli	r12,r6,29
  80dfdc:	280ad53a 	srli	r5,r5,20
  80dfe0:	501490fa 	slli	r10,r10,3
  80dfe4:	2010d77a 	srli	r8,r4,29
  80dfe8:	481290fa 	slli	r9,r9,3
  80dfec:	380ed7fa 	srli	r7,r7,31
  80dff0:	defffb04 	addi	sp,sp,-20
  80dff4:	dc800215 	stw	r18,8(sp)
  80dff8:	dc400115 	stw	r17,4(sp)
  80dffc:	dc000015 	stw	r16,0(sp)
  80e000:	dfc00415 	stw	ra,16(sp)
  80e004:	dcc00315 	stw	r19,12(sp)
  80e008:	1c803fcc 	andi	r18,r3,255
  80e00c:	2c01ffcc 	andi	r16,r5,2047
  80e010:	5210b03a 	or	r8,r10,r8
  80e014:	202290fa 	slli	r17,r4,3
  80e018:	1081ffcc 	andi	r2,r2,2047
  80e01c:	4b12b03a 	or	r9,r9,r12
  80e020:	300c90fa 	slli	r6,r6,3
  80e024:	91c07526 	beq	r18,r7,80e1fc <__adddf3+0x23c>
  80e028:	8087c83a 	sub	r3,r16,r2
  80e02c:	00c0ab0e 	bge	zero,r3,80e2dc <__adddf3+0x31c>
  80e030:	10002a1e 	bne	r2,zero,80e0dc <__adddf3+0x11c>
  80e034:	4984b03a 	or	r2,r9,r6
  80e038:	1000961e 	bne	r2,zero,80e294 <__adddf3+0x2d4>
  80e03c:	888001cc 	andi	r2,r17,7
  80e040:	10000726 	beq	r2,zero,80e060 <__adddf3+0xa0>
  80e044:	888003cc 	andi	r2,r17,15
  80e048:	00c00104 	movi	r3,4
  80e04c:	10c00426 	beq	r2,r3,80e060 <__adddf3+0xa0>
  80e050:	88c7883a 	add	r3,r17,r3
  80e054:	1c63803a 	cmpltu	r17,r3,r17
  80e058:	4451883a 	add	r8,r8,r17
  80e05c:	1823883a 	mov	r17,r3
  80e060:	4080202c 	andhi	r2,r8,128
  80e064:	10005926 	beq	r2,zero,80e1cc <__adddf3+0x20c>
  80e068:	84000044 	addi	r16,r16,1
  80e06c:	0081ffc4 	movi	r2,2047
  80e070:	8080ba26 	beq	r16,r2,80e35c <__adddf3+0x39c>
  80e074:	00bfe034 	movhi	r2,65408
  80e078:	10bfffc4 	addi	r2,r2,-1
  80e07c:	4090703a 	and	r8,r8,r2
  80e080:	4004977a 	slli	r2,r8,29
  80e084:	4010927a 	slli	r8,r8,9
  80e088:	8822d0fa 	srli	r17,r17,3
  80e08c:	8401ffcc 	andi	r16,r16,2047
  80e090:	4010d33a 	srli	r8,r8,12
  80e094:	9007883a 	mov	r3,r18
  80e098:	1444b03a 	or	r2,r2,r17
  80e09c:	8401ffcc 	andi	r16,r16,2047
  80e0a0:	8020953a 	slli	r16,r16,20
  80e0a4:	18c03fcc 	andi	r3,r3,255
  80e0a8:	01000434 	movhi	r4,16
  80e0ac:	213fffc4 	addi	r4,r4,-1
  80e0b0:	180697fa 	slli	r3,r3,31
  80e0b4:	4110703a 	and	r8,r8,r4
  80e0b8:	4410b03a 	or	r8,r8,r16
  80e0bc:	40c6b03a 	or	r3,r8,r3
  80e0c0:	dfc00417 	ldw	ra,16(sp)
  80e0c4:	dcc00317 	ldw	r19,12(sp)
  80e0c8:	dc800217 	ldw	r18,8(sp)
  80e0cc:	dc400117 	ldw	r17,4(sp)
  80e0d0:	dc000017 	ldw	r16,0(sp)
  80e0d4:	dec00504 	addi	sp,sp,20
  80e0d8:	f800283a 	ret
  80e0dc:	0081ffc4 	movi	r2,2047
  80e0e0:	80bfd626 	beq	r16,r2,80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e0e4:	4a402034 	orhi	r9,r9,128
  80e0e8:	00800e04 	movi	r2,56
  80e0ec:	10c09f16 	blt	r2,r3,80e36c <__adddf3+0x3ac>
  80e0f0:	008007c4 	movi	r2,31
  80e0f4:	10c0c216 	blt	r2,r3,80e400 <__adddf3+0x440>
  80e0f8:	00800804 	movi	r2,32
  80e0fc:	10c5c83a 	sub	r2,r2,r3
  80e100:	488a983a 	sll	r5,r9,r2
  80e104:	30c8d83a 	srl	r4,r6,r3
  80e108:	3084983a 	sll	r2,r6,r2
  80e10c:	48c6d83a 	srl	r3,r9,r3
  80e110:	290cb03a 	or	r6,r5,r4
  80e114:	1004c03a 	cmpne	r2,r2,zero
  80e118:	308cb03a 	or	r6,r6,r2
  80e11c:	898dc83a 	sub	r6,r17,r6
  80e120:	89a3803a 	cmpltu	r17,r17,r6
  80e124:	40d1c83a 	sub	r8,r8,r3
  80e128:	4451c83a 	sub	r8,r8,r17
  80e12c:	3023883a 	mov	r17,r6
  80e130:	4080202c 	andhi	r2,r8,128
  80e134:	10002326 	beq	r2,zero,80e1c4 <__adddf3+0x204>
  80e138:	04c02034 	movhi	r19,128
  80e13c:	9cffffc4 	addi	r19,r19,-1
  80e140:	44e6703a 	and	r19,r8,r19
  80e144:	98007626 	beq	r19,zero,80e320 <__adddf3+0x360>
  80e148:	9809883a 	mov	r4,r19
  80e14c:	08105c40 	call	8105c4 <__clzsi2>
  80e150:	10fffe04 	addi	r3,r2,-8
  80e154:	010007c4 	movi	r4,31
  80e158:	20c07716 	blt	r4,r3,80e338 <__adddf3+0x378>
  80e15c:	00800804 	movi	r2,32
  80e160:	10c5c83a 	sub	r2,r2,r3
  80e164:	8884d83a 	srl	r2,r17,r2
  80e168:	98d0983a 	sll	r8,r19,r3
  80e16c:	88e2983a 	sll	r17,r17,r3
  80e170:	1204b03a 	or	r2,r2,r8
  80e174:	1c007416 	blt	r3,r16,80e348 <__adddf3+0x388>
  80e178:	1c21c83a 	sub	r16,r3,r16
  80e17c:	82000044 	addi	r8,r16,1
  80e180:	00c007c4 	movi	r3,31
  80e184:	1a009116 	blt	r3,r8,80e3cc <__adddf3+0x40c>
  80e188:	00c00804 	movi	r3,32
  80e18c:	1a07c83a 	sub	r3,r3,r8
  80e190:	8a08d83a 	srl	r4,r17,r8
  80e194:	88e2983a 	sll	r17,r17,r3
  80e198:	10c6983a 	sll	r3,r2,r3
  80e19c:	1210d83a 	srl	r8,r2,r8
  80e1a0:	8804c03a 	cmpne	r2,r17,zero
  80e1a4:	1906b03a 	or	r3,r3,r4
  80e1a8:	18a2b03a 	or	r17,r3,r2
  80e1ac:	0021883a 	mov	r16,zero
  80e1b0:	003fa206 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e1b4:	1890b03a 	or	r8,r3,r2
  80e1b8:	40017d26 	beq	r8,zero,80e7b0 <__adddf3+0x7f0>
  80e1bc:	1011883a 	mov	r8,r2
  80e1c0:	1823883a 	mov	r17,r3
  80e1c4:	888001cc 	andi	r2,r17,7
  80e1c8:	103f9e1e 	bne	r2,zero,80e044 <__alt_mem_onchip_mem+0xff78e044>
  80e1cc:	4004977a 	slli	r2,r8,29
  80e1d0:	8822d0fa 	srli	r17,r17,3
  80e1d4:	4010d0fa 	srli	r8,r8,3
  80e1d8:	9007883a 	mov	r3,r18
  80e1dc:	1444b03a 	or	r2,r2,r17
  80e1e0:	0101ffc4 	movi	r4,2047
  80e1e4:	81002426 	beq	r16,r4,80e278 <__adddf3+0x2b8>
  80e1e8:	8120703a 	and	r16,r16,r4
  80e1ec:	01000434 	movhi	r4,16
  80e1f0:	213fffc4 	addi	r4,r4,-1
  80e1f4:	4110703a 	and	r8,r8,r4
  80e1f8:	003fa806 	br	80e09c <__alt_mem_onchip_mem+0xff78e09c>
  80e1fc:	8089c83a 	sub	r4,r16,r2
  80e200:	01005e0e 	bge	zero,r4,80e37c <__adddf3+0x3bc>
  80e204:	10002b26 	beq	r2,zero,80e2b4 <__adddf3+0x2f4>
  80e208:	0081ffc4 	movi	r2,2047
  80e20c:	80bf8b26 	beq	r16,r2,80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e210:	4a402034 	orhi	r9,r9,128
  80e214:	00800e04 	movi	r2,56
  80e218:	1100a40e 	bge	r2,r4,80e4ac <__adddf3+0x4ec>
  80e21c:	498cb03a 	or	r6,r9,r6
  80e220:	300ac03a 	cmpne	r5,r6,zero
  80e224:	0013883a 	mov	r9,zero
  80e228:	2c4b883a 	add	r5,r5,r17
  80e22c:	2c63803a 	cmpltu	r17,r5,r17
  80e230:	4a11883a 	add	r8,r9,r8
  80e234:	8a11883a 	add	r8,r17,r8
  80e238:	2823883a 	mov	r17,r5
  80e23c:	4080202c 	andhi	r2,r8,128
  80e240:	103fe026 	beq	r2,zero,80e1c4 <__alt_mem_onchip_mem+0xff78e1c4>
  80e244:	84000044 	addi	r16,r16,1
  80e248:	0081ffc4 	movi	r2,2047
  80e24c:	8080d226 	beq	r16,r2,80e598 <__adddf3+0x5d8>
  80e250:	00bfe034 	movhi	r2,65408
  80e254:	10bfffc4 	addi	r2,r2,-1
  80e258:	4090703a 	and	r8,r8,r2
  80e25c:	880ad07a 	srli	r5,r17,1
  80e260:	400897fa 	slli	r4,r8,31
  80e264:	88c0004c 	andi	r3,r17,1
  80e268:	28e2b03a 	or	r17,r5,r3
  80e26c:	4010d07a 	srli	r8,r8,1
  80e270:	2462b03a 	or	r17,r4,r17
  80e274:	003f7106 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e278:	4088b03a 	or	r4,r8,r2
  80e27c:	20014526 	beq	r4,zero,80e794 <__adddf3+0x7d4>
  80e280:	01000434 	movhi	r4,16
  80e284:	42000234 	orhi	r8,r8,8
  80e288:	213fffc4 	addi	r4,r4,-1
  80e28c:	4110703a 	and	r8,r8,r4
  80e290:	003f8206 	br	80e09c <__alt_mem_onchip_mem+0xff78e09c>
  80e294:	18ffffc4 	addi	r3,r3,-1
  80e298:	1800491e 	bne	r3,zero,80e3c0 <__adddf3+0x400>
  80e29c:	898bc83a 	sub	r5,r17,r6
  80e2a0:	8963803a 	cmpltu	r17,r17,r5
  80e2a4:	4251c83a 	sub	r8,r8,r9
  80e2a8:	4451c83a 	sub	r8,r8,r17
  80e2ac:	2823883a 	mov	r17,r5
  80e2b0:	003f9f06 	br	80e130 <__alt_mem_onchip_mem+0xff78e130>
  80e2b4:	4984b03a 	or	r2,r9,r6
  80e2b8:	103f6026 	beq	r2,zero,80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e2bc:	213fffc4 	addi	r4,r4,-1
  80e2c0:	2000931e 	bne	r4,zero,80e510 <__adddf3+0x550>
  80e2c4:	898d883a 	add	r6,r17,r6
  80e2c8:	3463803a 	cmpltu	r17,r6,r17
  80e2cc:	4251883a 	add	r8,r8,r9
  80e2d0:	8a11883a 	add	r8,r17,r8
  80e2d4:	3023883a 	mov	r17,r6
  80e2d8:	003fd806 	br	80e23c <__alt_mem_onchip_mem+0xff78e23c>
  80e2dc:	1800541e 	bne	r3,zero,80e430 <__adddf3+0x470>
  80e2e0:	80800044 	addi	r2,r16,1
  80e2e4:	1081ffcc 	andi	r2,r2,2047
  80e2e8:	00c00044 	movi	r3,1
  80e2ec:	1880a00e 	bge	r3,r2,80e570 <__adddf3+0x5b0>
  80e2f0:	8989c83a 	sub	r4,r17,r6
  80e2f4:	8905803a 	cmpltu	r2,r17,r4
  80e2f8:	4267c83a 	sub	r19,r8,r9
  80e2fc:	98a7c83a 	sub	r19,r19,r2
  80e300:	9880202c 	andhi	r2,r19,128
  80e304:	10006326 	beq	r2,zero,80e494 <__adddf3+0x4d4>
  80e308:	3463c83a 	sub	r17,r6,r17
  80e30c:	4a07c83a 	sub	r3,r9,r8
  80e310:	344d803a 	cmpltu	r6,r6,r17
  80e314:	19a7c83a 	sub	r19,r3,r6
  80e318:	3825883a 	mov	r18,r7
  80e31c:	983f8a1e 	bne	r19,zero,80e148 <__alt_mem_onchip_mem+0xff78e148>
  80e320:	8809883a 	mov	r4,r17
  80e324:	08105c40 	call	8105c4 <__clzsi2>
  80e328:	10800804 	addi	r2,r2,32
  80e32c:	10fffe04 	addi	r3,r2,-8
  80e330:	010007c4 	movi	r4,31
  80e334:	20ff890e 	bge	r4,r3,80e15c <__alt_mem_onchip_mem+0xff78e15c>
  80e338:	10bff604 	addi	r2,r2,-40
  80e33c:	8884983a 	sll	r2,r17,r2
  80e340:	0023883a 	mov	r17,zero
  80e344:	1c3f8c0e 	bge	r3,r16,80e178 <__alt_mem_onchip_mem+0xff78e178>
  80e348:	023fe034 	movhi	r8,65408
  80e34c:	423fffc4 	addi	r8,r8,-1
  80e350:	80e1c83a 	sub	r16,r16,r3
  80e354:	1210703a 	and	r8,r2,r8
  80e358:	003f3806 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e35c:	9007883a 	mov	r3,r18
  80e360:	0011883a 	mov	r8,zero
  80e364:	0005883a 	mov	r2,zero
  80e368:	003f4c06 	br	80e09c <__alt_mem_onchip_mem+0xff78e09c>
  80e36c:	498cb03a 	or	r6,r9,r6
  80e370:	300cc03a 	cmpne	r6,r6,zero
  80e374:	0007883a 	mov	r3,zero
  80e378:	003f6806 	br	80e11c <__alt_mem_onchip_mem+0xff78e11c>
  80e37c:	20009c1e 	bne	r4,zero,80e5f0 <__adddf3+0x630>
  80e380:	80800044 	addi	r2,r16,1
  80e384:	1141ffcc 	andi	r5,r2,2047
  80e388:	01000044 	movi	r4,1
  80e38c:	2140670e 	bge	r4,r5,80e52c <__adddf3+0x56c>
  80e390:	0101ffc4 	movi	r4,2047
  80e394:	11007f26 	beq	r2,r4,80e594 <__adddf3+0x5d4>
  80e398:	898d883a 	add	r6,r17,r6
  80e39c:	4247883a 	add	r3,r8,r9
  80e3a0:	3451803a 	cmpltu	r8,r6,r17
  80e3a4:	40d1883a 	add	r8,r8,r3
  80e3a8:	402297fa 	slli	r17,r8,31
  80e3ac:	300cd07a 	srli	r6,r6,1
  80e3b0:	4010d07a 	srli	r8,r8,1
  80e3b4:	1021883a 	mov	r16,r2
  80e3b8:	89a2b03a 	or	r17,r17,r6
  80e3bc:	003f1f06 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e3c0:	0081ffc4 	movi	r2,2047
  80e3c4:	80bf481e 	bne	r16,r2,80e0e8 <__alt_mem_onchip_mem+0xff78e0e8>
  80e3c8:	003f1c06 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e3cc:	843ff844 	addi	r16,r16,-31
  80e3d0:	01000804 	movi	r4,32
  80e3d4:	1406d83a 	srl	r3,r2,r16
  80e3d8:	41005026 	beq	r8,r4,80e51c <__adddf3+0x55c>
  80e3dc:	01001004 	movi	r4,64
  80e3e0:	2211c83a 	sub	r8,r4,r8
  80e3e4:	1204983a 	sll	r2,r2,r8
  80e3e8:	88a2b03a 	or	r17,r17,r2
  80e3ec:	8822c03a 	cmpne	r17,r17,zero
  80e3f0:	1c62b03a 	or	r17,r3,r17
  80e3f4:	0011883a 	mov	r8,zero
  80e3f8:	0021883a 	mov	r16,zero
  80e3fc:	003f7106 	br	80e1c4 <__alt_mem_onchip_mem+0xff78e1c4>
  80e400:	193ff804 	addi	r4,r3,-32
  80e404:	00800804 	movi	r2,32
  80e408:	4908d83a 	srl	r4,r9,r4
  80e40c:	18804526 	beq	r3,r2,80e524 <__adddf3+0x564>
  80e410:	00801004 	movi	r2,64
  80e414:	10c5c83a 	sub	r2,r2,r3
  80e418:	4886983a 	sll	r3,r9,r2
  80e41c:	198cb03a 	or	r6,r3,r6
  80e420:	300cc03a 	cmpne	r6,r6,zero
  80e424:	218cb03a 	or	r6,r4,r6
  80e428:	0007883a 	mov	r3,zero
  80e42c:	003f3b06 	br	80e11c <__alt_mem_onchip_mem+0xff78e11c>
  80e430:	80002a26 	beq	r16,zero,80e4dc <__adddf3+0x51c>
  80e434:	0101ffc4 	movi	r4,2047
  80e438:	11006826 	beq	r2,r4,80e5dc <__adddf3+0x61c>
  80e43c:	00c7c83a 	sub	r3,zero,r3
  80e440:	42002034 	orhi	r8,r8,128
  80e444:	01000e04 	movi	r4,56
  80e448:	20c07c16 	blt	r4,r3,80e63c <__adddf3+0x67c>
  80e44c:	010007c4 	movi	r4,31
  80e450:	20c0da16 	blt	r4,r3,80e7bc <__adddf3+0x7fc>
  80e454:	01000804 	movi	r4,32
  80e458:	20c9c83a 	sub	r4,r4,r3
  80e45c:	4114983a 	sll	r10,r8,r4
  80e460:	88cad83a 	srl	r5,r17,r3
  80e464:	8908983a 	sll	r4,r17,r4
  80e468:	40c6d83a 	srl	r3,r8,r3
  80e46c:	5162b03a 	or	r17,r10,r5
  80e470:	2008c03a 	cmpne	r4,r4,zero
  80e474:	8922b03a 	or	r17,r17,r4
  80e478:	3463c83a 	sub	r17,r6,r17
  80e47c:	48c7c83a 	sub	r3,r9,r3
  80e480:	344d803a 	cmpltu	r6,r6,r17
  80e484:	1991c83a 	sub	r8,r3,r6
  80e488:	1021883a 	mov	r16,r2
  80e48c:	3825883a 	mov	r18,r7
  80e490:	003f2706 	br	80e130 <__alt_mem_onchip_mem+0xff78e130>
  80e494:	24d0b03a 	or	r8,r4,r19
  80e498:	40001b1e 	bne	r8,zero,80e508 <__adddf3+0x548>
  80e49c:	0005883a 	mov	r2,zero
  80e4a0:	0007883a 	mov	r3,zero
  80e4a4:	0021883a 	mov	r16,zero
  80e4a8:	003f4d06 	br	80e1e0 <__alt_mem_onchip_mem+0xff78e1e0>
  80e4ac:	008007c4 	movi	r2,31
  80e4b0:	11003c16 	blt	r2,r4,80e5a4 <__adddf3+0x5e4>
  80e4b4:	00800804 	movi	r2,32
  80e4b8:	1105c83a 	sub	r2,r2,r4
  80e4bc:	488e983a 	sll	r7,r9,r2
  80e4c0:	310ad83a 	srl	r5,r6,r4
  80e4c4:	3084983a 	sll	r2,r6,r2
  80e4c8:	4912d83a 	srl	r9,r9,r4
  80e4cc:	394ab03a 	or	r5,r7,r5
  80e4d0:	1004c03a 	cmpne	r2,r2,zero
  80e4d4:	288ab03a 	or	r5,r5,r2
  80e4d8:	003f5306 	br	80e228 <__alt_mem_onchip_mem+0xff78e228>
  80e4dc:	4448b03a 	or	r4,r8,r17
  80e4e0:	20003e26 	beq	r4,zero,80e5dc <__adddf3+0x61c>
  80e4e4:	00c6303a 	nor	r3,zero,r3
  80e4e8:	18003a1e 	bne	r3,zero,80e5d4 <__adddf3+0x614>
  80e4ec:	3463c83a 	sub	r17,r6,r17
  80e4f0:	4a07c83a 	sub	r3,r9,r8
  80e4f4:	344d803a 	cmpltu	r6,r6,r17
  80e4f8:	1991c83a 	sub	r8,r3,r6
  80e4fc:	1021883a 	mov	r16,r2
  80e500:	3825883a 	mov	r18,r7
  80e504:	003f0a06 	br	80e130 <__alt_mem_onchip_mem+0xff78e130>
  80e508:	2023883a 	mov	r17,r4
  80e50c:	003f0d06 	br	80e144 <__alt_mem_onchip_mem+0xff78e144>
  80e510:	0081ffc4 	movi	r2,2047
  80e514:	80bf3f1e 	bne	r16,r2,80e214 <__alt_mem_onchip_mem+0xff78e214>
  80e518:	003ec806 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e51c:	0005883a 	mov	r2,zero
  80e520:	003fb106 	br	80e3e8 <__alt_mem_onchip_mem+0xff78e3e8>
  80e524:	0007883a 	mov	r3,zero
  80e528:	003fbc06 	br	80e41c <__alt_mem_onchip_mem+0xff78e41c>
  80e52c:	4444b03a 	or	r2,r8,r17
  80e530:	8000871e 	bne	r16,zero,80e750 <__adddf3+0x790>
  80e534:	1000ba26 	beq	r2,zero,80e820 <__adddf3+0x860>
  80e538:	4984b03a 	or	r2,r9,r6
  80e53c:	103ebf26 	beq	r2,zero,80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e540:	8985883a 	add	r2,r17,r6
  80e544:	4247883a 	add	r3,r8,r9
  80e548:	1451803a 	cmpltu	r8,r2,r17
  80e54c:	40d1883a 	add	r8,r8,r3
  80e550:	40c0202c 	andhi	r3,r8,128
  80e554:	1023883a 	mov	r17,r2
  80e558:	183f1a26 	beq	r3,zero,80e1c4 <__alt_mem_onchip_mem+0xff78e1c4>
  80e55c:	00bfe034 	movhi	r2,65408
  80e560:	10bfffc4 	addi	r2,r2,-1
  80e564:	2021883a 	mov	r16,r4
  80e568:	4090703a 	and	r8,r8,r2
  80e56c:	003eb306 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e570:	4444b03a 	or	r2,r8,r17
  80e574:	8000291e 	bne	r16,zero,80e61c <__adddf3+0x65c>
  80e578:	10004b1e 	bne	r2,zero,80e6a8 <__adddf3+0x6e8>
  80e57c:	4990b03a 	or	r8,r9,r6
  80e580:	40008b26 	beq	r8,zero,80e7b0 <__adddf3+0x7f0>
  80e584:	4811883a 	mov	r8,r9
  80e588:	3023883a 	mov	r17,r6
  80e58c:	3825883a 	mov	r18,r7
  80e590:	003eaa06 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e594:	1021883a 	mov	r16,r2
  80e598:	0011883a 	mov	r8,zero
  80e59c:	0005883a 	mov	r2,zero
  80e5a0:	003f0f06 	br	80e1e0 <__alt_mem_onchip_mem+0xff78e1e0>
  80e5a4:	217ff804 	addi	r5,r4,-32
  80e5a8:	00800804 	movi	r2,32
  80e5ac:	494ad83a 	srl	r5,r9,r5
  80e5b0:	20807d26 	beq	r4,r2,80e7a8 <__adddf3+0x7e8>
  80e5b4:	00801004 	movi	r2,64
  80e5b8:	1109c83a 	sub	r4,r2,r4
  80e5bc:	4912983a 	sll	r9,r9,r4
  80e5c0:	498cb03a 	or	r6,r9,r6
  80e5c4:	300cc03a 	cmpne	r6,r6,zero
  80e5c8:	298ab03a 	or	r5,r5,r6
  80e5cc:	0013883a 	mov	r9,zero
  80e5d0:	003f1506 	br	80e228 <__alt_mem_onchip_mem+0xff78e228>
  80e5d4:	0101ffc4 	movi	r4,2047
  80e5d8:	113f9a1e 	bne	r2,r4,80e444 <__alt_mem_onchip_mem+0xff78e444>
  80e5dc:	4811883a 	mov	r8,r9
  80e5e0:	3023883a 	mov	r17,r6
  80e5e4:	1021883a 	mov	r16,r2
  80e5e8:	3825883a 	mov	r18,r7
  80e5ec:	003e9306 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e5f0:	8000161e 	bne	r16,zero,80e64c <__adddf3+0x68c>
  80e5f4:	444ab03a 	or	r5,r8,r17
  80e5f8:	28005126 	beq	r5,zero,80e740 <__adddf3+0x780>
  80e5fc:	0108303a 	nor	r4,zero,r4
  80e600:	20004d1e 	bne	r4,zero,80e738 <__adddf3+0x778>
  80e604:	89a3883a 	add	r17,r17,r6
  80e608:	4253883a 	add	r9,r8,r9
  80e60c:	898d803a 	cmpltu	r6,r17,r6
  80e610:	3251883a 	add	r8,r6,r9
  80e614:	1021883a 	mov	r16,r2
  80e618:	003f0806 	br	80e23c <__alt_mem_onchip_mem+0xff78e23c>
  80e61c:	1000301e 	bne	r2,zero,80e6e0 <__adddf3+0x720>
  80e620:	4984b03a 	or	r2,r9,r6
  80e624:	10007126 	beq	r2,zero,80e7ec <__adddf3+0x82c>
  80e628:	4811883a 	mov	r8,r9
  80e62c:	3023883a 	mov	r17,r6
  80e630:	3825883a 	mov	r18,r7
  80e634:	0401ffc4 	movi	r16,2047
  80e638:	003e8006 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e63c:	4462b03a 	or	r17,r8,r17
  80e640:	8822c03a 	cmpne	r17,r17,zero
  80e644:	0007883a 	mov	r3,zero
  80e648:	003f8b06 	br	80e478 <__alt_mem_onchip_mem+0xff78e478>
  80e64c:	0141ffc4 	movi	r5,2047
  80e650:	11403b26 	beq	r2,r5,80e740 <__adddf3+0x780>
  80e654:	0109c83a 	sub	r4,zero,r4
  80e658:	42002034 	orhi	r8,r8,128
  80e65c:	01400e04 	movi	r5,56
  80e660:	29006716 	blt	r5,r4,80e800 <__adddf3+0x840>
  80e664:	014007c4 	movi	r5,31
  80e668:	29007016 	blt	r5,r4,80e82c <__adddf3+0x86c>
  80e66c:	01400804 	movi	r5,32
  80e670:	290bc83a 	sub	r5,r5,r4
  80e674:	4154983a 	sll	r10,r8,r5
  80e678:	890ed83a 	srl	r7,r17,r4
  80e67c:	894a983a 	sll	r5,r17,r5
  80e680:	4108d83a 	srl	r4,r8,r4
  80e684:	51e2b03a 	or	r17,r10,r7
  80e688:	280ac03a 	cmpne	r5,r5,zero
  80e68c:	8962b03a 	or	r17,r17,r5
  80e690:	89a3883a 	add	r17,r17,r6
  80e694:	2253883a 	add	r9,r4,r9
  80e698:	898d803a 	cmpltu	r6,r17,r6
  80e69c:	3251883a 	add	r8,r6,r9
  80e6a0:	1021883a 	mov	r16,r2
  80e6a4:	003ee506 	br	80e23c <__alt_mem_onchip_mem+0xff78e23c>
  80e6a8:	4984b03a 	or	r2,r9,r6
  80e6ac:	103e6326 	beq	r2,zero,80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e6b0:	8987c83a 	sub	r3,r17,r6
  80e6b4:	88c9803a 	cmpltu	r4,r17,r3
  80e6b8:	4245c83a 	sub	r2,r8,r9
  80e6bc:	1105c83a 	sub	r2,r2,r4
  80e6c0:	1100202c 	andhi	r4,r2,128
  80e6c4:	203ebb26 	beq	r4,zero,80e1b4 <__alt_mem_onchip_mem+0xff78e1b4>
  80e6c8:	3463c83a 	sub	r17,r6,r17
  80e6cc:	4a07c83a 	sub	r3,r9,r8
  80e6d0:	344d803a 	cmpltu	r6,r6,r17
  80e6d4:	1991c83a 	sub	r8,r3,r6
  80e6d8:	3825883a 	mov	r18,r7
  80e6dc:	003e5706 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e6e0:	4984b03a 	or	r2,r9,r6
  80e6e4:	10002e26 	beq	r2,zero,80e7a0 <__adddf3+0x7e0>
  80e6e8:	4004d0fa 	srli	r2,r8,3
  80e6ec:	8822d0fa 	srli	r17,r17,3
  80e6f0:	4010977a 	slli	r8,r8,29
  80e6f4:	10c0022c 	andhi	r3,r2,8
  80e6f8:	4462b03a 	or	r17,r8,r17
  80e6fc:	18000826 	beq	r3,zero,80e720 <__adddf3+0x760>
  80e700:	4808d0fa 	srli	r4,r9,3
  80e704:	20c0022c 	andhi	r3,r4,8
  80e708:	1800051e 	bne	r3,zero,80e720 <__adddf3+0x760>
  80e70c:	300cd0fa 	srli	r6,r6,3
  80e710:	4806977a 	slli	r3,r9,29
  80e714:	2005883a 	mov	r2,r4
  80e718:	3825883a 	mov	r18,r7
  80e71c:	19a2b03a 	or	r17,r3,r6
  80e720:	8810d77a 	srli	r8,r17,29
  80e724:	100490fa 	slli	r2,r2,3
  80e728:	882290fa 	slli	r17,r17,3
  80e72c:	0401ffc4 	movi	r16,2047
  80e730:	4090b03a 	or	r8,r8,r2
  80e734:	003e4106 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e738:	0141ffc4 	movi	r5,2047
  80e73c:	117fc71e 	bne	r2,r5,80e65c <__alt_mem_onchip_mem+0xff78e65c>
  80e740:	4811883a 	mov	r8,r9
  80e744:	3023883a 	mov	r17,r6
  80e748:	1021883a 	mov	r16,r2
  80e74c:	003e3b06 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e750:	10002f26 	beq	r2,zero,80e810 <__adddf3+0x850>
  80e754:	4984b03a 	or	r2,r9,r6
  80e758:	10001126 	beq	r2,zero,80e7a0 <__adddf3+0x7e0>
  80e75c:	4004d0fa 	srli	r2,r8,3
  80e760:	8822d0fa 	srli	r17,r17,3
  80e764:	4010977a 	slli	r8,r8,29
  80e768:	10c0022c 	andhi	r3,r2,8
  80e76c:	4462b03a 	or	r17,r8,r17
  80e770:	183feb26 	beq	r3,zero,80e720 <__alt_mem_onchip_mem+0xff78e720>
  80e774:	4808d0fa 	srli	r4,r9,3
  80e778:	20c0022c 	andhi	r3,r4,8
  80e77c:	183fe81e 	bne	r3,zero,80e720 <__alt_mem_onchip_mem+0xff78e720>
  80e780:	300cd0fa 	srli	r6,r6,3
  80e784:	4806977a 	slli	r3,r9,29
  80e788:	2005883a 	mov	r2,r4
  80e78c:	19a2b03a 	or	r17,r3,r6
  80e790:	003fe306 	br	80e720 <__alt_mem_onchip_mem+0xff78e720>
  80e794:	0011883a 	mov	r8,zero
  80e798:	0005883a 	mov	r2,zero
  80e79c:	003e3f06 	br	80e09c <__alt_mem_onchip_mem+0xff78e09c>
  80e7a0:	0401ffc4 	movi	r16,2047
  80e7a4:	003e2506 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e7a8:	0013883a 	mov	r9,zero
  80e7ac:	003f8406 	br	80e5c0 <__alt_mem_onchip_mem+0xff78e5c0>
  80e7b0:	0005883a 	mov	r2,zero
  80e7b4:	0007883a 	mov	r3,zero
  80e7b8:	003e8906 	br	80e1e0 <__alt_mem_onchip_mem+0xff78e1e0>
  80e7bc:	197ff804 	addi	r5,r3,-32
  80e7c0:	01000804 	movi	r4,32
  80e7c4:	414ad83a 	srl	r5,r8,r5
  80e7c8:	19002426 	beq	r3,r4,80e85c <__adddf3+0x89c>
  80e7cc:	01001004 	movi	r4,64
  80e7d0:	20c7c83a 	sub	r3,r4,r3
  80e7d4:	40c6983a 	sll	r3,r8,r3
  80e7d8:	1c46b03a 	or	r3,r3,r17
  80e7dc:	1806c03a 	cmpne	r3,r3,zero
  80e7e0:	28e2b03a 	or	r17,r5,r3
  80e7e4:	0007883a 	mov	r3,zero
  80e7e8:	003f2306 	br	80e478 <__alt_mem_onchip_mem+0xff78e478>
  80e7ec:	0007883a 	mov	r3,zero
  80e7f0:	5811883a 	mov	r8,r11
  80e7f4:	00bfffc4 	movi	r2,-1
  80e7f8:	0401ffc4 	movi	r16,2047
  80e7fc:	003e7806 	br	80e1e0 <__alt_mem_onchip_mem+0xff78e1e0>
  80e800:	4462b03a 	or	r17,r8,r17
  80e804:	8822c03a 	cmpne	r17,r17,zero
  80e808:	0009883a 	mov	r4,zero
  80e80c:	003fa006 	br	80e690 <__alt_mem_onchip_mem+0xff78e690>
  80e810:	4811883a 	mov	r8,r9
  80e814:	3023883a 	mov	r17,r6
  80e818:	0401ffc4 	movi	r16,2047
  80e81c:	003e0706 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e820:	4811883a 	mov	r8,r9
  80e824:	3023883a 	mov	r17,r6
  80e828:	003e0406 	br	80e03c <__alt_mem_onchip_mem+0xff78e03c>
  80e82c:	21fff804 	addi	r7,r4,-32
  80e830:	01400804 	movi	r5,32
  80e834:	41ced83a 	srl	r7,r8,r7
  80e838:	21400a26 	beq	r4,r5,80e864 <__adddf3+0x8a4>
  80e83c:	01401004 	movi	r5,64
  80e840:	2909c83a 	sub	r4,r5,r4
  80e844:	4108983a 	sll	r4,r8,r4
  80e848:	2448b03a 	or	r4,r4,r17
  80e84c:	2008c03a 	cmpne	r4,r4,zero
  80e850:	3922b03a 	or	r17,r7,r4
  80e854:	0009883a 	mov	r4,zero
  80e858:	003f8d06 	br	80e690 <__alt_mem_onchip_mem+0xff78e690>
  80e85c:	0007883a 	mov	r3,zero
  80e860:	003fdd06 	br	80e7d8 <__alt_mem_onchip_mem+0xff78e7d8>
  80e864:	0009883a 	mov	r4,zero
  80e868:	003ff706 	br	80e848 <__alt_mem_onchip_mem+0xff78e848>

0080e86c <__divdf3>:
  80e86c:	defff204 	addi	sp,sp,-56
  80e870:	dd400915 	stw	r21,36(sp)
  80e874:	282ad53a 	srli	r21,r5,20
  80e878:	dd000815 	stw	r20,32(sp)
  80e87c:	2828d7fa 	srli	r20,r5,31
  80e880:	dc000415 	stw	r16,16(sp)
  80e884:	04000434 	movhi	r16,16
  80e888:	df000c15 	stw	fp,48(sp)
  80e88c:	843fffc4 	addi	r16,r16,-1
  80e890:	dfc00d15 	stw	ra,52(sp)
  80e894:	ddc00b15 	stw	r23,44(sp)
  80e898:	dd800a15 	stw	r22,40(sp)
  80e89c:	dcc00715 	stw	r19,28(sp)
  80e8a0:	dc800615 	stw	r18,24(sp)
  80e8a4:	dc400515 	stw	r17,20(sp)
  80e8a8:	ad41ffcc 	andi	r21,r21,2047
  80e8ac:	2c20703a 	and	r16,r5,r16
  80e8b0:	a7003fcc 	andi	fp,r20,255
  80e8b4:	a8006126 	beq	r21,zero,80ea3c <__divdf3+0x1d0>
  80e8b8:	0081ffc4 	movi	r2,2047
  80e8bc:	2025883a 	mov	r18,r4
  80e8c0:	a8803726 	beq	r21,r2,80e9a0 <__divdf3+0x134>
  80e8c4:	80800434 	orhi	r2,r16,16
  80e8c8:	100490fa 	slli	r2,r2,3
  80e8cc:	2020d77a 	srli	r16,r4,29
  80e8d0:	202490fa 	slli	r18,r4,3
  80e8d4:	ad7f0044 	addi	r21,r21,-1023
  80e8d8:	80a0b03a 	or	r16,r16,r2
  80e8dc:	0027883a 	mov	r19,zero
  80e8e0:	0013883a 	mov	r9,zero
  80e8e4:	3804d53a 	srli	r2,r7,20
  80e8e8:	382cd7fa 	srli	r22,r7,31
  80e8ec:	04400434 	movhi	r17,16
  80e8f0:	8c7fffc4 	addi	r17,r17,-1
  80e8f4:	1081ffcc 	andi	r2,r2,2047
  80e8f8:	3011883a 	mov	r8,r6
  80e8fc:	3c62703a 	and	r17,r7,r17
  80e900:	b5c03fcc 	andi	r23,r22,255
  80e904:	10006c26 	beq	r2,zero,80eab8 <__divdf3+0x24c>
  80e908:	00c1ffc4 	movi	r3,2047
  80e90c:	10c06426 	beq	r2,r3,80eaa0 <__divdf3+0x234>
  80e910:	88c00434 	orhi	r3,r17,16
  80e914:	180690fa 	slli	r3,r3,3
  80e918:	3022d77a 	srli	r17,r6,29
  80e91c:	301090fa 	slli	r8,r6,3
  80e920:	10bf0044 	addi	r2,r2,-1023
  80e924:	88e2b03a 	or	r17,r17,r3
  80e928:	000f883a 	mov	r7,zero
  80e92c:	a58cf03a 	xor	r6,r20,r22
  80e930:	3cc8b03a 	or	r4,r7,r19
  80e934:	a8abc83a 	sub	r21,r21,r2
  80e938:	008003c4 	movi	r2,15
  80e93c:	3007883a 	mov	r3,r6
  80e940:	34c03fcc 	andi	r19,r6,255
  80e944:	11009036 	bltu	r2,r4,80eb88 <__divdf3+0x31c>
  80e948:	200890ba 	slli	r4,r4,2
  80e94c:	00802074 	movhi	r2,129
  80e950:	10ba5804 	addi	r2,r2,-5792
  80e954:	2089883a 	add	r4,r4,r2
  80e958:	20800017 	ldw	r2,0(r4)
  80e95c:	1000683a 	jmp	r2
  80e960:	0080eb88 	cmpgei	r2,zero,942
  80e964:	0080e9d8 	cmpnei	r2,zero,935
  80e968:	0080eb78 	rdprs	r2,zero,941
  80e96c:	0080e9cc 	andi	r2,zero,935
  80e970:	0080eb78 	rdprs	r2,zero,941
  80e974:	0080eb4c 	andi	r2,zero,941
  80e978:	0080eb78 	rdprs	r2,zero,941
  80e97c:	0080e9cc 	andi	r2,zero,935
  80e980:	0080e9d8 	cmpnei	r2,zero,935
  80e984:	0080e9d8 	cmpnei	r2,zero,935
  80e988:	0080eb4c 	andi	r2,zero,941
  80e98c:	0080e9cc 	andi	r2,zero,935
  80e990:	0080e9bc 	xorhi	r2,zero,934
  80e994:	0080e9bc 	xorhi	r2,zero,934
  80e998:	0080e9bc 	xorhi	r2,zero,934
  80e99c:	0080ee6c 	andhi	r2,zero,953
  80e9a0:	2404b03a 	or	r2,r4,r16
  80e9a4:	1000661e 	bne	r2,zero,80eb40 <__divdf3+0x2d4>
  80e9a8:	04c00204 	movi	r19,8
  80e9ac:	0021883a 	mov	r16,zero
  80e9b0:	0025883a 	mov	r18,zero
  80e9b4:	02400084 	movi	r9,2
  80e9b8:	003fca06 	br	80e8e4 <__alt_mem_onchip_mem+0xff78e8e4>
  80e9bc:	8023883a 	mov	r17,r16
  80e9c0:	9011883a 	mov	r8,r18
  80e9c4:	e02f883a 	mov	r23,fp
  80e9c8:	480f883a 	mov	r7,r9
  80e9cc:	00800084 	movi	r2,2
  80e9d0:	3881311e 	bne	r7,r2,80ee98 <__divdf3+0x62c>
  80e9d4:	b827883a 	mov	r19,r23
  80e9d8:	98c0004c 	andi	r3,r19,1
  80e9dc:	0081ffc4 	movi	r2,2047
  80e9e0:	000b883a 	mov	r5,zero
  80e9e4:	0025883a 	mov	r18,zero
  80e9e8:	1004953a 	slli	r2,r2,20
  80e9ec:	18c03fcc 	andi	r3,r3,255
  80e9f0:	04400434 	movhi	r17,16
  80e9f4:	8c7fffc4 	addi	r17,r17,-1
  80e9f8:	180697fa 	slli	r3,r3,31
  80e9fc:	2c4a703a 	and	r5,r5,r17
  80ea00:	288ab03a 	or	r5,r5,r2
  80ea04:	28c6b03a 	or	r3,r5,r3
  80ea08:	9005883a 	mov	r2,r18
  80ea0c:	dfc00d17 	ldw	ra,52(sp)
  80ea10:	df000c17 	ldw	fp,48(sp)
  80ea14:	ddc00b17 	ldw	r23,44(sp)
  80ea18:	dd800a17 	ldw	r22,40(sp)
  80ea1c:	dd400917 	ldw	r21,36(sp)
  80ea20:	dd000817 	ldw	r20,32(sp)
  80ea24:	dcc00717 	ldw	r19,28(sp)
  80ea28:	dc800617 	ldw	r18,24(sp)
  80ea2c:	dc400517 	ldw	r17,20(sp)
  80ea30:	dc000417 	ldw	r16,16(sp)
  80ea34:	dec00e04 	addi	sp,sp,56
  80ea38:	f800283a 	ret
  80ea3c:	2404b03a 	or	r2,r4,r16
  80ea40:	2027883a 	mov	r19,r4
  80ea44:	10003926 	beq	r2,zero,80eb2c <__divdf3+0x2c0>
  80ea48:	80012e26 	beq	r16,zero,80ef04 <__divdf3+0x698>
  80ea4c:	8009883a 	mov	r4,r16
  80ea50:	d9800315 	stw	r6,12(sp)
  80ea54:	d9c00215 	stw	r7,8(sp)
  80ea58:	08105c40 	call	8105c4 <__clzsi2>
  80ea5c:	d9800317 	ldw	r6,12(sp)
  80ea60:	d9c00217 	ldw	r7,8(sp)
  80ea64:	113ffd44 	addi	r4,r2,-11
  80ea68:	00c00704 	movi	r3,28
  80ea6c:	19012116 	blt	r3,r4,80eef4 <__divdf3+0x688>
  80ea70:	00c00744 	movi	r3,29
  80ea74:	147ffe04 	addi	r17,r2,-8
  80ea78:	1907c83a 	sub	r3,r3,r4
  80ea7c:	8460983a 	sll	r16,r16,r17
  80ea80:	98c6d83a 	srl	r3,r19,r3
  80ea84:	9c64983a 	sll	r18,r19,r17
  80ea88:	1c20b03a 	or	r16,r3,r16
  80ea8c:	1080fcc4 	addi	r2,r2,1011
  80ea90:	00abc83a 	sub	r21,zero,r2
  80ea94:	0027883a 	mov	r19,zero
  80ea98:	0013883a 	mov	r9,zero
  80ea9c:	003f9106 	br	80e8e4 <__alt_mem_onchip_mem+0xff78e8e4>
  80eaa0:	3446b03a 	or	r3,r6,r17
  80eaa4:	18001f1e 	bne	r3,zero,80eb24 <__divdf3+0x2b8>
  80eaa8:	0023883a 	mov	r17,zero
  80eaac:	0011883a 	mov	r8,zero
  80eab0:	01c00084 	movi	r7,2
  80eab4:	003f9d06 	br	80e92c <__alt_mem_onchip_mem+0xff78e92c>
  80eab8:	3446b03a 	or	r3,r6,r17
  80eabc:	18001526 	beq	r3,zero,80eb14 <__divdf3+0x2a8>
  80eac0:	88011b26 	beq	r17,zero,80ef30 <__divdf3+0x6c4>
  80eac4:	8809883a 	mov	r4,r17
  80eac8:	d9800315 	stw	r6,12(sp)
  80eacc:	da400115 	stw	r9,4(sp)
  80ead0:	08105c40 	call	8105c4 <__clzsi2>
  80ead4:	d9800317 	ldw	r6,12(sp)
  80ead8:	da400117 	ldw	r9,4(sp)
  80eadc:	113ffd44 	addi	r4,r2,-11
  80eae0:	00c00704 	movi	r3,28
  80eae4:	19010e16 	blt	r3,r4,80ef20 <__divdf3+0x6b4>
  80eae8:	00c00744 	movi	r3,29
  80eaec:	123ffe04 	addi	r8,r2,-8
  80eaf0:	1907c83a 	sub	r3,r3,r4
  80eaf4:	8a22983a 	sll	r17,r17,r8
  80eaf8:	30c6d83a 	srl	r3,r6,r3
  80eafc:	3210983a 	sll	r8,r6,r8
  80eb00:	1c62b03a 	or	r17,r3,r17
  80eb04:	1080fcc4 	addi	r2,r2,1011
  80eb08:	0085c83a 	sub	r2,zero,r2
  80eb0c:	000f883a 	mov	r7,zero
  80eb10:	003f8606 	br	80e92c <__alt_mem_onchip_mem+0xff78e92c>
  80eb14:	0023883a 	mov	r17,zero
  80eb18:	0011883a 	mov	r8,zero
  80eb1c:	01c00044 	movi	r7,1
  80eb20:	003f8206 	br	80e92c <__alt_mem_onchip_mem+0xff78e92c>
  80eb24:	01c000c4 	movi	r7,3
  80eb28:	003f8006 	br	80e92c <__alt_mem_onchip_mem+0xff78e92c>
  80eb2c:	04c00104 	movi	r19,4
  80eb30:	0021883a 	mov	r16,zero
  80eb34:	0025883a 	mov	r18,zero
  80eb38:	02400044 	movi	r9,1
  80eb3c:	003f6906 	br	80e8e4 <__alt_mem_onchip_mem+0xff78e8e4>
  80eb40:	04c00304 	movi	r19,12
  80eb44:	024000c4 	movi	r9,3
  80eb48:	003f6606 	br	80e8e4 <__alt_mem_onchip_mem+0xff78e8e4>
  80eb4c:	01400434 	movhi	r5,16
  80eb50:	0007883a 	mov	r3,zero
  80eb54:	297fffc4 	addi	r5,r5,-1
  80eb58:	04bfffc4 	movi	r18,-1
  80eb5c:	0081ffc4 	movi	r2,2047
  80eb60:	003fa106 	br	80e9e8 <__alt_mem_onchip_mem+0xff78e9e8>
  80eb64:	00c00044 	movi	r3,1
  80eb68:	1887c83a 	sub	r3,r3,r2
  80eb6c:	01000e04 	movi	r4,56
  80eb70:	20c1210e 	bge	r4,r3,80eff8 <__divdf3+0x78c>
  80eb74:	98c0004c 	andi	r3,r19,1
  80eb78:	0005883a 	mov	r2,zero
  80eb7c:	000b883a 	mov	r5,zero
  80eb80:	0025883a 	mov	r18,zero
  80eb84:	003f9806 	br	80e9e8 <__alt_mem_onchip_mem+0xff78e9e8>
  80eb88:	8c00fd36 	bltu	r17,r16,80ef80 <__divdf3+0x714>
  80eb8c:	8440fb26 	beq	r16,r17,80ef7c <__divdf3+0x710>
  80eb90:	8007883a 	mov	r3,r16
  80eb94:	ad7fffc4 	addi	r21,r21,-1
  80eb98:	0021883a 	mov	r16,zero
  80eb9c:	4004d63a 	srli	r2,r8,24
  80eba0:	8822923a 	slli	r17,r17,8
  80eba4:	1809883a 	mov	r4,r3
  80eba8:	402c923a 	slli	r22,r8,8
  80ebac:	88b8b03a 	or	fp,r17,r2
  80ebb0:	e028d43a 	srli	r20,fp,16
  80ebb4:	d8c00015 	stw	r3,0(sp)
  80ebb8:	e5ffffcc 	andi	r23,fp,65535
  80ebbc:	a00b883a 	mov	r5,r20
  80ebc0:	080df040 	call	80df04 <__udivsi3>
  80ebc4:	d8c00017 	ldw	r3,0(sp)
  80ebc8:	a00b883a 	mov	r5,r20
  80ebcc:	d8800315 	stw	r2,12(sp)
  80ebd0:	1809883a 	mov	r4,r3
  80ebd4:	080df680 	call	80df68 <__umodsi3>
  80ebd8:	d9800317 	ldw	r6,12(sp)
  80ebdc:	1006943a 	slli	r3,r2,16
  80ebe0:	9004d43a 	srli	r2,r18,16
  80ebe4:	b9a3383a 	mul	r17,r23,r6
  80ebe8:	10c4b03a 	or	r2,r2,r3
  80ebec:	1440062e 	bgeu	r2,r17,80ec08 <__divdf3+0x39c>
  80ebf0:	1705883a 	add	r2,r2,fp
  80ebf4:	30ffffc4 	addi	r3,r6,-1
  80ebf8:	1700ee36 	bltu	r2,fp,80efb4 <__divdf3+0x748>
  80ebfc:	1440ed2e 	bgeu	r2,r17,80efb4 <__divdf3+0x748>
  80ec00:	31bfff84 	addi	r6,r6,-2
  80ec04:	1705883a 	add	r2,r2,fp
  80ec08:	1463c83a 	sub	r17,r2,r17
  80ec0c:	a00b883a 	mov	r5,r20
  80ec10:	8809883a 	mov	r4,r17
  80ec14:	d9800315 	stw	r6,12(sp)
  80ec18:	080df040 	call	80df04 <__udivsi3>
  80ec1c:	a00b883a 	mov	r5,r20
  80ec20:	8809883a 	mov	r4,r17
  80ec24:	d8800215 	stw	r2,8(sp)
  80ec28:	080df680 	call	80df68 <__umodsi3>
  80ec2c:	d9c00217 	ldw	r7,8(sp)
  80ec30:	1004943a 	slli	r2,r2,16
  80ec34:	94bfffcc 	andi	r18,r18,65535
  80ec38:	b9d1383a 	mul	r8,r23,r7
  80ec3c:	90a4b03a 	or	r18,r18,r2
  80ec40:	d9800317 	ldw	r6,12(sp)
  80ec44:	9200062e 	bgeu	r18,r8,80ec60 <__divdf3+0x3f4>
  80ec48:	9725883a 	add	r18,r18,fp
  80ec4c:	38bfffc4 	addi	r2,r7,-1
  80ec50:	9700d636 	bltu	r18,fp,80efac <__divdf3+0x740>
  80ec54:	9200d52e 	bgeu	r18,r8,80efac <__divdf3+0x740>
  80ec58:	39ffff84 	addi	r7,r7,-2
  80ec5c:	9725883a 	add	r18,r18,fp
  80ec60:	3004943a 	slli	r2,r6,16
  80ec64:	b012d43a 	srli	r9,r22,16
  80ec68:	b1bfffcc 	andi	r6,r22,65535
  80ec6c:	11e2b03a 	or	r17,r2,r7
  80ec70:	8806d43a 	srli	r3,r17,16
  80ec74:	893fffcc 	andi	r4,r17,65535
  80ec78:	218b383a 	mul	r5,r4,r6
  80ec7c:	30c5383a 	mul	r2,r6,r3
  80ec80:	2249383a 	mul	r4,r4,r9
  80ec84:	280ed43a 	srli	r7,r5,16
  80ec88:	9225c83a 	sub	r18,r18,r8
  80ec8c:	2089883a 	add	r4,r4,r2
  80ec90:	3909883a 	add	r4,r7,r4
  80ec94:	1a47383a 	mul	r3,r3,r9
  80ec98:	2080022e 	bgeu	r4,r2,80eca4 <__divdf3+0x438>
  80ec9c:	00800074 	movhi	r2,1
  80eca0:	1887883a 	add	r3,r3,r2
  80eca4:	2004d43a 	srli	r2,r4,16
  80eca8:	2008943a 	slli	r4,r4,16
  80ecac:	297fffcc 	andi	r5,r5,65535
  80ecb0:	10c7883a 	add	r3,r2,r3
  80ecb4:	2149883a 	add	r4,r4,r5
  80ecb8:	90c0a536 	bltu	r18,r3,80ef50 <__divdf3+0x6e4>
  80ecbc:	90c0bf26 	beq	r18,r3,80efbc <__divdf3+0x750>
  80ecc0:	90c7c83a 	sub	r3,r18,r3
  80ecc4:	810fc83a 	sub	r7,r16,r4
  80ecc8:	81e5803a 	cmpltu	r18,r16,r7
  80eccc:	1ca5c83a 	sub	r18,r3,r18
  80ecd0:	e480c126 	beq	fp,r18,80efd8 <__divdf3+0x76c>
  80ecd4:	a00b883a 	mov	r5,r20
  80ecd8:	9009883a 	mov	r4,r18
  80ecdc:	d9800315 	stw	r6,12(sp)
  80ece0:	d9c00215 	stw	r7,8(sp)
  80ece4:	da400115 	stw	r9,4(sp)
  80ece8:	080df040 	call	80df04 <__udivsi3>
  80ecec:	a00b883a 	mov	r5,r20
  80ecf0:	9009883a 	mov	r4,r18
  80ecf4:	d8800015 	stw	r2,0(sp)
  80ecf8:	080df680 	call	80df68 <__umodsi3>
  80ecfc:	d9c00217 	ldw	r7,8(sp)
  80ed00:	da000017 	ldw	r8,0(sp)
  80ed04:	1006943a 	slli	r3,r2,16
  80ed08:	3804d43a 	srli	r2,r7,16
  80ed0c:	ba21383a 	mul	r16,r23,r8
  80ed10:	d9800317 	ldw	r6,12(sp)
  80ed14:	10c4b03a 	or	r2,r2,r3
  80ed18:	da400117 	ldw	r9,4(sp)
  80ed1c:	1400062e 	bgeu	r2,r16,80ed38 <__divdf3+0x4cc>
  80ed20:	1705883a 	add	r2,r2,fp
  80ed24:	40ffffc4 	addi	r3,r8,-1
  80ed28:	1700ad36 	bltu	r2,fp,80efe0 <__divdf3+0x774>
  80ed2c:	1400ac2e 	bgeu	r2,r16,80efe0 <__divdf3+0x774>
  80ed30:	423fff84 	addi	r8,r8,-2
  80ed34:	1705883a 	add	r2,r2,fp
  80ed38:	1421c83a 	sub	r16,r2,r16
  80ed3c:	a00b883a 	mov	r5,r20
  80ed40:	8009883a 	mov	r4,r16
  80ed44:	d9800315 	stw	r6,12(sp)
  80ed48:	d9c00215 	stw	r7,8(sp)
  80ed4c:	da000015 	stw	r8,0(sp)
  80ed50:	da400115 	stw	r9,4(sp)
  80ed54:	080df040 	call	80df04 <__udivsi3>
  80ed58:	8009883a 	mov	r4,r16
  80ed5c:	a00b883a 	mov	r5,r20
  80ed60:	1025883a 	mov	r18,r2
  80ed64:	080df680 	call	80df68 <__umodsi3>
  80ed68:	d9c00217 	ldw	r7,8(sp)
  80ed6c:	1004943a 	slli	r2,r2,16
  80ed70:	bcaf383a 	mul	r23,r23,r18
  80ed74:	393fffcc 	andi	r4,r7,65535
  80ed78:	2088b03a 	or	r4,r4,r2
  80ed7c:	d9800317 	ldw	r6,12(sp)
  80ed80:	da000017 	ldw	r8,0(sp)
  80ed84:	da400117 	ldw	r9,4(sp)
  80ed88:	25c0062e 	bgeu	r4,r23,80eda4 <__divdf3+0x538>
  80ed8c:	2709883a 	add	r4,r4,fp
  80ed90:	90bfffc4 	addi	r2,r18,-1
  80ed94:	27009436 	bltu	r4,fp,80efe8 <__divdf3+0x77c>
  80ed98:	25c0932e 	bgeu	r4,r23,80efe8 <__divdf3+0x77c>
  80ed9c:	94bfff84 	addi	r18,r18,-2
  80eda0:	2709883a 	add	r4,r4,fp
  80eda4:	4004943a 	slli	r2,r8,16
  80eda8:	25efc83a 	sub	r23,r4,r23
  80edac:	1490b03a 	or	r8,r2,r18
  80edb0:	4008d43a 	srli	r4,r8,16
  80edb4:	40ffffcc 	andi	r3,r8,65535
  80edb8:	30c5383a 	mul	r2,r6,r3
  80edbc:	1a47383a 	mul	r3,r3,r9
  80edc0:	310d383a 	mul	r6,r6,r4
  80edc4:	100ad43a 	srli	r5,r2,16
  80edc8:	4913383a 	mul	r9,r9,r4
  80edcc:	1987883a 	add	r3,r3,r6
  80edd0:	28c7883a 	add	r3,r5,r3
  80edd4:	1980022e 	bgeu	r3,r6,80ede0 <__divdf3+0x574>
  80edd8:	01000074 	movhi	r4,1
  80eddc:	4913883a 	add	r9,r9,r4
  80ede0:	1808d43a 	srli	r4,r3,16
  80ede4:	1806943a 	slli	r3,r3,16
  80ede8:	10bfffcc 	andi	r2,r2,65535
  80edec:	2253883a 	add	r9,r4,r9
  80edf0:	1887883a 	add	r3,r3,r2
  80edf4:	ba403836 	bltu	r23,r9,80eed8 <__divdf3+0x66c>
  80edf8:	ba403626 	beq	r23,r9,80eed4 <__divdf3+0x668>
  80edfc:	42000054 	ori	r8,r8,1
  80ee00:	a880ffc4 	addi	r2,r21,1023
  80ee04:	00bf570e 	bge	zero,r2,80eb64 <__alt_mem_onchip_mem+0xff78eb64>
  80ee08:	40c001cc 	andi	r3,r8,7
  80ee0c:	18000726 	beq	r3,zero,80ee2c <__divdf3+0x5c0>
  80ee10:	40c003cc 	andi	r3,r8,15
  80ee14:	01000104 	movi	r4,4
  80ee18:	19000426 	beq	r3,r4,80ee2c <__divdf3+0x5c0>
  80ee1c:	4107883a 	add	r3,r8,r4
  80ee20:	1a11803a 	cmpltu	r8,r3,r8
  80ee24:	8a23883a 	add	r17,r17,r8
  80ee28:	1811883a 	mov	r8,r3
  80ee2c:	88c0402c 	andhi	r3,r17,256
  80ee30:	18000426 	beq	r3,zero,80ee44 <__divdf3+0x5d8>
  80ee34:	00ffc034 	movhi	r3,65280
  80ee38:	18ffffc4 	addi	r3,r3,-1
  80ee3c:	a8810004 	addi	r2,r21,1024
  80ee40:	88e2703a 	and	r17,r17,r3
  80ee44:	00c1ff84 	movi	r3,2046
  80ee48:	18bee316 	blt	r3,r2,80e9d8 <__alt_mem_onchip_mem+0xff78e9d8>
  80ee4c:	8824977a 	slli	r18,r17,29
  80ee50:	4010d0fa 	srli	r8,r8,3
  80ee54:	8822927a 	slli	r17,r17,9
  80ee58:	1081ffcc 	andi	r2,r2,2047
  80ee5c:	9224b03a 	or	r18,r18,r8
  80ee60:	880ad33a 	srli	r5,r17,12
  80ee64:	98c0004c 	andi	r3,r19,1
  80ee68:	003edf06 	br	80e9e8 <__alt_mem_onchip_mem+0xff78e9e8>
  80ee6c:	8080022c 	andhi	r2,r16,8
  80ee70:	10001226 	beq	r2,zero,80eebc <__divdf3+0x650>
  80ee74:	8880022c 	andhi	r2,r17,8
  80ee78:	1000101e 	bne	r2,zero,80eebc <__divdf3+0x650>
  80ee7c:	00800434 	movhi	r2,16
  80ee80:	89400234 	orhi	r5,r17,8
  80ee84:	10bfffc4 	addi	r2,r2,-1
  80ee88:	b007883a 	mov	r3,r22
  80ee8c:	288a703a 	and	r5,r5,r2
  80ee90:	4025883a 	mov	r18,r8
  80ee94:	003f3106 	br	80eb5c <__alt_mem_onchip_mem+0xff78eb5c>
  80ee98:	008000c4 	movi	r2,3
  80ee9c:	3880a626 	beq	r7,r2,80f138 <__divdf3+0x8cc>
  80eea0:	00800044 	movi	r2,1
  80eea4:	3880521e 	bne	r7,r2,80eff0 <__divdf3+0x784>
  80eea8:	b807883a 	mov	r3,r23
  80eeac:	0005883a 	mov	r2,zero
  80eeb0:	000b883a 	mov	r5,zero
  80eeb4:	0025883a 	mov	r18,zero
  80eeb8:	003ecb06 	br	80e9e8 <__alt_mem_onchip_mem+0xff78e9e8>
  80eebc:	00800434 	movhi	r2,16
  80eec0:	81400234 	orhi	r5,r16,8
  80eec4:	10bfffc4 	addi	r2,r2,-1
  80eec8:	a007883a 	mov	r3,r20
  80eecc:	288a703a 	and	r5,r5,r2
  80eed0:	003f2206 	br	80eb5c <__alt_mem_onchip_mem+0xff78eb5c>
  80eed4:	183fca26 	beq	r3,zero,80ee00 <__alt_mem_onchip_mem+0xff78ee00>
  80eed8:	e5ef883a 	add	r23,fp,r23
  80eedc:	40bfffc4 	addi	r2,r8,-1
  80eee0:	bf00392e 	bgeu	r23,fp,80efc8 <__divdf3+0x75c>
  80eee4:	1011883a 	mov	r8,r2
  80eee8:	ba7fc41e 	bne	r23,r9,80edfc <__alt_mem_onchip_mem+0xff78edfc>
  80eeec:	b0ffc31e 	bne	r22,r3,80edfc <__alt_mem_onchip_mem+0xff78edfc>
  80eef0:	003fc306 	br	80ee00 <__alt_mem_onchip_mem+0xff78ee00>
  80eef4:	143ff604 	addi	r16,r2,-40
  80eef8:	9c20983a 	sll	r16,r19,r16
  80eefc:	0025883a 	mov	r18,zero
  80ef00:	003ee206 	br	80ea8c <__alt_mem_onchip_mem+0xff78ea8c>
  80ef04:	d9800315 	stw	r6,12(sp)
  80ef08:	d9c00215 	stw	r7,8(sp)
  80ef0c:	08105c40 	call	8105c4 <__clzsi2>
  80ef10:	10800804 	addi	r2,r2,32
  80ef14:	d9c00217 	ldw	r7,8(sp)
  80ef18:	d9800317 	ldw	r6,12(sp)
  80ef1c:	003ed106 	br	80ea64 <__alt_mem_onchip_mem+0xff78ea64>
  80ef20:	147ff604 	addi	r17,r2,-40
  80ef24:	3462983a 	sll	r17,r6,r17
  80ef28:	0011883a 	mov	r8,zero
  80ef2c:	003ef506 	br	80eb04 <__alt_mem_onchip_mem+0xff78eb04>
  80ef30:	3009883a 	mov	r4,r6
  80ef34:	d9800315 	stw	r6,12(sp)
  80ef38:	da400115 	stw	r9,4(sp)
  80ef3c:	08105c40 	call	8105c4 <__clzsi2>
  80ef40:	10800804 	addi	r2,r2,32
  80ef44:	da400117 	ldw	r9,4(sp)
  80ef48:	d9800317 	ldw	r6,12(sp)
  80ef4c:	003ee306 	br	80eadc <__alt_mem_onchip_mem+0xff78eadc>
  80ef50:	85a1883a 	add	r16,r16,r22
  80ef54:	8585803a 	cmpltu	r2,r16,r22
  80ef58:	1705883a 	add	r2,r2,fp
  80ef5c:	14a5883a 	add	r18,r2,r18
  80ef60:	88bfffc4 	addi	r2,r17,-1
  80ef64:	e4800c2e 	bgeu	fp,r18,80ef98 <__divdf3+0x72c>
  80ef68:	90c03e36 	bltu	r18,r3,80f064 <__divdf3+0x7f8>
  80ef6c:	1c806926 	beq	r3,r18,80f114 <__divdf3+0x8a8>
  80ef70:	90c7c83a 	sub	r3,r18,r3
  80ef74:	1023883a 	mov	r17,r2
  80ef78:	003f5206 	br	80ecc4 <__alt_mem_onchip_mem+0xff78ecc4>
  80ef7c:	923f0436 	bltu	r18,r8,80eb90 <__alt_mem_onchip_mem+0xff78eb90>
  80ef80:	800897fa 	slli	r4,r16,31
  80ef84:	9004d07a 	srli	r2,r18,1
  80ef88:	8006d07a 	srli	r3,r16,1
  80ef8c:	902097fa 	slli	r16,r18,31
  80ef90:	20a4b03a 	or	r18,r4,r2
  80ef94:	003f0106 	br	80eb9c <__alt_mem_onchip_mem+0xff78eb9c>
  80ef98:	e4bff51e 	bne	fp,r18,80ef70 <__alt_mem_onchip_mem+0xff78ef70>
  80ef9c:	85bff22e 	bgeu	r16,r22,80ef68 <__alt_mem_onchip_mem+0xff78ef68>
  80efa0:	e0c7c83a 	sub	r3,fp,r3
  80efa4:	1023883a 	mov	r17,r2
  80efa8:	003f4606 	br	80ecc4 <__alt_mem_onchip_mem+0xff78ecc4>
  80efac:	100f883a 	mov	r7,r2
  80efb0:	003f2b06 	br	80ec60 <__alt_mem_onchip_mem+0xff78ec60>
  80efb4:	180d883a 	mov	r6,r3
  80efb8:	003f1306 	br	80ec08 <__alt_mem_onchip_mem+0xff78ec08>
  80efbc:	813fe436 	bltu	r16,r4,80ef50 <__alt_mem_onchip_mem+0xff78ef50>
  80efc0:	0007883a 	mov	r3,zero
  80efc4:	003f3f06 	br	80ecc4 <__alt_mem_onchip_mem+0xff78ecc4>
  80efc8:	ba402c36 	bltu	r23,r9,80f07c <__divdf3+0x810>
  80efcc:	4dc05426 	beq	r9,r23,80f120 <__divdf3+0x8b4>
  80efd0:	1011883a 	mov	r8,r2
  80efd4:	003f8906 	br	80edfc <__alt_mem_onchip_mem+0xff78edfc>
  80efd8:	023fffc4 	movi	r8,-1
  80efdc:	003f8806 	br	80ee00 <__alt_mem_onchip_mem+0xff78ee00>
  80efe0:	1811883a 	mov	r8,r3
  80efe4:	003f5406 	br	80ed38 <__alt_mem_onchip_mem+0xff78ed38>
  80efe8:	1025883a 	mov	r18,r2
  80efec:	003f6d06 	br	80eda4 <__alt_mem_onchip_mem+0xff78eda4>
  80eff0:	b827883a 	mov	r19,r23
  80eff4:	003f8206 	br	80ee00 <__alt_mem_onchip_mem+0xff78ee00>
  80eff8:	010007c4 	movi	r4,31
  80effc:	20c02616 	blt	r4,r3,80f098 <__divdf3+0x82c>
  80f000:	00800804 	movi	r2,32
  80f004:	10c5c83a 	sub	r2,r2,r3
  80f008:	888a983a 	sll	r5,r17,r2
  80f00c:	40c8d83a 	srl	r4,r8,r3
  80f010:	4084983a 	sll	r2,r8,r2
  80f014:	88e2d83a 	srl	r17,r17,r3
  80f018:	2906b03a 	or	r3,r5,r4
  80f01c:	1004c03a 	cmpne	r2,r2,zero
  80f020:	1886b03a 	or	r3,r3,r2
  80f024:	188001cc 	andi	r2,r3,7
  80f028:	10000726 	beq	r2,zero,80f048 <__divdf3+0x7dc>
  80f02c:	188003cc 	andi	r2,r3,15
  80f030:	01000104 	movi	r4,4
  80f034:	11000426 	beq	r2,r4,80f048 <__divdf3+0x7dc>
  80f038:	1805883a 	mov	r2,r3
  80f03c:	10c00104 	addi	r3,r2,4
  80f040:	1885803a 	cmpltu	r2,r3,r2
  80f044:	88a3883a 	add	r17,r17,r2
  80f048:	8880202c 	andhi	r2,r17,128
  80f04c:	10002726 	beq	r2,zero,80f0ec <__divdf3+0x880>
  80f050:	98c0004c 	andi	r3,r19,1
  80f054:	00800044 	movi	r2,1
  80f058:	000b883a 	mov	r5,zero
  80f05c:	0025883a 	mov	r18,zero
  80f060:	003e6106 	br	80e9e8 <__alt_mem_onchip_mem+0xff78e9e8>
  80f064:	85a1883a 	add	r16,r16,r22
  80f068:	8585803a 	cmpltu	r2,r16,r22
  80f06c:	1705883a 	add	r2,r2,fp
  80f070:	14a5883a 	add	r18,r2,r18
  80f074:	8c7fff84 	addi	r17,r17,-2
  80f078:	003f1106 	br	80ecc0 <__alt_mem_onchip_mem+0xff78ecc0>
  80f07c:	b589883a 	add	r4,r22,r22
  80f080:	25ad803a 	cmpltu	r22,r4,r22
  80f084:	b739883a 	add	fp,r22,fp
  80f088:	40bfff84 	addi	r2,r8,-2
  80f08c:	bf2f883a 	add	r23,r23,fp
  80f090:	202d883a 	mov	r22,r4
  80f094:	003f9306 	br	80eee4 <__alt_mem_onchip_mem+0xff78eee4>
  80f098:	013ff844 	movi	r4,-31
  80f09c:	2085c83a 	sub	r2,r4,r2
  80f0a0:	8888d83a 	srl	r4,r17,r2
  80f0a4:	00800804 	movi	r2,32
  80f0a8:	18802126 	beq	r3,r2,80f130 <__divdf3+0x8c4>
  80f0ac:	00801004 	movi	r2,64
  80f0b0:	10c5c83a 	sub	r2,r2,r3
  80f0b4:	8884983a 	sll	r2,r17,r2
  80f0b8:	1204b03a 	or	r2,r2,r8
  80f0bc:	1004c03a 	cmpne	r2,r2,zero
  80f0c0:	2084b03a 	or	r2,r4,r2
  80f0c4:	144001cc 	andi	r17,r2,7
  80f0c8:	88000d1e 	bne	r17,zero,80f100 <__divdf3+0x894>
  80f0cc:	000b883a 	mov	r5,zero
  80f0d0:	1024d0fa 	srli	r18,r2,3
  80f0d4:	98c0004c 	andi	r3,r19,1
  80f0d8:	0005883a 	mov	r2,zero
  80f0dc:	9464b03a 	or	r18,r18,r17
  80f0e0:	003e4106 	br	80e9e8 <__alt_mem_onchip_mem+0xff78e9e8>
  80f0e4:	1007883a 	mov	r3,r2
  80f0e8:	0023883a 	mov	r17,zero
  80f0ec:	880a927a 	slli	r5,r17,9
  80f0f0:	1805883a 	mov	r2,r3
  80f0f4:	8822977a 	slli	r17,r17,29
  80f0f8:	280ad33a 	srli	r5,r5,12
  80f0fc:	003ff406 	br	80f0d0 <__alt_mem_onchip_mem+0xff78f0d0>
  80f100:	10c003cc 	andi	r3,r2,15
  80f104:	01000104 	movi	r4,4
  80f108:	193ff626 	beq	r3,r4,80f0e4 <__alt_mem_onchip_mem+0xff78f0e4>
  80f10c:	0023883a 	mov	r17,zero
  80f110:	003fca06 	br	80f03c <__alt_mem_onchip_mem+0xff78f03c>
  80f114:	813fd336 	bltu	r16,r4,80f064 <__alt_mem_onchip_mem+0xff78f064>
  80f118:	1023883a 	mov	r17,r2
  80f11c:	003fa806 	br	80efc0 <__alt_mem_onchip_mem+0xff78efc0>
  80f120:	b0ffd636 	bltu	r22,r3,80f07c <__alt_mem_onchip_mem+0xff78f07c>
  80f124:	1011883a 	mov	r8,r2
  80f128:	b0ff341e 	bne	r22,r3,80edfc <__alt_mem_onchip_mem+0xff78edfc>
  80f12c:	003f3406 	br	80ee00 <__alt_mem_onchip_mem+0xff78ee00>
  80f130:	0005883a 	mov	r2,zero
  80f134:	003fe006 	br	80f0b8 <__alt_mem_onchip_mem+0xff78f0b8>
  80f138:	00800434 	movhi	r2,16
  80f13c:	89400234 	orhi	r5,r17,8
  80f140:	10bfffc4 	addi	r2,r2,-1
  80f144:	b807883a 	mov	r3,r23
  80f148:	288a703a 	and	r5,r5,r2
  80f14c:	4025883a 	mov	r18,r8
  80f150:	003e8206 	br	80eb5c <__alt_mem_onchip_mem+0xff78eb5c>

0080f154 <__eqdf2>:
  80f154:	2804d53a 	srli	r2,r5,20
  80f158:	3806d53a 	srli	r3,r7,20
  80f15c:	02000434 	movhi	r8,16
  80f160:	423fffc4 	addi	r8,r8,-1
  80f164:	1081ffcc 	andi	r2,r2,2047
  80f168:	0281ffc4 	movi	r10,2047
  80f16c:	2a12703a 	and	r9,r5,r8
  80f170:	18c1ffcc 	andi	r3,r3,2047
  80f174:	3a10703a 	and	r8,r7,r8
  80f178:	280ad7fa 	srli	r5,r5,31
  80f17c:	380ed7fa 	srli	r7,r7,31
  80f180:	12801026 	beq	r2,r10,80f1c4 <__eqdf2+0x70>
  80f184:	0281ffc4 	movi	r10,2047
  80f188:	1a800a26 	beq	r3,r10,80f1b4 <__eqdf2+0x60>
  80f18c:	10c00226 	beq	r2,r3,80f198 <__eqdf2+0x44>
  80f190:	00800044 	movi	r2,1
  80f194:	f800283a 	ret
  80f198:	4a3ffd1e 	bne	r9,r8,80f190 <__alt_mem_onchip_mem+0xff78f190>
  80f19c:	21bffc1e 	bne	r4,r6,80f190 <__alt_mem_onchip_mem+0xff78f190>
  80f1a0:	29c00c26 	beq	r5,r7,80f1d4 <__eqdf2+0x80>
  80f1a4:	103ffa1e 	bne	r2,zero,80f190 <__alt_mem_onchip_mem+0xff78f190>
  80f1a8:	2244b03a 	or	r2,r4,r9
  80f1ac:	1004c03a 	cmpne	r2,r2,zero
  80f1b0:	f800283a 	ret
  80f1b4:	3214b03a 	or	r10,r6,r8
  80f1b8:	503ff426 	beq	r10,zero,80f18c <__alt_mem_onchip_mem+0xff78f18c>
  80f1bc:	00800044 	movi	r2,1
  80f1c0:	f800283a 	ret
  80f1c4:	2254b03a 	or	r10,r4,r9
  80f1c8:	503fee26 	beq	r10,zero,80f184 <__alt_mem_onchip_mem+0xff78f184>
  80f1cc:	00800044 	movi	r2,1
  80f1d0:	f800283a 	ret
  80f1d4:	0005883a 	mov	r2,zero
  80f1d8:	f800283a 	ret

0080f1dc <__gedf2>:
  80f1dc:	2804d53a 	srli	r2,r5,20
  80f1e0:	3806d53a 	srli	r3,r7,20
  80f1e4:	02000434 	movhi	r8,16
  80f1e8:	423fffc4 	addi	r8,r8,-1
  80f1ec:	1081ffcc 	andi	r2,r2,2047
  80f1f0:	0241ffc4 	movi	r9,2047
  80f1f4:	2a14703a 	and	r10,r5,r8
  80f1f8:	18c1ffcc 	andi	r3,r3,2047
  80f1fc:	3a10703a 	and	r8,r7,r8
  80f200:	280ad7fa 	srli	r5,r5,31
  80f204:	380ed7fa 	srli	r7,r7,31
  80f208:	12401d26 	beq	r2,r9,80f280 <__gedf2+0xa4>
  80f20c:	0241ffc4 	movi	r9,2047
  80f210:	1a401226 	beq	r3,r9,80f25c <__gedf2+0x80>
  80f214:	1000081e 	bne	r2,zero,80f238 <__gedf2+0x5c>
  80f218:	2296b03a 	or	r11,r4,r10
  80f21c:	5813003a 	cmpeq	r9,r11,zero
  80f220:	1800091e 	bne	r3,zero,80f248 <__gedf2+0x6c>
  80f224:	3218b03a 	or	r12,r6,r8
  80f228:	6000071e 	bne	r12,zero,80f248 <__gedf2+0x6c>
  80f22c:	0005883a 	mov	r2,zero
  80f230:	5800101e 	bne	r11,zero,80f274 <__gedf2+0x98>
  80f234:	f800283a 	ret
  80f238:	18000c1e 	bne	r3,zero,80f26c <__gedf2+0x90>
  80f23c:	3212b03a 	or	r9,r6,r8
  80f240:	48000c26 	beq	r9,zero,80f274 <__gedf2+0x98>
  80f244:	0013883a 	mov	r9,zero
  80f248:	39c03fcc 	andi	r7,r7,255
  80f24c:	48000826 	beq	r9,zero,80f270 <__gedf2+0x94>
  80f250:	38000926 	beq	r7,zero,80f278 <__gedf2+0x9c>
  80f254:	00800044 	movi	r2,1
  80f258:	f800283a 	ret
  80f25c:	3212b03a 	or	r9,r6,r8
  80f260:	483fec26 	beq	r9,zero,80f214 <__alt_mem_onchip_mem+0xff78f214>
  80f264:	00bfff84 	movi	r2,-2
  80f268:	f800283a 	ret
  80f26c:	39c03fcc 	andi	r7,r7,255
  80f270:	29c00626 	beq	r5,r7,80f28c <__gedf2+0xb0>
  80f274:	283ff726 	beq	r5,zero,80f254 <__alt_mem_onchip_mem+0xff78f254>
  80f278:	00bfffc4 	movi	r2,-1
  80f27c:	f800283a 	ret
  80f280:	2292b03a 	or	r9,r4,r10
  80f284:	483fe126 	beq	r9,zero,80f20c <__alt_mem_onchip_mem+0xff78f20c>
  80f288:	003ff606 	br	80f264 <__alt_mem_onchip_mem+0xff78f264>
  80f28c:	18bff916 	blt	r3,r2,80f274 <__alt_mem_onchip_mem+0xff78f274>
  80f290:	10c00316 	blt	r2,r3,80f2a0 <__gedf2+0xc4>
  80f294:	42bff736 	bltu	r8,r10,80f274 <__alt_mem_onchip_mem+0xff78f274>
  80f298:	52000326 	beq	r10,r8,80f2a8 <__gedf2+0xcc>
  80f29c:	5200042e 	bgeu	r10,r8,80f2b0 <__gedf2+0xd4>
  80f2a0:	283fec1e 	bne	r5,zero,80f254 <__alt_mem_onchip_mem+0xff78f254>
  80f2a4:	003ff406 	br	80f278 <__alt_mem_onchip_mem+0xff78f278>
  80f2a8:	313ff236 	bltu	r6,r4,80f274 <__alt_mem_onchip_mem+0xff78f274>
  80f2ac:	21bffc36 	bltu	r4,r6,80f2a0 <__alt_mem_onchip_mem+0xff78f2a0>
  80f2b0:	0005883a 	mov	r2,zero
  80f2b4:	f800283a 	ret

0080f2b8 <__ledf2>:
  80f2b8:	2804d53a 	srli	r2,r5,20
  80f2bc:	3810d53a 	srli	r8,r7,20
  80f2c0:	00c00434 	movhi	r3,16
  80f2c4:	18ffffc4 	addi	r3,r3,-1
  80f2c8:	1081ffcc 	andi	r2,r2,2047
  80f2cc:	0241ffc4 	movi	r9,2047
  80f2d0:	28d4703a 	and	r10,r5,r3
  80f2d4:	4201ffcc 	andi	r8,r8,2047
  80f2d8:	38c6703a 	and	r3,r7,r3
  80f2dc:	280ad7fa 	srli	r5,r5,31
  80f2e0:	380ed7fa 	srli	r7,r7,31
  80f2e4:	12401f26 	beq	r2,r9,80f364 <__ledf2+0xac>
  80f2e8:	0241ffc4 	movi	r9,2047
  80f2ec:	42401426 	beq	r8,r9,80f340 <__ledf2+0x88>
  80f2f0:	1000091e 	bne	r2,zero,80f318 <__ledf2+0x60>
  80f2f4:	2296b03a 	or	r11,r4,r10
  80f2f8:	5813003a 	cmpeq	r9,r11,zero
  80f2fc:	29403fcc 	andi	r5,r5,255
  80f300:	40000a1e 	bne	r8,zero,80f32c <__ledf2+0x74>
  80f304:	30d8b03a 	or	r12,r6,r3
  80f308:	6000081e 	bne	r12,zero,80f32c <__ledf2+0x74>
  80f30c:	0005883a 	mov	r2,zero
  80f310:	5800111e 	bne	r11,zero,80f358 <__ledf2+0xa0>
  80f314:	f800283a 	ret
  80f318:	29403fcc 	andi	r5,r5,255
  80f31c:	40000c1e 	bne	r8,zero,80f350 <__ledf2+0x98>
  80f320:	30d2b03a 	or	r9,r6,r3
  80f324:	48000c26 	beq	r9,zero,80f358 <__ledf2+0xa0>
  80f328:	0013883a 	mov	r9,zero
  80f32c:	39c03fcc 	andi	r7,r7,255
  80f330:	48000826 	beq	r9,zero,80f354 <__ledf2+0x9c>
  80f334:	38001126 	beq	r7,zero,80f37c <__ledf2+0xc4>
  80f338:	00800044 	movi	r2,1
  80f33c:	f800283a 	ret
  80f340:	30d2b03a 	or	r9,r6,r3
  80f344:	483fea26 	beq	r9,zero,80f2f0 <__alt_mem_onchip_mem+0xff78f2f0>
  80f348:	00800084 	movi	r2,2
  80f34c:	f800283a 	ret
  80f350:	39c03fcc 	andi	r7,r7,255
  80f354:	39400726 	beq	r7,r5,80f374 <__ledf2+0xbc>
  80f358:	2800081e 	bne	r5,zero,80f37c <__ledf2+0xc4>
  80f35c:	00800044 	movi	r2,1
  80f360:	f800283a 	ret
  80f364:	2292b03a 	or	r9,r4,r10
  80f368:	483fdf26 	beq	r9,zero,80f2e8 <__alt_mem_onchip_mem+0xff78f2e8>
  80f36c:	00800084 	movi	r2,2
  80f370:	f800283a 	ret
  80f374:	4080030e 	bge	r8,r2,80f384 <__ledf2+0xcc>
  80f378:	383fef26 	beq	r7,zero,80f338 <__alt_mem_onchip_mem+0xff78f338>
  80f37c:	00bfffc4 	movi	r2,-1
  80f380:	f800283a 	ret
  80f384:	123feb16 	blt	r2,r8,80f334 <__alt_mem_onchip_mem+0xff78f334>
  80f388:	1abff336 	bltu	r3,r10,80f358 <__alt_mem_onchip_mem+0xff78f358>
  80f38c:	50c00326 	beq	r10,r3,80f39c <__ledf2+0xe4>
  80f390:	50c0042e 	bgeu	r10,r3,80f3a4 <__ledf2+0xec>
  80f394:	283fe81e 	bne	r5,zero,80f338 <__alt_mem_onchip_mem+0xff78f338>
  80f398:	003ff806 	br	80f37c <__alt_mem_onchip_mem+0xff78f37c>
  80f39c:	313fee36 	bltu	r6,r4,80f358 <__alt_mem_onchip_mem+0xff78f358>
  80f3a0:	21bffc36 	bltu	r4,r6,80f394 <__alt_mem_onchip_mem+0xff78f394>
  80f3a4:	0005883a 	mov	r2,zero
  80f3a8:	f800283a 	ret

0080f3ac <__muldf3>:
  80f3ac:	defff304 	addi	sp,sp,-52
  80f3b0:	2804d53a 	srli	r2,r5,20
  80f3b4:	dd800915 	stw	r22,36(sp)
  80f3b8:	282cd7fa 	srli	r22,r5,31
  80f3bc:	dc000315 	stw	r16,12(sp)
  80f3c0:	04000434 	movhi	r16,16
  80f3c4:	dd400815 	stw	r21,32(sp)
  80f3c8:	dc800515 	stw	r18,20(sp)
  80f3cc:	843fffc4 	addi	r16,r16,-1
  80f3d0:	dfc00c15 	stw	ra,48(sp)
  80f3d4:	df000b15 	stw	fp,44(sp)
  80f3d8:	ddc00a15 	stw	r23,40(sp)
  80f3dc:	dd000715 	stw	r20,28(sp)
  80f3e0:	dcc00615 	stw	r19,24(sp)
  80f3e4:	dc400415 	stw	r17,16(sp)
  80f3e8:	1481ffcc 	andi	r18,r2,2047
  80f3ec:	2c20703a 	and	r16,r5,r16
  80f3f0:	b02b883a 	mov	r21,r22
  80f3f4:	b2403fcc 	andi	r9,r22,255
  80f3f8:	90006026 	beq	r18,zero,80f57c <__muldf3+0x1d0>
  80f3fc:	0081ffc4 	movi	r2,2047
  80f400:	2029883a 	mov	r20,r4
  80f404:	90803626 	beq	r18,r2,80f4e0 <__muldf3+0x134>
  80f408:	80800434 	orhi	r2,r16,16
  80f40c:	100490fa 	slli	r2,r2,3
  80f410:	2020d77a 	srli	r16,r4,29
  80f414:	202890fa 	slli	r20,r4,3
  80f418:	94bf0044 	addi	r18,r18,-1023
  80f41c:	80a0b03a 	or	r16,r16,r2
  80f420:	0027883a 	mov	r19,zero
  80f424:	0039883a 	mov	fp,zero
  80f428:	3804d53a 	srli	r2,r7,20
  80f42c:	382ed7fa 	srli	r23,r7,31
  80f430:	04400434 	movhi	r17,16
  80f434:	8c7fffc4 	addi	r17,r17,-1
  80f438:	1081ffcc 	andi	r2,r2,2047
  80f43c:	3011883a 	mov	r8,r6
  80f440:	3c62703a 	and	r17,r7,r17
  80f444:	ba803fcc 	andi	r10,r23,255
  80f448:	10006d26 	beq	r2,zero,80f600 <__muldf3+0x254>
  80f44c:	00c1ffc4 	movi	r3,2047
  80f450:	10c06526 	beq	r2,r3,80f5e8 <__muldf3+0x23c>
  80f454:	88c00434 	orhi	r3,r17,16
  80f458:	180690fa 	slli	r3,r3,3
  80f45c:	3022d77a 	srli	r17,r6,29
  80f460:	301090fa 	slli	r8,r6,3
  80f464:	10bf0044 	addi	r2,r2,-1023
  80f468:	88e2b03a 	or	r17,r17,r3
  80f46c:	000b883a 	mov	r5,zero
  80f470:	9085883a 	add	r2,r18,r2
  80f474:	2cc8b03a 	or	r4,r5,r19
  80f478:	00c003c4 	movi	r3,15
  80f47c:	bdacf03a 	xor	r22,r23,r22
  80f480:	12c00044 	addi	r11,r2,1
  80f484:	19009936 	bltu	r3,r4,80f6ec <__muldf3+0x340>
  80f488:	200890ba 	slli	r4,r4,2
  80f48c:	00c02074 	movhi	r3,129
  80f490:	18fd2804 	addi	r3,r3,-2912
  80f494:	20c9883a 	add	r4,r4,r3
  80f498:	20c00017 	ldw	r3,0(r4)
  80f49c:	1800683a 	jmp	r3
  80f4a0:	0080f6ec 	andhi	r2,zero,987
  80f4a4:	0080f500 	call	80f50 <__reset-0x77f0b0>
  80f4a8:	0080f500 	call	80f50 <__reset-0x77f0b0>
  80f4ac:	0080f4fc 	xorhi	r2,zero,979
  80f4b0:	0080f6c8 	cmpgei	r2,zero,987
  80f4b4:	0080f6c8 	cmpgei	r2,zero,987
  80f4b8:	0080f6b0 	cmpltui	r2,zero,986
  80f4bc:	0080f4fc 	xorhi	r2,zero,979
  80f4c0:	0080f6c8 	cmpgei	r2,zero,987
  80f4c4:	0080f6b0 	cmpltui	r2,zero,986
  80f4c8:	0080f6c8 	cmpgei	r2,zero,987
  80f4cc:	0080f4fc 	xorhi	r2,zero,979
  80f4d0:	0080f6d8 	cmpnei	r2,zero,987
  80f4d4:	0080f6d8 	cmpnei	r2,zero,987
  80f4d8:	0080f6d8 	cmpnei	r2,zero,987
  80f4dc:	0080f8f4 	movhi	r2,995
  80f4e0:	2404b03a 	or	r2,r4,r16
  80f4e4:	10006f1e 	bne	r2,zero,80f6a4 <__muldf3+0x2f8>
  80f4e8:	04c00204 	movi	r19,8
  80f4ec:	0021883a 	mov	r16,zero
  80f4f0:	0029883a 	mov	r20,zero
  80f4f4:	07000084 	movi	fp,2
  80f4f8:	003fcb06 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f4fc:	502d883a 	mov	r22,r10
  80f500:	00800084 	movi	r2,2
  80f504:	28805726 	beq	r5,r2,80f664 <__muldf3+0x2b8>
  80f508:	008000c4 	movi	r2,3
  80f50c:	28816626 	beq	r5,r2,80faa8 <__muldf3+0x6fc>
  80f510:	00800044 	movi	r2,1
  80f514:	2881411e 	bne	r5,r2,80fa1c <__muldf3+0x670>
  80f518:	b02b883a 	mov	r21,r22
  80f51c:	0005883a 	mov	r2,zero
  80f520:	000b883a 	mov	r5,zero
  80f524:	0029883a 	mov	r20,zero
  80f528:	1004953a 	slli	r2,r2,20
  80f52c:	a8c03fcc 	andi	r3,r21,255
  80f530:	04400434 	movhi	r17,16
  80f534:	8c7fffc4 	addi	r17,r17,-1
  80f538:	180697fa 	slli	r3,r3,31
  80f53c:	2c4a703a 	and	r5,r5,r17
  80f540:	288ab03a 	or	r5,r5,r2
  80f544:	28c6b03a 	or	r3,r5,r3
  80f548:	a005883a 	mov	r2,r20
  80f54c:	dfc00c17 	ldw	ra,48(sp)
  80f550:	df000b17 	ldw	fp,44(sp)
  80f554:	ddc00a17 	ldw	r23,40(sp)
  80f558:	dd800917 	ldw	r22,36(sp)
  80f55c:	dd400817 	ldw	r21,32(sp)
  80f560:	dd000717 	ldw	r20,28(sp)
  80f564:	dcc00617 	ldw	r19,24(sp)
  80f568:	dc800517 	ldw	r18,20(sp)
  80f56c:	dc400417 	ldw	r17,16(sp)
  80f570:	dc000317 	ldw	r16,12(sp)
  80f574:	dec00d04 	addi	sp,sp,52
  80f578:	f800283a 	ret
  80f57c:	2404b03a 	or	r2,r4,r16
  80f580:	2027883a 	mov	r19,r4
  80f584:	10004226 	beq	r2,zero,80f690 <__muldf3+0x2e4>
  80f588:	8000fc26 	beq	r16,zero,80f97c <__muldf3+0x5d0>
  80f58c:	8009883a 	mov	r4,r16
  80f590:	d9800215 	stw	r6,8(sp)
  80f594:	d9c00015 	stw	r7,0(sp)
  80f598:	da400115 	stw	r9,4(sp)
  80f59c:	08105c40 	call	8105c4 <__clzsi2>
  80f5a0:	d9800217 	ldw	r6,8(sp)
  80f5a4:	d9c00017 	ldw	r7,0(sp)
  80f5a8:	da400117 	ldw	r9,4(sp)
  80f5ac:	113ffd44 	addi	r4,r2,-11
  80f5b0:	00c00704 	movi	r3,28
  80f5b4:	1900ed16 	blt	r3,r4,80f96c <__muldf3+0x5c0>
  80f5b8:	00c00744 	movi	r3,29
  80f5bc:	147ffe04 	addi	r17,r2,-8
  80f5c0:	1907c83a 	sub	r3,r3,r4
  80f5c4:	8460983a 	sll	r16,r16,r17
  80f5c8:	98c6d83a 	srl	r3,r19,r3
  80f5cc:	9c68983a 	sll	r20,r19,r17
  80f5d0:	1c20b03a 	or	r16,r3,r16
  80f5d4:	1080fcc4 	addi	r2,r2,1011
  80f5d8:	00a5c83a 	sub	r18,zero,r2
  80f5dc:	0027883a 	mov	r19,zero
  80f5e0:	0039883a 	mov	fp,zero
  80f5e4:	003f9006 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f5e8:	3446b03a 	or	r3,r6,r17
  80f5ec:	1800261e 	bne	r3,zero,80f688 <__muldf3+0x2dc>
  80f5f0:	0023883a 	mov	r17,zero
  80f5f4:	0011883a 	mov	r8,zero
  80f5f8:	01400084 	movi	r5,2
  80f5fc:	003f9c06 	br	80f470 <__alt_mem_onchip_mem+0xff78f470>
  80f600:	3446b03a 	or	r3,r6,r17
  80f604:	18001c26 	beq	r3,zero,80f678 <__muldf3+0x2cc>
  80f608:	8800ce26 	beq	r17,zero,80f944 <__muldf3+0x598>
  80f60c:	8809883a 	mov	r4,r17
  80f610:	d9800215 	stw	r6,8(sp)
  80f614:	da400115 	stw	r9,4(sp)
  80f618:	da800015 	stw	r10,0(sp)
  80f61c:	08105c40 	call	8105c4 <__clzsi2>
  80f620:	d9800217 	ldw	r6,8(sp)
  80f624:	da400117 	ldw	r9,4(sp)
  80f628:	da800017 	ldw	r10,0(sp)
  80f62c:	113ffd44 	addi	r4,r2,-11
  80f630:	00c00704 	movi	r3,28
  80f634:	1900bf16 	blt	r3,r4,80f934 <__muldf3+0x588>
  80f638:	00c00744 	movi	r3,29
  80f63c:	123ffe04 	addi	r8,r2,-8
  80f640:	1907c83a 	sub	r3,r3,r4
  80f644:	8a22983a 	sll	r17,r17,r8
  80f648:	30c6d83a 	srl	r3,r6,r3
  80f64c:	3210983a 	sll	r8,r6,r8
  80f650:	1c62b03a 	or	r17,r3,r17
  80f654:	1080fcc4 	addi	r2,r2,1011
  80f658:	0085c83a 	sub	r2,zero,r2
  80f65c:	000b883a 	mov	r5,zero
  80f660:	003f8306 	br	80f470 <__alt_mem_onchip_mem+0xff78f470>
  80f664:	b02b883a 	mov	r21,r22
  80f668:	0081ffc4 	movi	r2,2047
  80f66c:	000b883a 	mov	r5,zero
  80f670:	0029883a 	mov	r20,zero
  80f674:	003fac06 	br	80f528 <__alt_mem_onchip_mem+0xff78f528>
  80f678:	0023883a 	mov	r17,zero
  80f67c:	0011883a 	mov	r8,zero
  80f680:	01400044 	movi	r5,1
  80f684:	003f7a06 	br	80f470 <__alt_mem_onchip_mem+0xff78f470>
  80f688:	014000c4 	movi	r5,3
  80f68c:	003f7806 	br	80f470 <__alt_mem_onchip_mem+0xff78f470>
  80f690:	04c00104 	movi	r19,4
  80f694:	0021883a 	mov	r16,zero
  80f698:	0029883a 	mov	r20,zero
  80f69c:	07000044 	movi	fp,1
  80f6a0:	003f6106 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f6a4:	04c00304 	movi	r19,12
  80f6a8:	070000c4 	movi	fp,3
  80f6ac:	003f5e06 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f6b0:	01400434 	movhi	r5,16
  80f6b4:	002b883a 	mov	r21,zero
  80f6b8:	297fffc4 	addi	r5,r5,-1
  80f6bc:	053fffc4 	movi	r20,-1
  80f6c0:	0081ffc4 	movi	r2,2047
  80f6c4:	003f9806 	br	80f528 <__alt_mem_onchip_mem+0xff78f528>
  80f6c8:	8023883a 	mov	r17,r16
  80f6cc:	a011883a 	mov	r8,r20
  80f6d0:	e00b883a 	mov	r5,fp
  80f6d4:	003f8a06 	br	80f500 <__alt_mem_onchip_mem+0xff78f500>
  80f6d8:	8023883a 	mov	r17,r16
  80f6dc:	a011883a 	mov	r8,r20
  80f6e0:	482d883a 	mov	r22,r9
  80f6e4:	e00b883a 	mov	r5,fp
  80f6e8:	003f8506 	br	80f500 <__alt_mem_onchip_mem+0xff78f500>
  80f6ec:	a00ad43a 	srli	r5,r20,16
  80f6f0:	401ad43a 	srli	r13,r8,16
  80f6f4:	a53fffcc 	andi	r20,r20,65535
  80f6f8:	423fffcc 	andi	r8,r8,65535
  80f6fc:	4519383a 	mul	r12,r8,r20
  80f700:	4147383a 	mul	r3,r8,r5
  80f704:	6d09383a 	mul	r4,r13,r20
  80f708:	600cd43a 	srli	r6,r12,16
  80f70c:	2b5d383a 	mul	r14,r5,r13
  80f710:	20c9883a 	add	r4,r4,r3
  80f714:	310d883a 	add	r6,r6,r4
  80f718:	30c0022e 	bgeu	r6,r3,80f724 <__muldf3+0x378>
  80f71c:	00c00074 	movhi	r3,1
  80f720:	70dd883a 	add	r14,r14,r3
  80f724:	8826d43a 	srli	r19,r17,16
  80f728:	8bffffcc 	andi	r15,r17,65535
  80f72c:	7d23383a 	mul	r17,r15,r20
  80f730:	7949383a 	mul	r4,r15,r5
  80f734:	9d29383a 	mul	r20,r19,r20
  80f738:	8814d43a 	srli	r10,r17,16
  80f73c:	3012943a 	slli	r9,r6,16
  80f740:	a129883a 	add	r20,r20,r4
  80f744:	633fffcc 	andi	r12,r12,65535
  80f748:	5515883a 	add	r10,r10,r20
  80f74c:	3006d43a 	srli	r3,r6,16
  80f750:	4b13883a 	add	r9,r9,r12
  80f754:	2ccb383a 	mul	r5,r5,r19
  80f758:	5100022e 	bgeu	r10,r4,80f764 <__muldf3+0x3b8>
  80f75c:	01000074 	movhi	r4,1
  80f760:	290b883a 	add	r5,r5,r4
  80f764:	802ad43a 	srli	r21,r16,16
  80f768:	843fffcc 	andi	r16,r16,65535
  80f76c:	440d383a 	mul	r6,r8,r16
  80f770:	4565383a 	mul	r18,r8,r21
  80f774:	8349383a 	mul	r4,r16,r13
  80f778:	500e943a 	slli	r7,r10,16
  80f77c:	3010d43a 	srli	r8,r6,16
  80f780:	5028d43a 	srli	r20,r10,16
  80f784:	2489883a 	add	r4,r4,r18
  80f788:	8abfffcc 	andi	r10,r17,65535
  80f78c:	3a95883a 	add	r10,r7,r10
  80f790:	4119883a 	add	r12,r8,r4
  80f794:	a169883a 	add	r20,r20,r5
  80f798:	1a87883a 	add	r3,r3,r10
  80f79c:	6d5b383a 	mul	r13,r13,r21
  80f7a0:	6480022e 	bgeu	r12,r18,80f7ac <__muldf3+0x400>
  80f7a4:	01000074 	movhi	r4,1
  80f7a8:	691b883a 	add	r13,r13,r4
  80f7ac:	7c25383a 	mul	r18,r15,r16
  80f7b0:	7d4b383a 	mul	r5,r15,r21
  80f7b4:	84cf383a 	mul	r7,r16,r19
  80f7b8:	901ed43a 	srli	r15,r18,16
  80f7bc:	6008d43a 	srli	r4,r12,16
  80f7c0:	6010943a 	slli	r8,r12,16
  80f7c4:	394f883a 	add	r7,r7,r5
  80f7c8:	333fffcc 	andi	r12,r6,65535
  80f7cc:	79df883a 	add	r15,r15,r7
  80f7d0:	235b883a 	add	r13,r4,r13
  80f7d4:	9d63383a 	mul	r17,r19,r21
  80f7d8:	4309883a 	add	r4,r8,r12
  80f7dc:	7940022e 	bgeu	r15,r5,80f7e8 <__muldf3+0x43c>
  80f7e0:	01400074 	movhi	r5,1
  80f7e4:	8963883a 	add	r17,r17,r5
  80f7e8:	780a943a 	slli	r5,r15,16
  80f7ec:	91bfffcc 	andi	r6,r18,65535
  80f7f0:	70c7883a 	add	r3,r14,r3
  80f7f4:	298d883a 	add	r6,r5,r6
  80f7f8:	1a8f803a 	cmpltu	r7,r3,r10
  80f7fc:	350b883a 	add	r5,r6,r20
  80f800:	20c7883a 	add	r3,r4,r3
  80f804:	3955883a 	add	r10,r7,r5
  80f808:	1909803a 	cmpltu	r4,r3,r4
  80f80c:	6a91883a 	add	r8,r13,r10
  80f810:	780cd43a 	srli	r6,r15,16
  80f814:	2219883a 	add	r12,r4,r8
  80f818:	2d0b803a 	cmpltu	r5,r5,r20
  80f81c:	51cf803a 	cmpltu	r7,r10,r7
  80f820:	29ceb03a 	or	r7,r5,r7
  80f824:	4351803a 	cmpltu	r8,r8,r13
  80f828:	610b803a 	cmpltu	r5,r12,r4
  80f82c:	4148b03a 	or	r4,r8,r5
  80f830:	398f883a 	add	r7,r7,r6
  80f834:	3909883a 	add	r4,r7,r4
  80f838:	1810927a 	slli	r8,r3,9
  80f83c:	2449883a 	add	r4,r4,r17
  80f840:	2008927a 	slli	r4,r4,9
  80f844:	6022d5fa 	srli	r17,r12,23
  80f848:	1806d5fa 	srli	r3,r3,23
  80f84c:	4252b03a 	or	r9,r8,r9
  80f850:	600a927a 	slli	r5,r12,9
  80f854:	4810c03a 	cmpne	r8,r9,zero
  80f858:	2462b03a 	or	r17,r4,r17
  80f85c:	40c6b03a 	or	r3,r8,r3
  80f860:	8900402c 	andhi	r4,r17,256
  80f864:	1950b03a 	or	r8,r3,r5
  80f868:	20000726 	beq	r4,zero,80f888 <__muldf3+0x4dc>
  80f86c:	4006d07a 	srli	r3,r8,1
  80f870:	880497fa 	slli	r2,r17,31
  80f874:	4200004c 	andi	r8,r8,1
  80f878:	8822d07a 	srli	r17,r17,1
  80f87c:	1a10b03a 	or	r8,r3,r8
  80f880:	1210b03a 	or	r8,r2,r8
  80f884:	5805883a 	mov	r2,r11
  80f888:	1140ffc4 	addi	r5,r2,1023
  80f88c:	0140440e 	bge	zero,r5,80f9a0 <__muldf3+0x5f4>
  80f890:	40c001cc 	andi	r3,r8,7
  80f894:	18000726 	beq	r3,zero,80f8b4 <__muldf3+0x508>
  80f898:	40c003cc 	andi	r3,r8,15
  80f89c:	01000104 	movi	r4,4
  80f8a0:	19000426 	beq	r3,r4,80f8b4 <__muldf3+0x508>
  80f8a4:	4107883a 	add	r3,r8,r4
  80f8a8:	1a11803a 	cmpltu	r8,r3,r8
  80f8ac:	8a23883a 	add	r17,r17,r8
  80f8b0:	1811883a 	mov	r8,r3
  80f8b4:	88c0402c 	andhi	r3,r17,256
  80f8b8:	18000426 	beq	r3,zero,80f8cc <__muldf3+0x520>
  80f8bc:	11410004 	addi	r5,r2,1024
  80f8c0:	00bfc034 	movhi	r2,65280
  80f8c4:	10bfffc4 	addi	r2,r2,-1
  80f8c8:	88a2703a 	and	r17,r17,r2
  80f8cc:	0081ff84 	movi	r2,2046
  80f8d0:	117f6416 	blt	r2,r5,80f664 <__alt_mem_onchip_mem+0xff78f664>
  80f8d4:	8828977a 	slli	r20,r17,29
  80f8d8:	4010d0fa 	srli	r8,r8,3
  80f8dc:	8822927a 	slli	r17,r17,9
  80f8e0:	2881ffcc 	andi	r2,r5,2047
  80f8e4:	a228b03a 	or	r20,r20,r8
  80f8e8:	880ad33a 	srli	r5,r17,12
  80f8ec:	b02b883a 	mov	r21,r22
  80f8f0:	003f0d06 	br	80f528 <__alt_mem_onchip_mem+0xff78f528>
  80f8f4:	8080022c 	andhi	r2,r16,8
  80f8f8:	10000926 	beq	r2,zero,80f920 <__muldf3+0x574>
  80f8fc:	8880022c 	andhi	r2,r17,8
  80f900:	1000071e 	bne	r2,zero,80f920 <__muldf3+0x574>
  80f904:	00800434 	movhi	r2,16
  80f908:	89400234 	orhi	r5,r17,8
  80f90c:	10bfffc4 	addi	r2,r2,-1
  80f910:	b82b883a 	mov	r21,r23
  80f914:	288a703a 	and	r5,r5,r2
  80f918:	4029883a 	mov	r20,r8
  80f91c:	003f6806 	br	80f6c0 <__alt_mem_onchip_mem+0xff78f6c0>
  80f920:	00800434 	movhi	r2,16
  80f924:	81400234 	orhi	r5,r16,8
  80f928:	10bfffc4 	addi	r2,r2,-1
  80f92c:	288a703a 	and	r5,r5,r2
  80f930:	003f6306 	br	80f6c0 <__alt_mem_onchip_mem+0xff78f6c0>
  80f934:	147ff604 	addi	r17,r2,-40
  80f938:	3462983a 	sll	r17,r6,r17
  80f93c:	0011883a 	mov	r8,zero
  80f940:	003f4406 	br	80f654 <__alt_mem_onchip_mem+0xff78f654>
  80f944:	3009883a 	mov	r4,r6
  80f948:	d9800215 	stw	r6,8(sp)
  80f94c:	da400115 	stw	r9,4(sp)
  80f950:	da800015 	stw	r10,0(sp)
  80f954:	08105c40 	call	8105c4 <__clzsi2>
  80f958:	10800804 	addi	r2,r2,32
  80f95c:	da800017 	ldw	r10,0(sp)
  80f960:	da400117 	ldw	r9,4(sp)
  80f964:	d9800217 	ldw	r6,8(sp)
  80f968:	003f3006 	br	80f62c <__alt_mem_onchip_mem+0xff78f62c>
  80f96c:	143ff604 	addi	r16,r2,-40
  80f970:	9c20983a 	sll	r16,r19,r16
  80f974:	0029883a 	mov	r20,zero
  80f978:	003f1606 	br	80f5d4 <__alt_mem_onchip_mem+0xff78f5d4>
  80f97c:	d9800215 	stw	r6,8(sp)
  80f980:	d9c00015 	stw	r7,0(sp)
  80f984:	da400115 	stw	r9,4(sp)
  80f988:	08105c40 	call	8105c4 <__clzsi2>
  80f98c:	10800804 	addi	r2,r2,32
  80f990:	da400117 	ldw	r9,4(sp)
  80f994:	d9c00017 	ldw	r7,0(sp)
  80f998:	d9800217 	ldw	r6,8(sp)
  80f99c:	003f0306 	br	80f5ac <__alt_mem_onchip_mem+0xff78f5ac>
  80f9a0:	00c00044 	movi	r3,1
  80f9a4:	1947c83a 	sub	r3,r3,r5
  80f9a8:	00800e04 	movi	r2,56
  80f9ac:	10feda16 	blt	r2,r3,80f518 <__alt_mem_onchip_mem+0xff78f518>
  80f9b0:	008007c4 	movi	r2,31
  80f9b4:	10c01b16 	blt	r2,r3,80fa24 <__muldf3+0x678>
  80f9b8:	00800804 	movi	r2,32
  80f9bc:	10c5c83a 	sub	r2,r2,r3
  80f9c0:	888a983a 	sll	r5,r17,r2
  80f9c4:	40c8d83a 	srl	r4,r8,r3
  80f9c8:	4084983a 	sll	r2,r8,r2
  80f9cc:	88e2d83a 	srl	r17,r17,r3
  80f9d0:	2906b03a 	or	r3,r5,r4
  80f9d4:	1004c03a 	cmpne	r2,r2,zero
  80f9d8:	1886b03a 	or	r3,r3,r2
  80f9dc:	188001cc 	andi	r2,r3,7
  80f9e0:	10000726 	beq	r2,zero,80fa00 <__muldf3+0x654>
  80f9e4:	188003cc 	andi	r2,r3,15
  80f9e8:	01000104 	movi	r4,4
  80f9ec:	11000426 	beq	r2,r4,80fa00 <__muldf3+0x654>
  80f9f0:	1805883a 	mov	r2,r3
  80f9f4:	10c00104 	addi	r3,r2,4
  80f9f8:	1885803a 	cmpltu	r2,r3,r2
  80f9fc:	88a3883a 	add	r17,r17,r2
  80fa00:	8880202c 	andhi	r2,r17,128
  80fa04:	10001c26 	beq	r2,zero,80fa78 <__muldf3+0x6cc>
  80fa08:	b02b883a 	mov	r21,r22
  80fa0c:	00800044 	movi	r2,1
  80fa10:	000b883a 	mov	r5,zero
  80fa14:	0029883a 	mov	r20,zero
  80fa18:	003ec306 	br	80f528 <__alt_mem_onchip_mem+0xff78f528>
  80fa1c:	5805883a 	mov	r2,r11
  80fa20:	003f9906 	br	80f888 <__alt_mem_onchip_mem+0xff78f888>
  80fa24:	00bff844 	movi	r2,-31
  80fa28:	1145c83a 	sub	r2,r2,r5
  80fa2c:	8888d83a 	srl	r4,r17,r2
  80fa30:	00800804 	movi	r2,32
  80fa34:	18801a26 	beq	r3,r2,80faa0 <__muldf3+0x6f4>
  80fa38:	00801004 	movi	r2,64
  80fa3c:	10c5c83a 	sub	r2,r2,r3
  80fa40:	8884983a 	sll	r2,r17,r2
  80fa44:	1204b03a 	or	r2,r2,r8
  80fa48:	1004c03a 	cmpne	r2,r2,zero
  80fa4c:	2084b03a 	or	r2,r4,r2
  80fa50:	144001cc 	andi	r17,r2,7
  80fa54:	88000d1e 	bne	r17,zero,80fa8c <__muldf3+0x6e0>
  80fa58:	000b883a 	mov	r5,zero
  80fa5c:	1028d0fa 	srli	r20,r2,3
  80fa60:	b02b883a 	mov	r21,r22
  80fa64:	0005883a 	mov	r2,zero
  80fa68:	a468b03a 	or	r20,r20,r17
  80fa6c:	003eae06 	br	80f528 <__alt_mem_onchip_mem+0xff78f528>
  80fa70:	1007883a 	mov	r3,r2
  80fa74:	0023883a 	mov	r17,zero
  80fa78:	880a927a 	slli	r5,r17,9
  80fa7c:	1805883a 	mov	r2,r3
  80fa80:	8822977a 	slli	r17,r17,29
  80fa84:	280ad33a 	srli	r5,r5,12
  80fa88:	003ff406 	br	80fa5c <__alt_mem_onchip_mem+0xff78fa5c>
  80fa8c:	10c003cc 	andi	r3,r2,15
  80fa90:	01000104 	movi	r4,4
  80fa94:	193ff626 	beq	r3,r4,80fa70 <__alt_mem_onchip_mem+0xff78fa70>
  80fa98:	0023883a 	mov	r17,zero
  80fa9c:	003fd506 	br	80f9f4 <__alt_mem_onchip_mem+0xff78f9f4>
  80faa0:	0005883a 	mov	r2,zero
  80faa4:	003fe706 	br	80fa44 <__alt_mem_onchip_mem+0xff78fa44>
  80faa8:	00800434 	movhi	r2,16
  80faac:	89400234 	orhi	r5,r17,8
  80fab0:	10bfffc4 	addi	r2,r2,-1
  80fab4:	b02b883a 	mov	r21,r22
  80fab8:	288a703a 	and	r5,r5,r2
  80fabc:	4029883a 	mov	r20,r8
  80fac0:	003eff06 	br	80f6c0 <__alt_mem_onchip_mem+0xff78f6c0>

0080fac4 <__subdf3>:
  80fac4:	02000434 	movhi	r8,16
  80fac8:	423fffc4 	addi	r8,r8,-1
  80facc:	defffb04 	addi	sp,sp,-20
  80fad0:	2a14703a 	and	r10,r5,r8
  80fad4:	3812d53a 	srli	r9,r7,20
  80fad8:	3a10703a 	and	r8,r7,r8
  80fadc:	2006d77a 	srli	r3,r4,29
  80fae0:	3004d77a 	srli	r2,r6,29
  80fae4:	dc000015 	stw	r16,0(sp)
  80fae8:	501490fa 	slli	r10,r10,3
  80faec:	2820d53a 	srli	r16,r5,20
  80faf0:	401090fa 	slli	r8,r8,3
  80faf4:	dc800215 	stw	r18,8(sp)
  80faf8:	dc400115 	stw	r17,4(sp)
  80fafc:	dfc00415 	stw	ra,16(sp)
  80fb00:	202290fa 	slli	r17,r4,3
  80fb04:	dcc00315 	stw	r19,12(sp)
  80fb08:	4a41ffcc 	andi	r9,r9,2047
  80fb0c:	0101ffc4 	movi	r4,2047
  80fb10:	2824d7fa 	srli	r18,r5,31
  80fb14:	8401ffcc 	andi	r16,r16,2047
  80fb18:	50c6b03a 	or	r3,r10,r3
  80fb1c:	380ed7fa 	srli	r7,r7,31
  80fb20:	408ab03a 	or	r5,r8,r2
  80fb24:	300c90fa 	slli	r6,r6,3
  80fb28:	49009626 	beq	r9,r4,80fd84 <__subdf3+0x2c0>
  80fb2c:	39c0005c 	xori	r7,r7,1
  80fb30:	8245c83a 	sub	r2,r16,r9
  80fb34:	3c807426 	beq	r7,r18,80fd08 <__subdf3+0x244>
  80fb38:	0080af0e 	bge	zero,r2,80fdf8 <__subdf3+0x334>
  80fb3c:	48002a1e 	bne	r9,zero,80fbe8 <__subdf3+0x124>
  80fb40:	2988b03a 	or	r4,r5,r6
  80fb44:	20009a1e 	bne	r4,zero,80fdb0 <__subdf3+0x2ec>
  80fb48:	888001cc 	andi	r2,r17,7
  80fb4c:	10000726 	beq	r2,zero,80fb6c <__subdf3+0xa8>
  80fb50:	888003cc 	andi	r2,r17,15
  80fb54:	01000104 	movi	r4,4
  80fb58:	11000426 	beq	r2,r4,80fb6c <__subdf3+0xa8>
  80fb5c:	890b883a 	add	r5,r17,r4
  80fb60:	2c63803a 	cmpltu	r17,r5,r17
  80fb64:	1c47883a 	add	r3,r3,r17
  80fb68:	2823883a 	mov	r17,r5
  80fb6c:	1880202c 	andhi	r2,r3,128
  80fb70:	10005926 	beq	r2,zero,80fcd8 <__subdf3+0x214>
  80fb74:	84000044 	addi	r16,r16,1
  80fb78:	0081ffc4 	movi	r2,2047
  80fb7c:	8080be26 	beq	r16,r2,80fe78 <__subdf3+0x3b4>
  80fb80:	017fe034 	movhi	r5,65408
  80fb84:	297fffc4 	addi	r5,r5,-1
  80fb88:	1946703a 	and	r3,r3,r5
  80fb8c:	1804977a 	slli	r2,r3,29
  80fb90:	1806927a 	slli	r3,r3,9
  80fb94:	8822d0fa 	srli	r17,r17,3
  80fb98:	8401ffcc 	andi	r16,r16,2047
  80fb9c:	180ad33a 	srli	r5,r3,12
  80fba0:	9100004c 	andi	r4,r18,1
  80fba4:	1444b03a 	or	r2,r2,r17
  80fba8:	80c1ffcc 	andi	r3,r16,2047
  80fbac:	1820953a 	slli	r16,r3,20
  80fbb0:	20c03fcc 	andi	r3,r4,255
  80fbb4:	180897fa 	slli	r4,r3,31
  80fbb8:	00c00434 	movhi	r3,16
  80fbbc:	18ffffc4 	addi	r3,r3,-1
  80fbc0:	28c6703a 	and	r3,r5,r3
  80fbc4:	1c06b03a 	or	r3,r3,r16
  80fbc8:	1906b03a 	or	r3,r3,r4
  80fbcc:	dfc00417 	ldw	ra,16(sp)
  80fbd0:	dcc00317 	ldw	r19,12(sp)
  80fbd4:	dc800217 	ldw	r18,8(sp)
  80fbd8:	dc400117 	ldw	r17,4(sp)
  80fbdc:	dc000017 	ldw	r16,0(sp)
  80fbe0:	dec00504 	addi	sp,sp,20
  80fbe4:	f800283a 	ret
  80fbe8:	0101ffc4 	movi	r4,2047
  80fbec:	813fd626 	beq	r16,r4,80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fbf0:	29402034 	orhi	r5,r5,128
  80fbf4:	01000e04 	movi	r4,56
  80fbf8:	2080a316 	blt	r4,r2,80fe88 <__subdf3+0x3c4>
  80fbfc:	010007c4 	movi	r4,31
  80fc00:	2080c616 	blt	r4,r2,80ff1c <__subdf3+0x458>
  80fc04:	01000804 	movi	r4,32
  80fc08:	2089c83a 	sub	r4,r4,r2
  80fc0c:	2910983a 	sll	r8,r5,r4
  80fc10:	308ed83a 	srl	r7,r6,r2
  80fc14:	3108983a 	sll	r4,r6,r4
  80fc18:	2884d83a 	srl	r2,r5,r2
  80fc1c:	41ccb03a 	or	r6,r8,r7
  80fc20:	2008c03a 	cmpne	r4,r4,zero
  80fc24:	310cb03a 	or	r6,r6,r4
  80fc28:	898dc83a 	sub	r6,r17,r6
  80fc2c:	89a3803a 	cmpltu	r17,r17,r6
  80fc30:	1887c83a 	sub	r3,r3,r2
  80fc34:	1c47c83a 	sub	r3,r3,r17
  80fc38:	3023883a 	mov	r17,r6
  80fc3c:	1880202c 	andhi	r2,r3,128
  80fc40:	10002326 	beq	r2,zero,80fcd0 <__subdf3+0x20c>
  80fc44:	04c02034 	movhi	r19,128
  80fc48:	9cffffc4 	addi	r19,r19,-1
  80fc4c:	1ce6703a 	and	r19,r3,r19
  80fc50:	98007a26 	beq	r19,zero,80fe3c <__subdf3+0x378>
  80fc54:	9809883a 	mov	r4,r19
  80fc58:	08105c40 	call	8105c4 <__clzsi2>
  80fc5c:	113ffe04 	addi	r4,r2,-8
  80fc60:	00c007c4 	movi	r3,31
  80fc64:	19007b16 	blt	r3,r4,80fe54 <__subdf3+0x390>
  80fc68:	00800804 	movi	r2,32
  80fc6c:	1105c83a 	sub	r2,r2,r4
  80fc70:	8884d83a 	srl	r2,r17,r2
  80fc74:	9906983a 	sll	r3,r19,r4
  80fc78:	8922983a 	sll	r17,r17,r4
  80fc7c:	10c4b03a 	or	r2,r2,r3
  80fc80:	24007816 	blt	r4,r16,80fe64 <__subdf3+0x3a0>
  80fc84:	2421c83a 	sub	r16,r4,r16
  80fc88:	80c00044 	addi	r3,r16,1
  80fc8c:	010007c4 	movi	r4,31
  80fc90:	20c09516 	blt	r4,r3,80fee8 <__subdf3+0x424>
  80fc94:	01400804 	movi	r5,32
  80fc98:	28cbc83a 	sub	r5,r5,r3
  80fc9c:	88c8d83a 	srl	r4,r17,r3
  80fca0:	8962983a 	sll	r17,r17,r5
  80fca4:	114a983a 	sll	r5,r2,r5
  80fca8:	10c6d83a 	srl	r3,r2,r3
  80fcac:	8804c03a 	cmpne	r2,r17,zero
  80fcb0:	290ab03a 	or	r5,r5,r4
  80fcb4:	28a2b03a 	or	r17,r5,r2
  80fcb8:	0021883a 	mov	r16,zero
  80fcbc:	003fa206 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fcc0:	2090b03a 	or	r8,r4,r2
  80fcc4:	40018e26 	beq	r8,zero,810300 <__subdf3+0x83c>
  80fcc8:	1007883a 	mov	r3,r2
  80fccc:	2023883a 	mov	r17,r4
  80fcd0:	888001cc 	andi	r2,r17,7
  80fcd4:	103f9e1e 	bne	r2,zero,80fb50 <__alt_mem_onchip_mem+0xff78fb50>
  80fcd8:	1804977a 	slli	r2,r3,29
  80fcdc:	8822d0fa 	srli	r17,r17,3
  80fce0:	1810d0fa 	srli	r8,r3,3
  80fce4:	9100004c 	andi	r4,r18,1
  80fce8:	1444b03a 	or	r2,r2,r17
  80fcec:	00c1ffc4 	movi	r3,2047
  80fcf0:	80c02826 	beq	r16,r3,80fd94 <__subdf3+0x2d0>
  80fcf4:	01400434 	movhi	r5,16
  80fcf8:	297fffc4 	addi	r5,r5,-1
  80fcfc:	80e0703a 	and	r16,r16,r3
  80fd00:	414a703a 	and	r5,r8,r5
  80fd04:	003fa806 	br	80fba8 <__alt_mem_onchip_mem+0xff78fba8>
  80fd08:	0080630e 	bge	zero,r2,80fe98 <__subdf3+0x3d4>
  80fd0c:	48003026 	beq	r9,zero,80fdd0 <__subdf3+0x30c>
  80fd10:	0101ffc4 	movi	r4,2047
  80fd14:	813f8c26 	beq	r16,r4,80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fd18:	29402034 	orhi	r5,r5,128
  80fd1c:	01000e04 	movi	r4,56
  80fd20:	2080a90e 	bge	r4,r2,80ffc8 <__subdf3+0x504>
  80fd24:	298cb03a 	or	r6,r5,r6
  80fd28:	3012c03a 	cmpne	r9,r6,zero
  80fd2c:	0005883a 	mov	r2,zero
  80fd30:	4c53883a 	add	r9,r9,r17
  80fd34:	4c63803a 	cmpltu	r17,r9,r17
  80fd38:	10c7883a 	add	r3,r2,r3
  80fd3c:	88c7883a 	add	r3,r17,r3
  80fd40:	4823883a 	mov	r17,r9
  80fd44:	1880202c 	andhi	r2,r3,128
  80fd48:	1000d026 	beq	r2,zero,81008c <__subdf3+0x5c8>
  80fd4c:	84000044 	addi	r16,r16,1
  80fd50:	0081ffc4 	movi	r2,2047
  80fd54:	8080fe26 	beq	r16,r2,810150 <__subdf3+0x68c>
  80fd58:	00bfe034 	movhi	r2,65408
  80fd5c:	10bfffc4 	addi	r2,r2,-1
  80fd60:	1886703a 	and	r3,r3,r2
  80fd64:	880ad07a 	srli	r5,r17,1
  80fd68:	180497fa 	slli	r2,r3,31
  80fd6c:	8900004c 	andi	r4,r17,1
  80fd70:	2922b03a 	or	r17,r5,r4
  80fd74:	1806d07a 	srli	r3,r3,1
  80fd78:	1462b03a 	or	r17,r2,r17
  80fd7c:	3825883a 	mov	r18,r7
  80fd80:	003f7106 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fd84:	2984b03a 	or	r2,r5,r6
  80fd88:	103f6826 	beq	r2,zero,80fb2c <__alt_mem_onchip_mem+0xff78fb2c>
  80fd8c:	39c03fcc 	andi	r7,r7,255
  80fd90:	003f6706 	br	80fb30 <__alt_mem_onchip_mem+0xff78fb30>
  80fd94:	4086b03a 	or	r3,r8,r2
  80fd98:	18015226 	beq	r3,zero,8102e4 <__subdf3+0x820>
  80fd9c:	00c00434 	movhi	r3,16
  80fda0:	41400234 	orhi	r5,r8,8
  80fda4:	18ffffc4 	addi	r3,r3,-1
  80fda8:	28ca703a 	and	r5,r5,r3
  80fdac:	003f7e06 	br	80fba8 <__alt_mem_onchip_mem+0xff78fba8>
  80fdb0:	10bfffc4 	addi	r2,r2,-1
  80fdb4:	1000491e 	bne	r2,zero,80fedc <__subdf3+0x418>
  80fdb8:	898fc83a 	sub	r7,r17,r6
  80fdbc:	89e3803a 	cmpltu	r17,r17,r7
  80fdc0:	1947c83a 	sub	r3,r3,r5
  80fdc4:	1c47c83a 	sub	r3,r3,r17
  80fdc8:	3823883a 	mov	r17,r7
  80fdcc:	003f9b06 	br	80fc3c <__alt_mem_onchip_mem+0xff78fc3c>
  80fdd0:	2988b03a 	or	r4,r5,r6
  80fdd4:	203f5c26 	beq	r4,zero,80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fdd8:	10bfffc4 	addi	r2,r2,-1
  80fddc:	1000931e 	bne	r2,zero,81002c <__subdf3+0x568>
  80fde0:	898d883a 	add	r6,r17,r6
  80fde4:	3463803a 	cmpltu	r17,r6,r17
  80fde8:	1947883a 	add	r3,r3,r5
  80fdec:	88c7883a 	add	r3,r17,r3
  80fdf0:	3023883a 	mov	r17,r6
  80fdf4:	003fd306 	br	80fd44 <__alt_mem_onchip_mem+0xff78fd44>
  80fdf8:	1000541e 	bne	r2,zero,80ff4c <__subdf3+0x488>
  80fdfc:	80800044 	addi	r2,r16,1
  80fe00:	1081ffcc 	andi	r2,r2,2047
  80fe04:	01000044 	movi	r4,1
  80fe08:	2080a20e 	bge	r4,r2,810094 <__subdf3+0x5d0>
  80fe0c:	8989c83a 	sub	r4,r17,r6
  80fe10:	8905803a 	cmpltu	r2,r17,r4
  80fe14:	1967c83a 	sub	r19,r3,r5
  80fe18:	98a7c83a 	sub	r19,r19,r2
  80fe1c:	9880202c 	andhi	r2,r19,128
  80fe20:	10006326 	beq	r2,zero,80ffb0 <__subdf3+0x4ec>
  80fe24:	3463c83a 	sub	r17,r6,r17
  80fe28:	28c7c83a 	sub	r3,r5,r3
  80fe2c:	344d803a 	cmpltu	r6,r6,r17
  80fe30:	19a7c83a 	sub	r19,r3,r6
  80fe34:	3825883a 	mov	r18,r7
  80fe38:	983f861e 	bne	r19,zero,80fc54 <__alt_mem_onchip_mem+0xff78fc54>
  80fe3c:	8809883a 	mov	r4,r17
  80fe40:	08105c40 	call	8105c4 <__clzsi2>
  80fe44:	10800804 	addi	r2,r2,32
  80fe48:	113ffe04 	addi	r4,r2,-8
  80fe4c:	00c007c4 	movi	r3,31
  80fe50:	193f850e 	bge	r3,r4,80fc68 <__alt_mem_onchip_mem+0xff78fc68>
  80fe54:	10bff604 	addi	r2,r2,-40
  80fe58:	8884983a 	sll	r2,r17,r2
  80fe5c:	0023883a 	mov	r17,zero
  80fe60:	243f880e 	bge	r4,r16,80fc84 <__alt_mem_onchip_mem+0xff78fc84>
  80fe64:	00ffe034 	movhi	r3,65408
  80fe68:	18ffffc4 	addi	r3,r3,-1
  80fe6c:	8121c83a 	sub	r16,r16,r4
  80fe70:	10c6703a 	and	r3,r2,r3
  80fe74:	003f3406 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fe78:	9100004c 	andi	r4,r18,1
  80fe7c:	000b883a 	mov	r5,zero
  80fe80:	0005883a 	mov	r2,zero
  80fe84:	003f4806 	br	80fba8 <__alt_mem_onchip_mem+0xff78fba8>
  80fe88:	298cb03a 	or	r6,r5,r6
  80fe8c:	300cc03a 	cmpne	r6,r6,zero
  80fe90:	0005883a 	mov	r2,zero
  80fe94:	003f6406 	br	80fc28 <__alt_mem_onchip_mem+0xff78fc28>
  80fe98:	10009a1e 	bne	r2,zero,810104 <__subdf3+0x640>
  80fe9c:	82400044 	addi	r9,r16,1
  80fea0:	4881ffcc 	andi	r2,r9,2047
  80fea4:	02800044 	movi	r10,1
  80fea8:	5080670e 	bge	r10,r2,810048 <__subdf3+0x584>
  80feac:	0081ffc4 	movi	r2,2047
  80feb0:	4880af26 	beq	r9,r2,810170 <__subdf3+0x6ac>
  80feb4:	898d883a 	add	r6,r17,r6
  80feb8:	1945883a 	add	r2,r3,r5
  80febc:	3447803a 	cmpltu	r3,r6,r17
  80fec0:	1887883a 	add	r3,r3,r2
  80fec4:	182297fa 	slli	r17,r3,31
  80fec8:	300cd07a 	srli	r6,r6,1
  80fecc:	1806d07a 	srli	r3,r3,1
  80fed0:	4821883a 	mov	r16,r9
  80fed4:	89a2b03a 	or	r17,r17,r6
  80fed8:	003f1b06 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fedc:	0101ffc4 	movi	r4,2047
  80fee0:	813f441e 	bne	r16,r4,80fbf4 <__alt_mem_onchip_mem+0xff78fbf4>
  80fee4:	003f1806 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  80fee8:	843ff844 	addi	r16,r16,-31
  80feec:	01400804 	movi	r5,32
  80fef0:	1408d83a 	srl	r4,r2,r16
  80fef4:	19405026 	beq	r3,r5,810038 <__subdf3+0x574>
  80fef8:	01401004 	movi	r5,64
  80fefc:	28c7c83a 	sub	r3,r5,r3
  80ff00:	10c4983a 	sll	r2,r2,r3
  80ff04:	88a2b03a 	or	r17,r17,r2
  80ff08:	8822c03a 	cmpne	r17,r17,zero
  80ff0c:	2462b03a 	or	r17,r4,r17
  80ff10:	0007883a 	mov	r3,zero
  80ff14:	0021883a 	mov	r16,zero
  80ff18:	003f6d06 	br	80fcd0 <__alt_mem_onchip_mem+0xff78fcd0>
  80ff1c:	11fff804 	addi	r7,r2,-32
  80ff20:	01000804 	movi	r4,32
  80ff24:	29ced83a 	srl	r7,r5,r7
  80ff28:	11004526 	beq	r2,r4,810040 <__subdf3+0x57c>
  80ff2c:	01001004 	movi	r4,64
  80ff30:	2089c83a 	sub	r4,r4,r2
  80ff34:	2904983a 	sll	r2,r5,r4
  80ff38:	118cb03a 	or	r6,r2,r6
  80ff3c:	300cc03a 	cmpne	r6,r6,zero
  80ff40:	398cb03a 	or	r6,r7,r6
  80ff44:	0005883a 	mov	r2,zero
  80ff48:	003f3706 	br	80fc28 <__alt_mem_onchip_mem+0xff78fc28>
  80ff4c:	80002a26 	beq	r16,zero,80fff8 <__subdf3+0x534>
  80ff50:	0101ffc4 	movi	r4,2047
  80ff54:	49006626 	beq	r9,r4,8100f0 <__subdf3+0x62c>
  80ff58:	0085c83a 	sub	r2,zero,r2
  80ff5c:	18c02034 	orhi	r3,r3,128
  80ff60:	01000e04 	movi	r4,56
  80ff64:	20807e16 	blt	r4,r2,810160 <__subdf3+0x69c>
  80ff68:	010007c4 	movi	r4,31
  80ff6c:	2080e716 	blt	r4,r2,81030c <__subdf3+0x848>
  80ff70:	01000804 	movi	r4,32
  80ff74:	2089c83a 	sub	r4,r4,r2
  80ff78:	1914983a 	sll	r10,r3,r4
  80ff7c:	8890d83a 	srl	r8,r17,r2
  80ff80:	8908983a 	sll	r4,r17,r4
  80ff84:	1884d83a 	srl	r2,r3,r2
  80ff88:	5222b03a 	or	r17,r10,r8
  80ff8c:	2006c03a 	cmpne	r3,r4,zero
  80ff90:	88e2b03a 	or	r17,r17,r3
  80ff94:	3463c83a 	sub	r17,r6,r17
  80ff98:	2885c83a 	sub	r2,r5,r2
  80ff9c:	344d803a 	cmpltu	r6,r6,r17
  80ffa0:	1187c83a 	sub	r3,r2,r6
  80ffa4:	4821883a 	mov	r16,r9
  80ffa8:	3825883a 	mov	r18,r7
  80ffac:	003f2306 	br	80fc3c <__alt_mem_onchip_mem+0xff78fc3c>
  80ffb0:	24d0b03a 	or	r8,r4,r19
  80ffb4:	40001b1e 	bne	r8,zero,810024 <__subdf3+0x560>
  80ffb8:	0005883a 	mov	r2,zero
  80ffbc:	0009883a 	mov	r4,zero
  80ffc0:	0021883a 	mov	r16,zero
  80ffc4:	003f4906 	br	80fcec <__alt_mem_onchip_mem+0xff78fcec>
  80ffc8:	010007c4 	movi	r4,31
  80ffcc:	20803a16 	blt	r4,r2,8100b8 <__subdf3+0x5f4>
  80ffd0:	01000804 	movi	r4,32
  80ffd4:	2089c83a 	sub	r4,r4,r2
  80ffd8:	2912983a 	sll	r9,r5,r4
  80ffdc:	3090d83a 	srl	r8,r6,r2
  80ffe0:	3108983a 	sll	r4,r6,r4
  80ffe4:	2884d83a 	srl	r2,r5,r2
  80ffe8:	4a12b03a 	or	r9,r9,r8
  80ffec:	2008c03a 	cmpne	r4,r4,zero
  80fff0:	4912b03a 	or	r9,r9,r4
  80fff4:	003f4e06 	br	80fd30 <__alt_mem_onchip_mem+0xff78fd30>
  80fff8:	1c48b03a 	or	r4,r3,r17
  80fffc:	20003c26 	beq	r4,zero,8100f0 <__subdf3+0x62c>
  810000:	0084303a 	nor	r2,zero,r2
  810004:	1000381e 	bne	r2,zero,8100e8 <__subdf3+0x624>
  810008:	3463c83a 	sub	r17,r6,r17
  81000c:	28c5c83a 	sub	r2,r5,r3
  810010:	344d803a 	cmpltu	r6,r6,r17
  810014:	1187c83a 	sub	r3,r2,r6
  810018:	4821883a 	mov	r16,r9
  81001c:	3825883a 	mov	r18,r7
  810020:	003f0606 	br	80fc3c <__alt_mem_onchip_mem+0xff78fc3c>
  810024:	2023883a 	mov	r17,r4
  810028:	003f0906 	br	80fc50 <__alt_mem_onchip_mem+0xff78fc50>
  81002c:	0101ffc4 	movi	r4,2047
  810030:	813f3a1e 	bne	r16,r4,80fd1c <__alt_mem_onchip_mem+0xff78fd1c>
  810034:	003ec406 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810038:	0005883a 	mov	r2,zero
  81003c:	003fb106 	br	80ff04 <__alt_mem_onchip_mem+0xff78ff04>
  810040:	0005883a 	mov	r2,zero
  810044:	003fbc06 	br	80ff38 <__alt_mem_onchip_mem+0xff78ff38>
  810048:	1c44b03a 	or	r2,r3,r17
  81004c:	80008e1e 	bne	r16,zero,810288 <__subdf3+0x7c4>
  810050:	1000c826 	beq	r2,zero,810374 <__subdf3+0x8b0>
  810054:	2984b03a 	or	r2,r5,r6
  810058:	103ebb26 	beq	r2,zero,80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  81005c:	8989883a 	add	r4,r17,r6
  810060:	1945883a 	add	r2,r3,r5
  810064:	2447803a 	cmpltu	r3,r4,r17
  810068:	1887883a 	add	r3,r3,r2
  81006c:	1880202c 	andhi	r2,r3,128
  810070:	2023883a 	mov	r17,r4
  810074:	103f1626 	beq	r2,zero,80fcd0 <__alt_mem_onchip_mem+0xff78fcd0>
  810078:	00bfe034 	movhi	r2,65408
  81007c:	10bfffc4 	addi	r2,r2,-1
  810080:	5021883a 	mov	r16,r10
  810084:	1886703a 	and	r3,r3,r2
  810088:	003eaf06 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  81008c:	3825883a 	mov	r18,r7
  810090:	003f0f06 	br	80fcd0 <__alt_mem_onchip_mem+0xff78fcd0>
  810094:	1c44b03a 	or	r2,r3,r17
  810098:	8000251e 	bne	r16,zero,810130 <__subdf3+0x66c>
  81009c:	1000661e 	bne	r2,zero,810238 <__subdf3+0x774>
  8100a0:	2990b03a 	or	r8,r5,r6
  8100a4:	40009626 	beq	r8,zero,810300 <__subdf3+0x83c>
  8100a8:	2807883a 	mov	r3,r5
  8100ac:	3023883a 	mov	r17,r6
  8100b0:	3825883a 	mov	r18,r7
  8100b4:	003ea406 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  8100b8:	127ff804 	addi	r9,r2,-32
  8100bc:	01000804 	movi	r4,32
  8100c0:	2a52d83a 	srl	r9,r5,r9
  8100c4:	11008c26 	beq	r2,r4,8102f8 <__subdf3+0x834>
  8100c8:	01001004 	movi	r4,64
  8100cc:	2085c83a 	sub	r2,r4,r2
  8100d0:	2884983a 	sll	r2,r5,r2
  8100d4:	118cb03a 	or	r6,r2,r6
  8100d8:	300cc03a 	cmpne	r6,r6,zero
  8100dc:	4992b03a 	or	r9,r9,r6
  8100e0:	0005883a 	mov	r2,zero
  8100e4:	003f1206 	br	80fd30 <__alt_mem_onchip_mem+0xff78fd30>
  8100e8:	0101ffc4 	movi	r4,2047
  8100ec:	493f9c1e 	bne	r9,r4,80ff60 <__alt_mem_onchip_mem+0xff78ff60>
  8100f0:	2807883a 	mov	r3,r5
  8100f4:	3023883a 	mov	r17,r6
  8100f8:	4821883a 	mov	r16,r9
  8100fc:	3825883a 	mov	r18,r7
  810100:	003e9106 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810104:	80001f1e 	bne	r16,zero,810184 <__subdf3+0x6c0>
  810108:	1c48b03a 	or	r4,r3,r17
  81010c:	20005a26 	beq	r4,zero,810278 <__subdf3+0x7b4>
  810110:	0084303a 	nor	r2,zero,r2
  810114:	1000561e 	bne	r2,zero,810270 <__subdf3+0x7ac>
  810118:	89a3883a 	add	r17,r17,r6
  81011c:	1945883a 	add	r2,r3,r5
  810120:	898d803a 	cmpltu	r6,r17,r6
  810124:	3087883a 	add	r3,r6,r2
  810128:	4821883a 	mov	r16,r9
  81012c:	003f0506 	br	80fd44 <__alt_mem_onchip_mem+0xff78fd44>
  810130:	10002b1e 	bne	r2,zero,8101e0 <__subdf3+0x71c>
  810134:	2984b03a 	or	r2,r5,r6
  810138:	10008026 	beq	r2,zero,81033c <__subdf3+0x878>
  81013c:	2807883a 	mov	r3,r5
  810140:	3023883a 	mov	r17,r6
  810144:	3825883a 	mov	r18,r7
  810148:	0401ffc4 	movi	r16,2047
  81014c:	003e7e06 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810150:	3809883a 	mov	r4,r7
  810154:	0011883a 	mov	r8,zero
  810158:	0005883a 	mov	r2,zero
  81015c:	003ee306 	br	80fcec <__alt_mem_onchip_mem+0xff78fcec>
  810160:	1c62b03a 	or	r17,r3,r17
  810164:	8822c03a 	cmpne	r17,r17,zero
  810168:	0005883a 	mov	r2,zero
  81016c:	003f8906 	br	80ff94 <__alt_mem_onchip_mem+0xff78ff94>
  810170:	3809883a 	mov	r4,r7
  810174:	4821883a 	mov	r16,r9
  810178:	0011883a 	mov	r8,zero
  81017c:	0005883a 	mov	r2,zero
  810180:	003eda06 	br	80fcec <__alt_mem_onchip_mem+0xff78fcec>
  810184:	0101ffc4 	movi	r4,2047
  810188:	49003b26 	beq	r9,r4,810278 <__subdf3+0x7b4>
  81018c:	0085c83a 	sub	r2,zero,r2
  810190:	18c02034 	orhi	r3,r3,128
  810194:	01000e04 	movi	r4,56
  810198:	20806e16 	blt	r4,r2,810354 <__subdf3+0x890>
  81019c:	010007c4 	movi	r4,31
  8101a0:	20807716 	blt	r4,r2,810380 <__subdf3+0x8bc>
  8101a4:	01000804 	movi	r4,32
  8101a8:	2089c83a 	sub	r4,r4,r2
  8101ac:	1914983a 	sll	r10,r3,r4
  8101b0:	8890d83a 	srl	r8,r17,r2
  8101b4:	8908983a 	sll	r4,r17,r4
  8101b8:	1884d83a 	srl	r2,r3,r2
  8101bc:	5222b03a 	or	r17,r10,r8
  8101c0:	2006c03a 	cmpne	r3,r4,zero
  8101c4:	88e2b03a 	or	r17,r17,r3
  8101c8:	89a3883a 	add	r17,r17,r6
  8101cc:	1145883a 	add	r2,r2,r5
  8101d0:	898d803a 	cmpltu	r6,r17,r6
  8101d4:	3087883a 	add	r3,r6,r2
  8101d8:	4821883a 	mov	r16,r9
  8101dc:	003ed906 	br	80fd44 <__alt_mem_onchip_mem+0xff78fd44>
  8101e0:	2984b03a 	or	r2,r5,r6
  8101e4:	10004226 	beq	r2,zero,8102f0 <__subdf3+0x82c>
  8101e8:	1808d0fa 	srli	r4,r3,3
  8101ec:	8822d0fa 	srli	r17,r17,3
  8101f0:	1806977a 	slli	r3,r3,29
  8101f4:	2080022c 	andhi	r2,r4,8
  8101f8:	1c62b03a 	or	r17,r3,r17
  8101fc:	10000826 	beq	r2,zero,810220 <__subdf3+0x75c>
  810200:	2812d0fa 	srli	r9,r5,3
  810204:	4880022c 	andhi	r2,r9,8
  810208:	1000051e 	bne	r2,zero,810220 <__subdf3+0x75c>
  81020c:	300cd0fa 	srli	r6,r6,3
  810210:	2804977a 	slli	r2,r5,29
  810214:	4809883a 	mov	r4,r9
  810218:	3825883a 	mov	r18,r7
  81021c:	11a2b03a 	or	r17,r2,r6
  810220:	8806d77a 	srli	r3,r17,29
  810224:	200890fa 	slli	r4,r4,3
  810228:	882290fa 	slli	r17,r17,3
  81022c:	0401ffc4 	movi	r16,2047
  810230:	1906b03a 	or	r3,r3,r4
  810234:	003e4406 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810238:	2984b03a 	or	r2,r5,r6
  81023c:	103e4226 	beq	r2,zero,80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810240:	8989c83a 	sub	r4,r17,r6
  810244:	8911803a 	cmpltu	r8,r17,r4
  810248:	1945c83a 	sub	r2,r3,r5
  81024c:	1205c83a 	sub	r2,r2,r8
  810250:	1200202c 	andhi	r8,r2,128
  810254:	403e9a26 	beq	r8,zero,80fcc0 <__alt_mem_onchip_mem+0xff78fcc0>
  810258:	3463c83a 	sub	r17,r6,r17
  81025c:	28c5c83a 	sub	r2,r5,r3
  810260:	344d803a 	cmpltu	r6,r6,r17
  810264:	1187c83a 	sub	r3,r2,r6
  810268:	3825883a 	mov	r18,r7
  81026c:	003e3606 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810270:	0101ffc4 	movi	r4,2047
  810274:	493fc71e 	bne	r9,r4,810194 <__alt_mem_onchip_mem+0xff790194>
  810278:	2807883a 	mov	r3,r5
  81027c:	3023883a 	mov	r17,r6
  810280:	4821883a 	mov	r16,r9
  810284:	003e3006 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810288:	10003626 	beq	r2,zero,810364 <__subdf3+0x8a0>
  81028c:	2984b03a 	or	r2,r5,r6
  810290:	10001726 	beq	r2,zero,8102f0 <__subdf3+0x82c>
  810294:	1808d0fa 	srli	r4,r3,3
  810298:	8822d0fa 	srli	r17,r17,3
  81029c:	1806977a 	slli	r3,r3,29
  8102a0:	2080022c 	andhi	r2,r4,8
  8102a4:	1c62b03a 	or	r17,r3,r17
  8102a8:	10000726 	beq	r2,zero,8102c8 <__subdf3+0x804>
  8102ac:	2812d0fa 	srli	r9,r5,3
  8102b0:	4880022c 	andhi	r2,r9,8
  8102b4:	1000041e 	bne	r2,zero,8102c8 <__subdf3+0x804>
  8102b8:	300cd0fa 	srli	r6,r6,3
  8102bc:	2804977a 	slli	r2,r5,29
  8102c0:	4809883a 	mov	r4,r9
  8102c4:	11a2b03a 	or	r17,r2,r6
  8102c8:	8806d77a 	srli	r3,r17,29
  8102cc:	200890fa 	slli	r4,r4,3
  8102d0:	882290fa 	slli	r17,r17,3
  8102d4:	3825883a 	mov	r18,r7
  8102d8:	1906b03a 	or	r3,r3,r4
  8102dc:	0401ffc4 	movi	r16,2047
  8102e0:	003e1906 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  8102e4:	000b883a 	mov	r5,zero
  8102e8:	0005883a 	mov	r2,zero
  8102ec:	003e2e06 	br	80fba8 <__alt_mem_onchip_mem+0xff78fba8>
  8102f0:	0401ffc4 	movi	r16,2047
  8102f4:	003e1406 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  8102f8:	0005883a 	mov	r2,zero
  8102fc:	003f7506 	br	8100d4 <__alt_mem_onchip_mem+0xff7900d4>
  810300:	0005883a 	mov	r2,zero
  810304:	0009883a 	mov	r4,zero
  810308:	003e7806 	br	80fcec <__alt_mem_onchip_mem+0xff78fcec>
  81030c:	123ff804 	addi	r8,r2,-32
  810310:	01000804 	movi	r4,32
  810314:	1a10d83a 	srl	r8,r3,r8
  810318:	11002526 	beq	r2,r4,8103b0 <__subdf3+0x8ec>
  81031c:	01001004 	movi	r4,64
  810320:	2085c83a 	sub	r2,r4,r2
  810324:	1884983a 	sll	r2,r3,r2
  810328:	1444b03a 	or	r2,r2,r17
  81032c:	1004c03a 	cmpne	r2,r2,zero
  810330:	40a2b03a 	or	r17,r8,r2
  810334:	0005883a 	mov	r2,zero
  810338:	003f1606 	br	80ff94 <__alt_mem_onchip_mem+0xff78ff94>
  81033c:	02000434 	movhi	r8,16
  810340:	0009883a 	mov	r4,zero
  810344:	423fffc4 	addi	r8,r8,-1
  810348:	00bfffc4 	movi	r2,-1
  81034c:	0401ffc4 	movi	r16,2047
  810350:	003e6606 	br	80fcec <__alt_mem_onchip_mem+0xff78fcec>
  810354:	1c62b03a 	or	r17,r3,r17
  810358:	8822c03a 	cmpne	r17,r17,zero
  81035c:	0005883a 	mov	r2,zero
  810360:	003f9906 	br	8101c8 <__alt_mem_onchip_mem+0xff7901c8>
  810364:	2807883a 	mov	r3,r5
  810368:	3023883a 	mov	r17,r6
  81036c:	0401ffc4 	movi	r16,2047
  810370:	003df506 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810374:	2807883a 	mov	r3,r5
  810378:	3023883a 	mov	r17,r6
  81037c:	003df206 	br	80fb48 <__alt_mem_onchip_mem+0xff78fb48>
  810380:	123ff804 	addi	r8,r2,-32
  810384:	01000804 	movi	r4,32
  810388:	1a10d83a 	srl	r8,r3,r8
  81038c:	11000a26 	beq	r2,r4,8103b8 <__subdf3+0x8f4>
  810390:	01001004 	movi	r4,64
  810394:	2085c83a 	sub	r2,r4,r2
  810398:	1884983a 	sll	r2,r3,r2
  81039c:	1444b03a 	or	r2,r2,r17
  8103a0:	1004c03a 	cmpne	r2,r2,zero
  8103a4:	40a2b03a 	or	r17,r8,r2
  8103a8:	0005883a 	mov	r2,zero
  8103ac:	003f8606 	br	8101c8 <__alt_mem_onchip_mem+0xff7901c8>
  8103b0:	0005883a 	mov	r2,zero
  8103b4:	003fdc06 	br	810328 <__alt_mem_onchip_mem+0xff790328>
  8103b8:	0005883a 	mov	r2,zero
  8103bc:	003ff706 	br	81039c <__alt_mem_onchip_mem+0xff79039c>

008103c0 <__fixdfsi>:
  8103c0:	280cd53a 	srli	r6,r5,20
  8103c4:	00c00434 	movhi	r3,16
  8103c8:	18ffffc4 	addi	r3,r3,-1
  8103cc:	3181ffcc 	andi	r6,r6,2047
  8103d0:	01c0ff84 	movi	r7,1022
  8103d4:	28c6703a 	and	r3,r5,r3
  8103d8:	280ad7fa 	srli	r5,r5,31
  8103dc:	3980120e 	bge	r7,r6,810428 <__fixdfsi+0x68>
  8103e0:	00810744 	movi	r2,1053
  8103e4:	11800c16 	blt	r2,r6,810418 <__fixdfsi+0x58>
  8103e8:	00810cc4 	movi	r2,1075
  8103ec:	1185c83a 	sub	r2,r2,r6
  8103f0:	01c007c4 	movi	r7,31
  8103f4:	18c00434 	orhi	r3,r3,16
  8103f8:	38800d16 	blt	r7,r2,810430 <__fixdfsi+0x70>
  8103fc:	31befb44 	addi	r6,r6,-1043
  810400:	2084d83a 	srl	r2,r4,r2
  810404:	1986983a 	sll	r3,r3,r6
  810408:	1884b03a 	or	r2,r3,r2
  81040c:	28000726 	beq	r5,zero,81042c <__fixdfsi+0x6c>
  810410:	0085c83a 	sub	r2,zero,r2
  810414:	f800283a 	ret
  810418:	00a00034 	movhi	r2,32768
  81041c:	10bfffc4 	addi	r2,r2,-1
  810420:	2885883a 	add	r2,r5,r2
  810424:	f800283a 	ret
  810428:	0005883a 	mov	r2,zero
  81042c:	f800283a 	ret
  810430:	008104c4 	movi	r2,1043
  810434:	1185c83a 	sub	r2,r2,r6
  810438:	1884d83a 	srl	r2,r3,r2
  81043c:	003ff306 	br	81040c <__alt_mem_onchip_mem+0xff79040c>

00810440 <__floatsidf>:
  810440:	defffd04 	addi	sp,sp,-12
  810444:	dfc00215 	stw	ra,8(sp)
  810448:	dc400115 	stw	r17,4(sp)
  81044c:	dc000015 	stw	r16,0(sp)
  810450:	20002b26 	beq	r4,zero,810500 <__floatsidf+0xc0>
  810454:	2023883a 	mov	r17,r4
  810458:	2020d7fa 	srli	r16,r4,31
  81045c:	20002d16 	blt	r4,zero,810514 <__floatsidf+0xd4>
  810460:	8809883a 	mov	r4,r17
  810464:	08105c40 	call	8105c4 <__clzsi2>
  810468:	01410784 	movi	r5,1054
  81046c:	288bc83a 	sub	r5,r5,r2
  810470:	01010cc4 	movi	r4,1075
  810474:	2149c83a 	sub	r4,r4,r5
  810478:	00c007c4 	movi	r3,31
  81047c:	1900160e 	bge	r3,r4,8104d8 <__floatsidf+0x98>
  810480:	00c104c4 	movi	r3,1043
  810484:	1947c83a 	sub	r3,r3,r5
  810488:	88c6983a 	sll	r3,r17,r3
  81048c:	00800434 	movhi	r2,16
  810490:	10bfffc4 	addi	r2,r2,-1
  810494:	1886703a 	and	r3,r3,r2
  810498:	2941ffcc 	andi	r5,r5,2047
  81049c:	800d883a 	mov	r6,r16
  8104a0:	0005883a 	mov	r2,zero
  8104a4:	280a953a 	slli	r5,r5,20
  8104a8:	31803fcc 	andi	r6,r6,255
  8104ac:	01000434 	movhi	r4,16
  8104b0:	300c97fa 	slli	r6,r6,31
  8104b4:	213fffc4 	addi	r4,r4,-1
  8104b8:	1906703a 	and	r3,r3,r4
  8104bc:	1946b03a 	or	r3,r3,r5
  8104c0:	1986b03a 	or	r3,r3,r6
  8104c4:	dfc00217 	ldw	ra,8(sp)
  8104c8:	dc400117 	ldw	r17,4(sp)
  8104cc:	dc000017 	ldw	r16,0(sp)
  8104d0:	dec00304 	addi	sp,sp,12
  8104d4:	f800283a 	ret
  8104d8:	00c002c4 	movi	r3,11
  8104dc:	1887c83a 	sub	r3,r3,r2
  8104e0:	88c6d83a 	srl	r3,r17,r3
  8104e4:	8904983a 	sll	r2,r17,r4
  8104e8:	01000434 	movhi	r4,16
  8104ec:	213fffc4 	addi	r4,r4,-1
  8104f0:	2941ffcc 	andi	r5,r5,2047
  8104f4:	1906703a 	and	r3,r3,r4
  8104f8:	800d883a 	mov	r6,r16
  8104fc:	003fe906 	br	8104a4 <__alt_mem_onchip_mem+0xff7904a4>
  810500:	000d883a 	mov	r6,zero
  810504:	000b883a 	mov	r5,zero
  810508:	0007883a 	mov	r3,zero
  81050c:	0005883a 	mov	r2,zero
  810510:	003fe406 	br	8104a4 <__alt_mem_onchip_mem+0xff7904a4>
  810514:	0123c83a 	sub	r17,zero,r4
  810518:	003fd106 	br	810460 <__alt_mem_onchip_mem+0xff790460>

0081051c <__floatunsidf>:
  81051c:	defffe04 	addi	sp,sp,-8
  810520:	dc000015 	stw	r16,0(sp)
  810524:	dfc00115 	stw	ra,4(sp)
  810528:	2021883a 	mov	r16,r4
  81052c:	20002226 	beq	r4,zero,8105b8 <__floatunsidf+0x9c>
  810530:	08105c40 	call	8105c4 <__clzsi2>
  810534:	01010784 	movi	r4,1054
  810538:	2089c83a 	sub	r4,r4,r2
  81053c:	01810cc4 	movi	r6,1075
  810540:	310dc83a 	sub	r6,r6,r4
  810544:	00c007c4 	movi	r3,31
  810548:	1980120e 	bge	r3,r6,810594 <__floatunsidf+0x78>
  81054c:	00c104c4 	movi	r3,1043
  810550:	1907c83a 	sub	r3,r3,r4
  810554:	80ca983a 	sll	r5,r16,r3
  810558:	00800434 	movhi	r2,16
  81055c:	10bfffc4 	addi	r2,r2,-1
  810560:	2101ffcc 	andi	r4,r4,2047
  810564:	0021883a 	mov	r16,zero
  810568:	288a703a 	and	r5,r5,r2
  81056c:	2008953a 	slli	r4,r4,20
  810570:	00c00434 	movhi	r3,16
  810574:	18ffffc4 	addi	r3,r3,-1
  810578:	28c6703a 	and	r3,r5,r3
  81057c:	8005883a 	mov	r2,r16
  810580:	1906b03a 	or	r3,r3,r4
  810584:	dfc00117 	ldw	ra,4(sp)
  810588:	dc000017 	ldw	r16,0(sp)
  81058c:	dec00204 	addi	sp,sp,8
  810590:	f800283a 	ret
  810594:	00c002c4 	movi	r3,11
  810598:	188bc83a 	sub	r5,r3,r2
  81059c:	814ad83a 	srl	r5,r16,r5
  8105a0:	00c00434 	movhi	r3,16
  8105a4:	18ffffc4 	addi	r3,r3,-1
  8105a8:	81a0983a 	sll	r16,r16,r6
  8105ac:	2101ffcc 	andi	r4,r4,2047
  8105b0:	28ca703a 	and	r5,r5,r3
  8105b4:	003fed06 	br	81056c <__alt_mem_onchip_mem+0xff79056c>
  8105b8:	0009883a 	mov	r4,zero
  8105bc:	000b883a 	mov	r5,zero
  8105c0:	003fea06 	br	81056c <__alt_mem_onchip_mem+0xff79056c>

008105c4 <__clzsi2>:
  8105c4:	00bfffd4 	movui	r2,65535
  8105c8:	11000536 	bltu	r2,r4,8105e0 <__clzsi2+0x1c>
  8105cc:	00803fc4 	movi	r2,255
  8105d0:	11000f36 	bltu	r2,r4,810610 <__clzsi2+0x4c>
  8105d4:	00800804 	movi	r2,32
  8105d8:	0007883a 	mov	r3,zero
  8105dc:	00000506 	br	8105f4 <__clzsi2+0x30>
  8105e0:	00804034 	movhi	r2,256
  8105e4:	10bfffc4 	addi	r2,r2,-1
  8105e8:	11000c2e 	bgeu	r2,r4,81061c <__clzsi2+0x58>
  8105ec:	00800204 	movi	r2,8
  8105f0:	00c00604 	movi	r3,24
  8105f4:	20c8d83a 	srl	r4,r4,r3
  8105f8:	00c02074 	movhi	r3,129
  8105fc:	18d2d304 	addi	r3,r3,19276
  810600:	1909883a 	add	r4,r3,r4
  810604:	20c00003 	ldbu	r3,0(r4)
  810608:	10c5c83a 	sub	r2,r2,r3
  81060c:	f800283a 	ret
  810610:	00800604 	movi	r2,24
  810614:	00c00204 	movi	r3,8
  810618:	003ff606 	br	8105f4 <__alt_mem_onchip_mem+0xff7905f4>
  81061c:	00800404 	movi	r2,16
  810620:	1007883a 	mov	r3,r2
  810624:	003ff306 	br	8105f4 <__alt_mem_onchip_mem+0xff7905f4>

00810628 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810628:	defffe04 	addi	sp,sp,-8
  81062c:	dfc00115 	stw	ra,4(sp)
  810630:	df000015 	stw	fp,0(sp)
  810634:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810638:	d0a00b17 	ldw	r2,-32724(gp)
  81063c:	10000326 	beq	r2,zero,81064c <alt_get_errno+0x24>
  810640:	d0a00b17 	ldw	r2,-32724(gp)
  810644:	103ee83a 	callr	r2
  810648:	00000106 	br	810650 <alt_get_errno+0x28>
  81064c:	d0a79c04 	addi	r2,gp,-24976
}
  810650:	e037883a 	mov	sp,fp
  810654:	dfc00117 	ldw	ra,4(sp)
  810658:	df000017 	ldw	fp,0(sp)
  81065c:	dec00204 	addi	sp,sp,8
  810660:	f800283a 	ret

00810664 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810664:	defffb04 	addi	sp,sp,-20
  810668:	dfc00415 	stw	ra,16(sp)
  81066c:	df000315 	stw	fp,12(sp)
  810670:	df000304 	addi	fp,sp,12
  810674:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810678:	e0bfff17 	ldw	r2,-4(fp)
  81067c:	10000616 	blt	r2,zero,810698 <close+0x34>
  810680:	e0bfff17 	ldw	r2,-4(fp)
  810684:	10c00324 	muli	r3,r2,12
  810688:	00802074 	movhi	r2,129
  81068c:	1095fd04 	addi	r2,r2,22516
  810690:	1885883a 	add	r2,r3,r2
  810694:	00000106 	br	81069c <close+0x38>
  810698:	0005883a 	mov	r2,zero
  81069c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  8106a0:	e0bffd17 	ldw	r2,-12(fp)
  8106a4:	10001926 	beq	r2,zero,81070c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  8106a8:	e0bffd17 	ldw	r2,-12(fp)
  8106ac:	10800017 	ldw	r2,0(r2)
  8106b0:	10800417 	ldw	r2,16(r2)
  8106b4:	10000626 	beq	r2,zero,8106d0 <close+0x6c>
  8106b8:	e0bffd17 	ldw	r2,-12(fp)
  8106bc:	10800017 	ldw	r2,0(r2)
  8106c0:	10800417 	ldw	r2,16(r2)
  8106c4:	e13ffd17 	ldw	r4,-12(fp)
  8106c8:	103ee83a 	callr	r2
  8106cc:	00000106 	br	8106d4 <close+0x70>
  8106d0:	0005883a 	mov	r2,zero
  8106d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  8106d8:	e13fff17 	ldw	r4,-4(fp)
  8106dc:	08110f80 	call	8110f8 <alt_release_fd>
    if (rval < 0)
  8106e0:	e0bffe17 	ldw	r2,-8(fp)
  8106e4:	1000070e 	bge	r2,zero,810704 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  8106e8:	08106280 	call	810628 <alt_get_errno>
  8106ec:	1007883a 	mov	r3,r2
  8106f0:	e0bffe17 	ldw	r2,-8(fp)
  8106f4:	0085c83a 	sub	r2,zero,r2
  8106f8:	18800015 	stw	r2,0(r3)
      return -1;
  8106fc:	00bfffc4 	movi	r2,-1
  810700:	00000706 	br	810720 <close+0xbc>
    }
    return 0;
  810704:	0005883a 	mov	r2,zero
  810708:	00000506 	br	810720 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  81070c:	08106280 	call	810628 <alt_get_errno>
  810710:	1007883a 	mov	r3,r2
  810714:	00801444 	movi	r2,81
  810718:	18800015 	stw	r2,0(r3)
    return -1;
  81071c:	00bfffc4 	movi	r2,-1
  }
}
  810720:	e037883a 	mov	sp,fp
  810724:	dfc00117 	ldw	ra,4(sp)
  810728:	df000017 	ldw	fp,0(sp)
  81072c:	dec00204 	addi	sp,sp,8
  810730:	f800283a 	ret

00810734 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810734:	defffc04 	addi	sp,sp,-16
  810738:	df000315 	stw	fp,12(sp)
  81073c:	df000304 	addi	fp,sp,12
  810740:	e13ffd15 	stw	r4,-12(fp)
  810744:	e17ffe15 	stw	r5,-8(fp)
  810748:	e1bfff15 	stw	r6,-4(fp)
  return len;
  81074c:	e0bfff17 	ldw	r2,-4(fp)
}
  810750:	e037883a 	mov	sp,fp
  810754:	df000017 	ldw	fp,0(sp)
  810758:	dec00104 	addi	sp,sp,4
  81075c:	f800283a 	ret

00810760 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810760:	defffe04 	addi	sp,sp,-8
  810764:	dfc00115 	stw	ra,4(sp)
  810768:	df000015 	stw	fp,0(sp)
  81076c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810770:	d0a00b17 	ldw	r2,-32724(gp)
  810774:	10000326 	beq	r2,zero,810784 <alt_get_errno+0x24>
  810778:	d0a00b17 	ldw	r2,-32724(gp)
  81077c:	103ee83a 	callr	r2
  810780:	00000106 	br	810788 <alt_get_errno+0x28>
  810784:	d0a79c04 	addi	r2,gp,-24976
}
  810788:	e037883a 	mov	sp,fp
  81078c:	dfc00117 	ldw	ra,4(sp)
  810790:	df000017 	ldw	fp,0(sp)
  810794:	dec00204 	addi	sp,sp,8
  810798:	f800283a 	ret

0081079c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81079c:	defffb04 	addi	sp,sp,-20
  8107a0:	dfc00415 	stw	ra,16(sp)
  8107a4:	df000315 	stw	fp,12(sp)
  8107a8:	df000304 	addi	fp,sp,12
  8107ac:	e13ffe15 	stw	r4,-8(fp)
  8107b0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8107b4:	e0bffe17 	ldw	r2,-8(fp)
  8107b8:	10000616 	blt	r2,zero,8107d4 <fstat+0x38>
  8107bc:	e0bffe17 	ldw	r2,-8(fp)
  8107c0:	10c00324 	muli	r3,r2,12
  8107c4:	00802074 	movhi	r2,129
  8107c8:	1095fd04 	addi	r2,r2,22516
  8107cc:	1885883a 	add	r2,r3,r2
  8107d0:	00000106 	br	8107d8 <fstat+0x3c>
  8107d4:	0005883a 	mov	r2,zero
  8107d8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  8107dc:	e0bffd17 	ldw	r2,-12(fp)
  8107e0:	10001026 	beq	r2,zero,810824 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  8107e4:	e0bffd17 	ldw	r2,-12(fp)
  8107e8:	10800017 	ldw	r2,0(r2)
  8107ec:	10800817 	ldw	r2,32(r2)
  8107f0:	10000726 	beq	r2,zero,810810 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  8107f4:	e0bffd17 	ldw	r2,-12(fp)
  8107f8:	10800017 	ldw	r2,0(r2)
  8107fc:	10800817 	ldw	r2,32(r2)
  810800:	e17fff17 	ldw	r5,-4(fp)
  810804:	e13ffd17 	ldw	r4,-12(fp)
  810808:	103ee83a 	callr	r2
  81080c:	00000a06 	br	810838 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  810810:	e0bfff17 	ldw	r2,-4(fp)
  810814:	00c80004 	movi	r3,8192
  810818:	10c00115 	stw	r3,4(r2)
      return 0;
  81081c:	0005883a 	mov	r2,zero
  810820:	00000506 	br	810838 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810824:	08107600 	call	810760 <alt_get_errno>
  810828:	1007883a 	mov	r3,r2
  81082c:	00801444 	movi	r2,81
  810830:	18800015 	stw	r2,0(r3)
    return -1;
  810834:	00bfffc4 	movi	r2,-1
  }
}
  810838:	e037883a 	mov	sp,fp
  81083c:	dfc00117 	ldw	ra,4(sp)
  810840:	df000017 	ldw	fp,0(sp)
  810844:	dec00204 	addi	sp,sp,8
  810848:	f800283a 	ret

0081084c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  81084c:	defff004 	addi	sp,sp,-64
  810850:	df000f15 	stw	fp,60(sp)
  810854:	df000f04 	addi	fp,sp,60
  810858:	e13ffd15 	stw	r4,-12(fp)
  81085c:	e17ffe15 	stw	r5,-8(fp)
  810860:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  810864:	00bffa84 	movi	r2,-22
  810868:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  81086c:	e0bffd17 	ldw	r2,-12(fp)
  810870:	10800828 	cmpgeui	r2,r2,32
  810874:	1000501e 	bne	r2,zero,8109b8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810878:	0005303a 	rdctl	r2,status
  81087c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810880:	e0fff617 	ldw	r3,-40(fp)
  810884:	00bfff84 	movi	r2,-2
  810888:	1884703a 	and	r2,r3,r2
  81088c:	1001703a 	wrctl	status,r2
  
  return context;
  810890:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  810894:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  810898:	008020b4 	movhi	r2,130
  81089c:	10a2ba04 	addi	r2,r2,-29976
  8108a0:	e0fffd17 	ldw	r3,-12(fp)
  8108a4:	180690fa 	slli	r3,r3,3
  8108a8:	10c5883a 	add	r2,r2,r3
  8108ac:	e0ffff17 	ldw	r3,-4(fp)
  8108b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  8108b4:	008020b4 	movhi	r2,130
  8108b8:	10a2ba04 	addi	r2,r2,-29976
  8108bc:	e0fffd17 	ldw	r3,-12(fp)
  8108c0:	180690fa 	slli	r3,r3,3
  8108c4:	10c5883a 	add	r2,r2,r3
  8108c8:	10800104 	addi	r2,r2,4
  8108cc:	e0fffe17 	ldw	r3,-8(fp)
  8108d0:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  8108d4:	e0bfff17 	ldw	r2,-4(fp)
  8108d8:	10001926 	beq	r2,zero,810940 <alt_irq_register+0xf4>
  8108dc:	e0bffd17 	ldw	r2,-12(fp)
  8108e0:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8108e4:	0005303a 	rdctl	r2,status
  8108e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8108ec:	e0fff717 	ldw	r3,-36(fp)
  8108f0:	00bfff84 	movi	r2,-2
  8108f4:	1884703a 	and	r2,r3,r2
  8108f8:	1001703a 	wrctl	status,r2
  
  return context;
  8108fc:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810900:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  810904:	00c00044 	movi	r3,1
  810908:	e0bff217 	ldw	r2,-56(fp)
  81090c:	1884983a 	sll	r2,r3,r2
  810910:	1007883a 	mov	r3,r2
  810914:	d0a7a317 	ldw	r2,-24948(gp)
  810918:	1884b03a 	or	r2,r3,r2
  81091c:	d0a7a315 	stw	r2,-24948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810920:	d0a7a317 	ldw	r2,-24948(gp)
  810924:	100170fa 	wrctl	ienable,r2
  810928:	e0bff817 	ldw	r2,-32(fp)
  81092c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810930:	e0bff917 	ldw	r2,-28(fp)
  810934:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810938:	0005883a 	mov	r2,zero
  81093c:	00001906 	br	8109a4 <alt_irq_register+0x158>
  810940:	e0bffd17 	ldw	r2,-12(fp)
  810944:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810948:	0005303a 	rdctl	r2,status
  81094c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810950:	e0fffa17 	ldw	r3,-24(fp)
  810954:	00bfff84 	movi	r2,-2
  810958:	1884703a 	and	r2,r3,r2
  81095c:	1001703a 	wrctl	status,r2
  
  return context;
  810960:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810964:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  810968:	00c00044 	movi	r3,1
  81096c:	e0bff417 	ldw	r2,-48(fp)
  810970:	1884983a 	sll	r2,r3,r2
  810974:	0084303a 	nor	r2,zero,r2
  810978:	1007883a 	mov	r3,r2
  81097c:	d0a7a317 	ldw	r2,-24948(gp)
  810980:	1884703a 	and	r2,r3,r2
  810984:	d0a7a315 	stw	r2,-24948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810988:	d0a7a317 	ldw	r2,-24948(gp)
  81098c:	100170fa 	wrctl	ienable,r2
  810990:	e0bffb17 	ldw	r2,-20(fp)
  810994:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810998:	e0bffc17 	ldw	r2,-16(fp)
  81099c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8109a0:	0005883a 	mov	r2,zero
  8109a4:	e0bff115 	stw	r2,-60(fp)
  8109a8:	e0bff317 	ldw	r2,-52(fp)
  8109ac:	e0bff515 	stw	r2,-44(fp)
  8109b0:	e0bff517 	ldw	r2,-44(fp)
  8109b4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  8109b8:	e0bff117 	ldw	r2,-60(fp)
}
  8109bc:	e037883a 	mov	sp,fp
  8109c0:	df000017 	ldw	fp,0(sp)
  8109c4:	dec00104 	addi	sp,sp,4
  8109c8:	f800283a 	ret

008109cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8109cc:	defffe04 	addi	sp,sp,-8
  8109d0:	dfc00115 	stw	ra,4(sp)
  8109d4:	df000015 	stw	fp,0(sp)
  8109d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8109dc:	d0a00b17 	ldw	r2,-32724(gp)
  8109e0:	10000326 	beq	r2,zero,8109f0 <alt_get_errno+0x24>
  8109e4:	d0a00b17 	ldw	r2,-32724(gp)
  8109e8:	103ee83a 	callr	r2
  8109ec:	00000106 	br	8109f4 <alt_get_errno+0x28>
  8109f0:	d0a79c04 	addi	r2,gp,-24976
}
  8109f4:	e037883a 	mov	sp,fp
  8109f8:	dfc00117 	ldw	ra,4(sp)
  8109fc:	df000017 	ldw	fp,0(sp)
  810a00:	dec00204 	addi	sp,sp,8
  810a04:	f800283a 	ret

00810a08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810a08:	deffed04 	addi	sp,sp,-76
  810a0c:	dfc01215 	stw	ra,72(sp)
  810a10:	df001115 	stw	fp,68(sp)
  810a14:	df001104 	addi	fp,sp,68
  810a18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810a1c:	e0bfff17 	ldw	r2,-4(fp)
  810a20:	10000616 	blt	r2,zero,810a3c <isatty+0x34>
  810a24:	e0bfff17 	ldw	r2,-4(fp)
  810a28:	10c00324 	muli	r3,r2,12
  810a2c:	00802074 	movhi	r2,129
  810a30:	1095fd04 	addi	r2,r2,22516
  810a34:	1885883a 	add	r2,r3,r2
  810a38:	00000106 	br	810a40 <isatty+0x38>
  810a3c:	0005883a 	mov	r2,zero
  810a40:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  810a44:	e0bfef17 	ldw	r2,-68(fp)
  810a48:	10000e26 	beq	r2,zero,810a84 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810a4c:	e0bfef17 	ldw	r2,-68(fp)
  810a50:	10800017 	ldw	r2,0(r2)
  810a54:	10800817 	ldw	r2,32(r2)
  810a58:	1000021e 	bne	r2,zero,810a64 <isatty+0x5c>
    {
      return 1;
  810a5c:	00800044 	movi	r2,1
  810a60:	00000d06 	br	810a98 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810a64:	e0bff004 	addi	r2,fp,-64
  810a68:	100b883a 	mov	r5,r2
  810a6c:	e13fff17 	ldw	r4,-4(fp)
  810a70:	081079c0 	call	81079c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810a74:	e0bff117 	ldw	r2,-60(fp)
  810a78:	10880020 	cmpeqi	r2,r2,8192
  810a7c:	10803fcc 	andi	r2,r2,255
  810a80:	00000506 	br	810a98 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810a84:	08109cc0 	call	8109cc <alt_get_errno>
  810a88:	1007883a 	mov	r3,r2
  810a8c:	00801444 	movi	r2,81
  810a90:	18800015 	stw	r2,0(r3)
    return 0;
  810a94:	0005883a 	mov	r2,zero
  }
}
  810a98:	e037883a 	mov	sp,fp
  810a9c:	dfc00117 	ldw	ra,4(sp)
  810aa0:	df000017 	ldw	fp,0(sp)
  810aa4:	dec00204 	addi	sp,sp,8
  810aa8:	f800283a 	ret

00810aac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810aac:	defffc04 	addi	sp,sp,-16
  810ab0:	df000315 	stw	fp,12(sp)
  810ab4:	df000304 	addi	fp,sp,12
  810ab8:	e13ffd15 	stw	r4,-12(fp)
  810abc:	e17ffe15 	stw	r5,-8(fp)
  810ac0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810ac4:	e0fffe17 	ldw	r3,-8(fp)
  810ac8:	e0bffd17 	ldw	r2,-12(fp)
  810acc:	18800c26 	beq	r3,r2,810b00 <alt_load_section+0x54>
  {
    while( to != end )
  810ad0:	00000806 	br	810af4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  810ad4:	e0bffe17 	ldw	r2,-8(fp)
  810ad8:	10c00104 	addi	r3,r2,4
  810adc:	e0fffe15 	stw	r3,-8(fp)
  810ae0:	e0fffd17 	ldw	r3,-12(fp)
  810ae4:	19000104 	addi	r4,r3,4
  810ae8:	e13ffd15 	stw	r4,-12(fp)
  810aec:	18c00017 	ldw	r3,0(r3)
  810af0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810af4:	e0fffe17 	ldw	r3,-8(fp)
  810af8:	e0bfff17 	ldw	r2,-4(fp)
  810afc:	18bff51e 	bne	r3,r2,810ad4 <__alt_mem_onchip_mem+0xff790ad4>
    {
      *to++ = *from++;
    }
  }
}
  810b00:	0001883a 	nop
  810b04:	e037883a 	mov	sp,fp
  810b08:	df000017 	ldw	fp,0(sp)
  810b0c:	dec00104 	addi	sp,sp,4
  810b10:	f800283a 	ret

00810b14 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810b14:	defffe04 	addi	sp,sp,-8
  810b18:	dfc00115 	stw	ra,4(sp)
  810b1c:	df000015 	stw	fp,0(sp)
  810b20:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810b24:	01802074 	movhi	r6,129
  810b28:	319b0004 	addi	r6,r6,27648
  810b2c:	01402074 	movhi	r5,129
  810b30:	2953c404 	addi	r5,r5,20240
  810b34:	01002074 	movhi	r4,129
  810b38:	211b0004 	addi	r4,r4,27648
  810b3c:	0810aac0 	call	810aac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810b40:	01802034 	movhi	r6,128
  810b44:	31809104 	addi	r6,r6,580
  810b48:	01402034 	movhi	r5,128
  810b4c:	29400804 	addi	r5,r5,32
  810b50:	01002034 	movhi	r4,128
  810b54:	21000804 	addi	r4,r4,32
  810b58:	0810aac0 	call	810aac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  810b5c:	01802074 	movhi	r6,129
  810b60:	3193c404 	addi	r6,r6,20240
  810b64:	01402074 	movhi	r5,129
  810b68:	29523304 	addi	r5,r5,18636
  810b6c:	01002074 	movhi	r4,129
  810b70:	21123304 	addi	r4,r4,18636
  810b74:	0810aac0 	call	810aac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810b78:	0813a280 	call	813a28 <alt_dcache_flush_all>
  alt_icache_flush_all();
  810b7c:	0813e4c0 	call	813e4c <alt_icache_flush_all>
}
  810b80:	0001883a 	nop
  810b84:	e037883a 	mov	sp,fp
  810b88:	dfc00117 	ldw	ra,4(sp)
  810b8c:	df000017 	ldw	fp,0(sp)
  810b90:	dec00204 	addi	sp,sp,8
  810b94:	f800283a 	ret

00810b98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810b98:	defffe04 	addi	sp,sp,-8
  810b9c:	dfc00115 	stw	ra,4(sp)
  810ba0:	df000015 	stw	fp,0(sp)
  810ba4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810ba8:	d0a00b17 	ldw	r2,-32724(gp)
  810bac:	10000326 	beq	r2,zero,810bbc <alt_get_errno+0x24>
  810bb0:	d0a00b17 	ldw	r2,-32724(gp)
  810bb4:	103ee83a 	callr	r2
  810bb8:	00000106 	br	810bc0 <alt_get_errno+0x28>
  810bbc:	d0a79c04 	addi	r2,gp,-24976
}
  810bc0:	e037883a 	mov	sp,fp
  810bc4:	dfc00117 	ldw	ra,4(sp)
  810bc8:	df000017 	ldw	fp,0(sp)
  810bcc:	dec00204 	addi	sp,sp,8
  810bd0:	f800283a 	ret

00810bd4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  810bd4:	defff904 	addi	sp,sp,-28
  810bd8:	dfc00615 	stw	ra,24(sp)
  810bdc:	df000515 	stw	fp,20(sp)
  810be0:	df000504 	addi	fp,sp,20
  810be4:	e13ffd15 	stw	r4,-12(fp)
  810be8:	e17ffe15 	stw	r5,-8(fp)
  810bec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  810bf0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810bf4:	e0bffd17 	ldw	r2,-12(fp)
  810bf8:	10000616 	blt	r2,zero,810c14 <lseek+0x40>
  810bfc:	e0bffd17 	ldw	r2,-12(fp)
  810c00:	10c00324 	muli	r3,r2,12
  810c04:	00802074 	movhi	r2,129
  810c08:	1095fd04 	addi	r2,r2,22516
  810c0c:	1885883a 	add	r2,r3,r2
  810c10:	00000106 	br	810c18 <lseek+0x44>
  810c14:	0005883a 	mov	r2,zero
  810c18:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  810c1c:	e0bffc17 	ldw	r2,-16(fp)
  810c20:	10001026 	beq	r2,zero,810c64 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810c24:	e0bffc17 	ldw	r2,-16(fp)
  810c28:	10800017 	ldw	r2,0(r2)
  810c2c:	10800717 	ldw	r2,28(r2)
  810c30:	10000926 	beq	r2,zero,810c58 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810c34:	e0bffc17 	ldw	r2,-16(fp)
  810c38:	10800017 	ldw	r2,0(r2)
  810c3c:	10800717 	ldw	r2,28(r2)
  810c40:	e1bfff17 	ldw	r6,-4(fp)
  810c44:	e17ffe17 	ldw	r5,-8(fp)
  810c48:	e13ffc17 	ldw	r4,-16(fp)
  810c4c:	103ee83a 	callr	r2
  810c50:	e0bffb15 	stw	r2,-20(fp)
  810c54:	00000506 	br	810c6c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810c58:	00bfde84 	movi	r2,-134
  810c5c:	e0bffb15 	stw	r2,-20(fp)
  810c60:	00000206 	br	810c6c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  810c64:	00bfebc4 	movi	r2,-81
  810c68:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  810c6c:	e0bffb17 	ldw	r2,-20(fp)
  810c70:	1000070e 	bge	r2,zero,810c90 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  810c74:	0810b980 	call	810b98 <alt_get_errno>
  810c78:	1007883a 	mov	r3,r2
  810c7c:	e0bffb17 	ldw	r2,-20(fp)
  810c80:	0085c83a 	sub	r2,zero,r2
  810c84:	18800015 	stw	r2,0(r3)
    rc = -1;
  810c88:	00bfffc4 	movi	r2,-1
  810c8c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  810c90:	e0bffb17 	ldw	r2,-20(fp)
}
  810c94:	e037883a 	mov	sp,fp
  810c98:	dfc00117 	ldw	ra,4(sp)
  810c9c:	df000017 	ldw	fp,0(sp)
  810ca0:	dec00204 	addi	sp,sp,8
  810ca4:	f800283a 	ret

00810ca8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  810ca8:	defffd04 	addi	sp,sp,-12
  810cac:	dfc00215 	stw	ra,8(sp)
  810cb0:	df000115 	stw	fp,4(sp)
  810cb4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  810cb8:	0009883a 	mov	r4,zero
  810cbc:	08115180 	call	811518 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  810cc0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  810cc4:	08115500 	call	811550 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  810cc8:	01802074 	movhi	r6,129
  810ccc:	31931604 	addi	r6,r6,19544
  810cd0:	01402074 	movhi	r5,129
  810cd4:	29531604 	addi	r5,r5,19544
  810cd8:	01002074 	movhi	r4,129
  810cdc:	21131604 	addi	r4,r4,19544
  810ce0:	08141e40 	call	8141e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  810ce4:	0813b500 	call	813b50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  810ce8:	01002074 	movhi	r4,129
  810cec:	210eec04 	addi	r4,r4,15280
  810cf0:	08145380 	call	814538 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  810cf4:	d0a7a417 	ldw	r2,-24944(gp)
  810cf8:	d0e7a517 	ldw	r3,-24940(gp)
  810cfc:	d127a617 	ldw	r4,-24936(gp)
  810d00:	200d883a 	mov	r6,r4
  810d04:	180b883a 	mov	r5,r3
  810d08:	1009883a 	mov	r4,r2
  810d0c:	08004a00 	call	8004a0 <main>
  810d10:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810d14:	01000044 	movi	r4,1
  810d18:	08106640 	call	810664 <close>
  exit (result);
  810d1c:	e13fff17 	ldw	r4,-4(fp)
  810d20:	081454c0 	call	81454c <exit>

00810d24 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810d24:	defffe04 	addi	sp,sp,-8
  810d28:	df000115 	stw	fp,4(sp)
  810d2c:	df000104 	addi	fp,sp,4
  810d30:	e13fff15 	stw	r4,-4(fp)
}
  810d34:	0001883a 	nop
  810d38:	e037883a 	mov	sp,fp
  810d3c:	df000017 	ldw	fp,0(sp)
  810d40:	dec00104 	addi	sp,sp,4
  810d44:	f800283a 	ret

00810d48 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810d48:	defffe04 	addi	sp,sp,-8
  810d4c:	df000115 	stw	fp,4(sp)
  810d50:	df000104 	addi	fp,sp,4
  810d54:	e13fff15 	stw	r4,-4(fp)
}
  810d58:	0001883a 	nop
  810d5c:	e037883a 	mov	sp,fp
  810d60:	df000017 	ldw	fp,0(sp)
  810d64:	dec00104 	addi	sp,sp,4
  810d68:	f800283a 	ret

00810d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810d6c:	defffe04 	addi	sp,sp,-8
  810d70:	dfc00115 	stw	ra,4(sp)
  810d74:	df000015 	stw	fp,0(sp)
  810d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810d7c:	d0a00b17 	ldw	r2,-32724(gp)
  810d80:	10000326 	beq	r2,zero,810d90 <alt_get_errno+0x24>
  810d84:	d0a00b17 	ldw	r2,-32724(gp)
  810d88:	103ee83a 	callr	r2
  810d8c:	00000106 	br	810d94 <alt_get_errno+0x28>
  810d90:	d0a79c04 	addi	r2,gp,-24976
}
  810d94:	e037883a 	mov	sp,fp
  810d98:	dfc00117 	ldw	ra,4(sp)
  810d9c:	df000017 	ldw	fp,0(sp)
  810da0:	dec00204 	addi	sp,sp,8
  810da4:	f800283a 	ret

00810da8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  810da8:	defffd04 	addi	sp,sp,-12
  810dac:	df000215 	stw	fp,8(sp)
  810db0:	df000204 	addi	fp,sp,8
  810db4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  810db8:	e0bfff17 	ldw	r2,-4(fp)
  810dbc:	10800217 	ldw	r2,8(r2)
  810dc0:	10d00034 	orhi	r3,r2,16384
  810dc4:	e0bfff17 	ldw	r2,-4(fp)
  810dc8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810dcc:	e03ffe15 	stw	zero,-8(fp)
  810dd0:	00001d06 	br	810e48 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810dd4:	00802074 	movhi	r2,129
  810dd8:	1095fd04 	addi	r2,r2,22516
  810ddc:	e0fffe17 	ldw	r3,-8(fp)
  810de0:	18c00324 	muli	r3,r3,12
  810de4:	10c5883a 	add	r2,r2,r3
  810de8:	10c00017 	ldw	r3,0(r2)
  810dec:	e0bfff17 	ldw	r2,-4(fp)
  810df0:	10800017 	ldw	r2,0(r2)
  810df4:	1880111e 	bne	r3,r2,810e3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810df8:	00802074 	movhi	r2,129
  810dfc:	1095fd04 	addi	r2,r2,22516
  810e00:	e0fffe17 	ldw	r3,-8(fp)
  810e04:	18c00324 	muli	r3,r3,12
  810e08:	10c5883a 	add	r2,r2,r3
  810e0c:	10800204 	addi	r2,r2,8
  810e10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  810e14:	1000090e 	bge	r2,zero,810e3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  810e18:	e0bffe17 	ldw	r2,-8(fp)
  810e1c:	10c00324 	muli	r3,r2,12
  810e20:	00802074 	movhi	r2,129
  810e24:	1095fd04 	addi	r2,r2,22516
  810e28:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  810e2c:	e0bfff17 	ldw	r2,-4(fp)
  810e30:	18800226 	beq	r3,r2,810e3c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  810e34:	00bffcc4 	movi	r2,-13
  810e38:	00000806 	br	810e5c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  810e3c:	e0bffe17 	ldw	r2,-8(fp)
  810e40:	10800044 	addi	r2,r2,1
  810e44:	e0bffe15 	stw	r2,-8(fp)
  810e48:	d0a00a17 	ldw	r2,-32728(gp)
  810e4c:	1007883a 	mov	r3,r2
  810e50:	e0bffe17 	ldw	r2,-8(fp)
  810e54:	18bfdf2e 	bgeu	r3,r2,810dd4 <__alt_mem_onchip_mem+0xff790dd4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  810e58:	0005883a 	mov	r2,zero
}
  810e5c:	e037883a 	mov	sp,fp
  810e60:	df000017 	ldw	fp,0(sp)
  810e64:	dec00104 	addi	sp,sp,4
  810e68:	f800283a 	ret

00810e6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  810e6c:	defff604 	addi	sp,sp,-40
  810e70:	dfc00915 	stw	ra,36(sp)
  810e74:	df000815 	stw	fp,32(sp)
  810e78:	df000804 	addi	fp,sp,32
  810e7c:	e13ffd15 	stw	r4,-12(fp)
  810e80:	e17ffe15 	stw	r5,-8(fp)
  810e84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  810e88:	00bfffc4 	movi	r2,-1
  810e8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  810e90:	00bffb44 	movi	r2,-19
  810e94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  810e98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  810e9c:	d1600804 	addi	r5,gp,-32736
  810ea0:	e13ffd17 	ldw	r4,-12(fp)
  810ea4:	0813c100 	call	813c10 <alt_find_dev>
  810ea8:	e0bff815 	stw	r2,-32(fp)
  810eac:	e0bff817 	ldw	r2,-32(fp)
  810eb0:	1000051e 	bne	r2,zero,810ec8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  810eb4:	e13ffd17 	ldw	r4,-12(fp)
  810eb8:	0813ca00 	call	813ca0 <alt_find_file>
  810ebc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  810ec0:	00800044 	movi	r2,1
  810ec4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  810ec8:	e0bff817 	ldw	r2,-32(fp)
  810ecc:	10002926 	beq	r2,zero,810f74 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  810ed0:	e13ff817 	ldw	r4,-32(fp)
  810ed4:	0813da80 	call	813da8 <alt_get_fd>
  810ed8:	e0bff915 	stw	r2,-28(fp)
  810edc:	e0bff917 	ldw	r2,-28(fp)
  810ee0:	1000030e 	bge	r2,zero,810ef0 <open+0x84>
    {
      status = index;
  810ee4:	e0bff917 	ldw	r2,-28(fp)
  810ee8:	e0bffa15 	stw	r2,-24(fp)
  810eec:	00002306 	br	810f7c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  810ef0:	e0bff917 	ldw	r2,-28(fp)
  810ef4:	10c00324 	muli	r3,r2,12
  810ef8:	00802074 	movhi	r2,129
  810efc:	1095fd04 	addi	r2,r2,22516
  810f00:	1885883a 	add	r2,r3,r2
  810f04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  810f08:	e0fffe17 	ldw	r3,-8(fp)
  810f0c:	00900034 	movhi	r2,16384
  810f10:	10bfffc4 	addi	r2,r2,-1
  810f14:	1886703a 	and	r3,r3,r2
  810f18:	e0bffc17 	ldw	r2,-16(fp)
  810f1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  810f20:	e0bffb17 	ldw	r2,-20(fp)
  810f24:	1000051e 	bne	r2,zero,810f3c <open+0xd0>
  810f28:	e13ffc17 	ldw	r4,-16(fp)
  810f2c:	0810da80 	call	810da8 <alt_file_locked>
  810f30:	e0bffa15 	stw	r2,-24(fp)
  810f34:	e0bffa17 	ldw	r2,-24(fp)
  810f38:	10001016 	blt	r2,zero,810f7c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  810f3c:	e0bff817 	ldw	r2,-32(fp)
  810f40:	10800317 	ldw	r2,12(r2)
  810f44:	10000826 	beq	r2,zero,810f68 <open+0xfc>
  810f48:	e0bff817 	ldw	r2,-32(fp)
  810f4c:	10800317 	ldw	r2,12(r2)
  810f50:	e1ffff17 	ldw	r7,-4(fp)
  810f54:	e1bffe17 	ldw	r6,-8(fp)
  810f58:	e17ffd17 	ldw	r5,-12(fp)
  810f5c:	e13ffc17 	ldw	r4,-16(fp)
  810f60:	103ee83a 	callr	r2
  810f64:	00000106 	br	810f6c <open+0x100>
  810f68:	0005883a 	mov	r2,zero
  810f6c:	e0bffa15 	stw	r2,-24(fp)
  810f70:	00000206 	br	810f7c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  810f74:	00bffb44 	movi	r2,-19
  810f78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  810f7c:	e0bffa17 	ldw	r2,-24(fp)
  810f80:	1000090e 	bge	r2,zero,810fa8 <open+0x13c>
  {
    alt_release_fd (index);  
  810f84:	e13ff917 	ldw	r4,-28(fp)
  810f88:	08110f80 	call	8110f8 <alt_release_fd>
    ALT_ERRNO = -status;
  810f8c:	0810d6c0 	call	810d6c <alt_get_errno>
  810f90:	1007883a 	mov	r3,r2
  810f94:	e0bffa17 	ldw	r2,-24(fp)
  810f98:	0085c83a 	sub	r2,zero,r2
  810f9c:	18800015 	stw	r2,0(r3)
    return -1;
  810fa0:	00bfffc4 	movi	r2,-1
  810fa4:	00000106 	br	810fac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  810fa8:	e0bff917 	ldw	r2,-28(fp)
}
  810fac:	e037883a 	mov	sp,fp
  810fb0:	dfc00117 	ldw	ra,4(sp)
  810fb4:	df000017 	ldw	fp,0(sp)
  810fb8:	dec00204 	addi	sp,sp,8
  810fbc:	f800283a 	ret

00810fc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810fc0:	defffe04 	addi	sp,sp,-8
  810fc4:	dfc00115 	stw	ra,4(sp)
  810fc8:	df000015 	stw	fp,0(sp)
  810fcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810fd0:	d0a00b17 	ldw	r2,-32724(gp)
  810fd4:	10000326 	beq	r2,zero,810fe4 <alt_get_errno+0x24>
  810fd8:	d0a00b17 	ldw	r2,-32724(gp)
  810fdc:	103ee83a 	callr	r2
  810fe0:	00000106 	br	810fe8 <alt_get_errno+0x28>
  810fe4:	d0a79c04 	addi	r2,gp,-24976
}
  810fe8:	e037883a 	mov	sp,fp
  810fec:	dfc00117 	ldw	ra,4(sp)
  810ff0:	df000017 	ldw	fp,0(sp)
  810ff4:	dec00204 	addi	sp,sp,8
  810ff8:	f800283a 	ret

00810ffc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  810ffc:	defff904 	addi	sp,sp,-28
  811000:	dfc00615 	stw	ra,24(sp)
  811004:	df000515 	stw	fp,20(sp)
  811008:	df000504 	addi	fp,sp,20
  81100c:	e13ffd15 	stw	r4,-12(fp)
  811010:	e17ffe15 	stw	r5,-8(fp)
  811014:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811018:	e0bffd17 	ldw	r2,-12(fp)
  81101c:	10000616 	blt	r2,zero,811038 <read+0x3c>
  811020:	e0bffd17 	ldw	r2,-12(fp)
  811024:	10c00324 	muli	r3,r2,12
  811028:	00802074 	movhi	r2,129
  81102c:	1095fd04 	addi	r2,r2,22516
  811030:	1885883a 	add	r2,r3,r2
  811034:	00000106 	br	81103c <read+0x40>
  811038:	0005883a 	mov	r2,zero
  81103c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811040:	e0bffb17 	ldw	r2,-20(fp)
  811044:	10002226 	beq	r2,zero,8110d0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811048:	e0bffb17 	ldw	r2,-20(fp)
  81104c:	10800217 	ldw	r2,8(r2)
  811050:	108000cc 	andi	r2,r2,3
  811054:	10800060 	cmpeqi	r2,r2,1
  811058:	1000181e 	bne	r2,zero,8110bc <read+0xc0>
        (fd->dev->read))
  81105c:	e0bffb17 	ldw	r2,-20(fp)
  811060:	10800017 	ldw	r2,0(r2)
  811064:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811068:	10001426 	beq	r2,zero,8110bc <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  81106c:	e0bffb17 	ldw	r2,-20(fp)
  811070:	10800017 	ldw	r2,0(r2)
  811074:	10800517 	ldw	r2,20(r2)
  811078:	e0ffff17 	ldw	r3,-4(fp)
  81107c:	180d883a 	mov	r6,r3
  811080:	e17ffe17 	ldw	r5,-8(fp)
  811084:	e13ffb17 	ldw	r4,-20(fp)
  811088:	103ee83a 	callr	r2
  81108c:	e0bffc15 	stw	r2,-16(fp)
  811090:	e0bffc17 	ldw	r2,-16(fp)
  811094:	1000070e 	bge	r2,zero,8110b4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  811098:	0810fc00 	call	810fc0 <alt_get_errno>
  81109c:	1007883a 	mov	r3,r2
  8110a0:	e0bffc17 	ldw	r2,-16(fp)
  8110a4:	0085c83a 	sub	r2,zero,r2
  8110a8:	18800015 	stw	r2,0(r3)
          return -1;
  8110ac:	00bfffc4 	movi	r2,-1
  8110b0:	00000c06 	br	8110e4 <read+0xe8>
        }
        return rval;
  8110b4:	e0bffc17 	ldw	r2,-16(fp)
  8110b8:	00000a06 	br	8110e4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  8110bc:	0810fc00 	call	810fc0 <alt_get_errno>
  8110c0:	1007883a 	mov	r3,r2
  8110c4:	00800344 	movi	r2,13
  8110c8:	18800015 	stw	r2,0(r3)
  8110cc:	00000406 	br	8110e0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  8110d0:	0810fc00 	call	810fc0 <alt_get_errno>
  8110d4:	1007883a 	mov	r3,r2
  8110d8:	00801444 	movi	r2,81
  8110dc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8110e0:	00bfffc4 	movi	r2,-1
}
  8110e4:	e037883a 	mov	sp,fp
  8110e8:	dfc00117 	ldw	ra,4(sp)
  8110ec:	df000017 	ldw	fp,0(sp)
  8110f0:	dec00204 	addi	sp,sp,8
  8110f4:	f800283a 	ret

008110f8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8110f8:	defffe04 	addi	sp,sp,-8
  8110fc:	df000115 	stw	fp,4(sp)
  811100:	df000104 	addi	fp,sp,4
  811104:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  811108:	e0bfff17 	ldw	r2,-4(fp)
  81110c:	108000d0 	cmplti	r2,r2,3
  811110:	10000d1e 	bne	r2,zero,811148 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  811114:	00802074 	movhi	r2,129
  811118:	1095fd04 	addi	r2,r2,22516
  81111c:	e0ffff17 	ldw	r3,-4(fp)
  811120:	18c00324 	muli	r3,r3,12
  811124:	10c5883a 	add	r2,r2,r3
  811128:	10800204 	addi	r2,r2,8
  81112c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  811130:	00802074 	movhi	r2,129
  811134:	1095fd04 	addi	r2,r2,22516
  811138:	e0ffff17 	ldw	r3,-4(fp)
  81113c:	18c00324 	muli	r3,r3,12
  811140:	10c5883a 	add	r2,r2,r3
  811144:	10000015 	stw	zero,0(r2)
  }
}
  811148:	0001883a 	nop
  81114c:	e037883a 	mov	sp,fp
  811150:	df000017 	ldw	fp,0(sp)
  811154:	dec00104 	addi	sp,sp,4
  811158:	f800283a 	ret

0081115c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  81115c:	defff904 	addi	sp,sp,-28
  811160:	df000615 	stw	fp,24(sp)
  811164:	df000604 	addi	fp,sp,24
  811168:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81116c:	0005303a 	rdctl	r2,status
  811170:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811174:	e0fffe17 	ldw	r3,-8(fp)
  811178:	00bfff84 	movi	r2,-2
  81117c:	1884703a 	and	r2,r3,r2
  811180:	1001703a 	wrctl	status,r2
  
  return context;
  811184:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811188:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  81118c:	d0a00d17 	ldw	r2,-32716(gp)
  811190:	10c000c4 	addi	r3,r2,3
  811194:	00bfff04 	movi	r2,-4
  811198:	1884703a 	and	r2,r3,r2
  81119c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  8111a0:	d0e00d17 	ldw	r3,-32716(gp)
  8111a4:	e0bfff17 	ldw	r2,-4(fp)
  8111a8:	1887883a 	add	r3,r3,r2
  8111ac:	00804034 	movhi	r2,256
  8111b0:	10800004 	addi	r2,r2,0
  8111b4:	10c0062e 	bgeu	r2,r3,8111d0 <sbrk+0x74>
  8111b8:	e0bffb17 	ldw	r2,-20(fp)
  8111bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8111c0:	e0bffa17 	ldw	r2,-24(fp)
  8111c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  8111c8:	00bfffc4 	movi	r2,-1
  8111cc:	00000b06 	br	8111fc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  8111d0:	d0a00d17 	ldw	r2,-32716(gp)
  8111d4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  8111d8:	d0e00d17 	ldw	r3,-32716(gp)
  8111dc:	e0bfff17 	ldw	r2,-4(fp)
  8111e0:	1885883a 	add	r2,r3,r2
  8111e4:	d0a00d15 	stw	r2,-32716(gp)
  8111e8:	e0bffb17 	ldw	r2,-20(fp)
  8111ec:	e0bffc15 	stw	r2,-16(fp)
  8111f0:	e0bffc17 	ldw	r2,-16(fp)
  8111f4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8111f8:	e0bffd17 	ldw	r2,-12(fp)
} 
  8111fc:	e037883a 	mov	sp,fp
  811200:	df000017 	ldw	fp,0(sp)
  811204:	dec00104 	addi	sp,sp,4
  811208:	f800283a 	ret

0081120c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81120c:	defffa04 	addi	sp,sp,-24
  811210:	df000515 	stw	fp,20(sp)
  811214:	df000504 	addi	fp,sp,20
  811218:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81121c:	0005303a 	rdctl	r2,status
  811220:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811224:	e0fffc17 	ldw	r3,-16(fp)
  811228:	00bfff84 	movi	r2,-2
  81122c:	1884703a 	and	r2,r3,r2
  811230:	1001703a 	wrctl	status,r2
  
  return context;
  811234:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  811238:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  81123c:	e0bfff17 	ldw	r2,-4(fp)
  811240:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  811244:	e0bffd17 	ldw	r2,-12(fp)
  811248:	10800017 	ldw	r2,0(r2)
  81124c:	e0fffd17 	ldw	r3,-12(fp)
  811250:	18c00117 	ldw	r3,4(r3)
  811254:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  811258:	e0bffd17 	ldw	r2,-12(fp)
  81125c:	10800117 	ldw	r2,4(r2)
  811260:	e0fffd17 	ldw	r3,-12(fp)
  811264:	18c00017 	ldw	r3,0(r3)
  811268:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  81126c:	e0bffd17 	ldw	r2,-12(fp)
  811270:	e0fffd17 	ldw	r3,-12(fp)
  811274:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  811278:	e0bffd17 	ldw	r2,-12(fp)
  81127c:	e0fffd17 	ldw	r3,-12(fp)
  811280:	10c00015 	stw	r3,0(r2)
  811284:	e0bffb17 	ldw	r2,-20(fp)
  811288:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81128c:	e0bffe17 	ldw	r2,-8(fp)
  811290:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  811294:	0001883a 	nop
  811298:	e037883a 	mov	sp,fp
  81129c:	df000017 	ldw	fp,0(sp)
  8112a0:	dec00104 	addi	sp,sp,4
  8112a4:	f800283a 	ret

008112a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8112a8:	defffb04 	addi	sp,sp,-20
  8112ac:	dfc00415 	stw	ra,16(sp)
  8112b0:	df000315 	stw	fp,12(sp)
  8112b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8112b8:	d0a00e17 	ldw	r2,-32712(gp)
  8112bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  8112c0:	d0a7a817 	ldw	r2,-24928(gp)
  8112c4:	10800044 	addi	r2,r2,1
  8112c8:	d0a7a815 	stw	r2,-24928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8112cc:	00002e06 	br	811388 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  8112d0:	e0bffd17 	ldw	r2,-12(fp)
  8112d4:	10800017 	ldw	r2,0(r2)
  8112d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  8112dc:	e0bffd17 	ldw	r2,-12(fp)
  8112e0:	10800403 	ldbu	r2,16(r2)
  8112e4:	10803fcc 	andi	r2,r2,255
  8112e8:	10000426 	beq	r2,zero,8112fc <alt_tick+0x54>
  8112ec:	d0a7a817 	ldw	r2,-24928(gp)
  8112f0:	1000021e 	bne	r2,zero,8112fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8112f4:	e0bffd17 	ldw	r2,-12(fp)
  8112f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8112fc:	e0bffd17 	ldw	r2,-12(fp)
  811300:	10800217 	ldw	r2,8(r2)
  811304:	d0e7a817 	ldw	r3,-24928(gp)
  811308:	18801d36 	bltu	r3,r2,811380 <alt_tick+0xd8>
  81130c:	e0bffd17 	ldw	r2,-12(fp)
  811310:	10800403 	ldbu	r2,16(r2)
  811314:	10803fcc 	andi	r2,r2,255
  811318:	1000191e 	bne	r2,zero,811380 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  81131c:	e0bffd17 	ldw	r2,-12(fp)
  811320:	10800317 	ldw	r2,12(r2)
  811324:	e0fffd17 	ldw	r3,-12(fp)
  811328:	18c00517 	ldw	r3,20(r3)
  81132c:	1809883a 	mov	r4,r3
  811330:	103ee83a 	callr	r2
  811334:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  811338:	e0bfff17 	ldw	r2,-4(fp)
  81133c:	1000031e 	bne	r2,zero,81134c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  811340:	e13ffd17 	ldw	r4,-12(fp)
  811344:	081120c0 	call	81120c <alt_alarm_stop>
  811348:	00000d06 	br	811380 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  81134c:	e0bffd17 	ldw	r2,-12(fp)
  811350:	10c00217 	ldw	r3,8(r2)
  811354:	e0bfff17 	ldw	r2,-4(fp)
  811358:	1887883a 	add	r3,r3,r2
  81135c:	e0bffd17 	ldw	r2,-12(fp)
  811360:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  811364:	e0bffd17 	ldw	r2,-12(fp)
  811368:	10c00217 	ldw	r3,8(r2)
  81136c:	d0a7a817 	ldw	r2,-24928(gp)
  811370:	1880032e 	bgeu	r3,r2,811380 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  811374:	e0bffd17 	ldw	r2,-12(fp)
  811378:	00c00044 	movi	r3,1
  81137c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  811380:	e0bffe17 	ldw	r2,-8(fp)
  811384:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811388:	e0fffd17 	ldw	r3,-12(fp)
  81138c:	d0a00e04 	addi	r2,gp,-32712
  811390:	18bfcf1e 	bne	r3,r2,8112d0 <__alt_mem_onchip_mem+0xff7912d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  811394:	0001883a 	nop
}
  811398:	0001883a 	nop
  81139c:	e037883a 	mov	sp,fp
  8113a0:	dfc00117 	ldw	ra,4(sp)
  8113a4:	df000017 	ldw	fp,0(sp)
  8113a8:	dec00204 	addi	sp,sp,8
  8113ac:	f800283a 	ret

008113b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8113b0:	defffe04 	addi	sp,sp,-8
  8113b4:	dfc00115 	stw	ra,4(sp)
  8113b8:	df000015 	stw	fp,0(sp)
  8113bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8113c0:	d0a00b17 	ldw	r2,-32724(gp)
  8113c4:	10000326 	beq	r2,zero,8113d4 <alt_get_errno+0x24>
  8113c8:	d0a00b17 	ldw	r2,-32724(gp)
  8113cc:	103ee83a 	callr	r2
  8113d0:	00000106 	br	8113d8 <alt_get_errno+0x28>
  8113d4:	d0a79c04 	addi	r2,gp,-24976
}
  8113d8:	e037883a 	mov	sp,fp
  8113dc:	dfc00117 	ldw	ra,4(sp)
  8113e0:	df000017 	ldw	fp,0(sp)
  8113e4:	dec00204 	addi	sp,sp,8
  8113e8:	f800283a 	ret

008113ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  8113ec:	defff904 	addi	sp,sp,-28
  8113f0:	dfc00615 	stw	ra,24(sp)
  8113f4:	df000515 	stw	fp,20(sp)
  8113f8:	df000504 	addi	fp,sp,20
  8113fc:	e13ffd15 	stw	r4,-12(fp)
  811400:	e17ffe15 	stw	r5,-8(fp)
  811404:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  811408:	e0bffd17 	ldw	r2,-12(fp)
  81140c:	10000616 	blt	r2,zero,811428 <write+0x3c>
  811410:	e0bffd17 	ldw	r2,-12(fp)
  811414:	10c00324 	muli	r3,r2,12
  811418:	00802074 	movhi	r2,129
  81141c:	1095fd04 	addi	r2,r2,22516
  811420:	1885883a 	add	r2,r3,r2
  811424:	00000106 	br	81142c <write+0x40>
  811428:	0005883a 	mov	r2,zero
  81142c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  811430:	e0bffb17 	ldw	r2,-20(fp)
  811434:	10002126 	beq	r2,zero,8114bc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  811438:	e0bffb17 	ldw	r2,-20(fp)
  81143c:	10800217 	ldw	r2,8(r2)
  811440:	108000cc 	andi	r2,r2,3
  811444:	10001826 	beq	r2,zero,8114a8 <write+0xbc>
  811448:	e0bffb17 	ldw	r2,-20(fp)
  81144c:	10800017 	ldw	r2,0(r2)
  811450:	10800617 	ldw	r2,24(r2)
  811454:	10001426 	beq	r2,zero,8114a8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  811458:	e0bffb17 	ldw	r2,-20(fp)
  81145c:	10800017 	ldw	r2,0(r2)
  811460:	10800617 	ldw	r2,24(r2)
  811464:	e0ffff17 	ldw	r3,-4(fp)
  811468:	180d883a 	mov	r6,r3
  81146c:	e17ffe17 	ldw	r5,-8(fp)
  811470:	e13ffb17 	ldw	r4,-20(fp)
  811474:	103ee83a 	callr	r2
  811478:	e0bffc15 	stw	r2,-16(fp)
  81147c:	e0bffc17 	ldw	r2,-16(fp)
  811480:	1000070e 	bge	r2,zero,8114a0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  811484:	08113b00 	call	8113b0 <alt_get_errno>
  811488:	1007883a 	mov	r3,r2
  81148c:	e0bffc17 	ldw	r2,-16(fp)
  811490:	0085c83a 	sub	r2,zero,r2
  811494:	18800015 	stw	r2,0(r3)
        return -1;
  811498:	00bfffc4 	movi	r2,-1
  81149c:	00000c06 	br	8114d0 <write+0xe4>
      }
      return rval;
  8114a0:	e0bffc17 	ldw	r2,-16(fp)
  8114a4:	00000a06 	br	8114d0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  8114a8:	08113b00 	call	8113b0 <alt_get_errno>
  8114ac:	1007883a 	mov	r3,r2
  8114b0:	00800344 	movi	r2,13
  8114b4:	18800015 	stw	r2,0(r3)
  8114b8:	00000406 	br	8114cc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  8114bc:	08113b00 	call	8113b0 <alt_get_errno>
  8114c0:	1007883a 	mov	r3,r2
  8114c4:	00801444 	movi	r2,81
  8114c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  8114cc:	00bfffc4 	movi	r2,-1
}
  8114d0:	e037883a 	mov	sp,fp
  8114d4:	dfc00117 	ldw	ra,4(sp)
  8114d8:	df000017 	ldw	fp,0(sp)
  8114dc:	dec00204 	addi	sp,sp,8
  8114e0:	f800283a 	ret

008114e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  8114e4:	defffd04 	addi	sp,sp,-12
  8114e8:	dfc00215 	stw	ra,8(sp)
  8114ec:	df000115 	stw	fp,4(sp)
  8114f0:	df000104 	addi	fp,sp,4
  8114f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8114f8:	d1600804 	addi	r5,gp,-32736
  8114fc:	e13fff17 	ldw	r4,-4(fp)
  811500:	0813aac0 	call	813aac <alt_dev_llist_insert>
}
  811504:	e037883a 	mov	sp,fp
  811508:	dfc00117 	ldw	ra,4(sp)
  81150c:	df000017 	ldw	fp,0(sp)
  811510:	dec00204 	addi	sp,sp,8
  811514:	f800283a 	ret

00811518 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  811518:	defffd04 	addi	sp,sp,-12
  81151c:	dfc00215 	stw	ra,8(sp)
  811520:	df000115 	stw	fp,4(sp)
  811524:	df000104 	addi	fp,sp,4
  811528:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  81152c:	08142900 	call	814290 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  811530:	00800044 	movi	r2,1
  811534:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  811538:	0001883a 	nop
  81153c:	e037883a 	mov	sp,fp
  811540:	dfc00117 	ldw	ra,4(sp)
  811544:	df000017 	ldw	fp,0(sp)
  811548:	dec00204 	addi	sp,sp,8
  81154c:	f800283a 	ret

00811550 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  811550:	defffe04 	addi	sp,sp,-8
  811554:	dfc00115 	stw	ra,4(sp)
  811558:	df000015 	stw	fp,0(sp)
  81155c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  811560:	01c0fa04 	movi	r7,1000
  811564:	01800084 	movi	r6,2
  811568:	000b883a 	mov	r5,zero
  81156c:	01004434 	movhi	r4,272
  811570:	21040804 	addi	r4,r4,4128
  811574:	0812fa80 	call	812fa8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  811578:	01800044 	movi	r6,1
  81157c:	000b883a 	mov	r5,zero
  811580:	01002074 	movhi	r4,129
  811584:	21166704 	addi	r4,r4,22940
  811588:	08117500 	call	811750 <altera_avalon_jtag_uart_init>
  81158c:	01002074 	movhi	r4,129
  811590:	21165d04 	addi	r4,r4,22900
  811594:	08114e40 	call	8114e4 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  811598:	01002074 	movhi	r4,129
  81159c:	211a7f04 	addi	r4,r4,27132
  8115a0:	0812d9c0 	call	812d9c <altera_avalon_lcd_16207_init>
  8115a4:	01002074 	movhi	r4,129
  8115a8:	211a7504 	addi	r4,r4,27092
  8115ac:	08114e40 	call	8114e4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  8115b0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  8115b4:	000d883a 	mov	r6,zero
  8115b8:	000b883a 	mov	r5,zero
  8115bc:	01002074 	movhi	r4,129
  8115c0:	211ac704 	addi	r4,r4,27420
  8115c4:	08131340 	call	813134 <altera_avalon_uart_init>
  8115c8:	01002074 	movhi	r4,129
  8115cc:	211abd04 	addi	r4,r4,27380
  8115d0:	08114e40 	call	8114e4 <alt_dev_reg>
}
  8115d4:	0001883a 	nop
  8115d8:	e037883a 	mov	sp,fp
  8115dc:	dfc00117 	ldw	ra,4(sp)
  8115e0:	df000017 	ldw	fp,0(sp)
  8115e4:	dec00204 	addi	sp,sp,8
  8115e8:	f800283a 	ret

008115ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8115ec:	defffa04 	addi	sp,sp,-24
  8115f0:	dfc00515 	stw	ra,20(sp)
  8115f4:	df000415 	stw	fp,16(sp)
  8115f8:	df000404 	addi	fp,sp,16
  8115fc:	e13ffd15 	stw	r4,-12(fp)
  811600:	e17ffe15 	stw	r5,-8(fp)
  811604:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811608:	e0bffd17 	ldw	r2,-12(fp)
  81160c:	10800017 	ldw	r2,0(r2)
  811610:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811614:	e0bffc17 	ldw	r2,-16(fp)
  811618:	10c00a04 	addi	r3,r2,40
  81161c:	e0bffd17 	ldw	r2,-12(fp)
  811620:	10800217 	ldw	r2,8(r2)
  811624:	100f883a 	mov	r7,r2
  811628:	e1bfff17 	ldw	r6,-4(fp)
  81162c:	e17ffe17 	ldw	r5,-8(fp)
  811630:	1809883a 	mov	r4,r3
  811634:	0811c140 	call	811c14 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811638:	e037883a 	mov	sp,fp
  81163c:	dfc00117 	ldw	ra,4(sp)
  811640:	df000017 	ldw	fp,0(sp)
  811644:	dec00204 	addi	sp,sp,8
  811648:	f800283a 	ret

0081164c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81164c:	defffa04 	addi	sp,sp,-24
  811650:	dfc00515 	stw	ra,20(sp)
  811654:	df000415 	stw	fp,16(sp)
  811658:	df000404 	addi	fp,sp,16
  81165c:	e13ffd15 	stw	r4,-12(fp)
  811660:	e17ffe15 	stw	r5,-8(fp)
  811664:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811668:	e0bffd17 	ldw	r2,-12(fp)
  81166c:	10800017 	ldw	r2,0(r2)
  811670:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811674:	e0bffc17 	ldw	r2,-16(fp)
  811678:	10c00a04 	addi	r3,r2,40
  81167c:	e0bffd17 	ldw	r2,-12(fp)
  811680:	10800217 	ldw	r2,8(r2)
  811684:	100f883a 	mov	r7,r2
  811688:	e1bfff17 	ldw	r6,-4(fp)
  81168c:	e17ffe17 	ldw	r5,-8(fp)
  811690:	1809883a 	mov	r4,r3
  811694:	0811e300 	call	811e30 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811698:	e037883a 	mov	sp,fp
  81169c:	dfc00117 	ldw	ra,4(sp)
  8116a0:	df000017 	ldw	fp,0(sp)
  8116a4:	dec00204 	addi	sp,sp,8
  8116a8:	f800283a 	ret

008116ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  8116ac:	defffc04 	addi	sp,sp,-16
  8116b0:	dfc00315 	stw	ra,12(sp)
  8116b4:	df000215 	stw	fp,8(sp)
  8116b8:	df000204 	addi	fp,sp,8
  8116bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8116c0:	e0bfff17 	ldw	r2,-4(fp)
  8116c4:	10800017 	ldw	r2,0(r2)
  8116c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  8116cc:	e0bffe17 	ldw	r2,-8(fp)
  8116d0:	10c00a04 	addi	r3,r2,40
  8116d4:	e0bfff17 	ldw	r2,-4(fp)
  8116d8:	10800217 	ldw	r2,8(r2)
  8116dc:	100b883a 	mov	r5,r2
  8116e0:	1809883a 	mov	r4,r3
  8116e4:	0811abc0 	call	811abc <altera_avalon_jtag_uart_close>
}
  8116e8:	e037883a 	mov	sp,fp
  8116ec:	dfc00117 	ldw	ra,4(sp)
  8116f0:	df000017 	ldw	fp,0(sp)
  8116f4:	dec00204 	addi	sp,sp,8
  8116f8:	f800283a 	ret

008116fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8116fc:	defffa04 	addi	sp,sp,-24
  811700:	dfc00515 	stw	ra,20(sp)
  811704:	df000415 	stw	fp,16(sp)
  811708:	df000404 	addi	fp,sp,16
  81170c:	e13ffd15 	stw	r4,-12(fp)
  811710:	e17ffe15 	stw	r5,-8(fp)
  811714:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811718:	e0bffd17 	ldw	r2,-12(fp)
  81171c:	10800017 	ldw	r2,0(r2)
  811720:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811724:	e0bffc17 	ldw	r2,-16(fp)
  811728:	10800a04 	addi	r2,r2,40
  81172c:	e1bfff17 	ldw	r6,-4(fp)
  811730:	e17ffe17 	ldw	r5,-8(fp)
  811734:	1009883a 	mov	r4,r2
  811738:	0811b240 	call	811b24 <altera_avalon_jtag_uart_ioctl>
}
  81173c:	e037883a 	mov	sp,fp
  811740:	dfc00117 	ldw	ra,4(sp)
  811744:	df000017 	ldw	fp,0(sp)
  811748:	dec00204 	addi	sp,sp,8
  81174c:	f800283a 	ret

00811750 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811750:	defffa04 	addi	sp,sp,-24
  811754:	dfc00515 	stw	ra,20(sp)
  811758:	df000415 	stw	fp,16(sp)
  81175c:	df000404 	addi	fp,sp,16
  811760:	e13ffd15 	stw	r4,-12(fp)
  811764:	e17ffe15 	stw	r5,-8(fp)
  811768:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81176c:	e0bffd17 	ldw	r2,-12(fp)
  811770:	00c00044 	movi	r3,1
  811774:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811778:	e0bffd17 	ldw	r2,-12(fp)
  81177c:	10800017 	ldw	r2,0(r2)
  811780:	10800104 	addi	r2,r2,4
  811784:	1007883a 	mov	r3,r2
  811788:	e0bffd17 	ldw	r2,-12(fp)
  81178c:	10800817 	ldw	r2,32(r2)
  811790:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811794:	e0bffe17 	ldw	r2,-8(fp)
  811798:	e0ffff17 	ldw	r3,-4(fp)
  81179c:	d8000015 	stw	zero,0(sp)
  8117a0:	e1fffd17 	ldw	r7,-12(fp)
  8117a4:	01802074 	movhi	r6,129
  8117a8:	31860404 	addi	r6,r6,6160
  8117ac:	180b883a 	mov	r5,r3
  8117b0:	1009883a 	mov	r4,r2
  8117b4:	0813e800 	call	813e80 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8117b8:	e0bffd17 	ldw	r2,-12(fp)
  8117bc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8117c0:	e0bffd17 	ldw	r2,-12(fp)
  8117c4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8117c8:	d0e7a717 	ldw	r3,-24932(gp)
  8117cc:	e1fffd17 	ldw	r7,-12(fp)
  8117d0:	01802074 	movhi	r6,129
  8117d4:	31868704 	addi	r6,r6,6684
  8117d8:	180b883a 	mov	r5,r3
  8117dc:	1009883a 	mov	r4,r2
  8117e0:	08138fc0 	call	8138fc <alt_alarm_start>
  8117e4:	1000040e 	bge	r2,zero,8117f8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  8117e8:	e0fffd17 	ldw	r3,-12(fp)
  8117ec:	00a00034 	movhi	r2,32768
  8117f0:	10bfffc4 	addi	r2,r2,-1
  8117f4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  8117f8:	0001883a 	nop
  8117fc:	e037883a 	mov	sp,fp
  811800:	dfc00117 	ldw	ra,4(sp)
  811804:	df000017 	ldw	fp,0(sp)
  811808:	dec00204 	addi	sp,sp,8
  81180c:	f800283a 	ret

00811810 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811810:	defff804 	addi	sp,sp,-32
  811814:	df000715 	stw	fp,28(sp)
  811818:	df000704 	addi	fp,sp,28
  81181c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811820:	e0bfff17 	ldw	r2,-4(fp)
  811824:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  811828:	e0bffb17 	ldw	r2,-20(fp)
  81182c:	10800017 	ldw	r2,0(r2)
  811830:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811834:	e0bffc17 	ldw	r2,-16(fp)
  811838:	10800104 	addi	r2,r2,4
  81183c:	10800037 	ldwio	r2,0(r2)
  811840:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811844:	e0bffd17 	ldw	r2,-12(fp)
  811848:	1080c00c 	andi	r2,r2,768
  81184c:	10006d26 	beq	r2,zero,811a04 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811850:	e0bffd17 	ldw	r2,-12(fp)
  811854:	1080400c 	andi	r2,r2,256
  811858:	10003526 	beq	r2,zero,811930 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  81185c:	00800074 	movhi	r2,1
  811860:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811864:	e0bffb17 	ldw	r2,-20(fp)
  811868:	10800a17 	ldw	r2,40(r2)
  81186c:	10800044 	addi	r2,r2,1
  811870:	1081ffcc 	andi	r2,r2,2047
  811874:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  811878:	e0bffb17 	ldw	r2,-20(fp)
  81187c:	10c00b17 	ldw	r3,44(r2)
  811880:	e0bffe17 	ldw	r2,-8(fp)
  811884:	18801526 	beq	r3,r2,8118dc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811888:	e0bffc17 	ldw	r2,-16(fp)
  81188c:	10800037 	ldwio	r2,0(r2)
  811890:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811894:	e0bff917 	ldw	r2,-28(fp)
  811898:	10a0000c 	andi	r2,r2,32768
  81189c:	10001126 	beq	r2,zero,8118e4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8118a0:	e0bffb17 	ldw	r2,-20(fp)
  8118a4:	10800a17 	ldw	r2,40(r2)
  8118a8:	e0fff917 	ldw	r3,-28(fp)
  8118ac:	1809883a 	mov	r4,r3
  8118b0:	e0fffb17 	ldw	r3,-20(fp)
  8118b4:	1885883a 	add	r2,r3,r2
  8118b8:	10800e04 	addi	r2,r2,56
  8118bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8118c0:	e0bffb17 	ldw	r2,-20(fp)
  8118c4:	10800a17 	ldw	r2,40(r2)
  8118c8:	10800044 	addi	r2,r2,1
  8118cc:	10c1ffcc 	andi	r3,r2,2047
  8118d0:	e0bffb17 	ldw	r2,-20(fp)
  8118d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  8118d8:	003fe206 	br	811864 <__alt_mem_onchip_mem+0xff791864>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  8118dc:	0001883a 	nop
  8118e0:	00000106 	br	8118e8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  8118e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  8118e8:	e0bff917 	ldw	r2,-28(fp)
  8118ec:	10bfffec 	andhi	r2,r2,65535
  8118f0:	10000f26 	beq	r2,zero,811930 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  8118f4:	e0bffb17 	ldw	r2,-20(fp)
  8118f8:	10c00817 	ldw	r3,32(r2)
  8118fc:	00bfff84 	movi	r2,-2
  811900:	1886703a 	and	r3,r3,r2
  811904:	e0bffb17 	ldw	r2,-20(fp)
  811908:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81190c:	e0bffc17 	ldw	r2,-16(fp)
  811910:	10800104 	addi	r2,r2,4
  811914:	1007883a 	mov	r3,r2
  811918:	e0bffb17 	ldw	r2,-20(fp)
  81191c:	10800817 	ldw	r2,32(r2)
  811920:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811924:	e0bffc17 	ldw	r2,-16(fp)
  811928:	10800104 	addi	r2,r2,4
  81192c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811930:	e0bffd17 	ldw	r2,-12(fp)
  811934:	1080800c 	andi	r2,r2,512
  811938:	103fbe26 	beq	r2,zero,811834 <__alt_mem_onchip_mem+0xff791834>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  81193c:	e0bffd17 	ldw	r2,-12(fp)
  811940:	1004d43a 	srli	r2,r2,16
  811944:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811948:	00001406 	br	81199c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  81194c:	e0bffc17 	ldw	r2,-16(fp)
  811950:	e0fffb17 	ldw	r3,-20(fp)
  811954:	18c00d17 	ldw	r3,52(r3)
  811958:	e13ffb17 	ldw	r4,-20(fp)
  81195c:	20c7883a 	add	r3,r4,r3
  811960:	18c20e04 	addi	r3,r3,2104
  811964:	18c00003 	ldbu	r3,0(r3)
  811968:	18c03fcc 	andi	r3,r3,255
  81196c:	18c0201c 	xori	r3,r3,128
  811970:	18ffe004 	addi	r3,r3,-128
  811974:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811978:	e0bffb17 	ldw	r2,-20(fp)
  81197c:	10800d17 	ldw	r2,52(r2)
  811980:	10800044 	addi	r2,r2,1
  811984:	10c1ffcc 	andi	r3,r2,2047
  811988:	e0bffb17 	ldw	r2,-20(fp)
  81198c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811990:	e0bffa17 	ldw	r2,-24(fp)
  811994:	10bfffc4 	addi	r2,r2,-1
  811998:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  81199c:	e0bffa17 	ldw	r2,-24(fp)
  8119a0:	10000526 	beq	r2,zero,8119b8 <altera_avalon_jtag_uart_irq+0x1a8>
  8119a4:	e0bffb17 	ldw	r2,-20(fp)
  8119a8:	10c00d17 	ldw	r3,52(r2)
  8119ac:	e0bffb17 	ldw	r2,-20(fp)
  8119b0:	10800c17 	ldw	r2,48(r2)
  8119b4:	18bfe51e 	bne	r3,r2,81194c <__alt_mem_onchip_mem+0xff79194c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  8119b8:	e0bffa17 	ldw	r2,-24(fp)
  8119bc:	103f9d26 	beq	r2,zero,811834 <__alt_mem_onchip_mem+0xff791834>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8119c0:	e0bffb17 	ldw	r2,-20(fp)
  8119c4:	10c00817 	ldw	r3,32(r2)
  8119c8:	00bfff44 	movi	r2,-3
  8119cc:	1886703a 	and	r3,r3,r2
  8119d0:	e0bffb17 	ldw	r2,-20(fp)
  8119d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8119d8:	e0bffb17 	ldw	r2,-20(fp)
  8119dc:	10800017 	ldw	r2,0(r2)
  8119e0:	10800104 	addi	r2,r2,4
  8119e4:	1007883a 	mov	r3,r2
  8119e8:	e0bffb17 	ldw	r2,-20(fp)
  8119ec:	10800817 	ldw	r2,32(r2)
  8119f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  8119f4:	e0bffc17 	ldw	r2,-16(fp)
  8119f8:	10800104 	addi	r2,r2,4
  8119fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811a00:	003f8c06 	br	811834 <__alt_mem_onchip_mem+0xff791834>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  811a04:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  811a08:	0001883a 	nop
  811a0c:	e037883a 	mov	sp,fp
  811a10:	df000017 	ldw	fp,0(sp)
  811a14:	dec00104 	addi	sp,sp,4
  811a18:	f800283a 	ret

00811a1c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811a1c:	defff804 	addi	sp,sp,-32
  811a20:	df000715 	stw	fp,28(sp)
  811a24:	df000704 	addi	fp,sp,28
  811a28:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811a2c:	e0bffb17 	ldw	r2,-20(fp)
  811a30:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811a34:	e0bff917 	ldw	r2,-28(fp)
  811a38:	10800017 	ldw	r2,0(r2)
  811a3c:	10800104 	addi	r2,r2,4
  811a40:	10800037 	ldwio	r2,0(r2)
  811a44:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811a48:	e0bffa17 	ldw	r2,-24(fp)
  811a4c:	1081000c 	andi	r2,r2,1024
  811a50:	10000b26 	beq	r2,zero,811a80 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811a54:	e0bff917 	ldw	r2,-28(fp)
  811a58:	10800017 	ldw	r2,0(r2)
  811a5c:	10800104 	addi	r2,r2,4
  811a60:	1007883a 	mov	r3,r2
  811a64:	e0bff917 	ldw	r2,-28(fp)
  811a68:	10800817 	ldw	r2,32(r2)
  811a6c:	10810014 	ori	r2,r2,1024
  811a70:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  811a74:	e0bff917 	ldw	r2,-28(fp)
  811a78:	10000915 	stw	zero,36(r2)
  811a7c:	00000a06 	br	811aa8 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811a80:	e0bff917 	ldw	r2,-28(fp)
  811a84:	10c00917 	ldw	r3,36(r2)
  811a88:	00a00034 	movhi	r2,32768
  811a8c:	10bfff04 	addi	r2,r2,-4
  811a90:	10c00536 	bltu	r2,r3,811aa8 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  811a94:	e0bff917 	ldw	r2,-28(fp)
  811a98:	10800917 	ldw	r2,36(r2)
  811a9c:	10c00044 	addi	r3,r2,1
  811aa0:	e0bff917 	ldw	r2,-28(fp)
  811aa4:	10c00915 	stw	r3,36(r2)
  811aa8:	d0a7a717 	ldw	r2,-24932(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811aac:	e037883a 	mov	sp,fp
  811ab0:	df000017 	ldw	fp,0(sp)
  811ab4:	dec00104 	addi	sp,sp,4
  811ab8:	f800283a 	ret

00811abc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811abc:	defffd04 	addi	sp,sp,-12
  811ac0:	df000215 	stw	fp,8(sp)
  811ac4:	df000204 	addi	fp,sp,8
  811ac8:	e13ffe15 	stw	r4,-8(fp)
  811acc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811ad0:	00000506 	br	811ae8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811ad4:	e0bfff17 	ldw	r2,-4(fp)
  811ad8:	1090000c 	andi	r2,r2,16384
  811adc:	10000226 	beq	r2,zero,811ae8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811ae0:	00bffd44 	movi	r2,-11
  811ae4:	00000b06 	br	811b14 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811ae8:	e0bffe17 	ldw	r2,-8(fp)
  811aec:	10c00d17 	ldw	r3,52(r2)
  811af0:	e0bffe17 	ldw	r2,-8(fp)
  811af4:	10800c17 	ldw	r2,48(r2)
  811af8:	18800526 	beq	r3,r2,811b10 <altera_avalon_jtag_uart_close+0x54>
  811afc:	e0bffe17 	ldw	r2,-8(fp)
  811b00:	10c00917 	ldw	r3,36(r2)
  811b04:	e0bffe17 	ldw	r2,-8(fp)
  811b08:	10800117 	ldw	r2,4(r2)
  811b0c:	18bff136 	bltu	r3,r2,811ad4 <__alt_mem_onchip_mem+0xff791ad4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811b10:	0005883a 	mov	r2,zero
}
  811b14:	e037883a 	mov	sp,fp
  811b18:	df000017 	ldw	fp,0(sp)
  811b1c:	dec00104 	addi	sp,sp,4
  811b20:	f800283a 	ret

00811b24 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811b24:	defffa04 	addi	sp,sp,-24
  811b28:	df000515 	stw	fp,20(sp)
  811b2c:	df000504 	addi	fp,sp,20
  811b30:	e13ffd15 	stw	r4,-12(fp)
  811b34:	e17ffe15 	stw	r5,-8(fp)
  811b38:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  811b3c:	00bff9c4 	movi	r2,-25
  811b40:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  811b44:	e0bffe17 	ldw	r2,-8(fp)
  811b48:	10da8060 	cmpeqi	r3,r2,27137
  811b4c:	1800031e 	bne	r3,zero,811b5c <altera_avalon_jtag_uart_ioctl+0x38>
  811b50:	109a80a0 	cmpeqi	r2,r2,27138
  811b54:	1000181e 	bne	r2,zero,811bb8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  811b58:	00002906 	br	811c00 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  811b5c:	e0bffd17 	ldw	r2,-12(fp)
  811b60:	10c00117 	ldw	r3,4(r2)
  811b64:	00a00034 	movhi	r2,32768
  811b68:	10bfffc4 	addi	r2,r2,-1
  811b6c:	18802126 	beq	r3,r2,811bf4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  811b70:	e0bfff17 	ldw	r2,-4(fp)
  811b74:	10800017 	ldw	r2,0(r2)
  811b78:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  811b7c:	e0bffc17 	ldw	r2,-16(fp)
  811b80:	10800090 	cmplti	r2,r2,2
  811b84:	1000061e 	bne	r2,zero,811ba0 <altera_avalon_jtag_uart_ioctl+0x7c>
  811b88:	e0fffc17 	ldw	r3,-16(fp)
  811b8c:	00a00034 	movhi	r2,32768
  811b90:	10bfffc4 	addi	r2,r2,-1
  811b94:	18800226 	beq	r3,r2,811ba0 <altera_avalon_jtag_uart_ioctl+0x7c>
  811b98:	e0bffc17 	ldw	r2,-16(fp)
  811b9c:	00000206 	br	811ba8 <altera_avalon_jtag_uart_ioctl+0x84>
  811ba0:	00a00034 	movhi	r2,32768
  811ba4:	10bfff84 	addi	r2,r2,-2
  811ba8:	e0fffd17 	ldw	r3,-12(fp)
  811bac:	18800115 	stw	r2,4(r3)
      rc = 0;
  811bb0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811bb4:	00000f06 	br	811bf4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811bb8:	e0bffd17 	ldw	r2,-12(fp)
  811bbc:	10c00117 	ldw	r3,4(r2)
  811bc0:	00a00034 	movhi	r2,32768
  811bc4:	10bfffc4 	addi	r2,r2,-1
  811bc8:	18800c26 	beq	r3,r2,811bfc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  811bcc:	e0bffd17 	ldw	r2,-12(fp)
  811bd0:	10c00917 	ldw	r3,36(r2)
  811bd4:	e0bffd17 	ldw	r2,-12(fp)
  811bd8:	10800117 	ldw	r2,4(r2)
  811bdc:	1885803a 	cmpltu	r2,r3,r2
  811be0:	10c03fcc 	andi	r3,r2,255
  811be4:	e0bfff17 	ldw	r2,-4(fp)
  811be8:	10c00015 	stw	r3,0(r2)
      rc = 0;
  811bec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811bf0:	00000206 	br	811bfc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  811bf4:	0001883a 	nop
  811bf8:	00000106 	br	811c00 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  811bfc:	0001883a 	nop

  default:
    break;
  }

  return rc;
  811c00:	e0bffb17 	ldw	r2,-20(fp)
}
  811c04:	e037883a 	mov	sp,fp
  811c08:	df000017 	ldw	fp,0(sp)
  811c0c:	dec00104 	addi	sp,sp,4
  811c10:	f800283a 	ret

00811c14 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811c14:	defff304 	addi	sp,sp,-52
  811c18:	dfc00c15 	stw	ra,48(sp)
  811c1c:	df000b15 	stw	fp,44(sp)
  811c20:	df000b04 	addi	fp,sp,44
  811c24:	e13ffc15 	stw	r4,-16(fp)
  811c28:	e17ffd15 	stw	r5,-12(fp)
  811c2c:	e1bffe15 	stw	r6,-8(fp)
  811c30:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  811c34:	e0bffd17 	ldw	r2,-12(fp)
  811c38:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811c3c:	00004706 	br	811d5c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  811c40:	e0bffc17 	ldw	r2,-16(fp)
  811c44:	10800a17 	ldw	r2,40(r2)
  811c48:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  811c4c:	e0bffc17 	ldw	r2,-16(fp)
  811c50:	10800b17 	ldw	r2,44(r2)
  811c54:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  811c58:	e0fff717 	ldw	r3,-36(fp)
  811c5c:	e0bff817 	ldw	r2,-32(fp)
  811c60:	18800536 	bltu	r3,r2,811c78 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  811c64:	e0fff717 	ldw	r3,-36(fp)
  811c68:	e0bff817 	ldw	r2,-32(fp)
  811c6c:	1885c83a 	sub	r2,r3,r2
  811c70:	e0bff615 	stw	r2,-40(fp)
  811c74:	00000406 	br	811c88 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  811c78:	00c20004 	movi	r3,2048
  811c7c:	e0bff817 	ldw	r2,-32(fp)
  811c80:	1885c83a 	sub	r2,r3,r2
  811c84:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  811c88:	e0bff617 	ldw	r2,-40(fp)
  811c8c:	10001e26 	beq	r2,zero,811d08 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  811c90:	e0fffe17 	ldw	r3,-8(fp)
  811c94:	e0bff617 	ldw	r2,-40(fp)
  811c98:	1880022e 	bgeu	r3,r2,811ca4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  811c9c:	e0bffe17 	ldw	r2,-8(fp)
  811ca0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811ca4:	e0bffc17 	ldw	r2,-16(fp)
  811ca8:	10c00e04 	addi	r3,r2,56
  811cac:	e0bff817 	ldw	r2,-32(fp)
  811cb0:	1885883a 	add	r2,r3,r2
  811cb4:	e1bff617 	ldw	r6,-40(fp)
  811cb8:	100b883a 	mov	r5,r2
  811cbc:	e13ff517 	ldw	r4,-44(fp)
  811cc0:	0809da80 	call	809da8 <memcpy>
      ptr   += n;
  811cc4:	e0fff517 	ldw	r3,-44(fp)
  811cc8:	e0bff617 	ldw	r2,-40(fp)
  811ccc:	1885883a 	add	r2,r3,r2
  811cd0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  811cd4:	e0fffe17 	ldw	r3,-8(fp)
  811cd8:	e0bff617 	ldw	r2,-40(fp)
  811cdc:	1885c83a 	sub	r2,r3,r2
  811ce0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811ce4:	e0fff817 	ldw	r3,-32(fp)
  811ce8:	e0bff617 	ldw	r2,-40(fp)
  811cec:	1885883a 	add	r2,r3,r2
  811cf0:	10c1ffcc 	andi	r3,r2,2047
  811cf4:	e0bffc17 	ldw	r2,-16(fp)
  811cf8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  811cfc:	e0bffe17 	ldw	r2,-8(fp)
  811d00:	00bfcf16 	blt	zero,r2,811c40 <__alt_mem_onchip_mem+0xff791c40>
  811d04:	00000106 	br	811d0c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  811d08:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  811d0c:	e0fff517 	ldw	r3,-44(fp)
  811d10:	e0bffd17 	ldw	r2,-12(fp)
  811d14:	1880141e 	bne	r3,r2,811d68 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811d18:	e0bfff17 	ldw	r2,-4(fp)
  811d1c:	1090000c 	andi	r2,r2,16384
  811d20:	1000131e 	bne	r2,zero,811d70 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811d24:	0001883a 	nop
  811d28:	e0bffc17 	ldw	r2,-16(fp)
  811d2c:	10c00a17 	ldw	r3,40(r2)
  811d30:	e0bff717 	ldw	r2,-36(fp)
  811d34:	1880051e 	bne	r3,r2,811d4c <altera_avalon_jtag_uart_read+0x138>
  811d38:	e0bffc17 	ldw	r2,-16(fp)
  811d3c:	10c00917 	ldw	r3,36(r2)
  811d40:	e0bffc17 	ldw	r2,-16(fp)
  811d44:	10800117 	ldw	r2,4(r2)
  811d48:	18bff736 	bltu	r3,r2,811d28 <__alt_mem_onchip_mem+0xff791d28>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  811d4c:	e0bffc17 	ldw	r2,-16(fp)
  811d50:	10c00a17 	ldw	r3,40(r2)
  811d54:	e0bff717 	ldw	r2,-36(fp)
  811d58:	18800726 	beq	r3,r2,811d78 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  811d5c:	e0bffe17 	ldw	r2,-8(fp)
  811d60:	00bfb716 	blt	zero,r2,811c40 <__alt_mem_onchip_mem+0xff791c40>
  811d64:	00000506 	br	811d7c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  811d68:	0001883a 	nop
  811d6c:	00000306 	br	811d7c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  811d70:	0001883a 	nop
  811d74:	00000106 	br	811d7c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  811d78:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  811d7c:	e0fff517 	ldw	r3,-44(fp)
  811d80:	e0bffd17 	ldw	r2,-12(fp)
  811d84:	18801826 	beq	r3,r2,811de8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811d88:	0005303a 	rdctl	r2,status
  811d8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811d90:	e0fffb17 	ldw	r3,-20(fp)
  811d94:	00bfff84 	movi	r2,-2
  811d98:	1884703a 	and	r2,r3,r2
  811d9c:	1001703a 	wrctl	status,r2
  
  return context;
  811da0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811da4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811da8:	e0bffc17 	ldw	r2,-16(fp)
  811dac:	10800817 	ldw	r2,32(r2)
  811db0:	10c00054 	ori	r3,r2,1
  811db4:	e0bffc17 	ldw	r2,-16(fp)
  811db8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811dbc:	e0bffc17 	ldw	r2,-16(fp)
  811dc0:	10800017 	ldw	r2,0(r2)
  811dc4:	10800104 	addi	r2,r2,4
  811dc8:	1007883a 	mov	r3,r2
  811dcc:	e0bffc17 	ldw	r2,-16(fp)
  811dd0:	10800817 	ldw	r2,32(r2)
  811dd4:	18800035 	stwio	r2,0(r3)
  811dd8:	e0bffa17 	ldw	r2,-24(fp)
  811ddc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811de0:	e0bff917 	ldw	r2,-28(fp)
  811de4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811de8:	e0fff517 	ldw	r3,-44(fp)
  811dec:	e0bffd17 	ldw	r2,-12(fp)
  811df0:	18800426 	beq	r3,r2,811e04 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  811df4:	e0fff517 	ldw	r3,-44(fp)
  811df8:	e0bffd17 	ldw	r2,-12(fp)
  811dfc:	1885c83a 	sub	r2,r3,r2
  811e00:	00000606 	br	811e1c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  811e04:	e0bfff17 	ldw	r2,-4(fp)
  811e08:	1090000c 	andi	r2,r2,16384
  811e0c:	10000226 	beq	r2,zero,811e18 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  811e10:	00bffd44 	movi	r2,-11
  811e14:	00000106 	br	811e1c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  811e18:	00bffec4 	movi	r2,-5
}
  811e1c:	e037883a 	mov	sp,fp
  811e20:	dfc00117 	ldw	ra,4(sp)
  811e24:	df000017 	ldw	fp,0(sp)
  811e28:	dec00204 	addi	sp,sp,8
  811e2c:	f800283a 	ret

00811e30 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811e30:	defff304 	addi	sp,sp,-52
  811e34:	dfc00c15 	stw	ra,48(sp)
  811e38:	df000b15 	stw	fp,44(sp)
  811e3c:	df000b04 	addi	fp,sp,44
  811e40:	e13ffc15 	stw	r4,-16(fp)
  811e44:	e17ffd15 	stw	r5,-12(fp)
  811e48:	e1bffe15 	stw	r6,-8(fp)
  811e4c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  811e50:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  811e54:	e0bffd17 	ldw	r2,-12(fp)
  811e58:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811e5c:	00003706 	br	811f3c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  811e60:	e0bffc17 	ldw	r2,-16(fp)
  811e64:	10800c17 	ldw	r2,48(r2)
  811e68:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  811e6c:	e0bffc17 	ldw	r2,-16(fp)
  811e70:	10800d17 	ldw	r2,52(r2)
  811e74:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  811e78:	e0fff917 	ldw	r3,-28(fp)
  811e7c:	e0bff517 	ldw	r2,-44(fp)
  811e80:	1880062e 	bgeu	r3,r2,811e9c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  811e84:	e0fff517 	ldw	r3,-44(fp)
  811e88:	e0bff917 	ldw	r2,-28(fp)
  811e8c:	1885c83a 	sub	r2,r3,r2
  811e90:	10bfffc4 	addi	r2,r2,-1
  811e94:	e0bff615 	stw	r2,-40(fp)
  811e98:	00000b06 	br	811ec8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  811e9c:	e0bff517 	ldw	r2,-44(fp)
  811ea0:	10000526 	beq	r2,zero,811eb8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  811ea4:	00c20004 	movi	r3,2048
  811ea8:	e0bff917 	ldw	r2,-28(fp)
  811eac:	1885c83a 	sub	r2,r3,r2
  811eb0:	e0bff615 	stw	r2,-40(fp)
  811eb4:	00000406 	br	811ec8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  811eb8:	00c1ffc4 	movi	r3,2047
  811ebc:	e0bff917 	ldw	r2,-28(fp)
  811ec0:	1885c83a 	sub	r2,r3,r2
  811ec4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  811ec8:	e0bff617 	ldw	r2,-40(fp)
  811ecc:	10001e26 	beq	r2,zero,811f48 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  811ed0:	e0fffe17 	ldw	r3,-8(fp)
  811ed4:	e0bff617 	ldw	r2,-40(fp)
  811ed8:	1880022e 	bgeu	r3,r2,811ee4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  811edc:	e0bffe17 	ldw	r2,-8(fp)
  811ee0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  811ee4:	e0bffc17 	ldw	r2,-16(fp)
  811ee8:	10c20e04 	addi	r3,r2,2104
  811eec:	e0bff917 	ldw	r2,-28(fp)
  811ef0:	1885883a 	add	r2,r3,r2
  811ef4:	e1bff617 	ldw	r6,-40(fp)
  811ef8:	e17ffd17 	ldw	r5,-12(fp)
  811efc:	1009883a 	mov	r4,r2
  811f00:	0809da80 	call	809da8 <memcpy>
      ptr   += n;
  811f04:	e0fffd17 	ldw	r3,-12(fp)
  811f08:	e0bff617 	ldw	r2,-40(fp)
  811f0c:	1885883a 	add	r2,r3,r2
  811f10:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  811f14:	e0fffe17 	ldw	r3,-8(fp)
  811f18:	e0bff617 	ldw	r2,-40(fp)
  811f1c:	1885c83a 	sub	r2,r3,r2
  811f20:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811f24:	e0fff917 	ldw	r3,-28(fp)
  811f28:	e0bff617 	ldw	r2,-40(fp)
  811f2c:	1885883a 	add	r2,r3,r2
  811f30:	10c1ffcc 	andi	r3,r2,2047
  811f34:	e0bffc17 	ldw	r2,-16(fp)
  811f38:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  811f3c:	e0bffe17 	ldw	r2,-8(fp)
  811f40:	00bfc716 	blt	zero,r2,811e60 <__alt_mem_onchip_mem+0xff791e60>
  811f44:	00000106 	br	811f4c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  811f48:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f4c:	0005303a 	rdctl	r2,status
  811f50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f54:	e0fffb17 	ldw	r3,-20(fp)
  811f58:	00bfff84 	movi	r2,-2
  811f5c:	1884703a 	and	r2,r3,r2
  811f60:	1001703a 	wrctl	status,r2
  
  return context;
  811f64:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  811f68:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811f6c:	e0bffc17 	ldw	r2,-16(fp)
  811f70:	10800817 	ldw	r2,32(r2)
  811f74:	10c00094 	ori	r3,r2,2
  811f78:	e0bffc17 	ldw	r2,-16(fp)
  811f7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811f80:	e0bffc17 	ldw	r2,-16(fp)
  811f84:	10800017 	ldw	r2,0(r2)
  811f88:	10800104 	addi	r2,r2,4
  811f8c:	1007883a 	mov	r3,r2
  811f90:	e0bffc17 	ldw	r2,-16(fp)
  811f94:	10800817 	ldw	r2,32(r2)
  811f98:	18800035 	stwio	r2,0(r3)
  811f9c:	e0bffa17 	ldw	r2,-24(fp)
  811fa0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811fa4:	e0bff817 	ldw	r2,-32(fp)
  811fa8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  811fac:	e0bffe17 	ldw	r2,-8(fp)
  811fb0:	0080100e 	bge	zero,r2,811ff4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  811fb4:	e0bfff17 	ldw	r2,-4(fp)
  811fb8:	1090000c 	andi	r2,r2,16384
  811fbc:	1000101e 	bne	r2,zero,812000 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  811fc0:	0001883a 	nop
  811fc4:	e0bffc17 	ldw	r2,-16(fp)
  811fc8:	10c00d17 	ldw	r3,52(r2)
  811fcc:	e0bff517 	ldw	r2,-44(fp)
  811fd0:	1880051e 	bne	r3,r2,811fe8 <altera_avalon_jtag_uart_write+0x1b8>
  811fd4:	e0bffc17 	ldw	r2,-16(fp)
  811fd8:	10c00917 	ldw	r3,36(r2)
  811fdc:	e0bffc17 	ldw	r2,-16(fp)
  811fe0:	10800117 	ldw	r2,4(r2)
  811fe4:	18bff736 	bltu	r3,r2,811fc4 <__alt_mem_onchip_mem+0xff791fc4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811fe8:	e0bffc17 	ldw	r2,-16(fp)
  811fec:	10800917 	ldw	r2,36(r2)
  811ff0:	1000051e 	bne	r2,zero,812008 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  811ff4:	e0bffe17 	ldw	r2,-8(fp)
  811ff8:	00bfd016 	blt	zero,r2,811f3c <__alt_mem_onchip_mem+0xff791f3c>
  811ffc:	00000306 	br	81200c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  812000:	0001883a 	nop
  812004:	00000106 	br	81200c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  812008:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  81200c:	e0fffd17 	ldw	r3,-12(fp)
  812010:	e0bff717 	ldw	r2,-36(fp)
  812014:	18800426 	beq	r3,r2,812028 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  812018:	e0fffd17 	ldw	r3,-12(fp)
  81201c:	e0bff717 	ldw	r2,-36(fp)
  812020:	1885c83a 	sub	r2,r3,r2
  812024:	00000606 	br	812040 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  812028:	e0bfff17 	ldw	r2,-4(fp)
  81202c:	1090000c 	andi	r2,r2,16384
  812030:	10000226 	beq	r2,zero,81203c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  812034:	00bffd44 	movi	r2,-11
  812038:	00000106 	br	812040 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  81203c:	00bffec4 	movi	r2,-5
}
  812040:	e037883a 	mov	sp,fp
  812044:	dfc00117 	ldw	ra,4(sp)
  812048:	df000017 	ldw	fp,0(sp)
  81204c:	dec00204 	addi	sp,sp,8
  812050:	f800283a 	ret

00812054 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  812054:	defffa04 	addi	sp,sp,-24
  812058:	dfc00515 	stw	ra,20(sp)
  81205c:	df000415 	stw	fp,16(sp)
  812060:	df000404 	addi	fp,sp,16
  812064:	e13ffe15 	stw	r4,-8(fp)
  812068:	2805883a 	mov	r2,r5
  81206c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  812070:	e0bffe17 	ldw	r2,-8(fp)
  812074:	10800017 	ldw	r2,0(r2)
  812078:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  81207c:	008003f4 	movhi	r2,15
  812080:	10909004 	addi	r2,r2,16960
  812084:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812088:	e0bffe17 	ldw	r2,-8(fp)
  81208c:	10800803 	ldbu	r2,32(r2)
  812090:	10803fcc 	andi	r2,r2,255
  812094:	1080201c 	xori	r2,r2,128
  812098:	10bfe004 	addi	r2,r2,-128
  81209c:	1000151e 	bne	r2,zero,8120f4 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8120a0:	00000906 	br	8120c8 <lcd_write_command+0x74>
    if (--i == 0)
  8120a4:	e0bffc17 	ldw	r2,-16(fp)
  8120a8:	10bfffc4 	addi	r2,r2,-1
  8120ac:	e0bffc15 	stw	r2,-16(fp)
  8120b0:	e0bffc17 	ldw	r2,-16(fp)
  8120b4:	1000041e 	bne	r2,zero,8120c8 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  8120b8:	e0bffe17 	ldw	r2,-8(fp)
  8120bc:	00c00044 	movi	r3,1
  8120c0:	10c00805 	stb	r3,32(r2)
      return;
  8120c4:	00000c06 	br	8120f8 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8120c8:	e0bffd17 	ldw	r2,-12(fp)
  8120cc:	10800104 	addi	r2,r2,4
  8120d0:	10800037 	ldwio	r2,0(r2)
  8120d4:	1080200c 	andi	r2,r2,128
  8120d8:	103ff21e 	bne	r2,zero,8120a4 <__alt_mem_onchip_mem+0xff7920a4>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8120dc:	01001904 	movi	r4,100
  8120e0:	08142600 	call	814260 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  8120e4:	e0bffd17 	ldw	r2,-12(fp)
  8120e8:	e0ffff03 	ldbu	r3,-4(fp)
  8120ec:	10c00035 	stwio	r3,0(r2)
  8120f0:	00000106 	br	8120f8 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8120f4:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8120f8:	e037883a 	mov	sp,fp
  8120fc:	dfc00117 	ldw	ra,4(sp)
  812100:	df000017 	ldw	fp,0(sp)
  812104:	dec00204 	addi	sp,sp,8
  812108:	f800283a 	ret

0081210c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  81210c:	defffa04 	addi	sp,sp,-24
  812110:	dfc00515 	stw	ra,20(sp)
  812114:	df000415 	stw	fp,16(sp)
  812118:	df000404 	addi	fp,sp,16
  81211c:	e13ffe15 	stw	r4,-8(fp)
  812120:	2805883a 	mov	r2,r5
  812124:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  812128:	e0bffe17 	ldw	r2,-8(fp)
  81212c:	10800017 	ldw	r2,0(r2)
  812130:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  812134:	008003f4 	movhi	r2,15
  812138:	10909004 	addi	r2,r2,16960
  81213c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812140:	e0bffe17 	ldw	r2,-8(fp)
  812144:	10800803 	ldbu	r2,32(r2)
  812148:	10803fcc 	andi	r2,r2,255
  81214c:	1080201c 	xori	r2,r2,128
  812150:	10bfe004 	addi	r2,r2,-128
  812154:	10001d1e 	bne	r2,zero,8121cc <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812158:	00000906 	br	812180 <lcd_write_data+0x74>
    if (--i == 0)
  81215c:	e0bffc17 	ldw	r2,-16(fp)
  812160:	10bfffc4 	addi	r2,r2,-1
  812164:	e0bffc15 	stw	r2,-16(fp)
  812168:	e0bffc17 	ldw	r2,-16(fp)
  81216c:	1000041e 	bne	r2,zero,812180 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  812170:	e0bffe17 	ldw	r2,-8(fp)
  812174:	00c00044 	movi	r3,1
  812178:	10c00805 	stb	r3,32(r2)
      return;
  81217c:	00001406 	br	8121d0 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812180:	e0bffd17 	ldw	r2,-12(fp)
  812184:	10800104 	addi	r2,r2,4
  812188:	10800037 	ldwio	r2,0(r2)
  81218c:	1080200c 	andi	r2,r2,128
  812190:	103ff21e 	bne	r2,zero,81215c <__alt_mem_onchip_mem+0xff79215c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812194:	01001904 	movi	r4,100
  812198:	08142600 	call	814260 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  81219c:	e0bffd17 	ldw	r2,-12(fp)
  8121a0:	10800204 	addi	r2,r2,8
  8121a4:	1007883a 	mov	r3,r2
  8121a8:	e0bfff03 	ldbu	r2,-4(fp)
  8121ac:	18800035 	stwio	r2,0(r3)

  sp->address++;
  8121b0:	e0bffe17 	ldw	r2,-8(fp)
  8121b4:	108008c3 	ldbu	r2,35(r2)
  8121b8:	10800044 	addi	r2,r2,1
  8121bc:	1007883a 	mov	r3,r2
  8121c0:	e0bffe17 	ldw	r2,-8(fp)
  8121c4:	10c008c5 	stb	r3,35(r2)
  8121c8:	00000106 	br	8121d0 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  8121cc:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  8121d0:	e037883a 	mov	sp,fp
  8121d4:	dfc00117 	ldw	ra,4(sp)
  8121d8:	df000017 	ldw	fp,0(sp)
  8121dc:	dec00204 	addi	sp,sp,8
  8121e0:	f800283a 	ret

008121e4 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  8121e4:	defffc04 	addi	sp,sp,-16
  8121e8:	dfc00315 	stw	ra,12(sp)
  8121ec:	df000215 	stw	fp,8(sp)
  8121f0:	df000204 	addi	fp,sp,8
  8121f4:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8121f8:	01400044 	movi	r5,1
  8121fc:	e13fff17 	ldw	r4,-4(fp)
  812200:	08120540 	call	812054 <lcd_write_command>

  sp->x = 0;
  812204:	e0bfff17 	ldw	r2,-4(fp)
  812208:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  81220c:	e0bfff17 	ldw	r2,-4(fp)
  812210:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  812214:	e0bfff17 	ldw	r2,-4(fp)
  812218:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81221c:	e03ffe15 	stw	zero,-8(fp)
  812220:	00001b06 	br	812290 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  812224:	e0bffe17 	ldw	r2,-8(fp)
  812228:	108018e4 	muli	r2,r2,99
  81222c:	10801004 	addi	r2,r2,64
  812230:	e0ffff17 	ldw	r3,-4(fp)
  812234:	1885883a 	add	r2,r3,r2
  812238:	01801444 	movi	r6,81
  81223c:	01400804 	movi	r5,32
  812240:	1009883a 	mov	r4,r2
  812244:	08042c80 	call	8042c8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  812248:	e0bffe17 	ldw	r2,-8(fp)
  81224c:	108018e4 	muli	r2,r2,99
  812250:	10800c04 	addi	r2,r2,48
  812254:	e0ffff17 	ldw	r3,-4(fp)
  812258:	1885883a 	add	r2,r3,r2
  81225c:	01800404 	movi	r6,16
  812260:	01400804 	movi	r5,32
  812264:	1009883a 	mov	r4,r2
  812268:	08042c80 	call	8042c8 <memset>
    sp->line[y].width = 0;
  81226c:	e0ffff17 	ldw	r3,-4(fp)
  812270:	e0bffe17 	ldw	r2,-8(fp)
  812274:	108018e4 	muli	r2,r2,99
  812278:	1885883a 	add	r2,r3,r2
  81227c:	10802444 	addi	r2,r2,145
  812280:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812284:	e0bffe17 	ldw	r2,-8(fp)
  812288:	10800044 	addi	r2,r2,1
  81228c:	e0bffe15 	stw	r2,-8(fp)
  812290:	e0bffe17 	ldw	r2,-8(fp)
  812294:	10800090 	cmplti	r2,r2,2
  812298:	103fe21e 	bne	r2,zero,812224 <__alt_mem_onchip_mem+0xff792224>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  81229c:	0001883a 	nop
  8122a0:	e037883a 	mov	sp,fp
  8122a4:	dfc00117 	ldw	ra,4(sp)
  8122a8:	df000017 	ldw	fp,0(sp)
  8122ac:	dec00204 	addi	sp,sp,8
  8122b0:	f800283a 	ret

008122b4 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  8122b4:	defff704 	addi	sp,sp,-36
  8122b8:	dfc00815 	stw	ra,32(sp)
  8122bc:	df000715 	stw	fp,28(sp)
  8122c0:	df000704 	addi	fp,sp,28
  8122c4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  8122c8:	e0bfff17 	ldw	r2,-4(fp)
  8122cc:	10800943 	ldbu	r2,37(r2)
  8122d0:	10803fcc 	andi	r2,r2,255
  8122d4:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8122d8:	e03ff915 	stw	zero,-28(fp)
  8122dc:	00006706 	br	81247c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  8122e0:	e0ffff17 	ldw	r3,-4(fp)
  8122e4:	e0bff917 	ldw	r2,-28(fp)
  8122e8:	108018e4 	muli	r2,r2,99
  8122ec:	1885883a 	add	r2,r3,r2
  8122f0:	10802444 	addi	r2,r2,145
  8122f4:	10800003 	ldbu	r2,0(r2)
  8122f8:	10803fcc 	andi	r2,r2,255
  8122fc:	1080201c 	xori	r2,r2,128
  812300:	10bfe004 	addi	r2,r2,-128
  812304:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  812308:	e0ffff17 	ldw	r3,-4(fp)
  81230c:	e0bff917 	ldw	r2,-28(fp)
  812310:	108018e4 	muli	r2,r2,99
  812314:	1885883a 	add	r2,r3,r2
  812318:	10802484 	addi	r2,r2,146
  81231c:	10800003 	ldbu	r2,0(r2)
  812320:	10c03fcc 	andi	r3,r2,255
  812324:	e0bffc17 	ldw	r2,-16(fp)
  812328:	1885383a 	mul	r2,r3,r2
  81232c:	1005d23a 	srai	r2,r2,8
  812330:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  812334:	e0fffb17 	ldw	r3,-20(fp)
  812338:	e0bffd17 	ldw	r2,-12(fp)
  81233c:	18800116 	blt	r3,r2,812344 <lcd_repaint_screen+0x90>
      offset = 0;
  812340:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812344:	e03ffa15 	stw	zero,-24(fp)
  812348:	00004606 	br	812464 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  81234c:	e0fffa17 	ldw	r3,-24(fp)
  812350:	e0bffb17 	ldw	r2,-20(fp)
  812354:	1885883a 	add	r2,r3,r2
  812358:	e17ffd17 	ldw	r5,-12(fp)
  81235c:	1009883a 	mov	r4,r2
  812360:	080de900 	call	80de90 <__modsi3>
  812364:	1009883a 	mov	r4,r2
  812368:	e0ffff17 	ldw	r3,-4(fp)
  81236c:	e0bff917 	ldw	r2,-28(fp)
  812370:	108018e4 	muli	r2,r2,99
  812374:	1885883a 	add	r2,r3,r2
  812378:	1105883a 	add	r2,r2,r4
  81237c:	10801004 	addi	r2,r2,64
  812380:	10800003 	ldbu	r2,0(r2)
  812384:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  812388:	e0ffff17 	ldw	r3,-4(fp)
  81238c:	e0bff917 	ldw	r2,-28(fp)
  812390:	108018e4 	muli	r2,r2,99
  812394:	1887883a 	add	r3,r3,r2
  812398:	e0bffa17 	ldw	r2,-24(fp)
  81239c:	1885883a 	add	r2,r3,r2
  8123a0:	10800c04 	addi	r2,r2,48
  8123a4:	10800003 	ldbu	r2,0(r2)
  8123a8:	10c03fcc 	andi	r3,r2,255
  8123ac:	18c0201c 	xori	r3,r3,128
  8123b0:	18ffe004 	addi	r3,r3,-128
  8123b4:	e0bffe07 	ldb	r2,-8(fp)
  8123b8:	18802726 	beq	r3,r2,812458 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  8123bc:	e0fff917 	ldw	r3,-28(fp)
  8123c0:	d0a01004 	addi	r2,gp,-32704
  8123c4:	1885883a 	add	r2,r3,r2
  8123c8:	10800003 	ldbu	r2,0(r2)
  8123cc:	1007883a 	mov	r3,r2
  8123d0:	e0bffa17 	ldw	r2,-24(fp)
  8123d4:	1885883a 	add	r2,r3,r2
  8123d8:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  8123dc:	e0fffe43 	ldbu	r3,-7(fp)
  8123e0:	e0bfff17 	ldw	r2,-4(fp)
  8123e4:	108008c3 	ldbu	r2,35(r2)
  8123e8:	10803fcc 	andi	r2,r2,255
  8123ec:	1080201c 	xori	r2,r2,128
  8123f0:	10bfe004 	addi	r2,r2,-128
  8123f4:	18800a26 	beq	r3,r2,812420 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8123f8:	e0fffe43 	ldbu	r3,-7(fp)
  8123fc:	00bfe004 	movi	r2,-128
  812400:	1884b03a 	or	r2,r3,r2
  812404:	10803fcc 	andi	r2,r2,255
  812408:	100b883a 	mov	r5,r2
  81240c:	e13fff17 	ldw	r4,-4(fp)
  812410:	08120540 	call	812054 <lcd_write_command>
          sp->address = address;
  812414:	e0fffe43 	ldbu	r3,-7(fp)
  812418:	e0bfff17 	ldw	r2,-4(fp)
  81241c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  812420:	e0bffe03 	ldbu	r2,-8(fp)
  812424:	10803fcc 	andi	r2,r2,255
  812428:	100b883a 	mov	r5,r2
  81242c:	e13fff17 	ldw	r4,-4(fp)
  812430:	081210c0 	call	81210c <lcd_write_data>
        sp->line[y].visible[x] = c;
  812434:	e0ffff17 	ldw	r3,-4(fp)
  812438:	e0bff917 	ldw	r2,-28(fp)
  81243c:	108018e4 	muli	r2,r2,99
  812440:	1887883a 	add	r3,r3,r2
  812444:	e0bffa17 	ldw	r2,-24(fp)
  812448:	1885883a 	add	r2,r3,r2
  81244c:	10800c04 	addi	r2,r2,48
  812450:	e0fffe03 	ldbu	r3,-8(fp)
  812454:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812458:	e0bffa17 	ldw	r2,-24(fp)
  81245c:	10800044 	addi	r2,r2,1
  812460:	e0bffa15 	stw	r2,-24(fp)
  812464:	e0bffa17 	ldw	r2,-24(fp)
  812468:	10800410 	cmplti	r2,r2,16
  81246c:	103fb71e 	bne	r2,zero,81234c <__alt_mem_onchip_mem+0xff79234c>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812470:	e0bff917 	ldw	r2,-28(fp)
  812474:	10800044 	addi	r2,r2,1
  812478:	e0bff915 	stw	r2,-28(fp)
  81247c:	e0bff917 	ldw	r2,-28(fp)
  812480:	10800090 	cmplti	r2,r2,2
  812484:	103f961e 	bne	r2,zero,8122e0 <__alt_mem_onchip_mem+0xff7922e0>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  812488:	0001883a 	nop
  81248c:	e037883a 	mov	sp,fp
  812490:	dfc00117 	ldw	ra,4(sp)
  812494:	df000017 	ldw	fp,0(sp)
  812498:	dec00204 	addi	sp,sp,8
  81249c:	f800283a 	ret

008124a0 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  8124a0:	defffc04 	addi	sp,sp,-16
  8124a4:	dfc00315 	stw	ra,12(sp)
  8124a8:	df000215 	stw	fp,8(sp)
  8124ac:	df000204 	addi	fp,sp,8
  8124b0:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8124b4:	e03ffe15 	stw	zero,-8(fp)
  8124b8:	00001d06 	br	812530 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  8124bc:	e0bffe17 	ldw	r2,-8(fp)
  8124c0:	00800f16 	blt	zero,r2,812500 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  8124c4:	e0bffe17 	ldw	r2,-8(fp)
  8124c8:	108018e4 	muli	r2,r2,99
  8124cc:	10801004 	addi	r2,r2,64
  8124d0:	e0ffff17 	ldw	r3,-4(fp)
  8124d4:	1889883a 	add	r4,r3,r2
  8124d8:	e0bffe17 	ldw	r2,-8(fp)
  8124dc:	10800044 	addi	r2,r2,1
  8124e0:	108018e4 	muli	r2,r2,99
  8124e4:	10801004 	addi	r2,r2,64
  8124e8:	e0ffff17 	ldw	r3,-4(fp)
  8124ec:	1885883a 	add	r2,r3,r2
  8124f0:	01801404 	movi	r6,80
  8124f4:	100b883a 	mov	r5,r2
  8124f8:	0809da80 	call	809da8 <memcpy>
  8124fc:	00000906 	br	812524 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  812500:	e0bffe17 	ldw	r2,-8(fp)
  812504:	108018e4 	muli	r2,r2,99
  812508:	10801004 	addi	r2,r2,64
  81250c:	e0ffff17 	ldw	r3,-4(fp)
  812510:	1885883a 	add	r2,r3,r2
  812514:	01801404 	movi	r6,80
  812518:	01400804 	movi	r5,32
  81251c:	1009883a 	mov	r4,r2
  812520:	08042c80 	call	8042c8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812524:	e0bffe17 	ldw	r2,-8(fp)
  812528:	10800044 	addi	r2,r2,1
  81252c:	e0bffe15 	stw	r2,-8(fp)
  812530:	e0bffe17 	ldw	r2,-8(fp)
  812534:	10800090 	cmplti	r2,r2,2
  812538:	103fe01e 	bne	r2,zero,8124bc <__alt_mem_onchip_mem+0xff7924bc>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  81253c:	e0bfff17 	ldw	r2,-4(fp)
  812540:	10800883 	ldbu	r2,34(r2)
  812544:	10bfffc4 	addi	r2,r2,-1
  812548:	1007883a 	mov	r3,r2
  81254c:	e0bfff17 	ldw	r2,-4(fp)
  812550:	10c00885 	stb	r3,34(r2)
}
  812554:	0001883a 	nop
  812558:	e037883a 	mov	sp,fp
  81255c:	dfc00117 	ldw	ra,4(sp)
  812560:	df000017 	ldw	fp,0(sp)
  812564:	dec00204 	addi	sp,sp,8
  812568:	f800283a 	ret

0081256c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  81256c:	defff904 	addi	sp,sp,-28
  812570:	dfc00615 	stw	ra,24(sp)
  812574:	df000515 	stw	fp,20(sp)
  812578:	df000504 	addi	fp,sp,20
  81257c:	e13ffe15 	stw	r4,-8(fp)
  812580:	2805883a 	mov	r2,r5
  812584:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  812588:	e03ffb15 	stw	zero,-20(fp)
  81258c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  812590:	e0bffe17 	ldw	r2,-8(fp)
  812594:	10800a03 	ldbu	r2,40(r2)
  812598:	10803fcc 	andi	r2,r2,255
  81259c:	1080201c 	xori	r2,r2,128
  8125a0:	10bfe004 	addi	r2,r2,-128
  8125a4:	108016d8 	cmpnei	r2,r2,91
  8125a8:	1000411e 	bne	r2,zero,8126b0 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  8125ac:	e0bffe17 	ldw	r2,-8(fp)
  8125b0:	10800a04 	addi	r2,r2,40
  8125b4:	10800044 	addi	r2,r2,1
  8125b8:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  8125bc:	00000c06 	br	8125f0 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  8125c0:	e0bffb17 	ldw	r2,-20(fp)
  8125c4:	10c002a4 	muli	r3,r2,10
  8125c8:	e0bffd17 	ldw	r2,-12(fp)
  8125cc:	11000044 	addi	r4,r2,1
  8125d0:	e13ffd15 	stw	r4,-12(fp)
  8125d4:	10800003 	ldbu	r2,0(r2)
  8125d8:	10803fcc 	andi	r2,r2,255
  8125dc:	1080201c 	xori	r2,r2,128
  8125e0:	10bfe004 	addi	r2,r2,-128
  8125e4:	10bff404 	addi	r2,r2,-48
  8125e8:	1885883a 	add	r2,r3,r2
  8125ec:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  8125f0:	d0e01117 	ldw	r3,-32700(gp)
  8125f4:	e0bffd17 	ldw	r2,-12(fp)
  8125f8:	10800003 	ldbu	r2,0(r2)
  8125fc:	10803fcc 	andi	r2,r2,255
  812600:	1080201c 	xori	r2,r2,128
  812604:	10bfe004 	addi	r2,r2,-128
  812608:	10800044 	addi	r2,r2,1
  81260c:	1885883a 	add	r2,r3,r2
  812610:	10800003 	ldbu	r2,0(r2)
  812614:	10803fcc 	andi	r2,r2,255
  812618:	1080010c 	andi	r2,r2,4
  81261c:	103fe81e 	bne	r2,zero,8125c0 <__alt_mem_onchip_mem+0xff7925c0>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  812620:	e0bffd17 	ldw	r2,-12(fp)
  812624:	10800003 	ldbu	r2,0(r2)
  812628:	10803fcc 	andi	r2,r2,255
  81262c:	1080201c 	xori	r2,r2,128
  812630:	10bfe004 	addi	r2,r2,-128
  812634:	10800ed8 	cmpnei	r2,r2,59
  812638:	10001f1e 	bne	r2,zero,8126b8 <lcd_handle_escape+0x14c>
    {
      ptr++;
  81263c:	e0bffd17 	ldw	r2,-12(fp)
  812640:	10800044 	addi	r2,r2,1
  812644:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  812648:	00000c06 	br	81267c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  81264c:	e0bffc17 	ldw	r2,-16(fp)
  812650:	10c002a4 	muli	r3,r2,10
  812654:	e0bffd17 	ldw	r2,-12(fp)
  812658:	11000044 	addi	r4,r2,1
  81265c:	e13ffd15 	stw	r4,-12(fp)
  812660:	10800003 	ldbu	r2,0(r2)
  812664:	10803fcc 	andi	r2,r2,255
  812668:	1080201c 	xori	r2,r2,128
  81266c:	10bfe004 	addi	r2,r2,-128
  812670:	10bff404 	addi	r2,r2,-48
  812674:	1885883a 	add	r2,r3,r2
  812678:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  81267c:	d0e01117 	ldw	r3,-32700(gp)
  812680:	e0bffd17 	ldw	r2,-12(fp)
  812684:	10800003 	ldbu	r2,0(r2)
  812688:	10803fcc 	andi	r2,r2,255
  81268c:	1080201c 	xori	r2,r2,128
  812690:	10bfe004 	addi	r2,r2,-128
  812694:	10800044 	addi	r2,r2,1
  812698:	1885883a 	add	r2,r3,r2
  81269c:	10800003 	ldbu	r2,0(r2)
  8126a0:	10803fcc 	andi	r2,r2,255
  8126a4:	1080010c 	andi	r2,r2,4
  8126a8:	103fe81e 	bne	r2,zero,81264c <__alt_mem_onchip_mem+0xff79264c>
  8126ac:	00000206 	br	8126b8 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  8126b0:	00bfffc4 	movi	r2,-1
  8126b4:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  8126b8:	e0bfff07 	ldb	r2,-4(fp)
  8126bc:	10c012a0 	cmpeqi	r3,r2,74
  8126c0:	1800291e 	bne	r3,zero,812768 <lcd_handle_escape+0x1fc>
  8126c4:	10c012c8 	cmpgei	r3,r2,75
  8126c8:	1800031e 	bne	r3,zero,8126d8 <lcd_handle_escape+0x16c>
  8126cc:	10801220 	cmpeqi	r2,r2,72
  8126d0:	1000061e 	bne	r2,zero,8126ec <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8126d4:	00004a06 	br	812800 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  8126d8:	10c012e0 	cmpeqi	r3,r2,75
  8126dc:	1800281e 	bne	r3,zero,812780 <lcd_handle_escape+0x214>
  8126e0:	108019a0 	cmpeqi	r2,r2,102
  8126e4:	1000011e 	bne	r2,zero,8126ec <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  8126e8:	00004506 	br	812800 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  8126ec:	e0bffc17 	ldw	r2,-16(fp)
  8126f0:	0080050e 	bge	zero,r2,812708 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  8126f4:	e0bffc17 	ldw	r2,-16(fp)
  8126f8:	10bfffc4 	addi	r2,r2,-1
  8126fc:	1007883a 	mov	r3,r2
  812700:	e0bffe17 	ldw	r2,-8(fp)
  812704:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812708:	e0bffb17 	ldw	r2,-20(fp)
  81270c:	0080370e 	bge	zero,r2,8127ec <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  812710:	e0bffb17 	ldw	r2,-20(fp)
  812714:	10bfffc4 	addi	r2,r2,-1
  812718:	1007883a 	mov	r3,r2
  81271c:	e0bffe17 	ldw	r2,-8(fp)
  812720:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812724:	e0bffe17 	ldw	r2,-8(fp)
  812728:	10800883 	ldbu	r2,34(r2)
  81272c:	10803fcc 	andi	r2,r2,255
  812730:	10800170 	cmpltui	r2,r2,5
  812734:	1000061e 	bne	r2,zero,812750 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  812738:	e0bffe17 	ldw	r2,-8(fp)
  81273c:	00c00104 	movi	r3,4
  812740:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  812744:	00000206 	br	812750 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  812748:	e13ffe17 	ldw	r4,-8(fp)
  81274c:	08124a00 	call	8124a0 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812750:	e0bffe17 	ldw	r2,-8(fp)
  812754:	10800883 	ldbu	r2,34(r2)
  812758:	10803fcc 	andi	r2,r2,255
  81275c:	108000e8 	cmpgeui	r2,r2,3
  812760:	103ff91e 	bne	r2,zero,812748 <__alt_mem_onchip_mem+0xff792748>
        lcd_scroll_up(sp);
    }
    break;
  812764:	00002106 	br	8127ec <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812768:	e0bffb17 	ldw	r2,-20(fp)
  81276c:	10800098 	cmpnei	r2,r2,2
  812770:	1000201e 	bne	r2,zero,8127f4 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  812774:	e13ffe17 	ldw	r4,-8(fp)
  812778:	08121e40 	call	8121e4 <lcd_clear_screen>
    break;
  81277c:	00001d06 	br	8127f4 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812780:	e0bffb17 	ldw	r2,-20(fp)
  812784:	00801d16 	blt	zero,r2,8127fc <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812788:	e0bffe17 	ldw	r2,-8(fp)
  81278c:	10800843 	ldbu	r2,33(r2)
  812790:	10803fcc 	andi	r2,r2,255
  812794:	10801428 	cmpgeui	r2,r2,80
  812798:	1000181e 	bne	r2,zero,8127fc <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  81279c:	e0bffe17 	ldw	r2,-8(fp)
  8127a0:	10800883 	ldbu	r2,34(r2)
  8127a4:	10803fcc 	andi	r2,r2,255
  8127a8:	108018e4 	muli	r2,r2,99
  8127ac:	10801004 	addi	r2,r2,64
  8127b0:	e0fffe17 	ldw	r3,-8(fp)
  8127b4:	1887883a 	add	r3,r3,r2
  8127b8:	e0bffe17 	ldw	r2,-8(fp)
  8127bc:	10800843 	ldbu	r2,33(r2)
  8127c0:	10803fcc 	andi	r2,r2,255
  8127c4:	1889883a 	add	r4,r3,r2
  8127c8:	e0bffe17 	ldw	r2,-8(fp)
  8127cc:	10800843 	ldbu	r2,33(r2)
  8127d0:	10803fcc 	andi	r2,r2,255
  8127d4:	00c01404 	movi	r3,80
  8127d8:	1885c83a 	sub	r2,r3,r2
  8127dc:	100d883a 	mov	r6,r2
  8127e0:	01400804 	movi	r5,32
  8127e4:	08042c80 	call	8042c8 <memset>
    }
    break;
  8127e8:	00000406 	br	8127fc <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  8127ec:	0001883a 	nop
  8127f0:	00000306 	br	812800 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  8127f4:	0001883a 	nop
  8127f8:	00000106 	br	812800 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  8127fc:	0001883a 	nop
  }
}
  812800:	0001883a 	nop
  812804:	e037883a 	mov	sp,fp
  812808:	dfc00117 	ldw	ra,4(sp)
  81280c:	df000017 	ldw	fp,0(sp)
  812810:	dec00204 	addi	sp,sp,8
  812814:	f800283a 	ret

00812818 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812818:	defff304 	addi	sp,sp,-52
  81281c:	dfc00c15 	stw	ra,48(sp)
  812820:	df000b15 	stw	fp,44(sp)
  812824:	df000b04 	addi	fp,sp,44
  812828:	e13ffc15 	stw	r4,-16(fp)
  81282c:	e17ffd15 	stw	r5,-12(fp)
  812830:	e1bffe15 	stw	r6,-8(fp)
  812834:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812838:	e0bffe17 	ldw	r2,-8(fp)
  81283c:	e0fffd17 	ldw	r3,-12(fp)
  812840:	1885883a 	add	r2,r3,r2
  812844:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812848:	e0bffc17 	ldw	r2,-16(fp)
  81284c:	00c00044 	movi	r3,1
  812850:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  812854:	00009906 	br	812abc <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  812858:	e0bffd17 	ldw	r2,-12(fp)
  81285c:	10800003 	ldbu	r2,0(r2)
  812860:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  812864:	e0bffc17 	ldw	r2,-16(fp)
  812868:	10800903 	ldbu	r2,36(r2)
  81286c:	10803fcc 	andi	r2,r2,255
  812870:	1080201c 	xori	r2,r2,128
  812874:	10bfe004 	addi	r2,r2,-128
  812878:	10003716 	blt	r2,zero,812958 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  81287c:	e0bffc17 	ldw	r2,-16(fp)
  812880:	10800903 	ldbu	r2,36(r2)
  812884:	10803fcc 	andi	r2,r2,255
  812888:	1080201c 	xori	r2,r2,128
  81288c:	10bfe004 	addi	r2,r2,-128
  812890:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812894:	e0bffa17 	ldw	r2,-24(fp)
  812898:	1000031e 	bne	r2,zero,8128a8 <altera_avalon_lcd_16207_write+0x90>
  81289c:	e0bff907 	ldb	r2,-28(fp)
  8128a0:	108016d8 	cmpnei	r2,r2,91
  8128a4:	10000d1e 	bne	r2,zero,8128dc <altera_avalon_lcd_16207_write+0xc4>
  8128a8:	e0bffa17 	ldw	r2,-24(fp)
  8128ac:	10001826 	beq	r2,zero,812910 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  8128b0:	d0e01117 	ldw	r3,-32700(gp)
  8128b4:	e0bff907 	ldb	r2,-28(fp)
  8128b8:	10800044 	addi	r2,r2,1
  8128bc:	1885883a 	add	r2,r3,r2
  8128c0:	10800003 	ldbu	r2,0(r2)
  8128c4:	10803fcc 	andi	r2,r2,255
  8128c8:	1080010c 	andi	r2,r2,4
  8128cc:	1000101e 	bne	r2,zero,812910 <altera_avalon_lcd_16207_write+0xf8>
  8128d0:	e0bff907 	ldb	r2,-28(fp)
  8128d4:	10800ee0 	cmpeqi	r2,r2,59
  8128d8:	10000d1e 	bne	r2,zero,812910 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  8128dc:	e0fffc17 	ldw	r3,-16(fp)
  8128e0:	e0bffa17 	ldw	r2,-24(fp)
  8128e4:	1885883a 	add	r2,r3,r2
  8128e8:	10800a04 	addi	r2,r2,40
  8128ec:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  8128f0:	e0bff907 	ldb	r2,-28(fp)
  8128f4:	100b883a 	mov	r5,r2
  8128f8:	e13ffc17 	ldw	r4,-16(fp)
  8128fc:	081256c0 	call	81256c <lcd_handle_escape>

        sp->esccount = -1;
  812900:	e0bffc17 	ldw	r2,-16(fp)
  812904:	00ffffc4 	movi	r3,-1
  812908:	10c00905 	stb	r3,36(r2)
  81290c:	00006806 	br	812ab0 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812910:	e0bffc17 	ldw	r2,-16(fp)
  812914:	10800903 	ldbu	r2,36(r2)
  812918:	10803fcc 	andi	r2,r2,255
  81291c:	108001e8 	cmpgeui	r2,r2,7
  812920:	1000631e 	bne	r2,zero,812ab0 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  812924:	e0fffc17 	ldw	r3,-16(fp)
  812928:	e0bffa17 	ldw	r2,-24(fp)
  81292c:	1885883a 	add	r2,r3,r2
  812930:	10800a04 	addi	r2,r2,40
  812934:	e0fff903 	ldbu	r3,-28(fp)
  812938:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  81293c:	e0bffc17 	ldw	r2,-16(fp)
  812940:	10800903 	ldbu	r2,36(r2)
  812944:	10800044 	addi	r2,r2,1
  812948:	1007883a 	mov	r3,r2
  81294c:	e0bffc17 	ldw	r2,-16(fp)
  812950:	10c00905 	stb	r3,36(r2)
  812954:	00005606 	br	812ab0 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  812958:	e0bff907 	ldb	r2,-28(fp)
  81295c:	108006d8 	cmpnei	r2,r2,27
  812960:	1000031e 	bne	r2,zero,812970 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  812964:	e0bffc17 	ldw	r2,-16(fp)
  812968:	10000905 	stb	zero,36(r2)
  81296c:	00005006 	br	812ab0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  812970:	e0bff907 	ldb	r2,-28(fp)
  812974:	10800358 	cmpnei	r2,r2,13
  812978:	1000031e 	bne	r2,zero,812988 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  81297c:	e0bffc17 	ldw	r2,-16(fp)
  812980:	10000845 	stb	zero,33(r2)
  812984:	00004a06 	br	812ab0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  812988:	e0bff907 	ldb	r2,-28(fp)
  81298c:	10800298 	cmpnei	r2,r2,10
  812990:	1000101e 	bne	r2,zero,8129d4 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  812994:	e0bffc17 	ldw	r2,-16(fp)
  812998:	10000845 	stb	zero,33(r2)
      sp->y++;
  81299c:	e0bffc17 	ldw	r2,-16(fp)
  8129a0:	10800883 	ldbu	r2,34(r2)
  8129a4:	10800044 	addi	r2,r2,1
  8129a8:	1007883a 	mov	r3,r2
  8129ac:	e0bffc17 	ldw	r2,-16(fp)
  8129b0:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  8129b4:	e0bffc17 	ldw	r2,-16(fp)
  8129b8:	10800883 	ldbu	r2,34(r2)
  8129bc:	10803fcc 	andi	r2,r2,255
  8129c0:	108000f0 	cmpltui	r2,r2,3
  8129c4:	10003a1e 	bne	r2,zero,812ab0 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  8129c8:	e13ffc17 	ldw	r4,-16(fp)
  8129cc:	08124a00 	call	8124a0 <lcd_scroll_up>
  8129d0:	00003706 	br	812ab0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  8129d4:	e0bff907 	ldb	r2,-28(fp)
  8129d8:	10800218 	cmpnei	r2,r2,8
  8129dc:	10000b1e 	bne	r2,zero,812a0c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  8129e0:	e0bffc17 	ldw	r2,-16(fp)
  8129e4:	10800843 	ldbu	r2,33(r2)
  8129e8:	10803fcc 	andi	r2,r2,255
  8129ec:	10003026 	beq	r2,zero,812ab0 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  8129f0:	e0bffc17 	ldw	r2,-16(fp)
  8129f4:	10800843 	ldbu	r2,33(r2)
  8129f8:	10bfffc4 	addi	r2,r2,-1
  8129fc:	1007883a 	mov	r3,r2
  812a00:	e0bffc17 	ldw	r2,-16(fp)
  812a04:	10c00845 	stb	r3,33(r2)
  812a08:	00002906 	br	812ab0 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  812a0c:	d0e01117 	ldw	r3,-32700(gp)
  812a10:	e0bff907 	ldb	r2,-28(fp)
  812a14:	10800044 	addi	r2,r2,1
  812a18:	1885883a 	add	r2,r3,r2
  812a1c:	10800003 	ldbu	r2,0(r2)
  812a20:	10803fcc 	andi	r2,r2,255
  812a24:	1080201c 	xori	r2,r2,128
  812a28:	10bfe004 	addi	r2,r2,-128
  812a2c:	108025cc 	andi	r2,r2,151
  812a30:	10001f26 	beq	r2,zero,812ab0 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812a34:	e0bffc17 	ldw	r2,-16(fp)
  812a38:	10800883 	ldbu	r2,34(r2)
  812a3c:	10803fcc 	andi	r2,r2,255
  812a40:	108000b0 	cmpltui	r2,r2,2
  812a44:	1000021e 	bne	r2,zero,812a50 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  812a48:	e13ffc17 	ldw	r4,-16(fp)
  812a4c:	08124a00 	call	8124a0 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812a50:	e0bffc17 	ldw	r2,-16(fp)
  812a54:	10800843 	ldbu	r2,33(r2)
  812a58:	10803fcc 	andi	r2,r2,255
  812a5c:	10801428 	cmpgeui	r2,r2,80
  812a60:	10000d1e 	bne	r2,zero,812a98 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  812a64:	e0bffc17 	ldw	r2,-16(fp)
  812a68:	10800883 	ldbu	r2,34(r2)
  812a6c:	10c03fcc 	andi	r3,r2,255
  812a70:	e0bffc17 	ldw	r2,-16(fp)
  812a74:	10800843 	ldbu	r2,33(r2)
  812a78:	10803fcc 	andi	r2,r2,255
  812a7c:	e13ffc17 	ldw	r4,-16(fp)
  812a80:	18c018e4 	muli	r3,r3,99
  812a84:	20c7883a 	add	r3,r4,r3
  812a88:	1885883a 	add	r2,r3,r2
  812a8c:	10801004 	addi	r2,r2,64
  812a90:	e0fff903 	ldbu	r3,-28(fp)
  812a94:	10c00005 	stb	r3,0(r2)

      sp->x++;
  812a98:	e0bffc17 	ldw	r2,-16(fp)
  812a9c:	10800843 	ldbu	r2,33(r2)
  812aa0:	10800044 	addi	r2,r2,1
  812aa4:	1007883a 	mov	r3,r2
  812aa8:	e0bffc17 	ldw	r2,-16(fp)
  812aac:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812ab0:	e0bffd17 	ldw	r2,-12(fp)
  812ab4:	10800044 	addi	r2,r2,1
  812ab8:	e0bffd15 	stw	r2,-12(fp)
  812abc:	e0fffd17 	ldw	r3,-12(fp)
  812ac0:	e0bff817 	ldw	r2,-32(fp)
  812ac4:	18bf6436 	bltu	r3,r2,812858 <__alt_mem_onchip_mem+0xff792858>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812ac8:	00800404 	movi	r2,16
  812acc:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812ad0:	e03ff515 	stw	zero,-44(fp)
  812ad4:	00003706 	br	812bb4 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812ad8:	00801404 	movi	r2,80
  812adc:	e0bff715 	stw	r2,-36(fp)
  812ae0:	00001106 	br	812b28 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  812ae4:	e0bff717 	ldw	r2,-36(fp)
  812ae8:	10bfffc4 	addi	r2,r2,-1
  812aec:	e13ffc17 	ldw	r4,-16(fp)
  812af0:	e0fff517 	ldw	r3,-44(fp)
  812af4:	18c018e4 	muli	r3,r3,99
  812af8:	20c7883a 	add	r3,r4,r3
  812afc:	1885883a 	add	r2,r3,r2
  812b00:	10801004 	addi	r2,r2,64
  812b04:	10800003 	ldbu	r2,0(r2)
  812b08:	10803fcc 	andi	r2,r2,255
  812b0c:	1080201c 	xori	r2,r2,128
  812b10:	10bfe004 	addi	r2,r2,-128
  812b14:	10800820 	cmpeqi	r2,r2,32
  812b18:	10000626 	beq	r2,zero,812b34 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812b1c:	e0bff717 	ldw	r2,-36(fp)
  812b20:	10bfffc4 	addi	r2,r2,-1
  812b24:	e0bff715 	stw	r2,-36(fp)
  812b28:	e0bff717 	ldw	r2,-36(fp)
  812b2c:	00bfed16 	blt	zero,r2,812ae4 <__alt_mem_onchip_mem+0xff792ae4>
  812b30:	00000106 	br	812b38 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  812b34:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812b38:	e0bff717 	ldw	r2,-36(fp)
  812b3c:	10800448 	cmpgei	r2,r2,17
  812b40:	1000031e 	bne	r2,zero,812b50 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  812b44:	00800404 	movi	r2,16
  812b48:	e0bff715 	stw	r2,-36(fp)
  812b4c:	00000306 	br	812b5c <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  812b50:	e0bff717 	ldw	r2,-36(fp)
  812b54:	10800044 	addi	r2,r2,1
  812b58:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  812b5c:	e0bff717 	ldw	r2,-36(fp)
  812b60:	1009883a 	mov	r4,r2
  812b64:	e0fffc17 	ldw	r3,-16(fp)
  812b68:	e0bff517 	ldw	r2,-44(fp)
  812b6c:	108018e4 	muli	r2,r2,99
  812b70:	1885883a 	add	r2,r3,r2
  812b74:	10802444 	addi	r2,r2,145
  812b78:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  812b7c:	e0fff617 	ldw	r3,-40(fp)
  812b80:	e0bff717 	ldw	r2,-36(fp)
  812b84:	1880020e 	bge	r3,r2,812b90 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  812b88:	e0bff717 	ldw	r2,-36(fp)
  812b8c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  812b90:	e0fffc17 	ldw	r3,-16(fp)
  812b94:	e0bff517 	ldw	r2,-44(fp)
  812b98:	108018e4 	muli	r2,r2,99
  812b9c:	1885883a 	add	r2,r3,r2
  812ba0:	10802484 	addi	r2,r2,146
  812ba4:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812ba8:	e0bff517 	ldw	r2,-44(fp)
  812bac:	10800044 	addi	r2,r2,1
  812bb0:	e0bff515 	stw	r2,-44(fp)
  812bb4:	e0bff517 	ldw	r2,-44(fp)
  812bb8:	10800090 	cmplti	r2,r2,2
  812bbc:	103fc61e 	bne	r2,zero,812ad8 <__alt_mem_onchip_mem+0xff792ad8>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812bc0:	e0bff617 	ldw	r2,-40(fp)
  812bc4:	10800448 	cmpgei	r2,r2,17
  812bc8:	1000031e 	bne	r2,zero,812bd8 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  812bcc:	e0bffc17 	ldw	r2,-16(fp)
  812bd0:	10000985 	stb	zero,38(r2)
  812bd4:	00002e06 	br	812c90 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  812bd8:	e0bff617 	ldw	r2,-40(fp)
  812bdc:	1085883a 	add	r2,r2,r2
  812be0:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  812be4:	e0bff617 	ldw	r2,-40(fp)
  812be8:	1007883a 	mov	r3,r2
  812bec:	e0bffc17 	ldw	r2,-16(fp)
  812bf0:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812bf4:	e03ff515 	stw	zero,-44(fp)
  812bf8:	00002206 	br	812c84 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  812bfc:	e0fffc17 	ldw	r3,-16(fp)
  812c00:	e0bff517 	ldw	r2,-44(fp)
  812c04:	108018e4 	muli	r2,r2,99
  812c08:	1885883a 	add	r2,r3,r2
  812c0c:	10802444 	addi	r2,r2,145
  812c10:	10800003 	ldbu	r2,0(r2)
  812c14:	10803fcc 	andi	r2,r2,255
  812c18:	1080201c 	xori	r2,r2,128
  812c1c:	10bfe004 	addi	r2,r2,-128
  812c20:	10800450 	cmplti	r2,r2,17
  812c24:	1000141e 	bne	r2,zero,812c78 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812c28:	e0fffc17 	ldw	r3,-16(fp)
  812c2c:	e0bff517 	ldw	r2,-44(fp)
  812c30:	108018e4 	muli	r2,r2,99
  812c34:	1885883a 	add	r2,r3,r2
  812c38:	10802444 	addi	r2,r2,145
  812c3c:	10800003 	ldbu	r2,0(r2)
  812c40:	10803fcc 	andi	r2,r2,255
  812c44:	1080201c 	xori	r2,r2,128
  812c48:	10bfe004 	addi	r2,r2,-128
  812c4c:	1004923a 	slli	r2,r2,8
  812c50:	e17ff617 	ldw	r5,-40(fp)
  812c54:	1009883a 	mov	r4,r2
  812c58:	080de0c0 	call	80de0c <__divsi3>
  812c5c:	1009883a 	mov	r4,r2
  812c60:	e0fffc17 	ldw	r3,-16(fp)
  812c64:	e0bff517 	ldw	r2,-44(fp)
  812c68:	108018e4 	muli	r2,r2,99
  812c6c:	1885883a 	add	r2,r3,r2
  812c70:	10802484 	addi	r2,r2,146
  812c74:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812c78:	e0bff517 	ldw	r2,-44(fp)
  812c7c:	10800044 	addi	r2,r2,1
  812c80:	e0bff515 	stw	r2,-44(fp)
  812c84:	e0bff517 	ldw	r2,-44(fp)
  812c88:	10800090 	cmplti	r2,r2,2
  812c8c:	103fdb1e 	bne	r2,zero,812bfc <__alt_mem_onchip_mem+0xff792bfc>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  812c90:	e0bffc17 	ldw	r2,-16(fp)
  812c94:	10800943 	ldbu	r2,37(r2)
  812c98:	10803fcc 	andi	r2,r2,255
  812c9c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  812ca0:	e13ffc17 	ldw	r4,-16(fp)
  812ca4:	08122b40 	call	8122b4 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  812ca8:	e0bffc17 	ldw	r2,-16(fp)
  812cac:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  812cb0:	e0bffc17 	ldw	r2,-16(fp)
  812cb4:	10800943 	ldbu	r2,37(r2)
  812cb8:	10c03fcc 	andi	r3,r2,255
  812cbc:	e0bffb17 	ldw	r2,-20(fp)
  812cc0:	18800426 	beq	r3,r2,812cd4 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  812cc4:	e0bffc17 	ldw	r2,-16(fp)
  812cc8:	00c00044 	movi	r3,1
  812ccc:	10c009c5 	stb	r3,39(r2)
  }
  812cd0:	003fef06 	br	812c90 <__alt_mem_onchip_mem+0xff792c90>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  812cd4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  812cd8:	e0bffe17 	ldw	r2,-8(fp)
}
  812cdc:	e037883a 	mov	sp,fp
  812ce0:	dfc00117 	ldw	ra,4(sp)
  812ce4:	df000017 	ldw	fp,0(sp)
  812ce8:	dec00204 	addi	sp,sp,8
  812cec:	f800283a 	ret

00812cf0 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812cf0:	defffc04 	addi	sp,sp,-16
  812cf4:	dfc00315 	stw	ra,12(sp)
  812cf8:	df000215 	stw	fp,8(sp)
  812cfc:	df000204 	addi	fp,sp,8
  812d00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  812d04:	e0bfff17 	ldw	r2,-4(fp)
  812d08:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  812d0c:	e0bffe17 	ldw	r2,-8(fp)
  812d10:	10800943 	ldbu	r2,37(r2)
  812d14:	10803fcc 	andi	r2,r2,255
  812d18:	10c00044 	addi	r3,r2,1
  812d1c:	e0bffe17 	ldw	r2,-8(fp)
  812d20:	10800983 	ldbu	r2,38(r2)
  812d24:	10803fcc 	andi	r2,r2,255
  812d28:	18800316 	blt	r3,r2,812d38 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  812d2c:	e0bffe17 	ldw	r2,-8(fp)
  812d30:	10000945 	stb	zero,37(r2)
  812d34:	00000606 	br	812d50 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  812d38:	e0bffe17 	ldw	r2,-8(fp)
  812d3c:	10800943 	ldbu	r2,37(r2)
  812d40:	10800044 	addi	r2,r2,1
  812d44:	1007883a 	mov	r3,r2
  812d48:	e0bffe17 	ldw	r2,-8(fp)
  812d4c:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  812d50:	e0bffe17 	ldw	r2,-8(fp)
  812d54:	10800983 	ldbu	r2,38(r2)
  812d58:	10803fcc 	andi	r2,r2,255
  812d5c:	10000826 	beq	r2,zero,812d80 <alt_lcd_16207_timeout+0x90>
  812d60:	e0bffe17 	ldw	r2,-8(fp)
  812d64:	108009c3 	ldbu	r2,39(r2)
  812d68:	10803fcc 	andi	r2,r2,255
  812d6c:	1080201c 	xori	r2,r2,128
  812d70:	10bfe004 	addi	r2,r2,-128
  812d74:	1000021e 	bne	r2,zero,812d80 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  812d78:	e13ffe17 	ldw	r4,-8(fp)
  812d7c:	08122b40 	call	8122b4 <lcd_repaint_screen>

  return sp->period;
  812d80:	e0bffe17 	ldw	r2,-8(fp)
  812d84:	10800717 	ldw	r2,28(r2)
}
  812d88:	e037883a 	mov	sp,fp
  812d8c:	dfc00117 	ldw	ra,4(sp)
  812d90:	df000017 	ldw	fp,0(sp)
  812d94:	dec00204 	addi	sp,sp,8
  812d98:	f800283a 	ret

00812d9c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  812d9c:	defffc04 	addi	sp,sp,-16
  812da0:	dfc00315 	stw	ra,12(sp)
  812da4:	df000215 	stw	fp,8(sp)
  812da8:	df000204 	addi	fp,sp,8
  812dac:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  812db0:	e0bfff17 	ldw	r2,-4(fp)
  812db4:	10800017 	ldw	r2,0(r2)
  812db8:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  812dbc:	e0bfff17 	ldw	r2,-4(fp)
  812dc0:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  812dc4:	010ea604 	movi	r4,15000
  812dc8:	08142600 	call	814260 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812dcc:	e0bffe17 	ldw	r2,-8(fp)
  812dd0:	00c00c04 	movi	r3,48
  812dd4:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  812dd8:	01040104 	movi	r4,4100
  812ddc:	08142600 	call	814260 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812de0:	e0bffe17 	ldw	r2,-8(fp)
  812de4:	00c00c04 	movi	r3,48
  812de8:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  812dec:	0100fa04 	movi	r4,1000
  812df0:	08142600 	call	814260 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812df4:	e0bffe17 	ldw	r2,-8(fp)
  812df8:	00c00c04 	movi	r3,48
  812dfc:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  812e00:	01400e04 	movi	r5,56
  812e04:	e13fff17 	ldw	r4,-4(fp)
  812e08:	08120540 	call	812054 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  812e0c:	01400204 	movi	r5,8
  812e10:	e13fff17 	ldw	r4,-4(fp)
  812e14:	08120540 	call	812054 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  812e18:	e13fff17 	ldw	r4,-4(fp)
  812e1c:	08121e40 	call	8121e4 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  812e20:	01400184 	movi	r5,6
  812e24:	e13fff17 	ldw	r4,-4(fp)
  812e28:	08120540 	call	812054 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  812e2c:	01400304 	movi	r5,12
  812e30:	e13fff17 	ldw	r4,-4(fp)
  812e34:	08120540 	call	812054 <lcd_write_command>

  sp->esccount = -1;
  812e38:	e0bfff17 	ldw	r2,-4(fp)
  812e3c:	00ffffc4 	movi	r3,-1
  812e40:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  812e44:	e0bfff17 	ldw	r2,-4(fp)
  812e48:	10800a04 	addi	r2,r2,40
  812e4c:	01800204 	movi	r6,8
  812e50:	000b883a 	mov	r5,zero
  812e54:	1009883a 	mov	r4,r2
  812e58:	08042c80 	call	8042c8 <memset>

  sp->scrollpos = 0;
  812e5c:	e0bfff17 	ldw	r2,-4(fp)
  812e60:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  812e64:	e0bfff17 	ldw	r2,-4(fp)
  812e68:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  812e6c:	e0bfff17 	ldw	r2,-4(fp)
  812e70:	100009c5 	stb	zero,39(r2)
  812e74:	d0a7a717 	ldw	r2,-24932(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  812e78:	01400284 	movi	r5,10
  812e7c:	1009883a 	mov	r4,r2
  812e80:	080df040 	call	80df04 <__udivsi3>
  812e84:	1007883a 	mov	r3,r2
  812e88:	e0bfff17 	ldw	r2,-4(fp)
  812e8c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  812e90:	e0bfff17 	ldw	r2,-4(fp)
  812e94:	10c00104 	addi	r3,r2,4
  812e98:	e0bfff17 	ldw	r2,-4(fp)
  812e9c:	10800717 	ldw	r2,28(r2)
  812ea0:	e1ffff17 	ldw	r7,-4(fp)
  812ea4:	01802074 	movhi	r6,129
  812ea8:	318b3c04 	addi	r6,r6,11504
  812eac:	100b883a 	mov	r5,r2
  812eb0:	1809883a 	mov	r4,r3
  812eb4:	08138fc0 	call	8138fc <alt_alarm_start>
}
  812eb8:	0001883a 	nop
  812ebc:	e037883a 	mov	sp,fp
  812ec0:	dfc00117 	ldw	ra,4(sp)
  812ec4:	df000017 	ldw	fp,0(sp)
  812ec8:	dec00204 	addi	sp,sp,8
  812ecc:	f800283a 	ret

00812ed0 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812ed0:	defffa04 	addi	sp,sp,-24
  812ed4:	dfc00515 	stw	ra,20(sp)
  812ed8:	df000415 	stw	fp,16(sp)
  812edc:	df000404 	addi	fp,sp,16
  812ee0:	e13ffd15 	stw	r4,-12(fp)
  812ee4:	e17ffe15 	stw	r5,-8(fp)
  812ee8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  812eec:	e0bffd17 	ldw	r2,-12(fp)
  812ef0:	10800017 	ldw	r2,0(r2)
  812ef4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  812ef8:	e0bffc17 	ldw	r2,-16(fp)
  812efc:	10c00a04 	addi	r3,r2,40
  812f00:	e0bffd17 	ldw	r2,-12(fp)
  812f04:	10800217 	ldw	r2,8(r2)
  812f08:	100f883a 	mov	r7,r2
  812f0c:	e1bfff17 	ldw	r6,-4(fp)
  812f10:	e17ffe17 	ldw	r5,-8(fp)
  812f14:	1809883a 	mov	r4,r3
  812f18:	08128180 	call	812818 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  812f1c:	e037883a 	mov	sp,fp
  812f20:	dfc00117 	ldw	ra,4(sp)
  812f24:	df000017 	ldw	fp,0(sp)
  812f28:	dec00204 	addi	sp,sp,8
  812f2c:	f800283a 	ret

00812f30 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  812f30:	defffa04 	addi	sp,sp,-24
  812f34:	dfc00515 	stw	ra,20(sp)
  812f38:	df000415 	stw	fp,16(sp)
  812f3c:	df000404 	addi	fp,sp,16
  812f40:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  812f44:	0007883a 	mov	r3,zero
  812f48:	e0bfff17 	ldw	r2,-4(fp)
  812f4c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  812f50:	e0bfff17 	ldw	r2,-4(fp)
  812f54:	10800104 	addi	r2,r2,4
  812f58:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812f5c:	0005303a 	rdctl	r2,status
  812f60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812f64:	e0fffd17 	ldw	r3,-12(fp)
  812f68:	00bfff84 	movi	r2,-2
  812f6c:	1884703a 	and	r2,r3,r2
  812f70:	1001703a 	wrctl	status,r2
  
  return context;
  812f74:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  812f78:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  812f7c:	08112a80 	call	8112a8 <alt_tick>
  812f80:	e0bffc17 	ldw	r2,-16(fp)
  812f84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f88:	e0bffe17 	ldw	r2,-8(fp)
  812f8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  812f90:	0001883a 	nop
  812f94:	e037883a 	mov	sp,fp
  812f98:	dfc00117 	ldw	ra,4(sp)
  812f9c:	df000017 	ldw	fp,0(sp)
  812fa0:	dec00204 	addi	sp,sp,8
  812fa4:	f800283a 	ret

00812fa8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  812fa8:	defff804 	addi	sp,sp,-32
  812fac:	dfc00715 	stw	ra,28(sp)
  812fb0:	df000615 	stw	fp,24(sp)
  812fb4:	df000604 	addi	fp,sp,24
  812fb8:	e13ffc15 	stw	r4,-16(fp)
  812fbc:	e17ffd15 	stw	r5,-12(fp)
  812fc0:	e1bffe15 	stw	r6,-8(fp)
  812fc4:	e1ffff15 	stw	r7,-4(fp)
  812fc8:	e0bfff17 	ldw	r2,-4(fp)
  812fcc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  812fd0:	d0a7a717 	ldw	r2,-24932(gp)
  812fd4:	1000021e 	bne	r2,zero,812fe0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  812fd8:	e0bffb17 	ldw	r2,-20(fp)
  812fdc:	d0a7a715 	stw	r2,-24932(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  812fe0:	e0bffc17 	ldw	r2,-16(fp)
  812fe4:	10800104 	addi	r2,r2,4
  812fe8:	00c001c4 	movi	r3,7
  812fec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  812ff0:	d8000015 	stw	zero,0(sp)
  812ff4:	e1fffc17 	ldw	r7,-16(fp)
  812ff8:	01802074 	movhi	r6,129
  812ffc:	318bcc04 	addi	r6,r6,12080
  813000:	e17ffe17 	ldw	r5,-8(fp)
  813004:	e13ffd17 	ldw	r4,-12(fp)
  813008:	0813e800 	call	813e80 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  81300c:	0001883a 	nop
  813010:	e037883a 	mov	sp,fp
  813014:	dfc00117 	ldw	ra,4(sp)
  813018:	df000017 	ldw	fp,0(sp)
  81301c:	dec00204 	addi	sp,sp,8
  813020:	f800283a 	ret

00813024 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  813024:	defffa04 	addi	sp,sp,-24
  813028:	dfc00515 	stw	ra,20(sp)
  81302c:	df000415 	stw	fp,16(sp)
  813030:	df000404 	addi	fp,sp,16
  813034:	e13ffd15 	stw	r4,-12(fp)
  813038:	e17ffe15 	stw	r5,-8(fp)
  81303c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813040:	e0bffd17 	ldw	r2,-12(fp)
  813044:	10800017 	ldw	r2,0(r2)
  813048:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  81304c:	e0bffc17 	ldw	r2,-16(fp)
  813050:	10c00a04 	addi	r3,r2,40
  813054:	e0bffd17 	ldw	r2,-12(fp)
  813058:	10800217 	ldw	r2,8(r2)
  81305c:	100f883a 	mov	r7,r2
  813060:	e1bfff17 	ldw	r6,-4(fp)
  813064:	e17ffe17 	ldw	r5,-8(fp)
  813068:	1809883a 	mov	r4,r3
  81306c:	08135380 	call	813538 <altera_avalon_uart_read>
      fd->fd_flags);
}
  813070:	e037883a 	mov	sp,fp
  813074:	dfc00117 	ldw	ra,4(sp)
  813078:	df000017 	ldw	fp,0(sp)
  81307c:	dec00204 	addi	sp,sp,8
  813080:	f800283a 	ret

00813084 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813084:	defffa04 	addi	sp,sp,-24
  813088:	dfc00515 	stw	ra,20(sp)
  81308c:	df000415 	stw	fp,16(sp)
  813090:	df000404 	addi	fp,sp,16
  813094:	e13ffd15 	stw	r4,-12(fp)
  813098:	e17ffe15 	stw	r5,-8(fp)
  81309c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8130a0:	e0bffd17 	ldw	r2,-12(fp)
  8130a4:	10800017 	ldw	r2,0(r2)
  8130a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  8130ac:	e0bffc17 	ldw	r2,-16(fp)
  8130b0:	10c00a04 	addi	r3,r2,40
  8130b4:	e0bffd17 	ldw	r2,-12(fp)
  8130b8:	10800217 	ldw	r2,8(r2)
  8130bc:	100f883a 	mov	r7,r2
  8130c0:	e1bfff17 	ldw	r6,-4(fp)
  8130c4:	e17ffe17 	ldw	r5,-8(fp)
  8130c8:	1809883a 	mov	r4,r3
  8130cc:	08137500 	call	813750 <altera_avalon_uart_write>
      fd->fd_flags);
}
  8130d0:	e037883a 	mov	sp,fp
  8130d4:	dfc00117 	ldw	ra,4(sp)
  8130d8:	df000017 	ldw	fp,0(sp)
  8130dc:	dec00204 	addi	sp,sp,8
  8130e0:	f800283a 	ret

008130e4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  8130e4:	defffc04 	addi	sp,sp,-16
  8130e8:	dfc00315 	stw	ra,12(sp)
  8130ec:	df000215 	stw	fp,8(sp)
  8130f0:	df000204 	addi	fp,sp,8
  8130f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8130f8:	e0bfff17 	ldw	r2,-4(fp)
  8130fc:	10800017 	ldw	r2,0(r2)
  813100:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  813104:	e0bffe17 	ldw	r2,-8(fp)
  813108:	10c00a04 	addi	r3,r2,40
  81310c:	e0bfff17 	ldw	r2,-4(fp)
  813110:	10800217 	ldw	r2,8(r2)
  813114:	100b883a 	mov	r5,r2
  813118:	1809883a 	mov	r4,r3
  81311c:	08134a80 	call	8134a8 <altera_avalon_uart_close>
}
  813120:	e037883a 	mov	sp,fp
  813124:	dfc00117 	ldw	ra,4(sp)
  813128:	df000017 	ldw	fp,0(sp)
  81312c:	dec00204 	addi	sp,sp,8
  813130:	f800283a 	ret

00813134 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  813134:	defff804 	addi	sp,sp,-32
  813138:	dfc00715 	stw	ra,28(sp)
  81313c:	df000615 	stw	fp,24(sp)
  813140:	df000604 	addi	fp,sp,24
  813144:	e13ffd15 	stw	r4,-12(fp)
  813148:	e17ffe15 	stw	r5,-8(fp)
  81314c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  813150:	e0bffd17 	ldw	r2,-12(fp)
  813154:	10800017 	ldw	r2,0(r2)
  813158:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  81315c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  813160:	1000041e 	bne	r2,zero,813174 <altera_avalon_uart_init+0x40>
  813164:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  813168:	1000021e 	bne	r2,zero,813174 <altera_avalon_uart_init+0x40>
  81316c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  813170:	10000226 	beq	r2,zero,81317c <altera_avalon_uart_init+0x48>
  813174:	00800044 	movi	r2,1
  813178:	00000106 	br	813180 <altera_avalon_uart_init+0x4c>
  81317c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  813180:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  813184:	e0bffc17 	ldw	r2,-16(fp)
  813188:	10000f1e 	bne	r2,zero,8131c8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  81318c:	e0bffd17 	ldw	r2,-12(fp)
  813190:	00c32004 	movi	r3,3200
  813194:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  813198:	e0bffb17 	ldw	r2,-20(fp)
  81319c:	10800304 	addi	r2,r2,12
  8131a0:	e0fffd17 	ldw	r3,-12(fp)
  8131a4:	18c00117 	ldw	r3,4(r3)
  8131a8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  8131ac:	d8000015 	stw	zero,0(sp)
  8131b0:	e1fffd17 	ldw	r7,-12(fp)
  8131b4:	01802074 	movhi	r6,129
  8131b8:	318c7804 	addi	r6,r6,12768
  8131bc:	e17fff17 	ldw	r5,-4(fp)
  8131c0:	e13ffe17 	ldw	r4,-8(fp)
  8131c4:	0813e800 	call	813e80 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  8131c8:	0001883a 	nop
  8131cc:	e037883a 	mov	sp,fp
  8131d0:	dfc00117 	ldw	ra,4(sp)
  8131d4:	df000017 	ldw	fp,0(sp)
  8131d8:	dec00204 	addi	sp,sp,8
  8131dc:	f800283a 	ret

008131e0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  8131e0:	defffa04 	addi	sp,sp,-24
  8131e4:	dfc00515 	stw	ra,20(sp)
  8131e8:	df000415 	stw	fp,16(sp)
  8131ec:	df000404 	addi	fp,sp,16
  8131f0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  8131f4:	e0bfff17 	ldw	r2,-4(fp)
  8131f8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8131fc:	e0bffc17 	ldw	r2,-16(fp)
  813200:	10800017 	ldw	r2,0(r2)
  813204:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  813208:	e0bffd17 	ldw	r2,-12(fp)
  81320c:	10800204 	addi	r2,r2,8
  813210:	10800037 	ldwio	r2,0(r2)
  813214:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  813218:	e0bffd17 	ldw	r2,-12(fp)
  81321c:	10800204 	addi	r2,r2,8
  813220:	0007883a 	mov	r3,zero
  813224:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  813228:	e0bffd17 	ldw	r2,-12(fp)
  81322c:	10800204 	addi	r2,r2,8
  813230:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  813234:	e0bffe17 	ldw	r2,-8(fp)
  813238:	1080200c 	andi	r2,r2,128
  81323c:	10000326 	beq	r2,zero,81324c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  813240:	e17ffe17 	ldw	r5,-8(fp)
  813244:	e13ffc17 	ldw	r4,-16(fp)
  813248:	081327c0 	call	81327c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  81324c:	e0bffe17 	ldw	r2,-8(fp)
  813250:	1081100c 	andi	r2,r2,1088
  813254:	10000326 	beq	r2,zero,813264 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  813258:	e17ffe17 	ldw	r5,-8(fp)
  81325c:	e13ffc17 	ldw	r4,-16(fp)
  813260:	08133600 	call	813360 <altera_avalon_uart_txirq>
  }
  

}
  813264:	0001883a 	nop
  813268:	e037883a 	mov	sp,fp
  81326c:	dfc00117 	ldw	ra,4(sp)
  813270:	df000017 	ldw	fp,0(sp)
  813274:	dec00204 	addi	sp,sp,8
  813278:	f800283a 	ret

0081327c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  81327c:	defffc04 	addi	sp,sp,-16
  813280:	df000315 	stw	fp,12(sp)
  813284:	df000304 	addi	fp,sp,12
  813288:	e13ffe15 	stw	r4,-8(fp)
  81328c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  813290:	e0bfff17 	ldw	r2,-4(fp)
  813294:	108000cc 	andi	r2,r2,3
  813298:	10002c1e 	bne	r2,zero,81334c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  81329c:	e0bffe17 	ldw	r2,-8(fp)
  8132a0:	10800317 	ldw	r2,12(r2)
  8132a4:	e0bffe17 	ldw	r2,-8(fp)
  8132a8:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8132ac:	e0bffe17 	ldw	r2,-8(fp)
  8132b0:	10800317 	ldw	r2,12(r2)
  8132b4:	10800044 	addi	r2,r2,1
  8132b8:	10800fcc 	andi	r2,r2,63
  8132bc:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  8132c0:	e0bffe17 	ldw	r2,-8(fp)
  8132c4:	10800317 	ldw	r2,12(r2)
  8132c8:	e0fffe17 	ldw	r3,-8(fp)
  8132cc:	18c00017 	ldw	r3,0(r3)
  8132d0:	18c00037 	ldwio	r3,0(r3)
  8132d4:	1809883a 	mov	r4,r3
  8132d8:	e0fffe17 	ldw	r3,-8(fp)
  8132dc:	1885883a 	add	r2,r3,r2
  8132e0:	10800704 	addi	r2,r2,28
  8132e4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  8132e8:	e0bffe17 	ldw	r2,-8(fp)
  8132ec:	e0fffd17 	ldw	r3,-12(fp)
  8132f0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  8132f4:	e0bffe17 	ldw	r2,-8(fp)
  8132f8:	10800317 	ldw	r2,12(r2)
  8132fc:	10800044 	addi	r2,r2,1
  813300:	10800fcc 	andi	r2,r2,63
  813304:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  813308:	e0bffe17 	ldw	r2,-8(fp)
  81330c:	10c00217 	ldw	r3,8(r2)
  813310:	e0bffd17 	ldw	r2,-12(fp)
  813314:	18800e1e 	bne	r3,r2,813350 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813318:	e0bffe17 	ldw	r2,-8(fp)
  81331c:	10c00117 	ldw	r3,4(r2)
  813320:	00bfdfc4 	movi	r2,-129
  813324:	1886703a 	and	r3,r3,r2
  813328:	e0bffe17 	ldw	r2,-8(fp)
  81332c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  813330:	e0bffe17 	ldw	r2,-8(fp)
  813334:	10800017 	ldw	r2,0(r2)
  813338:	10800304 	addi	r2,r2,12
  81333c:	e0fffe17 	ldw	r3,-8(fp)
  813340:	18c00117 	ldw	r3,4(r3)
  813344:	10c00035 	stwio	r3,0(r2)
  813348:	00000106 	br	813350 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  81334c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  813350:	e037883a 	mov	sp,fp
  813354:	df000017 	ldw	fp,0(sp)
  813358:	dec00104 	addi	sp,sp,4
  81335c:	f800283a 	ret

00813360 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813360:	defffb04 	addi	sp,sp,-20
  813364:	df000415 	stw	fp,16(sp)
  813368:	df000404 	addi	fp,sp,16
  81336c:	e13ffc15 	stw	r4,-16(fp)
  813370:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  813374:	e0bffc17 	ldw	r2,-16(fp)
  813378:	10c00417 	ldw	r3,16(r2)
  81337c:	e0bffc17 	ldw	r2,-16(fp)
  813380:	10800517 	ldw	r2,20(r2)
  813384:	18803226 	beq	r3,r2,813450 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813388:	e0bffc17 	ldw	r2,-16(fp)
  81338c:	10800617 	ldw	r2,24(r2)
  813390:	1080008c 	andi	r2,r2,2
  813394:	10000326 	beq	r2,zero,8133a4 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  813398:	e0bffd17 	ldw	r2,-12(fp)
  81339c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8133a0:	10001d26 	beq	r2,zero,813418 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  8133a4:	e0bffc17 	ldw	r2,-16(fp)
  8133a8:	10800417 	ldw	r2,16(r2)
  8133ac:	e0bffc17 	ldw	r2,-16(fp)
  8133b0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  8133b4:	e0bffc17 	ldw	r2,-16(fp)
  8133b8:	10800017 	ldw	r2,0(r2)
  8133bc:	10800104 	addi	r2,r2,4
  8133c0:	e0fffc17 	ldw	r3,-16(fp)
  8133c4:	18c00417 	ldw	r3,16(r3)
  8133c8:	e13ffc17 	ldw	r4,-16(fp)
  8133cc:	20c7883a 	add	r3,r4,r3
  8133d0:	18c01704 	addi	r3,r3,92
  8133d4:	18c00003 	ldbu	r3,0(r3)
  8133d8:	18c03fcc 	andi	r3,r3,255
  8133dc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  8133e0:	e0bffc17 	ldw	r2,-16(fp)
  8133e4:	10800417 	ldw	r2,16(r2)
  8133e8:	10800044 	addi	r2,r2,1
  8133ec:	e0fffc17 	ldw	r3,-16(fp)
  8133f0:	18800415 	stw	r2,16(r3)
  8133f4:	10c00fcc 	andi	r3,r2,63
  8133f8:	e0bffc17 	ldw	r2,-16(fp)
  8133fc:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813400:	e0bffc17 	ldw	r2,-16(fp)
  813404:	10800117 	ldw	r2,4(r2)
  813408:	10c01014 	ori	r3,r2,64
  81340c:	e0bffc17 	ldw	r2,-16(fp)
  813410:	10c00115 	stw	r3,4(r2)
  813414:	00000e06 	br	813450 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  813418:	e0bffc17 	ldw	r2,-16(fp)
  81341c:	10800017 	ldw	r2,0(r2)
  813420:	10800204 	addi	r2,r2,8
  813424:	10800037 	ldwio	r2,0(r2)
  813428:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81342c:	e0bffd17 	ldw	r2,-12(fp)
  813430:	1082000c 	andi	r2,r2,2048
  813434:	1000061e 	bne	r2,zero,813450 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  813438:	e0bffc17 	ldw	r2,-16(fp)
  81343c:	10c00117 	ldw	r3,4(r2)
  813440:	00bfefc4 	movi	r2,-65
  813444:	1886703a 	and	r3,r3,r2
  813448:	e0bffc17 	ldw	r2,-16(fp)
  81344c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  813450:	e0bffc17 	ldw	r2,-16(fp)
  813454:	10c00417 	ldw	r3,16(r2)
  813458:	e0bffc17 	ldw	r2,-16(fp)
  81345c:	10800517 	ldw	r2,20(r2)
  813460:	1880061e 	bne	r3,r2,81347c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813464:	e0bffc17 	ldw	r2,-16(fp)
  813468:	10c00117 	ldw	r3,4(r2)
  81346c:	00beefc4 	movi	r2,-1089
  813470:	1886703a 	and	r3,r3,r2
  813474:	e0bffc17 	ldw	r2,-16(fp)
  813478:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  81347c:	e0bffc17 	ldw	r2,-16(fp)
  813480:	10800017 	ldw	r2,0(r2)
  813484:	10800304 	addi	r2,r2,12
  813488:	e0fffc17 	ldw	r3,-16(fp)
  81348c:	18c00117 	ldw	r3,4(r3)
  813490:	10c00035 	stwio	r3,0(r2)
}
  813494:	0001883a 	nop
  813498:	e037883a 	mov	sp,fp
  81349c:	df000017 	ldw	fp,0(sp)
  8134a0:	dec00104 	addi	sp,sp,4
  8134a4:	f800283a 	ret

008134a8 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  8134a8:	defffd04 	addi	sp,sp,-12
  8134ac:	df000215 	stw	fp,8(sp)
  8134b0:	df000204 	addi	fp,sp,8
  8134b4:	e13ffe15 	stw	r4,-8(fp)
  8134b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8134bc:	00000506 	br	8134d4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  8134c0:	e0bfff17 	ldw	r2,-4(fp)
  8134c4:	1090000c 	andi	r2,r2,16384
  8134c8:	10000226 	beq	r2,zero,8134d4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  8134cc:	00bffd44 	movi	r2,-11
  8134d0:	00000606 	br	8134ec <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  8134d4:	e0bffe17 	ldw	r2,-8(fp)
  8134d8:	10c00417 	ldw	r3,16(r2)
  8134dc:	e0bffe17 	ldw	r2,-8(fp)
  8134e0:	10800517 	ldw	r2,20(r2)
  8134e4:	18bff61e 	bne	r3,r2,8134c0 <__alt_mem_onchip_mem+0xff7934c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  8134e8:	0005883a 	mov	r2,zero
}
  8134ec:	e037883a 	mov	sp,fp
  8134f0:	df000017 	ldw	fp,0(sp)
  8134f4:	dec00104 	addi	sp,sp,4
  8134f8:	f800283a 	ret

008134fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8134fc:	defffe04 	addi	sp,sp,-8
  813500:	dfc00115 	stw	ra,4(sp)
  813504:	df000015 	stw	fp,0(sp)
  813508:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81350c:	d0a00b17 	ldw	r2,-32724(gp)
  813510:	10000326 	beq	r2,zero,813520 <alt_get_errno+0x24>
  813514:	d0a00b17 	ldw	r2,-32724(gp)
  813518:	103ee83a 	callr	r2
  81351c:	00000106 	br	813524 <alt_get_errno+0x28>
  813520:	d0a79c04 	addi	r2,gp,-24976
}
  813524:	e037883a 	mov	sp,fp
  813528:	dfc00117 	ldw	ra,4(sp)
  81352c:	df000017 	ldw	fp,0(sp)
  813530:	dec00204 	addi	sp,sp,8
  813534:	f800283a 	ret

00813538 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  813538:	defff204 	addi	sp,sp,-56
  81353c:	dfc00d15 	stw	ra,52(sp)
  813540:	df000c15 	stw	fp,48(sp)
  813544:	df000c04 	addi	fp,sp,48
  813548:	e13ffc15 	stw	r4,-16(fp)
  81354c:	e17ffd15 	stw	r5,-12(fp)
  813550:	e1bffe15 	stw	r6,-8(fp)
  813554:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  813558:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  81355c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  813560:	e0bfff17 	ldw	r2,-4(fp)
  813564:	1090000c 	andi	r2,r2,16384
  813568:	1005003a 	cmpeq	r2,r2,zero
  81356c:	10803fcc 	andi	r2,r2,255
  813570:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813574:	00001306 	br	8135c4 <altera_avalon_uart_read+0x8c>
    {
      count++;
  813578:	e0bff517 	ldw	r2,-44(fp)
  81357c:	10800044 	addi	r2,r2,1
  813580:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  813584:	e0bffd17 	ldw	r2,-12(fp)
  813588:	10c00044 	addi	r3,r2,1
  81358c:	e0fffd15 	stw	r3,-12(fp)
  813590:	e0fffc17 	ldw	r3,-16(fp)
  813594:	18c00217 	ldw	r3,8(r3)
  813598:	e13ffc17 	ldw	r4,-16(fp)
  81359c:	20c7883a 	add	r3,r4,r3
  8135a0:	18c00704 	addi	r3,r3,28
  8135a4:	18c00003 	ldbu	r3,0(r3)
  8135a8:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  8135ac:	e0bffc17 	ldw	r2,-16(fp)
  8135b0:	10800217 	ldw	r2,8(r2)
  8135b4:	10800044 	addi	r2,r2,1
  8135b8:	10c00fcc 	andi	r3,r2,63
  8135bc:	e0bffc17 	ldw	r2,-16(fp)
  8135c0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  8135c4:	e0fff517 	ldw	r3,-44(fp)
  8135c8:	e0bffe17 	ldw	r2,-8(fp)
  8135cc:	1880050e 	bge	r3,r2,8135e4 <altera_avalon_uart_read+0xac>
  8135d0:	e0bffc17 	ldw	r2,-16(fp)
  8135d4:	10c00217 	ldw	r3,8(r2)
  8135d8:	e0bffc17 	ldw	r2,-16(fp)
  8135dc:	10800317 	ldw	r2,12(r2)
  8135e0:	18bfe51e 	bne	r3,r2,813578 <__alt_mem_onchip_mem+0xff793578>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  8135e4:	e0bff517 	ldw	r2,-44(fp)
  8135e8:	1000251e 	bne	r2,zero,813680 <altera_avalon_uart_read+0x148>
  8135ec:	e0bffc17 	ldw	r2,-16(fp)
  8135f0:	10c00217 	ldw	r3,8(r2)
  8135f4:	e0bffc17 	ldw	r2,-16(fp)
  8135f8:	10800317 	ldw	r2,12(r2)
  8135fc:	1880201e 	bne	r3,r2,813680 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  813600:	e0bff617 	ldw	r2,-40(fp)
  813604:	1000071e 	bne	r2,zero,813624 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  813608:	08134fc0 	call	8134fc <alt_get_errno>
  81360c:	1007883a 	mov	r3,r2
  813610:	008002c4 	movi	r2,11
  813614:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  813618:	00800044 	movi	r2,1
  81361c:	e0bff405 	stb	r2,-48(fp)
        break;
  813620:	00001b06 	br	813690 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813624:	0005303a 	rdctl	r2,status
  813628:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81362c:	e0fff917 	ldw	r3,-28(fp)
  813630:	00bfff84 	movi	r2,-2
  813634:	1884703a 	and	r2,r3,r2
  813638:	1001703a 	wrctl	status,r2
  
  return context;
  81363c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  813640:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813644:	e0bffc17 	ldw	r2,-16(fp)
  813648:	10800117 	ldw	r2,4(r2)
  81364c:	10c02014 	ori	r3,r2,128
  813650:	e0bffc17 	ldw	r2,-16(fp)
  813654:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813658:	e0bffc17 	ldw	r2,-16(fp)
  81365c:	10800017 	ldw	r2,0(r2)
  813660:	10800304 	addi	r2,r2,12
  813664:	e0fffc17 	ldw	r3,-16(fp)
  813668:	18c00117 	ldw	r3,4(r3)
  81366c:	10c00035 	stwio	r3,0(r2)
  813670:	e0bff817 	ldw	r2,-32(fp)
  813674:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813678:	e0bffa17 	ldw	r2,-24(fp)
  81367c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  813680:	e0bff517 	ldw	r2,-44(fp)
  813684:	1000021e 	bne	r2,zero,813690 <altera_avalon_uart_read+0x158>
  813688:	e0bffe17 	ldw	r2,-8(fp)
  81368c:	103fcd1e 	bne	r2,zero,8135c4 <__alt_mem_onchip_mem+0xff7935c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813690:	0005303a 	rdctl	r2,status
  813694:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813698:	e0fffb17 	ldw	r3,-20(fp)
  81369c:	00bfff84 	movi	r2,-2
  8136a0:	1884703a 	and	r2,r3,r2
  8136a4:	1001703a 	wrctl	status,r2
  
  return context;
  8136a8:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  8136ac:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8136b0:	e0bffc17 	ldw	r2,-16(fp)
  8136b4:	10800117 	ldw	r2,4(r2)
  8136b8:	10c02014 	ori	r3,r2,128
  8136bc:	e0bffc17 	ldw	r2,-16(fp)
  8136c0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8136c4:	e0bffc17 	ldw	r2,-16(fp)
  8136c8:	10800017 	ldw	r2,0(r2)
  8136cc:	10800304 	addi	r2,r2,12
  8136d0:	e0fffc17 	ldw	r3,-16(fp)
  8136d4:	18c00117 	ldw	r3,4(r3)
  8136d8:	10c00035 	stwio	r3,0(r2)
  8136dc:	e0bff817 	ldw	r2,-32(fp)
  8136e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136e4:	e0bff717 	ldw	r2,-36(fp)
  8136e8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  8136ec:	e0bff403 	ldbu	r2,-48(fp)
  8136f0:	10000226 	beq	r2,zero,8136fc <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  8136f4:	00bffd44 	movi	r2,-11
  8136f8:	00000106 	br	813700 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  8136fc:	e0bff517 	ldw	r2,-44(fp)
  }
}
  813700:	e037883a 	mov	sp,fp
  813704:	dfc00117 	ldw	ra,4(sp)
  813708:	df000017 	ldw	fp,0(sp)
  81370c:	dec00204 	addi	sp,sp,8
  813710:	f800283a 	ret

00813714 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813714:	defffe04 	addi	sp,sp,-8
  813718:	dfc00115 	stw	ra,4(sp)
  81371c:	df000015 	stw	fp,0(sp)
  813720:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813724:	d0a00b17 	ldw	r2,-32724(gp)
  813728:	10000326 	beq	r2,zero,813738 <alt_get_errno+0x24>
  81372c:	d0a00b17 	ldw	r2,-32724(gp)
  813730:	103ee83a 	callr	r2
  813734:	00000106 	br	81373c <alt_get_errno+0x28>
  813738:	d0a79c04 	addi	r2,gp,-24976
}
  81373c:	e037883a 	mov	sp,fp
  813740:	dfc00117 	ldw	ra,4(sp)
  813744:	df000017 	ldw	fp,0(sp)
  813748:	dec00204 	addi	sp,sp,8
  81374c:	f800283a 	ret

00813750 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813750:	defff204 	addi	sp,sp,-56
  813754:	dfc00d15 	stw	ra,52(sp)
  813758:	df000c15 	stw	fp,48(sp)
  81375c:	df000c04 	addi	fp,sp,48
  813760:	e13ffc15 	stw	r4,-16(fp)
  813764:	e17ffd15 	stw	r5,-12(fp)
  813768:	e1bffe15 	stw	r6,-8(fp)
  81376c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813770:	e0bffe17 	ldw	r2,-8(fp)
  813774:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813778:	e0bfff17 	ldw	r2,-4(fp)
  81377c:	1090000c 	andi	r2,r2,16384
  813780:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813784:	00003c06 	br	813878 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813788:	e0bffc17 	ldw	r2,-16(fp)
  81378c:	10800517 	ldw	r2,20(r2)
  813790:	10800044 	addi	r2,r2,1
  813794:	10800fcc 	andi	r2,r2,63
  813798:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  81379c:	e0bffc17 	ldw	r2,-16(fp)
  8137a0:	10c00417 	ldw	r3,16(r2)
  8137a4:	e0bff717 	ldw	r2,-36(fp)
  8137a8:	1880221e 	bne	r3,r2,813834 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  8137ac:	e0bff517 	ldw	r2,-44(fp)
  8137b0:	10000526 	beq	r2,zero,8137c8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  8137b4:	08137140 	call	813714 <alt_get_errno>
  8137b8:	1007883a 	mov	r3,r2
  8137bc:	008002c4 	movi	r2,11
  8137c0:	18800015 	stw	r2,0(r3)
        break;
  8137c4:	00002e06 	br	813880 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8137c8:	0005303a 	rdctl	r2,status
  8137cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8137d0:	e0fff917 	ldw	r3,-28(fp)
  8137d4:	00bfff84 	movi	r2,-2
  8137d8:	1884703a 	and	r2,r3,r2
  8137dc:	1001703a 	wrctl	status,r2
  
  return context;
  8137e0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  8137e4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8137e8:	e0bffc17 	ldw	r2,-16(fp)
  8137ec:	10800117 	ldw	r2,4(r2)
  8137f0:	10c11014 	ori	r3,r2,1088
  8137f4:	e0bffc17 	ldw	r2,-16(fp)
  8137f8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8137fc:	e0bffc17 	ldw	r2,-16(fp)
  813800:	10800017 	ldw	r2,0(r2)
  813804:	10800304 	addi	r2,r2,12
  813808:	e0fffc17 	ldw	r3,-16(fp)
  81380c:	18c00117 	ldw	r3,4(r3)
  813810:	10c00035 	stwio	r3,0(r2)
  813814:	e0bff817 	ldw	r2,-32(fp)
  813818:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81381c:	e0bff617 	ldw	r2,-40(fp)
  813820:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813824:	e0bffc17 	ldw	r2,-16(fp)
  813828:	10c00417 	ldw	r3,16(r2)
  81382c:	e0bff717 	ldw	r2,-36(fp)
  813830:	18bffc26 	beq	r3,r2,813824 <__alt_mem_onchip_mem+0xff793824>
      }
    }

    count--;
  813834:	e0bff417 	ldw	r2,-48(fp)
  813838:	10bfffc4 	addi	r2,r2,-1
  81383c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813840:	e0bffc17 	ldw	r2,-16(fp)
  813844:	10c00517 	ldw	r3,20(r2)
  813848:	e0bffd17 	ldw	r2,-12(fp)
  81384c:	11000044 	addi	r4,r2,1
  813850:	e13ffd15 	stw	r4,-12(fp)
  813854:	10800003 	ldbu	r2,0(r2)
  813858:	1009883a 	mov	r4,r2
  81385c:	e0bffc17 	ldw	r2,-16(fp)
  813860:	10c5883a 	add	r2,r2,r3
  813864:	10801704 	addi	r2,r2,92
  813868:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  81386c:	e0bffc17 	ldw	r2,-16(fp)
  813870:	e0fff717 	ldw	r3,-36(fp)
  813874:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813878:	e0bff417 	ldw	r2,-48(fp)
  81387c:	103fc21e 	bne	r2,zero,813788 <__alt_mem_onchip_mem+0xff793788>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813880:	0005303a 	rdctl	r2,status
  813884:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813888:	e0fffb17 	ldw	r3,-20(fp)
  81388c:	00bfff84 	movi	r2,-2
  813890:	1884703a 	and	r2,r3,r2
  813894:	1001703a 	wrctl	status,r2
  
  return context;
  813898:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  81389c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8138a0:	e0bffc17 	ldw	r2,-16(fp)
  8138a4:	10800117 	ldw	r2,4(r2)
  8138a8:	10c11014 	ori	r3,r2,1088
  8138ac:	e0bffc17 	ldw	r2,-16(fp)
  8138b0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8138b4:	e0bffc17 	ldw	r2,-16(fp)
  8138b8:	10800017 	ldw	r2,0(r2)
  8138bc:	10800304 	addi	r2,r2,12
  8138c0:	e0fffc17 	ldw	r3,-16(fp)
  8138c4:	18c00117 	ldw	r3,4(r3)
  8138c8:	10c00035 	stwio	r3,0(r2)
  8138cc:	e0bff817 	ldw	r2,-32(fp)
  8138d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8138d4:	e0bffa17 	ldw	r2,-24(fp)
  8138d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  8138dc:	e0fffe17 	ldw	r3,-8(fp)
  8138e0:	e0bff417 	ldw	r2,-48(fp)
  8138e4:	1885c83a 	sub	r2,r3,r2
}
  8138e8:	e037883a 	mov	sp,fp
  8138ec:	dfc00117 	ldw	ra,4(sp)
  8138f0:	df000017 	ldw	fp,0(sp)
  8138f4:	dec00204 	addi	sp,sp,8
  8138f8:	f800283a 	ret

008138fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8138fc:	defff504 	addi	sp,sp,-44
  813900:	df000a15 	stw	fp,40(sp)
  813904:	df000a04 	addi	fp,sp,40
  813908:	e13ffc15 	stw	r4,-16(fp)
  81390c:	e17ffd15 	stw	r5,-12(fp)
  813910:	e1bffe15 	stw	r6,-8(fp)
  813914:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  813918:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  81391c:	d0a7a717 	ldw	r2,-24932(gp)
  
  if (alt_ticks_per_second ())
  813920:	10003c26 	beq	r2,zero,813a14 <alt_alarm_start+0x118>
  {
    if (alarm)
  813924:	e0bffc17 	ldw	r2,-16(fp)
  813928:	10003826 	beq	r2,zero,813a0c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  81392c:	e0bffc17 	ldw	r2,-16(fp)
  813930:	e0fffe17 	ldw	r3,-8(fp)
  813934:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  813938:	e0bffc17 	ldw	r2,-16(fp)
  81393c:	e0ffff17 	ldw	r3,-4(fp)
  813940:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813944:	0005303a 	rdctl	r2,status
  813948:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81394c:	e0fff917 	ldw	r3,-28(fp)
  813950:	00bfff84 	movi	r2,-2
  813954:	1884703a 	and	r2,r3,r2
  813958:	1001703a 	wrctl	status,r2
  
  return context;
  81395c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  813960:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813964:	d0a7a817 	ldw	r2,-24928(gp)
      
      current_nticks = alt_nticks();
  813968:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81396c:	e0fffd17 	ldw	r3,-12(fp)
  813970:	e0bff617 	ldw	r2,-40(fp)
  813974:	1885883a 	add	r2,r3,r2
  813978:	10c00044 	addi	r3,r2,1
  81397c:	e0bffc17 	ldw	r2,-16(fp)
  813980:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  813984:	e0bffc17 	ldw	r2,-16(fp)
  813988:	10c00217 	ldw	r3,8(r2)
  81398c:	e0bff617 	ldw	r2,-40(fp)
  813990:	1880042e 	bgeu	r3,r2,8139a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  813994:	e0bffc17 	ldw	r2,-16(fp)
  813998:	00c00044 	movi	r3,1
  81399c:	10c00405 	stb	r3,16(r2)
  8139a0:	00000206 	br	8139ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  8139a4:	e0bffc17 	ldw	r2,-16(fp)
  8139a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8139ac:	e0bffc17 	ldw	r2,-16(fp)
  8139b0:	d0e00e04 	addi	r3,gp,-32712
  8139b4:	e0fffa15 	stw	r3,-24(fp)
  8139b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8139bc:	e0bffb17 	ldw	r2,-20(fp)
  8139c0:	e0fffa17 	ldw	r3,-24(fp)
  8139c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  8139c8:	e0bffa17 	ldw	r2,-24(fp)
  8139cc:	10c00017 	ldw	r3,0(r2)
  8139d0:	e0bffb17 	ldw	r2,-20(fp)
  8139d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8139d8:	e0bffa17 	ldw	r2,-24(fp)
  8139dc:	10800017 	ldw	r2,0(r2)
  8139e0:	e0fffb17 	ldw	r3,-20(fp)
  8139e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8139e8:	e0bffa17 	ldw	r2,-24(fp)
  8139ec:	e0fffb17 	ldw	r3,-20(fp)
  8139f0:	10c00015 	stw	r3,0(r2)
  8139f4:	e0bff817 	ldw	r2,-32(fp)
  8139f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8139fc:	e0bff717 	ldw	r2,-36(fp)
  813a00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  813a04:	0005883a 	mov	r2,zero
  813a08:	00000306 	br	813a18 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  813a0c:	00bffa84 	movi	r2,-22
  813a10:	00000106 	br	813a18 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  813a14:	00bfde84 	movi	r2,-134
  }
}
  813a18:	e037883a 	mov	sp,fp
  813a1c:	df000017 	ldw	fp,0(sp)
  813a20:	dec00104 	addi	sp,sp,4
  813a24:	f800283a 	ret

00813a28 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813a28:	defffe04 	addi	sp,sp,-8
  813a2c:	df000115 	stw	fp,4(sp)
  813a30:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813a34:	e03fff15 	stw	zero,-4(fp)
  813a38:	00000506 	br	813a50 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813a3c:	e0bfff17 	ldw	r2,-4(fp)
  813a40:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813a44:	e0bfff17 	ldw	r2,-4(fp)
  813a48:	10800804 	addi	r2,r2,32
  813a4c:	e0bfff15 	stw	r2,-4(fp)
  813a50:	e0bfff17 	ldw	r2,-4(fp)
  813a54:	10820030 	cmpltui	r2,r2,2048
  813a58:	103ff81e 	bne	r2,zero,813a3c <__alt_mem_onchip_mem+0xff793a3c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813a5c:	0001883a 	nop
  813a60:	e037883a 	mov	sp,fp
  813a64:	df000017 	ldw	fp,0(sp)
  813a68:	dec00104 	addi	sp,sp,4
  813a6c:	f800283a 	ret

00813a70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813a70:	defffe04 	addi	sp,sp,-8
  813a74:	dfc00115 	stw	ra,4(sp)
  813a78:	df000015 	stw	fp,0(sp)
  813a7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813a80:	d0a00b17 	ldw	r2,-32724(gp)
  813a84:	10000326 	beq	r2,zero,813a94 <alt_get_errno+0x24>
  813a88:	d0a00b17 	ldw	r2,-32724(gp)
  813a8c:	103ee83a 	callr	r2
  813a90:	00000106 	br	813a98 <alt_get_errno+0x28>
  813a94:	d0a79c04 	addi	r2,gp,-24976
}
  813a98:	e037883a 	mov	sp,fp
  813a9c:	dfc00117 	ldw	ra,4(sp)
  813aa0:	df000017 	ldw	fp,0(sp)
  813aa4:	dec00204 	addi	sp,sp,8
  813aa8:	f800283a 	ret

00813aac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813aac:	defffa04 	addi	sp,sp,-24
  813ab0:	dfc00515 	stw	ra,20(sp)
  813ab4:	df000415 	stw	fp,16(sp)
  813ab8:	df000404 	addi	fp,sp,16
  813abc:	e13ffe15 	stw	r4,-8(fp)
  813ac0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813ac4:	e0bffe17 	ldw	r2,-8(fp)
  813ac8:	10000326 	beq	r2,zero,813ad8 <alt_dev_llist_insert+0x2c>
  813acc:	e0bffe17 	ldw	r2,-8(fp)
  813ad0:	10800217 	ldw	r2,8(r2)
  813ad4:	1000061e 	bne	r2,zero,813af0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  813ad8:	0813a700 	call	813a70 <alt_get_errno>
  813adc:	1007883a 	mov	r3,r2
  813ae0:	00800584 	movi	r2,22
  813ae4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813ae8:	00bffa84 	movi	r2,-22
  813aec:	00001306 	br	813b3c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813af0:	e0bffe17 	ldw	r2,-8(fp)
  813af4:	e0ffff17 	ldw	r3,-4(fp)
  813af8:	e0fffc15 	stw	r3,-16(fp)
  813afc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813b00:	e0bffd17 	ldw	r2,-12(fp)
  813b04:	e0fffc17 	ldw	r3,-16(fp)
  813b08:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  813b0c:	e0bffc17 	ldw	r2,-16(fp)
  813b10:	10c00017 	ldw	r3,0(r2)
  813b14:	e0bffd17 	ldw	r2,-12(fp)
  813b18:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813b1c:	e0bffc17 	ldw	r2,-16(fp)
  813b20:	10800017 	ldw	r2,0(r2)
  813b24:	e0fffd17 	ldw	r3,-12(fp)
  813b28:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  813b2c:	e0bffc17 	ldw	r2,-16(fp)
  813b30:	e0fffd17 	ldw	r3,-12(fp)
  813b34:	10c00015 	stw	r3,0(r2)

  return 0;  
  813b38:	0005883a 	mov	r2,zero
}
  813b3c:	e037883a 	mov	sp,fp
  813b40:	dfc00117 	ldw	ra,4(sp)
  813b44:	df000017 	ldw	fp,0(sp)
  813b48:	dec00204 	addi	sp,sp,8
  813b4c:	f800283a 	ret

00813b50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813b50:	defffd04 	addi	sp,sp,-12
  813b54:	dfc00215 	stw	ra,8(sp)
  813b58:	df000115 	stw	fp,4(sp)
  813b5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813b60:	00802074 	movhi	r2,129
  813b64:	10923204 	addi	r2,r2,18632
  813b68:	e0bfff15 	stw	r2,-4(fp)
  813b6c:	00000606 	br	813b88 <_do_ctors+0x38>
        (*ctor) (); 
  813b70:	e0bfff17 	ldw	r2,-4(fp)
  813b74:	10800017 	ldw	r2,0(r2)
  813b78:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  813b7c:	e0bfff17 	ldw	r2,-4(fp)
  813b80:	10bfff04 	addi	r2,r2,-4
  813b84:	e0bfff15 	stw	r2,-4(fp)
  813b88:	e0ffff17 	ldw	r3,-4(fp)
  813b8c:	00802074 	movhi	r2,129
  813b90:	10923304 	addi	r2,r2,18636
  813b94:	18bff62e 	bgeu	r3,r2,813b70 <__alt_mem_onchip_mem+0xff793b70>
        (*ctor) (); 
}
  813b98:	0001883a 	nop
  813b9c:	e037883a 	mov	sp,fp
  813ba0:	dfc00117 	ldw	ra,4(sp)
  813ba4:	df000017 	ldw	fp,0(sp)
  813ba8:	dec00204 	addi	sp,sp,8
  813bac:	f800283a 	ret

00813bb0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813bb0:	defffd04 	addi	sp,sp,-12
  813bb4:	dfc00215 	stw	ra,8(sp)
  813bb8:	df000115 	stw	fp,4(sp)
  813bbc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813bc0:	00802074 	movhi	r2,129
  813bc4:	10923204 	addi	r2,r2,18632
  813bc8:	e0bfff15 	stw	r2,-4(fp)
  813bcc:	00000606 	br	813be8 <_do_dtors+0x38>
        (*dtor) (); 
  813bd0:	e0bfff17 	ldw	r2,-4(fp)
  813bd4:	10800017 	ldw	r2,0(r2)
  813bd8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813bdc:	e0bfff17 	ldw	r2,-4(fp)
  813be0:	10bfff04 	addi	r2,r2,-4
  813be4:	e0bfff15 	stw	r2,-4(fp)
  813be8:	e0ffff17 	ldw	r3,-4(fp)
  813bec:	00802074 	movhi	r2,129
  813bf0:	10923304 	addi	r2,r2,18636
  813bf4:	18bff62e 	bgeu	r3,r2,813bd0 <__alt_mem_onchip_mem+0xff793bd0>
        (*dtor) (); 
}
  813bf8:	0001883a 	nop
  813bfc:	e037883a 	mov	sp,fp
  813c00:	dfc00117 	ldw	ra,4(sp)
  813c04:	df000017 	ldw	fp,0(sp)
  813c08:	dec00204 	addi	sp,sp,8
  813c0c:	f800283a 	ret

00813c10 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813c10:	defffa04 	addi	sp,sp,-24
  813c14:	dfc00515 	stw	ra,20(sp)
  813c18:	df000415 	stw	fp,16(sp)
  813c1c:	df000404 	addi	fp,sp,16
  813c20:	e13ffe15 	stw	r4,-8(fp)
  813c24:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  813c28:	e0bfff17 	ldw	r2,-4(fp)
  813c2c:	10800017 	ldw	r2,0(r2)
  813c30:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  813c34:	e13ffe17 	ldw	r4,-8(fp)
  813c38:	0804a780 	call	804a78 <strlen>
  813c3c:	10800044 	addi	r2,r2,1
  813c40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813c44:	00000d06 	br	813c7c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  813c48:	e0bffc17 	ldw	r2,-16(fp)
  813c4c:	10800217 	ldw	r2,8(r2)
  813c50:	e0fffd17 	ldw	r3,-12(fp)
  813c54:	180d883a 	mov	r6,r3
  813c58:	e17ffe17 	ldw	r5,-8(fp)
  813c5c:	1009883a 	mov	r4,r2
  813c60:	08145840 	call	814584 <memcmp>
  813c64:	1000021e 	bne	r2,zero,813c70 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  813c68:	e0bffc17 	ldw	r2,-16(fp)
  813c6c:	00000706 	br	813c8c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  813c70:	e0bffc17 	ldw	r2,-16(fp)
  813c74:	10800017 	ldw	r2,0(r2)
  813c78:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  813c7c:	e0fffc17 	ldw	r3,-16(fp)
  813c80:	e0bfff17 	ldw	r2,-4(fp)
  813c84:	18bff01e 	bne	r3,r2,813c48 <__alt_mem_onchip_mem+0xff793c48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  813c88:	0005883a 	mov	r2,zero
}
  813c8c:	e037883a 	mov	sp,fp
  813c90:	dfc00117 	ldw	ra,4(sp)
  813c94:	df000017 	ldw	fp,0(sp)
  813c98:	dec00204 	addi	sp,sp,8
  813c9c:	f800283a 	ret

00813ca0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813ca0:	defffb04 	addi	sp,sp,-20
  813ca4:	dfc00415 	stw	ra,16(sp)
  813ca8:	df000315 	stw	fp,12(sp)
  813cac:	df000304 	addi	fp,sp,12
  813cb0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813cb4:	d0a00617 	ldw	r2,-32744(gp)
  813cb8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813cbc:	00003106 	br	813d84 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  813cc0:	e0bffd17 	ldw	r2,-12(fp)
  813cc4:	10800217 	ldw	r2,8(r2)
  813cc8:	1009883a 	mov	r4,r2
  813ccc:	0804a780 	call	804a78 <strlen>
  813cd0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  813cd4:	e0bffd17 	ldw	r2,-12(fp)
  813cd8:	10c00217 	ldw	r3,8(r2)
  813cdc:	e0bffe17 	ldw	r2,-8(fp)
  813ce0:	10bfffc4 	addi	r2,r2,-1
  813ce4:	1885883a 	add	r2,r3,r2
  813ce8:	10800003 	ldbu	r2,0(r2)
  813cec:	10803fcc 	andi	r2,r2,255
  813cf0:	1080201c 	xori	r2,r2,128
  813cf4:	10bfe004 	addi	r2,r2,-128
  813cf8:	10800bd8 	cmpnei	r2,r2,47
  813cfc:	1000031e 	bne	r2,zero,813d0c <alt_find_file+0x6c>
    {
      len -= 1;
  813d00:	e0bffe17 	ldw	r2,-8(fp)
  813d04:	10bfffc4 	addi	r2,r2,-1
  813d08:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813d0c:	e0bffe17 	ldw	r2,-8(fp)
  813d10:	e0ffff17 	ldw	r3,-4(fp)
  813d14:	1885883a 	add	r2,r3,r2
  813d18:	10800003 	ldbu	r2,0(r2)
  813d1c:	10803fcc 	andi	r2,r2,255
  813d20:	1080201c 	xori	r2,r2,128
  813d24:	10bfe004 	addi	r2,r2,-128
  813d28:	10800be0 	cmpeqi	r2,r2,47
  813d2c:	1000081e 	bne	r2,zero,813d50 <alt_find_file+0xb0>
  813d30:	e0bffe17 	ldw	r2,-8(fp)
  813d34:	e0ffff17 	ldw	r3,-4(fp)
  813d38:	1885883a 	add	r2,r3,r2
  813d3c:	10800003 	ldbu	r2,0(r2)
  813d40:	10803fcc 	andi	r2,r2,255
  813d44:	1080201c 	xori	r2,r2,128
  813d48:	10bfe004 	addi	r2,r2,-128
  813d4c:	10000a1e 	bne	r2,zero,813d78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  813d50:	e0bffd17 	ldw	r2,-12(fp)
  813d54:	10800217 	ldw	r2,8(r2)
  813d58:	e0fffe17 	ldw	r3,-8(fp)
  813d5c:	180d883a 	mov	r6,r3
  813d60:	e17fff17 	ldw	r5,-4(fp)
  813d64:	1009883a 	mov	r4,r2
  813d68:	08145840 	call	814584 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813d6c:	1000021e 	bne	r2,zero,813d78 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813d70:	e0bffd17 	ldw	r2,-12(fp)
  813d74:	00000706 	br	813d94 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  813d78:	e0bffd17 	ldw	r2,-12(fp)
  813d7c:	10800017 	ldw	r2,0(r2)
  813d80:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813d84:	e0fffd17 	ldw	r3,-12(fp)
  813d88:	d0a00604 	addi	r2,gp,-32744
  813d8c:	18bfcc1e 	bne	r3,r2,813cc0 <__alt_mem_onchip_mem+0xff793cc0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813d90:	0005883a 	mov	r2,zero
}
  813d94:	e037883a 	mov	sp,fp
  813d98:	dfc00117 	ldw	ra,4(sp)
  813d9c:	df000017 	ldw	fp,0(sp)
  813da0:	dec00204 	addi	sp,sp,8
  813da4:	f800283a 	ret

00813da8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813da8:	defffc04 	addi	sp,sp,-16
  813dac:	df000315 	stw	fp,12(sp)
  813db0:	df000304 	addi	fp,sp,12
  813db4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813db8:	00bffa04 	movi	r2,-24
  813dbc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813dc0:	e03ffd15 	stw	zero,-12(fp)
  813dc4:	00001906 	br	813e2c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  813dc8:	00802074 	movhi	r2,129
  813dcc:	1095fd04 	addi	r2,r2,22516
  813dd0:	e0fffd17 	ldw	r3,-12(fp)
  813dd4:	18c00324 	muli	r3,r3,12
  813dd8:	10c5883a 	add	r2,r2,r3
  813ddc:	10800017 	ldw	r2,0(r2)
  813de0:	10000f1e 	bne	r2,zero,813e20 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  813de4:	00802074 	movhi	r2,129
  813de8:	1095fd04 	addi	r2,r2,22516
  813dec:	e0fffd17 	ldw	r3,-12(fp)
  813df0:	18c00324 	muli	r3,r3,12
  813df4:	10c5883a 	add	r2,r2,r3
  813df8:	e0ffff17 	ldw	r3,-4(fp)
  813dfc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  813e00:	d0e00a17 	ldw	r3,-32728(gp)
  813e04:	e0bffd17 	ldw	r2,-12(fp)
  813e08:	1880020e 	bge	r3,r2,813e14 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  813e0c:	e0bffd17 	ldw	r2,-12(fp)
  813e10:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  813e14:	e0bffd17 	ldw	r2,-12(fp)
  813e18:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  813e1c:	00000606 	br	813e38 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813e20:	e0bffd17 	ldw	r2,-12(fp)
  813e24:	10800044 	addi	r2,r2,1
  813e28:	e0bffd15 	stw	r2,-12(fp)
  813e2c:	e0bffd17 	ldw	r2,-12(fp)
  813e30:	10800810 	cmplti	r2,r2,32
  813e34:	103fe41e 	bne	r2,zero,813dc8 <__alt_mem_onchip_mem+0xff793dc8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813e38:	e0bffe17 	ldw	r2,-8(fp)
}
  813e3c:	e037883a 	mov	sp,fp
  813e40:	df000017 	ldw	fp,0(sp)
  813e44:	dec00104 	addi	sp,sp,4
  813e48:	f800283a 	ret

00813e4c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  813e4c:	defffe04 	addi	sp,sp,-8
  813e50:	dfc00115 	stw	ra,4(sp)
  813e54:	df000015 	stw	fp,0(sp)
  813e58:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  813e5c:	01440004 	movi	r5,4096
  813e60:	0009883a 	mov	r4,zero
  813e64:	081440c0 	call	81440c <alt_icache_flush>
#endif
}
  813e68:	0001883a 	nop
  813e6c:	e037883a 	mov	sp,fp
  813e70:	dfc00117 	ldw	ra,4(sp)
  813e74:	df000017 	ldw	fp,0(sp)
  813e78:	dec00204 	addi	sp,sp,8
  813e7c:	f800283a 	ret

00813e80 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  813e80:	defff904 	addi	sp,sp,-28
  813e84:	dfc00615 	stw	ra,24(sp)
  813e88:	df000515 	stw	fp,20(sp)
  813e8c:	df000504 	addi	fp,sp,20
  813e90:	e13ffc15 	stw	r4,-16(fp)
  813e94:	e17ffd15 	stw	r5,-12(fp)
  813e98:	e1bffe15 	stw	r6,-8(fp)
  813e9c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  813ea0:	e0800217 	ldw	r2,8(fp)
  813ea4:	d8800015 	stw	r2,0(sp)
  813ea8:	e1ffff17 	ldw	r7,-4(fp)
  813eac:	e1bffe17 	ldw	r6,-8(fp)
  813eb0:	e17ffd17 	ldw	r5,-12(fp)
  813eb4:	e13ffc17 	ldw	r4,-16(fp)
  813eb8:	08140300 	call	814030 <alt_iic_isr_register>
}  
  813ebc:	e037883a 	mov	sp,fp
  813ec0:	dfc00117 	ldw	ra,4(sp)
  813ec4:	df000017 	ldw	fp,0(sp)
  813ec8:	dec00204 	addi	sp,sp,8
  813ecc:	f800283a 	ret

00813ed0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  813ed0:	defff904 	addi	sp,sp,-28
  813ed4:	df000615 	stw	fp,24(sp)
  813ed8:	df000604 	addi	fp,sp,24
  813edc:	e13ffe15 	stw	r4,-8(fp)
  813ee0:	e17fff15 	stw	r5,-4(fp)
  813ee4:	e0bfff17 	ldw	r2,-4(fp)
  813ee8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813eec:	0005303a 	rdctl	r2,status
  813ef0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ef4:	e0fffb17 	ldw	r3,-20(fp)
  813ef8:	00bfff84 	movi	r2,-2
  813efc:	1884703a 	and	r2,r3,r2
  813f00:	1001703a 	wrctl	status,r2
  
  return context;
  813f04:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813f08:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  813f0c:	00c00044 	movi	r3,1
  813f10:	e0bffa17 	ldw	r2,-24(fp)
  813f14:	1884983a 	sll	r2,r3,r2
  813f18:	1007883a 	mov	r3,r2
  813f1c:	d0a7a317 	ldw	r2,-24948(gp)
  813f20:	1884b03a 	or	r2,r3,r2
  813f24:	d0a7a315 	stw	r2,-24948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813f28:	d0a7a317 	ldw	r2,-24948(gp)
  813f2c:	100170fa 	wrctl	ienable,r2
  813f30:	e0bffc17 	ldw	r2,-16(fp)
  813f34:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813f38:	e0bffd17 	ldw	r2,-12(fp)
  813f3c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813f40:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  813f44:	0001883a 	nop
}
  813f48:	e037883a 	mov	sp,fp
  813f4c:	df000017 	ldw	fp,0(sp)
  813f50:	dec00104 	addi	sp,sp,4
  813f54:	f800283a 	ret

00813f58 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  813f58:	defff904 	addi	sp,sp,-28
  813f5c:	df000615 	stw	fp,24(sp)
  813f60:	df000604 	addi	fp,sp,24
  813f64:	e13ffe15 	stw	r4,-8(fp)
  813f68:	e17fff15 	stw	r5,-4(fp)
  813f6c:	e0bfff17 	ldw	r2,-4(fp)
  813f70:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813f74:	0005303a 	rdctl	r2,status
  813f78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813f7c:	e0fffb17 	ldw	r3,-20(fp)
  813f80:	00bfff84 	movi	r2,-2
  813f84:	1884703a 	and	r2,r3,r2
  813f88:	1001703a 	wrctl	status,r2
  
  return context;
  813f8c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  813f90:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  813f94:	00c00044 	movi	r3,1
  813f98:	e0bffa17 	ldw	r2,-24(fp)
  813f9c:	1884983a 	sll	r2,r3,r2
  813fa0:	0084303a 	nor	r2,zero,r2
  813fa4:	1007883a 	mov	r3,r2
  813fa8:	d0a7a317 	ldw	r2,-24948(gp)
  813fac:	1884703a 	and	r2,r3,r2
  813fb0:	d0a7a315 	stw	r2,-24948(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  813fb4:	d0a7a317 	ldw	r2,-24948(gp)
  813fb8:	100170fa 	wrctl	ienable,r2
  813fbc:	e0bffc17 	ldw	r2,-16(fp)
  813fc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813fc4:	e0bffd17 	ldw	r2,-12(fp)
  813fc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813fcc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  813fd0:	0001883a 	nop
}
  813fd4:	e037883a 	mov	sp,fp
  813fd8:	df000017 	ldw	fp,0(sp)
  813fdc:	dec00104 	addi	sp,sp,4
  813fe0:	f800283a 	ret

00813fe4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  813fe4:	defffc04 	addi	sp,sp,-16
  813fe8:	df000315 	stw	fp,12(sp)
  813fec:	df000304 	addi	fp,sp,12
  813ff0:	e13ffe15 	stw	r4,-8(fp)
  813ff4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  813ff8:	000530fa 	rdctl	r2,ienable
  813ffc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  814000:	00c00044 	movi	r3,1
  814004:	e0bfff17 	ldw	r2,-4(fp)
  814008:	1884983a 	sll	r2,r3,r2
  81400c:	1007883a 	mov	r3,r2
  814010:	e0bffd17 	ldw	r2,-12(fp)
  814014:	1884703a 	and	r2,r3,r2
  814018:	1004c03a 	cmpne	r2,r2,zero
  81401c:	10803fcc 	andi	r2,r2,255
}
  814020:	e037883a 	mov	sp,fp
  814024:	df000017 	ldw	fp,0(sp)
  814028:	dec00104 	addi	sp,sp,4
  81402c:	f800283a 	ret

00814030 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814030:	defff504 	addi	sp,sp,-44
  814034:	dfc00a15 	stw	ra,40(sp)
  814038:	df000915 	stw	fp,36(sp)
  81403c:	df000904 	addi	fp,sp,36
  814040:	e13ffc15 	stw	r4,-16(fp)
  814044:	e17ffd15 	stw	r5,-12(fp)
  814048:	e1bffe15 	stw	r6,-8(fp)
  81404c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  814050:	00bffa84 	movi	r2,-22
  814054:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814058:	e0bffd17 	ldw	r2,-12(fp)
  81405c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814060:	e0bff817 	ldw	r2,-32(fp)
  814064:	10800808 	cmpgei	r2,r2,32
  814068:	1000271e 	bne	r2,zero,814108 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81406c:	0005303a 	rdctl	r2,status
  814070:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814074:	e0fffb17 	ldw	r3,-20(fp)
  814078:	00bfff84 	movi	r2,-2
  81407c:	1884703a 	and	r2,r3,r2
  814080:	1001703a 	wrctl	status,r2
  
  return context;
  814084:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814088:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  81408c:	008020b4 	movhi	r2,130
  814090:	10a2ba04 	addi	r2,r2,-29976
  814094:	e0fff817 	ldw	r3,-32(fp)
  814098:	180690fa 	slli	r3,r3,3
  81409c:	10c5883a 	add	r2,r2,r3
  8140a0:	e0fffe17 	ldw	r3,-8(fp)
  8140a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8140a8:	008020b4 	movhi	r2,130
  8140ac:	10a2ba04 	addi	r2,r2,-29976
  8140b0:	e0fff817 	ldw	r3,-32(fp)
  8140b4:	180690fa 	slli	r3,r3,3
  8140b8:	10c5883a 	add	r2,r2,r3
  8140bc:	10800104 	addi	r2,r2,4
  8140c0:	e0ffff17 	ldw	r3,-4(fp)
  8140c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8140c8:	e0bffe17 	ldw	r2,-8(fp)
  8140cc:	10000526 	beq	r2,zero,8140e4 <alt_iic_isr_register+0xb4>
  8140d0:	e0bff817 	ldw	r2,-32(fp)
  8140d4:	100b883a 	mov	r5,r2
  8140d8:	e13ffc17 	ldw	r4,-16(fp)
  8140dc:	0813ed00 	call	813ed0 <alt_ic_irq_enable>
  8140e0:	00000406 	br	8140f4 <alt_iic_isr_register+0xc4>
  8140e4:	e0bff817 	ldw	r2,-32(fp)
  8140e8:	100b883a 	mov	r5,r2
  8140ec:	e13ffc17 	ldw	r4,-16(fp)
  8140f0:	0813f580 	call	813f58 <alt_ic_irq_disable>
  8140f4:	e0bff715 	stw	r2,-36(fp)
  8140f8:	e0bffa17 	ldw	r2,-24(fp)
  8140fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814100:	e0bff917 	ldw	r2,-28(fp)
  814104:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  814108:	e0bff717 	ldw	r2,-36(fp)
}
  81410c:	e037883a 	mov	sp,fp
  814110:	dfc00117 	ldw	ra,4(sp)
  814114:	df000017 	ldw	fp,0(sp)
  814118:	dec00204 	addi	sp,sp,8
  81411c:	f800283a 	ret

00814120 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814120:	defff904 	addi	sp,sp,-28
  814124:	dfc00615 	stw	ra,24(sp)
  814128:	df000515 	stw	fp,20(sp)
  81412c:	df000504 	addi	fp,sp,20
  814130:	e13ffc15 	stw	r4,-16(fp)
  814134:	e17ffd15 	stw	r5,-12(fp)
  814138:	e1bffe15 	stw	r6,-8(fp)
  81413c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814140:	e1bfff17 	ldw	r6,-4(fp)
  814144:	e17ffe17 	ldw	r5,-8(fp)
  814148:	e13ffd17 	ldw	r4,-12(fp)
  81414c:	0810e6c0 	call	810e6c <open>
  814150:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  814154:	e0bffb17 	ldw	r2,-20(fp)
  814158:	10001c16 	blt	r2,zero,8141cc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  81415c:	00802074 	movhi	r2,129
  814160:	1095fd04 	addi	r2,r2,22516
  814164:	e0fffb17 	ldw	r3,-20(fp)
  814168:	18c00324 	muli	r3,r3,12
  81416c:	10c5883a 	add	r2,r2,r3
  814170:	10c00017 	ldw	r3,0(r2)
  814174:	e0bffc17 	ldw	r2,-16(fp)
  814178:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  81417c:	00802074 	movhi	r2,129
  814180:	1095fd04 	addi	r2,r2,22516
  814184:	e0fffb17 	ldw	r3,-20(fp)
  814188:	18c00324 	muli	r3,r3,12
  81418c:	10c5883a 	add	r2,r2,r3
  814190:	10800104 	addi	r2,r2,4
  814194:	10c00017 	ldw	r3,0(r2)
  814198:	e0bffc17 	ldw	r2,-16(fp)
  81419c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8141a0:	00802074 	movhi	r2,129
  8141a4:	1095fd04 	addi	r2,r2,22516
  8141a8:	e0fffb17 	ldw	r3,-20(fp)
  8141ac:	18c00324 	muli	r3,r3,12
  8141b0:	10c5883a 	add	r2,r2,r3
  8141b4:	10800204 	addi	r2,r2,8
  8141b8:	10c00017 	ldw	r3,0(r2)
  8141bc:	e0bffc17 	ldw	r2,-16(fp)
  8141c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8141c4:	e13ffb17 	ldw	r4,-20(fp)
  8141c8:	08110f80 	call	8110f8 <alt_release_fd>
  }
} 
  8141cc:	0001883a 	nop
  8141d0:	e037883a 	mov	sp,fp
  8141d4:	dfc00117 	ldw	ra,4(sp)
  8141d8:	df000017 	ldw	fp,0(sp)
  8141dc:	dec00204 	addi	sp,sp,8
  8141e0:	f800283a 	ret

008141e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8141e4:	defffb04 	addi	sp,sp,-20
  8141e8:	dfc00415 	stw	ra,16(sp)
  8141ec:	df000315 	stw	fp,12(sp)
  8141f0:	df000304 	addi	fp,sp,12
  8141f4:	e13ffd15 	stw	r4,-12(fp)
  8141f8:	e17ffe15 	stw	r5,-8(fp)
  8141fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  814200:	01c07fc4 	movi	r7,511
  814204:	01800044 	movi	r6,1
  814208:	e17ffd17 	ldw	r5,-12(fp)
  81420c:	01002074 	movhi	r4,129
  814210:	21160004 	addi	r4,r4,22528
  814214:	08141200 	call	814120 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814218:	01c07fc4 	movi	r7,511
  81421c:	000d883a 	mov	r6,zero
  814220:	e17ffe17 	ldw	r5,-8(fp)
  814224:	01002074 	movhi	r4,129
  814228:	2115fd04 	addi	r4,r4,22516
  81422c:	08141200 	call	814120 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814230:	01c07fc4 	movi	r7,511
  814234:	01800044 	movi	r6,1
  814238:	e17fff17 	ldw	r5,-4(fp)
  81423c:	01002074 	movhi	r4,129
  814240:	21160304 	addi	r4,r4,22540
  814244:	08141200 	call	814120 <alt_open_fd>
}  
  814248:	0001883a 	nop
  81424c:	e037883a 	mov	sp,fp
  814250:	dfc00117 	ldw	ra,4(sp)
  814254:	df000017 	ldw	fp,0(sp)
  814258:	dec00204 	addi	sp,sp,8
  81425c:	f800283a 	ret

00814260 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  814260:	defffd04 	addi	sp,sp,-12
  814264:	dfc00215 	stw	ra,8(sp)
  814268:	df000115 	stw	fp,4(sp)
  81426c:	df000104 	addi	fp,sp,4
  814270:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  814274:	e13fff17 	ldw	r4,-4(fp)
  814278:	08142b40 	call	8142b4 <alt_busy_sleep>
}
  81427c:	e037883a 	mov	sp,fp
  814280:	dfc00117 	ldw	ra,4(sp)
  814284:	df000017 	ldw	fp,0(sp)
  814288:	dec00204 	addi	sp,sp,8
  81428c:	f800283a 	ret

00814290 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  814290:	deffff04 	addi	sp,sp,-4
  814294:	df000015 	stw	fp,0(sp)
  814298:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  81429c:	000170fa 	wrctl	ienable,zero
}
  8142a0:	0001883a 	nop
  8142a4:	e037883a 	mov	sp,fp
  8142a8:	df000017 	ldw	fp,0(sp)
  8142ac:	dec00104 	addi	sp,sp,4
  8142b0:	f800283a 	ret

008142b4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8142b4:	defffa04 	addi	sp,sp,-24
  8142b8:	dfc00515 	stw	ra,20(sp)
  8142bc:	df000415 	stw	fp,16(sp)
  8142c0:	df000404 	addi	fp,sp,16
  8142c4:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  8142c8:	008000c4 	movi	r2,3
  8142cc:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  8142d0:	e0fffd17 	ldw	r3,-12(fp)
  8142d4:	008003f4 	movhi	r2,15
  8142d8:	10909004 	addi	r2,r2,16960
  8142dc:	1885383a 	mul	r2,r3,r2
  8142e0:	100b883a 	mov	r5,r2
  8142e4:	0100bef4 	movhi	r4,763
  8142e8:	213c2004 	addi	r4,r4,-3968
  8142ec:	080df040 	call	80df04 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  8142f0:	100b883a 	mov	r5,r2
  8142f4:	01200034 	movhi	r4,32768
  8142f8:	213fffc4 	addi	r4,r4,-1
  8142fc:	080df040 	call	80df04 <__udivsi3>
  814300:	100b883a 	mov	r5,r2
  814304:	e13fff17 	ldw	r4,-4(fp)
  814308:	080df040 	call	80df04 <__udivsi3>
  81430c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  814310:	e0bffe17 	ldw	r2,-8(fp)
  814314:	10002a26 	beq	r2,zero,8143c0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  814318:	e03ffc15 	stw	zero,-16(fp)
  81431c:	00001706 	br	81437c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  814320:	00a00034 	movhi	r2,32768
  814324:	10bfffc4 	addi	r2,r2,-1
  814328:	10bfffc4 	addi	r2,r2,-1
  81432c:	103ffe1e 	bne	r2,zero,814328 <__alt_mem_onchip_mem+0xff794328>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  814330:	e0fffd17 	ldw	r3,-12(fp)
  814334:	008003f4 	movhi	r2,15
  814338:	10909004 	addi	r2,r2,16960
  81433c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  814340:	100b883a 	mov	r5,r2
  814344:	0100bef4 	movhi	r4,763
  814348:	213c2004 	addi	r4,r4,-3968
  81434c:	080df040 	call	80df04 <__udivsi3>
  814350:	100b883a 	mov	r5,r2
  814354:	01200034 	movhi	r4,32768
  814358:	213fffc4 	addi	r4,r4,-1
  81435c:	080df040 	call	80df04 <__udivsi3>
  814360:	1007883a 	mov	r3,r2
  814364:	e0bfff17 	ldw	r2,-4(fp)
  814368:	10c5c83a 	sub	r2,r2,r3
  81436c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  814370:	e0bffc17 	ldw	r2,-16(fp)
  814374:	10800044 	addi	r2,r2,1
  814378:	e0bffc15 	stw	r2,-16(fp)
  81437c:	e0fffc17 	ldw	r3,-16(fp)
  814380:	e0bffe17 	ldw	r2,-8(fp)
  814384:	18bfe616 	blt	r3,r2,814320 <__alt_mem_onchip_mem+0xff794320>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  814388:	e0fffd17 	ldw	r3,-12(fp)
  81438c:	008003f4 	movhi	r2,15
  814390:	10909004 	addi	r2,r2,16960
  814394:	1885383a 	mul	r2,r3,r2
  814398:	100b883a 	mov	r5,r2
  81439c:	0100bef4 	movhi	r4,763
  8143a0:	213c2004 	addi	r4,r4,-3968
  8143a4:	080df040 	call	80df04 <__udivsi3>
  8143a8:	1007883a 	mov	r3,r2
  8143ac:	e0bfff17 	ldw	r2,-4(fp)
  8143b0:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8143b4:	10bfffc4 	addi	r2,r2,-1
  8143b8:	103ffe1e 	bne	r2,zero,8143b4 <__alt_mem_onchip_mem+0xff7943b4>
  8143bc:	00000d06 	br	8143f4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8143c0:	e0fffd17 	ldw	r3,-12(fp)
  8143c4:	008003f4 	movhi	r2,15
  8143c8:	10909004 	addi	r2,r2,16960
  8143cc:	1885383a 	mul	r2,r3,r2
  8143d0:	100b883a 	mov	r5,r2
  8143d4:	0100bef4 	movhi	r4,763
  8143d8:	213c2004 	addi	r4,r4,-3968
  8143dc:	080df040 	call	80df04 <__udivsi3>
  8143e0:	1007883a 	mov	r3,r2
  8143e4:	e0bfff17 	ldw	r2,-4(fp)
  8143e8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8143ec:	10bfffc4 	addi	r2,r2,-1
  8143f0:	00bffe16 	blt	zero,r2,8143ec <__alt_mem_onchip_mem+0xff7943ec>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  8143f4:	0005883a 	mov	r2,zero
}
  8143f8:	e037883a 	mov	sp,fp
  8143fc:	dfc00117 	ldw	ra,4(sp)
  814400:	df000017 	ldw	fp,0(sp)
  814404:	dec00204 	addi	sp,sp,8
  814408:	f800283a 	ret

0081440c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  81440c:	defffb04 	addi	sp,sp,-20
  814410:	df000415 	stw	fp,16(sp)
  814414:	df000404 	addi	fp,sp,16
  814418:	e13ffe15 	stw	r4,-8(fp)
  81441c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  814420:	e0bfff17 	ldw	r2,-4(fp)
  814424:	10840070 	cmpltui	r2,r2,4097
  814428:	1000021e 	bne	r2,zero,814434 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81442c:	00840004 	movi	r2,4096
  814430:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  814434:	e0fffe17 	ldw	r3,-8(fp)
  814438:	e0bfff17 	ldw	r2,-4(fp)
  81443c:	1885883a 	add	r2,r3,r2
  814440:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814444:	e0bffe17 	ldw	r2,-8(fp)
  814448:	e0bffc15 	stw	r2,-16(fp)
  81444c:	00000506 	br	814464 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  814450:	e0bffc17 	ldw	r2,-16(fp)
  814454:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814458:	e0bffc17 	ldw	r2,-16(fp)
  81445c:	10800804 	addi	r2,r2,32
  814460:	e0bffc15 	stw	r2,-16(fp)
  814464:	e0fffc17 	ldw	r3,-16(fp)
  814468:	e0bffd17 	ldw	r2,-12(fp)
  81446c:	18bff836 	bltu	r3,r2,814450 <__alt_mem_onchip_mem+0xff794450>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814470:	e0bffe17 	ldw	r2,-8(fp)
  814474:	108007cc 	andi	r2,r2,31
  814478:	10000226 	beq	r2,zero,814484 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81447c:	e0bffc17 	ldw	r2,-16(fp)
  814480:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  814484:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814488:	0001883a 	nop
  81448c:	e037883a 	mov	sp,fp
  814490:	df000017 	ldw	fp,0(sp)
  814494:	dec00104 	addi	sp,sp,4
  814498:	f800283a 	ret

0081449c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81449c:	defffe04 	addi	sp,sp,-8
  8144a0:	df000115 	stw	fp,4(sp)
  8144a4:	df000104 	addi	fp,sp,4
  8144a8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8144ac:	e0bfff17 	ldw	r2,-4(fp)
  8144b0:	10bffe84 	addi	r2,r2,-6
  8144b4:	10c00428 	cmpgeui	r3,r2,16
  8144b8:	18001a1e 	bne	r3,zero,814524 <alt_exception_cause_generated_bad_addr+0x88>
  8144bc:	100690ba 	slli	r3,r2,2
  8144c0:	00802074 	movhi	r2,129
  8144c4:	10913504 	addi	r2,r2,17620
  8144c8:	1885883a 	add	r2,r3,r2
  8144cc:	10800017 	ldw	r2,0(r2)
  8144d0:	1000683a 	jmp	r2
  8144d4:	00814514 	movui	r2,1300
  8144d8:	00814514 	movui	r2,1300
  8144dc:	00814524 	muli	r2,zero,1300
  8144e0:	00814524 	muli	r2,zero,1300
  8144e4:	00814524 	muli	r2,zero,1300
  8144e8:	00814514 	movui	r2,1300
  8144ec:	0081451c 	xori	r2,zero,1300
  8144f0:	00814524 	muli	r2,zero,1300
  8144f4:	00814514 	movui	r2,1300
  8144f8:	00814514 	movui	r2,1300
  8144fc:	00814524 	muli	r2,zero,1300
  814500:	00814514 	movui	r2,1300
  814504:	0081451c 	xori	r2,zero,1300
  814508:	00814524 	muli	r2,zero,1300
  81450c:	00814524 	muli	r2,zero,1300
  814510:	00814514 	movui	r2,1300
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  814514:	00800044 	movi	r2,1
  814518:	00000306 	br	814528 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81451c:	0005883a 	mov	r2,zero
  814520:	00000106 	br	814528 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  814524:	0005883a 	mov	r2,zero
  }
}
  814528:	e037883a 	mov	sp,fp
  81452c:	df000017 	ldw	fp,0(sp)
  814530:	dec00104 	addi	sp,sp,4
  814534:	f800283a 	ret

00814538 <atexit>:
  814538:	200b883a 	mov	r5,r4
  81453c:	000f883a 	mov	r7,zero
  814540:	000d883a 	mov	r6,zero
  814544:	0009883a 	mov	r4,zero
  814548:	08146001 	jmpi	814600 <__register_exitproc>

0081454c <exit>:
  81454c:	defffe04 	addi	sp,sp,-8
  814550:	000b883a 	mov	r5,zero
  814554:	dc000015 	stw	r16,0(sp)
  814558:	dfc00115 	stw	ra,4(sp)
  81455c:	2021883a 	mov	r16,r4
  814560:	08147180 	call	814718 <__call_exitprocs>
  814564:	00802074 	movhi	r2,129
  814568:	109aee04 	addi	r2,r2,27576
  81456c:	11000017 	ldw	r4,0(r2)
  814570:	20800f17 	ldw	r2,60(r4)
  814574:	10000126 	beq	r2,zero,81457c <exit+0x30>
  814578:	103ee83a 	callr	r2
  81457c:	8009883a 	mov	r4,r16
  814580:	08148980 	call	814898 <_exit>

00814584 <memcmp>:
  814584:	01c000c4 	movi	r7,3
  814588:	3980192e 	bgeu	r7,r6,8145f0 <memcmp+0x6c>
  81458c:	2144b03a 	or	r2,r4,r5
  814590:	11c4703a 	and	r2,r2,r7
  814594:	10000f26 	beq	r2,zero,8145d4 <memcmp+0x50>
  814598:	20800003 	ldbu	r2,0(r4)
  81459c:	28c00003 	ldbu	r3,0(r5)
  8145a0:	10c0151e 	bne	r2,r3,8145f8 <memcmp+0x74>
  8145a4:	31bfff84 	addi	r6,r6,-2
  8145a8:	01ffffc4 	movi	r7,-1
  8145ac:	00000406 	br	8145c0 <memcmp+0x3c>
  8145b0:	20800003 	ldbu	r2,0(r4)
  8145b4:	28c00003 	ldbu	r3,0(r5)
  8145b8:	31bfffc4 	addi	r6,r6,-1
  8145bc:	10c00e1e 	bne	r2,r3,8145f8 <memcmp+0x74>
  8145c0:	21000044 	addi	r4,r4,1
  8145c4:	29400044 	addi	r5,r5,1
  8145c8:	31fff91e 	bne	r6,r7,8145b0 <__alt_mem_onchip_mem+0xff7945b0>
  8145cc:	0005883a 	mov	r2,zero
  8145d0:	f800283a 	ret
  8145d4:	20c00017 	ldw	r3,0(r4)
  8145d8:	28800017 	ldw	r2,0(r5)
  8145dc:	18bfee1e 	bne	r3,r2,814598 <__alt_mem_onchip_mem+0xff794598>
  8145e0:	31bfff04 	addi	r6,r6,-4
  8145e4:	21000104 	addi	r4,r4,4
  8145e8:	29400104 	addi	r5,r5,4
  8145ec:	39bff936 	bltu	r7,r6,8145d4 <__alt_mem_onchip_mem+0xff7945d4>
  8145f0:	303fe91e 	bne	r6,zero,814598 <__alt_mem_onchip_mem+0xff794598>
  8145f4:	003ff506 	br	8145cc <__alt_mem_onchip_mem+0xff7945cc>
  8145f8:	10c5c83a 	sub	r2,r2,r3
  8145fc:	f800283a 	ret

00814600 <__register_exitproc>:
  814600:	defffa04 	addi	sp,sp,-24
  814604:	dc000315 	stw	r16,12(sp)
  814608:	04002074 	movhi	r16,129
  81460c:	841aee04 	addi	r16,r16,27576
  814610:	80c00017 	ldw	r3,0(r16)
  814614:	dc400415 	stw	r17,16(sp)
  814618:	dfc00515 	stw	ra,20(sp)
  81461c:	18805217 	ldw	r2,328(r3)
  814620:	2023883a 	mov	r17,r4
  814624:	10003726 	beq	r2,zero,814704 <__register_exitproc+0x104>
  814628:	10c00117 	ldw	r3,4(r2)
  81462c:	010007c4 	movi	r4,31
  814630:	20c00e16 	blt	r4,r3,81466c <__register_exitproc+0x6c>
  814634:	1a000044 	addi	r8,r3,1
  814638:	8800221e 	bne	r17,zero,8146c4 <__register_exitproc+0xc4>
  81463c:	18c00084 	addi	r3,r3,2
  814640:	18c7883a 	add	r3,r3,r3
  814644:	18c7883a 	add	r3,r3,r3
  814648:	12000115 	stw	r8,4(r2)
  81464c:	10c7883a 	add	r3,r2,r3
  814650:	19400015 	stw	r5,0(r3)
  814654:	0005883a 	mov	r2,zero
  814658:	dfc00517 	ldw	ra,20(sp)
  81465c:	dc400417 	ldw	r17,16(sp)
  814660:	dc000317 	ldw	r16,12(sp)
  814664:	dec00604 	addi	sp,sp,24
  814668:	f800283a 	ret
  81466c:	00800034 	movhi	r2,0
  814670:	10800004 	addi	r2,r2,0
  814674:	10002626 	beq	r2,zero,814710 <__register_exitproc+0x110>
  814678:	01006404 	movi	r4,400
  81467c:	d9400015 	stw	r5,0(sp)
  814680:	d9800115 	stw	r6,4(sp)
  814684:	d9c00215 	stw	r7,8(sp)
  814688:	00000000 	call	0 <__reset-0x800000>
  81468c:	d9400017 	ldw	r5,0(sp)
  814690:	d9800117 	ldw	r6,4(sp)
  814694:	d9c00217 	ldw	r7,8(sp)
  814698:	10001d26 	beq	r2,zero,814710 <__register_exitproc+0x110>
  81469c:	81000017 	ldw	r4,0(r16)
  8146a0:	10000115 	stw	zero,4(r2)
  8146a4:	02000044 	movi	r8,1
  8146a8:	22405217 	ldw	r9,328(r4)
  8146ac:	0007883a 	mov	r3,zero
  8146b0:	12400015 	stw	r9,0(r2)
  8146b4:	20805215 	stw	r2,328(r4)
  8146b8:	10006215 	stw	zero,392(r2)
  8146bc:	10006315 	stw	zero,396(r2)
  8146c0:	883fde26 	beq	r17,zero,81463c <__alt_mem_onchip_mem+0xff79463c>
  8146c4:	18c9883a 	add	r4,r3,r3
  8146c8:	2109883a 	add	r4,r4,r4
  8146cc:	1109883a 	add	r4,r2,r4
  8146d0:	21802215 	stw	r6,136(r4)
  8146d4:	01800044 	movi	r6,1
  8146d8:	12406217 	ldw	r9,392(r2)
  8146dc:	30cc983a 	sll	r6,r6,r3
  8146e0:	4992b03a 	or	r9,r9,r6
  8146e4:	12406215 	stw	r9,392(r2)
  8146e8:	21c04215 	stw	r7,264(r4)
  8146ec:	01000084 	movi	r4,2
  8146f0:	893fd21e 	bne	r17,r4,81463c <__alt_mem_onchip_mem+0xff79463c>
  8146f4:	11006317 	ldw	r4,396(r2)
  8146f8:	218cb03a 	or	r6,r4,r6
  8146fc:	11806315 	stw	r6,396(r2)
  814700:	003fce06 	br	81463c <__alt_mem_onchip_mem+0xff79463c>
  814704:	18805304 	addi	r2,r3,332
  814708:	18805215 	stw	r2,328(r3)
  81470c:	003fc606 	br	814628 <__alt_mem_onchip_mem+0xff794628>
  814710:	00bfffc4 	movi	r2,-1
  814714:	003fd006 	br	814658 <__alt_mem_onchip_mem+0xff794658>

00814718 <__call_exitprocs>:
  814718:	defff504 	addi	sp,sp,-44
  81471c:	df000915 	stw	fp,36(sp)
  814720:	dd400615 	stw	r21,24(sp)
  814724:	dc800315 	stw	r18,12(sp)
  814728:	dfc00a15 	stw	ra,40(sp)
  81472c:	ddc00815 	stw	r23,32(sp)
  814730:	dd800715 	stw	r22,28(sp)
  814734:	dd000515 	stw	r20,20(sp)
  814738:	dcc00415 	stw	r19,16(sp)
  81473c:	dc400215 	stw	r17,8(sp)
  814740:	dc000115 	stw	r16,4(sp)
  814744:	d9000015 	stw	r4,0(sp)
  814748:	2839883a 	mov	fp,r5
  81474c:	04800044 	movi	r18,1
  814750:	057fffc4 	movi	r21,-1
  814754:	00802074 	movhi	r2,129
  814758:	109aee04 	addi	r2,r2,27576
  81475c:	12000017 	ldw	r8,0(r2)
  814760:	45005217 	ldw	r20,328(r8)
  814764:	44c05204 	addi	r19,r8,328
  814768:	a0001c26 	beq	r20,zero,8147dc <__call_exitprocs+0xc4>
  81476c:	a0800117 	ldw	r2,4(r20)
  814770:	15ffffc4 	addi	r23,r2,-1
  814774:	b8000d16 	blt	r23,zero,8147ac <__call_exitprocs+0x94>
  814778:	14000044 	addi	r16,r2,1
  81477c:	8421883a 	add	r16,r16,r16
  814780:	8421883a 	add	r16,r16,r16
  814784:	84402004 	addi	r17,r16,128
  814788:	a463883a 	add	r17,r20,r17
  81478c:	a421883a 	add	r16,r20,r16
  814790:	e0001e26 	beq	fp,zero,81480c <__call_exitprocs+0xf4>
  814794:	80804017 	ldw	r2,256(r16)
  814798:	e0801c26 	beq	fp,r2,81480c <__call_exitprocs+0xf4>
  81479c:	bdffffc4 	addi	r23,r23,-1
  8147a0:	843fff04 	addi	r16,r16,-4
  8147a4:	8c7fff04 	addi	r17,r17,-4
  8147a8:	bd7ff91e 	bne	r23,r21,814790 <__alt_mem_onchip_mem+0xff794790>
  8147ac:	00800034 	movhi	r2,0
  8147b0:	10800004 	addi	r2,r2,0
  8147b4:	10000926 	beq	r2,zero,8147dc <__call_exitprocs+0xc4>
  8147b8:	a0800117 	ldw	r2,4(r20)
  8147bc:	1000301e 	bne	r2,zero,814880 <__call_exitprocs+0x168>
  8147c0:	a0800017 	ldw	r2,0(r20)
  8147c4:	10003226 	beq	r2,zero,814890 <__call_exitprocs+0x178>
  8147c8:	a009883a 	mov	r4,r20
  8147cc:	98800015 	stw	r2,0(r19)
  8147d0:	00000000 	call	0 <__reset-0x800000>
  8147d4:	9d000017 	ldw	r20,0(r19)
  8147d8:	a03fe41e 	bne	r20,zero,81476c <__alt_mem_onchip_mem+0xff79476c>
  8147dc:	dfc00a17 	ldw	ra,40(sp)
  8147e0:	df000917 	ldw	fp,36(sp)
  8147e4:	ddc00817 	ldw	r23,32(sp)
  8147e8:	dd800717 	ldw	r22,28(sp)
  8147ec:	dd400617 	ldw	r21,24(sp)
  8147f0:	dd000517 	ldw	r20,20(sp)
  8147f4:	dcc00417 	ldw	r19,16(sp)
  8147f8:	dc800317 	ldw	r18,12(sp)
  8147fc:	dc400217 	ldw	r17,8(sp)
  814800:	dc000117 	ldw	r16,4(sp)
  814804:	dec00b04 	addi	sp,sp,44
  814808:	f800283a 	ret
  81480c:	a0800117 	ldw	r2,4(r20)
  814810:	80c00017 	ldw	r3,0(r16)
  814814:	10bfffc4 	addi	r2,r2,-1
  814818:	15c01426 	beq	r2,r23,81486c <__call_exitprocs+0x154>
  81481c:	80000015 	stw	zero,0(r16)
  814820:	183fde26 	beq	r3,zero,81479c <__alt_mem_onchip_mem+0xff79479c>
  814824:	95c8983a 	sll	r4,r18,r23
  814828:	a0806217 	ldw	r2,392(r20)
  81482c:	a5800117 	ldw	r22,4(r20)
  814830:	2084703a 	and	r2,r4,r2
  814834:	10000b26 	beq	r2,zero,814864 <__call_exitprocs+0x14c>
  814838:	a0806317 	ldw	r2,396(r20)
  81483c:	2088703a 	and	r4,r4,r2
  814840:	20000c1e 	bne	r4,zero,814874 <__call_exitprocs+0x15c>
  814844:	89400017 	ldw	r5,0(r17)
  814848:	d9000017 	ldw	r4,0(sp)
  81484c:	183ee83a 	callr	r3
  814850:	a0800117 	ldw	r2,4(r20)
  814854:	15bfbf1e 	bne	r2,r22,814754 <__alt_mem_onchip_mem+0xff794754>
  814858:	98800017 	ldw	r2,0(r19)
  81485c:	153fcf26 	beq	r2,r20,81479c <__alt_mem_onchip_mem+0xff79479c>
  814860:	003fbc06 	br	814754 <__alt_mem_onchip_mem+0xff794754>
  814864:	183ee83a 	callr	r3
  814868:	003ff906 	br	814850 <__alt_mem_onchip_mem+0xff794850>
  81486c:	a5c00115 	stw	r23,4(r20)
  814870:	003feb06 	br	814820 <__alt_mem_onchip_mem+0xff794820>
  814874:	89000017 	ldw	r4,0(r17)
  814878:	183ee83a 	callr	r3
  81487c:	003ff406 	br	814850 <__alt_mem_onchip_mem+0xff794850>
  814880:	a0800017 	ldw	r2,0(r20)
  814884:	a027883a 	mov	r19,r20
  814888:	1029883a 	mov	r20,r2
  81488c:	003fb606 	br	814768 <__alt_mem_onchip_mem+0xff794768>
  814890:	0005883a 	mov	r2,zero
  814894:	003ffb06 	br	814884 <__alt_mem_onchip_mem+0xff794884>

00814898 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814898:	defffd04 	addi	sp,sp,-12
  81489c:	df000215 	stw	fp,8(sp)
  8148a0:	df000204 	addi	fp,sp,8
  8148a4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  8148a8:	0001883a 	nop
  8148ac:	e0bfff17 	ldw	r2,-4(fp)
  8148b0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8148b4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8148b8:	10000226 	beq	r2,zero,8148c4 <_exit+0x2c>
    ALT_SIM_FAIL();
  8148bc:	002af070 	cmpltui	zero,zero,43969
  8148c0:	00000106 	br	8148c8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8148c4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8148c8:	003fff06 	br	8148c8 <__alt_mem_onchip_mem+0xff7948c8>
