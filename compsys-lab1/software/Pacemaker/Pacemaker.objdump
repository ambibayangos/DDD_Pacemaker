
Pacemaker.elf:     file format elf32-littlenios2
Pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000146b0 memsz 0x000146b0 flags r-x
    LOAD off    0x000156d0 vaddr 0x008146d0 paddr 0x008163c0 align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x000180b0 vaddr 0x008180b0 paddr 0x008180b0 align 2**12
         filesz 0x00000000 memsz 0x00000300 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013e3c  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000650  00814080  00814080  00015080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  008146d0  008163c0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000300  008180b0  008180b0  000180b0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  008183b0  008183b0  000173c0  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  000173c0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000173c0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001050  00000000  00000000  000173e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00027d72  00000000  00000000  00018438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009fd9  00000000  00000000  000401aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d9b5  00000000  00000000  0004a183  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000025ec  00000000  00000000  00057b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004580  00000000  00000000  0005a124  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000178c8  00000000  00000000  0005e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00075f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018f8  00000000  00000000  00075fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007ca76  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0007ca79  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007ca7c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007ca7d  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007ca7e  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007ca82  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0007ca86  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0007ca8a  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0007ca93  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0007ca9c  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0007caa5  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  0007cab1  2**0
                  CONTENTS, READONLY
 30 .jdi          00004152  00000000  00000000  0007cadd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006b318  00000000  00000000  00080c2f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00814080 l    d  .rodata	00000000 .rodata
008146d0 l    d  .rwdata	00000000 .rwdata
008180b0 l    d  .bss	00000000 .bss
008183b0 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 FSM.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
008146e8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0081418a l     O .rodata	00000010 zeroes.4404
00805974 l     F .text	000000bc __sbprintf
0081419a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00805b84 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008076b4 l     F .text	00000008 __fp_unlock
008076c8 l     F .text	0000019c __sinit.part.1
00807864 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00814b2c l     O .rwdata	00000020 lc_ctype_charset
00814b0c l     O .rwdata	00000020 lc_message_charset
00814b4c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
008141c8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080ac60 l     F .text	000000fc __sprint_r.part.0
008142fc l     O .rodata	00000010 blanks.4348
008142ec l     O .rodata	00000010 zeroes.4349
0080c1ec l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080fea8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080ffb4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ffe0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
008100cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
008101ac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00810298 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0081046c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008163a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
0081085c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_write.c
00810910 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00810a44 l     F .text	00000034 alt_dev_reg
00815134 l     O .rwdata	00001060 jtag_uart
00816194 l     O .rwdata	00000120 lcd
008162b4 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00810d70 l     F .text	0000020c altera_avalon_jtag_uart_irq
00810f7c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
008163b4 l     O .rwdata	00000004 colstart
008115b4 l     F .text	000000b8 lcd_write_command
0081166c l     F .text	000000d8 lcd_write_data
00811744 l     F .text	000000d0 lcd_clear_screen
00811814 l     F .text	000001ec lcd_repaint_screen
00811a00 l     F .text	000000cc lcd_scroll_up
00811acc l     F .text	000002ac lcd_handle_escape
00812250 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00812490 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00812740 l     F .text	0000009c altera_avalon_uart_irq
008127dc l     F .text	000000e4 altera_avalon_uart_rxirq
008128c0 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
00812a5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00812c74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00812fd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00813444 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00813584 l     F .text	0000003c alt_get_errno
008135c0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0081454f l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
008180b0 g     O .bss	00000001 _cg42
00818224 g     O .bss	00000004 alt_instruction_exception_handler
00803038 g     F .text	00000054 timeout_checker
008180b1 g     O .bss	00000001 g83
008180b2 g     O .bss	00000001 g40
0080a2a4 g     F .text	00000074 _mprec_log10
008180b3 g     O .bss	00000001 _cg99
008180b4 g     O .bss	00000001 g59_e2
0080a390 g     F .text	0000008c __any_on
0080c788 g     F .text	00000054 _isatty_r
008141d4 g     O .rodata	00000028 __mprec_tinytens
008180b5 g     O .bss	00000001 g91
008103a8 g     F .text	0000007c alt_main
008035ec g     F .text	000000c0 _puts_r
008182b0 g     O .bss	00000100 alt_irq
0080c7dc g     F .text	00000060 _lseek_r
008180b6 g     O .bss	00000001 g139
008180b7 g     O .bss	00000001 g4
008163c0 g       *ABS*	00000000 __flash_rwdata_start
008180b8 g     O .bss	00000001 g108
008180b9 g     O .bss	00000001 g19
008180ba g     O .bss	00000001 g152
008180bb g     O .bss	00000001 g111
0080e9d4 g     F .text	00000088 .hidden __eqdf2
008180bc g     O .bss	00000001 g160
008183b0 g       *ABS*	00000000 __alt_heap_start
008035b0 g     F .text	0000003c printf
0080c9f4 g     F .text	0000009c _wcrtomb_r
0080ab20 g     F .text	0000005c __sseek
00807a04 g     F .text	00000010 __sinit
0080c89c g     F .text	00000140 __swbuf_r
008180bd g     O .bss	00000001 g55
008180be g     O .bss	00000001 PRE_g51
008180bf g     O .bss	00000001 g27
008084cc g     F .text	0000007c _setlocale_r
0080786c g     F .text	00000068 __sfmoreglue
00810448 g     F .text	00000024 __malloc_unlock
008180c0 g     O .bss	00000001 PRE_g90
008180c1 g     O .bss	00000001 g153
008180c2 g     O .bss	00000001 g112
008180c3 g     O .bss	00000001 PRE_g128
008180c4 g     O .bss	00000001 g3
008180c5 g     O .bss	00000001 PRE_g157
008180c6 g     O .bss	00000001 AEI_ex
008180c7 g     O .bss	00000001 g34_e3
0080919c g     F .text	0000015c memmove
008180c8 g     O .bss	00000001 g146
008180c9 g     O .bss	00000001 g103
008180ca g     O .bss	00000001 PRE_g27
008180cb g     O .bss	00000001 g47
008180cc g     O .bss	00000001 g85
008180cd g     O .bss	00000001 g42
008079ec g     F .text	00000018 _cleanup
008180ce g     O .bss	00000001 PRE_g114
00809420 g     F .text	000000a8 _Balloc
008180cf g     O .bss	00000001 g9
008180d0 g     O .bss	00000001 g127
008180d4 g     O .bss	00000004 _PRE_GO
008180d8 g     O .bss	00000001 PRE_g142
008180d9 g     O .bss	00000001 PRE_g149
008180da g     O .bss	00000001 g145
008180db g     O .bss	00000001 g102
008180dc g     O .bss	00000001 g140
0080ea5c g     F .text	000000dc .hidden __gtdf2
00813808 g     F .text	00000024 altera_nios2_gen2_irq_init
008180dd g     O .bss	00000001 g156
008180de g     O .bss	00000001 g115
00800000 g     F .entry	0000001c __reset
00810898 g     F .text	00000078 times
008180df g     O .bss	00000001 PRE_g121
008180e0 g     O .bss	00000001 _cg52
008180e1 g     O .bss	00000001 PRE_g13
00800020 g       *ABS*	00000000 __flash_exceptions_start
0080c72c g     F .text	0000005c _fstat_r
00818208 g     O .bss	00000004 errno
008180e2 g     O .bss	00000001 g87
008180e3 g     O .bss	00000001 g44
0080aa9c g     F .text	00000008 __seofread
008180e4 g     O .bss	00000001 g150
008180e5 g     O .bss	00000001 _cg79
008180e6 g     O .bss	00000001 g123
008180e7 g     O .bss	00000001 _cg75
00818210 g     O .bss	00000004 alt_argv
0081e378 g       *ABS*	00000000 _gp
008137d8 g     F .text	00000030 usleep
00800290 g     F .text	000000b8 reset
008180e8 g     O .bss	00000001 g32b
008180e9 g     O .bss	00000001 _cg150
008180ea g     O .bss	00000001 g92
008180eb g     O .bss	00000001 Vpace
008180ec g     O .bss	00000001 g1
008180ed g     O .bss	00000001 g61
00814fb4 g     O .rwdata	00000180 alt_fd_list
008180ee g     O .bss	00000001 g135
008180ef g     O .bss	00000001 g71
00813984 g     F .text	00000090 alt_find_dev
00809054 g     F .text	00000148 memcpy
00803758 g     F .text	00000008 _times_r
008180f0 g     O .bss	00000001 g126
008076bc g     F .text	0000000c _cleanup_r
0080fcc0 g     F .text	000000dc .hidden __floatsidf
008180f1 g     O .bss	00000001 g82
00813508 g     F .text	0000007c alt_io_redirect
0080eb38 g     F .text	000000f4 .hidden __ltdf2
00814080 g       *ABS*	00000000 __DTOR_END__
008180f2 g     O .bss	00000001 g12
008036ac g     F .text	00000014 puts
00813c50 g     F .text	0000009c alt_exception_cause_generated_bad_addr
008180f3 g     O .bss	00000001 g97
008180f4 g     O .bss	00000001 g52
0080a980 g     F .text	00000074 __fpclassifyd
0080a200 g     F .text	000000a4 __ratio
0080c1d0 g     F .text	0000001c __vfiprintf_internal
00811174 g     F .text	0000021c altera_avalon_jtag_uart_read
008180f5 g     O .bss	00000001 _cg35
00803580 g     F .text	00000030 _printf_r
0080d784 g     F .text	00000064 .hidden __udivsi3
00810108 g     F .text	000000a4 isatty
008180f6 g     O .bss	00000001 g17
008180f7 g     O .bss	00000001 PRE_g77
00814224 g     O .rodata	000000c8 __mprec_tens
00808548 g     F .text	0000000c __locale_charset
008180f8 g     O .bss	00000001 g76
008180f9 g     O .bss	00000001 g31
00813bc0 g     F .text	00000090 alt_icache_flush
008180fa g     O .bss	00000001 g37
00818204 g     O .bss	00000004 __malloc_top_pad
00816380 g     O .rwdata	00000004 __mb_cur_max
008180fb g     O .bss	00000001 g147_e11
00808578 g     F .text	0000000c _localeconv_r
008180fc g     O .bss	00000001 _cg104
008180fd g     O .bss	00000001 g62
0080982c g     F .text	0000003c __i2b
00807e88 g     F .text	000004bc __sfvwrite_r
0080a9f4 g     F .text	00000054 _sbrk_r
008180fe g     O .bss	00000001 g84
008180ff g     O .bss	00000001 g41
00818100 g     O .bss	00000001 g150b
00818101 g     O .bss	00000001 _cg26
00818102 g     O .bss	00000001 g159
00818103 g     O .bss	00000001 g118
00818104 g     O .bss	00000001 PRE_g85
00818105 g     O .bss	00000001 start_VRP
0080c83c g     F .text	00000060 _read_r
008163a0 g     O .rwdata	00000004 alt_max_fd
00818106 g     O .bss	00000001 _cg69
00818107 g     O .bss	00000001 g126_e8
0080c420 g     F .text	000000f0 _fclose_r
00818108 g     O .bss	00000001 g8_e1
00807684 g     F .text	00000030 fflush
00818200 g     O .bss	00000004 __malloc_max_sbrked_mem
00818268 g     O .bss	00000018 timer_expired_flags
00818109 g     O .bss	00000001 g18
0080d840 g     F .text	000008ac .hidden __adddf3
0081810a g     O .bss	00000001 PRE_g53
0081810b g     O .bss	00000001 g132
00809fa8 g     F .text	0000010c __b2d
0081810c g     O .bss	00000001 PVARP_counting
0080d154 g     F .text	00000538 .hidden __umoddi3
008102d4 g     F .text	000000d4 lseek
00816378 g     O .rwdata	00000004 _global_impure_ptr
0081810d g     O .bss	00000001 g48
0080a41c g     F .text	00000564 _realloc_r
008183b0 g       *ABS*	00000000 __bss_end
00813354 g     F .text	000000f0 alt_iic_isr_register
00810754 g     F .text	00000108 alt_tick
0081810e g     O .bss	00000001 _cg58
0080cbdc g     F .text	00000578 .hidden __udivdi3
0080c688 g     F .text	00000024 _fputwc_r
008141fc g     O .rodata	00000028 __mprec_bigtens
00809610 g     F .text	00000104 __s2b
0081810f g     O .bss	00000001 _cg111
0080fd9c g     F .text	000000a8 .hidden __floatunsidf
00818110 g     O .bss	00000001 g38
00818111 g     O .bss	00000001 g148
00818112 g     O .bss	00000001 g105
00818113 g     O .bss	00000001 g80_e4
00809ce8 g     F .text	00000060 __mcmp
00812694 g     F .text	000000ac altera_avalon_uart_init
00818114 g     O .bss	00000001 URI_counting
00818115 g     O .bss	00000001 PRE_g116
00807a24 g     F .text	00000018 __fp_lock_all
00813308 g     F .text	0000004c alt_ic_irq_enabled
00818116 g     O .bss	00000001 PRE_g87
00818117 g     O .bss	00000001 g159_e2
008106b8 g     F .text	0000009c alt_alarm_stop
00818118 g     O .bss	00000001 PRE_g144
00818220 g     O .bss	00000004 alt_irq_active
00818119 g     O .bss	00000001 g72_e3
0081811a g     O .bss	00000001 g158
0081811b g     O .bss	00000001 g117
0081811c g     O .bss	00000001 _cg20
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00814f8c g     O .rwdata	00000028 alt_dev_null
0081811d g     O .bss	00000001 PRE_g123
0081811e g     O .bss	00000001 LRI_counting
0081811f g     O .bss	00000001 g119_e7
00818120 g     O .bss	00000001 g112_e6
00818121 g     O .bss	00000001 _cg43
00818122 g     O .bss	00000001 start_AVI
00818123 g     O .bss	00000001 stop_AVI
00812f88 g     F .text	00000048 alt_dcache_flush_all
00809714 g     F .text	00000068 __hi0bits
0080fc40 g     F .text	00000080 .hidden __fixdfsi
00818124 g     O .bss	00000001 g64
00818125 g     O .bss	00000001 g21
00818126 g     O .bss	00000001 _cg14
00818127 g     O .bss	00000001 g79
00818128 g     O .bss	00000001 g34
008163c0 g       *ABS*	00000000 __ram_rwdata_end
00818129 g     O .bss	00000001 g5
00816398 g     O .rwdata	00000008 alt_dev_list
0081812a g     O .bss	00000001 g94
0081812b g     O .bss	00000001 g151
0081812c g     O .bss	00000001 g110
0081812d g     O .bss	00000001 g49
0081094c g     F .text	000000f8 write
0081812e g     O .bss	00000001 g2
0081812f g     O .bss	00000001 g7
00818130 g     O .bss	00000001 _cg16
008146d0 g       *ABS*	00000000 __ram_rodata_end
00818131 g     O .bss	00000001 PRE_g101
0081001c g     F .text	000000b0 fstat
0080eb38 g     F .text	000000f4 .hidden __ledf2
00818132 g     O .bss	00000001 LRI_ex
00818133 g     O .bss	00000001 g80
00809a60 g     F .text	00000140 __pow5mult
0080ad74 g     F .text	0000145c ___vfiprintf_internal_r
008181f8 g     O .bss	00000004 __nlocale_changed
0080d7e8 g     F .text	00000058 .hidden __umodsi3
00818134 g     O .bss	00000001 g128
00818135 g     O .bss	00000001 _cg124
00818136 g     O .bss	00000001 g136
008183b0 g       *ABS*	00000000 end
00818137 g     O .bss	00000001 stop_AEI
00818138 g     O .bss	00000001 g143
00818139 g     O .bss	00000001 g100
00811d78 g     F .text	000004d8 altera_avalon_lcd_16207_write
0081813a g     O .bss	00000001 Vsense
0081813b g     O .bss	00000001 g136b
0081813c g     O .bss	00000001 g59
0081813d g     O .bss	00000001 g99
0081813e g     O .bss	00000001 g54
00812cb0 g     F .text	000001ac altera_avalon_uart_write
0081813f g     O .bss	00000001 g66
00818140 g     O .bss	00000001 g23
00810cb0 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00818141 g     O .bss	00000001 _cg83
00814080 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00812508 g     F .text	0000007c alt_avalon_timer_sc_init
008125e4 g     F .text	00000060 altera_avalon_uart_write_fd
0080fe44 g     F .text	00000064 .hidden __clzsi2
00812644 g     F .text	00000050 altera_avalon_uart_close_fd
00811390 g     F .text	00000224 altera_avalon_jtag_uart_write
00807a14 g     F .text	00000004 __sfp_lock_acquire
00808f70 g     F .text	000000e4 memchr
00818142 g     O .bss	00000001 g14
00803760 g     F .text	000021f8 ___vfprintf_internal_r
00807b78 g     F .text	00000310 _free_r
00818143 g     O .bss	00000001 AEI_counting
00808554 g     F .text	00000010 __locale_mb_cur_max
00818144 g     O .bss	00000001 _cg6
00813ecc g     F .text	00000180 __call_exitprocs
00818145 g     O .bss	00000001 Apace
00818146 g     O .bss	00000001 AVI_ex
00818147 g     O .bss	00000001 g144
00818148 g     O .bss	00000001 g101
00818149 g     O .bss	00000001 VRP_ex
008181f4 g     O .bss	00000004 __mlocale_changed
00816384 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
0081814a g     O .bss	00000001 _cg145
0081814b g     O .bss	00000001 g155
0081814c g     O .bss	00000001 g114
00818218 g     O .bss	00000004 _alt_tick_rate
0081814d g     O .bss	00000001 g56
0081814e g     O .bss	00000001 g129
0081814f g     O .bss	00000001 g131
00809ba0 g     F .text	00000148 __lshift
00818150 g     O .bss	00000001 g155_e1
0081821c g     O .bss	00000004 _alt_nticks
00818151 g     O .bss	00000001 _cg152
008104a8 g     F .text	000000fc read
00810ab0 g     F .text	0000009c alt_sys_init
00818152 g     O .bss	00000001 g78
00818153 g     O .bss	00000001 g33
00813db4 g     F .text	00000118 __register_exitproc
00818154 g     O .bss	00000001 g122
00818155 g     O .bss	00000001 PRE_g151
008146d0 g     O .rwdata	00000018 timer_timeout_values
00818156 g     O .bss	00000001 URI_ex
00809868 g     F .text	000001f8 __multiply
0081101c g     F .text	00000068 altera_avalon_jtag_uart_close
008146d0 g       *ABS*	00000000 __ram_rwdata_start
00814080 g       *ABS*	00000000 __ram_rodata_start
00818240 g     O .bss	00000028 __malloc_current_mallinfo
0080a0b4 g     F .text	0000014c __d2b
00818157 g     O .bss	00000001 _cg29
00818158 g     O .bss	00000001 _DDD_pacemaker_local__term2
00818159 g     O .bss	00000001 VRP_counting
0081815a g     O .bss	00000001 PRE_g106
0081815b g     O .bss	00000001 stop_URI
0081815c g     O .bss	00000001 g134
0081815d g     O .bss	00000001 _cg136
00810b4c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0081815e g     O .bss	00000001 g35
00813b1c g     F .text	000000a4 alt_get_fd
0081815f g     O .bss	00000001 g122b
00818160 g     O .bss	00000001 _cg71
0081382c g     F .text	00000158 alt_busy_sleep
00818161 g     O .bss	00000001 g15
0080c308 g     F .text	00000054 _close_r
00818162 g     O .bss	00000001 g90
00818163 g     O .bss	00000001 _GO
00813d38 g     F .text	0000007c memcmp
00810c0c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
008183b0 g       *ABS*	00000000 __alt_stack_base
00810c5c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00818164 g     O .bss	00000001 start_PVARP
00805a30 g     F .text	00000154 __swsetup_r
00800348 g     F .text	00002cf0 tick
0080e0ec g     F .text	000008e8 .hidden __divdf3
008078d4 g     F .text	00000118 __sfp
00818165 g     O .bss	00000001 g63
00818166 g     O .bss	00000001 g20
0080a318 g     F .text	00000078 __copybits
00818167 g     O .bss	00000001 g60
00814b84 g     O .rwdata	00000408 __malloc_av_
00807a20 g     F .text	00000004 __sinit_lock_release
0080ec2c g     F .text	00000718 .hidden __muldf3
00818168 g     O .bss	00000001 PRE_g19
0080aa48 g     F .text	00000054 __sread
00813a14 g     F .text	00000108 alt_find_file
00818169 g     O .bss	00000001 g93
0081300c g     F .text	000000a4 alt_dev_llist_insert
00810424 g     F .text	00000024 __malloc_lock
00810608 g     F .text	000000b0 sbrk
0081816a g     O .bss	00000001 _cg22
0081816b g     O .bss	00000001 g119
0081816c g     O .bss	00000001 g46_e1
00807628 g     F .text	0000005c _fflush_r
0080c35c g     F .text	000000c4 _calloc_r
0081816d g     O .bss	00000001 _DDD_pacemaker_local__trig2
008180b0 g       *ABS*	00000000 __bss_start
0081816e g     O .bss	00000001 g86
0081816f g     O .bss	00000001 g43
008092f8 g     F .text	00000128 memset
008030f0 g     F .text	00000444 main
00818170 g     O .bss	00000001 _cg65
00818214 g     O .bss	00000004 alt_envp
008181fc g     O .bss	00000004 __malloc_max_total_mem
00818171 g     O .bss	00000001 _cg11
00810bac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080c9dc g     F .text	00000018 __swbuf
00818172 g     O .bss	00000001 g36
008122fc g     F .text	00000134 altera_avalon_lcd_16207_init
00818173 g     O .bss	00000001 g89
00818174 g     O .bss	00000001 g46
0080ab7c g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080c510 g     F .text	00000014 fclose
00805d84 g     F .text	00001688 _dtoa_r
00808764 g     F .text	0000080c _malloc_r
0080cb50 g     F .text	00000030 __ascii_wctomb
00818175 g     O .bss	00000001 start_AEI
008163a4 g     O .rwdata	00000004 alt_errno
00808344 g     F .text	000000c4 _fwalk
00818176 g     O .bss	00000001 PRE_g137
00818177 g     O .bss	00000001 g95
00818178 g     O .bss	00000001 g50
00818179 g     O .bss	00000001 _cg131
0081817a g     O .bss	00000001 g96
0081817b g     O .bss	00000001 g51
0080d68c g     F .text	00000084 .hidden __divsi3
00807a54 g     F .text	00000124 _malloc_trim_r
0081817c g     O .bss	00000001 start_LRI
00814080 g       *ABS*	00000000 __CTOR_END__
0081817d g     O .bss	00000001 g138
0080ab84 g     F .text	000000dc strcmp
0081817e g     O .bss	00000001 _cg115
0081817f g     O .bss	00000001 _cg70
00818180 g     O .bss	00000001 _cg37
00818181 g     O .bss	00000001 g107
00818182 g     O .bss	00000001 PRE_g74
00818183 g     O .bss	00000001 PRE_g31
00814080 g       *ABS*	00000000 __flash_rodata_start
00818184 g     O .bss	00000001 g154
00818185 g     O .bss	00000001 g113
00814080 g       *ABS*	00000000 __DTOR_LIST__
00818186 g     O .bss	00000001 _cg117
00818187 g     O .bss	00000001 _cg78
00818188 g     O .bss	00000001 PRE_g48
0080308c g     F .text	00000064 delay
0080e9d4 g     F .text	00000088 .hidden __nedf2
00818189 g     O .bss	00000001 PRE_g61
00810a78 g     F .text	00000038 alt_irq_init
0081818a g     O .bss	00000001 g96_e5
008105a4 g     F .text	00000064 alt_release_fd
0081818b g     O .bss	00000001 g147
0081818c g     O .bss	00000001 g104
0081818d g     O .bss	00000001 PRE_g130
0081818e g     O .bss	00000001 g13
0081430c g     O .rodata	00000100 .hidden __clz_tab
008181f0 g     O .bss	00000004 _PathLocale
0081818f g     O .bss	00000001 PRE_g41
00818190 g     O .bss	00000001 g98
00818191 g     O .bss	00000001 g53
00818192 g     O .bss	00000001 g8
00818193 g     O .bss	00000001 g57
00813cec g     F .text	00000014 atexit
0080c2a8 g     F .text	00000060 _write_r
00818194 g     O .bss	00000001 start_URI
00818195 g     O .bss	00000001 g70
00818196 g     O .bss	00000001 _cg86
00808584 g     F .text	00000018 setlocale
00818197 g     O .bss	00000001 g91b
00818198 g     O .bss	00000001 g141
00818199 g     O .bss	00000001 g157
0081819a g     O .bss	00000001 g116
0081637c g     O .rwdata	00000004 _impure_ptr
0081820c g     O .bss	00000004 alt_argc
0081819b g     O .bss	00000001 g6
0080740c g     F .text	0000021c __sflush_r
0081819c g     O .bss	00000001 _cg56
00813110 g     F .text	00000060 _do_dtors
0081819d g     O .bss	00000001 _cg122
00808570 g     F .text	00000008 __locale_cjk_lang
0081819e g     O .bss	00000001 g72
0081819f g     O .bss	00000001 g81
008181a0 g     O .bss	00000001 PVARP_ex
00800020 g       .exceptions	00000000 alt_irq_entry
00809f44 g     F .text	00000064 __ulp
00807a3c g     F .text	00000018 __fp_unlock_all
00818280 g     O .bss	00000018 timer_state_flags
008181a1 g     O .bss	00000001 g124
00812430 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
008181a2 g     O .bss	00000001 _cg9
00816390 g     O .rwdata	00000008 alt_fs_list
008181a3 g     O .bss	00000001 g137
008181a4 g     O .bss	00000001 Asense
008181a5 g     O .bss	00000001 _cg129
008181a6 g     O .bss	00000001 g0
008181a7 g     O .bss	00000001 _cg54
008181a8 g     O .bss	00000001 g75
008181a9 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
0080859c g     F .text	0000000c localeconv
008181aa g     O .bss	00000001 stop_PVARP
008181ab g     O .bss	00000001 PRE_g66
008181ac g     O .bss	00000001 g16
008181ad g     O .bss	00000001 g140_e10
008181ae g     O .bss	00000001 _cg24
008131a4 g     F .text	00000050 alt_ic_isr_register
008181af g     O .bss	00000001 g58
008181b0 g     O .bss	00000001 _cg94
008181b1 g     O .bss	00000001 g68
008181b2 g     O .bss	00000001 g25
008163c0 g       *ABS*	00000000 _edata
00812584 g     F .text	00000060 altera_avalon_uart_read_fd
008181b3 g     O .bss	00000001 g142
008183b0 g       *ABS*	00000000 _end
008181b4 g     O .bss	00000001 g11
0080c524 g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00811084 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
008181b5 g     O .bss	00000001 g65
008181b6 g     O .bss	00000001 g22
008181b7 g     O .bss	00000001 _DDD_pacemaker_local__trig
008181b8 g     O .bss	00000001 _DDD_pacemaker_local__term
008181b9 g     O .bss	00000001 g28
008181ba g     O .bss	00000001 PRE_g98
008181bb g     O .bss	00000001 _cg138
008181bc g     O .bss	00000001 g73
008181bd g     O .bss	00000001 g133_e9
0081327c g     F .text	0000008c alt_ic_irq_disable
008181be g     O .bss	00000001 stop_VRP
008181bf g     O .bss	00000001 g115b
0080aaa4 g     F .text	0000007c __swrite
00816388 g     O .rwdata	00000004 __malloc_trim_threshold
00808564 g     F .text	0000000c __locale_msgcharset
008181c0 g     O .bss	00000001 g154_e12
00813d00 g     F .text	00000038 exit
008181c1 g     O .bss	00000001 g125
00808408 g     F .text	000000c4 _fwalk_reent
00809d48 g     F .text	000001fc __mdiff
008181c2 g     O .bss	00000001 g77
008181c3 g     O .bss	00000001 g32
0080d710 g     F .text	00000074 .hidden __modsi3
008163bc g     O .rwdata	00000004 __ctype_ptr__
008181c4 g     O .bss	00000001 g88
008181c5 g     O .bss	00000001 g45
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00807a18 g     F .text	00000004 __sfp_lock_release
00800000 g       *ABS*	00000000 __alt_mem_sdram
008181c6 g     O .bss	00000001 PRE_g82
008181c7 g     O .bss	00000001 _cg103
008181c8 g     O .bss	00000001 _cg92
008181c9 g     O .bss	00000001 _cg18
008181ca g     O .bss	00000001 g130
0081444e g     O .rodata	00000101 _ctype_
008181cb g     O .bss	00000001 g129b
008181cc g     O .bss	00000001 PRE_g64
008181cd g     O .bss	00000001 PRE_g5
008181ce g     O .bss	00000001 stop_LRI
008181cf g     O .bss	00000001 g49b
00812a08 g     F .text	00000054 altera_avalon_uart_close
0081404c g     F .text	00000034 _exit
00812e5c g     F .text	0000012c alt_alarm_start
008181d0 g     O .bss	00000001 g121
008181d1 g     O .bss	00000001 g143b
008181d2 g     O .bss	00000001 _cg109
008085a8 g     F .text	000001bc __smakebuf_r
008036c0 g     F .text	00000098 strlen
00818298 g     O .bss	00000018 timer_start_flags
008181d3 g     O .bss	00000001 g39
00813684 g     F .text	00000154 open
0080ea5c g     F .text	000000dc .hidden __gedf2
008181d4 g     O .bss	00000001 _cg88
008181d5 g     O .bss	00000001 _cg49
00803534 g     F .text	0000004c clock
008181d6 g     O .bss	00000001 g120
008181d7 g     O .bss	00000001 PRE_g108
0081638c g     O .rwdata	00000004 __wctomb
0080ad5c g     F .text	00000018 __sprint_r
00813170 g     F .text	00000034 alt_icache_flush_all
008181d8 g     O .bss	00000001 g29
008181d9 g     O .bss	00000001 g67
008181da g     O .bss	00000001 g24
008181db g     O .bss	00000001 g133
008163b8 g     O .rwdata	00000004 alt_priority_mask
008181dc g     O .bss	00000001 g109
008181dd g     O .bss	00000001 _cg143
008181de g     O .bss	00000001 _cg32
00818228 g     O .bss	00000018 timer_fist_timeStamp_Value
008131f4 g     F .text	00000088 alt_ic_irq_enable
00805958 g     F .text	0000001c __vfprintf_internal
00812a98 g     F .text	000001dc altera_avalon_uart_read
0080cb80 g     F .text	0000005c _wctomb_r
008181df g     O .bss	00000001 AVI_counting
0080f344 g     F .text	000008fc .hidden __subdf3
008181e0 g     O .bss	00000001 _cg67
008181e1 g     O .bss	00000001 g12_e2
008181e2 g     O .bss	00000001 g149
008181e3 g     O .bss	00000001 g106
0080977c g     F .text	000000b0 __lo0bits
008181e4 g     O .bss	00000001 PRE_g135
008181e5 g     O .bss	00000001 g10
008163ac g     O .rwdata	00000008 alt_alarm_list
008181e6 g     O .bss	00000001 _cg62
008130b0 g     F .text	00000060 _do_ctors
0080ca90 g     F .text	000000c0 wcrtomb
008181e7 g     O .bss	00000001 _cg102
008181e8 g     O .bss	00000001 g69
008181e9 g     O .bss	00000001 g26
0080fee4 g     F .text	000000d0 close
00810214 g     F .text	00000084 alt_load
008181ea g     O .bss	00000001 _cg39
0080c6ac g     F .text	00000080 fputwc
00807a1c g     F .text	00000004 __sinit_lock_acquire
008094f0 g     F .text	00000120 __multadd
008094c8 g     F .text	00000028 _Bfree
008181eb g     O .bss	00000001 _DDD_pacemaker_local__trig3
008181ec g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10a0ac04 	addi	r2,r2,-32080
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10a0ac04 	addi	r2,r2,-32080
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a7ab17 	ldw	r2,-24916(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a7ab17 	ldw	r2,-24916(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b8de14 	ori	gp,gp,58232
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10a02c14 	ori	r2,r2,32944

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18e0ec14 	ori	r3,r3,33712

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	08102140 	call	810214 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08103a80 	call	8103a8 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <reset>:
char g147_e11;
char g154_e12;
char g155_e1;
char g159_e2;
int _PRE_GO;
void reset(){
  800290:	deffff04 	addi	sp,sp,-4
  800294:	df000015 	stw	fp,0(sp)
  800298:	d839883a 	mov	fp,sp
   _GO = 1;
  80029c:	00800044 	movi	r2,1
  8002a0:	d0a77ac5 	stb	r2,-25109(gp)
   _PRE_GO = 0;
  8002a4:	d0275715 	stw	zero,-25252(gp)
   PRE_g5 = 0;
  8002a8:	d0279545 	stb	zero,-25003(gp)
   PRE_g13 = 0;
  8002ac:	d0275a45 	stb	zero,-25239(gp)
   PRE_g19 = 0;
  8002b0:	d0277c05 	stb	zero,-25104(gp)
   PRE_g27 = 0;
  8002b4:	d0275485 	stb	zero,-25262(gp)
   PRE_g31 = 0;
  8002b8:	d02782c5 	stb	zero,-25077(gp)
   PRE_g41 = 0;
  8002bc:	d02785c5 	stb	zero,-25065(gp)
   PRE_g48 = 0;
  8002c0:	d0278405 	stb	zero,-25072(gp)
   PRE_g51 = 0;
  8002c4:	d0275185 	stb	zero,-25274(gp)
   PRE_g53 = 0;
  8002c8:	d0276485 	stb	zero,-25198(gp)
   PRE_g61 = 0;
  8002cc:	d0278445 	stb	zero,-25071(gp)
   PRE_g64 = 0;
  8002d0:	d0279505 	stb	zero,-25004(gp)
   PRE_g66 = 0;
  8002d4:	d0278cc5 	stb	zero,-25037(gp)
   PRE_g74 = 0;
  8002d8:	d0278285 	stb	zero,-25078(gp)
   PRE_g77 = 0;
  8002dc:	d0275fc5 	stb	zero,-25217(gp)
   PRE_g82 = 0;
  8002e0:	d0279385 	stb	zero,-25010(gp)
   PRE_g85 = 0;
  8002e4:	d0276305 	stb	zero,-25204(gp)
   PRE_g87 = 0;
  8002e8:	d0276785 	stb	zero,-25186(gp)
   PRE_g90 = 0;
  8002ec:	d0275205 	stb	zero,-25272(gp)
   PRE_g98 = 0;
  8002f0:	d0279085 	stb	zero,-25022(gp)
   PRE_g101 = 0;
  8002f4:	d0276e45 	stb	zero,-25159(gp)
   PRE_g106 = 0;
  8002f8:	d0277885 	stb	zero,-25118(gp)
   PRE_g108 = 0;
  8002fc:	d02797c5 	stb	zero,-24993(gp)
   PRE_g114 = 0;
  800300:	d0275585 	stb	zero,-25258(gp)
   PRE_g116 = 0;
  800304:	d0276745 	stb	zero,-25187(gp)
   PRE_g121 = 0;
  800308:	d02759c5 	stb	zero,-25241(gp)
   PRE_g123 = 0;
  80030c:	d0276945 	stb	zero,-25179(gp)
   PRE_g128 = 0;
  800310:	d02752c5 	stb	zero,-25269(gp)
   PRE_g130 = 0;
  800314:	d0278545 	stb	zero,-25067(gp)
   PRE_g135 = 0;
  800318:	d0279b05 	stb	zero,-24980(gp)
   PRE_g137 = 0;
  80031c:	d0277f85 	stb	zero,-25090(gp)
   PRE_g142 = 0;
  800320:	d0275805 	stb	zero,-25248(gp)
   PRE_g144 = 0;
  800324:	d0276805 	stb	zero,-25184(gp)
   PRE_g149 = 0;
  800328:	d0275845 	stb	zero,-25247(gp)
   PRE_g151 = 0;
  80032c:	d0277745 	stb	zero,-25123(gp)
   PRE_g157 = 0;
  800330:	d0275345 	stb	zero,-25267(gp)
   return;
  800334:	0001883a 	nop
}
  800338:	e037883a 	mov	sp,fp
  80033c:	df000017 	ldw	fp,0(sp)
  800340:	dec00104 	addi	sp,sp,4
  800344:	f800283a 	ret

00800348 <tick>:
void tick(){
  800348:	deffff04 	addi	sp,sp,-4
  80034c:	df000015 	stw	fp,0(sp)
  800350:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  800354:	d0a75717 	ldw	r2,-25252(gp)
  800358:	10800058 	cmpnei	r2,r2,1
  80035c:	1000011e 	bne	r2,zero,800364 <tick+0x1c>
      _GO = 0;
  800360:	d0277ac5 	stb	zero,-25109(gp)
   }
   {
      g0 = _GO;
  800364:	d0a77ac3 	ldbu	r2,-25109(gp)
  800368:	d0a78b85 	stb	r2,-25042(gp)
      g1 = g0;
  80036c:	d0a78b83 	ldbu	r2,-25042(gp)
  800370:	d0a75d05 	stb	r2,-25228(gp)
      g2 = g1;
  800374:	d0a75d03 	ldbu	r2,-25228(gp)
  800378:	d0a76d85 	stb	r2,-25162(gp)
      g42 =(PRE_g41);
  80037c:	d0a785c3 	ldbu	r2,-25065(gp)
  800380:	d0a75545 	stb	r2,-25259(gp)
      _cg42 = PVARP_ex;
  800384:	d0a78a03 	ldbu	r2,-25048(gp)
  800388:	d0a74e05 	stb	r2,-25288(gp)
      g3 =((g42&&_cg42)||g2);
  80038c:	d0a75543 	ldbu	r2,-25259(gp)
  800390:	10803fcc 	andi	r2,r2,255
  800394:	1080201c 	xori	r2,r2,128
  800398:	10bfe004 	addi	r2,r2,-128
  80039c:	10000526 	beq	r2,zero,8003b4 <tick+0x6c>
  8003a0:	d0a74e03 	ldbu	r2,-25288(gp)
  8003a4:	10803fcc 	andi	r2,r2,255
  8003a8:	1080201c 	xori	r2,r2,128
  8003ac:	10bfe004 	addi	r2,r2,-128
  8003b0:	1000051e 	bne	r2,zero,8003c8 <tick+0x80>
  8003b4:	d0a76d83 	ldbu	r2,-25162(gp)
  8003b8:	10803fcc 	andi	r2,r2,255
  8003bc:	1080201c 	xori	r2,r2,128
  8003c0:	10bfe004 	addi	r2,r2,-128
  8003c4:	10000226 	beq	r2,zero,8003d0 <tick+0x88>
  8003c8:	00800044 	movi	r2,1
  8003cc:	00000106 	br	8003d4 <tick+0x8c>
  8003d0:	0005883a 	mov	r2,zero
  8003d4:	d0a75305 	stb	r2,-25268(gp)
      if(g3){
  8003d8:	d0a75303 	ldbu	r2,-25268(gp)
  8003dc:	10803fcc 	andi	r2,r2,255
  8003e0:	1080201c 	xori	r2,r2,128
  8003e4:	10bfe004 	addi	r2,r2,-128
  8003e8:	10000526 	beq	r2,zero,800400 <tick+0xb8>
         _DDD_pacemaker_local__term = 0;
  8003ec:	d0279005 	stb	zero,-25024(gp)
         _DDD_pacemaker_local__term2 = 0;
  8003f0:	d0277805 	stb	zero,-25120(gp)
         _DDD_pacemaker_local__trig = 0;
  8003f4:	d0278fc5 	stb	zero,-25025(gp)
         _DDD_pacemaker_local__trig2 = 0;
  8003f8:	d0277d45 	stb	zero,-25099(gp)
         _DDD_pacemaker_local__trig3 = 0;
  8003fc:	d0279cc5 	stb	zero,-24973(gp)
      }
      g4 = g3;
  800400:	d0a75303 	ldbu	r2,-25268(gp)
  800404:	d0a74fc5 	stb	r2,-25281(gp)
      g6 =(PRE_g5);
  800408:	d0a79543 	ldbu	r2,-25003(gp)
  80040c:	d0a788c5 	stb	r2,-25053(gp)
      _cg6 = URI_ex;
  800410:	d0a77783 	ldbu	r2,-25122(gp)
  800414:	d0a77305 	stb	r2,-25140(gp)
      g7 =(g6&&_cg6);
  800418:	d0a788c3 	ldbu	r2,-25053(gp)
  80041c:	10803fcc 	andi	r2,r2,255
  800420:	1080201c 	xori	r2,r2,128
  800424:	10bfe004 	addi	r2,r2,-128
  800428:	10000726 	beq	r2,zero,800448 <tick+0x100>
  80042c:	d0a77303 	ldbu	r2,-25140(gp)
  800430:	10803fcc 	andi	r2,r2,255
  800434:	1080201c 	xori	r2,r2,128
  800438:	10bfe004 	addi	r2,r2,-128
  80043c:	10000226 	beq	r2,zero,800448 <tick+0x100>
  800440:	00800044 	movi	r2,1
  800444:	00000106 	br	80044c <tick+0x104>
  800448:	0005883a 	mov	r2,zero
  80044c:	d0a76dc5 	stb	r2,-25161(gp)
      if(g7){
  800450:	d0a76dc3 	ldbu	r2,-25161(gp)
  800454:	10803fcc 	andi	r2,r2,255
  800458:	1080201c 	xori	r2,r2,128
  80045c:	10bfe004 	addi	r2,r2,-128
  800460:	10000226 	beq	r2,zero,80046c <tick+0x124>
         _DDD_pacemaker_local__term = 1;
  800464:	00800044 	movi	r2,1
  800468:	d0a79005 	stb	r2,-25024(gp)
      }
      g28 =(PRE_g27);
  80046c:	d0a75483 	ldbu	r2,-25262(gp)
  800470:	d0a79045 	stb	r2,-25023(gp)
      g156 = g0;
  800474:	d0a78b83 	ldbu	r2,-25042(gp)
  800478:	d0a75945 	stb	r2,-25243(gp)
      g158 =(PRE_g157);
  80047c:	d0a75343 	ldbu	r2,-25267(gp)
  800480:	d0a76885 	stb	r2,-25182(gp)
      g157 =(g156||g158);
  800484:	d0a75943 	ldbu	r2,-25243(gp)
  800488:	10803fcc 	andi	r2,r2,255
  80048c:	1080201c 	xori	r2,r2,128
  800490:	10bfe004 	addi	r2,r2,-128
  800494:	1000051e 	bne	r2,zero,8004ac <tick+0x164>
  800498:	d0a76883 	ldbu	r2,-25182(gp)
  80049c:	10803fcc 	andi	r2,r2,255
  8004a0:	1080201c 	xori	r2,r2,128
  8004a4:	10bfe004 	addi	r2,r2,-128
  8004a8:	10000226 	beq	r2,zero,8004b4 <tick+0x16c>
  8004ac:	00800044 	movi	r2,1
  8004b0:	00000106 	br	8004b8 <tick+0x170>
  8004b4:	0005883a 	mov	r2,zero
  8004b8:	d0a78845 	stb	r2,-25055(gp)
      if(g157){
  8004bc:	d0a78843 	ldbu	r2,-25055(gp)
  8004c0:	10803fcc 	andi	r2,r2,255
  8004c4:	1080201c 	xori	r2,r2,128
  8004c8:	10bfe004 	addi	r2,r2,-128
  8004cc:	10001426 	beq	r2,zero,800520 <tick+0x1d8>
         stop_URI = 0;
  8004d0:	d02778c5 	stb	zero,-25117(gp)
         stop_VRP = 0;
  8004d4:	d0279185 	stb	zero,-25018(gp)
         stop_PVARP = 0;
  8004d8:	d0278c85 	stb	zero,-25038(gp)
         stop_AVI = 0;
  8004dc:	d0276ac5 	stb	zero,-25173(gp)
         start_AVI = 0;
  8004e0:	d0276a85 	stb	zero,-25174(gp)
         stop_LRI = 0;
  8004e4:	d0279585 	stb	zero,-25002(gp)
         stop_AEI = 0;
  8004e8:	d0276fc5 	stb	zero,-25153(gp)
         Vpace = 0;
  8004ec:	d0275cc5 	stb	zero,-25229(gp)
         start_PVARP = 0;
  8004f0:	d0277b05 	stb	zero,-25108(gp)
         start_AEI = 0;
  8004f4:	d0277f45 	stb	zero,-25091(gp)
         Apace = 0;
  8004f8:	d0277345 	stb	zero,-25139(gp)
         start_VRP = 0;
  8004fc:	d0276345 	stb	zero,-25203(gp)
         start_LRI = 0;
  800500:	d0278105 	stb	zero,-25084(gp)
         start_URI = 0;
  800504:	d0278705 	stb	zero,-25060(gp)
         AVI_counting = 0;
  800508:	d02799c5 	stb	zero,-24985(gp)
         PVARP_counting = 0;
  80050c:	d0276505 	stb	zero,-25196(gp)
         VRP_counting = 0;
  800510:	d0277845 	stb	zero,-25119(gp)
         AEI_counting = 0;
  800514:	d02772c5 	stb	zero,-25141(gp)
         LRI_counting = 0;
  800518:	d0276985 	stb	zero,-25178(gp)
         URI_counting = 0;
  80051c:	d0276705 	stb	zero,-25188(gp)
      }
      g14 =(PRE_g13);
  800520:	d0a75a43 	ldbu	r2,-25239(gp)
  800524:	d0a77285 	stb	r2,-25142(gp)
      _cg14 = Asense;
  800528:	d0a78b03 	ldbu	r2,-25044(gp)
  80052c:	d0a76b85 	stb	r2,-25170(gp)
      g54 =(PRE_g53);
  800530:	d0a76483 	ldbu	r2,-25198(gp)
  800534:	d0a77185 	stb	r2,-25146(gp)
      _cg54 = Asense;
  800538:	d0a78b03 	ldbu	r2,-25044(gp)
  80053c:	d0a78bc5 	stb	r2,-25041(gp)
      g56 =(g54&&(!(_cg54)));
  800540:	d0a77183 	ldbu	r2,-25146(gp)
  800544:	10803fcc 	andi	r2,r2,255
  800548:	1080201c 	xori	r2,r2,128
  80054c:	10bfe004 	addi	r2,r2,-128
  800550:	10000726 	beq	r2,zero,800570 <tick+0x228>
  800554:	d0a78bc3 	ldbu	r2,-25041(gp)
  800558:	10803fcc 	andi	r2,r2,255
  80055c:	1080201c 	xori	r2,r2,128
  800560:	10bfe004 	addi	r2,r2,-128
  800564:	1000021e 	bne	r2,zero,800570 <tick+0x228>
  800568:	00800044 	movi	r2,1
  80056c:	00000106 	br	800574 <tick+0x22c>
  800570:	0005883a 	mov	r2,zero
  800574:	d0a77545 	stb	r2,-25131(gp)
      _cg56 = AEI_ex;
  800578:	d0a75383 	ldbu	r2,-25266(gp)
  80057c:	d0a78905 	stb	r2,-25052(gp)
      g57 =(g56&&_cg56);
  800580:	d0a77543 	ldbu	r2,-25131(gp)
  800584:	10803fcc 	andi	r2,r2,255
  800588:	1080201c 	xori	r2,r2,128
  80058c:	10bfe004 	addi	r2,r2,-128
  800590:	10000726 	beq	r2,zero,8005b0 <tick+0x268>
  800594:	d0a78903 	ldbu	r2,-25052(gp)
  800598:	10803fcc 	andi	r2,r2,255
  80059c:	1080201c 	xori	r2,r2,128
  8005a0:	10bfe004 	addi	r2,r2,-128
  8005a4:	10000226 	beq	r2,zero,8005b0 <tick+0x268>
  8005a8:	00800044 	movi	r2,1
  8005ac:	00000106 	br	8005b4 <tick+0x26c>
  8005b0:	0005883a 	mov	r2,zero
  8005b4:	d0a786c5 	stb	r2,-25061(gp)
      if(g57){
  8005b8:	d0a786c3 	ldbu	r2,-25061(gp)
  8005bc:	10803fcc 	andi	r2,r2,255
  8005c0:	1080201c 	xori	r2,r2,128
  8005c4:	10bfe004 	addi	r2,r2,-128
  8005c8:	10000226 	beq	r2,zero,8005d4 <tick+0x28c>
         Apace =(Apace||1);
  8005cc:	00800044 	movi	r2,1
  8005d0:	d0a77345 	stb	r2,-25139(gp)
      }
      g29 =(g14&&(!(_cg14)));
  8005d4:	d0a77283 	ldbu	r2,-25142(gp)
  8005d8:	10803fcc 	andi	r2,r2,255
  8005dc:	1080201c 	xori	r2,r2,128
  8005e0:	10bfe004 	addi	r2,r2,-128
  8005e4:	10000726 	beq	r2,zero,800604 <tick+0x2bc>
  8005e8:	d0a76b83 	ldbu	r2,-25170(gp)
  8005ec:	10803fcc 	andi	r2,r2,255
  8005f0:	1080201c 	xori	r2,r2,128
  8005f4:	10bfe004 	addi	r2,r2,-128
  8005f8:	1000021e 	bne	r2,zero,800604 <tick+0x2bc>
  8005fc:	00800044 	movi	r2,1
  800600:	00000106 	br	800608 <tick+0x2c0>
  800604:	0005883a 	mov	r2,zero
  800608:	d0a79805 	stb	r2,-24992(gp)
      _cg29 = Apace;
  80060c:	d0a77343 	ldbu	r2,-25139(gp)
  800610:	d0a777c5 	stb	r2,-25121(gp)
      g15 =((g14&&_cg14)||(g29&&_cg29));
  800614:	d0a77283 	ldbu	r2,-25142(gp)
  800618:	10803fcc 	andi	r2,r2,255
  80061c:	1080201c 	xori	r2,r2,128
  800620:	10bfe004 	addi	r2,r2,-128
  800624:	10000526 	beq	r2,zero,80063c <tick+0x2f4>
  800628:	d0a76b83 	ldbu	r2,-25170(gp)
  80062c:	10803fcc 	andi	r2,r2,255
  800630:	1080201c 	xori	r2,r2,128
  800634:	10bfe004 	addi	r2,r2,-128
  800638:	10000a1e 	bne	r2,zero,800664 <tick+0x31c>
  80063c:	d0a79803 	ldbu	r2,-24992(gp)
  800640:	10803fcc 	andi	r2,r2,255
  800644:	1080201c 	xori	r2,r2,128
  800648:	10bfe004 	addi	r2,r2,-128
  80064c:	10000726 	beq	r2,zero,80066c <tick+0x324>
  800650:	d0a777c3 	ldbu	r2,-25121(gp)
  800654:	10803fcc 	andi	r2,r2,255
  800658:	1080201c 	xori	r2,r2,128
  80065c:	10bfe004 	addi	r2,r2,-128
  800660:	10000226 	beq	r2,zero,80066c <tick+0x324>
  800664:	00800044 	movi	r2,1
  800668:	00000106 	br	800670 <tick+0x328>
  80066c:	0005883a 	mov	r2,zero
  800670:	d0a77a45 	stb	r2,-25111(gp)
      if(g15){
  800674:	d0a77a43 	ldbu	r2,-25111(gp)
  800678:	10803fcc 	andi	r2,r2,255
  80067c:	1080201c 	xori	r2,r2,128
  800680:	10bfe004 	addi	r2,r2,-128
  800684:	10000226 	beq	r2,zero,800690 <tick+0x348>
         start_AVI =(start_AVI||1);
  800688:	00800044 	movi	r2,1
  80068c:	d0a76a85 	stb	r2,-25174(gp)
      }
      g16 =(g28||g15);
  800690:	d0a79043 	ldbu	r2,-25023(gp)
  800694:	10803fcc 	andi	r2,r2,255
  800698:	1080201c 	xori	r2,r2,128
  80069c:	10bfe004 	addi	r2,r2,-128
  8006a0:	1000051e 	bne	r2,zero,8006b8 <tick+0x370>
  8006a4:	d0a77a43 	ldbu	r2,-25111(gp)
  8006a8:	10803fcc 	andi	r2,r2,255
  8006ac:	1080201c 	xori	r2,r2,128
  8006b0:	10bfe004 	addi	r2,r2,-128
  8006b4:	10000226 	beq	r2,zero,8006c0 <tick+0x378>
  8006b8:	00800044 	movi	r2,1
  8006bc:	00000106 	br	8006c4 <tick+0x37c>
  8006c0:	0005883a 	mov	r2,zero
  8006c4:	d0a78d05 	stb	r2,-25036(gp)
      _cg16 = AVI_ex;
  8006c8:	d0a77383 	ldbu	r2,-25138(gp)
  8006cc:	d0a76e05 	stb	r2,-25160(gp)
      g17 =(g16&&_cg16);
  8006d0:	d0a78d03 	ldbu	r2,-25036(gp)
  8006d4:	10803fcc 	andi	r2,r2,255
  8006d8:	1080201c 	xori	r2,r2,128
  8006dc:	10bfe004 	addi	r2,r2,-128
  8006e0:	10000726 	beq	r2,zero,800700 <tick+0x3b8>
  8006e4:	d0a76e03 	ldbu	r2,-25160(gp)
  8006e8:	10803fcc 	andi	r2,r2,255
  8006ec:	1080201c 	xori	r2,r2,128
  8006f0:	10bfe004 	addi	r2,r2,-128
  8006f4:	10000226 	beq	r2,zero,800700 <tick+0x3b8>
  8006f8:	00800044 	movi	r2,1
  8006fc:	00000106 	br	800704 <tick+0x3bc>
  800700:	0005883a 	mov	r2,zero
  800704:	d0a75f85 	stb	r2,-25218(gp)
      if(g17){
  800708:	d0a75f83 	ldbu	r2,-25218(gp)
  80070c:	10803fcc 	andi	r2,r2,255
  800710:	1080201c 	xori	r2,r2,128
  800714:	10bfe004 	addi	r2,r2,-128
  800718:	10000226 	beq	r2,zero,800724 <tick+0x3dc>
         _DDD_pacemaker_local__term2 = 1;
  80071c:	00800044 	movi	r2,1
  800720:	d0a77805 	stb	r2,-25120(gp)
      }
      g22 =(g16&&(!(_cg16)));
  800724:	d0a78d03 	ldbu	r2,-25036(gp)
  800728:	10803fcc 	andi	r2,r2,255
  80072c:	1080201c 	xori	r2,r2,128
  800730:	10bfe004 	addi	r2,r2,-128
  800734:	10000726 	beq	r2,zero,800754 <tick+0x40c>
  800738:	d0a76e03 	ldbu	r2,-25160(gp)
  80073c:	10803fcc 	andi	r2,r2,255
  800740:	1080201c 	xori	r2,r2,128
  800744:	10bfe004 	addi	r2,r2,-128
  800748:	1000021e 	bne	r2,zero,800754 <tick+0x40c>
  80074c:	00800044 	movi	r2,1
  800750:	00000106 	br	800758 <tick+0x410>
  800754:	0005883a 	mov	r2,zero
  800758:	d0a78f85 	stb	r2,-25026(gp)
      _cg22 = Vsense;
  80075c:	d0a77083 	ldbu	r2,-25150(gp)
  800760:	d0a77c85 	stb	r2,-25102(gp)
      g23 =(g22&&_cg22);
  800764:	d0a78f83 	ldbu	r2,-25026(gp)
  800768:	10803fcc 	andi	r2,r2,255
  80076c:	1080201c 	xori	r2,r2,128
  800770:	10bfe004 	addi	r2,r2,-128
  800774:	10000726 	beq	r2,zero,800794 <tick+0x44c>
  800778:	d0a77c83 	ldbu	r2,-25102(gp)
  80077c:	10803fcc 	andi	r2,r2,255
  800780:	1080201c 	xori	r2,r2,128
  800784:	10bfe004 	addi	r2,r2,-128
  800788:	10000226 	beq	r2,zero,800794 <tick+0x44c>
  80078c:	00800044 	movi	r2,1
  800790:	00000106 	br	800798 <tick+0x450>
  800794:	0005883a 	mov	r2,zero
  800798:	d0a77205 	stb	r2,-25144(gp)
      if(g23){
  80079c:	d0a77203 	ldbu	r2,-25144(gp)
  8007a0:	10803fcc 	andi	r2,r2,255
  8007a4:	1080201c 	xori	r2,r2,128
  8007a8:	10bfe004 	addi	r2,r2,-128
  8007ac:	10000426 	beq	r2,zero,8007c0 <tick+0x478>
         stop_AVI =(stop_AVI||1);
  8007b0:	00800044 	movi	r2,1
  8007b4:	d0a76ac5 	stb	r2,-25173(gp)
         _DDD_pacemaker_local__term2 = 1;
  8007b8:	00800044 	movi	r2,1
  8007bc:	d0a77805 	stb	r2,-25120(gp)
      }
      g88 =(PRE_g87);
  8007c0:	d0a76783 	ldbu	r2,-25186(gp)
  8007c4:	d0a79305 	stb	r2,-25012(gp)
      _cg88 = LRI_ex;
  8007c8:	d0a76e83 	ldbu	r2,-25158(gp)
  8007cc:	d0a79705 	stb	r2,-24996(gp)
      g89 =(g88&&_cg88);
  8007d0:	d0a79303 	ldbu	r2,-25012(gp)
  8007d4:	10803fcc 	andi	r2,r2,255
  8007d8:	1080201c 	xori	r2,r2,128
  8007dc:	10bfe004 	addi	r2,r2,-128
  8007e0:	10000726 	beq	r2,zero,800800 <tick+0x4b8>
  8007e4:	d0a79703 	ldbu	r2,-24996(gp)
  8007e8:	10803fcc 	andi	r2,r2,255
  8007ec:	1080201c 	xori	r2,r2,128
  8007f0:	10bfe004 	addi	r2,r2,-128
  8007f4:	10000226 	beq	r2,zero,800800 <tick+0x4b8>
  8007f8:	00800044 	movi	r2,1
  8007fc:	00000106 	br	800804 <tick+0x4bc>
  800800:	0005883a 	mov	r2,zero
  800804:	d0a77ec5 	stb	r2,-25093(gp)
      if(g89){
  800808:	d0a77ec3 	ldbu	r2,-25093(gp)
  80080c:	10803fcc 	andi	r2,r2,255
  800810:	1080201c 	xori	r2,r2,128
  800814:	10bfe004 	addi	r2,r2,-128
  800818:	10000226 	beq	r2,zero,800824 <tick+0x4dc>
         Vpace =(Vpace||1);
  80081c:	00800044 	movi	r2,1
  800820:	d0a75cc5 	stb	r2,-25229(gp)
      }
      g24 =(g22&&(!(_cg22)));
  800824:	d0a78f83 	ldbu	r2,-25026(gp)
  800828:	10803fcc 	andi	r2,r2,255
  80082c:	1080201c 	xori	r2,r2,128
  800830:	10bfe004 	addi	r2,r2,-128
  800834:	10000726 	beq	r2,zero,800854 <tick+0x50c>
  800838:	d0a77c83 	ldbu	r2,-25102(gp)
  80083c:	10803fcc 	andi	r2,r2,255
  800840:	1080201c 	xori	r2,r2,128
  800844:	10bfe004 	addi	r2,r2,-128
  800848:	1000021e 	bne	r2,zero,800854 <tick+0x50c>
  80084c:	00800044 	movi	r2,1
  800850:	00000106 	br	800858 <tick+0x510>
  800854:	0005883a 	mov	r2,zero
  800858:	d0a79885 	stb	r2,-24990(gp)
      _cg24 = Vpace;
  80085c:	d0a75cc3 	ldbu	r2,-25229(gp)
  800860:	d0a78d85 	stb	r2,-25034(gp)
      g25 =(g24&&_cg24);
  800864:	d0a79883 	ldbu	r2,-24990(gp)
  800868:	10803fcc 	andi	r2,r2,255
  80086c:	1080201c 	xori	r2,r2,128
  800870:	10bfe004 	addi	r2,r2,-128
  800874:	10000726 	beq	r2,zero,800894 <tick+0x54c>
  800878:	d0a78d83 	ldbu	r2,-25034(gp)
  80087c:	10803fcc 	andi	r2,r2,255
  800880:	1080201c 	xori	r2,r2,128
  800884:	10bfe004 	addi	r2,r2,-128
  800888:	10000226 	beq	r2,zero,800894 <tick+0x54c>
  80088c:	00800044 	movi	r2,1
  800890:	00000106 	br	800898 <tick+0x550>
  800894:	0005883a 	mov	r2,zero
  800898:	d0a78e85 	stb	r2,-25030(gp)
      if(g25){
  80089c:	d0a78e83 	ldbu	r2,-25030(gp)
  8008a0:	10803fcc 	andi	r2,r2,255
  8008a4:	1080201c 	xori	r2,r2,128
  8008a8:	10bfe004 	addi	r2,r2,-128
  8008ac:	10000426 	beq	r2,zero,8008c0 <tick+0x578>
         stop_AVI =(stop_AVI||1);
  8008b0:	00800044 	movi	r2,1
  8008b4:	d0a76ac5 	stb	r2,-25173(gp)
         _DDD_pacemaker_local__term2 = 1;
  8008b8:	00800044 	movi	r2,1
  8008bc:	d0a77805 	stb	r2,-25120(gp)
      }
      g20 =(PRE_g19);
  8008c0:	d0a77c03 	ldbu	r2,-25104(gp)
  8008c4:	d0a77b85 	stb	r2,-25106(gp)
      _cg20 = PVARP_ex;
  8008c8:	d0a78a03 	ldbu	r2,-25048(gp)
  8008cc:	d0a76905 	stb	r2,-25180(gp)
      g21 =(g20&&_cg20);
  8008d0:	d0a77b83 	ldbu	r2,-25106(gp)
  8008d4:	10803fcc 	andi	r2,r2,255
  8008d8:	1080201c 	xori	r2,r2,128
  8008dc:	10bfe004 	addi	r2,r2,-128
  8008e0:	10000726 	beq	r2,zero,800900 <tick+0x5b8>
  8008e4:	d0a76903 	ldbu	r2,-25180(gp)
  8008e8:	10803fcc 	andi	r2,r2,255
  8008ec:	1080201c 	xori	r2,r2,128
  8008f0:	10bfe004 	addi	r2,r2,-128
  8008f4:	10000226 	beq	r2,zero,800900 <tick+0x5b8>
  8008f8:	00800044 	movi	r2,1
  8008fc:	00000106 	br	800904 <tick+0x5bc>
  800900:	0005883a 	mov	r2,zero
  800904:	d0a76b45 	stb	r2,-25171(gp)
      if(g21){
  800908:	d0a76b43 	ldbu	r2,-25171(gp)
  80090c:	10803fcc 	andi	r2,r2,255
  800910:	1080201c 	xori	r2,r2,128
  800914:	10bfe004 	addi	r2,r2,-128
  800918:	10000126 	beq	r2,zero,800920 <tick+0x5d8>
         _DDD_pacemaker_local__term2 = 0;
  80091c:	d0277805 	stb	zero,-25120(gp)
      }
      g32 =(PRE_g31);
  800920:	d0a782c3 	ldbu	r2,-25077(gp)
  800924:	d0a792c5 	stb	r2,-25013(gp)
      g32b = g32;
  800928:	d0a792c3 	ldbu	r2,-25013(gp)
  80092c:	d0a75c05 	stb	r2,-25232(gp)
      _cg32 =((AVI_ex&&_DDD_pacemaker_local__term)&&_DDD_pacemaker_local__term2);
  800930:	d0a77383 	ldbu	r2,-25138(gp)
  800934:	10803fcc 	andi	r2,r2,255
  800938:	1080201c 	xori	r2,r2,128
  80093c:	10bfe004 	addi	r2,r2,-128
  800940:	10000c26 	beq	r2,zero,800974 <tick+0x62c>
  800944:	d0a79003 	ldbu	r2,-25024(gp)
  800948:	10803fcc 	andi	r2,r2,255
  80094c:	1080201c 	xori	r2,r2,128
  800950:	10bfe004 	addi	r2,r2,-128
  800954:	10000726 	beq	r2,zero,800974 <tick+0x62c>
  800958:	d0a77803 	ldbu	r2,-25120(gp)
  80095c:	10803fcc 	andi	r2,r2,255
  800960:	1080201c 	xori	r2,r2,128
  800964:	10bfe004 	addi	r2,r2,-128
  800968:	10000226 	beq	r2,zero,800974 <tick+0x62c>
  80096c:	00800044 	movi	r2,1
  800970:	00000106 	br	800978 <tick+0x630>
  800974:	0005883a 	mov	r2,zero
  800978:	d0a79985 	stb	r2,-24986(gp)
      g33 =(g32b&&_cg32);
  80097c:	d0a75c03 	ldbu	r2,-25232(gp)
  800980:	10803fcc 	andi	r2,r2,255
  800984:	1080201c 	xori	r2,r2,128
  800988:	10bfe004 	addi	r2,r2,-128
  80098c:	10000726 	beq	r2,zero,8009ac <tick+0x664>
  800990:	d0a79983 	ldbu	r2,-24986(gp)
  800994:	10803fcc 	andi	r2,r2,255
  800998:	1080201c 	xori	r2,r2,128
  80099c:	10bfe004 	addi	r2,r2,-128
  8009a0:	10000226 	beq	r2,zero,8009ac <tick+0x664>
  8009a4:	00800044 	movi	r2,1
  8009a8:	00000106 	br	8009b0 <tick+0x668>
  8009ac:	0005883a 	mov	r2,zero
  8009b0:	d0a776c5 	stb	r2,-25125(gp)
      if(g33){
  8009b4:	d0a776c3 	ldbu	r2,-25125(gp)
  8009b8:	10803fcc 	andi	r2,r2,255
  8009bc:	1080201c 	xori	r2,r2,128
  8009c0:	10bfe004 	addi	r2,r2,-128
  8009c4:	10000226 	beq	r2,zero,8009d0 <tick+0x688>
         _DDD_pacemaker_local__trig = 1;
  8009c8:	00800044 	movi	r2,1
  8009cc:	d0a78fc5 	stb	r2,-25025(gp)
      }
      g35 =(g32b&&(!(_cg32)));
  8009d0:	d0a75c03 	ldbu	r2,-25232(gp)
  8009d4:	10803fcc 	andi	r2,r2,255
  8009d8:	1080201c 	xori	r2,r2,128
  8009dc:	10bfe004 	addi	r2,r2,-128
  8009e0:	10000726 	beq	r2,zero,800a00 <tick+0x6b8>
  8009e4:	d0a79983 	ldbu	r2,-24986(gp)
  8009e8:	10803fcc 	andi	r2,r2,255
  8009ec:	1080201c 	xori	r2,r2,128
  8009f0:	10bfe004 	addi	r2,r2,-128
  8009f4:	1000021e 	bne	r2,zero,800a00 <tick+0x6b8>
  8009f8:	00800044 	movi	r2,1
  8009fc:	00000106 	br	800a04 <tick+0x6bc>
  800a00:	0005883a 	mov	r2,zero
  800a04:	d0a77985 	stb	r2,-25114(gp)
      _cg35 =((Vsense&&_DDD_pacemaker_local__term)&&_DDD_pacemaker_local__term2);
  800a08:	d0a77083 	ldbu	r2,-25150(gp)
  800a0c:	10803fcc 	andi	r2,r2,255
  800a10:	1080201c 	xori	r2,r2,128
  800a14:	10bfe004 	addi	r2,r2,-128
  800a18:	10000c26 	beq	r2,zero,800a4c <tick+0x704>
  800a1c:	d0a79003 	ldbu	r2,-25024(gp)
  800a20:	10803fcc 	andi	r2,r2,255
  800a24:	1080201c 	xori	r2,r2,128
  800a28:	10bfe004 	addi	r2,r2,-128
  800a2c:	10000726 	beq	r2,zero,800a4c <tick+0x704>
  800a30:	d0a77803 	ldbu	r2,-25120(gp)
  800a34:	10803fcc 	andi	r2,r2,255
  800a38:	1080201c 	xori	r2,r2,128
  800a3c:	10bfe004 	addi	r2,r2,-128
  800a40:	10000226 	beq	r2,zero,800a4c <tick+0x704>
  800a44:	00800044 	movi	r2,1
  800a48:	00000106 	br	800a50 <tick+0x708>
  800a4c:	0005883a 	mov	r2,zero
  800a50:	d0a75f45 	stb	r2,-25219(gp)
      g36 =(g35&&_cg35);
  800a54:	d0a77983 	ldbu	r2,-25114(gp)
  800a58:	10803fcc 	andi	r2,r2,255
  800a5c:	1080201c 	xori	r2,r2,128
  800a60:	10bfe004 	addi	r2,r2,-128
  800a64:	10000726 	beq	r2,zero,800a84 <tick+0x73c>
  800a68:	d0a75f43 	ldbu	r2,-25219(gp)
  800a6c:	10803fcc 	andi	r2,r2,255
  800a70:	1080201c 	xori	r2,r2,128
  800a74:	10bfe004 	addi	r2,r2,-128
  800a78:	10000226 	beq	r2,zero,800a84 <tick+0x73c>
  800a7c:	00800044 	movi	r2,1
  800a80:	00000106 	br	800a88 <tick+0x740>
  800a84:	0005883a 	mov	r2,zero
  800a88:	d0a77e85 	stb	r2,-25094(gp)
      if(g36){
  800a8c:	d0a77e83 	ldbu	r2,-25094(gp)
  800a90:	10803fcc 	andi	r2,r2,255
  800a94:	1080201c 	xori	r2,r2,128
  800a98:	10bfe004 	addi	r2,r2,-128
  800a9c:	10000226 	beq	r2,zero,800aa8 <tick+0x760>
         _DDD_pacemaker_local__trig2 = 1;
  800aa0:	00800044 	movi	r2,1
  800aa4:	d0a77d45 	stb	r2,-25099(gp)
      }
      g37 =(g35&&(!(_cg35)));
  800aa8:	d0a77983 	ldbu	r2,-25114(gp)
  800aac:	10803fcc 	andi	r2,r2,255
  800ab0:	1080201c 	xori	r2,r2,128
  800ab4:	10bfe004 	addi	r2,r2,-128
  800ab8:	10000726 	beq	r2,zero,800ad8 <tick+0x790>
  800abc:	d0a75f43 	ldbu	r2,-25219(gp)
  800ac0:	10803fcc 	andi	r2,r2,255
  800ac4:	1080201c 	xori	r2,r2,128
  800ac8:	10bfe004 	addi	r2,r2,-128
  800acc:	1000021e 	bne	r2,zero,800ad8 <tick+0x790>
  800ad0:	00800044 	movi	r2,1
  800ad4:	00000106 	br	800adc <tick+0x794>
  800ad8:	0005883a 	mov	r2,zero
  800adc:	d0a76085 	stb	r2,-25214(gp)
      _cg37 =(_DDD_pacemaker_local__term&&_DDD_pacemaker_local__term2);
  800ae0:	d0a79003 	ldbu	r2,-25024(gp)
  800ae4:	10803fcc 	andi	r2,r2,255
  800ae8:	1080201c 	xori	r2,r2,128
  800aec:	10bfe004 	addi	r2,r2,-128
  800af0:	10000726 	beq	r2,zero,800b10 <tick+0x7c8>
  800af4:	d0a77803 	ldbu	r2,-25120(gp)
  800af8:	10803fcc 	andi	r2,r2,255
  800afc:	1080201c 	xori	r2,r2,128
  800b00:	10bfe004 	addi	r2,r2,-128
  800b04:	10000226 	beq	r2,zero,800b10 <tick+0x7c8>
  800b08:	00800044 	movi	r2,1
  800b0c:	00000106 	br	800b14 <tick+0x7cc>
  800b10:	0005883a 	mov	r2,zero
  800b14:	d0a78205 	stb	r2,-25080(gp)
      g38 =(g37&&_cg37);
  800b18:	d0a76083 	ldbu	r2,-25214(gp)
  800b1c:	10803fcc 	andi	r2,r2,255
  800b20:	1080201c 	xori	r2,r2,128
  800b24:	10bfe004 	addi	r2,r2,-128
  800b28:	10000726 	beq	r2,zero,800b48 <tick+0x800>
  800b2c:	d0a78203 	ldbu	r2,-25080(gp)
  800b30:	10803fcc 	andi	r2,r2,255
  800b34:	1080201c 	xori	r2,r2,128
  800b38:	10bfe004 	addi	r2,r2,-128
  800b3c:	10000226 	beq	r2,zero,800b48 <tick+0x800>
  800b40:	00800044 	movi	r2,1
  800b44:	00000106 	br	800b4c <tick+0x804>
  800b48:	0005883a 	mov	r2,zero
  800b4c:	d0a76605 	stb	r2,-25192(gp)
      if(g38){
  800b50:	d0a76603 	ldbu	r2,-25192(gp)
  800b54:	10803fcc 	andi	r2,r2,255
  800b58:	1080201c 	xori	r2,r2,128
  800b5c:	10bfe004 	addi	r2,r2,-128
  800b60:	10000226 	beq	r2,zero,800b6c <tick+0x824>
         _DDD_pacemaker_local__trig3 = 1;
  800b64:	00800044 	movi	r2,1
  800b68:	d0a79cc5 	stb	r2,-24973(gp)
      }
      g9 =(g6&&(!(_cg6)));
  800b6c:	d0a788c3 	ldbu	r2,-25053(gp)
  800b70:	10803fcc 	andi	r2,r2,255
  800b74:	1080201c 	xori	r2,r2,128
  800b78:	10bfe004 	addi	r2,r2,-128
  800b7c:	10000726 	beq	r2,zero,800b9c <tick+0x854>
  800b80:	d0a77303 	ldbu	r2,-25140(gp)
  800b84:	10803fcc 	andi	r2,r2,255
  800b88:	1080201c 	xori	r2,r2,128
  800b8c:	10bfe004 	addi	r2,r2,-128
  800b90:	1000021e 	bne	r2,zero,800b9c <tick+0x854>
  800b94:	00800044 	movi	r2,1
  800b98:	00000106 	br	800ba0 <tick+0x858>
  800b9c:	0005883a 	mov	r2,zero
  800ba0:	d0a755c5 	stb	r2,-25257(gp)
      _cg9 =((_DDD_pacemaker_local__trig||_DDD_pacemaker_local__trig2)||_DDD_pacemaker_local__trig3);
  800ba4:	d0a78fc3 	ldbu	r2,-25025(gp)
  800ba8:	10803fcc 	andi	r2,r2,255
  800bac:	1080201c 	xori	r2,r2,128
  800bb0:	10bfe004 	addi	r2,r2,-128
  800bb4:	10000a1e 	bne	r2,zero,800be0 <tick+0x898>
  800bb8:	d0a77d43 	ldbu	r2,-25099(gp)
  800bbc:	10803fcc 	andi	r2,r2,255
  800bc0:	1080201c 	xori	r2,r2,128
  800bc4:	10bfe004 	addi	r2,r2,-128
  800bc8:	1000051e 	bne	r2,zero,800be0 <tick+0x898>
  800bcc:	d0a79cc3 	ldbu	r2,-24973(gp)
  800bd0:	10803fcc 	andi	r2,r2,255
  800bd4:	1080201c 	xori	r2,r2,128
  800bd8:	10bfe004 	addi	r2,r2,-128
  800bdc:	10000226 	beq	r2,zero,800be8 <tick+0x8a0>
  800be0:	00800044 	movi	r2,1
  800be4:	00000106 	br	800bec <tick+0x8a4>
  800be8:	0005883a 	mov	r2,zero
  800bec:	d0a78a85 	stb	r2,-25046(gp)
      g5 =((g9&&(!(_cg9)))||g4);
  800bf0:	d0a755c3 	ldbu	r2,-25257(gp)
  800bf4:	10803fcc 	andi	r2,r2,255
  800bf8:	1080201c 	xori	r2,r2,128
  800bfc:	10bfe004 	addi	r2,r2,-128
  800c00:	10000526 	beq	r2,zero,800c18 <tick+0x8d0>
  800c04:	d0a78a83 	ldbu	r2,-25046(gp)
  800c08:	10803fcc 	andi	r2,r2,255
  800c0c:	1080201c 	xori	r2,r2,128
  800c10:	10bfe004 	addi	r2,r2,-128
  800c14:	10000526 	beq	r2,zero,800c2c <tick+0x8e4>
  800c18:	d0a74fc3 	ldbu	r2,-25281(gp)
  800c1c:	10803fcc 	andi	r2,r2,255
  800c20:	1080201c 	xori	r2,r2,128
  800c24:	10bfe004 	addi	r2,r2,-128
  800c28:	10000226 	beq	r2,zero,800c34 <tick+0x8ec>
  800c2c:	00800044 	movi	r2,1
  800c30:	00000106 	br	800c38 <tick+0x8f0>
  800c34:	0005883a 	mov	r2,zero
  800c38:	d0a76c45 	stb	r2,-25167(gp)
      g8 =(g7||(g9&&_cg9));
  800c3c:	d0a76dc3 	ldbu	r2,-25161(gp)
  800c40:	10803fcc 	andi	r2,r2,255
  800c44:	1080201c 	xori	r2,r2,128
  800c48:	10bfe004 	addi	r2,r2,-128
  800c4c:	10000a1e 	bne	r2,zero,800c78 <tick+0x930>
  800c50:	d0a755c3 	ldbu	r2,-25257(gp)
  800c54:	10803fcc 	andi	r2,r2,255
  800c58:	1080201c 	xori	r2,r2,128
  800c5c:	10bfe004 	addi	r2,r2,-128
  800c60:	10000726 	beq	r2,zero,800c80 <tick+0x938>
  800c64:	d0a78a83 	ldbu	r2,-25046(gp)
  800c68:	10803fcc 	andi	r2,r2,255
  800c6c:	1080201c 	xori	r2,r2,128
  800c70:	10bfe004 	addi	r2,r2,-128
  800c74:	10000226 	beq	r2,zero,800c80 <tick+0x938>
  800c78:	00800044 	movi	r2,1
  800c7c:	00000106 	br	800c84 <tick+0x93c>
  800c80:	0005883a 	mov	r2,zero
  800c84:	d0a78685 	stb	r2,-25062(gp)
      g10 = g3;
  800c88:	d0a75303 	ldbu	r2,-25268(gp)
  800c8c:	d0a79b45 	stb	r2,-24979(gp)
      g11 =(g10||(g29&&(!(_cg29)))||g21);
  800c90:	d0a79b43 	ldbu	r2,-24979(gp)
  800c94:	10803fcc 	andi	r2,r2,255
  800c98:	1080201c 	xori	r2,r2,128
  800c9c:	10bfe004 	addi	r2,r2,-128
  800ca0:	10000f1e 	bne	r2,zero,800ce0 <tick+0x998>
  800ca4:	d0a79803 	ldbu	r2,-24992(gp)
  800ca8:	10803fcc 	andi	r2,r2,255
  800cac:	1080201c 	xori	r2,r2,128
  800cb0:	10bfe004 	addi	r2,r2,-128
  800cb4:	10000526 	beq	r2,zero,800ccc <tick+0x984>
  800cb8:	d0a777c3 	ldbu	r2,-25121(gp)
  800cbc:	10803fcc 	andi	r2,r2,255
  800cc0:	1080201c 	xori	r2,r2,128
  800cc4:	10bfe004 	addi	r2,r2,-128
  800cc8:	10000526 	beq	r2,zero,800ce0 <tick+0x998>
  800ccc:	d0a76b43 	ldbu	r2,-25171(gp)
  800cd0:	10803fcc 	andi	r2,r2,255
  800cd4:	1080201c 	xori	r2,r2,128
  800cd8:	10bfe004 	addi	r2,r2,-128
  800cdc:	10000226 	beq	r2,zero,800ce8 <tick+0x9a0>
  800ce0:	00800044 	movi	r2,1
  800ce4:	00000106 	br	800cec <tick+0x9a4>
  800ce8:	0005883a 	mov	r2,zero
  800cec:	d0a78f05 	stb	r2,-25028(gp)
      g18 =((g20&&(!(_cg20)))||g17||g25||g23);
  800cf0:	d0a77b83 	ldbu	r2,-25106(gp)
  800cf4:	10803fcc 	andi	r2,r2,255
  800cf8:	1080201c 	xori	r2,r2,128
  800cfc:	10bfe004 	addi	r2,r2,-128
  800d00:	10000526 	beq	r2,zero,800d18 <tick+0x9d0>
  800d04:	d0a76903 	ldbu	r2,-25180(gp)
  800d08:	10803fcc 	andi	r2,r2,255
  800d0c:	1080201c 	xori	r2,r2,128
  800d10:	10bfe004 	addi	r2,r2,-128
  800d14:	10000f26 	beq	r2,zero,800d54 <tick+0xa0c>
  800d18:	d0a75f83 	ldbu	r2,-25218(gp)
  800d1c:	10803fcc 	andi	r2,r2,255
  800d20:	1080201c 	xori	r2,r2,128
  800d24:	10bfe004 	addi	r2,r2,-128
  800d28:	10000a1e 	bne	r2,zero,800d54 <tick+0xa0c>
  800d2c:	d0a78e83 	ldbu	r2,-25030(gp)
  800d30:	10803fcc 	andi	r2,r2,255
  800d34:	1080201c 	xori	r2,r2,128
  800d38:	10bfe004 	addi	r2,r2,-128
  800d3c:	1000051e 	bne	r2,zero,800d54 <tick+0xa0c>
  800d40:	d0a77203 	ldbu	r2,-25144(gp)
  800d44:	10803fcc 	andi	r2,r2,255
  800d48:	1080201c 	xori	r2,r2,128
  800d4c:	10bfe004 	addi	r2,r2,-128
  800d50:	10000226 	beq	r2,zero,800d5c <tick+0xa14>
  800d54:	00800044 	movi	r2,1
  800d58:	00000106 	br	800d60 <tick+0xa18>
  800d5c:	0005883a 	mov	r2,zero
  800d60:	d0a76445 	stb	r2,-25199(gp)
      _cg18 =((_DDD_pacemaker_local__trig||_DDD_pacemaker_local__trig2)||_DDD_pacemaker_local__trig3);
  800d64:	d0a78fc3 	ldbu	r2,-25025(gp)
  800d68:	10803fcc 	andi	r2,r2,255
  800d6c:	1080201c 	xori	r2,r2,128
  800d70:	10bfe004 	addi	r2,r2,-128
  800d74:	10000a1e 	bne	r2,zero,800da0 <tick+0xa58>
  800d78:	d0a77d43 	ldbu	r2,-25099(gp)
  800d7c:	10803fcc 	andi	r2,r2,255
  800d80:	1080201c 	xori	r2,r2,128
  800d84:	10bfe004 	addi	r2,r2,-128
  800d88:	1000051e 	bne	r2,zero,800da0 <tick+0xa58>
  800d8c:	d0a79cc3 	ldbu	r2,-24973(gp)
  800d90:	10803fcc 	andi	r2,r2,255
  800d94:	1080201c 	xori	r2,r2,128
  800d98:	10bfe004 	addi	r2,r2,-128
  800d9c:	10000226 	beq	r2,zero,800da8 <tick+0xa60>
  800da0:	00800044 	movi	r2,1
  800da4:	00000106 	br	800dac <tick+0xa64>
  800da8:	0005883a 	mov	r2,zero
  800dac:	d0a79445 	stb	r2,-25007(gp)
      g26 =(g24&&(!(_cg24)));
  800db0:	d0a79883 	ldbu	r2,-24990(gp)
  800db4:	10803fcc 	andi	r2,r2,255
  800db8:	1080201c 	xori	r2,r2,128
  800dbc:	10bfe004 	addi	r2,r2,-128
  800dc0:	10000726 	beq	r2,zero,800de0 <tick+0xa98>
  800dc4:	d0a78d83 	ldbu	r2,-25034(gp)
  800dc8:	10803fcc 	andi	r2,r2,255
  800dcc:	1080201c 	xori	r2,r2,128
  800dd0:	10bfe004 	addi	r2,r2,-128
  800dd4:	1000021e 	bne	r2,zero,800de0 <tick+0xa98>
  800dd8:	00800044 	movi	r2,1
  800ddc:	00000106 	br	800de4 <tick+0xa9c>
  800de0:	0005883a 	mov	r2,zero
  800de4:	d0a79c45 	stb	r2,-24975(gp)
      _cg26 =((_DDD_pacemaker_local__trig||_DDD_pacemaker_local__trig2)||_DDD_pacemaker_local__trig3);
  800de8:	d0a78fc3 	ldbu	r2,-25025(gp)
  800dec:	10803fcc 	andi	r2,r2,255
  800df0:	1080201c 	xori	r2,r2,128
  800df4:	10bfe004 	addi	r2,r2,-128
  800df8:	10000a1e 	bne	r2,zero,800e24 <tick+0xadc>
  800dfc:	d0a77d43 	ldbu	r2,-25099(gp)
  800e00:	10803fcc 	andi	r2,r2,255
  800e04:	1080201c 	xori	r2,r2,128
  800e08:	10bfe004 	addi	r2,r2,-128
  800e0c:	1000051e 	bne	r2,zero,800e24 <tick+0xadc>
  800e10:	d0a79cc3 	ldbu	r2,-24973(gp)
  800e14:	10803fcc 	andi	r2,r2,255
  800e18:	1080201c 	xori	r2,r2,128
  800e1c:	10bfe004 	addi	r2,r2,-128
  800e20:	10000226 	beq	r2,zero,800e2c <tick+0xae4>
  800e24:	00800044 	movi	r2,1
  800e28:	00000106 	br	800e30 <tick+0xae8>
  800e2c:	0005883a 	mov	r2,zero
  800e30:	d0a76245 	stb	r2,-25207(gp)
      _cg11 =((_DDD_pacemaker_local__trig||_DDD_pacemaker_local__trig2)||_DDD_pacemaker_local__trig3);
  800e34:	d0a78fc3 	ldbu	r2,-25025(gp)
  800e38:	10803fcc 	andi	r2,r2,255
  800e3c:	1080201c 	xori	r2,r2,128
  800e40:	10bfe004 	addi	r2,r2,-128
  800e44:	10000a1e 	bne	r2,zero,800e70 <tick+0xb28>
  800e48:	d0a77d43 	ldbu	r2,-25099(gp)
  800e4c:	10803fcc 	andi	r2,r2,255
  800e50:	1080201c 	xori	r2,r2,128
  800e54:	10bfe004 	addi	r2,r2,-128
  800e58:	1000051e 	bne	r2,zero,800e70 <tick+0xb28>
  800e5c:	d0a79cc3 	ldbu	r2,-24973(gp)
  800e60:	10803fcc 	andi	r2,r2,255
  800e64:	1080201c 	xori	r2,r2,128
  800e68:	10bfe004 	addi	r2,r2,-128
  800e6c:	10000226 	beq	r2,zero,800e78 <tick+0xb30>
  800e70:	00800044 	movi	r2,1
  800e74:	00000106 	br	800e7c <tick+0xb34>
  800e78:	0005883a 	mov	r2,zero
  800e7c:	d0a77e45 	stb	r2,-25095(gp)
      g12 =((g18&&_cg18)||(g26&&_cg26)||(g11&&_cg11));
  800e80:	d0a76443 	ldbu	r2,-25199(gp)
  800e84:	10803fcc 	andi	r2,r2,255
  800e88:	1080201c 	xori	r2,r2,128
  800e8c:	10bfe004 	addi	r2,r2,-128
  800e90:	10000526 	beq	r2,zero,800ea8 <tick+0xb60>
  800e94:	d0a79443 	ldbu	r2,-25007(gp)
  800e98:	10803fcc 	andi	r2,r2,255
  800e9c:	1080201c 	xori	r2,r2,128
  800ea0:	10bfe004 	addi	r2,r2,-128
  800ea4:	1000141e 	bne	r2,zero,800ef8 <tick+0xbb0>
  800ea8:	d0a79c43 	ldbu	r2,-24975(gp)
  800eac:	10803fcc 	andi	r2,r2,255
  800eb0:	1080201c 	xori	r2,r2,128
  800eb4:	10bfe004 	addi	r2,r2,-128
  800eb8:	10000526 	beq	r2,zero,800ed0 <tick+0xb88>
  800ebc:	d0a76243 	ldbu	r2,-25207(gp)
  800ec0:	10803fcc 	andi	r2,r2,255
  800ec4:	1080201c 	xori	r2,r2,128
  800ec8:	10bfe004 	addi	r2,r2,-128
  800ecc:	10000a1e 	bne	r2,zero,800ef8 <tick+0xbb0>
  800ed0:	d0a78f03 	ldbu	r2,-25028(gp)
  800ed4:	10803fcc 	andi	r2,r2,255
  800ed8:	1080201c 	xori	r2,r2,128
  800edc:	10bfe004 	addi	r2,r2,-128
  800ee0:	10000726 	beq	r2,zero,800f00 <tick+0xbb8>
  800ee4:	d0a77e43 	ldbu	r2,-25095(gp)
  800ee8:	10803fcc 	andi	r2,r2,255
  800eec:	1080201c 	xori	r2,r2,128
  800ef0:	10bfe004 	addi	r2,r2,-128
  800ef4:	10000226 	beq	r2,zero,800f00 <tick+0xbb8>
  800ef8:	00800044 	movi	r2,1
  800efc:	00000106 	br	800f04 <tick+0xbbc>
  800f00:	0005883a 	mov	r2,zero
  800f04:	d0a75e85 	stb	r2,-25222(gp)
      g13 =(g11&&(!(_cg11)));
  800f08:	d0a78f03 	ldbu	r2,-25028(gp)
  800f0c:	10803fcc 	andi	r2,r2,255
  800f10:	1080201c 	xori	r2,r2,128
  800f14:	10bfe004 	addi	r2,r2,-128
  800f18:	10000726 	beq	r2,zero,800f38 <tick+0xbf0>
  800f1c:	d0a77e43 	ldbu	r2,-25095(gp)
  800f20:	10803fcc 	andi	r2,r2,255
  800f24:	1080201c 	xori	r2,r2,128
  800f28:	10bfe004 	addi	r2,r2,-128
  800f2c:	1000021e 	bne	r2,zero,800f38 <tick+0xbf0>
  800f30:	00800044 	movi	r2,1
  800f34:	00000106 	br	800f3c <tick+0xbf4>
  800f38:	0005883a 	mov	r2,zero
  800f3c:	d0a78585 	stb	r2,-25066(gp)
      g19 =(g18&&(!(_cg18)));
  800f40:	d0a76443 	ldbu	r2,-25199(gp)
  800f44:	10803fcc 	andi	r2,r2,255
  800f48:	1080201c 	xori	r2,r2,128
  800f4c:	10bfe004 	addi	r2,r2,-128
  800f50:	10000726 	beq	r2,zero,800f70 <tick+0xc28>
  800f54:	d0a79443 	ldbu	r2,-25007(gp)
  800f58:	10803fcc 	andi	r2,r2,255
  800f5c:	1080201c 	xori	r2,r2,128
  800f60:	10bfe004 	addi	r2,r2,-128
  800f64:	1000021e 	bne	r2,zero,800f70 <tick+0xc28>
  800f68:	00800044 	movi	r2,1
  800f6c:	00000106 	br	800f74 <tick+0xc2c>
  800f70:	0005883a 	mov	r2,zero
  800f74:	d0a75045 	stb	r2,-25279(gp)
      g27 =(g26&&(!(_cg26)));
  800f78:	d0a79c43 	ldbu	r2,-24975(gp)
  800f7c:	10803fcc 	andi	r2,r2,255
  800f80:	1080201c 	xori	r2,r2,128
  800f84:	10bfe004 	addi	r2,r2,-128
  800f88:	10000726 	beq	r2,zero,800fa8 <tick+0xc60>
  800f8c:	d0a76243 	ldbu	r2,-25207(gp)
  800f90:	10803fcc 	andi	r2,r2,255
  800f94:	1080201c 	xori	r2,r2,128
  800f98:	10bfe004 	addi	r2,r2,-128
  800f9c:	1000021e 	bne	r2,zero,800fa8 <tick+0xc60>
  800fa0:	00800044 	movi	r2,1
  800fa4:	00000106 	br	800fac <tick+0xc64>
  800fa8:	0005883a 	mov	r2,zero
  800fac:	d0a751c5 	stb	r2,-25273(gp)
      g30 = g3;
  800fb0:	d0a75303 	ldbu	r2,-25268(gp)
  800fb4:	d0a78c45 	stb	r2,-25039(gp)
      g31 =(g30||(g37&&(!(_cg37))));
  800fb8:	d0a78c43 	ldbu	r2,-25039(gp)
  800fbc:	10803fcc 	andi	r2,r2,255
  800fc0:	1080201c 	xori	r2,r2,128
  800fc4:	10bfe004 	addi	r2,r2,-128
  800fc8:	10000a1e 	bne	r2,zero,800ff4 <tick+0xcac>
  800fcc:	d0a76083 	ldbu	r2,-25214(gp)
  800fd0:	10803fcc 	andi	r2,r2,255
  800fd4:	1080201c 	xori	r2,r2,128
  800fd8:	10bfe004 	addi	r2,r2,-128
  800fdc:	10000726 	beq	r2,zero,800ffc <tick+0xcb4>
  800fe0:	d0a78203 	ldbu	r2,-25080(gp)
  800fe4:	10803fcc 	andi	r2,r2,255
  800fe8:	1080201c 	xori	r2,r2,128
  800fec:	10bfe004 	addi	r2,r2,-128
  800ff0:	1000021e 	bne	r2,zero,800ffc <tick+0xcb4>
  800ff4:	00800044 	movi	r2,1
  800ff8:	00000106 	br	801000 <tick+0xcb8>
  800ffc:	0005883a 	mov	r2,zero
  801000:	d0a76045 	stb	r2,-25215(gp)
      g34 =(g36||g38||g33);
  801004:	d0a77e83 	ldbu	r2,-25094(gp)
  801008:	10803fcc 	andi	r2,r2,255
  80100c:	1080201c 	xori	r2,r2,128
  801010:	10bfe004 	addi	r2,r2,-128
  801014:	10000a1e 	bne	r2,zero,801040 <tick+0xcf8>
  801018:	d0a76603 	ldbu	r2,-25192(gp)
  80101c:	10803fcc 	andi	r2,r2,255
  801020:	1080201c 	xori	r2,r2,128
  801024:	10bfe004 	addi	r2,r2,-128
  801028:	1000051e 	bne	r2,zero,801040 <tick+0xcf8>
  80102c:	d0a776c3 	ldbu	r2,-25125(gp)
  801030:	10803fcc 	andi	r2,r2,255
  801034:	1080201c 	xori	r2,r2,128
  801038:	10bfe004 	addi	r2,r2,-128
  80103c:	10000226 	beq	r2,zero,801048 <tick+0xd00>
  801040:	00800044 	movi	r2,1
  801044:	00000106 	br	80104c <tick+0xd04>
  801048:	0005883a 	mov	r2,zero
  80104c:	d0a76c05 	stb	r2,-25168(gp)
      g8_e1 =(!(g5));
  801050:	d0a76c43 	ldbu	r2,-25167(gp)
  801054:	10803fcc 	andi	r2,r2,255
  801058:	1080201c 	xori	r2,r2,128
  80105c:	10bfe004 	addi	r2,r2,-128
  801060:	1005003a 	cmpeq	r2,r2,zero
  801064:	d0a76405 	stb	r2,-25200(gp)
      g12_e2 =(!((g13||g19||g27)));
  801068:	d0a78583 	ldbu	r2,-25066(gp)
  80106c:	10803fcc 	andi	r2,r2,255
  801070:	1080201c 	xori	r2,r2,128
  801074:	10bfe004 	addi	r2,r2,-128
  801078:	10000c1e 	bne	r2,zero,8010ac <tick+0xd64>
  80107c:	d0a75043 	ldbu	r2,-25279(gp)
  801080:	10803fcc 	andi	r2,r2,255
  801084:	1080201c 	xori	r2,r2,128
  801088:	10bfe004 	addi	r2,r2,-128
  80108c:	1000071e 	bne	r2,zero,8010ac <tick+0xd64>
  801090:	d0a751c3 	ldbu	r2,-25273(gp)
  801094:	10803fcc 	andi	r2,r2,255
  801098:	1080201c 	xori	r2,r2,128
  80109c:	10bfe004 	addi	r2,r2,-128
  8010a0:	1000021e 	bne	r2,zero,8010ac <tick+0xd64>
  8010a4:	00800044 	movi	r2,1
  8010a8:	00000106 	br	8010b0 <tick+0xd68>
  8010ac:	0005883a 	mov	r2,zero
  8010b0:	d0a79a45 	stb	r2,-24983(gp)
      g34_e3 =(!(g31));
  8010b4:	d0a76043 	ldbu	r2,-25215(gp)
  8010b8:	10803fcc 	andi	r2,r2,255
  8010bc:	1080201c 	xori	r2,r2,128
  8010c0:	10bfe004 	addi	r2,r2,-128
  8010c4:	1005003a 	cmpeq	r2,r2,zero
  8010c8:	d0a753c5 	stb	r2,-25265(gp)
      g39 =((g8_e1||g8)&&(g12_e2||g12)&&(g34_e3||g34)&&(g8||g12||g34));
  8010cc:	d0a76403 	ldbu	r2,-25200(gp)
  8010d0:	10803fcc 	andi	r2,r2,255
  8010d4:	1080201c 	xori	r2,r2,128
  8010d8:	10bfe004 	addi	r2,r2,-128
  8010dc:	1000051e 	bne	r2,zero,8010f4 <tick+0xdac>
  8010e0:	d0a78683 	ldbu	r2,-25062(gp)
  8010e4:	10803fcc 	andi	r2,r2,255
  8010e8:	1080201c 	xori	r2,r2,128
  8010ec:	10bfe004 	addi	r2,r2,-128
  8010f0:	10002526 	beq	r2,zero,801188 <tick+0xe40>
  8010f4:	d0a79a43 	ldbu	r2,-24983(gp)
  8010f8:	10803fcc 	andi	r2,r2,255
  8010fc:	1080201c 	xori	r2,r2,128
  801100:	10bfe004 	addi	r2,r2,-128
  801104:	1000051e 	bne	r2,zero,80111c <tick+0xdd4>
  801108:	d0a75e83 	ldbu	r2,-25222(gp)
  80110c:	10803fcc 	andi	r2,r2,255
  801110:	1080201c 	xori	r2,r2,128
  801114:	10bfe004 	addi	r2,r2,-128
  801118:	10001b26 	beq	r2,zero,801188 <tick+0xe40>
  80111c:	d0a753c3 	ldbu	r2,-25265(gp)
  801120:	10803fcc 	andi	r2,r2,255
  801124:	1080201c 	xori	r2,r2,128
  801128:	10bfe004 	addi	r2,r2,-128
  80112c:	1000051e 	bne	r2,zero,801144 <tick+0xdfc>
  801130:	d0a76c03 	ldbu	r2,-25168(gp)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	10001126 	beq	r2,zero,801188 <tick+0xe40>
  801144:	d0a78683 	ldbu	r2,-25062(gp)
  801148:	10803fcc 	andi	r2,r2,255
  80114c:	1080201c 	xori	r2,r2,128
  801150:	10bfe004 	addi	r2,r2,-128
  801154:	10000a1e 	bne	r2,zero,801180 <tick+0xe38>
  801158:	d0a75e83 	ldbu	r2,-25222(gp)
  80115c:	10803fcc 	andi	r2,r2,255
  801160:	1080201c 	xori	r2,r2,128
  801164:	10bfe004 	addi	r2,r2,-128
  801168:	1000051e 	bne	r2,zero,801180 <tick+0xe38>
  80116c:	d0a76c03 	ldbu	r2,-25168(gp)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	1080201c 	xori	r2,r2,128
  801178:	10bfe004 	addi	r2,r2,-128
  80117c:	10000226 	beq	r2,zero,801188 <tick+0xe40>
  801180:	00800044 	movi	r2,1
  801184:	00000106 	br	80118c <tick+0xe44>
  801188:	0005883a 	mov	r2,zero
  80118c:	d0a796c5 	stb	r2,-24997(gp)
      _cg39 = _DDD_pacemaker_local__trig;
  801190:	d0a78fc3 	ldbu	r2,-25025(gp)
  801194:	d0a79c85 	stb	r2,-24974(gp)
      g40 =(g39&&_cg39);
  801198:	d0a796c3 	ldbu	r2,-24997(gp)
  80119c:	10803fcc 	andi	r2,r2,255
  8011a0:	1080201c 	xori	r2,r2,128
  8011a4:	10bfe004 	addi	r2,r2,-128
  8011a8:	10000726 	beq	r2,zero,8011c8 <tick+0xe80>
  8011ac:	d0a79c83 	ldbu	r2,-24974(gp)
  8011b0:	10803fcc 	andi	r2,r2,255
  8011b4:	1080201c 	xori	r2,r2,128
  8011b8:	10bfe004 	addi	r2,r2,-128
  8011bc:	10000226 	beq	r2,zero,8011c8 <tick+0xe80>
  8011c0:	00800044 	movi	r2,1
  8011c4:	00000106 	br	8011cc <tick+0xe84>
  8011c8:	0005883a 	mov	r2,zero
  8011cc:	d0a74e85 	stb	r2,-25286(gp)
      if(g40){
  8011d0:	d0a74e83 	ldbu	r2,-25286(gp)
  8011d4:	10803fcc 	andi	r2,r2,255
  8011d8:	1080201c 	xori	r2,r2,128
  8011dc:	10bfe004 	addi	r2,r2,-128
  8011e0:	10000226 	beq	r2,zero,8011ec <tick+0xea4>
         Vpace =(Vpace||1);
  8011e4:	00800044 	movi	r2,1
  8011e8:	d0a75cc5 	stb	r2,-25229(gp)
      }
      g43 =(g39&&(!(_cg39)));
  8011ec:	d0a796c3 	ldbu	r2,-24997(gp)
  8011f0:	10803fcc 	andi	r2,r2,255
  8011f4:	1080201c 	xori	r2,r2,128
  8011f8:	10bfe004 	addi	r2,r2,-128
  8011fc:	10000726 	beq	r2,zero,80121c <tick+0xed4>
  801200:	d0a79c83 	ldbu	r2,-24974(gp)
  801204:	10803fcc 	andi	r2,r2,255
  801208:	1080201c 	xori	r2,r2,128
  80120c:	10bfe004 	addi	r2,r2,-128
  801210:	1000021e 	bne	r2,zero,80121c <tick+0xed4>
  801214:	00800044 	movi	r2,1
  801218:	00000106 	br	801220 <tick+0xed8>
  80121c:	0005883a 	mov	r2,zero
  801220:	d0a77dc5 	stb	r2,-25097(gp)
      _cg43 = _DDD_pacemaker_local__trig2;
  801224:	d0a77d43 	ldbu	r2,-25099(gp)
  801228:	d0a76a45 	stb	r2,-25175(gp)
      g44 =(g43&&_cg43);
  80122c:	d0a77dc3 	ldbu	r2,-25097(gp)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1080201c 	xori	r2,r2,128
  801238:	10bfe004 	addi	r2,r2,-128
  80123c:	10000726 	beq	r2,zero,80125c <tick+0xf14>
  801240:	d0a76a43 	ldbu	r2,-25175(gp)
  801244:	10803fcc 	andi	r2,r2,255
  801248:	1080201c 	xori	r2,r2,128
  80124c:	10bfe004 	addi	r2,r2,-128
  801250:	10000226 	beq	r2,zero,80125c <tick+0xf14>
  801254:	00800044 	movi	r2,1
  801258:	00000106 	br	801260 <tick+0xf18>
  80125c:	0005883a 	mov	r2,zero
  801260:	d0a75ac5 	stb	r2,-25237(gp)
      if(g44){
  801264:	d0a75ac3 	ldbu	r2,-25237(gp)
  801268:	10803fcc 	andi	r2,r2,255
  80126c:	1080201c 	xori	r2,r2,128
  801270:	10bfe004 	addi	r2,r2,-128
  801274:	10000226 	beq	r2,zero,801280 <tick+0xf38>
         stop_URI =(stop_URI||1);
  801278:	00800044 	movi	r2,1
  80127c:	d0a778c5 	stb	r2,-25117(gp)
      }
      g45 =(g43&&(!(_cg43)));
  801280:	d0a77dc3 	ldbu	r2,-25097(gp)
  801284:	10803fcc 	andi	r2,r2,255
  801288:	1080201c 	xori	r2,r2,128
  80128c:	10bfe004 	addi	r2,r2,-128
  801290:	10000726 	beq	r2,zero,8012b0 <tick+0xf68>
  801294:	d0a76a43 	ldbu	r2,-25175(gp)
  801298:	10803fcc 	andi	r2,r2,255
  80129c:	1080201c 	xori	r2,r2,128
  8012a0:	10bfe004 	addi	r2,r2,-128
  8012a4:	1000021e 	bne	r2,zero,8012b0 <tick+0xf68>
  8012a8:	00800044 	movi	r2,1
  8012ac:	00000106 	br	8012b4 <tick+0xf6c>
  8012b0:	0005883a 	mov	r2,zero
  8012b4:	d0a79345 	stb	r2,-25011(gp)
      if(g45){
  8012b8:	d0a79343 	ldbu	r2,-25011(gp)
  8012bc:	10803fcc 	andi	r2,r2,255
  8012c0:	1080201c 	xori	r2,r2,128
  8012c4:	10bfe004 	addi	r2,r2,-128
  8012c8:	10000226 	beq	r2,zero,8012d4 <tick+0xf8c>
         Vpace =(Vpace||1);
  8012cc:	00800044 	movi	r2,1
  8012d0:	d0a75cc5 	stb	r2,-25229(gp)
      }
      g41 =(g40||g44||g45||(g42&&(!(_cg42))));
  8012d4:	d0a74e83 	ldbu	r2,-25286(gp)
  8012d8:	10803fcc 	andi	r2,r2,255
  8012dc:	1080201c 	xori	r2,r2,128
  8012e0:	10bfe004 	addi	r2,r2,-128
  8012e4:	1000141e 	bne	r2,zero,801338 <tick+0xff0>
  8012e8:	d0a75ac3 	ldbu	r2,-25237(gp)
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	1080201c 	xori	r2,r2,128
  8012f4:	10bfe004 	addi	r2,r2,-128
  8012f8:	10000f1e 	bne	r2,zero,801338 <tick+0xff0>
  8012fc:	d0a79343 	ldbu	r2,-25011(gp)
  801300:	10803fcc 	andi	r2,r2,255
  801304:	1080201c 	xori	r2,r2,128
  801308:	10bfe004 	addi	r2,r2,-128
  80130c:	10000a1e 	bne	r2,zero,801338 <tick+0xff0>
  801310:	d0a75543 	ldbu	r2,-25259(gp)
  801314:	10803fcc 	andi	r2,r2,255
  801318:	1080201c 	xori	r2,r2,128
  80131c:	10bfe004 	addi	r2,r2,-128
  801320:	10000726 	beq	r2,zero,801340 <tick+0xff8>
  801324:	d0a74e03 	ldbu	r2,-25288(gp)
  801328:	10803fcc 	andi	r2,r2,255
  80132c:	1080201c 	xori	r2,r2,128
  801330:	10bfe004 	addi	r2,r2,-128
  801334:	1000021e 	bne	r2,zero,801340 <tick+0xff8>
  801338:	00800044 	movi	r2,1
  80133c:	00000106 	br	801344 <tick+0xffc>
  801340:	0005883a 	mov	r2,zero
  801344:	d0a761c5 	stb	r2,-25209(gp)
      g47 = g1;
  801348:	d0a75d03 	ldbu	r2,-25228(gp)
  80134c:	d0a754c5 	stb	r2,-25261(gp)
      g49 =(PRE_g48);
  801350:	d0a78403 	ldbu	r2,-25072(gp)
  801354:	d0a76d45 	stb	r2,-25163(gp)
      g49b = g49;
  801358:	d0a76d43 	ldbu	r2,-25163(gp)
  80135c:	d0a795c5 	stb	r2,-25001(gp)
      _cg49 = Vpace;
  801360:	d0a75cc3 	ldbu	r2,-25229(gp)
  801364:	d0a79745 	stb	r2,-24995(gp)
      g58 =(g49b&&(!(_cg49)));
  801368:	d0a795c3 	ldbu	r2,-25001(gp)
  80136c:	10803fcc 	andi	r2,r2,255
  801370:	1080201c 	xori	r2,r2,128
  801374:	10bfe004 	addi	r2,r2,-128
  801378:	10000726 	beq	r2,zero,801398 <tick+0x1050>
  80137c:	d0a79743 	ldbu	r2,-24995(gp)
  801380:	10803fcc 	andi	r2,r2,255
  801384:	1080201c 	xori	r2,r2,128
  801388:	10bfe004 	addi	r2,r2,-128
  80138c:	1000021e 	bne	r2,zero,801398 <tick+0x1050>
  801390:	00800044 	movi	r2,1
  801394:	00000106 	br	80139c <tick+0x1054>
  801398:	0005883a 	mov	r2,zero
  80139c:	d0a78dc5 	stb	r2,-25033(gp)
      _cg58 = Vsense;
  8013a0:	d0a77083 	ldbu	r2,-25150(gp)
  8013a4:	d0a76585 	stb	r2,-25194(gp)
      g55 =(g54&&_cg54);
  8013a8:	d0a77183 	ldbu	r2,-25146(gp)
  8013ac:	10803fcc 	andi	r2,r2,255
  8013b0:	1080201c 	xori	r2,r2,128
  8013b4:	10bfe004 	addi	r2,r2,-128
  8013b8:	10000726 	beq	r2,zero,8013d8 <tick+0x1090>
  8013bc:	d0a78bc3 	ldbu	r2,-25041(gp)
  8013c0:	10803fcc 	andi	r2,r2,255
  8013c4:	1080201c 	xori	r2,r2,128
  8013c8:	10bfe004 	addi	r2,r2,-128
  8013cc:	10000226 	beq	r2,zero,8013d8 <tick+0x1090>
  8013d0:	00800044 	movi	r2,1
  8013d4:	00000106 	br	8013dc <tick+0x1094>
  8013d8:	0005883a 	mov	r2,zero
  8013dc:	d0a75145 	stb	r2,-25275(gp)
      if(g55){
  8013e0:	d0a75143 	ldbu	r2,-25275(gp)
  8013e4:	10803fcc 	andi	r2,r2,255
  8013e8:	1080201c 	xori	r2,r2,128
  8013ec:	10bfe004 	addi	r2,r2,-128
  8013f0:	10000226 	beq	r2,zero,8013fc <tick+0x10b4>
         stop_AEI =(stop_AEI||1);
  8013f4:	00800044 	movi	r2,1
  8013f8:	d0a76fc5 	stb	r2,-25153(gp)
      }
      g48 =(g47||(g58&&(!(_cg58)))||g55||g57);
  8013fc:	d0a754c3 	ldbu	r2,-25261(gp)
  801400:	10803fcc 	andi	r2,r2,255
  801404:	1080201c 	xori	r2,r2,128
  801408:	10bfe004 	addi	r2,r2,-128
  80140c:	1000141e 	bne	r2,zero,801460 <tick+0x1118>
  801410:	d0a78dc3 	ldbu	r2,-25033(gp)
  801414:	10803fcc 	andi	r2,r2,255
  801418:	1080201c 	xori	r2,r2,128
  80141c:	10bfe004 	addi	r2,r2,-128
  801420:	10000526 	beq	r2,zero,801438 <tick+0x10f0>
  801424:	d0a76583 	ldbu	r2,-25194(gp)
  801428:	10803fcc 	andi	r2,r2,255
  80142c:	1080201c 	xori	r2,r2,128
  801430:	10bfe004 	addi	r2,r2,-128
  801434:	10000a26 	beq	r2,zero,801460 <tick+0x1118>
  801438:	d0a75143 	ldbu	r2,-25275(gp)
  80143c:	10803fcc 	andi	r2,r2,255
  801440:	1080201c 	xori	r2,r2,128
  801444:	10bfe004 	addi	r2,r2,-128
  801448:	1000051e 	bne	r2,zero,801460 <tick+0x1118>
  80144c:	d0a786c3 	ldbu	r2,-25061(gp)
  801450:	10803fcc 	andi	r2,r2,255
  801454:	1080201c 	xori	r2,r2,128
  801458:	10bfe004 	addi	r2,r2,-128
  80145c:	10000226 	beq	r2,zero,801468 <tick+0x1120>
  801460:	00800044 	movi	r2,1
  801464:	00000106 	br	80146c <tick+0x1124>
  801468:	0005883a 	mov	r2,zero
  80146c:	d0a76545 	stb	r2,-25195(gp)
      g50 =((g49b&&_cg49)||(g58&&_cg58));
  801470:	d0a795c3 	ldbu	r2,-25001(gp)
  801474:	10803fcc 	andi	r2,r2,255
  801478:	1080201c 	xori	r2,r2,128
  80147c:	10bfe004 	addi	r2,r2,-128
  801480:	10000526 	beq	r2,zero,801498 <tick+0x1150>
  801484:	d0a79743 	ldbu	r2,-24995(gp)
  801488:	10803fcc 	andi	r2,r2,255
  80148c:	1080201c 	xori	r2,r2,128
  801490:	10bfe004 	addi	r2,r2,-128
  801494:	10000a1e 	bne	r2,zero,8014c0 <tick+0x1178>
  801498:	d0a78dc3 	ldbu	r2,-25033(gp)
  80149c:	10803fcc 	andi	r2,r2,255
  8014a0:	1080201c 	xori	r2,r2,128
  8014a4:	10bfe004 	addi	r2,r2,-128
  8014a8:	10000726 	beq	r2,zero,8014c8 <tick+0x1180>
  8014ac:	d0a76583 	ldbu	r2,-25194(gp)
  8014b0:	10803fcc 	andi	r2,r2,255
  8014b4:	1080201c 	xori	r2,r2,128
  8014b8:	10bfe004 	addi	r2,r2,-128
  8014bc:	10000226 	beq	r2,zero,8014c8 <tick+0x1180>
  8014c0:	00800044 	movi	r2,1
  8014c4:	00000106 	br	8014cc <tick+0x1184>
  8014c8:	0005883a 	mov	r2,zero
  8014cc:	d0a78005 	stb	r2,-25088(gp)
      if(g50){
  8014d0:	d0a78003 	ldbu	r2,-25088(gp)
  8014d4:	10803fcc 	andi	r2,r2,255
  8014d8:	1080201c 	xori	r2,r2,128
  8014dc:	10bfe004 	addi	r2,r2,-128
  8014e0:	10000226 	beq	r2,zero,8014ec <tick+0x11a4>
         start_AEI =(start_AEI||1);
  8014e4:	00800044 	movi	r2,1
  8014e8:	d0a77f45 	stb	r2,-25091(gp)
      }
      g52 =(PRE_g51);
  8014ec:	d0a75183 	ldbu	r2,-25274(gp)
  8014f0:	d0a75f05 	stb	r2,-25220(gp)
      _cg52 = PVARP_ex;
  8014f4:	d0a78a03 	ldbu	r2,-25048(gp)
  8014f8:	d0a75a05 	stb	r2,-25240(gp)
      g51 =((g52&&(!(_cg52)))||g50);
  8014fc:	d0a75f03 	ldbu	r2,-25220(gp)
  801500:	10803fcc 	andi	r2,r2,255
  801504:	1080201c 	xori	r2,r2,128
  801508:	10bfe004 	addi	r2,r2,-128
  80150c:	10000526 	beq	r2,zero,801524 <tick+0x11dc>
  801510:	d0a75a03 	ldbu	r2,-25240(gp)
  801514:	10803fcc 	andi	r2,r2,255
  801518:	1080201c 	xori	r2,r2,128
  80151c:	10bfe004 	addi	r2,r2,-128
  801520:	10000526 	beq	r2,zero,801538 <tick+0x11f0>
  801524:	d0a78003 	ldbu	r2,-25088(gp)
  801528:	10803fcc 	andi	r2,r2,255
  80152c:	1080201c 	xori	r2,r2,128
  801530:	10bfe004 	addi	r2,r2,-128
  801534:	10000226 	beq	r2,zero,801540 <tick+0x11f8>
  801538:	00800044 	movi	r2,1
  80153c:	00000106 	br	801544 <tick+0x11fc>
  801540:	0005883a 	mov	r2,zero
  801544:	d0a780c5 	stb	r2,-25085(gp)
      g53 =((g52&&_cg52)||(g56&&(!(_cg56))));
  801548:	d0a75f03 	ldbu	r2,-25220(gp)
  80154c:	10803fcc 	andi	r2,r2,255
  801550:	1080201c 	xori	r2,r2,128
  801554:	10bfe004 	addi	r2,r2,-128
  801558:	10000526 	beq	r2,zero,801570 <tick+0x1228>
  80155c:	d0a75a03 	ldbu	r2,-25240(gp)
  801560:	10803fcc 	andi	r2,r2,255
  801564:	1080201c 	xori	r2,r2,128
  801568:	10bfe004 	addi	r2,r2,-128
  80156c:	10000a1e 	bne	r2,zero,801598 <tick+0x1250>
  801570:	d0a77543 	ldbu	r2,-25131(gp)
  801574:	10803fcc 	andi	r2,r2,255
  801578:	1080201c 	xori	r2,r2,128
  80157c:	10bfe004 	addi	r2,r2,-128
  801580:	10000726 	beq	r2,zero,8015a0 <tick+0x1258>
  801584:	d0a78903 	ldbu	r2,-25052(gp)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	1080201c 	xori	r2,r2,128
  801590:	10bfe004 	addi	r2,r2,-128
  801594:	1000021e 	bne	r2,zero,8015a0 <tick+0x1258>
  801598:	00800044 	movi	r2,1
  80159c:	00000106 	br	8015a4 <tick+0x125c>
  8015a0:	0005883a 	mov	r2,zero
  8015a4:	d0a78645 	stb	r2,-25063(gp)
      g60 = g1;
  8015a8:	d0a75d03 	ldbu	r2,-25228(gp)
  8015ac:	d0a77bc5 	stb	r2,-25105(gp)
      g67 =(PRE_g66);
  8015b0:	d0a78cc3 	ldbu	r2,-25037(gp)
  8015b4:	d0a79845 	stb	r2,-24991(gp)
      _cg67 = Vsense;
  8015b8:	d0a77083 	ldbu	r2,-25150(gp)
  8015bc:	d0a79a05 	stb	r2,-24984(gp)
      g69 =(g67&&(!(_cg67)));
  8015c0:	d0a79843 	ldbu	r2,-24991(gp)
  8015c4:	10803fcc 	andi	r2,r2,255
  8015c8:	1080201c 	xori	r2,r2,128
  8015cc:	10bfe004 	addi	r2,r2,-128
  8015d0:	10000726 	beq	r2,zero,8015f0 <tick+0x12a8>
  8015d4:	d0a79a03 	ldbu	r2,-24984(gp)
  8015d8:	10803fcc 	andi	r2,r2,255
  8015dc:	1080201c 	xori	r2,r2,128
  8015e0:	10bfe004 	addi	r2,r2,-128
  8015e4:	1000021e 	bne	r2,zero,8015f0 <tick+0x12a8>
  8015e8:	00800044 	movi	r2,1
  8015ec:	00000106 	br	8015f4 <tick+0x12ac>
  8015f0:	0005883a 	mov	r2,zero
  8015f4:	d0a79c05 	stb	r2,-24976(gp)
      _cg69 = Vpace;
  8015f8:	d0a75cc3 	ldbu	r2,-25229(gp)
  8015fc:	d0a76385 	stb	r2,-25202(gp)
      g70 =(g69&&(!(_cg69)));
  801600:	d0a79c03 	ldbu	r2,-24976(gp)
  801604:	10803fcc 	andi	r2,r2,255
  801608:	1080201c 	xori	r2,r2,128
  80160c:	10bfe004 	addi	r2,r2,-128
  801610:	10000726 	beq	r2,zero,801630 <tick+0x12e8>
  801614:	d0a76383 	ldbu	r2,-25202(gp)
  801618:	10803fcc 	andi	r2,r2,255
  80161c:	1080201c 	xori	r2,r2,128
  801620:	10bfe004 	addi	r2,r2,-128
  801624:	1000021e 	bne	r2,zero,801630 <tick+0x12e8>
  801628:	00800044 	movi	r2,1
  80162c:	00000106 	br	801634 <tick+0x12ec>
  801630:	0005883a 	mov	r2,zero
  801634:	d0a78745 	stb	r2,-25059(gp)
      _cg70 = PVARP_ex;
  801638:	d0a78a03 	ldbu	r2,-25048(gp)
  80163c:	d0a781c5 	stb	r2,-25081(gp)
      g62 =(PRE_g61);
  801640:	d0a78443 	ldbu	r2,-25071(gp)
  801644:	d0a76145 	stb	r2,-25211(gp)
      _cg62 = Vsense;
  801648:	d0a77083 	ldbu	r2,-25150(gp)
  80164c:	d0a79b85 	stb	r2,-24978(gp)
      g71 =(g62&&(!(_cg62)));
  801650:	d0a76143 	ldbu	r2,-25211(gp)
  801654:	10803fcc 	andi	r2,r2,255
  801658:	1080201c 	xori	r2,r2,128
  80165c:	10bfe004 	addi	r2,r2,-128
  801660:	10000726 	beq	r2,zero,801680 <tick+0x1338>
  801664:	d0a79b83 	ldbu	r2,-24978(gp)
  801668:	10803fcc 	andi	r2,r2,255
  80166c:	1080201c 	xori	r2,r2,128
  801670:	10bfe004 	addi	r2,r2,-128
  801674:	1000021e 	bne	r2,zero,801680 <tick+0x1338>
  801678:	00800044 	movi	r2,1
  80167c:	00000106 	br	801684 <tick+0x133c>
  801680:	0005883a 	mov	r2,zero
  801684:	d0a75dc5 	stb	r2,-25225(gp)
      _cg71 = Vpace;
  801688:	d0a75cc3 	ldbu	r2,-25229(gp)
  80168c:	d0a77a05 	stb	r2,-25112(gp)
      g61 =(g60||(g70&&_cg70)||(g71&&(!(_cg71))));
  801690:	d0a77bc3 	ldbu	r2,-25105(gp)
  801694:	10803fcc 	andi	r2,r2,255
  801698:	1080201c 	xori	r2,r2,128
  80169c:	10bfe004 	addi	r2,r2,-128
  8016a0:	1000141e 	bne	r2,zero,8016f4 <tick+0x13ac>
  8016a4:	d0a78743 	ldbu	r2,-25059(gp)
  8016a8:	10803fcc 	andi	r2,r2,255
  8016ac:	1080201c 	xori	r2,r2,128
  8016b0:	10bfe004 	addi	r2,r2,-128
  8016b4:	10000526 	beq	r2,zero,8016cc <tick+0x1384>
  8016b8:	d0a781c3 	ldbu	r2,-25081(gp)
  8016bc:	10803fcc 	andi	r2,r2,255
  8016c0:	1080201c 	xori	r2,r2,128
  8016c4:	10bfe004 	addi	r2,r2,-128
  8016c8:	10000a1e 	bne	r2,zero,8016f4 <tick+0x13ac>
  8016cc:	d0a75dc3 	ldbu	r2,-25225(gp)
  8016d0:	10803fcc 	andi	r2,r2,255
  8016d4:	1080201c 	xori	r2,r2,128
  8016d8:	10bfe004 	addi	r2,r2,-128
  8016dc:	10000726 	beq	r2,zero,8016fc <tick+0x13b4>
  8016e0:	d0a77a03 	ldbu	r2,-25112(gp)
  8016e4:	10803fcc 	andi	r2,r2,255
  8016e8:	1080201c 	xori	r2,r2,128
  8016ec:	10bfe004 	addi	r2,r2,-128
  8016f0:	1000021e 	bne	r2,zero,8016fc <tick+0x13b4>
  8016f4:	00800044 	movi	r2,1
  8016f8:	00000106 	br	801700 <tick+0x13b8>
  8016fc:	0005883a 	mov	r2,zero
  801700:	d0a75d45 	stb	r2,-25227(gp)
      g68 =((g67&&_cg67)||(g69&&_cg69));
  801704:	d0a79843 	ldbu	r2,-24991(gp)
  801708:	10803fcc 	andi	r2,r2,255
  80170c:	1080201c 	xori	r2,r2,128
  801710:	10bfe004 	addi	r2,r2,-128
  801714:	10000526 	beq	r2,zero,80172c <tick+0x13e4>
  801718:	d0a79a03 	ldbu	r2,-24984(gp)
  80171c:	10803fcc 	andi	r2,r2,255
  801720:	1080201c 	xori	r2,r2,128
  801724:	10bfe004 	addi	r2,r2,-128
  801728:	10000a1e 	bne	r2,zero,801754 <tick+0x140c>
  80172c:	d0a79c03 	ldbu	r2,-24976(gp)
  801730:	10803fcc 	andi	r2,r2,255
  801734:	1080201c 	xori	r2,r2,128
  801738:	10bfe004 	addi	r2,r2,-128
  80173c:	10000726 	beq	r2,zero,80175c <tick+0x1414>
  801740:	d0a76383 	ldbu	r2,-25202(gp)
  801744:	10803fcc 	andi	r2,r2,255
  801748:	1080201c 	xori	r2,r2,128
  80174c:	10bfe004 	addi	r2,r2,-128
  801750:	10000226 	beq	r2,zero,80175c <tick+0x1414>
  801754:	00800044 	movi	r2,1
  801758:	00000106 	br	801760 <tick+0x1418>
  80175c:	0005883a 	mov	r2,zero
  801760:	d0a78e45 	stb	r2,-25031(gp)
      if(g68){
  801764:	d0a78e43 	ldbu	r2,-25031(gp)
  801768:	10803fcc 	andi	r2,r2,255
  80176c:	1080201c 	xori	r2,r2,128
  801770:	10bfe004 	addi	r2,r2,-128
  801774:	10000226 	beq	r2,zero,801780 <tick+0x1438>
         stop_PVARP =(stop_PVARP||1);
  801778:	00800044 	movi	r2,1
  80177c:	d0a78c85 	stb	r2,-25038(gp)
      }
      g63 =(g68||(g71&&_cg71)||(g62&&_cg62));
  801780:	d0a78e43 	ldbu	r2,-25031(gp)
  801784:	10803fcc 	andi	r2,r2,255
  801788:	1080201c 	xori	r2,r2,128
  80178c:	10bfe004 	addi	r2,r2,-128
  801790:	1000141e 	bne	r2,zero,8017e4 <tick+0x149c>
  801794:	d0a75dc3 	ldbu	r2,-25225(gp)
  801798:	10803fcc 	andi	r2,r2,255
  80179c:	1080201c 	xori	r2,r2,128
  8017a0:	10bfe004 	addi	r2,r2,-128
  8017a4:	10000526 	beq	r2,zero,8017bc <tick+0x1474>
  8017a8:	d0a77a03 	ldbu	r2,-25112(gp)
  8017ac:	10803fcc 	andi	r2,r2,255
  8017b0:	1080201c 	xori	r2,r2,128
  8017b4:	10bfe004 	addi	r2,r2,-128
  8017b8:	10000a1e 	bne	r2,zero,8017e4 <tick+0x149c>
  8017bc:	d0a76143 	ldbu	r2,-25211(gp)
  8017c0:	10803fcc 	andi	r2,r2,255
  8017c4:	1080201c 	xori	r2,r2,128
  8017c8:	10bfe004 	addi	r2,r2,-128
  8017cc:	10000726 	beq	r2,zero,8017ec <tick+0x14a4>
  8017d0:	d0a79b83 	ldbu	r2,-24978(gp)
  8017d4:	10803fcc 	andi	r2,r2,255
  8017d8:	1080201c 	xori	r2,r2,128
  8017dc:	10bfe004 	addi	r2,r2,-128
  8017e0:	10000226 	beq	r2,zero,8017ec <tick+0x14a4>
  8017e4:	00800044 	movi	r2,1
  8017e8:	00000106 	br	8017f0 <tick+0x14a8>
  8017ec:	0005883a 	mov	r2,zero
  8017f0:	d0a77b45 	stb	r2,-25107(gp)
      if(g63){
  8017f4:	d0a77b43 	ldbu	r2,-25107(gp)
  8017f8:	10803fcc 	andi	r2,r2,255
  8017fc:	1080201c 	xori	r2,r2,128
  801800:	10bfe004 	addi	r2,r2,-128
  801804:	10000226 	beq	r2,zero,801810 <tick+0x14c8>
         start_PVARP =(start_PVARP||1);
  801808:	00800044 	movi	r2,1
  80180c:	d0a77b05 	stb	r2,-25108(gp)
      }
      g65 =(PRE_g64);
  801810:	d0a79503 	ldbu	r2,-25004(gp)
  801814:	d0a78f45 	stb	r2,-25027(gp)
      _cg65 = VRP_ex;
  801818:	d0a77443 	ldbu	r2,-25135(gp)
  80181c:	d0a77e05 	stb	r2,-25096(gp)
      g64 =((g65&&(!(_cg65)))||g63);
  801820:	d0a78f43 	ldbu	r2,-25027(gp)
  801824:	10803fcc 	andi	r2,r2,255
  801828:	1080201c 	xori	r2,r2,128
  80182c:	10bfe004 	addi	r2,r2,-128
  801830:	10000526 	beq	r2,zero,801848 <tick+0x1500>
  801834:	d0a77e03 	ldbu	r2,-25096(gp)
  801838:	10803fcc 	andi	r2,r2,255
  80183c:	1080201c 	xori	r2,r2,128
  801840:	10bfe004 	addi	r2,r2,-128
  801844:	10000526 	beq	r2,zero,80185c <tick+0x1514>
  801848:	d0a77b43 	ldbu	r2,-25107(gp)
  80184c:	10803fcc 	andi	r2,r2,255
  801850:	1080201c 	xori	r2,r2,128
  801854:	10bfe004 	addi	r2,r2,-128
  801858:	10000226 	beq	r2,zero,801864 <tick+0x151c>
  80185c:	00800044 	movi	r2,1
  801860:	00000106 	br	801868 <tick+0x1520>
  801864:	0005883a 	mov	r2,zero
  801868:	d0a76b05 	stb	r2,-25172(gp)
      g66 =((g65&&_cg65)||(g70&&(!(_cg70))));
  80186c:	d0a78f43 	ldbu	r2,-25027(gp)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1080201c 	xori	r2,r2,128
  801878:	10bfe004 	addi	r2,r2,-128
  80187c:	10000526 	beq	r2,zero,801894 <tick+0x154c>
  801880:	d0a77e03 	ldbu	r2,-25096(gp)
  801884:	10803fcc 	andi	r2,r2,255
  801888:	1080201c 	xori	r2,r2,128
  80188c:	10bfe004 	addi	r2,r2,-128
  801890:	10000a1e 	bne	r2,zero,8018bc <tick+0x1574>
  801894:	d0a78743 	ldbu	r2,-25059(gp)
  801898:	10803fcc 	andi	r2,r2,255
  80189c:	1080201c 	xori	r2,r2,128
  8018a0:	10bfe004 	addi	r2,r2,-128
  8018a4:	10000726 	beq	r2,zero,8018c4 <tick+0x157c>
  8018a8:	d0a781c3 	ldbu	r2,-25081(gp)
  8018ac:	10803fcc 	andi	r2,r2,255
  8018b0:	1080201c 	xori	r2,r2,128
  8018b4:	10bfe004 	addi	r2,r2,-128
  8018b8:	1000021e 	bne	r2,zero,8018c4 <tick+0x157c>
  8018bc:	00800044 	movi	r2,1
  8018c0:	00000106 	br	8018c8 <tick+0x1580>
  8018c4:	0005883a 	mov	r2,zero
  8018c8:	d0a771c5 	stb	r2,-25145(gp)
      g73 = g1;
  8018cc:	d0a75d03 	ldbu	r2,-25228(gp)
  8018d0:	d0a79105 	stb	r2,-25020(gp)
      g78 =(PRE_g77);
  8018d4:	d0a75fc3 	ldbu	r2,-25217(gp)
  8018d8:	d0a77685 	stb	r2,-25126(gp)
      _cg78 = VRP_ex;
  8018dc:	d0a77443 	ldbu	r2,-25135(gp)
  8018e0:	d0a783c5 	stb	r2,-25073(gp)
      g75 =(PRE_g74);
  8018e4:	d0a78283 	ldbu	r2,-25078(gp)
  8018e8:	d0a78c05 	stb	r2,-25040(gp)
      _cg75 = Vsense;
  8018ec:	d0a77083 	ldbu	r2,-25150(gp)
  8018f0:	d0a75bc5 	stb	r2,-25233(gp)
      g79 =(g75&&(!(_cg75)));
  8018f4:	d0a78c03 	ldbu	r2,-25040(gp)
  8018f8:	10803fcc 	andi	r2,r2,255
  8018fc:	1080201c 	xori	r2,r2,128
  801900:	10bfe004 	addi	r2,r2,-128
  801904:	10000726 	beq	r2,zero,801924 <tick+0x15dc>
  801908:	d0a75bc3 	ldbu	r2,-25233(gp)
  80190c:	10803fcc 	andi	r2,r2,255
  801910:	1080201c 	xori	r2,r2,128
  801914:	10bfe004 	addi	r2,r2,-128
  801918:	1000021e 	bne	r2,zero,801924 <tick+0x15dc>
  80191c:	00800044 	movi	r2,1
  801920:	00000106 	br	801928 <tick+0x15e0>
  801924:	0005883a 	mov	r2,zero
  801928:	d0a76bc5 	stb	r2,-25169(gp)
      _cg79 = Vpace;
  80192c:	d0a75cc3 	ldbu	r2,-25229(gp)
  801930:	d0a75b45 	stb	r2,-25235(gp)
      g74 =((g78&&_cg78)||g73||(g79&&(!(_cg79))));
  801934:	d0a77683 	ldbu	r2,-25126(gp)
  801938:	10803fcc 	andi	r2,r2,255
  80193c:	1080201c 	xori	r2,r2,128
  801940:	10bfe004 	addi	r2,r2,-128
  801944:	10000526 	beq	r2,zero,80195c <tick+0x1614>
  801948:	d0a783c3 	ldbu	r2,-25073(gp)
  80194c:	10803fcc 	andi	r2,r2,255
  801950:	1080201c 	xori	r2,r2,128
  801954:	10bfe004 	addi	r2,r2,-128
  801958:	10000f1e 	bne	r2,zero,801998 <tick+0x1650>
  80195c:	d0a79103 	ldbu	r2,-25020(gp)
  801960:	10803fcc 	andi	r2,r2,255
  801964:	1080201c 	xori	r2,r2,128
  801968:	10bfe004 	addi	r2,r2,-128
  80196c:	10000a1e 	bne	r2,zero,801998 <tick+0x1650>
  801970:	d0a76bc3 	ldbu	r2,-25169(gp)
  801974:	10803fcc 	andi	r2,r2,255
  801978:	1080201c 	xori	r2,r2,128
  80197c:	10bfe004 	addi	r2,r2,-128
  801980:	10000726 	beq	r2,zero,8019a0 <tick+0x1658>
  801984:	d0a75b43 	ldbu	r2,-25235(gp)
  801988:	10803fcc 	andi	r2,r2,255
  80198c:	1080201c 	xori	r2,r2,128
  801990:	10bfe004 	addi	r2,r2,-128
  801994:	1000021e 	bne	r2,zero,8019a0 <tick+0x1658>
  801998:	00800044 	movi	r2,1
  80199c:	00000106 	br	8019a4 <tick+0x165c>
  8019a0:	0005883a 	mov	r2,zero
  8019a4:	d0a79d05 	stb	r2,-24972(gp)
      g76 =((g79&&_cg79)||(g75&&_cg75));
  8019a8:	d0a76bc3 	ldbu	r2,-25169(gp)
  8019ac:	10803fcc 	andi	r2,r2,255
  8019b0:	1080201c 	xori	r2,r2,128
  8019b4:	10bfe004 	addi	r2,r2,-128
  8019b8:	10000526 	beq	r2,zero,8019d0 <tick+0x1688>
  8019bc:	d0a75b43 	ldbu	r2,-25235(gp)
  8019c0:	10803fcc 	andi	r2,r2,255
  8019c4:	1080201c 	xori	r2,r2,128
  8019c8:	10bfe004 	addi	r2,r2,-128
  8019cc:	10000a1e 	bne	r2,zero,8019f8 <tick+0x16b0>
  8019d0:	d0a78c03 	ldbu	r2,-25040(gp)
  8019d4:	10803fcc 	andi	r2,r2,255
  8019d8:	1080201c 	xori	r2,r2,128
  8019dc:	10bfe004 	addi	r2,r2,-128
  8019e0:	10000726 	beq	r2,zero,801a00 <tick+0x16b8>
  8019e4:	d0a75bc3 	ldbu	r2,-25233(gp)
  8019e8:	10803fcc 	andi	r2,r2,255
  8019ec:	1080201c 	xori	r2,r2,128
  8019f0:	10bfe004 	addi	r2,r2,-128
  8019f4:	10000226 	beq	r2,zero,801a00 <tick+0x16b8>
  8019f8:	00800044 	movi	r2,1
  8019fc:	00000106 	br	801a04 <tick+0x16bc>
  801a00:	0005883a 	mov	r2,zero
  801a04:	d0a76005 	stb	r2,-25216(gp)
      if(g76){
  801a08:	d0a76003 	ldbu	r2,-25216(gp)
  801a0c:	10803fcc 	andi	r2,r2,255
  801a10:	1080201c 	xori	r2,r2,128
  801a14:	10bfe004 	addi	r2,r2,-128
  801a18:	10000226 	beq	r2,zero,801a24 <tick+0x16dc>
         start_VRP =(start_VRP||1);
  801a1c:	00800044 	movi	r2,1
  801a20:	d0a76345 	stb	r2,-25203(gp)
      }
      g77 =(g76||(g78&&(!(_cg78))));
  801a24:	d0a76003 	ldbu	r2,-25216(gp)
  801a28:	10803fcc 	andi	r2,r2,255
  801a2c:	1080201c 	xori	r2,r2,128
  801a30:	10bfe004 	addi	r2,r2,-128
  801a34:	10000a1e 	bne	r2,zero,801a60 <tick+0x1718>
  801a38:	d0a77683 	ldbu	r2,-25126(gp)
  801a3c:	10803fcc 	andi	r2,r2,255
  801a40:	1080201c 	xori	r2,r2,128
  801a44:	10bfe004 	addi	r2,r2,-128
  801a48:	10000726 	beq	r2,zero,801a68 <tick+0x1720>
  801a4c:	d0a783c3 	ldbu	r2,-25073(gp)
  801a50:	10803fcc 	andi	r2,r2,255
  801a54:	1080201c 	xori	r2,r2,128
  801a58:	10bfe004 	addi	r2,r2,-128
  801a5c:	1000021e 	bne	r2,zero,801a68 <tick+0x1720>
  801a60:	00800044 	movi	r2,1
  801a64:	00000106 	br	801a6c <tick+0x1724>
  801a68:	0005883a 	mov	r2,zero
  801a6c:	d0a79285 	stb	r2,-25014(gp)
      g81 = g1;
  801a70:	d0a75d03 	ldbu	r2,-25228(gp)
  801a74:	d0a789c5 	stb	r2,-25049(gp)
      g83 =(PRE_g82);
  801a78:	d0a79383 	ldbu	r2,-25010(gp)
  801a7c:	d0a74e45 	stb	r2,-25287(gp)
      _cg83 = Vsense;
  801a80:	d0a77083 	ldbu	r2,-25150(gp)
  801a84:	d0a77245 	stb	r2,-25143(gp)
      g82 =(g81||(g83&&(!(_cg83))));
  801a88:	d0a789c3 	ldbu	r2,-25049(gp)
  801a8c:	10803fcc 	andi	r2,r2,255
  801a90:	1080201c 	xori	r2,r2,128
  801a94:	10bfe004 	addi	r2,r2,-128
  801a98:	10000a1e 	bne	r2,zero,801ac4 <tick+0x177c>
  801a9c:	d0a74e43 	ldbu	r2,-25287(gp)
  801aa0:	10803fcc 	andi	r2,r2,255
  801aa4:	1080201c 	xori	r2,r2,128
  801aa8:	10bfe004 	addi	r2,r2,-128
  801aac:	10000726 	beq	r2,zero,801acc <tick+0x1784>
  801ab0:	d0a77243 	ldbu	r2,-25143(gp)
  801ab4:	10803fcc 	andi	r2,r2,255
  801ab8:	1080201c 	xori	r2,r2,128
  801abc:	10bfe004 	addi	r2,r2,-128
  801ac0:	1000021e 	bne	r2,zero,801acc <tick+0x1784>
  801ac4:	00800044 	movi	r2,1
  801ac8:	00000106 	br	801ad0 <tick+0x1788>
  801acc:	0005883a 	mov	r2,zero
  801ad0:	d0a75e45 	stb	r2,-25223(gp)
      g84 =(g83&&_cg83);
  801ad4:	d0a74e43 	ldbu	r2,-25287(gp)
  801ad8:	10803fcc 	andi	r2,r2,255
  801adc:	1080201c 	xori	r2,r2,128
  801ae0:	10bfe004 	addi	r2,r2,-128
  801ae4:	10000726 	beq	r2,zero,801b04 <tick+0x17bc>
  801ae8:	d0a77243 	ldbu	r2,-25143(gp)
  801aec:	10803fcc 	andi	r2,r2,255
  801af0:	1080201c 	xori	r2,r2,128
  801af4:	10bfe004 	addi	r2,r2,-128
  801af8:	10000226 	beq	r2,zero,801b04 <tick+0x17bc>
  801afc:	00800044 	movi	r2,1
  801b00:	00000106 	br	801b08 <tick+0x17c0>
  801b04:	0005883a 	mov	r2,zero
  801b08:	d0a76185 	stb	r2,-25210(gp)
      if(g84){
  801b0c:	d0a76183 	ldbu	r2,-25210(gp)
  801b10:	10803fcc 	andi	r2,r2,255
  801b14:	1080201c 	xori	r2,r2,128
  801b18:	10bfe004 	addi	r2,r2,-128
  801b1c:	10000226 	beq	r2,zero,801b28 <tick+0x17e0>
         start_LRI =(start_LRI||1);
  801b20:	00800044 	movi	r2,1
  801b24:	d0a78105 	stb	r2,-25084(gp)
      }
      g91 =(PRE_g90);
  801b28:	d0a75203 	ldbu	r2,-25272(gp)
  801b2c:	d0a74f45 	stb	r2,-25283(gp)
      g91b = g91;
  801b30:	d0a74f43 	ldbu	r2,-25283(gp)
  801b34:	d0a787c5 	stb	r2,-25057(gp)
      if(g91b){
  801b38:	d0a787c3 	ldbu	r2,-25057(gp)
  801b3c:	10803fcc 	andi	r2,r2,255
  801b40:	1080201c 	xori	r2,r2,128
  801b44:	10bfe004 	addi	r2,r2,-128
  801b48:	10000226 	beq	r2,zero,801b54 <tick+0x180c>
         start_LRI =(start_LRI||1);
  801b4c:	00800044 	movi	r2,1
  801b50:	d0a78105 	stb	r2,-25084(gp)
      }
      g86 =(PRE_g85);
  801b54:	d0a76303 	ldbu	r2,-25204(gp)
  801b58:	d0a77d85 	stb	r2,-25098(gp)
      _cg86 = VRP_ex;
  801b5c:	d0a77443 	ldbu	r2,-25135(gp)
  801b60:	d0a78785 	stb	r2,-25058(gp)
      g85 =(g84||g91b||(g86&&(!(_cg86))));
  801b64:	d0a76183 	ldbu	r2,-25210(gp)
  801b68:	10803fcc 	andi	r2,r2,255
  801b6c:	1080201c 	xori	r2,r2,128
  801b70:	10bfe004 	addi	r2,r2,-128
  801b74:	10000f1e 	bne	r2,zero,801bb4 <tick+0x186c>
  801b78:	d0a787c3 	ldbu	r2,-25057(gp)
  801b7c:	10803fcc 	andi	r2,r2,255
  801b80:	1080201c 	xori	r2,r2,128
  801b84:	10bfe004 	addi	r2,r2,-128
  801b88:	10000a1e 	bne	r2,zero,801bb4 <tick+0x186c>
  801b8c:	d0a77d83 	ldbu	r2,-25098(gp)
  801b90:	10803fcc 	andi	r2,r2,255
  801b94:	1080201c 	xori	r2,r2,128
  801b98:	10bfe004 	addi	r2,r2,-128
  801b9c:	10000726 	beq	r2,zero,801bbc <tick+0x1874>
  801ba0:	d0a78783 	ldbu	r2,-25058(gp)
  801ba4:	10803fcc 	andi	r2,r2,255
  801ba8:	1080201c 	xori	r2,r2,128
  801bac:	10bfe004 	addi	r2,r2,-128
  801bb0:	1000021e 	bne	r2,zero,801bbc <tick+0x1874>
  801bb4:	00800044 	movi	r2,1
  801bb8:	00000106 	br	801bc0 <tick+0x1878>
  801bbc:	0005883a 	mov	r2,zero
  801bc0:	d0a75505 	stb	r2,-25260(gp)
      g92 =(g88&&(!(_cg88)));
  801bc4:	d0a79303 	ldbu	r2,-25012(gp)
  801bc8:	10803fcc 	andi	r2,r2,255
  801bcc:	1080201c 	xori	r2,r2,128
  801bd0:	10bfe004 	addi	r2,r2,-128
  801bd4:	10000726 	beq	r2,zero,801bf4 <tick+0x18ac>
  801bd8:	d0a79703 	ldbu	r2,-24996(gp)
  801bdc:	10803fcc 	andi	r2,r2,255
  801be0:	1080201c 	xori	r2,r2,128
  801be4:	10bfe004 	addi	r2,r2,-128
  801be8:	1000021e 	bne	r2,zero,801bf4 <tick+0x18ac>
  801bec:	00800044 	movi	r2,1
  801bf0:	00000106 	br	801bf8 <tick+0x18b0>
  801bf4:	0005883a 	mov	r2,zero
  801bf8:	d0a75c85 	stb	r2,-25230(gp)
      _cg92 = Vsense;
  801bfc:	d0a77083 	ldbu	r2,-25150(gp)
  801c00:	d0a79405 	stb	r2,-25008(gp)
      g94 =(g92&&(!(_cg92)));
  801c04:	d0a75c83 	ldbu	r2,-25230(gp)
  801c08:	10803fcc 	andi	r2,r2,255
  801c0c:	1080201c 	xori	r2,r2,128
  801c10:	10bfe004 	addi	r2,r2,-128
  801c14:	10000726 	beq	r2,zero,801c34 <tick+0x18ec>
  801c18:	d0a79403 	ldbu	r2,-25008(gp)
  801c1c:	10803fcc 	andi	r2,r2,255
  801c20:	1080201c 	xori	r2,r2,128
  801c24:	10bfe004 	addi	r2,r2,-128
  801c28:	1000021e 	bne	r2,zero,801c34 <tick+0x18ec>
  801c2c:	00800044 	movi	r2,1
  801c30:	00000106 	br	801c38 <tick+0x18f0>
  801c34:	0005883a 	mov	r2,zero
  801c38:	d0a76c85 	stb	r2,-25166(gp)
      _cg94 = Vpace;
  801c3c:	d0a75cc3 	ldbu	r2,-25229(gp)
  801c40:	d0a78e05 	stb	r2,-25032(gp)
      g87 =((g94&&(!(_cg94)))||(g86&&_cg86));
  801c44:	d0a76c83 	ldbu	r2,-25166(gp)
  801c48:	10803fcc 	andi	r2,r2,255
  801c4c:	1080201c 	xori	r2,r2,128
  801c50:	10bfe004 	addi	r2,r2,-128
  801c54:	10000526 	beq	r2,zero,801c6c <tick+0x1924>
  801c58:	d0a78e03 	ldbu	r2,-25032(gp)
  801c5c:	10803fcc 	andi	r2,r2,255
  801c60:	1080201c 	xori	r2,r2,128
  801c64:	10bfe004 	addi	r2,r2,-128
  801c68:	10000a26 	beq	r2,zero,801c94 <tick+0x194c>
  801c6c:	d0a77d83 	ldbu	r2,-25098(gp)
  801c70:	10803fcc 	andi	r2,r2,255
  801c74:	1080201c 	xori	r2,r2,128
  801c78:	10bfe004 	addi	r2,r2,-128
  801c7c:	10000726 	beq	r2,zero,801c9c <tick+0x1954>
  801c80:	d0a78783 	ldbu	r2,-25058(gp)
  801c84:	10803fcc 	andi	r2,r2,255
  801c88:	1080201c 	xori	r2,r2,128
  801c8c:	10bfe004 	addi	r2,r2,-128
  801c90:	10000226 	beq	r2,zero,801c9c <tick+0x1954>
  801c94:	00800044 	movi	r2,1
  801c98:	00000106 	br	801ca0 <tick+0x1958>
  801c9c:	0005883a 	mov	r2,zero
  801ca0:	d0a75a85 	stb	r2,-25238(gp)
      g93 =(g92&&_cg92);
  801ca4:	d0a75c83 	ldbu	r2,-25230(gp)
  801ca8:	10803fcc 	andi	r2,r2,255
  801cac:	1080201c 	xori	r2,r2,128
  801cb0:	10bfe004 	addi	r2,r2,-128
  801cb4:	10000726 	beq	r2,zero,801cd4 <tick+0x198c>
  801cb8:	d0a79403 	ldbu	r2,-25008(gp)
  801cbc:	10803fcc 	andi	r2,r2,255
  801cc0:	1080201c 	xori	r2,r2,128
  801cc4:	10bfe004 	addi	r2,r2,-128
  801cc8:	10000226 	beq	r2,zero,801cd4 <tick+0x198c>
  801ccc:	00800044 	movi	r2,1
  801cd0:	00000106 	br	801cd8 <tick+0x1990>
  801cd4:	0005883a 	mov	r2,zero
  801cd8:	d0a77c45 	stb	r2,-25103(gp)
      if(g93){
  801cdc:	d0a77c43 	ldbu	r2,-25103(gp)
  801ce0:	10803fcc 	andi	r2,r2,255
  801ce4:	1080201c 	xori	r2,r2,128
  801ce8:	10bfe004 	addi	r2,r2,-128
  801cec:	10000226 	beq	r2,zero,801cf8 <tick+0x19b0>
         stop_LRI =(stop_LRI||1);
  801cf0:	00800044 	movi	r2,1
  801cf4:	d0a79585 	stb	r2,-25002(gp)
      }
      g95 =(g94&&_cg94);
  801cf8:	d0a76c83 	ldbu	r2,-25166(gp)
  801cfc:	10803fcc 	andi	r2,r2,255
  801d00:	1080201c 	xori	r2,r2,128
  801d04:	10bfe004 	addi	r2,r2,-128
  801d08:	10000726 	beq	r2,zero,801d28 <tick+0x19e0>
  801d0c:	d0a78e03 	ldbu	r2,-25032(gp)
  801d10:	10803fcc 	andi	r2,r2,255
  801d14:	1080201c 	xori	r2,r2,128
  801d18:	10bfe004 	addi	r2,r2,-128
  801d1c:	10000226 	beq	r2,zero,801d28 <tick+0x19e0>
  801d20:	00800044 	movi	r2,1
  801d24:	00000106 	br	801d2c <tick+0x19e4>
  801d28:	0005883a 	mov	r2,zero
  801d2c:	d0a77fc5 	stb	r2,-25089(gp)
      if(g95){
  801d30:	d0a77fc3 	ldbu	r2,-25089(gp)
  801d34:	10803fcc 	andi	r2,r2,255
  801d38:	1080201c 	xori	r2,r2,128
  801d3c:	10bfe004 	addi	r2,r2,-128
  801d40:	10000226 	beq	r2,zero,801d4c <tick+0x1a04>
         stop_LRI =(stop_LRI||1);
  801d44:	00800044 	movi	r2,1
  801d48:	d0a79585 	stb	r2,-25002(gp)
      }
      g90 =(g93||g95||g89);
  801d4c:	d0a77c43 	ldbu	r2,-25103(gp)
  801d50:	10803fcc 	andi	r2,r2,255
  801d54:	1080201c 	xori	r2,r2,128
  801d58:	10bfe004 	addi	r2,r2,-128
  801d5c:	10000a1e 	bne	r2,zero,801d88 <tick+0x1a40>
  801d60:	d0a77fc3 	ldbu	r2,-25089(gp)
  801d64:	10803fcc 	andi	r2,r2,255
  801d68:	1080201c 	xori	r2,r2,128
  801d6c:	10bfe004 	addi	r2,r2,-128
  801d70:	1000051e 	bne	r2,zero,801d88 <tick+0x1a40>
  801d74:	d0a77ec3 	ldbu	r2,-25093(gp)
  801d78:	10803fcc 	andi	r2,r2,255
  801d7c:	1080201c 	xori	r2,r2,128
  801d80:	10bfe004 	addi	r2,r2,-128
  801d84:	10000226 	beq	r2,zero,801d90 <tick+0x1a48>
  801d88:	00800044 	movi	r2,1
  801d8c:	00000106 	br	801d94 <tick+0x1a4c>
  801d90:	0005883a 	mov	r2,zero
  801d94:	d0a77a85 	stb	r2,-25110(gp)
      g97 = g1;
  801d98:	d0a75d03 	ldbu	r2,-25228(gp)
  801d9c:	d0a75ec5 	stb	r2,-25221(gp)
      g99 =(PRE_g98);
  801da0:	d0a79083 	ldbu	r2,-25022(gp)
  801da4:	d0a77145 	stb	r2,-25147(gp)
      _cg99 = Vsense;
  801da8:	d0a77083 	ldbu	r2,-25150(gp)
  801dac:	d0a74ec5 	stb	r2,-25285(gp)
      g111 =(g99&&(!(_cg99)));
  801db0:	d0a77143 	ldbu	r2,-25147(gp)
  801db4:	10803fcc 	andi	r2,r2,255
  801db8:	1080201c 	xori	r2,r2,128
  801dbc:	10bfe004 	addi	r2,r2,-128
  801dc0:	10000726 	beq	r2,zero,801de0 <tick+0x1a98>
  801dc4:	d0a74ec3 	ldbu	r2,-25285(gp)
  801dc8:	10803fcc 	andi	r2,r2,255
  801dcc:	1080201c 	xori	r2,r2,128
  801dd0:	10bfe004 	addi	r2,r2,-128
  801dd4:	1000021e 	bne	r2,zero,801de0 <tick+0x1a98>
  801dd8:	00800044 	movi	r2,1
  801ddc:	00000106 	br	801de4 <tick+0x1a9c>
  801de0:	0005883a 	mov	r2,zero
  801de4:	d0a750c5 	stb	r2,-25277(gp)
      _cg111 = Vpace;
  801de8:	d0a75cc3 	ldbu	r2,-25229(gp)
  801dec:	d0a765c5 	stb	r2,-25193(gp)
      g98 =((g111&&(!(_cg111)))||g97);
  801df0:	d0a750c3 	ldbu	r2,-25277(gp)
  801df4:	10803fcc 	andi	r2,r2,255
  801df8:	1080201c 	xori	r2,r2,128
  801dfc:	10bfe004 	addi	r2,r2,-128
  801e00:	10000526 	beq	r2,zero,801e18 <tick+0x1ad0>
  801e04:	d0a765c3 	ldbu	r2,-25193(gp)
  801e08:	10803fcc 	andi	r2,r2,255
  801e0c:	1080201c 	xori	r2,r2,128
  801e10:	10bfe004 	addi	r2,r2,-128
  801e14:	10000526 	beq	r2,zero,801e2c <tick+0x1ae4>
  801e18:	d0a75ec3 	ldbu	r2,-25221(gp)
  801e1c:	10803fcc 	andi	r2,r2,255
  801e20:	1080201c 	xori	r2,r2,128
  801e24:	10bfe004 	addi	r2,r2,-128
  801e28:	10000226 	beq	r2,zero,801e34 <tick+0x1aec>
  801e2c:	00800044 	movi	r2,1
  801e30:	00000106 	br	801e38 <tick+0x1af0>
  801e34:	0005883a 	mov	r2,zero
  801e38:	d0a78605 	stb	r2,-25064(gp)
      g102 =(PRE_g101);
  801e3c:	d0a76e43 	ldbu	r2,-25159(gp)
  801e40:	d0a758c5 	stb	r2,-25245(gp)
      _cg102 = VRP_ex;
  801e44:	d0a77443 	ldbu	r2,-25135(gp)
  801e48:	d0a79bc5 	stb	r2,-24977(gp)
      g109 =(PRE_g108);
  801e4c:	d0a797c3 	ldbu	r2,-24993(gp)
  801e50:	d0a79905 	stb	r2,-24988(gp)
      _cg109 = Vsense;
  801e54:	d0a77083 	ldbu	r2,-25150(gp)
  801e58:	d0a79685 	stb	r2,-24998(gp)
      g103 =((g102&&_cg102)||(g109&&(!(_cg109))));
  801e5c:	d0a758c3 	ldbu	r2,-25245(gp)
  801e60:	10803fcc 	andi	r2,r2,255
  801e64:	1080201c 	xori	r2,r2,128
  801e68:	10bfe004 	addi	r2,r2,-128
  801e6c:	10000526 	beq	r2,zero,801e84 <tick+0x1b3c>
  801e70:	d0a79bc3 	ldbu	r2,-24977(gp)
  801e74:	10803fcc 	andi	r2,r2,255
  801e78:	1080201c 	xori	r2,r2,128
  801e7c:	10bfe004 	addi	r2,r2,-128
  801e80:	10000a1e 	bne	r2,zero,801eac <tick+0x1b64>
  801e84:	d0a79903 	ldbu	r2,-24988(gp)
  801e88:	10803fcc 	andi	r2,r2,255
  801e8c:	1080201c 	xori	r2,r2,128
  801e90:	10bfe004 	addi	r2,r2,-128
  801e94:	10000726 	beq	r2,zero,801eb4 <tick+0x1b6c>
  801e98:	d0a79683 	ldbu	r2,-24998(gp)
  801e9c:	10803fcc 	andi	r2,r2,255
  801ea0:	1080201c 	xori	r2,r2,128
  801ea4:	10bfe004 	addi	r2,r2,-128
  801ea8:	1000021e 	bne	r2,zero,801eb4 <tick+0x1b6c>
  801eac:	00800044 	movi	r2,1
  801eb0:	00000106 	br	801eb8 <tick+0x1b70>
  801eb4:	0005883a 	mov	r2,zero
  801eb8:	d0a75445 	stb	r2,-25263(gp)
      _cg103 = URI_ex;
  801ebc:	d0a77783 	ldbu	r2,-25122(gp)
  801ec0:	d0a793c5 	stb	r2,-25009(gp)
      g107 =(PRE_g106);
  801ec4:	d0a77883 	ldbu	r2,-25118(gp)
  801ec8:	d0a78245 	stb	r2,-25079(gp)
      g104 =((g103&&_cg103)||g107);
  801ecc:	d0a75443 	ldbu	r2,-25263(gp)
  801ed0:	10803fcc 	andi	r2,r2,255
  801ed4:	1080201c 	xori	r2,r2,128
  801ed8:	10bfe004 	addi	r2,r2,-128
  801edc:	10000526 	beq	r2,zero,801ef4 <tick+0x1bac>
  801ee0:	d0a793c3 	ldbu	r2,-25009(gp)
  801ee4:	10803fcc 	andi	r2,r2,255
  801ee8:	1080201c 	xori	r2,r2,128
  801eec:	10bfe004 	addi	r2,r2,-128
  801ef0:	1000051e 	bne	r2,zero,801f08 <tick+0x1bc0>
  801ef4:	d0a78243 	ldbu	r2,-25079(gp)
  801ef8:	10803fcc 	andi	r2,r2,255
  801efc:	1080201c 	xori	r2,r2,128
  801f00:	10bfe004 	addi	r2,r2,-128
  801f04:	10000226 	beq	r2,zero,801f10 <tick+0x1bc8>
  801f08:	00800044 	movi	r2,1
  801f0c:	00000106 	br	801f14 <tick+0x1bcc>
  801f10:	0005883a 	mov	r2,zero
  801f14:	d0a78505 	stb	r2,-25068(gp)
      _cg104 = Vpace;
  801f18:	d0a75cc3 	ldbu	r2,-25229(gp)
  801f1c:	d0a76105 	stb	r2,-25212(gp)
      g105 =(g104&&_cg104);
  801f20:	d0a78503 	ldbu	r2,-25068(gp)
  801f24:	10803fcc 	andi	r2,r2,255
  801f28:	1080201c 	xori	r2,r2,128
  801f2c:	10bfe004 	addi	r2,r2,-128
  801f30:	10000726 	beq	r2,zero,801f50 <tick+0x1c08>
  801f34:	d0a76103 	ldbu	r2,-25212(gp)
  801f38:	10803fcc 	andi	r2,r2,255
  801f3c:	1080201c 	xori	r2,r2,128
  801f40:	10bfe004 	addi	r2,r2,-128
  801f44:	10000226 	beq	r2,zero,801f50 <tick+0x1c08>
  801f48:	00800044 	movi	r2,1
  801f4c:	00000106 	br	801f54 <tick+0x1c0c>
  801f50:	0005883a 	mov	r2,zero
  801f54:	d0a76685 	stb	r2,-25190(gp)
      if(g105){
  801f58:	d0a76683 	ldbu	r2,-25190(gp)
  801f5c:	10803fcc 	andi	r2,r2,255
  801f60:	1080201c 	xori	r2,r2,128
  801f64:	10bfe004 	addi	r2,r2,-128
  801f68:	10000226 	beq	r2,zero,801f74 <tick+0x1c2c>
         start_URI =(start_URI||1);
  801f6c:	00800044 	movi	r2,1
  801f70:	d0a78705 	stb	r2,-25060(gp)
      }
      g110 =(g109&&_cg109);
  801f74:	d0a79903 	ldbu	r2,-24988(gp)
  801f78:	10803fcc 	andi	r2,r2,255
  801f7c:	1080201c 	xori	r2,r2,128
  801f80:	10bfe004 	addi	r2,r2,-128
  801f84:	10000726 	beq	r2,zero,801fa4 <tick+0x1c5c>
  801f88:	d0a79683 	ldbu	r2,-24998(gp)
  801f8c:	10803fcc 	andi	r2,r2,255
  801f90:	1080201c 	xori	r2,r2,128
  801f94:	10bfe004 	addi	r2,r2,-128
  801f98:	10000226 	beq	r2,zero,801fa4 <tick+0x1c5c>
  801f9c:	00800044 	movi	r2,1
  801fa0:	00000106 	br	801fa8 <tick+0x1c60>
  801fa4:	0005883a 	mov	r2,zero
  801fa8:	d0a76d05 	stb	r2,-25164(gp)
      if(g110){
  801fac:	d0a76d03 	ldbu	r2,-25164(gp)
  801fb0:	10803fcc 	andi	r2,r2,255
  801fb4:	1080201c 	xori	r2,r2,128
  801fb8:	10bfe004 	addi	r2,r2,-128
  801fbc:	10000226 	beq	r2,zero,801fc8 <tick+0x1c80>
         stop_URI =(stop_URI||1);
  801fc0:	00800044 	movi	r2,1
  801fc4:	d0a778c5 	stb	r2,-25117(gp)
      }
      g100 =(g105||g110||(g111&&_cg111)||(g99&&_cg99));
  801fc8:	d0a76683 	ldbu	r2,-25190(gp)
  801fcc:	10803fcc 	andi	r2,r2,255
  801fd0:	1080201c 	xori	r2,r2,128
  801fd4:	10bfe004 	addi	r2,r2,-128
  801fd8:	1000191e 	bne	r2,zero,802040 <tick+0x1cf8>
  801fdc:	d0a76d03 	ldbu	r2,-25164(gp)
  801fe0:	10803fcc 	andi	r2,r2,255
  801fe4:	1080201c 	xori	r2,r2,128
  801fe8:	10bfe004 	addi	r2,r2,-128
  801fec:	1000141e 	bne	r2,zero,802040 <tick+0x1cf8>
  801ff0:	d0a750c3 	ldbu	r2,-25277(gp)
  801ff4:	10803fcc 	andi	r2,r2,255
  801ff8:	1080201c 	xori	r2,r2,128
  801ffc:	10bfe004 	addi	r2,r2,-128
  802000:	10000526 	beq	r2,zero,802018 <tick+0x1cd0>
  802004:	d0a765c3 	ldbu	r2,-25193(gp)
  802008:	10803fcc 	andi	r2,r2,255
  80200c:	1080201c 	xori	r2,r2,128
  802010:	10bfe004 	addi	r2,r2,-128
  802014:	10000a1e 	bne	r2,zero,802040 <tick+0x1cf8>
  802018:	d0a77143 	ldbu	r2,-25147(gp)
  80201c:	10803fcc 	andi	r2,r2,255
  802020:	1080201c 	xori	r2,r2,128
  802024:	10bfe004 	addi	r2,r2,-128
  802028:	10000726 	beq	r2,zero,802048 <tick+0x1d00>
  80202c:	d0a74ec3 	ldbu	r2,-25285(gp)
  802030:	10803fcc 	andi	r2,r2,255
  802034:	1080201c 	xori	r2,r2,128
  802038:	10bfe004 	addi	r2,r2,-128
  80203c:	10000226 	beq	r2,zero,802048 <tick+0x1d00>
  802040:	00800044 	movi	r2,1
  802044:	00000106 	br	80204c <tick+0x1d04>
  802048:	0005883a 	mov	r2,zero
  80204c:	d0a77045 	stb	r2,-25151(gp)
      if(g100){
  802050:	d0a77043 	ldbu	r2,-25151(gp)
  802054:	10803fcc 	andi	r2,r2,255
  802058:	1080201c 	xori	r2,r2,128
  80205c:	10bfe004 	addi	r2,r2,-128
  802060:	10000226 	beq	r2,zero,80206c <tick+0x1d24>
         start_URI =(start_URI||1);
  802064:	00800044 	movi	r2,1
  802068:	d0a78705 	stb	r2,-25060(gp)
      }
      g101 =(g100||(g102&&(!(_cg102))));
  80206c:	d0a77043 	ldbu	r2,-25151(gp)
  802070:	10803fcc 	andi	r2,r2,255
  802074:	1080201c 	xori	r2,r2,128
  802078:	10bfe004 	addi	r2,r2,-128
  80207c:	10000a1e 	bne	r2,zero,8020a8 <tick+0x1d60>
  802080:	d0a758c3 	ldbu	r2,-25245(gp)
  802084:	10803fcc 	andi	r2,r2,255
  802088:	1080201c 	xori	r2,r2,128
  80208c:	10bfe004 	addi	r2,r2,-128
  802090:	10000726 	beq	r2,zero,8020b0 <tick+0x1d68>
  802094:	d0a79bc3 	ldbu	r2,-24977(gp)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	1000021e 	bne	r2,zero,8020b0 <tick+0x1d68>
  8020a8:	00800044 	movi	r2,1
  8020ac:	00000106 	br	8020b4 <tick+0x1d6c>
  8020b0:	0005883a 	mov	r2,zero
  8020b4:	d0a77405 	stb	r2,-25136(gp)
      g106 =(g104&&(!(_cg104)));
  8020b8:	d0a78503 	ldbu	r2,-25068(gp)
  8020bc:	10803fcc 	andi	r2,r2,255
  8020c0:	1080201c 	xori	r2,r2,128
  8020c4:	10bfe004 	addi	r2,r2,-128
  8020c8:	10000726 	beq	r2,zero,8020e8 <tick+0x1da0>
  8020cc:	d0a76103 	ldbu	r2,-25212(gp)
  8020d0:	10803fcc 	andi	r2,r2,255
  8020d4:	1080201c 	xori	r2,r2,128
  8020d8:	10bfe004 	addi	r2,r2,-128
  8020dc:	1000021e 	bne	r2,zero,8020e8 <tick+0x1da0>
  8020e0:	00800044 	movi	r2,1
  8020e4:	00000106 	br	8020ec <tick+0x1da4>
  8020e8:	0005883a 	mov	r2,zero
  8020ec:	d0a79ac5 	stb	r2,-24981(gp)
      g108 =(g103&&(!(_cg103)));
  8020f0:	d0a75443 	ldbu	r2,-25263(gp)
  8020f4:	10803fcc 	andi	r2,r2,255
  8020f8:	1080201c 	xori	r2,r2,128
  8020fc:	10bfe004 	addi	r2,r2,-128
  802100:	10000726 	beq	r2,zero,802120 <tick+0x1dd8>
  802104:	d0a793c3 	ldbu	r2,-25009(gp)
  802108:	10803fcc 	andi	r2,r2,255
  80210c:	1080201c 	xori	r2,r2,128
  802110:	10bfe004 	addi	r2,r2,-128
  802114:	1000021e 	bne	r2,zero,802120 <tick+0x1dd8>
  802118:	00800044 	movi	r2,1
  80211c:	00000106 	br	802124 <tick+0x1ddc>
  802120:	0005883a 	mov	r2,zero
  802124:	d0a75005 	stb	r2,-25280(gp)
      g113 = g1;
  802128:	d0a75d03 	ldbu	r2,-25228(gp)
  80212c:	d0a78345 	stb	r2,-25075(gp)
      g115 =(PRE_g114);
  802130:	d0a75583 	ldbu	r2,-25258(gp)
  802134:	d0a75985 	stb	r2,-25242(gp)
      g115b = g115;
  802138:	d0a75983 	ldbu	r2,-25242(gp)
  80213c:	d0a791c5 	stb	r2,-25017(gp)
      _cg115 = start_AVI;
  802140:	d0a76a83 	ldbu	r2,-25174(gp)
  802144:	d0a78185 	stb	r2,-25082(gp)
      g117 =(PRE_g116);
  802148:	d0a76743 	ldbu	r2,-25187(gp)
  80214c:	d0a768c5 	stb	r2,-25181(gp)
      _cg117 = AVI_ex;
  802150:	d0a77383 	ldbu	r2,-25138(gp)
  802154:	d0a78385 	stb	r2,-25074(gp)
      g114 =((g115b&&(!(_cg115)))||g113||(g117&&_cg117));
  802158:	d0a791c3 	ldbu	r2,-25017(gp)
  80215c:	10803fcc 	andi	r2,r2,255
  802160:	1080201c 	xori	r2,r2,128
  802164:	10bfe004 	addi	r2,r2,-128
  802168:	10000526 	beq	r2,zero,802180 <tick+0x1e38>
  80216c:	d0a78183 	ldbu	r2,-25082(gp)
  802170:	10803fcc 	andi	r2,r2,255
  802174:	1080201c 	xori	r2,r2,128
  802178:	10bfe004 	addi	r2,r2,-128
  80217c:	10000f26 	beq	r2,zero,8021bc <tick+0x1e74>
  802180:	d0a78343 	ldbu	r2,-25075(gp)
  802184:	10803fcc 	andi	r2,r2,255
  802188:	1080201c 	xori	r2,r2,128
  80218c:	10bfe004 	addi	r2,r2,-128
  802190:	10000a1e 	bne	r2,zero,8021bc <tick+0x1e74>
  802194:	d0a768c3 	ldbu	r2,-25181(gp)
  802198:	10803fcc 	andi	r2,r2,255
  80219c:	1080201c 	xori	r2,r2,128
  8021a0:	10bfe004 	addi	r2,r2,-128
  8021a4:	10000726 	beq	r2,zero,8021c4 <tick+0x1e7c>
  8021a8:	d0a78383 	ldbu	r2,-25074(gp)
  8021ac:	10803fcc 	andi	r2,r2,255
  8021b0:	1080201c 	xori	r2,r2,128
  8021b4:	10bfe004 	addi	r2,r2,-128
  8021b8:	10000226 	beq	r2,zero,8021c4 <tick+0x1e7c>
  8021bc:	00800044 	movi	r2,1
  8021c0:	00000106 	br	8021c8 <tick+0x1e80>
  8021c4:	0005883a 	mov	r2,zero
  8021c8:	d0a77505 	stb	r2,-25132(gp)
      g118 =(g117&&(!(_cg117)));
  8021cc:	d0a768c3 	ldbu	r2,-25181(gp)
  8021d0:	10803fcc 	andi	r2,r2,255
  8021d4:	1080201c 	xori	r2,r2,128
  8021d8:	10bfe004 	addi	r2,r2,-128
  8021dc:	10000726 	beq	r2,zero,8021fc <tick+0x1eb4>
  8021e0:	d0a78383 	ldbu	r2,-25074(gp)
  8021e4:	10803fcc 	andi	r2,r2,255
  8021e8:	1080201c 	xori	r2,r2,128
  8021ec:	10bfe004 	addi	r2,r2,-128
  8021f0:	1000021e 	bne	r2,zero,8021fc <tick+0x1eb4>
  8021f4:	00800044 	movi	r2,1
  8021f8:	00000106 	br	802200 <tick+0x1eb8>
  8021fc:	0005883a 	mov	r2,zero
  802200:	d0a762c5 	stb	r2,-25205(gp)
      if(g118){
  802204:	d0a762c3 	ldbu	r2,-25205(gp)
  802208:	10803fcc 	andi	r2,r2,255
  80220c:	1080201c 	xori	r2,r2,128
  802210:	10bfe004 	addi	r2,r2,-128
  802214:	10000226 	beq	r2,zero,802220 <tick+0x1ed8>
         AVI_counting =(AVI_counting||1);
  802218:	00800044 	movi	r2,1
  80221c:	d0a799c5 	stb	r2,-24985(gp)
      }
      g116 =(g118||(g115b&&_cg115));
  802220:	d0a762c3 	ldbu	r2,-25205(gp)
  802224:	10803fcc 	andi	r2,r2,255
  802228:	1080201c 	xori	r2,r2,128
  80222c:	10bfe004 	addi	r2,r2,-128
  802230:	10000a1e 	bne	r2,zero,80225c <tick+0x1f14>
  802234:	d0a791c3 	ldbu	r2,-25017(gp)
  802238:	10803fcc 	andi	r2,r2,255
  80223c:	1080201c 	xori	r2,r2,128
  802240:	10bfe004 	addi	r2,r2,-128
  802244:	10000726 	beq	r2,zero,802264 <tick+0x1f1c>
  802248:	d0a78183 	ldbu	r2,-25082(gp)
  80224c:	10803fcc 	andi	r2,r2,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10000226 	beq	r2,zero,802264 <tick+0x1f1c>
  80225c:	00800044 	movi	r2,1
  802260:	00000106 	br	802268 <tick+0x1f20>
  802264:	0005883a 	mov	r2,zero
  802268:	d0a78885 	stb	r2,-25054(gp)
      g120 = g1;
  80226c:	d0a75d03 	ldbu	r2,-25228(gp)
  802270:	d0a79785 	stb	r2,-24994(gp)
      g122 =(PRE_g121);
  802274:	d0a759c3 	ldbu	r2,-25241(gp)
  802278:	d0a77705 	stb	r2,-25124(gp)
      g122b = g122;
  80227c:	d0a77703 	ldbu	r2,-25124(gp)
  802280:	d0a779c5 	stb	r2,-25113(gp)
      _cg122 = start_PVARP;
  802284:	d0a77b03 	ldbu	r2,-25108(gp)
  802288:	d0a78945 	stb	r2,-25051(gp)
      g124 =(PRE_g123);
  80228c:	d0a76943 	ldbu	r2,-25179(gp)
  802290:	d0a78a45 	stb	r2,-25047(gp)
      _cg124 = PVARP_ex;
  802294:	d0a78a03 	ldbu	r2,-25048(gp)
  802298:	d0a76f45 	stb	r2,-25155(gp)
      g121 =((g122b&&(!(_cg122)))||g120||(g124&&_cg124));
  80229c:	d0a779c3 	ldbu	r2,-25113(gp)
  8022a0:	10803fcc 	andi	r2,r2,255
  8022a4:	1080201c 	xori	r2,r2,128
  8022a8:	10bfe004 	addi	r2,r2,-128
  8022ac:	10000526 	beq	r2,zero,8022c4 <tick+0x1f7c>
  8022b0:	d0a78943 	ldbu	r2,-25051(gp)
  8022b4:	10803fcc 	andi	r2,r2,255
  8022b8:	1080201c 	xori	r2,r2,128
  8022bc:	10bfe004 	addi	r2,r2,-128
  8022c0:	10000f26 	beq	r2,zero,802300 <tick+0x1fb8>
  8022c4:	d0a79783 	ldbu	r2,-24994(gp)
  8022c8:	10803fcc 	andi	r2,r2,255
  8022cc:	1080201c 	xori	r2,r2,128
  8022d0:	10bfe004 	addi	r2,r2,-128
  8022d4:	10000a1e 	bne	r2,zero,802300 <tick+0x1fb8>
  8022d8:	d0a78a43 	ldbu	r2,-25047(gp)
  8022dc:	10803fcc 	andi	r2,r2,255
  8022e0:	1080201c 	xori	r2,r2,128
  8022e4:	10bfe004 	addi	r2,r2,-128
  8022e8:	10000726 	beq	r2,zero,802308 <tick+0x1fc0>
  8022ec:	d0a76f43 	ldbu	r2,-25155(gp)
  8022f0:	10803fcc 	andi	r2,r2,255
  8022f4:	1080201c 	xori	r2,r2,128
  8022f8:	10bfe004 	addi	r2,r2,-128
  8022fc:	10000226 	beq	r2,zero,802308 <tick+0x1fc0>
  802300:	00800044 	movi	r2,1
  802304:	00000106 	br	80230c <tick+0x1fc4>
  802308:	0005883a 	mov	r2,zero
  80230c:	d0a79605 	stb	r2,-25000(gp)
      g125 =(g124&&(!(_cg124)));
  802310:	d0a78a43 	ldbu	r2,-25047(gp)
  802314:	10803fcc 	andi	r2,r2,255
  802318:	1080201c 	xori	r2,r2,128
  80231c:	10bfe004 	addi	r2,r2,-128
  802320:	10000726 	beq	r2,zero,802340 <tick+0x1ff8>
  802324:	d0a76f43 	ldbu	r2,-25155(gp)
  802328:	10803fcc 	andi	r2,r2,255
  80232c:	1080201c 	xori	r2,r2,128
  802330:	10bfe004 	addi	r2,r2,-128
  802334:	1000021e 	bne	r2,zero,802340 <tick+0x1ff8>
  802338:	00800044 	movi	r2,1
  80233c:	00000106 	br	802344 <tick+0x1ffc>
  802340:	0005883a 	mov	r2,zero
  802344:	d0a79245 	stb	r2,-25015(gp)
      if(g125){
  802348:	d0a79243 	ldbu	r2,-25015(gp)
  80234c:	10803fcc 	andi	r2,r2,255
  802350:	1080201c 	xori	r2,r2,128
  802354:	10bfe004 	addi	r2,r2,-128
  802358:	10000226 	beq	r2,zero,802364 <tick+0x201c>
         PVARP_counting =(PVARP_counting||1);
  80235c:	00800044 	movi	r2,1
  802360:	d0a76505 	stb	r2,-25196(gp)
      }
      g123 =((g122b&&_cg122)||g125);
  802364:	d0a779c3 	ldbu	r2,-25113(gp)
  802368:	10803fcc 	andi	r2,r2,255
  80236c:	1080201c 	xori	r2,r2,128
  802370:	10bfe004 	addi	r2,r2,-128
  802374:	10000526 	beq	r2,zero,80238c <tick+0x2044>
  802378:	d0a78943 	ldbu	r2,-25051(gp)
  80237c:	10803fcc 	andi	r2,r2,255
  802380:	1080201c 	xori	r2,r2,128
  802384:	10bfe004 	addi	r2,r2,-128
  802388:	1000051e 	bne	r2,zero,8023a0 <tick+0x2058>
  80238c:	d0a79243 	ldbu	r2,-25015(gp)
  802390:	10803fcc 	andi	r2,r2,255
  802394:	1080201c 	xori	r2,r2,128
  802398:	10bfe004 	addi	r2,r2,-128
  80239c:	10000226 	beq	r2,zero,8023a8 <tick+0x2060>
  8023a0:	00800044 	movi	r2,1
  8023a4:	00000106 	br	8023ac <tick+0x2064>
  8023a8:	0005883a 	mov	r2,zero
  8023ac:	d0a75b85 	stb	r2,-25234(gp)
      g127 = g1;
  8023b0:	d0a75d03 	ldbu	r2,-25228(gp)
  8023b4:	d0a75605 	stb	r2,-25256(gp)
      g131 =(PRE_g130);
  8023b8:	d0a78543 	ldbu	r2,-25067(gp)
  8023bc:	d0a775c5 	stb	r2,-25129(gp)
      _cg131 = AEI_ex;
  8023c0:	d0a75383 	ldbu	r2,-25266(gp)
  8023c4:	d0a78045 	stb	r2,-25087(gp)
      g129 =(PRE_g128);
  8023c8:	d0a752c3 	ldbu	r2,-25269(gp)
  8023cc:	d0a77585 	stb	r2,-25130(gp)
      g129b = g129;
  8023d0:	d0a77583 	ldbu	r2,-25130(gp)
  8023d4:	d0a794c5 	stb	r2,-25005(gp)
      _cg129 = start_AEI;
  8023d8:	d0a77f43 	ldbu	r2,-25091(gp)
  8023dc:	d0a78b45 	stb	r2,-25043(gp)
      g128 =((g131&&_cg131)||g127||(g129b&&(!(_cg129))));
  8023e0:	d0a775c3 	ldbu	r2,-25129(gp)
  8023e4:	10803fcc 	andi	r2,r2,255
  8023e8:	1080201c 	xori	r2,r2,128
  8023ec:	10bfe004 	addi	r2,r2,-128
  8023f0:	10000526 	beq	r2,zero,802408 <tick+0x20c0>
  8023f4:	d0a78043 	ldbu	r2,-25087(gp)
  8023f8:	10803fcc 	andi	r2,r2,255
  8023fc:	1080201c 	xori	r2,r2,128
  802400:	10bfe004 	addi	r2,r2,-128
  802404:	10000f1e 	bne	r2,zero,802444 <tick+0x20fc>
  802408:	d0a75603 	ldbu	r2,-25256(gp)
  80240c:	10803fcc 	andi	r2,r2,255
  802410:	1080201c 	xori	r2,r2,128
  802414:	10bfe004 	addi	r2,r2,-128
  802418:	10000a1e 	bne	r2,zero,802444 <tick+0x20fc>
  80241c:	d0a794c3 	ldbu	r2,-25005(gp)
  802420:	10803fcc 	andi	r2,r2,255
  802424:	1080201c 	xori	r2,r2,128
  802428:	10bfe004 	addi	r2,r2,-128
  80242c:	10000726 	beq	r2,zero,80244c <tick+0x2104>
  802430:	d0a78b43 	ldbu	r2,-25043(gp)
  802434:	10803fcc 	andi	r2,r2,255
  802438:	1080201c 	xori	r2,r2,128
  80243c:	10bfe004 	addi	r2,r2,-128
  802440:	1000021e 	bne	r2,zero,80244c <tick+0x2104>
  802444:	00800044 	movi	r2,1
  802448:	00000106 	br	802450 <tick+0x2108>
  80244c:	0005883a 	mov	r2,zero
  802450:	d0a76f05 	stb	r2,-25156(gp)
      g132 =(g131&&(!(_cg131)));
  802454:	d0a775c3 	ldbu	r2,-25129(gp)
  802458:	10803fcc 	andi	r2,r2,255
  80245c:	1080201c 	xori	r2,r2,128
  802460:	10bfe004 	addi	r2,r2,-128
  802464:	10000726 	beq	r2,zero,802484 <tick+0x213c>
  802468:	d0a78043 	ldbu	r2,-25087(gp)
  80246c:	10803fcc 	andi	r2,r2,255
  802470:	1080201c 	xori	r2,r2,128
  802474:	10bfe004 	addi	r2,r2,-128
  802478:	1000021e 	bne	r2,zero,802484 <tick+0x213c>
  80247c:	00800044 	movi	r2,1
  802480:	00000106 	br	802488 <tick+0x2140>
  802484:	0005883a 	mov	r2,zero
  802488:	d0a764c5 	stb	r2,-25197(gp)
      if(g132){
  80248c:	d0a764c3 	ldbu	r2,-25197(gp)
  802490:	10803fcc 	andi	r2,r2,255
  802494:	1080201c 	xori	r2,r2,128
  802498:	10bfe004 	addi	r2,r2,-128
  80249c:	10000226 	beq	r2,zero,8024a8 <tick+0x2160>
         AEI_counting =(AEI_counting||1);
  8024a0:	00800044 	movi	r2,1
  8024a4:	d0a772c5 	stb	r2,-25141(gp)
      }
      g130 =(g132||(g129b&&_cg129));
  8024a8:	d0a764c3 	ldbu	r2,-25197(gp)
  8024ac:	10803fcc 	andi	r2,r2,255
  8024b0:	1080201c 	xori	r2,r2,128
  8024b4:	10bfe004 	addi	r2,r2,-128
  8024b8:	10000a1e 	bne	r2,zero,8024e4 <tick+0x219c>
  8024bc:	d0a794c3 	ldbu	r2,-25005(gp)
  8024c0:	10803fcc 	andi	r2,r2,255
  8024c4:	1080201c 	xori	r2,r2,128
  8024c8:	10bfe004 	addi	r2,r2,-128
  8024cc:	10000726 	beq	r2,zero,8024ec <tick+0x21a4>
  8024d0:	d0a78b43 	ldbu	r2,-25043(gp)
  8024d4:	10803fcc 	andi	r2,r2,255
  8024d8:	1080201c 	xori	r2,r2,128
  8024dc:	10bfe004 	addi	r2,r2,-128
  8024e0:	10000226 	beq	r2,zero,8024ec <tick+0x21a4>
  8024e4:	00800044 	movi	r2,1
  8024e8:	00000106 	br	8024f0 <tick+0x21a8>
  8024ec:	0005883a 	mov	r2,zero
  8024f0:	d0a79485 	stb	r2,-25006(gp)
      g134 = g1;
  8024f4:	d0a75d03 	ldbu	r2,-25228(gp)
  8024f8:	d0a77905 	stb	r2,-25116(gp)
      g136 =(PRE_g135);
  8024fc:	d0a79b03 	ldbu	r2,-24980(gp)
  802500:	d0a76f85 	stb	r2,-25154(gp)
      g136b = g136;
  802504:	d0a76f83 	ldbu	r2,-25154(gp)
  802508:	d0a770c5 	stb	r2,-25149(gp)
      _cg136 = start_LRI;
  80250c:	d0a78103 	ldbu	r2,-25084(gp)
  802510:	d0a77945 	stb	r2,-25115(gp)
      g138 =(PRE_g137);
  802514:	d0a77f83 	ldbu	r2,-25090(gp)
  802518:	d0a78145 	stb	r2,-25083(gp)
      _cg138 = LRI_ex;
  80251c:	d0a76e83 	ldbu	r2,-25158(gp)
  802520:	d0a790c5 	stb	r2,-25021(gp)
      g135 =((g136b&&(!(_cg136)))||g134||(g138&&_cg138));
  802524:	d0a770c3 	ldbu	r2,-25149(gp)
  802528:	10803fcc 	andi	r2,r2,255
  80252c:	1080201c 	xori	r2,r2,128
  802530:	10bfe004 	addi	r2,r2,-128
  802534:	10000526 	beq	r2,zero,80254c <tick+0x2204>
  802538:	d0a77943 	ldbu	r2,-25115(gp)
  80253c:	10803fcc 	andi	r2,r2,255
  802540:	1080201c 	xori	r2,r2,128
  802544:	10bfe004 	addi	r2,r2,-128
  802548:	10000f26 	beq	r2,zero,802588 <tick+0x2240>
  80254c:	d0a77903 	ldbu	r2,-25116(gp)
  802550:	10803fcc 	andi	r2,r2,255
  802554:	1080201c 	xori	r2,r2,128
  802558:	10bfe004 	addi	r2,r2,-128
  80255c:	10000a1e 	bne	r2,zero,802588 <tick+0x2240>
  802560:	d0a78143 	ldbu	r2,-25083(gp)
  802564:	10803fcc 	andi	r2,r2,255
  802568:	1080201c 	xori	r2,r2,128
  80256c:	10bfe004 	addi	r2,r2,-128
  802570:	10000726 	beq	r2,zero,802590 <tick+0x2248>
  802574:	d0a790c3 	ldbu	r2,-25021(gp)
  802578:	10803fcc 	andi	r2,r2,255
  80257c:	1080201c 	xori	r2,r2,128
  802580:	10bfe004 	addi	r2,r2,-128
  802584:	10000226 	beq	r2,zero,802590 <tick+0x2248>
  802588:	00800044 	movi	r2,1
  80258c:	00000106 	br	802594 <tick+0x224c>
  802590:	0005883a 	mov	r2,zero
  802594:	d0a75d85 	stb	r2,-25226(gp)
      g139 =(g138&&(!(_cg138)));
  802598:	d0a78143 	ldbu	r2,-25083(gp)
  80259c:	10803fcc 	andi	r2,r2,255
  8025a0:	1080201c 	xori	r2,r2,128
  8025a4:	10bfe004 	addi	r2,r2,-128
  8025a8:	10000726 	beq	r2,zero,8025c8 <tick+0x2280>
  8025ac:	d0a790c3 	ldbu	r2,-25021(gp)
  8025b0:	10803fcc 	andi	r2,r2,255
  8025b4:	1080201c 	xori	r2,r2,128
  8025b8:	10bfe004 	addi	r2,r2,-128
  8025bc:	1000021e 	bne	r2,zero,8025c8 <tick+0x2280>
  8025c0:	00800044 	movi	r2,1
  8025c4:	00000106 	br	8025cc <tick+0x2284>
  8025c8:	0005883a 	mov	r2,zero
  8025cc:	d0a74f85 	stb	r2,-25282(gp)
      if(g139){
  8025d0:	d0a74f83 	ldbu	r2,-25282(gp)
  8025d4:	10803fcc 	andi	r2,r2,255
  8025d8:	1080201c 	xori	r2,r2,128
  8025dc:	10bfe004 	addi	r2,r2,-128
  8025e0:	10000226 	beq	r2,zero,8025ec <tick+0x22a4>
         LRI_counting =(LRI_counting||1);
  8025e4:	00800044 	movi	r2,1
  8025e8:	d0a76985 	stb	r2,-25178(gp)
      }
      g137 =((g136b&&_cg136)||g139);
  8025ec:	d0a770c3 	ldbu	r2,-25149(gp)
  8025f0:	10803fcc 	andi	r2,r2,255
  8025f4:	1080201c 	xori	r2,r2,128
  8025f8:	10bfe004 	addi	r2,r2,-128
  8025fc:	10000526 	beq	r2,zero,802614 <tick+0x22cc>
  802600:	d0a77943 	ldbu	r2,-25115(gp)
  802604:	10803fcc 	andi	r2,r2,255
  802608:	1080201c 	xori	r2,r2,128
  80260c:	10bfe004 	addi	r2,r2,-128
  802610:	1000051e 	bne	r2,zero,802628 <tick+0x22e0>
  802614:	d0a74f83 	ldbu	r2,-25282(gp)
  802618:	10803fcc 	andi	r2,r2,255
  80261c:	1080201c 	xori	r2,r2,128
  802620:	10bfe004 	addi	r2,r2,-128
  802624:	10000226 	beq	r2,zero,802630 <tick+0x22e8>
  802628:	00800044 	movi	r2,1
  80262c:	00000106 	br	802634 <tick+0x22ec>
  802630:	0005883a 	mov	r2,zero
  802634:	d0a78ac5 	stb	r2,-25045(gp)
      g141 = g1;
  802638:	d0a75d03 	ldbu	r2,-25228(gp)
  80263c:	d0a78805 	stb	r2,-25056(gp)
      g145 =(PRE_g144);
  802640:	d0a76803 	ldbu	r2,-25184(gp)
  802644:	d0a75885 	stb	r2,-25246(gp)
      _cg145 = URI_ex;
  802648:	d0a77783 	ldbu	r2,-25122(gp)
  80264c:	d0a77485 	stb	r2,-25134(gp)
      g143 =(PRE_g142);
  802650:	d0a75803 	ldbu	r2,-25248(gp)
  802654:	d0a77005 	stb	r2,-25152(gp)
      g143b = g143;
  802658:	d0a77003 	ldbu	r2,-25152(gp)
  80265c:	d0a79645 	stb	r2,-24999(gp)
      _cg143 = start_URI;
  802660:	d0a78703 	ldbu	r2,-25060(gp)
  802664:	d0a79945 	stb	r2,-24987(gp)
      g142 =(g141||(g145&&_cg145)||(g143b&&(!(_cg143))));
  802668:	d0a78803 	ldbu	r2,-25056(gp)
  80266c:	10803fcc 	andi	r2,r2,255
  802670:	1080201c 	xori	r2,r2,128
  802674:	10bfe004 	addi	r2,r2,-128
  802678:	1000141e 	bne	r2,zero,8026cc <tick+0x2384>
  80267c:	d0a75883 	ldbu	r2,-25246(gp)
  802680:	10803fcc 	andi	r2,r2,255
  802684:	1080201c 	xori	r2,r2,128
  802688:	10bfe004 	addi	r2,r2,-128
  80268c:	10000526 	beq	r2,zero,8026a4 <tick+0x235c>
  802690:	d0a77483 	ldbu	r2,-25134(gp)
  802694:	10803fcc 	andi	r2,r2,255
  802698:	1080201c 	xori	r2,r2,128
  80269c:	10bfe004 	addi	r2,r2,-128
  8026a0:	10000a1e 	bne	r2,zero,8026cc <tick+0x2384>
  8026a4:	d0a79643 	ldbu	r2,-24999(gp)
  8026a8:	10803fcc 	andi	r2,r2,255
  8026ac:	1080201c 	xori	r2,r2,128
  8026b0:	10bfe004 	addi	r2,r2,-128
  8026b4:	10000726 	beq	r2,zero,8026d4 <tick+0x238c>
  8026b8:	d0a79943 	ldbu	r2,-24987(gp)
  8026bc:	10803fcc 	andi	r2,r2,255
  8026c0:	1080201c 	xori	r2,r2,128
  8026c4:	10bfe004 	addi	r2,r2,-128
  8026c8:	1000021e 	bne	r2,zero,8026d4 <tick+0x238c>
  8026cc:	00800044 	movi	r2,1
  8026d0:	00000106 	br	8026d8 <tick+0x2390>
  8026d4:	0005883a 	mov	r2,zero
  8026d8:	d0a78ec5 	stb	r2,-25029(gp)
      g146 =(g145&&(!(_cg145)));
  8026dc:	d0a75883 	ldbu	r2,-25246(gp)
  8026e0:	10803fcc 	andi	r2,r2,255
  8026e4:	1080201c 	xori	r2,r2,128
  8026e8:	10bfe004 	addi	r2,r2,-128
  8026ec:	10000726 	beq	r2,zero,80270c <tick+0x23c4>
  8026f0:	d0a77483 	ldbu	r2,-25134(gp)
  8026f4:	10803fcc 	andi	r2,r2,255
  8026f8:	1080201c 	xori	r2,r2,128
  8026fc:	10bfe004 	addi	r2,r2,-128
  802700:	1000021e 	bne	r2,zero,80270c <tick+0x23c4>
  802704:	00800044 	movi	r2,1
  802708:	00000106 	br	802710 <tick+0x23c8>
  80270c:	0005883a 	mov	r2,zero
  802710:	d0a75405 	stb	r2,-25264(gp)
      if(g146){
  802714:	d0a75403 	ldbu	r2,-25264(gp)
  802718:	10803fcc 	andi	r2,r2,255
  80271c:	1080201c 	xori	r2,r2,128
  802720:	10bfe004 	addi	r2,r2,-128
  802724:	10000226 	beq	r2,zero,802730 <tick+0x23e8>
         URI_counting =(URI_counting||1);
  802728:	00800044 	movi	r2,1
  80272c:	d0a76705 	stb	r2,-25188(gp)
      }
      g144 =((g143b&&_cg143)||g146);
  802730:	d0a79643 	ldbu	r2,-24999(gp)
  802734:	10803fcc 	andi	r2,r2,255
  802738:	1080201c 	xori	r2,r2,128
  80273c:	10bfe004 	addi	r2,r2,-128
  802740:	10000526 	beq	r2,zero,802758 <tick+0x2410>
  802744:	d0a79943 	ldbu	r2,-24987(gp)
  802748:	10803fcc 	andi	r2,r2,255
  80274c:	1080201c 	xori	r2,r2,128
  802750:	10bfe004 	addi	r2,r2,-128
  802754:	1000051e 	bne	r2,zero,80276c <tick+0x2424>
  802758:	d0a75403 	ldbu	r2,-25264(gp)
  80275c:	10803fcc 	andi	r2,r2,255
  802760:	1080201c 	xori	r2,r2,128
  802764:	10bfe004 	addi	r2,r2,-128
  802768:	10000226 	beq	r2,zero,802774 <tick+0x242c>
  80276c:	00800044 	movi	r2,1
  802770:	00000106 	br	802778 <tick+0x2430>
  802774:	0005883a 	mov	r2,zero
  802778:	d0a773c5 	stb	r2,-25137(gp)
      g148 = g1;
  80277c:	d0a75d03 	ldbu	r2,-25228(gp)
  802780:	d0a76645 	stb	r2,-25191(gp)
      g150 =(PRE_g149);
  802784:	d0a75843 	ldbu	r2,-25247(gp)
  802788:	d0a75b05 	stb	r2,-25236(gp)
      g150b = g150;
  80278c:	d0a75b03 	ldbu	r2,-25236(gp)
  802790:	d0a76205 	stb	r2,-25208(gp)
      _cg150 = start_VRP;
  802794:	d0a76343 	ldbu	r2,-25203(gp)
  802798:	d0a75c45 	stb	r2,-25231(gp)
      g152 =(PRE_g151);
  80279c:	d0a77743 	ldbu	r2,-25123(gp)
  8027a0:	d0a75085 	stb	r2,-25278(gp)
      _cg152 = VRP_ex;
  8027a4:	d0a77443 	ldbu	r2,-25135(gp)
  8027a8:	d0a77645 	stb	r2,-25127(gp)
      g149 =(g148||(g150b&&(!(_cg150)))||(g152&&_cg152));
  8027ac:	d0a76643 	ldbu	r2,-25191(gp)
  8027b0:	10803fcc 	andi	r2,r2,255
  8027b4:	1080201c 	xori	r2,r2,128
  8027b8:	10bfe004 	addi	r2,r2,-128
  8027bc:	1000141e 	bne	r2,zero,802810 <tick+0x24c8>
  8027c0:	d0a76203 	ldbu	r2,-25208(gp)
  8027c4:	10803fcc 	andi	r2,r2,255
  8027c8:	1080201c 	xori	r2,r2,128
  8027cc:	10bfe004 	addi	r2,r2,-128
  8027d0:	10000526 	beq	r2,zero,8027e8 <tick+0x24a0>
  8027d4:	d0a75c43 	ldbu	r2,-25231(gp)
  8027d8:	10803fcc 	andi	r2,r2,255
  8027dc:	1080201c 	xori	r2,r2,128
  8027e0:	10bfe004 	addi	r2,r2,-128
  8027e4:	10000a26 	beq	r2,zero,802810 <tick+0x24c8>
  8027e8:	d0a75083 	ldbu	r2,-25278(gp)
  8027ec:	10803fcc 	andi	r2,r2,255
  8027f0:	1080201c 	xori	r2,r2,128
  8027f4:	10bfe004 	addi	r2,r2,-128
  8027f8:	10000726 	beq	r2,zero,802818 <tick+0x24d0>
  8027fc:	d0a77643 	ldbu	r2,-25127(gp)
  802800:	10803fcc 	andi	r2,r2,255
  802804:	1080201c 	xori	r2,r2,128
  802808:	10bfe004 	addi	r2,r2,-128
  80280c:	10000226 	beq	r2,zero,802818 <tick+0x24d0>
  802810:	00800044 	movi	r2,1
  802814:	00000106 	br	80281c <tick+0x24d4>
  802818:	0005883a 	mov	r2,zero
  80281c:	d0a79a85 	stb	r2,-24982(gp)
      g153 =(g152&&(!(_cg152)));
  802820:	d0a75083 	ldbu	r2,-25278(gp)
  802824:	10803fcc 	andi	r2,r2,255
  802828:	1080201c 	xori	r2,r2,128
  80282c:	10bfe004 	addi	r2,r2,-128
  802830:	10000726 	beq	r2,zero,802850 <tick+0x2508>
  802834:	d0a77643 	ldbu	r2,-25127(gp)
  802838:	10803fcc 	andi	r2,r2,255
  80283c:	1080201c 	xori	r2,r2,128
  802840:	10bfe004 	addi	r2,r2,-128
  802844:	1000021e 	bne	r2,zero,802850 <tick+0x2508>
  802848:	00800044 	movi	r2,1
  80284c:	00000106 	br	802854 <tick+0x250c>
  802850:	0005883a 	mov	r2,zero
  802854:	d0a75245 	stb	r2,-25271(gp)
      if(g153){
  802858:	d0a75243 	ldbu	r2,-25271(gp)
  80285c:	10803fcc 	andi	r2,r2,255
  802860:	1080201c 	xori	r2,r2,128
  802864:	10bfe004 	addi	r2,r2,-128
  802868:	10000226 	beq	r2,zero,802874 <tick+0x252c>
         VRP_counting =(VRP_counting||1);
  80286c:	00800044 	movi	r2,1
  802870:	d0a77845 	stb	r2,-25119(gp)
      }
      g151 =(g153||(g150b&&_cg150));
  802874:	d0a75243 	ldbu	r2,-25271(gp)
  802878:	10803fcc 	andi	r2,r2,255
  80287c:	1080201c 	xori	r2,r2,128
  802880:	10bfe004 	addi	r2,r2,-128
  802884:	10000a1e 	bne	r2,zero,8028b0 <tick+0x2568>
  802888:	d0a76203 	ldbu	r2,-25208(gp)
  80288c:	10803fcc 	andi	r2,r2,255
  802890:	1080201c 	xori	r2,r2,128
  802894:	10bfe004 	addi	r2,r2,-128
  802898:	10000726 	beq	r2,zero,8028b8 <tick+0x2570>
  80289c:	d0a75c43 	ldbu	r2,-25231(gp)
  8028a0:	10803fcc 	andi	r2,r2,255
  8028a4:	1080201c 	xori	r2,r2,128
  8028a8:	10bfe004 	addi	r2,r2,-128
  8028ac:	10000226 	beq	r2,zero,8028b8 <tick+0x2570>
  8028b0:	00800044 	movi	r2,1
  8028b4:	00000106 	br	8028bc <tick+0x2574>
  8028b8:	0005883a 	mov	r2,zero
  8028bc:	d0a76cc5 	stb	r2,-25165(gp)
      g46_e1 =(!((g5||g31||g13||g41||g19||g27)));
  8028c0:	d0a76c43 	ldbu	r2,-25167(gp)
  8028c4:	10803fcc 	andi	r2,r2,255
  8028c8:	1080201c 	xori	r2,r2,128
  8028cc:	10bfe004 	addi	r2,r2,-128
  8028d0:	10001b1e 	bne	r2,zero,802940 <tick+0x25f8>
  8028d4:	d0a76043 	ldbu	r2,-25215(gp)
  8028d8:	10803fcc 	andi	r2,r2,255
  8028dc:	1080201c 	xori	r2,r2,128
  8028e0:	10bfe004 	addi	r2,r2,-128
  8028e4:	1000161e 	bne	r2,zero,802940 <tick+0x25f8>
  8028e8:	d0a78583 	ldbu	r2,-25066(gp)
  8028ec:	10803fcc 	andi	r2,r2,255
  8028f0:	1080201c 	xori	r2,r2,128
  8028f4:	10bfe004 	addi	r2,r2,-128
  8028f8:	1000111e 	bne	r2,zero,802940 <tick+0x25f8>
  8028fc:	d0a761c3 	ldbu	r2,-25209(gp)
  802900:	10803fcc 	andi	r2,r2,255
  802904:	1080201c 	xori	r2,r2,128
  802908:	10bfe004 	addi	r2,r2,-128
  80290c:	10000c1e 	bne	r2,zero,802940 <tick+0x25f8>
  802910:	d0a75043 	ldbu	r2,-25279(gp)
  802914:	10803fcc 	andi	r2,r2,255
  802918:	1080201c 	xori	r2,r2,128
  80291c:	10bfe004 	addi	r2,r2,-128
  802920:	1000071e 	bne	r2,zero,802940 <tick+0x25f8>
  802924:	d0a751c3 	ldbu	r2,-25273(gp)
  802928:	10803fcc 	andi	r2,r2,255
  80292c:	1080201c 	xori	r2,r2,128
  802930:	10bfe004 	addi	r2,r2,-128
  802934:	1000021e 	bne	r2,zero,802940 <tick+0x25f8>
  802938:	00800044 	movi	r2,1
  80293c:	00000106 	br	802944 <tick+0x25fc>
  802940:	0005883a 	mov	r2,zero
  802944:	d0a77d05 	stb	r2,-25100(gp)
      g59_e2 =(!((g48||g51||g53)));
  802948:	d0a76543 	ldbu	r2,-25195(gp)
  80294c:	10803fcc 	andi	r2,r2,255
  802950:	1080201c 	xori	r2,r2,128
  802954:	10bfe004 	addi	r2,r2,-128
  802958:	10000c1e 	bne	r2,zero,80298c <tick+0x2644>
  80295c:	d0a780c3 	ldbu	r2,-25085(gp)
  802960:	10803fcc 	andi	r2,r2,255
  802964:	1080201c 	xori	r2,r2,128
  802968:	10bfe004 	addi	r2,r2,-128
  80296c:	1000071e 	bne	r2,zero,80298c <tick+0x2644>
  802970:	d0a78643 	ldbu	r2,-25063(gp)
  802974:	10803fcc 	andi	r2,r2,255
  802978:	1080201c 	xori	r2,r2,128
  80297c:	10bfe004 	addi	r2,r2,-128
  802980:	1000021e 	bne	r2,zero,80298c <tick+0x2644>
  802984:	00800044 	movi	r2,1
  802988:	00000106 	br	802990 <tick+0x2648>
  80298c:	0005883a 	mov	r2,zero
  802990:	d0a74f05 	stb	r2,-25284(gp)
      g72_e3 =(!((g61||g64||g66)));
  802994:	d0a75d43 	ldbu	r2,-25227(gp)
  802998:	10803fcc 	andi	r2,r2,255
  80299c:	1080201c 	xori	r2,r2,128
  8029a0:	10bfe004 	addi	r2,r2,-128
  8029a4:	10000c1e 	bne	r2,zero,8029d8 <tick+0x2690>
  8029a8:	d0a76b03 	ldbu	r2,-25172(gp)
  8029ac:	10803fcc 	andi	r2,r2,255
  8029b0:	1080201c 	xori	r2,r2,128
  8029b4:	10bfe004 	addi	r2,r2,-128
  8029b8:	1000071e 	bne	r2,zero,8029d8 <tick+0x2690>
  8029bc:	d0a771c3 	ldbu	r2,-25145(gp)
  8029c0:	10803fcc 	andi	r2,r2,255
  8029c4:	1080201c 	xori	r2,r2,128
  8029c8:	10bfe004 	addi	r2,r2,-128
  8029cc:	1000021e 	bne	r2,zero,8029d8 <tick+0x2690>
  8029d0:	00800044 	movi	r2,1
  8029d4:	00000106 	br	8029dc <tick+0x2694>
  8029d8:	0005883a 	mov	r2,zero
  8029dc:	d0a76845 	stb	r2,-25183(gp)
      g80_e4 =(!((g74||g77)));
  8029e0:	d0a79d03 	ldbu	r2,-24972(gp)
  8029e4:	10803fcc 	andi	r2,r2,255
  8029e8:	1080201c 	xori	r2,r2,128
  8029ec:	10bfe004 	addi	r2,r2,-128
  8029f0:	1000071e 	bne	r2,zero,802a10 <tick+0x26c8>
  8029f4:	d0a79283 	ldbu	r2,-25014(gp)
  8029f8:	10803fcc 	andi	r2,r2,255
  8029fc:	1080201c 	xori	r2,r2,128
  802a00:	10bfe004 	addi	r2,r2,-128
  802a04:	1000021e 	bne	r2,zero,802a10 <tick+0x26c8>
  802a08:	00800044 	movi	r2,1
  802a0c:	00000106 	br	802a14 <tick+0x26cc>
  802a10:	0005883a 	mov	r2,zero
  802a14:	d0a766c5 	stb	r2,-25189(gp)
      g96_e5 =(!((g82||g85||g87||g90)));
  802a18:	d0a75e43 	ldbu	r2,-25223(gp)
  802a1c:	10803fcc 	andi	r2,r2,255
  802a20:	1080201c 	xori	r2,r2,128
  802a24:	10bfe004 	addi	r2,r2,-128
  802a28:	1000111e 	bne	r2,zero,802a70 <tick+0x2728>
  802a2c:	d0a75503 	ldbu	r2,-25260(gp)
  802a30:	10803fcc 	andi	r2,r2,255
  802a34:	1080201c 	xori	r2,r2,128
  802a38:	10bfe004 	addi	r2,r2,-128
  802a3c:	10000c1e 	bne	r2,zero,802a70 <tick+0x2728>
  802a40:	d0a75a83 	ldbu	r2,-25238(gp)
  802a44:	10803fcc 	andi	r2,r2,255
  802a48:	1080201c 	xori	r2,r2,128
  802a4c:	10bfe004 	addi	r2,r2,-128
  802a50:	1000071e 	bne	r2,zero,802a70 <tick+0x2728>
  802a54:	d0a77a83 	ldbu	r2,-25110(gp)
  802a58:	10803fcc 	andi	r2,r2,255
  802a5c:	1080201c 	xori	r2,r2,128
  802a60:	10bfe004 	addi	r2,r2,-128
  802a64:	1000021e 	bne	r2,zero,802a70 <tick+0x2728>
  802a68:	00800044 	movi	r2,1
  802a6c:	00000106 	br	802a74 <tick+0x272c>
  802a70:	0005883a 	mov	r2,zero
  802a74:	d0a78485 	stb	r2,-25070(gp)
      g112_e6 =(!((g98||g101||g108||g106)));
  802a78:	d0a78603 	ldbu	r2,-25064(gp)
  802a7c:	10803fcc 	andi	r2,r2,255
  802a80:	1080201c 	xori	r2,r2,128
  802a84:	10bfe004 	addi	r2,r2,-128
  802a88:	1000111e 	bne	r2,zero,802ad0 <tick+0x2788>
  802a8c:	d0a77403 	ldbu	r2,-25136(gp)
  802a90:	10803fcc 	andi	r2,r2,255
  802a94:	1080201c 	xori	r2,r2,128
  802a98:	10bfe004 	addi	r2,r2,-128
  802a9c:	10000c1e 	bne	r2,zero,802ad0 <tick+0x2788>
  802aa0:	d0a75003 	ldbu	r2,-25280(gp)
  802aa4:	10803fcc 	andi	r2,r2,255
  802aa8:	1080201c 	xori	r2,r2,128
  802aac:	10bfe004 	addi	r2,r2,-128
  802ab0:	1000071e 	bne	r2,zero,802ad0 <tick+0x2788>
  802ab4:	d0a79ac3 	ldbu	r2,-24981(gp)
  802ab8:	10803fcc 	andi	r2,r2,255
  802abc:	1080201c 	xori	r2,r2,128
  802ac0:	10bfe004 	addi	r2,r2,-128
  802ac4:	1000021e 	bne	r2,zero,802ad0 <tick+0x2788>
  802ac8:	00800044 	movi	r2,1
  802acc:	00000106 	br	802ad4 <tick+0x278c>
  802ad0:	0005883a 	mov	r2,zero
  802ad4:	d0a76a05 	stb	r2,-25176(gp)
      g119_e7 =(!((g114||g116)));
  802ad8:	d0a77503 	ldbu	r2,-25132(gp)
  802adc:	10803fcc 	andi	r2,r2,255
  802ae0:	1080201c 	xori	r2,r2,128
  802ae4:	10bfe004 	addi	r2,r2,-128
  802ae8:	1000071e 	bne	r2,zero,802b08 <tick+0x27c0>
  802aec:	d0a78883 	ldbu	r2,-25054(gp)
  802af0:	10803fcc 	andi	r2,r2,255
  802af4:	1080201c 	xori	r2,r2,128
  802af8:	10bfe004 	addi	r2,r2,-128
  802afc:	1000021e 	bne	r2,zero,802b08 <tick+0x27c0>
  802b00:	00800044 	movi	r2,1
  802b04:	00000106 	br	802b0c <tick+0x27c4>
  802b08:	0005883a 	mov	r2,zero
  802b0c:	d0a769c5 	stb	r2,-25177(gp)
      g126_e8 =(!((g121||g123)));
  802b10:	d0a79603 	ldbu	r2,-25000(gp)
  802b14:	10803fcc 	andi	r2,r2,255
  802b18:	1080201c 	xori	r2,r2,128
  802b1c:	10bfe004 	addi	r2,r2,-128
  802b20:	1000071e 	bne	r2,zero,802b40 <tick+0x27f8>
  802b24:	d0a75b83 	ldbu	r2,-25234(gp)
  802b28:	10803fcc 	andi	r2,r2,255
  802b2c:	1080201c 	xori	r2,r2,128
  802b30:	10bfe004 	addi	r2,r2,-128
  802b34:	1000021e 	bne	r2,zero,802b40 <tick+0x27f8>
  802b38:	00800044 	movi	r2,1
  802b3c:	00000106 	br	802b44 <tick+0x27fc>
  802b40:	0005883a 	mov	r2,zero
  802b44:	d0a763c5 	stb	r2,-25201(gp)
      g133_e9 =(!((g128||g130)));
  802b48:	d0a76f03 	ldbu	r2,-25156(gp)
  802b4c:	10803fcc 	andi	r2,r2,255
  802b50:	1080201c 	xori	r2,r2,128
  802b54:	10bfe004 	addi	r2,r2,-128
  802b58:	1000071e 	bne	r2,zero,802b78 <tick+0x2830>
  802b5c:	d0a79483 	ldbu	r2,-25006(gp)
  802b60:	10803fcc 	andi	r2,r2,255
  802b64:	1080201c 	xori	r2,r2,128
  802b68:	10bfe004 	addi	r2,r2,-128
  802b6c:	1000021e 	bne	r2,zero,802b78 <tick+0x2830>
  802b70:	00800044 	movi	r2,1
  802b74:	00000106 	br	802b7c <tick+0x2834>
  802b78:	0005883a 	mov	r2,zero
  802b7c:	d0a79145 	stb	r2,-25019(gp)
      g140_e10 =(!((g135||g137)));
  802b80:	d0a75d83 	ldbu	r2,-25226(gp)
  802b84:	10803fcc 	andi	r2,r2,255
  802b88:	1080201c 	xori	r2,r2,128
  802b8c:	10bfe004 	addi	r2,r2,-128
  802b90:	1000071e 	bne	r2,zero,802bb0 <tick+0x2868>
  802b94:	d0a78ac3 	ldbu	r2,-25045(gp)
  802b98:	10803fcc 	andi	r2,r2,255
  802b9c:	1080201c 	xori	r2,r2,128
  802ba0:	10bfe004 	addi	r2,r2,-128
  802ba4:	1000021e 	bne	r2,zero,802bb0 <tick+0x2868>
  802ba8:	00800044 	movi	r2,1
  802bac:	00000106 	br	802bb4 <tick+0x286c>
  802bb0:	0005883a 	mov	r2,zero
  802bb4:	d0a78d45 	stb	r2,-25035(gp)
      g147_e11 =(!((g142||g144)));
  802bb8:	d0a78ec3 	ldbu	r2,-25029(gp)
  802bbc:	10803fcc 	andi	r2,r2,255
  802bc0:	1080201c 	xori	r2,r2,128
  802bc4:	10bfe004 	addi	r2,r2,-128
  802bc8:	1000071e 	bne	r2,zero,802be8 <tick+0x28a0>
  802bcc:	d0a773c3 	ldbu	r2,-25137(gp)
  802bd0:	10803fcc 	andi	r2,r2,255
  802bd4:	1080201c 	xori	r2,r2,128
  802bd8:	10bfe004 	addi	r2,r2,-128
  802bdc:	1000021e 	bne	r2,zero,802be8 <tick+0x28a0>
  802be0:	00800044 	movi	r2,1
  802be4:	00000106 	br	802bec <tick+0x28a4>
  802be8:	0005883a 	mov	r2,zero
  802bec:	d0a760c5 	stb	r2,-25213(gp)
      g154_e12 =(!((g149||g151)));
  802bf0:	d0a79a83 	ldbu	r2,-24982(gp)
  802bf4:	10803fcc 	andi	r2,r2,255
  802bf8:	1080201c 	xori	r2,r2,128
  802bfc:	10bfe004 	addi	r2,r2,-128
  802c00:	1000071e 	bne	r2,zero,802c20 <tick+0x28d8>
  802c04:	d0a76cc3 	ldbu	r2,-25165(gp)
  802c08:	10803fcc 	andi	r2,r2,255
  802c0c:	1080201c 	xori	r2,r2,128
  802c10:	10bfe004 	addi	r2,r2,-128
  802c14:	1000021e 	bne	r2,zero,802c20 <tick+0x28d8>
  802c18:	00800044 	movi	r2,1
  802c1c:	00000106 	br	802c24 <tick+0x28dc>
  802c20:	0005883a 	mov	r2,zero
  802c24:	d0a79205 	stb	r2,-25016(gp)
      g155_e1 =(!((g48||g61||g74||g82||g98||g114||g121||g128||g135||g142||g149||g116||g123||g130||g137||g144||g151||g51||g64||g77||g85||g101||g53||g66||g87||g108||g5||g31||g106||g13||g90||g41||g19||g27)));
  802c28:	d0a76543 	ldbu	r2,-25195(gp)
  802c2c:	10803fcc 	andi	r2,r2,255
  802c30:	1080201c 	xori	r2,r2,128
  802c34:	10bfe004 	addi	r2,r2,-128
  802c38:	1000a71e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802c3c:	d0a75d43 	ldbu	r2,-25227(gp)
  802c40:	10803fcc 	andi	r2,r2,255
  802c44:	1080201c 	xori	r2,r2,128
  802c48:	10bfe004 	addi	r2,r2,-128
  802c4c:	1000a21e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802c50:	d0a79d03 	ldbu	r2,-24972(gp)
  802c54:	10803fcc 	andi	r2,r2,255
  802c58:	1080201c 	xori	r2,r2,128
  802c5c:	10bfe004 	addi	r2,r2,-128
  802c60:	10009d1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802c64:	d0a75e43 	ldbu	r2,-25223(gp)
  802c68:	10803fcc 	andi	r2,r2,255
  802c6c:	1080201c 	xori	r2,r2,128
  802c70:	10bfe004 	addi	r2,r2,-128
  802c74:	1000981e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802c78:	d0a78603 	ldbu	r2,-25064(gp)
  802c7c:	10803fcc 	andi	r2,r2,255
  802c80:	1080201c 	xori	r2,r2,128
  802c84:	10bfe004 	addi	r2,r2,-128
  802c88:	1000931e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802c8c:	d0a77503 	ldbu	r2,-25132(gp)
  802c90:	10803fcc 	andi	r2,r2,255
  802c94:	1080201c 	xori	r2,r2,128
  802c98:	10bfe004 	addi	r2,r2,-128
  802c9c:	10008e1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802ca0:	d0a79603 	ldbu	r2,-25000(gp)
  802ca4:	10803fcc 	andi	r2,r2,255
  802ca8:	1080201c 	xori	r2,r2,128
  802cac:	10bfe004 	addi	r2,r2,-128
  802cb0:	1000891e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802cb4:	d0a76f03 	ldbu	r2,-25156(gp)
  802cb8:	10803fcc 	andi	r2,r2,255
  802cbc:	1080201c 	xori	r2,r2,128
  802cc0:	10bfe004 	addi	r2,r2,-128
  802cc4:	1000841e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802cc8:	d0a75d83 	ldbu	r2,-25226(gp)
  802ccc:	10803fcc 	andi	r2,r2,255
  802cd0:	1080201c 	xori	r2,r2,128
  802cd4:	10bfe004 	addi	r2,r2,-128
  802cd8:	10007f1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802cdc:	d0a78ec3 	ldbu	r2,-25029(gp)
  802ce0:	10803fcc 	andi	r2,r2,255
  802ce4:	1080201c 	xori	r2,r2,128
  802ce8:	10bfe004 	addi	r2,r2,-128
  802cec:	10007a1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802cf0:	d0a79a83 	ldbu	r2,-24982(gp)
  802cf4:	10803fcc 	andi	r2,r2,255
  802cf8:	1080201c 	xori	r2,r2,128
  802cfc:	10bfe004 	addi	r2,r2,-128
  802d00:	1000751e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d04:	d0a78883 	ldbu	r2,-25054(gp)
  802d08:	10803fcc 	andi	r2,r2,255
  802d0c:	1080201c 	xori	r2,r2,128
  802d10:	10bfe004 	addi	r2,r2,-128
  802d14:	1000701e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d18:	d0a75b83 	ldbu	r2,-25234(gp)
  802d1c:	10803fcc 	andi	r2,r2,255
  802d20:	1080201c 	xori	r2,r2,128
  802d24:	10bfe004 	addi	r2,r2,-128
  802d28:	10006b1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d2c:	d0a79483 	ldbu	r2,-25006(gp)
  802d30:	10803fcc 	andi	r2,r2,255
  802d34:	1080201c 	xori	r2,r2,128
  802d38:	10bfe004 	addi	r2,r2,-128
  802d3c:	1000661e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d40:	d0a78ac3 	ldbu	r2,-25045(gp)
  802d44:	10803fcc 	andi	r2,r2,255
  802d48:	1080201c 	xori	r2,r2,128
  802d4c:	10bfe004 	addi	r2,r2,-128
  802d50:	1000611e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d54:	d0a773c3 	ldbu	r2,-25137(gp)
  802d58:	10803fcc 	andi	r2,r2,255
  802d5c:	1080201c 	xori	r2,r2,128
  802d60:	10bfe004 	addi	r2,r2,-128
  802d64:	10005c1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d68:	d0a76cc3 	ldbu	r2,-25165(gp)
  802d6c:	10803fcc 	andi	r2,r2,255
  802d70:	1080201c 	xori	r2,r2,128
  802d74:	10bfe004 	addi	r2,r2,-128
  802d78:	1000571e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d7c:	d0a780c3 	ldbu	r2,-25085(gp)
  802d80:	10803fcc 	andi	r2,r2,255
  802d84:	1080201c 	xori	r2,r2,128
  802d88:	10bfe004 	addi	r2,r2,-128
  802d8c:	1000521e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802d90:	d0a76b03 	ldbu	r2,-25172(gp)
  802d94:	10803fcc 	andi	r2,r2,255
  802d98:	1080201c 	xori	r2,r2,128
  802d9c:	10bfe004 	addi	r2,r2,-128
  802da0:	10004d1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802da4:	d0a79283 	ldbu	r2,-25014(gp)
  802da8:	10803fcc 	andi	r2,r2,255
  802dac:	1080201c 	xori	r2,r2,128
  802db0:	10bfe004 	addi	r2,r2,-128
  802db4:	1000481e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802db8:	d0a75503 	ldbu	r2,-25260(gp)
  802dbc:	10803fcc 	andi	r2,r2,255
  802dc0:	1080201c 	xori	r2,r2,128
  802dc4:	10bfe004 	addi	r2,r2,-128
  802dc8:	1000431e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802dcc:	d0a77403 	ldbu	r2,-25136(gp)
  802dd0:	10803fcc 	andi	r2,r2,255
  802dd4:	1080201c 	xori	r2,r2,128
  802dd8:	10bfe004 	addi	r2,r2,-128
  802ddc:	10003e1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802de0:	d0a78643 	ldbu	r2,-25063(gp)
  802de4:	10803fcc 	andi	r2,r2,255
  802de8:	1080201c 	xori	r2,r2,128
  802dec:	10bfe004 	addi	r2,r2,-128
  802df0:	1000391e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802df4:	d0a771c3 	ldbu	r2,-25145(gp)
  802df8:	10803fcc 	andi	r2,r2,255
  802dfc:	1080201c 	xori	r2,r2,128
  802e00:	10bfe004 	addi	r2,r2,-128
  802e04:	1000341e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e08:	d0a75a83 	ldbu	r2,-25238(gp)
  802e0c:	10803fcc 	andi	r2,r2,255
  802e10:	1080201c 	xori	r2,r2,128
  802e14:	10bfe004 	addi	r2,r2,-128
  802e18:	10002f1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e1c:	d0a75003 	ldbu	r2,-25280(gp)
  802e20:	10803fcc 	andi	r2,r2,255
  802e24:	1080201c 	xori	r2,r2,128
  802e28:	10bfe004 	addi	r2,r2,-128
  802e2c:	10002a1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e30:	d0a76c43 	ldbu	r2,-25167(gp)
  802e34:	10803fcc 	andi	r2,r2,255
  802e38:	1080201c 	xori	r2,r2,128
  802e3c:	10bfe004 	addi	r2,r2,-128
  802e40:	1000251e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e44:	d0a76043 	ldbu	r2,-25215(gp)
  802e48:	10803fcc 	andi	r2,r2,255
  802e4c:	1080201c 	xori	r2,r2,128
  802e50:	10bfe004 	addi	r2,r2,-128
  802e54:	1000201e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e58:	d0a79ac3 	ldbu	r2,-24981(gp)
  802e5c:	10803fcc 	andi	r2,r2,255
  802e60:	1080201c 	xori	r2,r2,128
  802e64:	10bfe004 	addi	r2,r2,-128
  802e68:	10001b1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e6c:	d0a78583 	ldbu	r2,-25066(gp)
  802e70:	10803fcc 	andi	r2,r2,255
  802e74:	1080201c 	xori	r2,r2,128
  802e78:	10bfe004 	addi	r2,r2,-128
  802e7c:	1000161e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e80:	d0a77a83 	ldbu	r2,-25110(gp)
  802e84:	10803fcc 	andi	r2,r2,255
  802e88:	1080201c 	xori	r2,r2,128
  802e8c:	10bfe004 	addi	r2,r2,-128
  802e90:	1000111e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802e94:	d0a761c3 	ldbu	r2,-25209(gp)
  802e98:	10803fcc 	andi	r2,r2,255
  802e9c:	1080201c 	xori	r2,r2,128
  802ea0:	10bfe004 	addi	r2,r2,-128
  802ea4:	10000c1e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802ea8:	d0a75043 	ldbu	r2,-25279(gp)
  802eac:	10803fcc 	andi	r2,r2,255
  802eb0:	1080201c 	xori	r2,r2,128
  802eb4:	10bfe004 	addi	r2,r2,-128
  802eb8:	1000071e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802ebc:	d0a751c3 	ldbu	r2,-25273(gp)
  802ec0:	10803fcc 	andi	r2,r2,255
  802ec4:	1080201c 	xori	r2,r2,128
  802ec8:	10bfe004 	addi	r2,r2,-128
  802ecc:	1000021e 	bne	r2,zero,802ed8 <tick+0x2b90>
  802ed0:	00800044 	movi	r2,1
  802ed4:	00000106 	br	802edc <tick+0x2b94>
  802ed8:	0005883a 	mov	r2,zero
  802edc:	d0a77605 	stb	r2,-25128(gp)
      g159_e2 =(!(g157));
  802ee0:	d0a78843 	ldbu	r2,-25055(gp)
  802ee4:	10803fcc 	andi	r2,r2,255
  802ee8:	1080201c 	xori	r2,r2,128
  802eec:	10bfe004 	addi	r2,r2,-128
  802ef0:	1005003a 	cmpeq	r2,r2,zero
  802ef4:	d0a767c5 	stb	r2,-25185(gp)
   }
   PRE_g5 = g5;
  802ef8:	d0a76c43 	ldbu	r2,-25167(gp)
  802efc:	d0a79545 	stb	r2,-25003(gp)
   PRE_g13 = g13;
  802f00:	d0a78583 	ldbu	r2,-25066(gp)
  802f04:	d0a75a45 	stb	r2,-25239(gp)
   PRE_g19 = g19;
  802f08:	d0a75043 	ldbu	r2,-25279(gp)
  802f0c:	d0a77c05 	stb	r2,-25104(gp)
   PRE_g27 = g27;
  802f10:	d0a751c3 	ldbu	r2,-25273(gp)
  802f14:	d0a75485 	stb	r2,-25262(gp)
   PRE_g31 = g31;
  802f18:	d0a76043 	ldbu	r2,-25215(gp)
  802f1c:	d0a782c5 	stb	r2,-25077(gp)
   PRE_g41 = g41;
  802f20:	d0a761c3 	ldbu	r2,-25209(gp)
  802f24:	d0a785c5 	stb	r2,-25065(gp)
   PRE_g48 = g48;
  802f28:	d0a76543 	ldbu	r2,-25195(gp)
  802f2c:	d0a78405 	stb	r2,-25072(gp)
   PRE_g51 = g51;
  802f30:	d0a780c3 	ldbu	r2,-25085(gp)
  802f34:	d0a75185 	stb	r2,-25274(gp)
   PRE_g53 = g53;
  802f38:	d0a78643 	ldbu	r2,-25063(gp)
  802f3c:	d0a76485 	stb	r2,-25198(gp)
   PRE_g61 = g61;
  802f40:	d0a75d43 	ldbu	r2,-25227(gp)
  802f44:	d0a78445 	stb	r2,-25071(gp)
   PRE_g64 = g64;
  802f48:	d0a76b03 	ldbu	r2,-25172(gp)
  802f4c:	d0a79505 	stb	r2,-25004(gp)
   PRE_g66 = g66;
  802f50:	d0a771c3 	ldbu	r2,-25145(gp)
  802f54:	d0a78cc5 	stb	r2,-25037(gp)
   PRE_g74 = g74;
  802f58:	d0a79d03 	ldbu	r2,-24972(gp)
  802f5c:	d0a78285 	stb	r2,-25078(gp)
   PRE_g77 = g77;
  802f60:	d0a79283 	ldbu	r2,-25014(gp)
  802f64:	d0a75fc5 	stb	r2,-25217(gp)
   PRE_g82 = g82;
  802f68:	d0a75e43 	ldbu	r2,-25223(gp)
  802f6c:	d0a79385 	stb	r2,-25010(gp)
   PRE_g85 = g85;
  802f70:	d0a75503 	ldbu	r2,-25260(gp)
  802f74:	d0a76305 	stb	r2,-25204(gp)
   PRE_g87 = g87;
  802f78:	d0a75a83 	ldbu	r2,-25238(gp)
  802f7c:	d0a76785 	stb	r2,-25186(gp)
   PRE_g90 = g90;
  802f80:	d0a77a83 	ldbu	r2,-25110(gp)
  802f84:	d0a75205 	stb	r2,-25272(gp)
   PRE_g98 = g98;
  802f88:	d0a78603 	ldbu	r2,-25064(gp)
  802f8c:	d0a79085 	stb	r2,-25022(gp)
   PRE_g101 = g101;
  802f90:	d0a77403 	ldbu	r2,-25136(gp)
  802f94:	d0a76e45 	stb	r2,-25159(gp)
   PRE_g106 = g106;
  802f98:	d0a79ac3 	ldbu	r2,-24981(gp)
  802f9c:	d0a77885 	stb	r2,-25118(gp)
   PRE_g108 = g108;
  802fa0:	d0a75003 	ldbu	r2,-25280(gp)
  802fa4:	d0a797c5 	stb	r2,-24993(gp)
   PRE_g114 = g114;
  802fa8:	d0a77503 	ldbu	r2,-25132(gp)
  802fac:	d0a75585 	stb	r2,-25258(gp)
   PRE_g116 = g116;
  802fb0:	d0a78883 	ldbu	r2,-25054(gp)
  802fb4:	d0a76745 	stb	r2,-25187(gp)
   PRE_g121 = g121;
  802fb8:	d0a79603 	ldbu	r2,-25000(gp)
  802fbc:	d0a759c5 	stb	r2,-25241(gp)
   PRE_g123 = g123;
  802fc0:	d0a75b83 	ldbu	r2,-25234(gp)
  802fc4:	d0a76945 	stb	r2,-25179(gp)
   PRE_g128 = g128;
  802fc8:	d0a76f03 	ldbu	r2,-25156(gp)
  802fcc:	d0a752c5 	stb	r2,-25269(gp)
   PRE_g130 = g130;
  802fd0:	d0a79483 	ldbu	r2,-25006(gp)
  802fd4:	d0a78545 	stb	r2,-25067(gp)
   PRE_g135 = g135;
  802fd8:	d0a75d83 	ldbu	r2,-25226(gp)
  802fdc:	d0a79b05 	stb	r2,-24980(gp)
   PRE_g137 = g137;
  802fe0:	d0a78ac3 	ldbu	r2,-25045(gp)
  802fe4:	d0a77f85 	stb	r2,-25090(gp)
   PRE_g142 = g142;
  802fe8:	d0a78ec3 	ldbu	r2,-25029(gp)
  802fec:	d0a75805 	stb	r2,-25248(gp)
   PRE_g144 = g144;
  802ff0:	d0a773c3 	ldbu	r2,-25137(gp)
  802ff4:	d0a76805 	stb	r2,-25184(gp)
   PRE_g149 = g149;
  802ff8:	d0a79a83 	ldbu	r2,-24982(gp)
  802ffc:	d0a75845 	stb	r2,-25247(gp)
   PRE_g151 = g151;
  803000:	d0a76cc3 	ldbu	r2,-25165(gp)
  803004:	d0a77745 	stb	r2,-25123(gp)
   PRE_g157 = g157;
  803008:	d0a78843 	ldbu	r2,-25055(gp)
  80300c:	d0a75345 	stb	r2,-25267(gp)
   _PRE_GO = _GO;
  803010:	d0a77ac3 	ldbu	r2,-25109(gp)
  803014:	10803fcc 	andi	r2,r2,255
  803018:	1080201c 	xori	r2,r2,128
  80301c:	10bfe004 	addi	r2,r2,-128
  803020:	d0a75715 	stw	r2,-25252(gp)
   return;
  803024:	0001883a 	nop
}
  803028:	e037883a 	mov	sp,fp
  80302c:	df000017 	ldw	fp,0(sp)
  803030:	dec00104 	addi	sp,sp,4
  803034:	f800283a 	ret

00803038 <timeout_checker>:
 * 	timer_expired_flag - the address of the timer variable that represent an input on the sccharts
 * 			 will modify the value of the passed outputput to "1" for timer timeout
 * 			 and "0" for timer still counting.
 */
void timeout_checker(int first_timeStamp , int timeout ,char *timer_expired_flag)
{
  803038:	defffb04 	addi	sp,sp,-20
  80303c:	df000415 	stw	fp,16(sp)
  803040:	df000404 	addi	fp,sp,16
  803044:	e13ffd15 	stw	r4,-12(fp)
  803048:	e17ffe15 	stw	r5,-8(fp)
  80304c:	e1bfff15 	stw	r6,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  803050:	d0e7a917 	ldw	r3,-24924(gp)

	// calculates the elapsed time
	int time_diff = alt_nticks() - first_timeStamp;
  803054:	e0bffd17 	ldw	r2,-12(fp)
  803058:	1885c83a 	sub	r2,r3,r2
  80305c:	e0bffc15 	stw	r2,-16(fp)

	if(time_diff >= timeout)
  803060:	e0fffc17 	ldw	r3,-16(fp)
  803064:	e0bffe17 	ldw	r2,-8(fp)
  803068:	18800316 	blt	r3,r2,803078 <timeout_checker+0x40>
	{
		//printf("timeoutvalue %d \n",time_diff);

		(*timer_expired_flag) = 1; // timer expired
  80306c:	e0bfff17 	ldw	r2,-4(fp)
  803070:	00c00044 	movi	r3,1
  803074:	10c00005 	stb	r3,0(r2)
	}
}
  803078:	0001883a 	nop
  80307c:	e037883a 	mov	sp,fp
  803080:	df000017 	ldw	fp,0(sp)
  803084:	dec00104 	addi	sp,sp,4
  803088:	f800283a 	ret

0080308c <delay>:

//REMOVE THIS
void delay(int milliseconds)
{
  80308c:	defffa04 	addi	sp,sp,-24
  803090:	dfc00515 	stw	ra,20(sp)
  803094:	df000415 	stw	fp,16(sp)
  803098:	df000404 	addi	fp,sp,16
  80309c:	e13fff15 	stw	r4,-4(fp)
    long pause;
    clock_t now,then;

    pause = milliseconds*(CLOCKS_PER_SEC/1000);
  8030a0:	e0bfff17 	ldw	r2,-4(fp)
  8030a4:	e0bffd15 	stw	r2,-12(fp)
    now = then = clock();
  8030a8:	08035340 	call	803534 <clock>
  8030ac:	e0bffe15 	stw	r2,-8(fp)
  8030b0:	e0bffe17 	ldw	r2,-8(fp)
  8030b4:	e0bffc15 	stw	r2,-16(fp)
    while( (now-then) < pause )
  8030b8:	00000206 	br	8030c4 <delay+0x38>
        now = clock();
  8030bc:	08035340 	call	803534 <clock>
  8030c0:	e0bffc15 	stw	r2,-16(fp)
    long pause;
    clock_t now,then;

    pause = milliseconds*(CLOCKS_PER_SEC/1000);
    now = then = clock();
    while( (now-then) < pause )
  8030c4:	e0fffc17 	ldw	r3,-16(fp)
  8030c8:	e0bffe17 	ldw	r2,-8(fp)
  8030cc:	1887c83a 	sub	r3,r3,r2
  8030d0:	e0bffd17 	ldw	r2,-12(fp)
  8030d4:	18bff936 	bltu	r3,r2,8030bc <__alt_mem_onchip_mem+0xff7830bc>
        now = clock();
}
  8030d8:	0001883a 	nop
  8030dc:	e037883a 	mov	sp,fp
  8030e0:	dfc00117 	ldw	ra,4(sp)
  8030e4:	df000017 	ldw	fp,0(sp)
  8030e8:	dec00204 	addi	sp,sp,8
  8030ec:	f800283a 	ret

008030f0 <main>:


int main()
{
  8030f0:	defffd04 	addi	sp,sp,-12
  8030f4:	dfc00215 	stw	ra,8(sp)
  8030f8:	df000115 	stw	fp,4(sp)
  8030fc:	df000104 	addi	fp,sp,4
	// Initialize the FSM
	reset();
  803100:	08002900 	call	800290 <reset>

	// Store the timers "timer start" flags
	timer_start_flags[0] = &start_AVI;
  803104:	008020b4 	movhi	r2,130
  803108:	10a0a604 	addi	r2,r2,-32104
  80310c:	d0e76a84 	addi	r3,gp,-25174
  803110:	10c00015 	stw	r3,0(r2)
	timer_start_flags[1] = &start_PVARP;
  803114:	008020b4 	movhi	r2,130
  803118:	10a0a604 	addi	r2,r2,-32104
  80311c:	d0e77b04 	addi	r3,gp,-25108
  803120:	10c00115 	stw	r3,4(r2)
	timer_start_flags[2] = &start_VRP;
  803124:	008020b4 	movhi	r2,130
  803128:	10a0a604 	addi	r2,r2,-32104
  80312c:	d0e76344 	addi	r3,gp,-25203
  803130:	10c00215 	stw	r3,8(r2)
	timer_start_flags[3] = &start_AEI;
  803134:	008020b4 	movhi	r2,130
  803138:	10a0a604 	addi	r2,r2,-32104
  80313c:	d0e77f44 	addi	r3,gp,-25091
  803140:	10c00315 	stw	r3,12(r2)
	timer_start_flags[4] = &start_LRI;
  803144:	008020b4 	movhi	r2,130
  803148:	10a0a604 	addi	r2,r2,-32104
  80314c:	d0e78104 	addi	r3,gp,-25084
  803150:	10c00415 	stw	r3,16(r2)
	timer_start_flags[5] = &start_URI;
  803154:	008020b4 	movhi	r2,130
  803158:	10a0a604 	addi	r2,r2,-32104
  80315c:	d0e78704 	addi	r3,gp,-25060
  803160:	10c00515 	stw	r3,20(r2)

	// Store the timer state (counting = 1 idle = 0)
	timer_state_flags[0] = &AVI_counting;
  803164:	008020b4 	movhi	r2,130
  803168:	10a0a004 	addi	r2,r2,-32128
  80316c:	d0e799c4 	addi	r3,gp,-24985
  803170:	10c00015 	stw	r3,0(r2)
	timer_state_flags[1] = &PVARP_counting;
  803174:	008020b4 	movhi	r2,130
  803178:	10a0a004 	addi	r2,r2,-32128
  80317c:	d0e76504 	addi	r3,gp,-25196
  803180:	10c00115 	stw	r3,4(r2)
	timer_state_flags[2] = &VRP_counting;
  803184:	008020b4 	movhi	r2,130
  803188:	10a0a004 	addi	r2,r2,-32128
  80318c:	d0e77844 	addi	r3,gp,-25119
  803190:	10c00215 	stw	r3,8(r2)
	timer_state_flags[3] = &AEI_counting;
  803194:	008020b4 	movhi	r2,130
  803198:	10a0a004 	addi	r2,r2,-32128
  80319c:	d0e772c4 	addi	r3,gp,-25141
  8031a0:	10c00315 	stw	r3,12(r2)
	timer_state_flags[4] = &LRI_counting;
  8031a4:	008020b4 	movhi	r2,130
  8031a8:	10a0a004 	addi	r2,r2,-32128
  8031ac:	d0e76984 	addi	r3,gp,-25178
  8031b0:	10c00415 	stw	r3,16(r2)
	timer_state_flags[5] = &URI_counting;
  8031b4:	008020b4 	movhi	r2,130
  8031b8:	10a0a004 	addi	r2,r2,-32128
  8031bc:	d0e76704 	addi	r3,gp,-25188
  8031c0:	10c00515 	stw	r3,20(r2)

	// Store the SCCHARTS OUTPUT variables
	timer_expired_flags[0] = &AVI_ex;
  8031c4:	008020b4 	movhi	r2,130
  8031c8:	10a09a04 	addi	r2,r2,-32152
  8031cc:	d0e77384 	addi	r3,gp,-25138
  8031d0:	10c00015 	stw	r3,0(r2)
	timer_expired_flags[1] = &PVARP_ex;
  8031d4:	008020b4 	movhi	r2,130
  8031d8:	10a09a04 	addi	r2,r2,-32152
  8031dc:	d0e78a04 	addi	r3,gp,-25048
  8031e0:	10c00115 	stw	r3,4(r2)
	timer_expired_flags[2] = &VRP_ex;
  8031e4:	008020b4 	movhi	r2,130
  8031e8:	10a09a04 	addi	r2,r2,-32152
  8031ec:	d0e77444 	addi	r3,gp,-25135
  8031f0:	10c00215 	stw	r3,8(r2)
	timer_expired_flags[3] = &AEI_ex;
  8031f4:	008020b4 	movhi	r2,130
  8031f8:	10a09a04 	addi	r2,r2,-32152
  8031fc:	d0e75384 	addi	r3,gp,-25266
  803200:	10c00315 	stw	r3,12(r2)
	timer_expired_flags[4] = &LRI_ex;
  803204:	008020b4 	movhi	r2,130
  803208:	10a09a04 	addi	r2,r2,-32152
  80320c:	d0e76e84 	addi	r3,gp,-25158
  803210:	10c00415 	stw	r3,16(r2)
	timer_expired_flags[5] = &URI_ex;
  803214:	008020b4 	movhi	r2,130
  803218:	10a09a04 	addi	r2,r2,-32152
  80321c:	d0e77784 	addi	r3,gp,-25122
  803220:	10c00515 	stw	r3,20(r2)

	//Force a Vsense TODO: Remove this later
	Vsense = 1;
  803224:	00800044 	movi	r2,1
  803228:	d0a77085 	stb	r2,-25150(gp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0);
  80322c:	0007883a 	mov	r3,zero
  803230:	00804434 	movhi	r2,272
  803234:	10842004 	addi	r2,r2,4224
  803238:	10c00035 	stwio	r3,0(r2)
  while(1)
  {


	  printf("Vsense value  %d\n" , Vsense);
  80323c:	d0a77083 	ldbu	r2,-25150(gp)
  803240:	10803fcc 	andi	r2,r2,255
  803244:	1080201c 	xori	r2,r2,128
  803248:	10bfe004 	addi	r2,r2,-128
  80324c:	100b883a 	mov	r5,r2
  803250:	01002074 	movhi	r4,129
  803254:	21102004 	addi	r4,r4,16512
  803258:	08035b00 	call	8035b0 <printf>
	  printf("-----------------------\n");
  80325c:	01002074 	movhi	r4,129
  803260:	21102504 	addi	r4,r4,16532
  803264:	08036ac0 	call	8036ac <puts>
	  printf("AEI_ex   %d \n",*timer_expired_flags[3]);
	  printf("LRI_ex   %d \n",*timer_expired_flags[4]);
	  printf("URI_ex   %d \n",*timer_expired_flags[5]);
	  printf("-------------------------- \n");
	  */
	  printf("AVI_start   %d \n",*timer_start_flags[0]);
  803268:	008020b4 	movhi	r2,130
  80326c:	10a0a604 	addi	r2,r2,-32104
  803270:	10800017 	ldw	r2,0(r2)
  803274:	10800003 	ldbu	r2,0(r2)
  803278:	10803fcc 	andi	r2,r2,255
  80327c:	1080201c 	xori	r2,r2,128
  803280:	10bfe004 	addi	r2,r2,-128
  803284:	100b883a 	mov	r5,r2
  803288:	01002074 	movhi	r4,129
  80328c:	21102b04 	addi	r4,r4,16556
  803290:	08035b00 	call	8035b0 <printf>
	  printf("PVARP_start %d \n",*timer_start_flags[1]);
  803294:	008020b4 	movhi	r2,130
  803298:	10a0a604 	addi	r2,r2,-32104
  80329c:	10800117 	ldw	r2,4(r2)
  8032a0:	10800003 	ldbu	r2,0(r2)
  8032a4:	10803fcc 	andi	r2,r2,255
  8032a8:	1080201c 	xori	r2,r2,128
  8032ac:	10bfe004 	addi	r2,r2,-128
  8032b0:	100b883a 	mov	r5,r2
  8032b4:	01002074 	movhi	r4,129
  8032b8:	21103004 	addi	r4,r4,16576
  8032bc:	08035b00 	call	8035b0 <printf>
	  printf("VRP_start   %d \n",*timer_start_flags[2]);
  8032c0:	008020b4 	movhi	r2,130
  8032c4:	10a0a604 	addi	r2,r2,-32104
  8032c8:	10800217 	ldw	r2,8(r2)
  8032cc:	10800003 	ldbu	r2,0(r2)
  8032d0:	10803fcc 	andi	r2,r2,255
  8032d4:	1080201c 	xori	r2,r2,128
  8032d8:	10bfe004 	addi	r2,r2,-128
  8032dc:	100b883a 	mov	r5,r2
  8032e0:	01002074 	movhi	r4,129
  8032e4:	21103504 	addi	r4,r4,16596
  8032e8:	08035b00 	call	8035b0 <printf>
	  printf("AEI_start   %d \n",*timer_start_flags[3]);
  8032ec:	008020b4 	movhi	r2,130
  8032f0:	10a0a604 	addi	r2,r2,-32104
  8032f4:	10800317 	ldw	r2,12(r2)
  8032f8:	10800003 	ldbu	r2,0(r2)
  8032fc:	10803fcc 	andi	r2,r2,255
  803300:	1080201c 	xori	r2,r2,128
  803304:	10bfe004 	addi	r2,r2,-128
  803308:	100b883a 	mov	r5,r2
  80330c:	01002074 	movhi	r4,129
  803310:	21103a04 	addi	r4,r4,16616
  803314:	08035b00 	call	8035b0 <printf>
	  printf("LRI_start   %d \n",*timer_start_flags[4]);
  803318:	008020b4 	movhi	r2,130
  80331c:	10a0a604 	addi	r2,r2,-32104
  803320:	10800417 	ldw	r2,16(r2)
  803324:	10800003 	ldbu	r2,0(r2)
  803328:	10803fcc 	andi	r2,r2,255
  80332c:	1080201c 	xori	r2,r2,128
  803330:	10bfe004 	addi	r2,r2,-128
  803334:	100b883a 	mov	r5,r2
  803338:	01002074 	movhi	r4,129
  80333c:	21103f04 	addi	r4,r4,16636
  803340:	08035b00 	call	8035b0 <printf>
	  printf("URI_start   %d \n",*timer_start_flags[5]);
  803344:	008020b4 	movhi	r2,130
  803348:	10a0a604 	addi	r2,r2,-32104
  80334c:	10800517 	ldw	r2,20(r2)
  803350:	10800003 	ldbu	r2,0(r2)
  803354:	10803fcc 	andi	r2,r2,255
  803358:	1080201c 	xori	r2,r2,128
  80335c:	10bfe004 	addi	r2,r2,-128
  803360:	100b883a 	mov	r5,r2
  803364:	01002074 	movhi	r4,129
  803368:	21104404 	addi	r4,r4,16656
  80336c:	08035b00 	call	8035b0 <printf>
	  printf("-------------------------- \n");
  803370:	01002074 	movhi	r4,129
  803374:	21104904 	addi	r4,r4,16676
  803378:	08036ac0 	call	8036ac <puts>
	  printf("-------------------------- \n");
  80337c:	01002074 	movhi	r4,129
  803380:	21104904 	addi	r4,r4,16676
  803384:	08036ac0 	call	8036ac <puts>

	  delay(10000); // Remove this
  803388:	0109c404 	movi	r4,10000
  80338c:	080308c0 	call	80308c <delay>

	  //printf("AEI_ex   %d \n",*timer_expired_flags[3]);
	  //printf("PVARP_ex   %d \n",*timer_expired_flags[1]);
	  for(int i = 0; i < 6 ; i++)
  803390:	e03fff15 	stw	zero,-4(fp)
  803394:	00004406 	br	8034a8 <main+0x3b8>
	  {
		  if((*timer_start_flags[i])) // check if a timer is started
  803398:	008020b4 	movhi	r2,130
  80339c:	10a0a604 	addi	r2,r2,-32104
  8033a0:	e0ffff17 	ldw	r3,-4(fp)
  8033a4:	18c7883a 	add	r3,r3,r3
  8033a8:	18c7883a 	add	r3,r3,r3
  8033ac:	10c5883a 	add	r2,r2,r3
  8033b0:	10800017 	ldw	r2,0(r2)
  8033b4:	10800003 	ldbu	r2,0(r2)
  8033b8:	10803fcc 	andi	r2,r2,255
  8033bc:	1080201c 	xori	r2,r2,128
  8033c0:	10bfe004 	addi	r2,r2,-128
  8033c4:	10000926 	beq	r2,zero,8033ec <main+0x2fc>
  8033c8:	d0a7a917 	ldw	r2,-24924(gp)
		  {
			  // get the time stamp when start timer flag is set
			  timer_fist_timeStamp_Value[i] = alt_nticks();
  8033cc:	1009883a 	mov	r4,r2
  8033d0:	008020b4 	movhi	r2,130
  8033d4:	10a08a04 	addi	r2,r2,-32216
  8033d8:	e0ffff17 	ldw	r3,-4(fp)
  8033dc:	18c7883a 	add	r3,r3,r3
  8033e0:	18c7883a 	add	r3,r3,r3
  8033e4:	10c5883a 	add	r2,r2,r3
  8033e8:	11000015 	stw	r4,0(r2)
		  }

		  if((*timer_state_flags[i])) // check if a timer is still counting
  8033ec:	008020b4 	movhi	r2,130
  8033f0:	10a0a004 	addi	r2,r2,-32128
  8033f4:	e0ffff17 	ldw	r3,-4(fp)
  8033f8:	18c7883a 	add	r3,r3,r3
  8033fc:	18c7883a 	add	r3,r3,r3
  803400:	10c5883a 	add	r2,r2,r3
  803404:	10800017 	ldw	r2,0(r2)
  803408:	10800003 	ldbu	r2,0(r2)
  80340c:	10803fcc 	andi	r2,r2,255
  803410:	1080201c 	xori	r2,r2,128
  803414:	10bfe004 	addi	r2,r2,-128
  803418:	10001826 	beq	r2,zero,80347c <main+0x38c>
		  {
			  /* check if a timer has timed out
			   * and outputs a timer expire flag to
			   * intput into sccharts
			   */
			  timeout_checker(timer_fist_timeStamp_Value[i],
  80341c:	008020b4 	movhi	r2,130
  803420:	10a08a04 	addi	r2,r2,-32216
  803424:	e0ffff17 	ldw	r3,-4(fp)
  803428:	18c7883a 	add	r3,r3,r3
  80342c:	18c7883a 	add	r3,r3,r3
  803430:	10c5883a 	add	r2,r2,r3
  803434:	11000017 	ldw	r4,0(r2)
  803438:	00802074 	movhi	r2,129
  80343c:	1091b404 	addi	r2,r2,18128
  803440:	e0ffff17 	ldw	r3,-4(fp)
  803444:	18c7883a 	add	r3,r3,r3
  803448:	18c7883a 	add	r3,r3,r3
  80344c:	10c5883a 	add	r2,r2,r3
  803450:	11400017 	ldw	r5,0(r2)
  803454:	008020b4 	movhi	r2,130
  803458:	10a09a04 	addi	r2,r2,-32152
  80345c:	e0ffff17 	ldw	r3,-4(fp)
  803460:	18c7883a 	add	r3,r3,r3
  803464:	18c7883a 	add	r3,r3,r3
  803468:	10c5883a 	add	r2,r2,r3
  80346c:	10800017 	ldw	r2,0(r2)
  803470:	100d883a 	mov	r6,r2
  803474:	08030380 	call	803038 <timeout_checker>
  803478:	00000806 	br	80349c <main+0x3ac>
			                  timer_timeout_values[i],
			                  timer_expired_flags[i]);
		  }
		  else
		  {
			  *timer_expired_flags[i] = 0; // timer is idle or counting
  80347c:	008020b4 	movhi	r2,130
  803480:	10a09a04 	addi	r2,r2,-32152
  803484:	e0ffff17 	ldw	r3,-4(fp)
  803488:	18c7883a 	add	r3,r3,r3
  80348c:	18c7883a 	add	r3,r3,r3
  803490:	10c5883a 	add	r2,r2,r3
  803494:	10800017 	ldw	r2,0(r2)
  803498:	10000005 	stb	zero,0(r2)

	  delay(10000); // Remove this

	  //printf("AEI_ex   %d \n",*timer_expired_flags[3]);
	  //printf("PVARP_ex   %d \n",*timer_expired_flags[1]);
	  for(int i = 0; i < 6 ; i++)
  80349c:	e0bfff17 	ldw	r2,-4(fp)
  8034a0:	10800044 	addi	r2,r2,1
  8034a4:	e0bfff15 	stw	r2,-4(fp)
  8034a8:	e0bfff17 	ldw	r2,-4(fp)
  8034ac:	10800190 	cmplti	r2,r2,6
  8034b0:	103fb91e 	bne	r2,zero,803398 <__alt_mem_onchip_mem+0xff783398>

	  }


	  // run the FSM
	  tick();
  8034b4:	08003480 	call	800348 <tick>


	  if(Apace)
  8034b8:	d0a77343 	ldbu	r2,-25139(gp)
  8034bc:	10803fcc 	andi	r2,r2,255
  8034c0:	1080201c 	xori	r2,r2,128
  8034c4:	10bfe004 	addi	r2,r2,-128
  8034c8:	10000626 	beq	r2,zero,8034e4 <main+0x3f4>
	  {
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0x3FFFF);
  8034cc:	00c00134 	movhi	r3,4
  8034d0:	18ffffc4 	addi	r3,r3,-1
  8034d4:	00804434 	movhi	r2,272
  8034d8:	10842004 	addi	r2,r2,4224
  8034dc:	10c00035 	stwio	r3,0(r2)
  8034e0:	00000406 	br	8034f4 <main+0x404>
	  }
	  else
	  {
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0);
  8034e4:	0007883a 	mov	r3,zero
  8034e8:	00804434 	movhi	r2,272
  8034ec:	10842004 	addi	r2,r2,4224
  8034f0:	10c00035 	stwio	r3,0(r2)
	  }

	  if(Vpace)
  8034f4:	d0a75cc3 	ldbu	r2,-25229(gp)
  8034f8:	10803fcc 	andi	r2,r2,255
  8034fc:	1080201c 	xori	r2,r2,128
  803500:	10bfe004 	addi	r2,r2,-128
  803504:	10000626 	beq	r2,zero,803520 <main+0x430>
	  {
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0x3FFFF);
  803508:	00c00134 	movhi	r3,4
  80350c:	18ffffc4 	addi	r3,r3,-1
  803510:	00804434 	movhi	r2,272
  803514:	10841c04 	addi	r2,r2,4208
  803518:	10c00035 	stwio	r3,0(r2)
  80351c:	003f4706 	br	80323c <__alt_mem_onchip_mem+0xff78323c>
	  }
	  else
	  {
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  803520:	0007883a 	mov	r3,zero
  803524:	00804434 	movhi	r2,272
  803528:	10841c04 	addi	r2,r2,4208
  80352c:	10c00035 	stwio	r3,0(r2)
	  }


  }
  803530:	003f4206 	br	80323c <__alt_mem_onchip_mem+0xff78323c>

00803534 <clock>:
  803534:	00802074 	movhi	r2,129
  803538:	1098df04 	addi	r2,r2,25468
  80353c:	11000017 	ldw	r4,0(r2)
  803540:	defffb04 	addi	sp,sp,-20
  803544:	d80b883a 	mov	r5,sp
  803548:	dfc00415 	stw	ra,16(sp)
  80354c:	08037580 	call	803758 <_times_r>
  803550:	00ffffc4 	movi	r3,-1
  803554:	10c00726 	beq	r2,r3,803574 <clock+0x40>
  803558:	d8c00017 	ldw	r3,0(sp)
  80355c:	d8800117 	ldw	r2,4(sp)
  803560:	1885883a 	add	r2,r3,r2
  803564:	d8c00217 	ldw	r3,8(sp)
  803568:	10c7883a 	add	r3,r2,r3
  80356c:	d8800317 	ldw	r2,12(sp)
  803570:	1885883a 	add	r2,r3,r2
  803574:	dfc00417 	ldw	ra,16(sp)
  803578:	dec00504 	addi	sp,sp,20
  80357c:	f800283a 	ret

00803580 <_printf_r>:
  803580:	defffd04 	addi	sp,sp,-12
  803584:	2805883a 	mov	r2,r5
  803588:	dfc00015 	stw	ra,0(sp)
  80358c:	d9800115 	stw	r6,4(sp)
  803590:	d9c00215 	stw	r7,8(sp)
  803594:	21400217 	ldw	r5,8(r4)
  803598:	d9c00104 	addi	r7,sp,4
  80359c:	100d883a 	mov	r6,r2
  8035a0:	08037600 	call	803760 <___vfprintf_internal_r>
  8035a4:	dfc00017 	ldw	ra,0(sp)
  8035a8:	dec00304 	addi	sp,sp,12
  8035ac:	f800283a 	ret

008035b0 <printf>:
  8035b0:	defffc04 	addi	sp,sp,-16
  8035b4:	dfc00015 	stw	ra,0(sp)
  8035b8:	d9400115 	stw	r5,4(sp)
  8035bc:	d9800215 	stw	r6,8(sp)
  8035c0:	d9c00315 	stw	r7,12(sp)
  8035c4:	00802074 	movhi	r2,129
  8035c8:	1098df04 	addi	r2,r2,25468
  8035cc:	10800017 	ldw	r2,0(r2)
  8035d0:	200b883a 	mov	r5,r4
  8035d4:	d9800104 	addi	r6,sp,4
  8035d8:	11000217 	ldw	r4,8(r2)
  8035dc:	08059580 	call	805958 <__vfprintf_internal>
  8035e0:	dfc00017 	ldw	ra,0(sp)
  8035e4:	dec00404 	addi	sp,sp,16
  8035e8:	f800283a 	ret

008035ec <_puts_r>:
  8035ec:	defff604 	addi	sp,sp,-40
  8035f0:	dc000715 	stw	r16,28(sp)
  8035f4:	2021883a 	mov	r16,r4
  8035f8:	2809883a 	mov	r4,r5
  8035fc:	dc400815 	stw	r17,32(sp)
  803600:	dfc00915 	stw	ra,36(sp)
  803604:	2823883a 	mov	r17,r5
  803608:	08036c00 	call	8036c0 <strlen>
  80360c:	10c00044 	addi	r3,r2,1
  803610:	d8800115 	stw	r2,4(sp)
  803614:	00802074 	movhi	r2,129
  803618:	10905104 	addi	r2,r2,16708
  80361c:	d8800215 	stw	r2,8(sp)
  803620:	00800044 	movi	r2,1
  803624:	d8800315 	stw	r2,12(sp)
  803628:	00800084 	movi	r2,2
  80362c:	dc400015 	stw	r17,0(sp)
  803630:	d8c00615 	stw	r3,24(sp)
  803634:	dec00415 	stw	sp,16(sp)
  803638:	d8800515 	stw	r2,20(sp)
  80363c:	80000226 	beq	r16,zero,803648 <_puts_r+0x5c>
  803640:	80800e17 	ldw	r2,56(r16)
  803644:	10001426 	beq	r2,zero,803698 <_puts_r+0xac>
  803648:	81400217 	ldw	r5,8(r16)
  80364c:	2880030b 	ldhu	r2,12(r5)
  803650:	10c8000c 	andi	r3,r2,8192
  803654:	1800061e 	bne	r3,zero,803670 <_puts_r+0x84>
  803658:	29001917 	ldw	r4,100(r5)
  80365c:	00f7ffc4 	movi	r3,-8193
  803660:	10880014 	ori	r2,r2,8192
  803664:	20c6703a 	and	r3,r4,r3
  803668:	2880030d 	sth	r2,12(r5)
  80366c:	28c01915 	stw	r3,100(r5)
  803670:	d9800404 	addi	r6,sp,16
  803674:	8009883a 	mov	r4,r16
  803678:	0807e880 	call	807e88 <__sfvwrite_r>
  80367c:	1000091e 	bne	r2,zero,8036a4 <_puts_r+0xb8>
  803680:	00800284 	movi	r2,10
  803684:	dfc00917 	ldw	ra,36(sp)
  803688:	dc400817 	ldw	r17,32(sp)
  80368c:	dc000717 	ldw	r16,28(sp)
  803690:	dec00a04 	addi	sp,sp,40
  803694:	f800283a 	ret
  803698:	8009883a 	mov	r4,r16
  80369c:	0807a040 	call	807a04 <__sinit>
  8036a0:	003fe906 	br	803648 <__alt_mem_onchip_mem+0xff783648>
  8036a4:	00bfffc4 	movi	r2,-1
  8036a8:	003ff606 	br	803684 <__alt_mem_onchip_mem+0xff783684>

008036ac <puts>:
  8036ac:	00802074 	movhi	r2,129
  8036b0:	1098df04 	addi	r2,r2,25468
  8036b4:	200b883a 	mov	r5,r4
  8036b8:	11000017 	ldw	r4,0(r2)
  8036bc:	08035ec1 	jmpi	8035ec <_puts_r>

008036c0 <strlen>:
  8036c0:	208000cc 	andi	r2,r4,3
  8036c4:	10002026 	beq	r2,zero,803748 <strlen+0x88>
  8036c8:	20800007 	ldb	r2,0(r4)
  8036cc:	10002026 	beq	r2,zero,803750 <strlen+0x90>
  8036d0:	2005883a 	mov	r2,r4
  8036d4:	00000206 	br	8036e0 <strlen+0x20>
  8036d8:	10c00007 	ldb	r3,0(r2)
  8036dc:	18001826 	beq	r3,zero,803740 <strlen+0x80>
  8036e0:	10800044 	addi	r2,r2,1
  8036e4:	10c000cc 	andi	r3,r2,3
  8036e8:	183ffb1e 	bne	r3,zero,8036d8 <__alt_mem_onchip_mem+0xff7836d8>
  8036ec:	10c00017 	ldw	r3,0(r2)
  8036f0:	01ffbff4 	movhi	r7,65279
  8036f4:	39ffbfc4 	addi	r7,r7,-257
  8036f8:	00ca303a 	nor	r5,zero,r3
  8036fc:	01a02074 	movhi	r6,32897
  803700:	19c7883a 	add	r3,r3,r7
  803704:	31a02004 	addi	r6,r6,-32640
  803708:	1946703a 	and	r3,r3,r5
  80370c:	1986703a 	and	r3,r3,r6
  803710:	1800091e 	bne	r3,zero,803738 <strlen+0x78>
  803714:	10800104 	addi	r2,r2,4
  803718:	10c00017 	ldw	r3,0(r2)
  80371c:	19cb883a 	add	r5,r3,r7
  803720:	00c6303a 	nor	r3,zero,r3
  803724:	28c6703a 	and	r3,r5,r3
  803728:	1986703a 	and	r3,r3,r6
  80372c:	183ff926 	beq	r3,zero,803714 <__alt_mem_onchip_mem+0xff783714>
  803730:	00000106 	br	803738 <strlen+0x78>
  803734:	10800044 	addi	r2,r2,1
  803738:	10c00007 	ldb	r3,0(r2)
  80373c:	183ffd1e 	bne	r3,zero,803734 <__alt_mem_onchip_mem+0xff783734>
  803740:	1105c83a 	sub	r2,r2,r4
  803744:	f800283a 	ret
  803748:	2005883a 	mov	r2,r4
  80374c:	003fe706 	br	8036ec <__alt_mem_onchip_mem+0xff7836ec>
  803750:	0005883a 	mov	r2,zero
  803754:	f800283a 	ret

00803758 <_times_r>:
  803758:	2809883a 	mov	r4,r5
  80375c:	08108981 	jmpi	810898 <times>

00803760 <___vfprintf_internal_r>:
  803760:	deffb804 	addi	sp,sp,-288
  803764:	dfc04715 	stw	ra,284(sp)
  803768:	ddc04515 	stw	r23,276(sp)
  80376c:	dd404315 	stw	r21,268(sp)
  803770:	d9002c15 	stw	r4,176(sp)
  803774:	282f883a 	mov	r23,r5
  803778:	302b883a 	mov	r21,r6
  80377c:	d9c02d15 	stw	r7,180(sp)
  803780:	df004615 	stw	fp,280(sp)
  803784:	dd804415 	stw	r22,272(sp)
  803788:	dd004215 	stw	r20,264(sp)
  80378c:	dcc04115 	stw	r19,260(sp)
  803790:	dc804015 	stw	r18,256(sp)
  803794:	dc403f15 	stw	r17,252(sp)
  803798:	dc003e15 	stw	r16,248(sp)
  80379c:	08085780 	call	808578 <_localeconv_r>
  8037a0:	10800017 	ldw	r2,0(r2)
  8037a4:	1009883a 	mov	r4,r2
  8037a8:	d8803415 	stw	r2,208(sp)
  8037ac:	08036c00 	call	8036c0 <strlen>
  8037b0:	d8803715 	stw	r2,220(sp)
  8037b4:	d8802c17 	ldw	r2,176(sp)
  8037b8:	10000226 	beq	r2,zero,8037c4 <___vfprintf_internal_r+0x64>
  8037bc:	10800e17 	ldw	r2,56(r2)
  8037c0:	1000f926 	beq	r2,zero,803ba8 <___vfprintf_internal_r+0x448>
  8037c4:	b880030b 	ldhu	r2,12(r23)
  8037c8:	10c8000c 	andi	r3,r2,8192
  8037cc:	1800061e 	bne	r3,zero,8037e8 <___vfprintf_internal_r+0x88>
  8037d0:	b9001917 	ldw	r4,100(r23)
  8037d4:	00f7ffc4 	movi	r3,-8193
  8037d8:	10880014 	ori	r2,r2,8192
  8037dc:	20c6703a 	and	r3,r4,r3
  8037e0:	b880030d 	sth	r2,12(r23)
  8037e4:	b8c01915 	stw	r3,100(r23)
  8037e8:	10c0020c 	andi	r3,r2,8
  8037ec:	1800c126 	beq	r3,zero,803af4 <___vfprintf_internal_r+0x394>
  8037f0:	b8c00417 	ldw	r3,16(r23)
  8037f4:	1800bf26 	beq	r3,zero,803af4 <___vfprintf_internal_r+0x394>
  8037f8:	1080068c 	andi	r2,r2,26
  8037fc:	00c00284 	movi	r3,10
  803800:	10c0c426 	beq	r2,r3,803b14 <___vfprintf_internal_r+0x3b4>
  803804:	d8c00404 	addi	r3,sp,16
  803808:	05002074 	movhi	r20,129
  80380c:	d9001e04 	addi	r4,sp,120
  803810:	a5106284 	addi	r20,r20,16778
  803814:	d8c01e15 	stw	r3,120(sp)
  803818:	d8002015 	stw	zero,128(sp)
  80381c:	d8001f15 	stw	zero,124(sp)
  803820:	d8003315 	stw	zero,204(sp)
  803824:	d8003615 	stw	zero,216(sp)
  803828:	d8003815 	stw	zero,224(sp)
  80382c:	1811883a 	mov	r8,r3
  803830:	d8003915 	stw	zero,228(sp)
  803834:	d8003a15 	stw	zero,232(sp)
  803838:	d8002f15 	stw	zero,188(sp)
  80383c:	d9002815 	stw	r4,160(sp)
  803840:	a8800007 	ldb	r2,0(r21)
  803844:	10027b26 	beq	r2,zero,804234 <___vfprintf_internal_r+0xad4>
  803848:	00c00944 	movi	r3,37
  80384c:	a821883a 	mov	r16,r21
  803850:	10c0021e 	bne	r2,r3,80385c <___vfprintf_internal_r+0xfc>
  803854:	00001406 	br	8038a8 <___vfprintf_internal_r+0x148>
  803858:	10c00326 	beq	r2,r3,803868 <___vfprintf_internal_r+0x108>
  80385c:	84000044 	addi	r16,r16,1
  803860:	80800007 	ldb	r2,0(r16)
  803864:	103ffc1e 	bne	r2,zero,803858 <__alt_mem_onchip_mem+0xff783858>
  803868:	8563c83a 	sub	r17,r16,r21
  80386c:	88000e26 	beq	r17,zero,8038a8 <___vfprintf_internal_r+0x148>
  803870:	d8c02017 	ldw	r3,128(sp)
  803874:	d8801f17 	ldw	r2,124(sp)
  803878:	45400015 	stw	r21,0(r8)
  80387c:	1c47883a 	add	r3,r3,r17
  803880:	10800044 	addi	r2,r2,1
  803884:	d8c02015 	stw	r3,128(sp)
  803888:	44400115 	stw	r17,4(r8)
  80388c:	d8801f15 	stw	r2,124(sp)
  803890:	00c001c4 	movi	r3,7
  803894:	1880a716 	blt	r3,r2,803b34 <___vfprintf_internal_r+0x3d4>
  803898:	42000204 	addi	r8,r8,8
  80389c:	d9402f17 	ldw	r5,188(sp)
  8038a0:	2c4b883a 	add	r5,r5,r17
  8038a4:	d9402f15 	stw	r5,188(sp)
  8038a8:	80800007 	ldb	r2,0(r16)
  8038ac:	1000a826 	beq	r2,zero,803b50 <___vfprintf_internal_r+0x3f0>
  8038b0:	84400047 	ldb	r17,1(r16)
  8038b4:	00bfffc4 	movi	r2,-1
  8038b8:	85400044 	addi	r21,r16,1
  8038bc:	d8002785 	stb	zero,158(sp)
  8038c0:	0007883a 	mov	r3,zero
  8038c4:	000f883a 	mov	r7,zero
  8038c8:	d8802915 	stw	r2,164(sp)
  8038cc:	d8003115 	stw	zero,196(sp)
  8038d0:	0025883a 	mov	r18,zero
  8038d4:	01401604 	movi	r5,88
  8038d8:	01800244 	movi	r6,9
  8038dc:	02800a84 	movi	r10,42
  8038e0:	02401b04 	movi	r9,108
  8038e4:	ad400044 	addi	r21,r21,1
  8038e8:	88bff804 	addi	r2,r17,-32
  8038ec:	28830436 	bltu	r5,r2,804500 <___vfprintf_internal_r+0xda0>
  8038f0:	100490ba 	slli	r2,r2,2
  8038f4:	01002034 	movhi	r4,128
  8038f8:	210e4204 	addi	r4,r4,14600
  8038fc:	1105883a 	add	r2,r2,r4
  803900:	10800017 	ldw	r2,0(r2)
  803904:	1000683a 	jmp	r2
  803908:	00804420 	cmpeqi	r2,zero,272
  80390c:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803910:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803914:	00804440 	call	80444 <__alt_mem_sdram-0x77fbbc>
  803918:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  80391c:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803920:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803924:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803928:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  80392c:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803930:	00803bb4 	movhi	r2,238
  803934:	0080435c 	xori	r2,zero,269
  803938:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  80393c:	00803a7c 	xorhi	r2,zero,233
  803940:	00803bdc 	xori	r2,zero,239
  803944:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803948:	00803c1c 	xori	r2,zero,240
  80394c:	00803c28 	cmpgeui	r2,zero,240
  803950:	00803c28 	cmpgeui	r2,zero,240
  803954:	00803c28 	cmpgeui	r2,zero,240
  803958:	00803c28 	cmpgeui	r2,zero,240
  80395c:	00803c28 	cmpgeui	r2,zero,240
  803960:	00803c28 	cmpgeui	r2,zero,240
  803964:	00803c28 	cmpgeui	r2,zero,240
  803968:	00803c28 	cmpgeui	r2,zero,240
  80396c:	00803c28 	cmpgeui	r2,zero,240
  803970:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803974:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803978:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  80397c:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803980:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803984:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803988:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  80398c:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803990:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803994:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803998:	00803c5c 	xori	r2,zero,241
  80399c:	00803d18 	cmpnei	r2,zero,244
  8039a0:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039a4:	00803d18 	cmpnei	r2,zero,244
  8039a8:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039ac:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039b0:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039b4:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039b8:	00803db8 	rdprs	r2,zero,246
  8039bc:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039c0:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039c4:	00803dc4 	movi	r2,247
  8039c8:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039cc:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039d0:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039d4:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039d8:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039dc:	0080423c 	xorhi	r2,zero,264
  8039e0:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039e4:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039e8:	0080429c 	xori	r2,zero,266
  8039ec:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039f0:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039f4:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039f8:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  8039fc:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a00:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a04:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a08:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a0c:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a10:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a14:	008044ac 	andhi	r2,zero,274
  803a18:	0080444c 	andi	r2,zero,273
  803a1c:	00803d18 	cmpnei	r2,zero,244
  803a20:	00803d18 	cmpnei	r2,zero,244
  803a24:	00803d18 	cmpnei	r2,zero,244
  803a28:	0080445c 	xori	r2,zero,273
  803a2c:	0080444c 	andi	r2,zero,273
  803a30:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a34:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a38:	00804468 	cmpgeui	r2,zero,273
  803a3c:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a40:	00804478 	rdprs	r2,zero,273
  803a44:	0080434c 	andi	r2,zero,269
  803a48:	00803a88 	cmpgei	r2,zero,234
  803a4c:	0080436c 	andhi	r2,zero,269
  803a50:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a54:	00804378 	rdprs	r2,zero,269
  803a58:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a5c:	008043d4 	movui	r2,271
  803a60:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a64:	00804500 	call	80450 <__alt_mem_sdram-0x77fbb0>
  803a68:	008043e4 	muli	r2,zero,271
  803a6c:	d9003117 	ldw	r4,196(sp)
  803a70:	d8802d15 	stw	r2,180(sp)
  803a74:	0109c83a 	sub	r4,zero,r4
  803a78:	d9003115 	stw	r4,196(sp)
  803a7c:	94800114 	ori	r18,r18,4
  803a80:	ac400007 	ldb	r17,0(r21)
  803a84:	003f9706 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  803a88:	00800c04 	movi	r2,48
  803a8c:	d9002d17 	ldw	r4,180(sp)
  803a90:	d9402917 	ldw	r5,164(sp)
  803a94:	d8802705 	stb	r2,156(sp)
  803a98:	00801e04 	movi	r2,120
  803a9c:	d8802745 	stb	r2,157(sp)
  803aa0:	d8002785 	stb	zero,158(sp)
  803aa4:	20c00104 	addi	r3,r4,4
  803aa8:	24c00017 	ldw	r19,0(r4)
  803aac:	002d883a 	mov	r22,zero
  803ab0:	90800094 	ori	r2,r18,2
  803ab4:	28029a16 	blt	r5,zero,804520 <___vfprintf_internal_r+0xdc0>
  803ab8:	00bfdfc4 	movi	r2,-129
  803abc:	90a4703a 	and	r18,r18,r2
  803ac0:	d8c02d15 	stw	r3,180(sp)
  803ac4:	94800094 	ori	r18,r18,2
  803ac8:	9802871e 	bne	r19,zero,8044e8 <___vfprintf_internal_r+0xd88>
  803acc:	00802074 	movhi	r2,129
  803ad0:	10905b04 	addi	r2,r2,16748
  803ad4:	d8803915 	stw	r2,228(sp)
  803ad8:	04401e04 	movi	r17,120
  803adc:	d8802917 	ldw	r2,164(sp)
  803ae0:	0039883a 	mov	fp,zero
  803ae4:	1001e926 	beq	r2,zero,80428c <___vfprintf_internal_r+0xb2c>
  803ae8:	0027883a 	mov	r19,zero
  803aec:	002d883a 	mov	r22,zero
  803af0:	00020506 	br	804308 <___vfprintf_internal_r+0xba8>
  803af4:	d9002c17 	ldw	r4,176(sp)
  803af8:	b80b883a 	mov	r5,r23
  803afc:	0805a300 	call	805a30 <__swsetup_r>
  803b00:	1005ac1e 	bne	r2,zero,8051b4 <___vfprintf_internal_r+0x1a54>
  803b04:	b880030b 	ldhu	r2,12(r23)
  803b08:	00c00284 	movi	r3,10
  803b0c:	1080068c 	andi	r2,r2,26
  803b10:	10ff3c1e 	bne	r2,r3,803804 <__alt_mem_onchip_mem+0xff783804>
  803b14:	b880038f 	ldh	r2,14(r23)
  803b18:	103f3a16 	blt	r2,zero,803804 <__alt_mem_onchip_mem+0xff783804>
  803b1c:	d9c02d17 	ldw	r7,180(sp)
  803b20:	d9002c17 	ldw	r4,176(sp)
  803b24:	a80d883a 	mov	r6,r21
  803b28:	b80b883a 	mov	r5,r23
  803b2c:	08059740 	call	805974 <__sbprintf>
  803b30:	00001106 	br	803b78 <___vfprintf_internal_r+0x418>
  803b34:	d9002c17 	ldw	r4,176(sp)
  803b38:	d9801e04 	addi	r6,sp,120
  803b3c:	b80b883a 	mov	r5,r23
  803b40:	080ad5c0 	call	80ad5c <__sprint_r>
  803b44:	1000081e 	bne	r2,zero,803b68 <___vfprintf_internal_r+0x408>
  803b48:	da000404 	addi	r8,sp,16
  803b4c:	003f5306 	br	80389c <__alt_mem_onchip_mem+0xff78389c>
  803b50:	d8802017 	ldw	r2,128(sp)
  803b54:	10000426 	beq	r2,zero,803b68 <___vfprintf_internal_r+0x408>
  803b58:	d9002c17 	ldw	r4,176(sp)
  803b5c:	d9801e04 	addi	r6,sp,120
  803b60:	b80b883a 	mov	r5,r23
  803b64:	080ad5c0 	call	80ad5c <__sprint_r>
  803b68:	b880030b 	ldhu	r2,12(r23)
  803b6c:	1080100c 	andi	r2,r2,64
  803b70:	1005901e 	bne	r2,zero,8051b4 <___vfprintf_internal_r+0x1a54>
  803b74:	d8802f17 	ldw	r2,188(sp)
  803b78:	dfc04717 	ldw	ra,284(sp)
  803b7c:	df004617 	ldw	fp,280(sp)
  803b80:	ddc04517 	ldw	r23,276(sp)
  803b84:	dd804417 	ldw	r22,272(sp)
  803b88:	dd404317 	ldw	r21,268(sp)
  803b8c:	dd004217 	ldw	r20,264(sp)
  803b90:	dcc04117 	ldw	r19,260(sp)
  803b94:	dc804017 	ldw	r18,256(sp)
  803b98:	dc403f17 	ldw	r17,252(sp)
  803b9c:	dc003e17 	ldw	r16,248(sp)
  803ba0:	dec04804 	addi	sp,sp,288
  803ba4:	f800283a 	ret
  803ba8:	d9002c17 	ldw	r4,176(sp)
  803bac:	0807a040 	call	807a04 <__sinit>
  803bb0:	003f0406 	br	8037c4 <__alt_mem_onchip_mem+0xff7837c4>
  803bb4:	d8802d17 	ldw	r2,180(sp)
  803bb8:	d9002d17 	ldw	r4,180(sp)
  803bbc:	10800017 	ldw	r2,0(r2)
  803bc0:	d8803115 	stw	r2,196(sp)
  803bc4:	20800104 	addi	r2,r4,4
  803bc8:	d9003117 	ldw	r4,196(sp)
  803bcc:	203fa716 	blt	r4,zero,803a6c <__alt_mem_onchip_mem+0xff783a6c>
  803bd0:	d8802d15 	stw	r2,180(sp)
  803bd4:	ac400007 	ldb	r17,0(r21)
  803bd8:	003f4206 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  803bdc:	ac400007 	ldb	r17,0(r21)
  803be0:	aac00044 	addi	r11,r21,1
  803be4:	8a872826 	beq	r17,r10,805888 <___vfprintf_internal_r+0x2128>
  803be8:	88bff404 	addi	r2,r17,-48
  803bec:	0009883a 	mov	r4,zero
  803bf0:	30867d36 	bltu	r6,r2,8055e8 <___vfprintf_internal_r+0x1e88>
  803bf4:	5c400007 	ldb	r17,0(r11)
  803bf8:	210002a4 	muli	r4,r4,10
  803bfc:	5d400044 	addi	r21,r11,1
  803c00:	a817883a 	mov	r11,r21
  803c04:	2089883a 	add	r4,r4,r2
  803c08:	88bff404 	addi	r2,r17,-48
  803c0c:	30bff92e 	bgeu	r6,r2,803bf4 <__alt_mem_onchip_mem+0xff783bf4>
  803c10:	2005c916 	blt	r4,zero,805338 <___vfprintf_internal_r+0x1bd8>
  803c14:	d9002915 	stw	r4,164(sp)
  803c18:	003f3306 	br	8038e8 <__alt_mem_onchip_mem+0xff7838e8>
  803c1c:	94802014 	ori	r18,r18,128
  803c20:	ac400007 	ldb	r17,0(r21)
  803c24:	003f2f06 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  803c28:	a809883a 	mov	r4,r21
  803c2c:	d8003115 	stw	zero,196(sp)
  803c30:	88bff404 	addi	r2,r17,-48
  803c34:	0017883a 	mov	r11,zero
  803c38:	24400007 	ldb	r17,0(r4)
  803c3c:	5ac002a4 	muli	r11,r11,10
  803c40:	ad400044 	addi	r21,r21,1
  803c44:	a809883a 	mov	r4,r21
  803c48:	12d7883a 	add	r11,r2,r11
  803c4c:	88bff404 	addi	r2,r17,-48
  803c50:	30bff92e 	bgeu	r6,r2,803c38 <__alt_mem_onchip_mem+0xff783c38>
  803c54:	dac03115 	stw	r11,196(sp)
  803c58:	003f2306 	br	8038e8 <__alt_mem_onchip_mem+0xff7838e8>
  803c5c:	18c03fcc 	andi	r3,r3,255
  803c60:	18072b1e 	bne	r3,zero,805910 <___vfprintf_internal_r+0x21b0>
  803c64:	94800414 	ori	r18,r18,16
  803c68:	9080080c 	andi	r2,r18,32
  803c6c:	10037b26 	beq	r2,zero,804a5c <___vfprintf_internal_r+0x12fc>
  803c70:	d9402d17 	ldw	r5,180(sp)
  803c74:	28800117 	ldw	r2,4(r5)
  803c78:	2cc00017 	ldw	r19,0(r5)
  803c7c:	29400204 	addi	r5,r5,8
  803c80:	d9402d15 	stw	r5,180(sp)
  803c84:	102d883a 	mov	r22,r2
  803c88:	10044b16 	blt	r2,zero,804db8 <___vfprintf_internal_r+0x1658>
  803c8c:	d9402917 	ldw	r5,164(sp)
  803c90:	df002783 	ldbu	fp,158(sp)
  803c94:	2803bc16 	blt	r5,zero,804b88 <___vfprintf_internal_r+0x1428>
  803c98:	00ffdfc4 	movi	r3,-129
  803c9c:	9d84b03a 	or	r2,r19,r22
  803ca0:	90e4703a 	and	r18,r18,r3
  803ca4:	10017726 	beq	r2,zero,804284 <___vfprintf_internal_r+0xb24>
  803ca8:	b0038326 	beq	r22,zero,804ab8 <___vfprintf_internal_r+0x1358>
  803cac:	dc402a15 	stw	r17,168(sp)
  803cb0:	dc001e04 	addi	r16,sp,120
  803cb4:	b023883a 	mov	r17,r22
  803cb8:	402d883a 	mov	r22,r8
  803cbc:	9809883a 	mov	r4,r19
  803cc0:	880b883a 	mov	r5,r17
  803cc4:	01800284 	movi	r6,10
  803cc8:	000f883a 	mov	r7,zero
  803ccc:	080d1540 	call	80d154 <__umoddi3>
  803cd0:	10800c04 	addi	r2,r2,48
  803cd4:	843fffc4 	addi	r16,r16,-1
  803cd8:	9809883a 	mov	r4,r19
  803cdc:	880b883a 	mov	r5,r17
  803ce0:	80800005 	stb	r2,0(r16)
  803ce4:	01800284 	movi	r6,10
  803ce8:	000f883a 	mov	r7,zero
  803cec:	080cbdc0 	call	80cbdc <__udivdi3>
  803cf0:	1027883a 	mov	r19,r2
  803cf4:	10c4b03a 	or	r2,r2,r3
  803cf8:	1823883a 	mov	r17,r3
  803cfc:	103fef1e 	bne	r2,zero,803cbc <__alt_mem_onchip_mem+0xff783cbc>
  803d00:	d8c02817 	ldw	r3,160(sp)
  803d04:	dc402a17 	ldw	r17,168(sp)
  803d08:	b011883a 	mov	r8,r22
  803d0c:	1c07c83a 	sub	r3,r3,r16
  803d10:	d8c02e15 	stw	r3,184(sp)
  803d14:	00005906 	br	803e7c <___vfprintf_internal_r+0x71c>
  803d18:	18c03fcc 	andi	r3,r3,255
  803d1c:	1806fa1e 	bne	r3,zero,805908 <___vfprintf_internal_r+0x21a8>
  803d20:	9080020c 	andi	r2,r18,8
  803d24:	10048a26 	beq	r2,zero,804f50 <___vfprintf_internal_r+0x17f0>
  803d28:	d8c02d17 	ldw	r3,180(sp)
  803d2c:	d9002d17 	ldw	r4,180(sp)
  803d30:	d9402d17 	ldw	r5,180(sp)
  803d34:	18c00017 	ldw	r3,0(r3)
  803d38:	21000117 	ldw	r4,4(r4)
  803d3c:	29400204 	addi	r5,r5,8
  803d40:	d8c03615 	stw	r3,216(sp)
  803d44:	d9003815 	stw	r4,224(sp)
  803d48:	d9402d15 	stw	r5,180(sp)
  803d4c:	d9003617 	ldw	r4,216(sp)
  803d50:	d9403817 	ldw	r5,224(sp)
  803d54:	da003d15 	stw	r8,244(sp)
  803d58:	04000044 	movi	r16,1
  803d5c:	080a9800 	call	80a980 <__fpclassifyd>
  803d60:	da003d17 	ldw	r8,244(sp)
  803d64:	14041f1e 	bne	r2,r16,804de4 <___vfprintf_internal_r+0x1684>
  803d68:	d9003617 	ldw	r4,216(sp)
  803d6c:	d9403817 	ldw	r5,224(sp)
  803d70:	000d883a 	mov	r6,zero
  803d74:	000f883a 	mov	r7,zero
  803d78:	080eb380 	call	80eb38 <__ledf2>
  803d7c:	da003d17 	ldw	r8,244(sp)
  803d80:	1005be16 	blt	r2,zero,80547c <___vfprintf_internal_r+0x1d1c>
  803d84:	df002783 	ldbu	fp,158(sp)
  803d88:	008011c4 	movi	r2,71
  803d8c:	1445330e 	bge	r2,r17,80525c <___vfprintf_internal_r+0x1afc>
  803d90:	04002074 	movhi	r16,129
  803d94:	84105304 	addi	r16,r16,16716
  803d98:	00c000c4 	movi	r3,3
  803d9c:	00bfdfc4 	movi	r2,-129
  803da0:	d8c02a15 	stw	r3,168(sp)
  803da4:	90a4703a 	and	r18,r18,r2
  803da8:	d8c02e15 	stw	r3,184(sp)
  803dac:	d8002915 	stw	zero,164(sp)
  803db0:	d8003215 	stw	zero,200(sp)
  803db4:	00003706 	br	803e94 <___vfprintf_internal_r+0x734>
  803db8:	94800214 	ori	r18,r18,8
  803dbc:	ac400007 	ldb	r17,0(r21)
  803dc0:	003ec806 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  803dc4:	18c03fcc 	andi	r3,r3,255
  803dc8:	1806db1e 	bne	r3,zero,805938 <___vfprintf_internal_r+0x21d8>
  803dcc:	94800414 	ori	r18,r18,16
  803dd0:	9080080c 	andi	r2,r18,32
  803dd4:	1002d826 	beq	r2,zero,804938 <___vfprintf_internal_r+0x11d8>
  803dd8:	d9402d17 	ldw	r5,180(sp)
  803ddc:	d8c02917 	ldw	r3,164(sp)
  803de0:	d8002785 	stb	zero,158(sp)
  803de4:	28800204 	addi	r2,r5,8
  803de8:	2cc00017 	ldw	r19,0(r5)
  803dec:	2d800117 	ldw	r22,4(r5)
  803df0:	18048f16 	blt	r3,zero,805030 <___vfprintf_internal_r+0x18d0>
  803df4:	013fdfc4 	movi	r4,-129
  803df8:	9d86b03a 	or	r3,r19,r22
  803dfc:	d8802d15 	stw	r2,180(sp)
  803e00:	9124703a 	and	r18,r18,r4
  803e04:	1802d91e 	bne	r3,zero,80496c <___vfprintf_internal_r+0x120c>
  803e08:	d8c02917 	ldw	r3,164(sp)
  803e0c:	0039883a 	mov	fp,zero
  803e10:	1805c326 	beq	r3,zero,805520 <___vfprintf_internal_r+0x1dc0>
  803e14:	0027883a 	mov	r19,zero
  803e18:	002d883a 	mov	r22,zero
  803e1c:	dc001e04 	addi	r16,sp,120
  803e20:	9806d0fa 	srli	r3,r19,3
  803e24:	b008977a 	slli	r4,r22,29
  803e28:	b02cd0fa 	srli	r22,r22,3
  803e2c:	9cc001cc 	andi	r19,r19,7
  803e30:	98800c04 	addi	r2,r19,48
  803e34:	843fffc4 	addi	r16,r16,-1
  803e38:	20e6b03a 	or	r19,r4,r3
  803e3c:	80800005 	stb	r2,0(r16)
  803e40:	9d86b03a 	or	r3,r19,r22
  803e44:	183ff61e 	bne	r3,zero,803e20 <__alt_mem_onchip_mem+0xff783e20>
  803e48:	90c0004c 	andi	r3,r18,1
  803e4c:	18013b26 	beq	r3,zero,80433c <___vfprintf_internal_r+0xbdc>
  803e50:	10803fcc 	andi	r2,r2,255
  803e54:	1080201c 	xori	r2,r2,128
  803e58:	10bfe004 	addi	r2,r2,-128
  803e5c:	00c00c04 	movi	r3,48
  803e60:	10c13626 	beq	r2,r3,80433c <___vfprintf_internal_r+0xbdc>
  803e64:	80ffffc5 	stb	r3,-1(r16)
  803e68:	d8c02817 	ldw	r3,160(sp)
  803e6c:	80bfffc4 	addi	r2,r16,-1
  803e70:	1021883a 	mov	r16,r2
  803e74:	1887c83a 	sub	r3,r3,r2
  803e78:	d8c02e15 	stw	r3,184(sp)
  803e7c:	d8802e17 	ldw	r2,184(sp)
  803e80:	d9002917 	ldw	r4,164(sp)
  803e84:	1100010e 	bge	r2,r4,803e8c <___vfprintf_internal_r+0x72c>
  803e88:	2005883a 	mov	r2,r4
  803e8c:	d8802a15 	stw	r2,168(sp)
  803e90:	d8003215 	stw	zero,200(sp)
  803e94:	e7003fcc 	andi	fp,fp,255
  803e98:	e700201c 	xori	fp,fp,128
  803e9c:	e73fe004 	addi	fp,fp,-128
  803ea0:	e0000326 	beq	fp,zero,803eb0 <___vfprintf_internal_r+0x750>
  803ea4:	d8c02a17 	ldw	r3,168(sp)
  803ea8:	18c00044 	addi	r3,r3,1
  803eac:	d8c02a15 	stw	r3,168(sp)
  803eb0:	90c0008c 	andi	r3,r18,2
  803eb4:	d8c02b15 	stw	r3,172(sp)
  803eb8:	18000326 	beq	r3,zero,803ec8 <___vfprintf_internal_r+0x768>
  803ebc:	d8c02a17 	ldw	r3,168(sp)
  803ec0:	18c00084 	addi	r3,r3,2
  803ec4:	d8c02a15 	stw	r3,168(sp)
  803ec8:	90c0210c 	andi	r3,r18,132
  803ecc:	d8c03015 	stw	r3,192(sp)
  803ed0:	1801a31e 	bne	r3,zero,804560 <___vfprintf_internal_r+0xe00>
  803ed4:	d9003117 	ldw	r4,196(sp)
  803ed8:	d8c02a17 	ldw	r3,168(sp)
  803edc:	20e7c83a 	sub	r19,r4,r3
  803ee0:	04c19f0e 	bge	zero,r19,804560 <___vfprintf_internal_r+0xe00>
  803ee4:	02400404 	movi	r9,16
  803ee8:	d8c02017 	ldw	r3,128(sp)
  803eec:	d8801f17 	ldw	r2,124(sp)
  803ef0:	4cc50d0e 	bge	r9,r19,805328 <___vfprintf_internal_r+0x1bc8>
  803ef4:	01402074 	movhi	r5,129
  803ef8:	29506684 	addi	r5,r5,16794
  803efc:	dc403b15 	stw	r17,236(sp)
  803f00:	d9403515 	stw	r5,212(sp)
  803f04:	9823883a 	mov	r17,r19
  803f08:	482d883a 	mov	r22,r9
  803f0c:	9027883a 	mov	r19,r18
  803f10:	070001c4 	movi	fp,7
  803f14:	8025883a 	mov	r18,r16
  803f18:	dc002c17 	ldw	r16,176(sp)
  803f1c:	00000306 	br	803f2c <___vfprintf_internal_r+0x7cc>
  803f20:	8c7ffc04 	addi	r17,r17,-16
  803f24:	42000204 	addi	r8,r8,8
  803f28:	b440130e 	bge	r22,r17,803f78 <___vfprintf_internal_r+0x818>
  803f2c:	01002074 	movhi	r4,129
  803f30:	18c00404 	addi	r3,r3,16
  803f34:	10800044 	addi	r2,r2,1
  803f38:	21106684 	addi	r4,r4,16794
  803f3c:	41000015 	stw	r4,0(r8)
  803f40:	45800115 	stw	r22,4(r8)
  803f44:	d8c02015 	stw	r3,128(sp)
  803f48:	d8801f15 	stw	r2,124(sp)
  803f4c:	e0bff40e 	bge	fp,r2,803f20 <__alt_mem_onchip_mem+0xff783f20>
  803f50:	d9801e04 	addi	r6,sp,120
  803f54:	b80b883a 	mov	r5,r23
  803f58:	8009883a 	mov	r4,r16
  803f5c:	080ad5c0 	call	80ad5c <__sprint_r>
  803f60:	103f011e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  803f64:	8c7ffc04 	addi	r17,r17,-16
  803f68:	d8c02017 	ldw	r3,128(sp)
  803f6c:	d8801f17 	ldw	r2,124(sp)
  803f70:	da000404 	addi	r8,sp,16
  803f74:	b47fed16 	blt	r22,r17,803f2c <__alt_mem_onchip_mem+0xff783f2c>
  803f78:	9021883a 	mov	r16,r18
  803f7c:	9825883a 	mov	r18,r19
  803f80:	8827883a 	mov	r19,r17
  803f84:	dc403b17 	ldw	r17,236(sp)
  803f88:	d9403517 	ldw	r5,212(sp)
  803f8c:	98c7883a 	add	r3,r19,r3
  803f90:	10800044 	addi	r2,r2,1
  803f94:	41400015 	stw	r5,0(r8)
  803f98:	44c00115 	stw	r19,4(r8)
  803f9c:	d8c02015 	stw	r3,128(sp)
  803fa0:	d8801f15 	stw	r2,124(sp)
  803fa4:	010001c4 	movi	r4,7
  803fa8:	2082a316 	blt	r4,r2,804a38 <___vfprintf_internal_r+0x12d8>
  803fac:	df002787 	ldb	fp,158(sp)
  803fb0:	42000204 	addi	r8,r8,8
  803fb4:	e0000c26 	beq	fp,zero,803fe8 <___vfprintf_internal_r+0x888>
  803fb8:	d8801f17 	ldw	r2,124(sp)
  803fbc:	d9002784 	addi	r4,sp,158
  803fc0:	18c00044 	addi	r3,r3,1
  803fc4:	10800044 	addi	r2,r2,1
  803fc8:	41000015 	stw	r4,0(r8)
  803fcc:	01000044 	movi	r4,1
  803fd0:	41000115 	stw	r4,4(r8)
  803fd4:	d8c02015 	stw	r3,128(sp)
  803fd8:	d8801f15 	stw	r2,124(sp)
  803fdc:	010001c4 	movi	r4,7
  803fe0:	20823c16 	blt	r4,r2,8048d4 <___vfprintf_internal_r+0x1174>
  803fe4:	42000204 	addi	r8,r8,8
  803fe8:	d8802b17 	ldw	r2,172(sp)
  803fec:	10000c26 	beq	r2,zero,804020 <___vfprintf_internal_r+0x8c0>
  803ff0:	d8801f17 	ldw	r2,124(sp)
  803ff4:	d9002704 	addi	r4,sp,156
  803ff8:	18c00084 	addi	r3,r3,2
  803ffc:	10800044 	addi	r2,r2,1
  804000:	41000015 	stw	r4,0(r8)
  804004:	01000084 	movi	r4,2
  804008:	41000115 	stw	r4,4(r8)
  80400c:	d8c02015 	stw	r3,128(sp)
  804010:	d8801f15 	stw	r2,124(sp)
  804014:	010001c4 	movi	r4,7
  804018:	20823616 	blt	r4,r2,8048f4 <___vfprintf_internal_r+0x1194>
  80401c:	42000204 	addi	r8,r8,8
  804020:	d9003017 	ldw	r4,192(sp)
  804024:	00802004 	movi	r2,128
  804028:	20819926 	beq	r4,r2,804690 <___vfprintf_internal_r+0xf30>
  80402c:	d9402917 	ldw	r5,164(sp)
  804030:	d8802e17 	ldw	r2,184(sp)
  804034:	28adc83a 	sub	r22,r5,r2
  804038:	0580310e 	bge	zero,r22,804100 <___vfprintf_internal_r+0x9a0>
  80403c:	07000404 	movi	fp,16
  804040:	d8801f17 	ldw	r2,124(sp)
  804044:	e584140e 	bge	fp,r22,805098 <___vfprintf_internal_r+0x1938>
  804048:	01402074 	movhi	r5,129
  80404c:	29506284 	addi	r5,r5,16778
  804050:	dc402915 	stw	r17,164(sp)
  804054:	d9402b15 	stw	r5,172(sp)
  804058:	b023883a 	mov	r17,r22
  80405c:	04c001c4 	movi	r19,7
  804060:	a82d883a 	mov	r22,r21
  804064:	902b883a 	mov	r21,r18
  804068:	8025883a 	mov	r18,r16
  80406c:	dc002c17 	ldw	r16,176(sp)
  804070:	00000306 	br	804080 <___vfprintf_internal_r+0x920>
  804074:	8c7ffc04 	addi	r17,r17,-16
  804078:	42000204 	addi	r8,r8,8
  80407c:	e440110e 	bge	fp,r17,8040c4 <___vfprintf_internal_r+0x964>
  804080:	18c00404 	addi	r3,r3,16
  804084:	10800044 	addi	r2,r2,1
  804088:	45000015 	stw	r20,0(r8)
  80408c:	47000115 	stw	fp,4(r8)
  804090:	d8c02015 	stw	r3,128(sp)
  804094:	d8801f15 	stw	r2,124(sp)
  804098:	98bff60e 	bge	r19,r2,804074 <__alt_mem_onchip_mem+0xff784074>
  80409c:	d9801e04 	addi	r6,sp,120
  8040a0:	b80b883a 	mov	r5,r23
  8040a4:	8009883a 	mov	r4,r16
  8040a8:	080ad5c0 	call	80ad5c <__sprint_r>
  8040ac:	103eae1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8040b0:	8c7ffc04 	addi	r17,r17,-16
  8040b4:	d8c02017 	ldw	r3,128(sp)
  8040b8:	d8801f17 	ldw	r2,124(sp)
  8040bc:	da000404 	addi	r8,sp,16
  8040c0:	e47fef16 	blt	fp,r17,804080 <__alt_mem_onchip_mem+0xff784080>
  8040c4:	9021883a 	mov	r16,r18
  8040c8:	a825883a 	mov	r18,r21
  8040cc:	b02b883a 	mov	r21,r22
  8040d0:	882d883a 	mov	r22,r17
  8040d4:	dc402917 	ldw	r17,164(sp)
  8040d8:	d9002b17 	ldw	r4,172(sp)
  8040dc:	1d87883a 	add	r3,r3,r22
  8040e0:	10800044 	addi	r2,r2,1
  8040e4:	41000015 	stw	r4,0(r8)
  8040e8:	45800115 	stw	r22,4(r8)
  8040ec:	d8c02015 	stw	r3,128(sp)
  8040f0:	d8801f15 	stw	r2,124(sp)
  8040f4:	010001c4 	movi	r4,7
  8040f8:	2081ee16 	blt	r4,r2,8048b4 <___vfprintf_internal_r+0x1154>
  8040fc:	42000204 	addi	r8,r8,8
  804100:	9080400c 	andi	r2,r18,256
  804104:	1001181e 	bne	r2,zero,804568 <___vfprintf_internal_r+0xe08>
  804108:	d9402e17 	ldw	r5,184(sp)
  80410c:	d8801f17 	ldw	r2,124(sp)
  804110:	44000015 	stw	r16,0(r8)
  804114:	1947883a 	add	r3,r3,r5
  804118:	10800044 	addi	r2,r2,1
  80411c:	41400115 	stw	r5,4(r8)
  804120:	d8c02015 	stw	r3,128(sp)
  804124:	d8801f15 	stw	r2,124(sp)
  804128:	010001c4 	movi	r4,7
  80412c:	2081d316 	blt	r4,r2,80487c <___vfprintf_internal_r+0x111c>
  804130:	42000204 	addi	r8,r8,8
  804134:	9480010c 	andi	r18,r18,4
  804138:	90003226 	beq	r18,zero,804204 <___vfprintf_internal_r+0xaa4>
  80413c:	d9403117 	ldw	r5,196(sp)
  804140:	d8802a17 	ldw	r2,168(sp)
  804144:	28a1c83a 	sub	r16,r5,r2
  804148:	04002e0e 	bge	zero,r16,804204 <___vfprintf_internal_r+0xaa4>
  80414c:	04400404 	movi	r17,16
  804150:	d8801f17 	ldw	r2,124(sp)
  804154:	8c04a20e 	bge	r17,r16,8053e0 <___vfprintf_internal_r+0x1c80>
  804158:	01402074 	movhi	r5,129
  80415c:	29506684 	addi	r5,r5,16794
  804160:	d9403515 	stw	r5,212(sp)
  804164:	048001c4 	movi	r18,7
  804168:	dcc02c17 	ldw	r19,176(sp)
  80416c:	00000306 	br	80417c <___vfprintf_internal_r+0xa1c>
  804170:	843ffc04 	addi	r16,r16,-16
  804174:	42000204 	addi	r8,r8,8
  804178:	8c00130e 	bge	r17,r16,8041c8 <___vfprintf_internal_r+0xa68>
  80417c:	01002074 	movhi	r4,129
  804180:	18c00404 	addi	r3,r3,16
  804184:	10800044 	addi	r2,r2,1
  804188:	21106684 	addi	r4,r4,16794
  80418c:	41000015 	stw	r4,0(r8)
  804190:	44400115 	stw	r17,4(r8)
  804194:	d8c02015 	stw	r3,128(sp)
  804198:	d8801f15 	stw	r2,124(sp)
  80419c:	90bff40e 	bge	r18,r2,804170 <__alt_mem_onchip_mem+0xff784170>
  8041a0:	d9801e04 	addi	r6,sp,120
  8041a4:	b80b883a 	mov	r5,r23
  8041a8:	9809883a 	mov	r4,r19
  8041ac:	080ad5c0 	call	80ad5c <__sprint_r>
  8041b0:	103e6d1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8041b4:	843ffc04 	addi	r16,r16,-16
  8041b8:	d8c02017 	ldw	r3,128(sp)
  8041bc:	d8801f17 	ldw	r2,124(sp)
  8041c0:	da000404 	addi	r8,sp,16
  8041c4:	8c3fed16 	blt	r17,r16,80417c <__alt_mem_onchip_mem+0xff78417c>
  8041c8:	d9403517 	ldw	r5,212(sp)
  8041cc:	1c07883a 	add	r3,r3,r16
  8041d0:	10800044 	addi	r2,r2,1
  8041d4:	41400015 	stw	r5,0(r8)
  8041d8:	44000115 	stw	r16,4(r8)
  8041dc:	d8c02015 	stw	r3,128(sp)
  8041e0:	d8801f15 	stw	r2,124(sp)
  8041e4:	010001c4 	movi	r4,7
  8041e8:	2080060e 	bge	r4,r2,804204 <___vfprintf_internal_r+0xaa4>
  8041ec:	d9002c17 	ldw	r4,176(sp)
  8041f0:	d9801e04 	addi	r6,sp,120
  8041f4:	b80b883a 	mov	r5,r23
  8041f8:	080ad5c0 	call	80ad5c <__sprint_r>
  8041fc:	103e5a1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804200:	d8c02017 	ldw	r3,128(sp)
  804204:	d8803117 	ldw	r2,196(sp)
  804208:	d9002a17 	ldw	r4,168(sp)
  80420c:	1100010e 	bge	r2,r4,804214 <___vfprintf_internal_r+0xab4>
  804210:	2005883a 	mov	r2,r4
  804214:	d9402f17 	ldw	r5,188(sp)
  804218:	288b883a 	add	r5,r5,r2
  80421c:	d9402f15 	stw	r5,188(sp)
  804220:	18019e1e 	bne	r3,zero,80489c <___vfprintf_internal_r+0x113c>
  804224:	a8800007 	ldb	r2,0(r21)
  804228:	d8001f15 	stw	zero,124(sp)
  80422c:	da000404 	addi	r8,sp,16
  804230:	103d851e 	bne	r2,zero,803848 <__alt_mem_onchip_mem+0xff783848>
  804234:	a821883a 	mov	r16,r21
  804238:	003d9b06 	br	8038a8 <__alt_mem_onchip_mem+0xff7838a8>
  80423c:	18c03fcc 	andi	r3,r3,255
  804240:	1805c11e 	bne	r3,zero,805948 <___vfprintf_internal_r+0x21e8>
  804244:	94800414 	ori	r18,r18,16
  804248:	9080080c 	andi	r2,r18,32
  80424c:	10020c26 	beq	r2,zero,804a80 <___vfprintf_internal_r+0x1320>
  804250:	d8802d17 	ldw	r2,180(sp)
  804254:	d9002917 	ldw	r4,164(sp)
  804258:	d8002785 	stb	zero,158(sp)
  80425c:	10c00204 	addi	r3,r2,8
  804260:	14c00017 	ldw	r19,0(r2)
  804264:	15800117 	ldw	r22,4(r2)
  804268:	20040f16 	blt	r4,zero,8052a8 <___vfprintf_internal_r+0x1b48>
  80426c:	013fdfc4 	movi	r4,-129
  804270:	9d84b03a 	or	r2,r19,r22
  804274:	d8c02d15 	stw	r3,180(sp)
  804278:	9124703a 	and	r18,r18,r4
  80427c:	0039883a 	mov	fp,zero
  804280:	103e891e 	bne	r2,zero,803ca8 <__alt_mem_onchip_mem+0xff783ca8>
  804284:	d9002917 	ldw	r4,164(sp)
  804288:	2002c11e 	bne	r4,zero,804d90 <___vfprintf_internal_r+0x1630>
  80428c:	d8002915 	stw	zero,164(sp)
  804290:	d8002e15 	stw	zero,184(sp)
  804294:	dc001e04 	addi	r16,sp,120
  804298:	003ef806 	br	803e7c <__alt_mem_onchip_mem+0xff783e7c>
  80429c:	18c03fcc 	andi	r3,r3,255
  8042a0:	18059d1e 	bne	r3,zero,805918 <___vfprintf_internal_r+0x21b8>
  8042a4:	01402074 	movhi	r5,129
  8042a8:	29505604 	addi	r5,r5,16728
  8042ac:	d9403915 	stw	r5,228(sp)
  8042b0:	9080080c 	andi	r2,r18,32
  8042b4:	10005226 	beq	r2,zero,804400 <___vfprintf_internal_r+0xca0>
  8042b8:	d8802d17 	ldw	r2,180(sp)
  8042bc:	14c00017 	ldw	r19,0(r2)
  8042c0:	15800117 	ldw	r22,4(r2)
  8042c4:	10800204 	addi	r2,r2,8
  8042c8:	d8802d15 	stw	r2,180(sp)
  8042cc:	9080004c 	andi	r2,r18,1
  8042d0:	10019026 	beq	r2,zero,804914 <___vfprintf_internal_r+0x11b4>
  8042d4:	9d84b03a 	or	r2,r19,r22
  8042d8:	10036926 	beq	r2,zero,805080 <___vfprintf_internal_r+0x1920>
  8042dc:	d8c02917 	ldw	r3,164(sp)
  8042e0:	00800c04 	movi	r2,48
  8042e4:	d8802705 	stb	r2,156(sp)
  8042e8:	dc402745 	stb	r17,157(sp)
  8042ec:	d8002785 	stb	zero,158(sp)
  8042f0:	90800094 	ori	r2,r18,2
  8042f4:	18045d16 	blt	r3,zero,80546c <___vfprintf_internal_r+0x1d0c>
  8042f8:	00bfdfc4 	movi	r2,-129
  8042fc:	90a4703a 	and	r18,r18,r2
  804300:	94800094 	ori	r18,r18,2
  804304:	0039883a 	mov	fp,zero
  804308:	d9003917 	ldw	r4,228(sp)
  80430c:	dc001e04 	addi	r16,sp,120
  804310:	988003cc 	andi	r2,r19,15
  804314:	b006973a 	slli	r3,r22,28
  804318:	2085883a 	add	r2,r4,r2
  80431c:	9826d13a 	srli	r19,r19,4
  804320:	10800003 	ldbu	r2,0(r2)
  804324:	b02cd13a 	srli	r22,r22,4
  804328:	843fffc4 	addi	r16,r16,-1
  80432c:	1ce6b03a 	or	r19,r3,r19
  804330:	80800005 	stb	r2,0(r16)
  804334:	9d84b03a 	or	r2,r19,r22
  804338:	103ff51e 	bne	r2,zero,804310 <__alt_mem_onchip_mem+0xff784310>
  80433c:	d8c02817 	ldw	r3,160(sp)
  804340:	1c07c83a 	sub	r3,r3,r16
  804344:	d8c02e15 	stw	r3,184(sp)
  804348:	003ecc06 	br	803e7c <__alt_mem_onchip_mem+0xff783e7c>
  80434c:	18c03fcc 	andi	r3,r3,255
  804350:	183e9f26 	beq	r3,zero,803dd0 <__alt_mem_onchip_mem+0xff783dd0>
  804354:	d9c02785 	stb	r7,158(sp)
  804358:	003e9d06 	br	803dd0 <__alt_mem_onchip_mem+0xff783dd0>
  80435c:	00c00044 	movi	r3,1
  804360:	01c00ac4 	movi	r7,43
  804364:	ac400007 	ldb	r17,0(r21)
  804368:	003d5e06 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  80436c:	94800814 	ori	r18,r18,32
  804370:	ac400007 	ldb	r17,0(r21)
  804374:	003d5b06 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  804378:	d8c02d17 	ldw	r3,180(sp)
  80437c:	d8002785 	stb	zero,158(sp)
  804380:	1c000017 	ldw	r16,0(r3)
  804384:	1cc00104 	addi	r19,r3,4
  804388:	80041926 	beq	r16,zero,8053f0 <___vfprintf_internal_r+0x1c90>
  80438c:	d9002917 	ldw	r4,164(sp)
  804390:	2003d016 	blt	r4,zero,8052d4 <___vfprintf_internal_r+0x1b74>
  804394:	200d883a 	mov	r6,r4
  804398:	000b883a 	mov	r5,zero
  80439c:	8009883a 	mov	r4,r16
  8043a0:	da003d15 	stw	r8,244(sp)
  8043a4:	0808f700 	call	808f70 <memchr>
  8043a8:	da003d17 	ldw	r8,244(sp)
  8043ac:	10045426 	beq	r2,zero,805500 <___vfprintf_internal_r+0x1da0>
  8043b0:	1405c83a 	sub	r2,r2,r16
  8043b4:	d8802e15 	stw	r2,184(sp)
  8043b8:	1003cc16 	blt	r2,zero,8052ec <___vfprintf_internal_r+0x1b8c>
  8043bc:	df002783 	ldbu	fp,158(sp)
  8043c0:	d8802a15 	stw	r2,168(sp)
  8043c4:	dcc02d15 	stw	r19,180(sp)
  8043c8:	d8002915 	stw	zero,164(sp)
  8043cc:	d8003215 	stw	zero,200(sp)
  8043d0:	003eb006 	br	803e94 <__alt_mem_onchip_mem+0xff783e94>
  8043d4:	18c03fcc 	andi	r3,r3,255
  8043d8:	183f9b26 	beq	r3,zero,804248 <__alt_mem_onchip_mem+0xff784248>
  8043dc:	d9c02785 	stb	r7,158(sp)
  8043e0:	003f9906 	br	804248 <__alt_mem_onchip_mem+0xff784248>
  8043e4:	18c03fcc 	andi	r3,r3,255
  8043e8:	1805551e 	bne	r3,zero,805940 <___vfprintf_internal_r+0x21e0>
  8043ec:	01402074 	movhi	r5,129
  8043f0:	29505b04 	addi	r5,r5,16748
  8043f4:	d9403915 	stw	r5,228(sp)
  8043f8:	9080080c 	andi	r2,r18,32
  8043fc:	103fae1e 	bne	r2,zero,8042b8 <__alt_mem_onchip_mem+0xff7842b8>
  804400:	9080040c 	andi	r2,r18,16
  804404:	1002de26 	beq	r2,zero,804f80 <___vfprintf_internal_r+0x1820>
  804408:	d8c02d17 	ldw	r3,180(sp)
  80440c:	002d883a 	mov	r22,zero
  804410:	1cc00017 	ldw	r19,0(r3)
  804414:	18c00104 	addi	r3,r3,4
  804418:	d8c02d15 	stw	r3,180(sp)
  80441c:	003fab06 	br	8042cc <__alt_mem_onchip_mem+0xff7842cc>
  804420:	38803fcc 	andi	r2,r7,255
  804424:	1080201c 	xori	r2,r2,128
  804428:	10bfe004 	addi	r2,r2,-128
  80442c:	1002d21e 	bne	r2,zero,804f78 <___vfprintf_internal_r+0x1818>
  804430:	00c00044 	movi	r3,1
  804434:	01c00804 	movi	r7,32
  804438:	ac400007 	ldb	r17,0(r21)
  80443c:	003d2906 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  804440:	94800054 	ori	r18,r18,1
  804444:	ac400007 	ldb	r17,0(r21)
  804448:	003d2606 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  80444c:	18c03fcc 	andi	r3,r3,255
  804450:	183e0526 	beq	r3,zero,803c68 <__alt_mem_onchip_mem+0xff783c68>
  804454:	d9c02785 	stb	r7,158(sp)
  804458:	003e0306 	br	803c68 <__alt_mem_onchip_mem+0xff783c68>
  80445c:	94801014 	ori	r18,r18,64
  804460:	ac400007 	ldb	r17,0(r21)
  804464:	003d1f06 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  804468:	ac400007 	ldb	r17,0(r21)
  80446c:	8a438726 	beq	r17,r9,80528c <___vfprintf_internal_r+0x1b2c>
  804470:	94800414 	ori	r18,r18,16
  804474:	003d1b06 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  804478:	18c03fcc 	andi	r3,r3,255
  80447c:	1805341e 	bne	r3,zero,805950 <___vfprintf_internal_r+0x21f0>
  804480:	9080080c 	andi	r2,r18,32
  804484:	1002cd26 	beq	r2,zero,804fbc <___vfprintf_internal_r+0x185c>
  804488:	d9402d17 	ldw	r5,180(sp)
  80448c:	d9002f17 	ldw	r4,188(sp)
  804490:	28800017 	ldw	r2,0(r5)
  804494:	2007d7fa 	srai	r3,r4,31
  804498:	29400104 	addi	r5,r5,4
  80449c:	d9402d15 	stw	r5,180(sp)
  8044a0:	11000015 	stw	r4,0(r2)
  8044a4:	10c00115 	stw	r3,4(r2)
  8044a8:	003ce506 	br	803840 <__alt_mem_onchip_mem+0xff783840>
  8044ac:	d8c02d17 	ldw	r3,180(sp)
  8044b0:	d9002d17 	ldw	r4,180(sp)
  8044b4:	d8002785 	stb	zero,158(sp)
  8044b8:	18800017 	ldw	r2,0(r3)
  8044bc:	21000104 	addi	r4,r4,4
  8044c0:	00c00044 	movi	r3,1
  8044c4:	d8c02a15 	stw	r3,168(sp)
  8044c8:	d8801405 	stb	r2,80(sp)
  8044cc:	d9002d15 	stw	r4,180(sp)
  8044d0:	d8c02e15 	stw	r3,184(sp)
  8044d4:	d8002915 	stw	zero,164(sp)
  8044d8:	d8003215 	stw	zero,200(sp)
  8044dc:	dc001404 	addi	r16,sp,80
  8044e0:	0039883a 	mov	fp,zero
  8044e4:	003e7206 	br	803eb0 <__alt_mem_onchip_mem+0xff783eb0>
  8044e8:	01002074 	movhi	r4,129
  8044ec:	21105b04 	addi	r4,r4,16748
  8044f0:	0039883a 	mov	fp,zero
  8044f4:	d9003915 	stw	r4,228(sp)
  8044f8:	04401e04 	movi	r17,120
  8044fc:	003f8206 	br	804308 <__alt_mem_onchip_mem+0xff784308>
  804500:	18c03fcc 	andi	r3,r3,255
  804504:	1805061e 	bne	r3,zero,805920 <___vfprintf_internal_r+0x21c0>
  804508:	883d9126 	beq	r17,zero,803b50 <__alt_mem_onchip_mem+0xff783b50>
  80450c:	00c00044 	movi	r3,1
  804510:	d8c02a15 	stw	r3,168(sp)
  804514:	dc401405 	stb	r17,80(sp)
  804518:	d8002785 	stb	zero,158(sp)
  80451c:	003fec06 	br	8044d0 <__alt_mem_onchip_mem+0xff7844d0>
  804520:	01402074 	movhi	r5,129
  804524:	29505b04 	addi	r5,r5,16748
  804528:	d9403915 	stw	r5,228(sp)
  80452c:	d8c02d15 	stw	r3,180(sp)
  804530:	1025883a 	mov	r18,r2
  804534:	04401e04 	movi	r17,120
  804538:	9d84b03a 	or	r2,r19,r22
  80453c:	1000fc1e 	bne	r2,zero,804930 <___vfprintf_internal_r+0x11d0>
  804540:	0039883a 	mov	fp,zero
  804544:	00800084 	movi	r2,2
  804548:	10803fcc 	andi	r2,r2,255
  80454c:	00c00044 	movi	r3,1
  804550:	10c20f26 	beq	r2,r3,804d90 <___vfprintf_internal_r+0x1630>
  804554:	00c00084 	movi	r3,2
  804558:	10fd6326 	beq	r2,r3,803ae8 <__alt_mem_onchip_mem+0xff783ae8>
  80455c:	003e2d06 	br	803e14 <__alt_mem_onchip_mem+0xff783e14>
  804560:	d8c02017 	ldw	r3,128(sp)
  804564:	003e9306 	br	803fb4 <__alt_mem_onchip_mem+0xff783fb4>
  804568:	00801944 	movi	r2,101
  80456c:	14407e0e 	bge	r2,r17,804768 <___vfprintf_internal_r+0x1008>
  804570:	d9003617 	ldw	r4,216(sp)
  804574:	d9403817 	ldw	r5,224(sp)
  804578:	000d883a 	mov	r6,zero
  80457c:	000f883a 	mov	r7,zero
  804580:	d8c03c15 	stw	r3,240(sp)
  804584:	da003d15 	stw	r8,244(sp)
  804588:	080e9d40 	call	80e9d4 <__eqdf2>
  80458c:	d8c03c17 	ldw	r3,240(sp)
  804590:	da003d17 	ldw	r8,244(sp)
  804594:	1000f71e 	bne	r2,zero,804974 <___vfprintf_internal_r+0x1214>
  804598:	d8801f17 	ldw	r2,124(sp)
  80459c:	01002074 	movhi	r4,129
  8045a0:	21106204 	addi	r4,r4,16776
  8045a4:	18c00044 	addi	r3,r3,1
  8045a8:	10800044 	addi	r2,r2,1
  8045ac:	41000015 	stw	r4,0(r8)
  8045b0:	01000044 	movi	r4,1
  8045b4:	41000115 	stw	r4,4(r8)
  8045b8:	d8c02015 	stw	r3,128(sp)
  8045bc:	d8801f15 	stw	r2,124(sp)
  8045c0:	010001c4 	movi	r4,7
  8045c4:	2082b816 	blt	r4,r2,8050a8 <___vfprintf_internal_r+0x1948>
  8045c8:	42000204 	addi	r8,r8,8
  8045cc:	d8802617 	ldw	r2,152(sp)
  8045d0:	d9403317 	ldw	r5,204(sp)
  8045d4:	11400216 	blt	r2,r5,8045e0 <___vfprintf_internal_r+0xe80>
  8045d8:	9080004c 	andi	r2,r18,1
  8045dc:	103ed526 	beq	r2,zero,804134 <__alt_mem_onchip_mem+0xff784134>
  8045e0:	d8803717 	ldw	r2,220(sp)
  8045e4:	d9003417 	ldw	r4,208(sp)
  8045e8:	d9403717 	ldw	r5,220(sp)
  8045ec:	1887883a 	add	r3,r3,r2
  8045f0:	d8801f17 	ldw	r2,124(sp)
  8045f4:	41000015 	stw	r4,0(r8)
  8045f8:	41400115 	stw	r5,4(r8)
  8045fc:	10800044 	addi	r2,r2,1
  804600:	d8c02015 	stw	r3,128(sp)
  804604:	d8801f15 	stw	r2,124(sp)
  804608:	010001c4 	movi	r4,7
  80460c:	20832916 	blt	r4,r2,8052b4 <___vfprintf_internal_r+0x1b54>
  804610:	42000204 	addi	r8,r8,8
  804614:	d8803317 	ldw	r2,204(sp)
  804618:	143fffc4 	addi	r16,r2,-1
  80461c:	043ec50e 	bge	zero,r16,804134 <__alt_mem_onchip_mem+0xff784134>
  804620:	04400404 	movi	r17,16
  804624:	d8801f17 	ldw	r2,124(sp)
  804628:	8c00880e 	bge	r17,r16,80484c <___vfprintf_internal_r+0x10ec>
  80462c:	01402074 	movhi	r5,129
  804630:	29506284 	addi	r5,r5,16778
  804634:	d9402b15 	stw	r5,172(sp)
  804638:	058001c4 	movi	r22,7
  80463c:	dcc02c17 	ldw	r19,176(sp)
  804640:	00000306 	br	804650 <___vfprintf_internal_r+0xef0>
  804644:	42000204 	addi	r8,r8,8
  804648:	843ffc04 	addi	r16,r16,-16
  80464c:	8c00820e 	bge	r17,r16,804858 <___vfprintf_internal_r+0x10f8>
  804650:	18c00404 	addi	r3,r3,16
  804654:	10800044 	addi	r2,r2,1
  804658:	45000015 	stw	r20,0(r8)
  80465c:	44400115 	stw	r17,4(r8)
  804660:	d8c02015 	stw	r3,128(sp)
  804664:	d8801f15 	stw	r2,124(sp)
  804668:	b0bff60e 	bge	r22,r2,804644 <__alt_mem_onchip_mem+0xff784644>
  80466c:	d9801e04 	addi	r6,sp,120
  804670:	b80b883a 	mov	r5,r23
  804674:	9809883a 	mov	r4,r19
  804678:	080ad5c0 	call	80ad5c <__sprint_r>
  80467c:	103d3a1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804680:	d8c02017 	ldw	r3,128(sp)
  804684:	d8801f17 	ldw	r2,124(sp)
  804688:	da000404 	addi	r8,sp,16
  80468c:	003fee06 	br	804648 <__alt_mem_onchip_mem+0xff784648>
  804690:	d9403117 	ldw	r5,196(sp)
  804694:	d8802a17 	ldw	r2,168(sp)
  804698:	28adc83a 	sub	r22,r5,r2
  80469c:	05be630e 	bge	zero,r22,80402c <__alt_mem_onchip_mem+0xff78402c>
  8046a0:	07000404 	movi	fp,16
  8046a4:	d8801f17 	ldw	r2,124(sp)
  8046a8:	e5838f0e 	bge	fp,r22,8054e8 <___vfprintf_internal_r+0x1d88>
  8046ac:	01402074 	movhi	r5,129
  8046b0:	29506284 	addi	r5,r5,16778
  8046b4:	dc403015 	stw	r17,192(sp)
  8046b8:	d9402b15 	stw	r5,172(sp)
  8046bc:	b023883a 	mov	r17,r22
  8046c0:	04c001c4 	movi	r19,7
  8046c4:	a82d883a 	mov	r22,r21
  8046c8:	902b883a 	mov	r21,r18
  8046cc:	8025883a 	mov	r18,r16
  8046d0:	dc002c17 	ldw	r16,176(sp)
  8046d4:	00000306 	br	8046e4 <___vfprintf_internal_r+0xf84>
  8046d8:	8c7ffc04 	addi	r17,r17,-16
  8046dc:	42000204 	addi	r8,r8,8
  8046e0:	e440110e 	bge	fp,r17,804728 <___vfprintf_internal_r+0xfc8>
  8046e4:	18c00404 	addi	r3,r3,16
  8046e8:	10800044 	addi	r2,r2,1
  8046ec:	45000015 	stw	r20,0(r8)
  8046f0:	47000115 	stw	fp,4(r8)
  8046f4:	d8c02015 	stw	r3,128(sp)
  8046f8:	d8801f15 	stw	r2,124(sp)
  8046fc:	98bff60e 	bge	r19,r2,8046d8 <__alt_mem_onchip_mem+0xff7846d8>
  804700:	d9801e04 	addi	r6,sp,120
  804704:	b80b883a 	mov	r5,r23
  804708:	8009883a 	mov	r4,r16
  80470c:	080ad5c0 	call	80ad5c <__sprint_r>
  804710:	103d151e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804714:	8c7ffc04 	addi	r17,r17,-16
  804718:	d8c02017 	ldw	r3,128(sp)
  80471c:	d8801f17 	ldw	r2,124(sp)
  804720:	da000404 	addi	r8,sp,16
  804724:	e47fef16 	blt	fp,r17,8046e4 <__alt_mem_onchip_mem+0xff7846e4>
  804728:	9021883a 	mov	r16,r18
  80472c:	a825883a 	mov	r18,r21
  804730:	b02b883a 	mov	r21,r22
  804734:	882d883a 	mov	r22,r17
  804738:	dc403017 	ldw	r17,192(sp)
  80473c:	d9002b17 	ldw	r4,172(sp)
  804740:	1d87883a 	add	r3,r3,r22
  804744:	10800044 	addi	r2,r2,1
  804748:	41000015 	stw	r4,0(r8)
  80474c:	45800115 	stw	r22,4(r8)
  804750:	d8c02015 	stw	r3,128(sp)
  804754:	d8801f15 	stw	r2,124(sp)
  804758:	010001c4 	movi	r4,7
  80475c:	20818e16 	blt	r4,r2,804d98 <___vfprintf_internal_r+0x1638>
  804760:	42000204 	addi	r8,r8,8
  804764:	003e3106 	br	80402c <__alt_mem_onchip_mem+0xff78402c>
  804768:	d9403317 	ldw	r5,204(sp)
  80476c:	00800044 	movi	r2,1
  804770:	18c00044 	addi	r3,r3,1
  804774:	1141530e 	bge	r2,r5,804cc4 <___vfprintf_internal_r+0x1564>
  804778:	dc401f17 	ldw	r17,124(sp)
  80477c:	00800044 	movi	r2,1
  804780:	40800115 	stw	r2,4(r8)
  804784:	8c400044 	addi	r17,r17,1
  804788:	44000015 	stw	r16,0(r8)
  80478c:	d8c02015 	stw	r3,128(sp)
  804790:	dc401f15 	stw	r17,124(sp)
  804794:	008001c4 	movi	r2,7
  804798:	14416b16 	blt	r2,r17,804d48 <___vfprintf_internal_r+0x15e8>
  80479c:	42000204 	addi	r8,r8,8
  8047a0:	d8803717 	ldw	r2,220(sp)
  8047a4:	d9003417 	ldw	r4,208(sp)
  8047a8:	8c400044 	addi	r17,r17,1
  8047ac:	10c7883a 	add	r3,r2,r3
  8047b0:	40800115 	stw	r2,4(r8)
  8047b4:	41000015 	stw	r4,0(r8)
  8047b8:	d8c02015 	stw	r3,128(sp)
  8047bc:	dc401f15 	stw	r17,124(sp)
  8047c0:	008001c4 	movi	r2,7
  8047c4:	14416916 	blt	r2,r17,804d6c <___vfprintf_internal_r+0x160c>
  8047c8:	45800204 	addi	r22,r8,8
  8047cc:	d9003617 	ldw	r4,216(sp)
  8047d0:	d9403817 	ldw	r5,224(sp)
  8047d4:	000d883a 	mov	r6,zero
  8047d8:	000f883a 	mov	r7,zero
  8047dc:	d8c03c15 	stw	r3,240(sp)
  8047e0:	080e9d40 	call	80e9d4 <__eqdf2>
  8047e4:	d8c03c17 	ldw	r3,240(sp)
  8047e8:	1000bc26 	beq	r2,zero,804adc <___vfprintf_internal_r+0x137c>
  8047ec:	d9403317 	ldw	r5,204(sp)
  8047f0:	84000044 	addi	r16,r16,1
  8047f4:	8c400044 	addi	r17,r17,1
  8047f8:	28bfffc4 	addi	r2,r5,-1
  8047fc:	1887883a 	add	r3,r3,r2
  804800:	b0800115 	stw	r2,4(r22)
  804804:	b4000015 	stw	r16,0(r22)
  804808:	d8c02015 	stw	r3,128(sp)
  80480c:	dc401f15 	stw	r17,124(sp)
  804810:	008001c4 	movi	r2,7
  804814:	14414316 	blt	r2,r17,804d24 <___vfprintf_internal_r+0x15c4>
  804818:	b5800204 	addi	r22,r22,8
  80481c:	d9003a17 	ldw	r4,232(sp)
  804820:	df0022c4 	addi	fp,sp,139
  804824:	8c400044 	addi	r17,r17,1
  804828:	20c7883a 	add	r3,r4,r3
  80482c:	b7000015 	stw	fp,0(r22)
  804830:	b1000115 	stw	r4,4(r22)
  804834:	d8c02015 	stw	r3,128(sp)
  804838:	dc401f15 	stw	r17,124(sp)
  80483c:	008001c4 	movi	r2,7
  804840:	14400e16 	blt	r2,r17,80487c <___vfprintf_internal_r+0x111c>
  804844:	b2000204 	addi	r8,r22,8
  804848:	003e3a06 	br	804134 <__alt_mem_onchip_mem+0xff784134>
  80484c:	01002074 	movhi	r4,129
  804850:	21106284 	addi	r4,r4,16778
  804854:	d9002b15 	stw	r4,172(sp)
  804858:	d9002b17 	ldw	r4,172(sp)
  80485c:	1c07883a 	add	r3,r3,r16
  804860:	44000115 	stw	r16,4(r8)
  804864:	41000015 	stw	r4,0(r8)
  804868:	10800044 	addi	r2,r2,1
  80486c:	d8c02015 	stw	r3,128(sp)
  804870:	d8801f15 	stw	r2,124(sp)
  804874:	010001c4 	movi	r4,7
  804878:	20be2d0e 	bge	r4,r2,804130 <__alt_mem_onchip_mem+0xff784130>
  80487c:	d9002c17 	ldw	r4,176(sp)
  804880:	d9801e04 	addi	r6,sp,120
  804884:	b80b883a 	mov	r5,r23
  804888:	080ad5c0 	call	80ad5c <__sprint_r>
  80488c:	103cb61e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804890:	d8c02017 	ldw	r3,128(sp)
  804894:	da000404 	addi	r8,sp,16
  804898:	003e2606 	br	804134 <__alt_mem_onchip_mem+0xff784134>
  80489c:	d9002c17 	ldw	r4,176(sp)
  8048a0:	d9801e04 	addi	r6,sp,120
  8048a4:	b80b883a 	mov	r5,r23
  8048a8:	080ad5c0 	call	80ad5c <__sprint_r>
  8048ac:	103e5d26 	beq	r2,zero,804224 <__alt_mem_onchip_mem+0xff784224>
  8048b0:	003cad06 	br	803b68 <__alt_mem_onchip_mem+0xff783b68>
  8048b4:	d9002c17 	ldw	r4,176(sp)
  8048b8:	d9801e04 	addi	r6,sp,120
  8048bc:	b80b883a 	mov	r5,r23
  8048c0:	080ad5c0 	call	80ad5c <__sprint_r>
  8048c4:	103ca81e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8048c8:	d8c02017 	ldw	r3,128(sp)
  8048cc:	da000404 	addi	r8,sp,16
  8048d0:	003e0b06 	br	804100 <__alt_mem_onchip_mem+0xff784100>
  8048d4:	d9002c17 	ldw	r4,176(sp)
  8048d8:	d9801e04 	addi	r6,sp,120
  8048dc:	b80b883a 	mov	r5,r23
  8048e0:	080ad5c0 	call	80ad5c <__sprint_r>
  8048e4:	103ca01e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8048e8:	d8c02017 	ldw	r3,128(sp)
  8048ec:	da000404 	addi	r8,sp,16
  8048f0:	003dbd06 	br	803fe8 <__alt_mem_onchip_mem+0xff783fe8>
  8048f4:	d9002c17 	ldw	r4,176(sp)
  8048f8:	d9801e04 	addi	r6,sp,120
  8048fc:	b80b883a 	mov	r5,r23
  804900:	080ad5c0 	call	80ad5c <__sprint_r>
  804904:	103c981e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804908:	d8c02017 	ldw	r3,128(sp)
  80490c:	da000404 	addi	r8,sp,16
  804910:	003dc306 	br	804020 <__alt_mem_onchip_mem+0xff784020>
  804914:	d8802917 	ldw	r2,164(sp)
  804918:	d8002785 	stb	zero,158(sp)
  80491c:	103f0616 	blt	r2,zero,804538 <__alt_mem_onchip_mem+0xff784538>
  804920:	00ffdfc4 	movi	r3,-129
  804924:	9d84b03a 	or	r2,r19,r22
  804928:	90e4703a 	and	r18,r18,r3
  80492c:	103c6b26 	beq	r2,zero,803adc <__alt_mem_onchip_mem+0xff783adc>
  804930:	0039883a 	mov	fp,zero
  804934:	003e7406 	br	804308 <__alt_mem_onchip_mem+0xff784308>
  804938:	9080040c 	andi	r2,r18,16
  80493c:	1001b326 	beq	r2,zero,80500c <___vfprintf_internal_r+0x18ac>
  804940:	d9002d17 	ldw	r4,180(sp)
  804944:	d9402917 	ldw	r5,164(sp)
  804948:	d8002785 	stb	zero,158(sp)
  80494c:	20800104 	addi	r2,r4,4
  804950:	24c00017 	ldw	r19,0(r4)
  804954:	002d883a 	mov	r22,zero
  804958:	2801b516 	blt	r5,zero,805030 <___vfprintf_internal_r+0x18d0>
  80495c:	00ffdfc4 	movi	r3,-129
  804960:	d8802d15 	stw	r2,180(sp)
  804964:	90e4703a 	and	r18,r18,r3
  804968:	983d2726 	beq	r19,zero,803e08 <__alt_mem_onchip_mem+0xff783e08>
  80496c:	0039883a 	mov	fp,zero
  804970:	003d2a06 	br	803e1c <__alt_mem_onchip_mem+0xff783e1c>
  804974:	dc402617 	ldw	r17,152(sp)
  804978:	0441d30e 	bge	zero,r17,8050c8 <___vfprintf_internal_r+0x1968>
  80497c:	dc403217 	ldw	r17,200(sp)
  804980:	d8803317 	ldw	r2,204(sp)
  804984:	1440010e 	bge	r2,r17,80498c <___vfprintf_internal_r+0x122c>
  804988:	1023883a 	mov	r17,r2
  80498c:	04400a0e 	bge	zero,r17,8049b8 <___vfprintf_internal_r+0x1258>
  804990:	d8801f17 	ldw	r2,124(sp)
  804994:	1c47883a 	add	r3,r3,r17
  804998:	44000015 	stw	r16,0(r8)
  80499c:	10800044 	addi	r2,r2,1
  8049a0:	44400115 	stw	r17,4(r8)
  8049a4:	d8c02015 	stw	r3,128(sp)
  8049a8:	d8801f15 	stw	r2,124(sp)
  8049ac:	010001c4 	movi	r4,7
  8049b0:	20826516 	blt	r4,r2,805348 <___vfprintf_internal_r+0x1be8>
  8049b4:	42000204 	addi	r8,r8,8
  8049b8:	88026116 	blt	r17,zero,805340 <___vfprintf_internal_r+0x1be0>
  8049bc:	d9003217 	ldw	r4,200(sp)
  8049c0:	2463c83a 	sub	r17,r4,r17
  8049c4:	04407b0e 	bge	zero,r17,804bb4 <___vfprintf_internal_r+0x1454>
  8049c8:	05800404 	movi	r22,16
  8049cc:	d8801f17 	ldw	r2,124(sp)
  8049d0:	b4419d0e 	bge	r22,r17,805048 <___vfprintf_internal_r+0x18e8>
  8049d4:	01002074 	movhi	r4,129
  8049d8:	21106284 	addi	r4,r4,16778
  8049dc:	d9002b15 	stw	r4,172(sp)
  8049e0:	070001c4 	movi	fp,7
  8049e4:	dcc02c17 	ldw	r19,176(sp)
  8049e8:	00000306 	br	8049f8 <___vfprintf_internal_r+0x1298>
  8049ec:	42000204 	addi	r8,r8,8
  8049f0:	8c7ffc04 	addi	r17,r17,-16
  8049f4:	b441970e 	bge	r22,r17,805054 <___vfprintf_internal_r+0x18f4>
  8049f8:	18c00404 	addi	r3,r3,16
  8049fc:	10800044 	addi	r2,r2,1
  804a00:	45000015 	stw	r20,0(r8)
  804a04:	45800115 	stw	r22,4(r8)
  804a08:	d8c02015 	stw	r3,128(sp)
  804a0c:	d8801f15 	stw	r2,124(sp)
  804a10:	e0bff60e 	bge	fp,r2,8049ec <__alt_mem_onchip_mem+0xff7849ec>
  804a14:	d9801e04 	addi	r6,sp,120
  804a18:	b80b883a 	mov	r5,r23
  804a1c:	9809883a 	mov	r4,r19
  804a20:	080ad5c0 	call	80ad5c <__sprint_r>
  804a24:	103c501e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804a28:	d8c02017 	ldw	r3,128(sp)
  804a2c:	d8801f17 	ldw	r2,124(sp)
  804a30:	da000404 	addi	r8,sp,16
  804a34:	003fee06 	br	8049f0 <__alt_mem_onchip_mem+0xff7849f0>
  804a38:	d9002c17 	ldw	r4,176(sp)
  804a3c:	d9801e04 	addi	r6,sp,120
  804a40:	b80b883a 	mov	r5,r23
  804a44:	080ad5c0 	call	80ad5c <__sprint_r>
  804a48:	103c471e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804a4c:	d8c02017 	ldw	r3,128(sp)
  804a50:	df002787 	ldb	fp,158(sp)
  804a54:	da000404 	addi	r8,sp,16
  804a58:	003d5606 	br	803fb4 <__alt_mem_onchip_mem+0xff783fb4>
  804a5c:	9080040c 	andi	r2,r18,16
  804a60:	10016126 	beq	r2,zero,804fe8 <___vfprintf_internal_r+0x1888>
  804a64:	d8802d17 	ldw	r2,180(sp)
  804a68:	14c00017 	ldw	r19,0(r2)
  804a6c:	10800104 	addi	r2,r2,4
  804a70:	d8802d15 	stw	r2,180(sp)
  804a74:	982dd7fa 	srai	r22,r19,31
  804a78:	b005883a 	mov	r2,r22
  804a7c:	003c8206 	br	803c88 <__alt_mem_onchip_mem+0xff783c88>
  804a80:	9080040c 	andi	r2,r18,16
  804a84:	10003526 	beq	r2,zero,804b5c <___vfprintf_internal_r+0x13fc>
  804a88:	d9402d17 	ldw	r5,180(sp)
  804a8c:	d8c02917 	ldw	r3,164(sp)
  804a90:	d8002785 	stb	zero,158(sp)
  804a94:	28800104 	addi	r2,r5,4
  804a98:	2cc00017 	ldw	r19,0(r5)
  804a9c:	002d883a 	mov	r22,zero
  804aa0:	18003716 	blt	r3,zero,804b80 <___vfprintf_internal_r+0x1420>
  804aa4:	00ffdfc4 	movi	r3,-129
  804aa8:	d8802d15 	stw	r2,180(sp)
  804aac:	90e4703a 	and	r18,r18,r3
  804ab0:	0039883a 	mov	fp,zero
  804ab4:	983df326 	beq	r19,zero,804284 <__alt_mem_onchip_mem+0xff784284>
  804ab8:	00800244 	movi	r2,9
  804abc:	14fc7b36 	bltu	r2,r19,803cac <__alt_mem_onchip_mem+0xff783cac>
  804ac0:	d8c02817 	ldw	r3,160(sp)
  804ac4:	dc001dc4 	addi	r16,sp,119
  804ac8:	9cc00c04 	addi	r19,r19,48
  804acc:	1c07c83a 	sub	r3,r3,r16
  804ad0:	dcc01dc5 	stb	r19,119(sp)
  804ad4:	d8c02e15 	stw	r3,184(sp)
  804ad8:	003ce806 	br	803e7c <__alt_mem_onchip_mem+0xff783e7c>
  804adc:	d8803317 	ldw	r2,204(sp)
  804ae0:	143fffc4 	addi	r16,r2,-1
  804ae4:	043f4d0e 	bge	zero,r16,80481c <__alt_mem_onchip_mem+0xff78481c>
  804ae8:	07000404 	movi	fp,16
  804aec:	e400810e 	bge	fp,r16,804cf4 <___vfprintf_internal_r+0x1594>
  804af0:	01402074 	movhi	r5,129
  804af4:	29506284 	addi	r5,r5,16778
  804af8:	d9402b15 	stw	r5,172(sp)
  804afc:	01c001c4 	movi	r7,7
  804b00:	dcc02c17 	ldw	r19,176(sp)
  804b04:	00000306 	br	804b14 <___vfprintf_internal_r+0x13b4>
  804b08:	b5800204 	addi	r22,r22,8
  804b0c:	843ffc04 	addi	r16,r16,-16
  804b10:	e4007b0e 	bge	fp,r16,804d00 <___vfprintf_internal_r+0x15a0>
  804b14:	18c00404 	addi	r3,r3,16
  804b18:	8c400044 	addi	r17,r17,1
  804b1c:	b5000015 	stw	r20,0(r22)
  804b20:	b7000115 	stw	fp,4(r22)
  804b24:	d8c02015 	stw	r3,128(sp)
  804b28:	dc401f15 	stw	r17,124(sp)
  804b2c:	3c7ff60e 	bge	r7,r17,804b08 <__alt_mem_onchip_mem+0xff784b08>
  804b30:	d9801e04 	addi	r6,sp,120
  804b34:	b80b883a 	mov	r5,r23
  804b38:	9809883a 	mov	r4,r19
  804b3c:	d9c03c15 	stw	r7,240(sp)
  804b40:	080ad5c0 	call	80ad5c <__sprint_r>
  804b44:	d9c03c17 	ldw	r7,240(sp)
  804b48:	103c071e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804b4c:	d8c02017 	ldw	r3,128(sp)
  804b50:	dc401f17 	ldw	r17,124(sp)
  804b54:	dd800404 	addi	r22,sp,16
  804b58:	003fec06 	br	804b0c <__alt_mem_onchip_mem+0xff784b0c>
  804b5c:	9080100c 	andi	r2,r18,64
  804b60:	d8002785 	stb	zero,158(sp)
  804b64:	10010e26 	beq	r2,zero,804fa0 <___vfprintf_internal_r+0x1840>
  804b68:	d9002d17 	ldw	r4,180(sp)
  804b6c:	d9402917 	ldw	r5,164(sp)
  804b70:	002d883a 	mov	r22,zero
  804b74:	20800104 	addi	r2,r4,4
  804b78:	24c0000b 	ldhu	r19,0(r4)
  804b7c:	283fc90e 	bge	r5,zero,804aa4 <__alt_mem_onchip_mem+0xff784aa4>
  804b80:	d8802d15 	stw	r2,180(sp)
  804b84:	0039883a 	mov	fp,zero
  804b88:	9d84b03a 	or	r2,r19,r22
  804b8c:	103c461e 	bne	r2,zero,803ca8 <__alt_mem_onchip_mem+0xff783ca8>
  804b90:	00800044 	movi	r2,1
  804b94:	003e6c06 	br	804548 <__alt_mem_onchip_mem+0xff784548>
  804b98:	d9002c17 	ldw	r4,176(sp)
  804b9c:	d9801e04 	addi	r6,sp,120
  804ba0:	b80b883a 	mov	r5,r23
  804ba4:	080ad5c0 	call	80ad5c <__sprint_r>
  804ba8:	103bef1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804bac:	d8c02017 	ldw	r3,128(sp)
  804bb0:	da000404 	addi	r8,sp,16
  804bb4:	d9003217 	ldw	r4,200(sp)
  804bb8:	d8802617 	ldw	r2,152(sp)
  804bbc:	d9403317 	ldw	r5,204(sp)
  804bc0:	8123883a 	add	r17,r16,r4
  804bc4:	11400216 	blt	r2,r5,804bd0 <___vfprintf_internal_r+0x1470>
  804bc8:	9100004c 	andi	r4,r18,1
  804bcc:	20000d26 	beq	r4,zero,804c04 <___vfprintf_internal_r+0x14a4>
  804bd0:	d9003717 	ldw	r4,220(sp)
  804bd4:	d9403417 	ldw	r5,208(sp)
  804bd8:	1907883a 	add	r3,r3,r4
  804bdc:	d9001f17 	ldw	r4,124(sp)
  804be0:	41400015 	stw	r5,0(r8)
  804be4:	d9403717 	ldw	r5,220(sp)
  804be8:	21000044 	addi	r4,r4,1
  804bec:	d8c02015 	stw	r3,128(sp)
  804bf0:	41400115 	stw	r5,4(r8)
  804bf4:	d9001f15 	stw	r4,124(sp)
  804bf8:	014001c4 	movi	r5,7
  804bfc:	2901e816 	blt	r5,r4,8053a0 <___vfprintf_internal_r+0x1c40>
  804c00:	42000204 	addi	r8,r8,8
  804c04:	d9003317 	ldw	r4,204(sp)
  804c08:	8121883a 	add	r16,r16,r4
  804c0c:	2085c83a 	sub	r2,r4,r2
  804c10:	8461c83a 	sub	r16,r16,r17
  804c14:	1400010e 	bge	r2,r16,804c1c <___vfprintf_internal_r+0x14bc>
  804c18:	1021883a 	mov	r16,r2
  804c1c:	04000a0e 	bge	zero,r16,804c48 <___vfprintf_internal_r+0x14e8>
  804c20:	d9001f17 	ldw	r4,124(sp)
  804c24:	1c07883a 	add	r3,r3,r16
  804c28:	44400015 	stw	r17,0(r8)
  804c2c:	21000044 	addi	r4,r4,1
  804c30:	44000115 	stw	r16,4(r8)
  804c34:	d8c02015 	stw	r3,128(sp)
  804c38:	d9001f15 	stw	r4,124(sp)
  804c3c:	014001c4 	movi	r5,7
  804c40:	2901fb16 	blt	r5,r4,805430 <___vfprintf_internal_r+0x1cd0>
  804c44:	42000204 	addi	r8,r8,8
  804c48:	8001f716 	blt	r16,zero,805428 <___vfprintf_internal_r+0x1cc8>
  804c4c:	1421c83a 	sub	r16,r2,r16
  804c50:	043d380e 	bge	zero,r16,804134 <__alt_mem_onchip_mem+0xff784134>
  804c54:	04400404 	movi	r17,16
  804c58:	d8801f17 	ldw	r2,124(sp)
  804c5c:	8c3efb0e 	bge	r17,r16,80484c <__alt_mem_onchip_mem+0xff78484c>
  804c60:	01402074 	movhi	r5,129
  804c64:	29506284 	addi	r5,r5,16778
  804c68:	d9402b15 	stw	r5,172(sp)
  804c6c:	058001c4 	movi	r22,7
  804c70:	dcc02c17 	ldw	r19,176(sp)
  804c74:	00000306 	br	804c84 <___vfprintf_internal_r+0x1524>
  804c78:	42000204 	addi	r8,r8,8
  804c7c:	843ffc04 	addi	r16,r16,-16
  804c80:	8c3ef50e 	bge	r17,r16,804858 <__alt_mem_onchip_mem+0xff784858>
  804c84:	18c00404 	addi	r3,r3,16
  804c88:	10800044 	addi	r2,r2,1
  804c8c:	45000015 	stw	r20,0(r8)
  804c90:	44400115 	stw	r17,4(r8)
  804c94:	d8c02015 	stw	r3,128(sp)
  804c98:	d8801f15 	stw	r2,124(sp)
  804c9c:	b0bff60e 	bge	r22,r2,804c78 <__alt_mem_onchip_mem+0xff784c78>
  804ca0:	d9801e04 	addi	r6,sp,120
  804ca4:	b80b883a 	mov	r5,r23
  804ca8:	9809883a 	mov	r4,r19
  804cac:	080ad5c0 	call	80ad5c <__sprint_r>
  804cb0:	103bad1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804cb4:	d8c02017 	ldw	r3,128(sp)
  804cb8:	d8801f17 	ldw	r2,124(sp)
  804cbc:	da000404 	addi	r8,sp,16
  804cc0:	003fee06 	br	804c7c <__alt_mem_onchip_mem+0xff784c7c>
  804cc4:	9088703a 	and	r4,r18,r2
  804cc8:	203eab1e 	bne	r4,zero,804778 <__alt_mem_onchip_mem+0xff784778>
  804ccc:	dc401f17 	ldw	r17,124(sp)
  804cd0:	40800115 	stw	r2,4(r8)
  804cd4:	44000015 	stw	r16,0(r8)
  804cd8:	8c400044 	addi	r17,r17,1
  804cdc:	d8c02015 	stw	r3,128(sp)
  804ce0:	dc401f15 	stw	r17,124(sp)
  804ce4:	008001c4 	movi	r2,7
  804ce8:	14400e16 	blt	r2,r17,804d24 <___vfprintf_internal_r+0x15c4>
  804cec:	45800204 	addi	r22,r8,8
  804cf0:	003eca06 	br	80481c <__alt_mem_onchip_mem+0xff78481c>
  804cf4:	01002074 	movhi	r4,129
  804cf8:	21106284 	addi	r4,r4,16778
  804cfc:	d9002b15 	stw	r4,172(sp)
  804d00:	d8802b17 	ldw	r2,172(sp)
  804d04:	1c07883a 	add	r3,r3,r16
  804d08:	8c400044 	addi	r17,r17,1
  804d0c:	b0800015 	stw	r2,0(r22)
  804d10:	b4000115 	stw	r16,4(r22)
  804d14:	d8c02015 	stw	r3,128(sp)
  804d18:	dc401f15 	stw	r17,124(sp)
  804d1c:	008001c4 	movi	r2,7
  804d20:	147ebd0e 	bge	r2,r17,804818 <__alt_mem_onchip_mem+0xff784818>
  804d24:	d9002c17 	ldw	r4,176(sp)
  804d28:	d9801e04 	addi	r6,sp,120
  804d2c:	b80b883a 	mov	r5,r23
  804d30:	080ad5c0 	call	80ad5c <__sprint_r>
  804d34:	103b8c1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804d38:	d8c02017 	ldw	r3,128(sp)
  804d3c:	dc401f17 	ldw	r17,124(sp)
  804d40:	dd800404 	addi	r22,sp,16
  804d44:	003eb506 	br	80481c <__alt_mem_onchip_mem+0xff78481c>
  804d48:	d9002c17 	ldw	r4,176(sp)
  804d4c:	d9801e04 	addi	r6,sp,120
  804d50:	b80b883a 	mov	r5,r23
  804d54:	080ad5c0 	call	80ad5c <__sprint_r>
  804d58:	103b831e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804d5c:	d8c02017 	ldw	r3,128(sp)
  804d60:	dc401f17 	ldw	r17,124(sp)
  804d64:	da000404 	addi	r8,sp,16
  804d68:	003e8d06 	br	8047a0 <__alt_mem_onchip_mem+0xff7847a0>
  804d6c:	d9002c17 	ldw	r4,176(sp)
  804d70:	d9801e04 	addi	r6,sp,120
  804d74:	b80b883a 	mov	r5,r23
  804d78:	080ad5c0 	call	80ad5c <__sprint_r>
  804d7c:	103b7a1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804d80:	d8c02017 	ldw	r3,128(sp)
  804d84:	dc401f17 	ldw	r17,124(sp)
  804d88:	dd800404 	addi	r22,sp,16
  804d8c:	003e8f06 	br	8047cc <__alt_mem_onchip_mem+0xff7847cc>
  804d90:	0027883a 	mov	r19,zero
  804d94:	003f4a06 	br	804ac0 <__alt_mem_onchip_mem+0xff784ac0>
  804d98:	d9002c17 	ldw	r4,176(sp)
  804d9c:	d9801e04 	addi	r6,sp,120
  804da0:	b80b883a 	mov	r5,r23
  804da4:	080ad5c0 	call	80ad5c <__sprint_r>
  804da8:	103b6f1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  804dac:	d8c02017 	ldw	r3,128(sp)
  804db0:	da000404 	addi	r8,sp,16
  804db4:	003c9d06 	br	80402c <__alt_mem_onchip_mem+0xff78402c>
  804db8:	04e7c83a 	sub	r19,zero,r19
  804dbc:	9804c03a 	cmpne	r2,r19,zero
  804dc0:	05adc83a 	sub	r22,zero,r22
  804dc4:	b0adc83a 	sub	r22,r22,r2
  804dc8:	d8802917 	ldw	r2,164(sp)
  804dcc:	07000b44 	movi	fp,45
  804dd0:	df002785 	stb	fp,158(sp)
  804dd4:	10017b16 	blt	r2,zero,8053c4 <___vfprintf_internal_r+0x1c64>
  804dd8:	00bfdfc4 	movi	r2,-129
  804ddc:	90a4703a 	and	r18,r18,r2
  804de0:	003bb106 	br	803ca8 <__alt_mem_onchip_mem+0xff783ca8>
  804de4:	d9003617 	ldw	r4,216(sp)
  804de8:	d9403817 	ldw	r5,224(sp)
  804dec:	da003d15 	stw	r8,244(sp)
  804df0:	080a9800 	call	80a980 <__fpclassifyd>
  804df4:	da003d17 	ldw	r8,244(sp)
  804df8:	1000f026 	beq	r2,zero,8051bc <___vfprintf_internal_r+0x1a5c>
  804dfc:	d9002917 	ldw	r4,164(sp)
  804e00:	05bff7c4 	movi	r22,-33
  804e04:	00bfffc4 	movi	r2,-1
  804e08:	8dac703a 	and	r22,r17,r22
  804e0c:	20820026 	beq	r4,r2,805610 <___vfprintf_internal_r+0x1eb0>
  804e10:	008011c4 	movi	r2,71
  804e14:	b081f726 	beq	r22,r2,8055f4 <___vfprintf_internal_r+0x1e94>
  804e18:	d9003817 	ldw	r4,224(sp)
  804e1c:	90c04014 	ori	r3,r18,256
  804e20:	d8c02b15 	stw	r3,172(sp)
  804e24:	20021516 	blt	r4,zero,80567c <___vfprintf_internal_r+0x1f1c>
  804e28:	dcc03817 	ldw	r19,224(sp)
  804e2c:	d8002a05 	stb	zero,168(sp)
  804e30:	00801984 	movi	r2,102
  804e34:	8881f926 	beq	r17,r2,80561c <___vfprintf_internal_r+0x1ebc>
  804e38:	00801184 	movi	r2,70
  804e3c:	88821c26 	beq	r17,r2,8056b0 <___vfprintf_internal_r+0x1f50>
  804e40:	00801144 	movi	r2,69
  804e44:	b081ef26 	beq	r22,r2,805604 <___vfprintf_internal_r+0x1ea4>
  804e48:	d8c02917 	ldw	r3,164(sp)
  804e4c:	d8802104 	addi	r2,sp,132
  804e50:	d8800315 	stw	r2,12(sp)
  804e54:	d9403617 	ldw	r5,216(sp)
  804e58:	d8802504 	addi	r2,sp,148
  804e5c:	d9002c17 	ldw	r4,176(sp)
  804e60:	d8800215 	stw	r2,8(sp)
  804e64:	d8802604 	addi	r2,sp,152
  804e68:	d8c00015 	stw	r3,0(sp)
  804e6c:	d8800115 	stw	r2,4(sp)
  804e70:	01c00084 	movi	r7,2
  804e74:	980d883a 	mov	r6,r19
  804e78:	d8c03c15 	stw	r3,240(sp)
  804e7c:	da003d15 	stw	r8,244(sp)
  804e80:	0805d840 	call	805d84 <_dtoa_r>
  804e84:	1021883a 	mov	r16,r2
  804e88:	008019c4 	movi	r2,103
  804e8c:	d8c03c17 	ldw	r3,240(sp)
  804e90:	da003d17 	ldw	r8,244(sp)
  804e94:	88817126 	beq	r17,r2,80545c <___vfprintf_internal_r+0x1cfc>
  804e98:	008011c4 	movi	r2,71
  804e9c:	88829226 	beq	r17,r2,8058e8 <___vfprintf_internal_r+0x2188>
  804ea0:	80f9883a 	add	fp,r16,r3
  804ea4:	d9003617 	ldw	r4,216(sp)
  804ea8:	000d883a 	mov	r6,zero
  804eac:	000f883a 	mov	r7,zero
  804eb0:	980b883a 	mov	r5,r19
  804eb4:	da003d15 	stw	r8,244(sp)
  804eb8:	080e9d40 	call	80e9d4 <__eqdf2>
  804ebc:	da003d17 	ldw	r8,244(sp)
  804ec0:	10018d26 	beq	r2,zero,8054f8 <___vfprintf_internal_r+0x1d98>
  804ec4:	d8802117 	ldw	r2,132(sp)
  804ec8:	1700062e 	bgeu	r2,fp,804ee4 <___vfprintf_internal_r+0x1784>
  804ecc:	01000c04 	movi	r4,48
  804ed0:	10c00044 	addi	r3,r2,1
  804ed4:	d8c02115 	stw	r3,132(sp)
  804ed8:	11000005 	stb	r4,0(r2)
  804edc:	d8802117 	ldw	r2,132(sp)
  804ee0:	173ffb36 	bltu	r2,fp,804ed0 <__alt_mem_onchip_mem+0xff784ed0>
  804ee4:	1405c83a 	sub	r2,r2,r16
  804ee8:	d8803315 	stw	r2,204(sp)
  804eec:	008011c4 	movi	r2,71
  804ef0:	b0817626 	beq	r22,r2,8054cc <___vfprintf_internal_r+0x1d6c>
  804ef4:	00801944 	movi	r2,101
  804ef8:	1442810e 	bge	r2,r17,805900 <___vfprintf_internal_r+0x21a0>
  804efc:	d8c02617 	ldw	r3,152(sp)
  804f00:	00801984 	movi	r2,102
  804f04:	d8c03215 	stw	r3,200(sp)
  804f08:	8881fe26 	beq	r17,r2,805704 <___vfprintf_internal_r+0x1fa4>
  804f0c:	d8c03217 	ldw	r3,200(sp)
  804f10:	d9003317 	ldw	r4,204(sp)
  804f14:	1901dd16 	blt	r3,r4,80568c <___vfprintf_internal_r+0x1f2c>
  804f18:	9480004c 	andi	r18,r18,1
  804f1c:	90022b1e 	bne	r18,zero,8057cc <___vfprintf_internal_r+0x206c>
  804f20:	1805883a 	mov	r2,r3
  804f24:	18028016 	blt	r3,zero,805928 <___vfprintf_internal_r+0x21c8>
  804f28:	d8c03217 	ldw	r3,200(sp)
  804f2c:	044019c4 	movi	r17,103
  804f30:	d8c02e15 	stw	r3,184(sp)
  804f34:	df002a07 	ldb	fp,168(sp)
  804f38:	e001531e 	bne	fp,zero,805488 <___vfprintf_internal_r+0x1d28>
  804f3c:	df002783 	ldbu	fp,158(sp)
  804f40:	d8802a15 	stw	r2,168(sp)
  804f44:	dc802b17 	ldw	r18,172(sp)
  804f48:	d8002915 	stw	zero,164(sp)
  804f4c:	003bd106 	br	803e94 <__alt_mem_onchip_mem+0xff783e94>
  804f50:	d8802d17 	ldw	r2,180(sp)
  804f54:	d8c02d17 	ldw	r3,180(sp)
  804f58:	d9002d17 	ldw	r4,180(sp)
  804f5c:	10800017 	ldw	r2,0(r2)
  804f60:	18c00117 	ldw	r3,4(r3)
  804f64:	21000204 	addi	r4,r4,8
  804f68:	d8803615 	stw	r2,216(sp)
  804f6c:	d8c03815 	stw	r3,224(sp)
  804f70:	d9002d15 	stw	r4,180(sp)
  804f74:	003b7506 	br	803d4c <__alt_mem_onchip_mem+0xff783d4c>
  804f78:	ac400007 	ldb	r17,0(r21)
  804f7c:	003a5906 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  804f80:	9080100c 	andi	r2,r18,64
  804f84:	1000a826 	beq	r2,zero,805228 <___vfprintf_internal_r+0x1ac8>
  804f88:	d9002d17 	ldw	r4,180(sp)
  804f8c:	002d883a 	mov	r22,zero
  804f90:	24c0000b 	ldhu	r19,0(r4)
  804f94:	21000104 	addi	r4,r4,4
  804f98:	d9002d15 	stw	r4,180(sp)
  804f9c:	003ccb06 	br	8042cc <__alt_mem_onchip_mem+0xff7842cc>
  804fa0:	d8c02d17 	ldw	r3,180(sp)
  804fa4:	d9002917 	ldw	r4,164(sp)
  804fa8:	002d883a 	mov	r22,zero
  804fac:	18800104 	addi	r2,r3,4
  804fb0:	1cc00017 	ldw	r19,0(r3)
  804fb4:	203ebb0e 	bge	r4,zero,804aa4 <__alt_mem_onchip_mem+0xff784aa4>
  804fb8:	003ef106 	br	804b80 <__alt_mem_onchip_mem+0xff784b80>
  804fbc:	9080040c 	andi	r2,r18,16
  804fc0:	1000921e 	bne	r2,zero,80520c <___vfprintf_internal_r+0x1aac>
  804fc4:	9480100c 	andi	r18,r18,64
  804fc8:	90013926 	beq	r18,zero,8054b0 <___vfprintf_internal_r+0x1d50>
  804fcc:	d9002d17 	ldw	r4,180(sp)
  804fd0:	d9402f17 	ldw	r5,188(sp)
  804fd4:	20800017 	ldw	r2,0(r4)
  804fd8:	21000104 	addi	r4,r4,4
  804fdc:	d9002d15 	stw	r4,180(sp)
  804fe0:	1140000d 	sth	r5,0(r2)
  804fe4:	003a1606 	br	803840 <__alt_mem_onchip_mem+0xff783840>
  804fe8:	9080100c 	andi	r2,r18,64
  804fec:	10008026 	beq	r2,zero,8051f0 <___vfprintf_internal_r+0x1a90>
  804ff0:	d8c02d17 	ldw	r3,180(sp)
  804ff4:	1cc0000f 	ldh	r19,0(r3)
  804ff8:	18c00104 	addi	r3,r3,4
  804ffc:	d8c02d15 	stw	r3,180(sp)
  805000:	982dd7fa 	srai	r22,r19,31
  805004:	b005883a 	mov	r2,r22
  805008:	003b1f06 	br	803c88 <__alt_mem_onchip_mem+0xff783c88>
  80500c:	9080100c 	andi	r2,r18,64
  805010:	d8002785 	stb	zero,158(sp)
  805014:	10008a1e 	bne	r2,zero,805240 <___vfprintf_internal_r+0x1ae0>
  805018:	d9402d17 	ldw	r5,180(sp)
  80501c:	d8c02917 	ldw	r3,164(sp)
  805020:	002d883a 	mov	r22,zero
  805024:	28800104 	addi	r2,r5,4
  805028:	2cc00017 	ldw	r19,0(r5)
  80502c:	183e4b0e 	bge	r3,zero,80495c <__alt_mem_onchip_mem+0xff78495c>
  805030:	9d86b03a 	or	r3,r19,r22
  805034:	d8802d15 	stw	r2,180(sp)
  805038:	183e4c1e 	bne	r3,zero,80496c <__alt_mem_onchip_mem+0xff78496c>
  80503c:	0039883a 	mov	fp,zero
  805040:	0005883a 	mov	r2,zero
  805044:	003d4006 	br	804548 <__alt_mem_onchip_mem+0xff784548>
  805048:	01402074 	movhi	r5,129
  80504c:	29506284 	addi	r5,r5,16778
  805050:	d9402b15 	stw	r5,172(sp)
  805054:	d9402b17 	ldw	r5,172(sp)
  805058:	1c47883a 	add	r3,r3,r17
  80505c:	10800044 	addi	r2,r2,1
  805060:	41400015 	stw	r5,0(r8)
  805064:	44400115 	stw	r17,4(r8)
  805068:	d8c02015 	stw	r3,128(sp)
  80506c:	d8801f15 	stw	r2,124(sp)
  805070:	010001c4 	movi	r4,7
  805074:	20bec816 	blt	r4,r2,804b98 <__alt_mem_onchip_mem+0xff784b98>
  805078:	42000204 	addi	r8,r8,8
  80507c:	003ecd06 	br	804bb4 <__alt_mem_onchip_mem+0xff784bb4>
  805080:	d9002917 	ldw	r4,164(sp)
  805084:	d8002785 	stb	zero,158(sp)
  805088:	203d2d16 	blt	r4,zero,804540 <__alt_mem_onchip_mem+0xff784540>
  80508c:	00bfdfc4 	movi	r2,-129
  805090:	90a4703a 	and	r18,r18,r2
  805094:	003a9106 	br	803adc <__alt_mem_onchip_mem+0xff783adc>
  805098:	01002074 	movhi	r4,129
  80509c:	21106284 	addi	r4,r4,16778
  8050a0:	d9002b15 	stw	r4,172(sp)
  8050a4:	003c0c06 	br	8040d8 <__alt_mem_onchip_mem+0xff7840d8>
  8050a8:	d9002c17 	ldw	r4,176(sp)
  8050ac:	d9801e04 	addi	r6,sp,120
  8050b0:	b80b883a 	mov	r5,r23
  8050b4:	080ad5c0 	call	80ad5c <__sprint_r>
  8050b8:	103aab1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8050bc:	d8c02017 	ldw	r3,128(sp)
  8050c0:	da000404 	addi	r8,sp,16
  8050c4:	003d4106 	br	8045cc <__alt_mem_onchip_mem+0xff7845cc>
  8050c8:	d8801f17 	ldw	r2,124(sp)
  8050cc:	01402074 	movhi	r5,129
  8050d0:	01000044 	movi	r4,1
  8050d4:	18c00044 	addi	r3,r3,1
  8050d8:	10800044 	addi	r2,r2,1
  8050dc:	29506204 	addi	r5,r5,16776
  8050e0:	41000115 	stw	r4,4(r8)
  8050e4:	41400015 	stw	r5,0(r8)
  8050e8:	d8c02015 	stw	r3,128(sp)
  8050ec:	d8801f15 	stw	r2,124(sp)
  8050f0:	010001c4 	movi	r4,7
  8050f4:	20805c16 	blt	r4,r2,805268 <___vfprintf_internal_r+0x1b08>
  8050f8:	42000204 	addi	r8,r8,8
  8050fc:	8800041e 	bne	r17,zero,805110 <___vfprintf_internal_r+0x19b0>
  805100:	d8803317 	ldw	r2,204(sp)
  805104:	1000021e 	bne	r2,zero,805110 <___vfprintf_internal_r+0x19b0>
  805108:	9080004c 	andi	r2,r18,1
  80510c:	103c0926 	beq	r2,zero,804134 <__alt_mem_onchip_mem+0xff784134>
  805110:	d9003717 	ldw	r4,220(sp)
  805114:	d8801f17 	ldw	r2,124(sp)
  805118:	d9403417 	ldw	r5,208(sp)
  80511c:	20c7883a 	add	r3,r4,r3
  805120:	10800044 	addi	r2,r2,1
  805124:	41000115 	stw	r4,4(r8)
  805128:	41400015 	stw	r5,0(r8)
  80512c:	d8c02015 	stw	r3,128(sp)
  805130:	d8801f15 	stw	r2,124(sp)
  805134:	010001c4 	movi	r4,7
  805138:	20812116 	blt	r4,r2,8055c0 <___vfprintf_internal_r+0x1e60>
  80513c:	42000204 	addi	r8,r8,8
  805140:	0463c83a 	sub	r17,zero,r17
  805144:	0440730e 	bge	zero,r17,805314 <___vfprintf_internal_r+0x1bb4>
  805148:	05800404 	movi	r22,16
  80514c:	b440860e 	bge	r22,r17,805368 <___vfprintf_internal_r+0x1c08>
  805150:	01402074 	movhi	r5,129
  805154:	29506284 	addi	r5,r5,16778
  805158:	d9402b15 	stw	r5,172(sp)
  80515c:	070001c4 	movi	fp,7
  805160:	dcc02c17 	ldw	r19,176(sp)
  805164:	00000306 	br	805174 <___vfprintf_internal_r+0x1a14>
  805168:	42000204 	addi	r8,r8,8
  80516c:	8c7ffc04 	addi	r17,r17,-16
  805170:	b440800e 	bge	r22,r17,805374 <___vfprintf_internal_r+0x1c14>
  805174:	18c00404 	addi	r3,r3,16
  805178:	10800044 	addi	r2,r2,1
  80517c:	45000015 	stw	r20,0(r8)
  805180:	45800115 	stw	r22,4(r8)
  805184:	d8c02015 	stw	r3,128(sp)
  805188:	d8801f15 	stw	r2,124(sp)
  80518c:	e0bff60e 	bge	fp,r2,805168 <__alt_mem_onchip_mem+0xff785168>
  805190:	d9801e04 	addi	r6,sp,120
  805194:	b80b883a 	mov	r5,r23
  805198:	9809883a 	mov	r4,r19
  80519c:	080ad5c0 	call	80ad5c <__sprint_r>
  8051a0:	103a711e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8051a4:	d8c02017 	ldw	r3,128(sp)
  8051a8:	d8801f17 	ldw	r2,124(sp)
  8051ac:	da000404 	addi	r8,sp,16
  8051b0:	003fee06 	br	80516c <__alt_mem_onchip_mem+0xff78516c>
  8051b4:	00bfffc4 	movi	r2,-1
  8051b8:	003a6f06 	br	803b78 <__alt_mem_onchip_mem+0xff783b78>
  8051bc:	008011c4 	movi	r2,71
  8051c0:	1440b816 	blt	r2,r17,8054a4 <___vfprintf_internal_r+0x1d44>
  8051c4:	04002074 	movhi	r16,129
  8051c8:	84105404 	addi	r16,r16,16720
  8051cc:	00c000c4 	movi	r3,3
  8051d0:	00bfdfc4 	movi	r2,-129
  8051d4:	d8c02a15 	stw	r3,168(sp)
  8051d8:	90a4703a 	and	r18,r18,r2
  8051dc:	df002783 	ldbu	fp,158(sp)
  8051e0:	d8c02e15 	stw	r3,184(sp)
  8051e4:	d8002915 	stw	zero,164(sp)
  8051e8:	d8003215 	stw	zero,200(sp)
  8051ec:	003b2906 	br	803e94 <__alt_mem_onchip_mem+0xff783e94>
  8051f0:	d9002d17 	ldw	r4,180(sp)
  8051f4:	24c00017 	ldw	r19,0(r4)
  8051f8:	21000104 	addi	r4,r4,4
  8051fc:	d9002d15 	stw	r4,180(sp)
  805200:	982dd7fa 	srai	r22,r19,31
  805204:	b005883a 	mov	r2,r22
  805208:	003a9f06 	br	803c88 <__alt_mem_onchip_mem+0xff783c88>
  80520c:	d9402d17 	ldw	r5,180(sp)
  805210:	d8c02f17 	ldw	r3,188(sp)
  805214:	28800017 	ldw	r2,0(r5)
  805218:	29400104 	addi	r5,r5,4
  80521c:	d9402d15 	stw	r5,180(sp)
  805220:	10c00015 	stw	r3,0(r2)
  805224:	00398606 	br	803840 <__alt_mem_onchip_mem+0xff783840>
  805228:	d9402d17 	ldw	r5,180(sp)
  80522c:	002d883a 	mov	r22,zero
  805230:	2cc00017 	ldw	r19,0(r5)
  805234:	29400104 	addi	r5,r5,4
  805238:	d9402d15 	stw	r5,180(sp)
  80523c:	003c2306 	br	8042cc <__alt_mem_onchip_mem+0xff7842cc>
  805240:	d8c02d17 	ldw	r3,180(sp)
  805244:	d9002917 	ldw	r4,164(sp)
  805248:	002d883a 	mov	r22,zero
  80524c:	18800104 	addi	r2,r3,4
  805250:	1cc0000b 	ldhu	r19,0(r3)
  805254:	203dc10e 	bge	r4,zero,80495c <__alt_mem_onchip_mem+0xff78495c>
  805258:	003f7506 	br	805030 <__alt_mem_onchip_mem+0xff785030>
  80525c:	04002074 	movhi	r16,129
  805260:	84105204 	addi	r16,r16,16712
  805264:	003acc06 	br	803d98 <__alt_mem_onchip_mem+0xff783d98>
  805268:	d9002c17 	ldw	r4,176(sp)
  80526c:	d9801e04 	addi	r6,sp,120
  805270:	b80b883a 	mov	r5,r23
  805274:	080ad5c0 	call	80ad5c <__sprint_r>
  805278:	103a3b1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  80527c:	dc402617 	ldw	r17,152(sp)
  805280:	d8c02017 	ldw	r3,128(sp)
  805284:	da000404 	addi	r8,sp,16
  805288:	003f9c06 	br	8050fc <__alt_mem_onchip_mem+0xff7850fc>
  80528c:	ac400043 	ldbu	r17,1(r21)
  805290:	94800814 	ori	r18,r18,32
  805294:	ad400044 	addi	r21,r21,1
  805298:	8c403fcc 	andi	r17,r17,255
  80529c:	8c40201c 	xori	r17,r17,128
  8052a0:	8c7fe004 	addi	r17,r17,-128
  8052a4:	00398f06 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  8052a8:	d8c02d15 	stw	r3,180(sp)
  8052ac:	0039883a 	mov	fp,zero
  8052b0:	003e3506 	br	804b88 <__alt_mem_onchip_mem+0xff784b88>
  8052b4:	d9002c17 	ldw	r4,176(sp)
  8052b8:	d9801e04 	addi	r6,sp,120
  8052bc:	b80b883a 	mov	r5,r23
  8052c0:	080ad5c0 	call	80ad5c <__sprint_r>
  8052c4:	103a281e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8052c8:	d8c02017 	ldw	r3,128(sp)
  8052cc:	da000404 	addi	r8,sp,16
  8052d0:	003cd006 	br	804614 <__alt_mem_onchip_mem+0xff784614>
  8052d4:	8009883a 	mov	r4,r16
  8052d8:	da003d15 	stw	r8,244(sp)
  8052dc:	08036c00 	call	8036c0 <strlen>
  8052e0:	d8802e15 	stw	r2,184(sp)
  8052e4:	da003d17 	ldw	r8,244(sp)
  8052e8:	103c340e 	bge	r2,zero,8043bc <__alt_mem_onchip_mem+0xff7843bc>
  8052ec:	0005883a 	mov	r2,zero
  8052f0:	003c3206 	br	8043bc <__alt_mem_onchip_mem+0xff7843bc>
  8052f4:	d9002c17 	ldw	r4,176(sp)
  8052f8:	d9801e04 	addi	r6,sp,120
  8052fc:	b80b883a 	mov	r5,r23
  805300:	080ad5c0 	call	80ad5c <__sprint_r>
  805304:	103a181e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  805308:	d8c02017 	ldw	r3,128(sp)
  80530c:	d8801f17 	ldw	r2,124(sp)
  805310:	da000404 	addi	r8,sp,16
  805314:	d9403317 	ldw	r5,204(sp)
  805318:	10800044 	addi	r2,r2,1
  80531c:	44000015 	stw	r16,0(r8)
  805320:	28c7883a 	add	r3,r5,r3
  805324:	003b7d06 	br	80411c <__alt_mem_onchip_mem+0xff78411c>
  805328:	01002074 	movhi	r4,129
  80532c:	21106684 	addi	r4,r4,16794
  805330:	d9003515 	stw	r4,212(sp)
  805334:	003b1406 	br	803f88 <__alt_mem_onchip_mem+0xff783f88>
  805338:	013fffc4 	movi	r4,-1
  80533c:	003a3506 	br	803c14 <__alt_mem_onchip_mem+0xff783c14>
  805340:	0023883a 	mov	r17,zero
  805344:	003d9d06 	br	8049bc <__alt_mem_onchip_mem+0xff7849bc>
  805348:	d9002c17 	ldw	r4,176(sp)
  80534c:	d9801e04 	addi	r6,sp,120
  805350:	b80b883a 	mov	r5,r23
  805354:	080ad5c0 	call	80ad5c <__sprint_r>
  805358:	103a031e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  80535c:	d8c02017 	ldw	r3,128(sp)
  805360:	da000404 	addi	r8,sp,16
  805364:	003d9406 	br	8049b8 <__alt_mem_onchip_mem+0xff7849b8>
  805368:	01002074 	movhi	r4,129
  80536c:	21106284 	addi	r4,r4,16778
  805370:	d9002b15 	stw	r4,172(sp)
  805374:	d9002b17 	ldw	r4,172(sp)
  805378:	1c47883a 	add	r3,r3,r17
  80537c:	10800044 	addi	r2,r2,1
  805380:	41000015 	stw	r4,0(r8)
  805384:	44400115 	stw	r17,4(r8)
  805388:	d8c02015 	stw	r3,128(sp)
  80538c:	d8801f15 	stw	r2,124(sp)
  805390:	010001c4 	movi	r4,7
  805394:	20bfd716 	blt	r4,r2,8052f4 <__alt_mem_onchip_mem+0xff7852f4>
  805398:	42000204 	addi	r8,r8,8
  80539c:	003fdd06 	br	805314 <__alt_mem_onchip_mem+0xff785314>
  8053a0:	d9002c17 	ldw	r4,176(sp)
  8053a4:	d9801e04 	addi	r6,sp,120
  8053a8:	b80b883a 	mov	r5,r23
  8053ac:	080ad5c0 	call	80ad5c <__sprint_r>
  8053b0:	1039ed1e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8053b4:	d8802617 	ldw	r2,152(sp)
  8053b8:	d8c02017 	ldw	r3,128(sp)
  8053bc:	da000404 	addi	r8,sp,16
  8053c0:	003e1006 	br	804c04 <__alt_mem_onchip_mem+0xff784c04>
  8053c4:	00800044 	movi	r2,1
  8053c8:	10803fcc 	andi	r2,r2,255
  8053cc:	00c00044 	movi	r3,1
  8053d0:	10fa3526 	beq	r2,r3,803ca8 <__alt_mem_onchip_mem+0xff783ca8>
  8053d4:	00c00084 	movi	r3,2
  8053d8:	10fbcb26 	beq	r2,r3,804308 <__alt_mem_onchip_mem+0xff784308>
  8053dc:	003a8f06 	br	803e1c <__alt_mem_onchip_mem+0xff783e1c>
  8053e0:	01002074 	movhi	r4,129
  8053e4:	21106684 	addi	r4,r4,16794
  8053e8:	d9003515 	stw	r4,212(sp)
  8053ec:	003b7606 	br	8041c8 <__alt_mem_onchip_mem+0xff7841c8>
  8053f0:	d8802917 	ldw	r2,164(sp)
  8053f4:	00c00184 	movi	r3,6
  8053f8:	1880012e 	bgeu	r3,r2,805400 <___vfprintf_internal_r+0x1ca0>
  8053fc:	1805883a 	mov	r2,r3
  805400:	d8802e15 	stw	r2,184(sp)
  805404:	1000ef16 	blt	r2,zero,8057c4 <___vfprintf_internal_r+0x2064>
  805408:	04002074 	movhi	r16,129
  80540c:	d8802a15 	stw	r2,168(sp)
  805410:	dcc02d15 	stw	r19,180(sp)
  805414:	d8002915 	stw	zero,164(sp)
  805418:	d8003215 	stw	zero,200(sp)
  80541c:	84106004 	addi	r16,r16,16768
  805420:	0039883a 	mov	fp,zero
  805424:	003aa206 	br	803eb0 <__alt_mem_onchip_mem+0xff783eb0>
  805428:	0021883a 	mov	r16,zero
  80542c:	003e0706 	br	804c4c <__alt_mem_onchip_mem+0xff784c4c>
  805430:	d9002c17 	ldw	r4,176(sp)
  805434:	d9801e04 	addi	r6,sp,120
  805438:	b80b883a 	mov	r5,r23
  80543c:	080ad5c0 	call	80ad5c <__sprint_r>
  805440:	1039c91e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  805444:	d8802617 	ldw	r2,152(sp)
  805448:	d9403317 	ldw	r5,204(sp)
  80544c:	d8c02017 	ldw	r3,128(sp)
  805450:	da000404 	addi	r8,sp,16
  805454:	2885c83a 	sub	r2,r5,r2
  805458:	003dfb06 	br	804c48 <__alt_mem_onchip_mem+0xff784c48>
  80545c:	9080004c 	andi	r2,r18,1
  805460:	103e8f1e 	bne	r2,zero,804ea0 <__alt_mem_onchip_mem+0xff784ea0>
  805464:	d8802117 	ldw	r2,132(sp)
  805468:	003e9e06 	br	804ee4 <__alt_mem_onchip_mem+0xff784ee4>
  80546c:	1025883a 	mov	r18,r2
  805470:	0039883a 	mov	fp,zero
  805474:	00800084 	movi	r2,2
  805478:	003fd306 	br	8053c8 <__alt_mem_onchip_mem+0xff7853c8>
  80547c:	07000b44 	movi	fp,45
  805480:	df002785 	stb	fp,158(sp)
  805484:	003a4006 	br	803d88 <__alt_mem_onchip_mem+0xff783d88>
  805488:	00c00b44 	movi	r3,45
  80548c:	d8c02785 	stb	r3,158(sp)
  805490:	d8802a15 	stw	r2,168(sp)
  805494:	dc802b17 	ldw	r18,172(sp)
  805498:	d8002915 	stw	zero,164(sp)
  80549c:	07000b44 	movi	fp,45
  8054a0:	003a8006 	br	803ea4 <__alt_mem_onchip_mem+0xff783ea4>
  8054a4:	04002074 	movhi	r16,129
  8054a8:	84105504 	addi	r16,r16,16724
  8054ac:	003f4706 	br	8051cc <__alt_mem_onchip_mem+0xff7851cc>
  8054b0:	d8c02d17 	ldw	r3,180(sp)
  8054b4:	d9002f17 	ldw	r4,188(sp)
  8054b8:	18800017 	ldw	r2,0(r3)
  8054bc:	18c00104 	addi	r3,r3,4
  8054c0:	d8c02d15 	stw	r3,180(sp)
  8054c4:	11000015 	stw	r4,0(r2)
  8054c8:	0038dd06 	br	803840 <__alt_mem_onchip_mem+0xff783840>
  8054cc:	dd802617 	ldw	r22,152(sp)
  8054d0:	00bfff44 	movi	r2,-3
  8054d4:	b0801c16 	blt	r22,r2,805548 <___vfprintf_internal_r+0x1de8>
  8054d8:	d9402917 	ldw	r5,164(sp)
  8054dc:	2d801a16 	blt	r5,r22,805548 <___vfprintf_internal_r+0x1de8>
  8054e0:	dd803215 	stw	r22,200(sp)
  8054e4:	003e8906 	br	804f0c <__alt_mem_onchip_mem+0xff784f0c>
  8054e8:	01002074 	movhi	r4,129
  8054ec:	21106284 	addi	r4,r4,16778
  8054f0:	d9002b15 	stw	r4,172(sp)
  8054f4:	003c9106 	br	80473c <__alt_mem_onchip_mem+0xff78473c>
  8054f8:	e005883a 	mov	r2,fp
  8054fc:	003e7906 	br	804ee4 <__alt_mem_onchip_mem+0xff784ee4>
  805500:	d9402917 	ldw	r5,164(sp)
  805504:	df002783 	ldbu	fp,158(sp)
  805508:	dcc02d15 	stw	r19,180(sp)
  80550c:	d9402a15 	stw	r5,168(sp)
  805510:	d9402e15 	stw	r5,184(sp)
  805514:	d8002915 	stw	zero,164(sp)
  805518:	d8003215 	stw	zero,200(sp)
  80551c:	003a5d06 	br	803e94 <__alt_mem_onchip_mem+0xff783e94>
  805520:	9080004c 	andi	r2,r18,1
  805524:	0039883a 	mov	fp,zero
  805528:	10000426 	beq	r2,zero,80553c <___vfprintf_internal_r+0x1ddc>
  80552c:	00800c04 	movi	r2,48
  805530:	dc001dc4 	addi	r16,sp,119
  805534:	d8801dc5 	stb	r2,119(sp)
  805538:	003b8006 	br	80433c <__alt_mem_onchip_mem+0xff78433c>
  80553c:	d8002e15 	stw	zero,184(sp)
  805540:	dc001e04 	addi	r16,sp,120
  805544:	003a4d06 	br	803e7c <__alt_mem_onchip_mem+0xff783e7c>
  805548:	8c7fff84 	addi	r17,r17,-2
  80554c:	b5bfffc4 	addi	r22,r22,-1
  805550:	dd802615 	stw	r22,152(sp)
  805554:	dc4022c5 	stb	r17,139(sp)
  805558:	b000bf16 	blt	r22,zero,805858 <___vfprintf_internal_r+0x20f8>
  80555c:	00800ac4 	movi	r2,43
  805560:	d8802305 	stb	r2,140(sp)
  805564:	00800244 	movi	r2,9
  805568:	15807016 	blt	r2,r22,80572c <___vfprintf_internal_r+0x1fcc>
  80556c:	00800c04 	movi	r2,48
  805570:	b5800c04 	addi	r22,r22,48
  805574:	d8802345 	stb	r2,141(sp)
  805578:	dd802385 	stb	r22,142(sp)
  80557c:	d88023c4 	addi	r2,sp,143
  805580:	df0022c4 	addi	fp,sp,139
  805584:	d8c03317 	ldw	r3,204(sp)
  805588:	1739c83a 	sub	fp,r2,fp
  80558c:	d9003317 	ldw	r4,204(sp)
  805590:	e0c7883a 	add	r3,fp,r3
  805594:	df003a15 	stw	fp,232(sp)
  805598:	d8c02e15 	stw	r3,184(sp)
  80559c:	00800044 	movi	r2,1
  8055a0:	1100b30e 	bge	r2,r4,805870 <___vfprintf_internal_r+0x2110>
  8055a4:	d8c02e17 	ldw	r3,184(sp)
  8055a8:	18c00044 	addi	r3,r3,1
  8055ac:	d8c02e15 	stw	r3,184(sp)
  8055b0:	1805883a 	mov	r2,r3
  8055b4:	1800ac16 	blt	r3,zero,805868 <___vfprintf_internal_r+0x2108>
  8055b8:	d8003215 	stw	zero,200(sp)
  8055bc:	003e5d06 	br	804f34 <__alt_mem_onchip_mem+0xff784f34>
  8055c0:	d9002c17 	ldw	r4,176(sp)
  8055c4:	d9801e04 	addi	r6,sp,120
  8055c8:	b80b883a 	mov	r5,r23
  8055cc:	080ad5c0 	call	80ad5c <__sprint_r>
  8055d0:	1039651e 	bne	r2,zero,803b68 <__alt_mem_onchip_mem+0xff783b68>
  8055d4:	dc402617 	ldw	r17,152(sp)
  8055d8:	d8c02017 	ldw	r3,128(sp)
  8055dc:	d8801f17 	ldw	r2,124(sp)
  8055e0:	da000404 	addi	r8,sp,16
  8055e4:	003ed606 	br	805140 <__alt_mem_onchip_mem+0xff785140>
  8055e8:	582b883a 	mov	r21,r11
  8055ec:	d8002915 	stw	zero,164(sp)
  8055f0:	0038bd06 	br	8038e8 <__alt_mem_onchip_mem+0xff7838e8>
  8055f4:	d8802917 	ldw	r2,164(sp)
  8055f8:	103e071e 	bne	r2,zero,804e18 <__alt_mem_onchip_mem+0xff784e18>
  8055fc:	dc002915 	stw	r16,164(sp)
  805600:	003e0506 	br	804e18 <__alt_mem_onchip_mem+0xff784e18>
  805604:	d9002917 	ldw	r4,164(sp)
  805608:	20c00044 	addi	r3,r4,1
  80560c:	003e0f06 	br	804e4c <__alt_mem_onchip_mem+0xff784e4c>
  805610:	01400184 	movi	r5,6
  805614:	d9402915 	stw	r5,164(sp)
  805618:	003dff06 	br	804e18 <__alt_mem_onchip_mem+0xff784e18>
  80561c:	d8802104 	addi	r2,sp,132
  805620:	d8800315 	stw	r2,12(sp)
  805624:	d8802504 	addi	r2,sp,148
  805628:	d8800215 	stw	r2,8(sp)
  80562c:	d8802604 	addi	r2,sp,152
  805630:	d8800115 	stw	r2,4(sp)
  805634:	d8802917 	ldw	r2,164(sp)
  805638:	d9403617 	ldw	r5,216(sp)
  80563c:	d9002c17 	ldw	r4,176(sp)
  805640:	d8800015 	stw	r2,0(sp)
  805644:	01c000c4 	movi	r7,3
  805648:	980d883a 	mov	r6,r19
  80564c:	da003d15 	stw	r8,244(sp)
  805650:	0805d840 	call	805d84 <_dtoa_r>
  805654:	d8c02917 	ldw	r3,164(sp)
  805658:	da003d17 	ldw	r8,244(sp)
  80565c:	1021883a 	mov	r16,r2
  805660:	10f9883a 	add	fp,r2,r3
  805664:	81000007 	ldb	r4,0(r16)
  805668:	00800c04 	movi	r2,48
  80566c:	20805e26 	beq	r4,r2,8057e8 <___vfprintf_internal_r+0x2088>
  805670:	d8c02617 	ldw	r3,152(sp)
  805674:	e0f9883a 	add	fp,fp,r3
  805678:	003e0a06 	br	804ea4 <__alt_mem_onchip_mem+0xff784ea4>
  80567c:	00c00b44 	movi	r3,45
  805680:	24e0003c 	xorhi	r19,r4,32768
  805684:	d8c02a05 	stb	r3,168(sp)
  805688:	003de906 	br	804e30 <__alt_mem_onchip_mem+0xff784e30>
  80568c:	d8c03217 	ldw	r3,200(sp)
  805690:	00c07a0e 	bge	zero,r3,80587c <___vfprintf_internal_r+0x211c>
  805694:	00800044 	movi	r2,1
  805698:	d9003317 	ldw	r4,204(sp)
  80569c:	1105883a 	add	r2,r2,r4
  8056a0:	d8802e15 	stw	r2,184(sp)
  8056a4:	10004e16 	blt	r2,zero,8057e0 <___vfprintf_internal_r+0x2080>
  8056a8:	044019c4 	movi	r17,103
  8056ac:	003e2106 	br	804f34 <__alt_mem_onchip_mem+0xff784f34>
  8056b0:	d9002917 	ldw	r4,164(sp)
  8056b4:	d8802104 	addi	r2,sp,132
  8056b8:	d8800315 	stw	r2,12(sp)
  8056bc:	d9000015 	stw	r4,0(sp)
  8056c0:	d8802504 	addi	r2,sp,148
  8056c4:	d9403617 	ldw	r5,216(sp)
  8056c8:	d9002c17 	ldw	r4,176(sp)
  8056cc:	d8800215 	stw	r2,8(sp)
  8056d0:	d8802604 	addi	r2,sp,152
  8056d4:	d8800115 	stw	r2,4(sp)
  8056d8:	01c000c4 	movi	r7,3
  8056dc:	980d883a 	mov	r6,r19
  8056e0:	da003d15 	stw	r8,244(sp)
  8056e4:	0805d840 	call	805d84 <_dtoa_r>
  8056e8:	d8c02917 	ldw	r3,164(sp)
  8056ec:	da003d17 	ldw	r8,244(sp)
  8056f0:	1021883a 	mov	r16,r2
  8056f4:	00801184 	movi	r2,70
  8056f8:	80f9883a 	add	fp,r16,r3
  8056fc:	88bfd926 	beq	r17,r2,805664 <__alt_mem_onchip_mem+0xff785664>
  805700:	003de806 	br	804ea4 <__alt_mem_onchip_mem+0xff784ea4>
  805704:	d9002917 	ldw	r4,164(sp)
  805708:	00c04d0e 	bge	zero,r3,805840 <___vfprintf_internal_r+0x20e0>
  80570c:	2000441e 	bne	r4,zero,805820 <___vfprintf_internal_r+0x20c0>
  805710:	9480004c 	andi	r18,r18,1
  805714:	9000421e 	bne	r18,zero,805820 <___vfprintf_internal_r+0x20c0>
  805718:	1805883a 	mov	r2,r3
  80571c:	18007016 	blt	r3,zero,8058e0 <___vfprintf_internal_r+0x2180>
  805720:	d8c03217 	ldw	r3,200(sp)
  805724:	d8c02e15 	stw	r3,184(sp)
  805728:	003e0206 	br	804f34 <__alt_mem_onchip_mem+0xff784f34>
  80572c:	df0022c4 	addi	fp,sp,139
  805730:	dc002915 	stw	r16,164(sp)
  805734:	4027883a 	mov	r19,r8
  805738:	e021883a 	mov	r16,fp
  80573c:	b009883a 	mov	r4,r22
  805740:	01400284 	movi	r5,10
  805744:	080d7100 	call	80d710 <__modsi3>
  805748:	10800c04 	addi	r2,r2,48
  80574c:	843fffc4 	addi	r16,r16,-1
  805750:	b009883a 	mov	r4,r22
  805754:	01400284 	movi	r5,10
  805758:	80800005 	stb	r2,0(r16)
  80575c:	080d68c0 	call	80d68c <__divsi3>
  805760:	102d883a 	mov	r22,r2
  805764:	00800244 	movi	r2,9
  805768:	15bff416 	blt	r2,r22,80573c <__alt_mem_onchip_mem+0xff78573c>
  80576c:	9811883a 	mov	r8,r19
  805770:	b0800c04 	addi	r2,r22,48
  805774:	8027883a 	mov	r19,r16
  805778:	997fffc4 	addi	r5,r19,-1
  80577c:	98bfffc5 	stb	r2,-1(r19)
  805780:	dc002917 	ldw	r16,164(sp)
  805784:	2f006a2e 	bgeu	r5,fp,805930 <___vfprintf_internal_r+0x21d0>
  805788:	d9c02384 	addi	r7,sp,142
  80578c:	3ccfc83a 	sub	r7,r7,r19
  805790:	d9002344 	addi	r4,sp,141
  805794:	e1cf883a 	add	r7,fp,r7
  805798:	00000106 	br	8057a0 <___vfprintf_internal_r+0x2040>
  80579c:	28800003 	ldbu	r2,0(r5)
  8057a0:	20800005 	stb	r2,0(r4)
  8057a4:	21000044 	addi	r4,r4,1
  8057a8:	29400044 	addi	r5,r5,1
  8057ac:	393ffb1e 	bne	r7,r4,80579c <__alt_mem_onchip_mem+0xff78579c>
  8057b0:	d8802304 	addi	r2,sp,140
  8057b4:	14c5c83a 	sub	r2,r2,r19
  8057b8:	d8c02344 	addi	r3,sp,141
  8057bc:	1885883a 	add	r2,r3,r2
  8057c0:	003f7006 	br	805584 <__alt_mem_onchip_mem+0xff785584>
  8057c4:	0005883a 	mov	r2,zero
  8057c8:	003f0f06 	br	805408 <__alt_mem_onchip_mem+0xff785408>
  8057cc:	d8c03217 	ldw	r3,200(sp)
  8057d0:	18c00044 	addi	r3,r3,1
  8057d4:	d8c02e15 	stw	r3,184(sp)
  8057d8:	1805883a 	mov	r2,r3
  8057dc:	183fb20e 	bge	r3,zero,8056a8 <__alt_mem_onchip_mem+0xff7856a8>
  8057e0:	0005883a 	mov	r2,zero
  8057e4:	003fb006 	br	8056a8 <__alt_mem_onchip_mem+0xff7856a8>
  8057e8:	d9003617 	ldw	r4,216(sp)
  8057ec:	000d883a 	mov	r6,zero
  8057f0:	000f883a 	mov	r7,zero
  8057f4:	980b883a 	mov	r5,r19
  8057f8:	d8c03c15 	stw	r3,240(sp)
  8057fc:	da003d15 	stw	r8,244(sp)
  805800:	080e9d40 	call	80e9d4 <__eqdf2>
  805804:	d8c03c17 	ldw	r3,240(sp)
  805808:	da003d17 	ldw	r8,244(sp)
  80580c:	103f9826 	beq	r2,zero,805670 <__alt_mem_onchip_mem+0xff785670>
  805810:	00800044 	movi	r2,1
  805814:	10c7c83a 	sub	r3,r2,r3
  805818:	d8c02615 	stw	r3,152(sp)
  80581c:	003f9506 	br	805674 <__alt_mem_onchip_mem+0xff785674>
  805820:	d9002917 	ldw	r4,164(sp)
  805824:	d8c03217 	ldw	r3,200(sp)
  805828:	20800044 	addi	r2,r4,1
  80582c:	1885883a 	add	r2,r3,r2
  805830:	d8802e15 	stw	r2,184(sp)
  805834:	103dbf0e 	bge	r2,zero,804f34 <__alt_mem_onchip_mem+0xff784f34>
  805838:	0005883a 	mov	r2,zero
  80583c:	003dbd06 	br	804f34 <__alt_mem_onchip_mem+0xff784f34>
  805840:	2000211e 	bne	r4,zero,8058c8 <___vfprintf_internal_r+0x2168>
  805844:	9480004c 	andi	r18,r18,1
  805848:	90001f1e 	bne	r18,zero,8058c8 <___vfprintf_internal_r+0x2168>
  80584c:	00800044 	movi	r2,1
  805850:	d8802e15 	stw	r2,184(sp)
  805854:	003db706 	br	804f34 <__alt_mem_onchip_mem+0xff784f34>
  805858:	00800b44 	movi	r2,45
  80585c:	05adc83a 	sub	r22,zero,r22
  805860:	d8802305 	stb	r2,140(sp)
  805864:	003f3f06 	br	805564 <__alt_mem_onchip_mem+0xff785564>
  805868:	0005883a 	mov	r2,zero
  80586c:	003f5206 	br	8055b8 <__alt_mem_onchip_mem+0xff7855b8>
  805870:	90a4703a 	and	r18,r18,r2
  805874:	903f4e26 	beq	r18,zero,8055b0 <__alt_mem_onchip_mem+0xff7855b0>
  805878:	003f4a06 	br	8055a4 <__alt_mem_onchip_mem+0xff7855a4>
  80587c:	00800084 	movi	r2,2
  805880:	10c5c83a 	sub	r2,r2,r3
  805884:	003f8406 	br	805698 <__alt_mem_onchip_mem+0xff785698>
  805888:	d8802d17 	ldw	r2,180(sp)
  80588c:	d9002d17 	ldw	r4,180(sp)
  805890:	ac400043 	ldbu	r17,1(r21)
  805894:	10800017 	ldw	r2,0(r2)
  805898:	582b883a 	mov	r21,r11
  80589c:	d8802915 	stw	r2,164(sp)
  8058a0:	20800104 	addi	r2,r4,4
  8058a4:	d9002917 	ldw	r4,164(sp)
  8058a8:	d8802d15 	stw	r2,180(sp)
  8058ac:	203e7a0e 	bge	r4,zero,805298 <__alt_mem_onchip_mem+0xff785298>
  8058b0:	8c403fcc 	andi	r17,r17,255
  8058b4:	00bfffc4 	movi	r2,-1
  8058b8:	8c40201c 	xori	r17,r17,128
  8058bc:	d8802915 	stw	r2,164(sp)
  8058c0:	8c7fe004 	addi	r17,r17,-128
  8058c4:	00380706 	br	8038e4 <__alt_mem_onchip_mem+0xff7838e4>
  8058c8:	d8c02917 	ldw	r3,164(sp)
  8058cc:	18c00084 	addi	r3,r3,2
  8058d0:	d8c02e15 	stw	r3,184(sp)
  8058d4:	1805883a 	mov	r2,r3
  8058d8:	183d960e 	bge	r3,zero,804f34 <__alt_mem_onchip_mem+0xff784f34>
  8058dc:	003fd606 	br	805838 <__alt_mem_onchip_mem+0xff785838>
  8058e0:	0005883a 	mov	r2,zero
  8058e4:	003f8e06 	br	805720 <__alt_mem_onchip_mem+0xff785720>
  8058e8:	9080004c 	andi	r2,r18,1
  8058ec:	103f811e 	bne	r2,zero,8056f4 <__alt_mem_onchip_mem+0xff7856f4>
  8058f0:	d8802117 	ldw	r2,132(sp)
  8058f4:	1405c83a 	sub	r2,r2,r16
  8058f8:	d8803315 	stw	r2,204(sp)
  8058fc:	b47ef326 	beq	r22,r17,8054cc <__alt_mem_onchip_mem+0xff7854cc>
  805900:	dd802617 	ldw	r22,152(sp)
  805904:	003f1106 	br	80554c <__alt_mem_onchip_mem+0xff78554c>
  805908:	d9c02785 	stb	r7,158(sp)
  80590c:	00390406 	br	803d20 <__alt_mem_onchip_mem+0xff783d20>
  805910:	d9c02785 	stb	r7,158(sp)
  805914:	0038d306 	br	803c64 <__alt_mem_onchip_mem+0xff783c64>
  805918:	d9c02785 	stb	r7,158(sp)
  80591c:	003a6106 	br	8042a4 <__alt_mem_onchip_mem+0xff7842a4>
  805920:	d9c02785 	stb	r7,158(sp)
  805924:	003af806 	br	804508 <__alt_mem_onchip_mem+0xff784508>
  805928:	0005883a 	mov	r2,zero
  80592c:	003d7e06 	br	804f28 <__alt_mem_onchip_mem+0xff784f28>
  805930:	d8802344 	addi	r2,sp,141
  805934:	003f1306 	br	805584 <__alt_mem_onchip_mem+0xff785584>
  805938:	d9c02785 	stb	r7,158(sp)
  80593c:	00392306 	br	803dcc <__alt_mem_onchip_mem+0xff783dcc>
  805940:	d9c02785 	stb	r7,158(sp)
  805944:	003aa906 	br	8043ec <__alt_mem_onchip_mem+0xff7843ec>
  805948:	d9c02785 	stb	r7,158(sp)
  80594c:	003a3d06 	br	804244 <__alt_mem_onchip_mem+0xff784244>
  805950:	d9c02785 	stb	r7,158(sp)
  805954:	003aca06 	br	804480 <__alt_mem_onchip_mem+0xff784480>

00805958 <__vfprintf_internal>:
  805958:	00802074 	movhi	r2,129
  80595c:	1098df04 	addi	r2,r2,25468
  805960:	300f883a 	mov	r7,r6
  805964:	280d883a 	mov	r6,r5
  805968:	200b883a 	mov	r5,r4
  80596c:	11000017 	ldw	r4,0(r2)
  805970:	08037601 	jmpi	803760 <___vfprintf_internal_r>

00805974 <__sbprintf>:
  805974:	2880030b 	ldhu	r2,12(r5)
  805978:	2ac01917 	ldw	r11,100(r5)
  80597c:	2a80038b 	ldhu	r10,14(r5)
  805980:	2a400717 	ldw	r9,28(r5)
  805984:	2a000917 	ldw	r8,36(r5)
  805988:	defee204 	addi	sp,sp,-1144
  80598c:	00c10004 	movi	r3,1024
  805990:	dc011a15 	stw	r16,1128(sp)
  805994:	10bfff4c 	andi	r2,r2,65533
  805998:	2821883a 	mov	r16,r5
  80599c:	d8cb883a 	add	r5,sp,r3
  8059a0:	dc811c15 	stw	r18,1136(sp)
  8059a4:	dc411b15 	stw	r17,1132(sp)
  8059a8:	dfc11d15 	stw	ra,1140(sp)
  8059ac:	2025883a 	mov	r18,r4
  8059b0:	d881030d 	sth	r2,1036(sp)
  8059b4:	dac11915 	stw	r11,1124(sp)
  8059b8:	da81038d 	sth	r10,1038(sp)
  8059bc:	da410715 	stw	r9,1052(sp)
  8059c0:	da010915 	stw	r8,1060(sp)
  8059c4:	dec10015 	stw	sp,1024(sp)
  8059c8:	dec10415 	stw	sp,1040(sp)
  8059cc:	d8c10215 	stw	r3,1032(sp)
  8059d0:	d8c10515 	stw	r3,1044(sp)
  8059d4:	d8010615 	stw	zero,1048(sp)
  8059d8:	08037600 	call	803760 <___vfprintf_internal_r>
  8059dc:	1023883a 	mov	r17,r2
  8059e0:	10000416 	blt	r2,zero,8059f4 <__sbprintf+0x80>
  8059e4:	d9410004 	addi	r5,sp,1024
  8059e8:	9009883a 	mov	r4,r18
  8059ec:	08076280 	call	807628 <_fflush_r>
  8059f0:	10000d1e 	bne	r2,zero,805a28 <__sbprintf+0xb4>
  8059f4:	d881030b 	ldhu	r2,1036(sp)
  8059f8:	1080100c 	andi	r2,r2,64
  8059fc:	10000326 	beq	r2,zero,805a0c <__sbprintf+0x98>
  805a00:	8080030b 	ldhu	r2,12(r16)
  805a04:	10801014 	ori	r2,r2,64
  805a08:	8080030d 	sth	r2,12(r16)
  805a0c:	8805883a 	mov	r2,r17
  805a10:	dfc11d17 	ldw	ra,1140(sp)
  805a14:	dc811c17 	ldw	r18,1136(sp)
  805a18:	dc411b17 	ldw	r17,1132(sp)
  805a1c:	dc011a17 	ldw	r16,1128(sp)
  805a20:	dec11e04 	addi	sp,sp,1144
  805a24:	f800283a 	ret
  805a28:	047fffc4 	movi	r17,-1
  805a2c:	003ff106 	br	8059f4 <__alt_mem_onchip_mem+0xff7859f4>

00805a30 <__swsetup_r>:
  805a30:	00802074 	movhi	r2,129
  805a34:	defffd04 	addi	sp,sp,-12
  805a38:	1098df04 	addi	r2,r2,25468
  805a3c:	dc400115 	stw	r17,4(sp)
  805a40:	2023883a 	mov	r17,r4
  805a44:	11000017 	ldw	r4,0(r2)
  805a48:	dc000015 	stw	r16,0(sp)
  805a4c:	dfc00215 	stw	ra,8(sp)
  805a50:	2821883a 	mov	r16,r5
  805a54:	20000226 	beq	r4,zero,805a60 <__swsetup_r+0x30>
  805a58:	20800e17 	ldw	r2,56(r4)
  805a5c:	10003126 	beq	r2,zero,805b24 <__swsetup_r+0xf4>
  805a60:	8080030b 	ldhu	r2,12(r16)
  805a64:	10c0020c 	andi	r3,r2,8
  805a68:	1009883a 	mov	r4,r2
  805a6c:	18000f26 	beq	r3,zero,805aac <__swsetup_r+0x7c>
  805a70:	80c00417 	ldw	r3,16(r16)
  805a74:	18001526 	beq	r3,zero,805acc <__swsetup_r+0x9c>
  805a78:	1100004c 	andi	r4,r2,1
  805a7c:	20001c1e 	bne	r4,zero,805af0 <__swsetup_r+0xc0>
  805a80:	1080008c 	andi	r2,r2,2
  805a84:	1000291e 	bne	r2,zero,805b2c <__swsetup_r+0xfc>
  805a88:	80800517 	ldw	r2,20(r16)
  805a8c:	80800215 	stw	r2,8(r16)
  805a90:	18001c26 	beq	r3,zero,805b04 <__swsetup_r+0xd4>
  805a94:	0005883a 	mov	r2,zero
  805a98:	dfc00217 	ldw	ra,8(sp)
  805a9c:	dc400117 	ldw	r17,4(sp)
  805aa0:	dc000017 	ldw	r16,0(sp)
  805aa4:	dec00304 	addi	sp,sp,12
  805aa8:	f800283a 	ret
  805aac:	2080040c 	andi	r2,r4,16
  805ab0:	10002e26 	beq	r2,zero,805b6c <__swsetup_r+0x13c>
  805ab4:	2080010c 	andi	r2,r4,4
  805ab8:	10001e1e 	bne	r2,zero,805b34 <__swsetup_r+0x104>
  805abc:	80c00417 	ldw	r3,16(r16)
  805ac0:	20800214 	ori	r2,r4,8
  805ac4:	8080030d 	sth	r2,12(r16)
  805ac8:	183feb1e 	bne	r3,zero,805a78 <__alt_mem_onchip_mem+0xff785a78>
  805acc:	1100a00c 	andi	r4,r2,640
  805ad0:	01408004 	movi	r5,512
  805ad4:	217fe826 	beq	r4,r5,805a78 <__alt_mem_onchip_mem+0xff785a78>
  805ad8:	800b883a 	mov	r5,r16
  805adc:	8809883a 	mov	r4,r17
  805ae0:	08085a80 	call	8085a8 <__smakebuf_r>
  805ae4:	8080030b 	ldhu	r2,12(r16)
  805ae8:	80c00417 	ldw	r3,16(r16)
  805aec:	003fe206 	br	805a78 <__alt_mem_onchip_mem+0xff785a78>
  805af0:	80800517 	ldw	r2,20(r16)
  805af4:	80000215 	stw	zero,8(r16)
  805af8:	0085c83a 	sub	r2,zero,r2
  805afc:	80800615 	stw	r2,24(r16)
  805b00:	183fe41e 	bne	r3,zero,805a94 <__alt_mem_onchip_mem+0xff785a94>
  805b04:	80c0030b 	ldhu	r3,12(r16)
  805b08:	0005883a 	mov	r2,zero
  805b0c:	1900200c 	andi	r4,r3,128
  805b10:	203fe126 	beq	r4,zero,805a98 <__alt_mem_onchip_mem+0xff785a98>
  805b14:	18c01014 	ori	r3,r3,64
  805b18:	80c0030d 	sth	r3,12(r16)
  805b1c:	00bfffc4 	movi	r2,-1
  805b20:	003fdd06 	br	805a98 <__alt_mem_onchip_mem+0xff785a98>
  805b24:	0807a040 	call	807a04 <__sinit>
  805b28:	003fcd06 	br	805a60 <__alt_mem_onchip_mem+0xff785a60>
  805b2c:	0005883a 	mov	r2,zero
  805b30:	003fd606 	br	805a8c <__alt_mem_onchip_mem+0xff785a8c>
  805b34:	81400c17 	ldw	r5,48(r16)
  805b38:	28000626 	beq	r5,zero,805b54 <__swsetup_r+0x124>
  805b3c:	80801004 	addi	r2,r16,64
  805b40:	28800326 	beq	r5,r2,805b50 <__swsetup_r+0x120>
  805b44:	8809883a 	mov	r4,r17
  805b48:	0807b780 	call	807b78 <_free_r>
  805b4c:	8100030b 	ldhu	r4,12(r16)
  805b50:	80000c15 	stw	zero,48(r16)
  805b54:	80c00417 	ldw	r3,16(r16)
  805b58:	00bff6c4 	movi	r2,-37
  805b5c:	1108703a 	and	r4,r2,r4
  805b60:	80000115 	stw	zero,4(r16)
  805b64:	80c00015 	stw	r3,0(r16)
  805b68:	003fd506 	br	805ac0 <__alt_mem_onchip_mem+0xff785ac0>
  805b6c:	00800244 	movi	r2,9
  805b70:	88800015 	stw	r2,0(r17)
  805b74:	20801014 	ori	r2,r4,64
  805b78:	8080030d 	sth	r2,12(r16)
  805b7c:	00bfffc4 	movi	r2,-1
  805b80:	003fc506 	br	805a98 <__alt_mem_onchip_mem+0xff785a98>

00805b84 <quorem>:
  805b84:	defff704 	addi	sp,sp,-36
  805b88:	dc800215 	stw	r18,8(sp)
  805b8c:	20800417 	ldw	r2,16(r4)
  805b90:	2c800417 	ldw	r18,16(r5)
  805b94:	dfc00815 	stw	ra,32(sp)
  805b98:	ddc00715 	stw	r23,28(sp)
  805b9c:	dd800615 	stw	r22,24(sp)
  805ba0:	dd400515 	stw	r21,20(sp)
  805ba4:	dd000415 	stw	r20,16(sp)
  805ba8:	dcc00315 	stw	r19,12(sp)
  805bac:	dc400115 	stw	r17,4(sp)
  805bb0:	dc000015 	stw	r16,0(sp)
  805bb4:	14807116 	blt	r2,r18,805d7c <quorem+0x1f8>
  805bb8:	94bfffc4 	addi	r18,r18,-1
  805bbc:	94ad883a 	add	r22,r18,r18
  805bc0:	b5ad883a 	add	r22,r22,r22
  805bc4:	2c400504 	addi	r17,r5,20
  805bc8:	8da9883a 	add	r20,r17,r22
  805bcc:	25400504 	addi	r21,r4,20
  805bd0:	282f883a 	mov	r23,r5
  805bd4:	adad883a 	add	r22,r21,r22
  805bd8:	a1400017 	ldw	r5,0(r20)
  805bdc:	2021883a 	mov	r16,r4
  805be0:	b1000017 	ldw	r4,0(r22)
  805be4:	29400044 	addi	r5,r5,1
  805be8:	080d7840 	call	80d784 <__udivsi3>
  805bec:	1027883a 	mov	r19,r2
  805bf0:	10002c26 	beq	r2,zero,805ca4 <quorem+0x120>
  805bf4:	a813883a 	mov	r9,r21
  805bf8:	880b883a 	mov	r5,r17
  805bfc:	0009883a 	mov	r4,zero
  805c00:	000d883a 	mov	r6,zero
  805c04:	2a000017 	ldw	r8,0(r5)
  805c08:	49c00017 	ldw	r7,0(r9)
  805c0c:	29400104 	addi	r5,r5,4
  805c10:	40bfffcc 	andi	r2,r8,65535
  805c14:	14c5383a 	mul	r2,r2,r19
  805c18:	4010d43a 	srli	r8,r8,16
  805c1c:	38ffffcc 	andi	r3,r7,65535
  805c20:	1105883a 	add	r2,r2,r4
  805c24:	1008d43a 	srli	r4,r2,16
  805c28:	44d1383a 	mul	r8,r8,r19
  805c2c:	198d883a 	add	r6,r3,r6
  805c30:	10ffffcc 	andi	r3,r2,65535
  805c34:	30c7c83a 	sub	r3,r6,r3
  805c38:	380ed43a 	srli	r7,r7,16
  805c3c:	4105883a 	add	r2,r8,r4
  805c40:	180dd43a 	srai	r6,r3,16
  805c44:	113fffcc 	andi	r4,r2,65535
  805c48:	390fc83a 	sub	r7,r7,r4
  805c4c:	398d883a 	add	r6,r7,r6
  805c50:	300e943a 	slli	r7,r6,16
  805c54:	18ffffcc 	andi	r3,r3,65535
  805c58:	1008d43a 	srli	r4,r2,16
  805c5c:	38ceb03a 	or	r7,r7,r3
  805c60:	49c00015 	stw	r7,0(r9)
  805c64:	300dd43a 	srai	r6,r6,16
  805c68:	4a400104 	addi	r9,r9,4
  805c6c:	a17fe52e 	bgeu	r20,r5,805c04 <__alt_mem_onchip_mem+0xff785c04>
  805c70:	b0800017 	ldw	r2,0(r22)
  805c74:	10000b1e 	bne	r2,zero,805ca4 <quorem+0x120>
  805c78:	b0bfff04 	addi	r2,r22,-4
  805c7c:	a880082e 	bgeu	r21,r2,805ca0 <quorem+0x11c>
  805c80:	b0ffff17 	ldw	r3,-4(r22)
  805c84:	18000326 	beq	r3,zero,805c94 <quorem+0x110>
  805c88:	00000506 	br	805ca0 <quorem+0x11c>
  805c8c:	10c00017 	ldw	r3,0(r2)
  805c90:	1800031e 	bne	r3,zero,805ca0 <quorem+0x11c>
  805c94:	10bfff04 	addi	r2,r2,-4
  805c98:	94bfffc4 	addi	r18,r18,-1
  805c9c:	a8bffb36 	bltu	r21,r2,805c8c <__alt_mem_onchip_mem+0xff785c8c>
  805ca0:	84800415 	stw	r18,16(r16)
  805ca4:	b80b883a 	mov	r5,r23
  805ca8:	8009883a 	mov	r4,r16
  805cac:	0809ce80 	call	809ce8 <__mcmp>
  805cb0:	10002616 	blt	r2,zero,805d4c <quorem+0x1c8>
  805cb4:	9cc00044 	addi	r19,r19,1
  805cb8:	a805883a 	mov	r2,r21
  805cbc:	000b883a 	mov	r5,zero
  805cc0:	11000017 	ldw	r4,0(r2)
  805cc4:	89800017 	ldw	r6,0(r17)
  805cc8:	10800104 	addi	r2,r2,4
  805ccc:	20ffffcc 	andi	r3,r4,65535
  805cd0:	194b883a 	add	r5,r3,r5
  805cd4:	30ffffcc 	andi	r3,r6,65535
  805cd8:	28c7c83a 	sub	r3,r5,r3
  805cdc:	300cd43a 	srli	r6,r6,16
  805ce0:	2008d43a 	srli	r4,r4,16
  805ce4:	180bd43a 	srai	r5,r3,16
  805ce8:	18ffffcc 	andi	r3,r3,65535
  805cec:	2189c83a 	sub	r4,r4,r6
  805cf0:	2149883a 	add	r4,r4,r5
  805cf4:	200c943a 	slli	r6,r4,16
  805cf8:	8c400104 	addi	r17,r17,4
  805cfc:	200bd43a 	srai	r5,r4,16
  805d00:	30c6b03a 	or	r3,r6,r3
  805d04:	10ffff15 	stw	r3,-4(r2)
  805d08:	a47fed2e 	bgeu	r20,r17,805cc0 <__alt_mem_onchip_mem+0xff785cc0>
  805d0c:	9485883a 	add	r2,r18,r18
  805d10:	1085883a 	add	r2,r2,r2
  805d14:	a887883a 	add	r3,r21,r2
  805d18:	18800017 	ldw	r2,0(r3)
  805d1c:	10000b1e 	bne	r2,zero,805d4c <quorem+0x1c8>
  805d20:	18bfff04 	addi	r2,r3,-4
  805d24:	a880082e 	bgeu	r21,r2,805d48 <quorem+0x1c4>
  805d28:	18ffff17 	ldw	r3,-4(r3)
  805d2c:	18000326 	beq	r3,zero,805d3c <quorem+0x1b8>
  805d30:	00000506 	br	805d48 <quorem+0x1c4>
  805d34:	10c00017 	ldw	r3,0(r2)
  805d38:	1800031e 	bne	r3,zero,805d48 <quorem+0x1c4>
  805d3c:	10bfff04 	addi	r2,r2,-4
  805d40:	94bfffc4 	addi	r18,r18,-1
  805d44:	a8bffb36 	bltu	r21,r2,805d34 <__alt_mem_onchip_mem+0xff785d34>
  805d48:	84800415 	stw	r18,16(r16)
  805d4c:	9805883a 	mov	r2,r19
  805d50:	dfc00817 	ldw	ra,32(sp)
  805d54:	ddc00717 	ldw	r23,28(sp)
  805d58:	dd800617 	ldw	r22,24(sp)
  805d5c:	dd400517 	ldw	r21,20(sp)
  805d60:	dd000417 	ldw	r20,16(sp)
  805d64:	dcc00317 	ldw	r19,12(sp)
  805d68:	dc800217 	ldw	r18,8(sp)
  805d6c:	dc400117 	ldw	r17,4(sp)
  805d70:	dc000017 	ldw	r16,0(sp)
  805d74:	dec00904 	addi	sp,sp,36
  805d78:	f800283a 	ret
  805d7c:	0005883a 	mov	r2,zero
  805d80:	003ff306 	br	805d50 <__alt_mem_onchip_mem+0xff785d50>

00805d84 <_dtoa_r>:
  805d84:	20801017 	ldw	r2,64(r4)
  805d88:	deffde04 	addi	sp,sp,-136
  805d8c:	df002015 	stw	fp,128(sp)
  805d90:	dcc01b15 	stw	r19,108(sp)
  805d94:	dc801a15 	stw	r18,104(sp)
  805d98:	dc401915 	stw	r17,100(sp)
  805d9c:	dc001815 	stw	r16,96(sp)
  805da0:	dfc02115 	stw	ra,132(sp)
  805da4:	ddc01f15 	stw	r23,124(sp)
  805da8:	dd801e15 	stw	r22,120(sp)
  805dac:	dd401d15 	stw	r21,116(sp)
  805db0:	dd001c15 	stw	r20,112(sp)
  805db4:	d9c00315 	stw	r7,12(sp)
  805db8:	2039883a 	mov	fp,r4
  805dbc:	3023883a 	mov	r17,r6
  805dc0:	2825883a 	mov	r18,r5
  805dc4:	dc002417 	ldw	r16,144(sp)
  805dc8:	3027883a 	mov	r19,r6
  805dcc:	10000826 	beq	r2,zero,805df0 <_dtoa_r+0x6c>
  805dd0:	21801117 	ldw	r6,68(r4)
  805dd4:	00c00044 	movi	r3,1
  805dd8:	100b883a 	mov	r5,r2
  805ddc:	1986983a 	sll	r3,r3,r6
  805de0:	11800115 	stw	r6,4(r2)
  805de4:	10c00215 	stw	r3,8(r2)
  805de8:	08094c80 	call	8094c8 <_Bfree>
  805dec:	e0001015 	stw	zero,64(fp)
  805df0:	88002e16 	blt	r17,zero,805eac <_dtoa_r+0x128>
  805df4:	80000015 	stw	zero,0(r16)
  805df8:	889ffc2c 	andhi	r2,r17,32752
  805dfc:	00dffc34 	movhi	r3,32752
  805e00:	10c01c26 	beq	r2,r3,805e74 <_dtoa_r+0xf0>
  805e04:	000d883a 	mov	r6,zero
  805e08:	000f883a 	mov	r7,zero
  805e0c:	9009883a 	mov	r4,r18
  805e10:	980b883a 	mov	r5,r19
  805e14:	080e9d40 	call	80e9d4 <__eqdf2>
  805e18:	10002b1e 	bne	r2,zero,805ec8 <_dtoa_r+0x144>
  805e1c:	d9c02317 	ldw	r7,140(sp)
  805e20:	00800044 	movi	r2,1
  805e24:	38800015 	stw	r2,0(r7)
  805e28:	d8802517 	ldw	r2,148(sp)
  805e2c:	10019e26 	beq	r2,zero,8064a8 <_dtoa_r+0x724>
  805e30:	d8c02517 	ldw	r3,148(sp)
  805e34:	00802074 	movhi	r2,129
  805e38:	10906244 	addi	r2,r2,16777
  805e3c:	18800015 	stw	r2,0(r3)
  805e40:	10bfffc4 	addi	r2,r2,-1
  805e44:	dfc02117 	ldw	ra,132(sp)
  805e48:	df002017 	ldw	fp,128(sp)
  805e4c:	ddc01f17 	ldw	r23,124(sp)
  805e50:	dd801e17 	ldw	r22,120(sp)
  805e54:	dd401d17 	ldw	r21,116(sp)
  805e58:	dd001c17 	ldw	r20,112(sp)
  805e5c:	dcc01b17 	ldw	r19,108(sp)
  805e60:	dc801a17 	ldw	r18,104(sp)
  805e64:	dc401917 	ldw	r17,100(sp)
  805e68:	dc001817 	ldw	r16,96(sp)
  805e6c:	dec02204 	addi	sp,sp,136
  805e70:	f800283a 	ret
  805e74:	d8c02317 	ldw	r3,140(sp)
  805e78:	0089c3c4 	movi	r2,9999
  805e7c:	18800015 	stw	r2,0(r3)
  805e80:	90017726 	beq	r18,zero,806460 <_dtoa_r+0x6dc>
  805e84:	00802074 	movhi	r2,129
  805e88:	10906e04 	addi	r2,r2,16824
  805e8c:	d9002517 	ldw	r4,148(sp)
  805e90:	203fec26 	beq	r4,zero,805e44 <__alt_mem_onchip_mem+0xff785e44>
  805e94:	10c000c7 	ldb	r3,3(r2)
  805e98:	1801781e 	bne	r3,zero,80647c <_dtoa_r+0x6f8>
  805e9c:	10c000c4 	addi	r3,r2,3
  805ea0:	d9802517 	ldw	r6,148(sp)
  805ea4:	30c00015 	stw	r3,0(r6)
  805ea8:	003fe606 	br	805e44 <__alt_mem_onchip_mem+0xff785e44>
  805eac:	04e00034 	movhi	r19,32768
  805eb0:	9cffffc4 	addi	r19,r19,-1
  805eb4:	00800044 	movi	r2,1
  805eb8:	8ce6703a 	and	r19,r17,r19
  805ebc:	80800015 	stw	r2,0(r16)
  805ec0:	9823883a 	mov	r17,r19
  805ec4:	003fcc06 	br	805df8 <__alt_mem_onchip_mem+0xff785df8>
  805ec8:	d8800204 	addi	r2,sp,8
  805ecc:	d8800015 	stw	r2,0(sp)
  805ed0:	d9c00104 	addi	r7,sp,4
  805ed4:	900b883a 	mov	r5,r18
  805ed8:	980d883a 	mov	r6,r19
  805edc:	e009883a 	mov	r4,fp
  805ee0:	8820d53a 	srli	r16,r17,20
  805ee4:	080a0b40 	call	80a0b4 <__d2b>
  805ee8:	d8800915 	stw	r2,36(sp)
  805eec:	8001651e 	bne	r16,zero,806484 <_dtoa_r+0x700>
  805ef0:	dd800217 	ldw	r22,8(sp)
  805ef4:	dc000117 	ldw	r16,4(sp)
  805ef8:	00800804 	movi	r2,32
  805efc:	b421883a 	add	r16,r22,r16
  805f00:	80c10c84 	addi	r3,r16,1074
  805f04:	10c2d10e 	bge	r2,r3,806a4c <_dtoa_r+0xcc8>
  805f08:	00801004 	movi	r2,64
  805f0c:	81010484 	addi	r4,r16,1042
  805f10:	10c7c83a 	sub	r3,r2,r3
  805f14:	9108d83a 	srl	r4,r18,r4
  805f18:	88e2983a 	sll	r17,r17,r3
  805f1c:	2448b03a 	or	r4,r4,r17
  805f20:	080fd9c0 	call	80fd9c <__floatunsidf>
  805f24:	017f8434 	movhi	r5,65040
  805f28:	01800044 	movi	r6,1
  805f2c:	1009883a 	mov	r4,r2
  805f30:	194b883a 	add	r5,r3,r5
  805f34:	843fffc4 	addi	r16,r16,-1
  805f38:	d9801115 	stw	r6,68(sp)
  805f3c:	000d883a 	mov	r6,zero
  805f40:	01cffe34 	movhi	r7,16376
  805f44:	080f3440 	call	80f344 <__subdf3>
  805f48:	0198dbf4 	movhi	r6,25455
  805f4c:	01cff4f4 	movhi	r7,16339
  805f50:	3190d844 	addi	r6,r6,17249
  805f54:	39e1e9c4 	addi	r7,r7,-30809
  805f58:	1009883a 	mov	r4,r2
  805f5c:	180b883a 	mov	r5,r3
  805f60:	080ec2c0 	call	80ec2c <__muldf3>
  805f64:	01a2d874 	movhi	r6,35681
  805f68:	01cff1f4 	movhi	r7,16327
  805f6c:	31b22cc4 	addi	r6,r6,-14157
  805f70:	39e28a04 	addi	r7,r7,-30168
  805f74:	180b883a 	mov	r5,r3
  805f78:	1009883a 	mov	r4,r2
  805f7c:	080d8400 	call	80d840 <__adddf3>
  805f80:	8009883a 	mov	r4,r16
  805f84:	1029883a 	mov	r20,r2
  805f88:	1823883a 	mov	r17,r3
  805f8c:	080fcc00 	call	80fcc0 <__floatsidf>
  805f90:	019427f4 	movhi	r6,20639
  805f94:	01cff4f4 	movhi	r7,16339
  805f98:	319e7ec4 	addi	r6,r6,31227
  805f9c:	39d104c4 	addi	r7,r7,17427
  805fa0:	1009883a 	mov	r4,r2
  805fa4:	180b883a 	mov	r5,r3
  805fa8:	080ec2c0 	call	80ec2c <__muldf3>
  805fac:	100d883a 	mov	r6,r2
  805fb0:	180f883a 	mov	r7,r3
  805fb4:	a009883a 	mov	r4,r20
  805fb8:	880b883a 	mov	r5,r17
  805fbc:	080d8400 	call	80d840 <__adddf3>
  805fc0:	1009883a 	mov	r4,r2
  805fc4:	180b883a 	mov	r5,r3
  805fc8:	1029883a 	mov	r20,r2
  805fcc:	1823883a 	mov	r17,r3
  805fd0:	080fc400 	call	80fc40 <__fixdfsi>
  805fd4:	000d883a 	mov	r6,zero
  805fd8:	000f883a 	mov	r7,zero
  805fdc:	a009883a 	mov	r4,r20
  805fe0:	880b883a 	mov	r5,r17
  805fe4:	d8800515 	stw	r2,20(sp)
  805fe8:	080eb380 	call	80eb38 <__ledf2>
  805fec:	10028716 	blt	r2,zero,806a0c <_dtoa_r+0xc88>
  805ff0:	d8c00517 	ldw	r3,20(sp)
  805ff4:	00800584 	movi	r2,22
  805ff8:	10c27536 	bltu	r2,r3,8069d0 <_dtoa_r+0xc4c>
  805ffc:	180490fa 	slli	r2,r3,3
  806000:	00c02074 	movhi	r3,129
  806004:	18d08904 	addi	r3,r3,16932
  806008:	1885883a 	add	r2,r3,r2
  80600c:	11000017 	ldw	r4,0(r2)
  806010:	11400117 	ldw	r5,4(r2)
  806014:	900d883a 	mov	r6,r18
  806018:	980f883a 	mov	r7,r19
  80601c:	080ea5c0 	call	80ea5c <__gedf2>
  806020:	00828d0e 	bge	zero,r2,806a58 <_dtoa_r+0xcd4>
  806024:	d9000517 	ldw	r4,20(sp)
  806028:	d8000e15 	stw	zero,56(sp)
  80602c:	213fffc4 	addi	r4,r4,-1
  806030:	d9000515 	stw	r4,20(sp)
  806034:	b42dc83a 	sub	r22,r22,r16
  806038:	b5bfffc4 	addi	r22,r22,-1
  80603c:	b0026f16 	blt	r22,zero,8069fc <_dtoa_r+0xc78>
  806040:	d8000815 	stw	zero,32(sp)
  806044:	d9c00517 	ldw	r7,20(sp)
  806048:	38026416 	blt	r7,zero,8069dc <_dtoa_r+0xc58>
  80604c:	b1ed883a 	add	r22,r22,r7
  806050:	d9c00d15 	stw	r7,52(sp)
  806054:	d8000a15 	stw	zero,40(sp)
  806058:	d9800317 	ldw	r6,12(sp)
  80605c:	00800244 	movi	r2,9
  806060:	11811436 	bltu	r2,r6,8064b4 <_dtoa_r+0x730>
  806064:	00800144 	movi	r2,5
  806068:	1184e10e 	bge	r2,r6,8073f0 <_dtoa_r+0x166c>
  80606c:	31bfff04 	addi	r6,r6,-4
  806070:	d9800315 	stw	r6,12(sp)
  806074:	0023883a 	mov	r17,zero
  806078:	d9800317 	ldw	r6,12(sp)
  80607c:	008000c4 	movi	r2,3
  806080:	30836726 	beq	r6,r2,806e20 <_dtoa_r+0x109c>
  806084:	1183410e 	bge	r2,r6,806d8c <_dtoa_r+0x1008>
  806088:	d9c00317 	ldw	r7,12(sp)
  80608c:	00800104 	movi	r2,4
  806090:	38827c26 	beq	r7,r2,806a84 <_dtoa_r+0xd00>
  806094:	00800144 	movi	r2,5
  806098:	3884c41e 	bne	r7,r2,8073ac <_dtoa_r+0x1628>
  80609c:	00800044 	movi	r2,1
  8060a0:	d8800b15 	stw	r2,44(sp)
  8060a4:	d8c00517 	ldw	r3,20(sp)
  8060a8:	d9002217 	ldw	r4,136(sp)
  8060ac:	1907883a 	add	r3,r3,r4
  8060b0:	19800044 	addi	r6,r3,1
  8060b4:	d8c00c15 	stw	r3,48(sp)
  8060b8:	d9800615 	stw	r6,24(sp)
  8060bc:	0183a40e 	bge	zero,r6,806f50 <_dtoa_r+0x11cc>
  8060c0:	d9800617 	ldw	r6,24(sp)
  8060c4:	3021883a 	mov	r16,r6
  8060c8:	e0001115 	stw	zero,68(fp)
  8060cc:	008005c4 	movi	r2,23
  8060d0:	1184c92e 	bgeu	r2,r6,8073f8 <_dtoa_r+0x1674>
  8060d4:	00c00044 	movi	r3,1
  8060d8:	00800104 	movi	r2,4
  8060dc:	1085883a 	add	r2,r2,r2
  8060e0:	11000504 	addi	r4,r2,20
  8060e4:	180b883a 	mov	r5,r3
  8060e8:	18c00044 	addi	r3,r3,1
  8060ec:	313ffb2e 	bgeu	r6,r4,8060dc <__alt_mem_onchip_mem+0xff7860dc>
  8060f0:	e1401115 	stw	r5,68(fp)
  8060f4:	e009883a 	mov	r4,fp
  8060f8:	08094200 	call	809420 <_Balloc>
  8060fc:	d8800715 	stw	r2,28(sp)
  806100:	e0801015 	stw	r2,64(fp)
  806104:	00800384 	movi	r2,14
  806108:	1400f736 	bltu	r2,r16,8064e8 <_dtoa_r+0x764>
  80610c:	8800f626 	beq	r17,zero,8064e8 <_dtoa_r+0x764>
  806110:	d9c00517 	ldw	r7,20(sp)
  806114:	01c39a0e 	bge	zero,r7,806f80 <_dtoa_r+0x11fc>
  806118:	388003cc 	andi	r2,r7,15
  80611c:	100490fa 	slli	r2,r2,3
  806120:	382bd13a 	srai	r21,r7,4
  806124:	00c02074 	movhi	r3,129
  806128:	18d08904 	addi	r3,r3,16932
  80612c:	1885883a 	add	r2,r3,r2
  806130:	a8c0040c 	andi	r3,r21,16
  806134:	12400017 	ldw	r9,0(r2)
  806138:	12000117 	ldw	r8,4(r2)
  80613c:	18037926 	beq	r3,zero,806f24 <_dtoa_r+0x11a0>
  806140:	00802074 	movhi	r2,129
  806144:	10907f04 	addi	r2,r2,16892
  806148:	11800817 	ldw	r6,32(r2)
  80614c:	11c00917 	ldw	r7,36(r2)
  806150:	9009883a 	mov	r4,r18
  806154:	980b883a 	mov	r5,r19
  806158:	da001715 	stw	r8,92(sp)
  80615c:	da401615 	stw	r9,88(sp)
  806160:	080e0ec0 	call	80e0ec <__divdf3>
  806164:	da001717 	ldw	r8,92(sp)
  806168:	da401617 	ldw	r9,88(sp)
  80616c:	ad4003cc 	andi	r21,r21,15
  806170:	040000c4 	movi	r16,3
  806174:	1023883a 	mov	r17,r2
  806178:	1829883a 	mov	r20,r3
  80617c:	a8001126 	beq	r21,zero,8061c4 <_dtoa_r+0x440>
  806180:	05c02074 	movhi	r23,129
  806184:	bdd07f04 	addi	r23,r23,16892
  806188:	4805883a 	mov	r2,r9
  80618c:	4007883a 	mov	r3,r8
  806190:	a980004c 	andi	r6,r21,1
  806194:	1009883a 	mov	r4,r2
  806198:	a82bd07a 	srai	r21,r21,1
  80619c:	180b883a 	mov	r5,r3
  8061a0:	30000426 	beq	r6,zero,8061b4 <_dtoa_r+0x430>
  8061a4:	b9800017 	ldw	r6,0(r23)
  8061a8:	b9c00117 	ldw	r7,4(r23)
  8061ac:	84000044 	addi	r16,r16,1
  8061b0:	080ec2c0 	call	80ec2c <__muldf3>
  8061b4:	bdc00204 	addi	r23,r23,8
  8061b8:	a83ff51e 	bne	r21,zero,806190 <__alt_mem_onchip_mem+0xff786190>
  8061bc:	1013883a 	mov	r9,r2
  8061c0:	1811883a 	mov	r8,r3
  8061c4:	480d883a 	mov	r6,r9
  8061c8:	400f883a 	mov	r7,r8
  8061cc:	8809883a 	mov	r4,r17
  8061d0:	a00b883a 	mov	r5,r20
  8061d4:	080e0ec0 	call	80e0ec <__divdf3>
  8061d8:	d8800f15 	stw	r2,60(sp)
  8061dc:	d8c01015 	stw	r3,64(sp)
  8061e0:	d8c00e17 	ldw	r3,56(sp)
  8061e4:	18000626 	beq	r3,zero,806200 <_dtoa_r+0x47c>
  8061e8:	d9000f17 	ldw	r4,60(sp)
  8061ec:	d9401017 	ldw	r5,64(sp)
  8061f0:	000d883a 	mov	r6,zero
  8061f4:	01cffc34 	movhi	r7,16368
  8061f8:	080eb380 	call	80eb38 <__ledf2>
  8061fc:	10040b16 	blt	r2,zero,80722c <_dtoa_r+0x14a8>
  806200:	8009883a 	mov	r4,r16
  806204:	080fcc00 	call	80fcc0 <__floatsidf>
  806208:	d9800f17 	ldw	r6,60(sp)
  80620c:	d9c01017 	ldw	r7,64(sp)
  806210:	1009883a 	mov	r4,r2
  806214:	180b883a 	mov	r5,r3
  806218:	080ec2c0 	call	80ec2c <__muldf3>
  80621c:	000d883a 	mov	r6,zero
  806220:	01d00734 	movhi	r7,16412
  806224:	1009883a 	mov	r4,r2
  806228:	180b883a 	mov	r5,r3
  80622c:	080d8400 	call	80d840 <__adddf3>
  806230:	1021883a 	mov	r16,r2
  806234:	d8800617 	ldw	r2,24(sp)
  806238:	047f3034 	movhi	r17,64704
  80623c:	1c63883a 	add	r17,r3,r17
  806240:	10031826 	beq	r2,zero,806ea4 <_dtoa_r+0x1120>
  806244:	d8c00517 	ldw	r3,20(sp)
  806248:	db000617 	ldw	r12,24(sp)
  80624c:	d8c01315 	stw	r3,76(sp)
  806250:	d9000b17 	ldw	r4,44(sp)
  806254:	20038f26 	beq	r4,zero,807094 <_dtoa_r+0x1310>
  806258:	60bfffc4 	addi	r2,r12,-1
  80625c:	100490fa 	slli	r2,r2,3
  806260:	00c02074 	movhi	r3,129
  806264:	18d08904 	addi	r3,r3,16932
  806268:	1885883a 	add	r2,r3,r2
  80626c:	11800017 	ldw	r6,0(r2)
  806270:	11c00117 	ldw	r7,4(r2)
  806274:	d8800717 	ldw	r2,28(sp)
  806278:	0009883a 	mov	r4,zero
  80627c:	014ff834 	movhi	r5,16352
  806280:	db001615 	stw	r12,88(sp)
  806284:	15c00044 	addi	r23,r2,1
  806288:	080e0ec0 	call	80e0ec <__divdf3>
  80628c:	800d883a 	mov	r6,r16
  806290:	880f883a 	mov	r7,r17
  806294:	1009883a 	mov	r4,r2
  806298:	180b883a 	mov	r5,r3
  80629c:	080f3440 	call	80f344 <__subdf3>
  8062a0:	d9401017 	ldw	r5,64(sp)
  8062a4:	d9000f17 	ldw	r4,60(sp)
  8062a8:	102b883a 	mov	r21,r2
  8062ac:	d8c01215 	stw	r3,72(sp)
  8062b0:	080fc400 	call	80fc40 <__fixdfsi>
  8062b4:	1009883a 	mov	r4,r2
  8062b8:	1029883a 	mov	r20,r2
  8062bc:	080fcc00 	call	80fcc0 <__floatsidf>
  8062c0:	d9000f17 	ldw	r4,60(sp)
  8062c4:	d9401017 	ldw	r5,64(sp)
  8062c8:	100d883a 	mov	r6,r2
  8062cc:	180f883a 	mov	r7,r3
  8062d0:	080f3440 	call	80f344 <__subdf3>
  8062d4:	1823883a 	mov	r17,r3
  8062d8:	d8c00717 	ldw	r3,28(sp)
  8062dc:	d9401217 	ldw	r5,72(sp)
  8062e0:	a2000c04 	addi	r8,r20,48
  8062e4:	1021883a 	mov	r16,r2
  8062e8:	1a000005 	stb	r8,0(r3)
  8062ec:	800d883a 	mov	r6,r16
  8062f0:	880f883a 	mov	r7,r17
  8062f4:	a809883a 	mov	r4,r21
  8062f8:	4029883a 	mov	r20,r8
  8062fc:	080ea5c0 	call	80ea5c <__gedf2>
  806300:	00841d16 	blt	zero,r2,807378 <_dtoa_r+0x15f4>
  806304:	800d883a 	mov	r6,r16
  806308:	880f883a 	mov	r7,r17
  80630c:	0009883a 	mov	r4,zero
  806310:	014ffc34 	movhi	r5,16368
  806314:	080f3440 	call	80f344 <__subdf3>
  806318:	d9401217 	ldw	r5,72(sp)
  80631c:	100d883a 	mov	r6,r2
  806320:	180f883a 	mov	r7,r3
  806324:	a809883a 	mov	r4,r21
  806328:	080ea5c0 	call	80ea5c <__gedf2>
  80632c:	db001617 	ldw	r12,88(sp)
  806330:	00840e16 	blt	zero,r2,80736c <_dtoa_r+0x15e8>
  806334:	00800044 	movi	r2,1
  806338:	13006b0e 	bge	r2,r12,8064e8 <_dtoa_r+0x764>
  80633c:	d9000717 	ldw	r4,28(sp)
  806340:	dd800f15 	stw	r22,60(sp)
  806344:	dcc01015 	stw	r19,64(sp)
  806348:	2319883a 	add	r12,r4,r12
  80634c:	dcc01217 	ldw	r19,72(sp)
  806350:	602d883a 	mov	r22,r12
  806354:	dc801215 	stw	r18,72(sp)
  806358:	b825883a 	mov	r18,r23
  80635c:	00000906 	br	806384 <_dtoa_r+0x600>
  806360:	080f3440 	call	80f344 <__subdf3>
  806364:	a80d883a 	mov	r6,r21
  806368:	980f883a 	mov	r7,r19
  80636c:	1009883a 	mov	r4,r2
  806370:	180b883a 	mov	r5,r3
  806374:	080eb380 	call	80eb38 <__ledf2>
  806378:	1003e816 	blt	r2,zero,80731c <_dtoa_r+0x1598>
  80637c:	b825883a 	mov	r18,r23
  806380:	bd83e926 	beq	r23,r22,807328 <_dtoa_r+0x15a4>
  806384:	a809883a 	mov	r4,r21
  806388:	980b883a 	mov	r5,r19
  80638c:	000d883a 	mov	r6,zero
  806390:	01d00934 	movhi	r7,16420
  806394:	080ec2c0 	call	80ec2c <__muldf3>
  806398:	000d883a 	mov	r6,zero
  80639c:	01d00934 	movhi	r7,16420
  8063a0:	8009883a 	mov	r4,r16
  8063a4:	880b883a 	mov	r5,r17
  8063a8:	102b883a 	mov	r21,r2
  8063ac:	1827883a 	mov	r19,r3
  8063b0:	080ec2c0 	call	80ec2c <__muldf3>
  8063b4:	180b883a 	mov	r5,r3
  8063b8:	1009883a 	mov	r4,r2
  8063bc:	1821883a 	mov	r16,r3
  8063c0:	1023883a 	mov	r17,r2
  8063c4:	080fc400 	call	80fc40 <__fixdfsi>
  8063c8:	1009883a 	mov	r4,r2
  8063cc:	1029883a 	mov	r20,r2
  8063d0:	080fcc00 	call	80fcc0 <__floatsidf>
  8063d4:	8809883a 	mov	r4,r17
  8063d8:	800b883a 	mov	r5,r16
  8063dc:	100d883a 	mov	r6,r2
  8063e0:	180f883a 	mov	r7,r3
  8063e4:	080f3440 	call	80f344 <__subdf3>
  8063e8:	a5000c04 	addi	r20,r20,48
  8063ec:	a80d883a 	mov	r6,r21
  8063f0:	980f883a 	mov	r7,r19
  8063f4:	1009883a 	mov	r4,r2
  8063f8:	180b883a 	mov	r5,r3
  8063fc:	95000005 	stb	r20,0(r18)
  806400:	1021883a 	mov	r16,r2
  806404:	1823883a 	mov	r17,r3
  806408:	080eb380 	call	80eb38 <__ledf2>
  80640c:	bdc00044 	addi	r23,r23,1
  806410:	800d883a 	mov	r6,r16
  806414:	880f883a 	mov	r7,r17
  806418:	0009883a 	mov	r4,zero
  80641c:	014ffc34 	movhi	r5,16368
  806420:	103fcf0e 	bge	r2,zero,806360 <__alt_mem_onchip_mem+0xff786360>
  806424:	d8c01317 	ldw	r3,76(sp)
  806428:	d8c00515 	stw	r3,20(sp)
  80642c:	d9400917 	ldw	r5,36(sp)
  806430:	e009883a 	mov	r4,fp
  806434:	08094c80 	call	8094c8 <_Bfree>
  806438:	d9000517 	ldw	r4,20(sp)
  80643c:	d9802317 	ldw	r6,140(sp)
  806440:	d9c02517 	ldw	r7,148(sp)
  806444:	b8000005 	stb	zero,0(r23)
  806448:	20800044 	addi	r2,r4,1
  80644c:	30800015 	stw	r2,0(r6)
  806450:	3802aa26 	beq	r7,zero,806efc <_dtoa_r+0x1178>
  806454:	3dc00015 	stw	r23,0(r7)
  806458:	d8800717 	ldw	r2,28(sp)
  80645c:	003e7906 	br	805e44 <__alt_mem_onchip_mem+0xff785e44>
  806460:	00800434 	movhi	r2,16
  806464:	10bfffc4 	addi	r2,r2,-1
  806468:	88a2703a 	and	r17,r17,r2
  80646c:	883e851e 	bne	r17,zero,805e84 <__alt_mem_onchip_mem+0xff785e84>
  806470:	00802074 	movhi	r2,129
  806474:	10906b04 	addi	r2,r2,16812
  806478:	003e8406 	br	805e8c <__alt_mem_onchip_mem+0xff785e8c>
  80647c:	10c00204 	addi	r3,r2,8
  806480:	003e8706 	br	805ea0 <__alt_mem_onchip_mem+0xff785ea0>
  806484:	01400434 	movhi	r5,16
  806488:	297fffc4 	addi	r5,r5,-1
  80648c:	994a703a 	and	r5,r19,r5
  806490:	9009883a 	mov	r4,r18
  806494:	843f0044 	addi	r16,r16,-1023
  806498:	294ffc34 	orhi	r5,r5,16368
  80649c:	dd800217 	ldw	r22,8(sp)
  8064a0:	d8001115 	stw	zero,68(sp)
  8064a4:	003ea506 	br	805f3c <__alt_mem_onchip_mem+0xff785f3c>
  8064a8:	00802074 	movhi	r2,129
  8064ac:	10906204 	addi	r2,r2,16776
  8064b0:	003e6406 	br	805e44 <__alt_mem_onchip_mem+0xff785e44>
  8064b4:	e0001115 	stw	zero,68(fp)
  8064b8:	000b883a 	mov	r5,zero
  8064bc:	e009883a 	mov	r4,fp
  8064c0:	08094200 	call	809420 <_Balloc>
  8064c4:	01bfffc4 	movi	r6,-1
  8064c8:	01c00044 	movi	r7,1
  8064cc:	d8800715 	stw	r2,28(sp)
  8064d0:	d9800c15 	stw	r6,48(sp)
  8064d4:	e0801015 	stw	r2,64(fp)
  8064d8:	d8000315 	stw	zero,12(sp)
  8064dc:	d9c00b15 	stw	r7,44(sp)
  8064e0:	d9800615 	stw	r6,24(sp)
  8064e4:	d8002215 	stw	zero,136(sp)
  8064e8:	d8800117 	ldw	r2,4(sp)
  8064ec:	10008916 	blt	r2,zero,806714 <_dtoa_r+0x990>
  8064f0:	d9000517 	ldw	r4,20(sp)
  8064f4:	00c00384 	movi	r3,14
  8064f8:	19008616 	blt	r3,r4,806714 <_dtoa_r+0x990>
  8064fc:	200490fa 	slli	r2,r4,3
  806500:	00c02074 	movhi	r3,129
  806504:	d9802217 	ldw	r6,136(sp)
  806508:	18d08904 	addi	r3,r3,16932
  80650c:	1885883a 	add	r2,r3,r2
  806510:	14000017 	ldw	r16,0(r2)
  806514:	14400117 	ldw	r17,4(r2)
  806518:	30016316 	blt	r6,zero,806aa8 <_dtoa_r+0xd24>
  80651c:	800d883a 	mov	r6,r16
  806520:	880f883a 	mov	r7,r17
  806524:	9009883a 	mov	r4,r18
  806528:	980b883a 	mov	r5,r19
  80652c:	080e0ec0 	call	80e0ec <__divdf3>
  806530:	180b883a 	mov	r5,r3
  806534:	1009883a 	mov	r4,r2
  806538:	080fc400 	call	80fc40 <__fixdfsi>
  80653c:	1009883a 	mov	r4,r2
  806540:	102b883a 	mov	r21,r2
  806544:	080fcc00 	call	80fcc0 <__floatsidf>
  806548:	800d883a 	mov	r6,r16
  80654c:	880f883a 	mov	r7,r17
  806550:	1009883a 	mov	r4,r2
  806554:	180b883a 	mov	r5,r3
  806558:	080ec2c0 	call	80ec2c <__muldf3>
  80655c:	100d883a 	mov	r6,r2
  806560:	180f883a 	mov	r7,r3
  806564:	9009883a 	mov	r4,r18
  806568:	980b883a 	mov	r5,r19
  80656c:	080f3440 	call	80f344 <__subdf3>
  806570:	d9c00717 	ldw	r7,28(sp)
  806574:	1009883a 	mov	r4,r2
  806578:	a8800c04 	addi	r2,r21,48
  80657c:	38800005 	stb	r2,0(r7)
  806580:	3dc00044 	addi	r23,r7,1
  806584:	d9c00617 	ldw	r7,24(sp)
  806588:	01800044 	movi	r6,1
  80658c:	180b883a 	mov	r5,r3
  806590:	2005883a 	mov	r2,r4
  806594:	39803826 	beq	r7,r6,806678 <_dtoa_r+0x8f4>
  806598:	000d883a 	mov	r6,zero
  80659c:	01d00934 	movhi	r7,16420
  8065a0:	080ec2c0 	call	80ec2c <__muldf3>
  8065a4:	000d883a 	mov	r6,zero
  8065a8:	000f883a 	mov	r7,zero
  8065ac:	1009883a 	mov	r4,r2
  8065b0:	180b883a 	mov	r5,r3
  8065b4:	1025883a 	mov	r18,r2
  8065b8:	1827883a 	mov	r19,r3
  8065bc:	080e9d40 	call	80e9d4 <__eqdf2>
  8065c0:	103f9a26 	beq	r2,zero,80642c <__alt_mem_onchip_mem+0xff78642c>
  8065c4:	d9c00617 	ldw	r7,24(sp)
  8065c8:	d8c00717 	ldw	r3,28(sp)
  8065cc:	b829883a 	mov	r20,r23
  8065d0:	38bfffc4 	addi	r2,r7,-1
  8065d4:	18ad883a 	add	r22,r3,r2
  8065d8:	00000a06 	br	806604 <_dtoa_r+0x880>
  8065dc:	080ec2c0 	call	80ec2c <__muldf3>
  8065e0:	000d883a 	mov	r6,zero
  8065e4:	000f883a 	mov	r7,zero
  8065e8:	1009883a 	mov	r4,r2
  8065ec:	180b883a 	mov	r5,r3
  8065f0:	1025883a 	mov	r18,r2
  8065f4:	1827883a 	mov	r19,r3
  8065f8:	b829883a 	mov	r20,r23
  8065fc:	080e9d40 	call	80e9d4 <__eqdf2>
  806600:	103f8a26 	beq	r2,zero,80642c <__alt_mem_onchip_mem+0xff78642c>
  806604:	800d883a 	mov	r6,r16
  806608:	880f883a 	mov	r7,r17
  80660c:	9009883a 	mov	r4,r18
  806610:	980b883a 	mov	r5,r19
  806614:	080e0ec0 	call	80e0ec <__divdf3>
  806618:	180b883a 	mov	r5,r3
  80661c:	1009883a 	mov	r4,r2
  806620:	080fc400 	call	80fc40 <__fixdfsi>
  806624:	1009883a 	mov	r4,r2
  806628:	102b883a 	mov	r21,r2
  80662c:	080fcc00 	call	80fcc0 <__floatsidf>
  806630:	800d883a 	mov	r6,r16
  806634:	880f883a 	mov	r7,r17
  806638:	1009883a 	mov	r4,r2
  80663c:	180b883a 	mov	r5,r3
  806640:	080ec2c0 	call	80ec2c <__muldf3>
  806644:	100d883a 	mov	r6,r2
  806648:	180f883a 	mov	r7,r3
  80664c:	9009883a 	mov	r4,r18
  806650:	980b883a 	mov	r5,r19
  806654:	080f3440 	call	80f344 <__subdf3>
  806658:	aa000c04 	addi	r8,r21,48
  80665c:	a2000005 	stb	r8,0(r20)
  806660:	000d883a 	mov	r6,zero
  806664:	01d00934 	movhi	r7,16420
  806668:	1009883a 	mov	r4,r2
  80666c:	180b883a 	mov	r5,r3
  806670:	a5c00044 	addi	r23,r20,1
  806674:	b53fd91e 	bne	r22,r20,8065dc <__alt_mem_onchip_mem+0xff7865dc>
  806678:	100d883a 	mov	r6,r2
  80667c:	180f883a 	mov	r7,r3
  806680:	1009883a 	mov	r4,r2
  806684:	180b883a 	mov	r5,r3
  806688:	080d8400 	call	80d840 <__adddf3>
  80668c:	100d883a 	mov	r6,r2
  806690:	180f883a 	mov	r7,r3
  806694:	8009883a 	mov	r4,r16
  806698:	880b883a 	mov	r5,r17
  80669c:	1027883a 	mov	r19,r2
  8066a0:	1825883a 	mov	r18,r3
  8066a4:	080eb380 	call	80eb38 <__ledf2>
  8066a8:	10000816 	blt	r2,zero,8066cc <_dtoa_r+0x948>
  8066ac:	980d883a 	mov	r6,r19
  8066b0:	900f883a 	mov	r7,r18
  8066b4:	8009883a 	mov	r4,r16
  8066b8:	880b883a 	mov	r5,r17
  8066bc:	080e9d40 	call	80e9d4 <__eqdf2>
  8066c0:	103f5a1e 	bne	r2,zero,80642c <__alt_mem_onchip_mem+0xff78642c>
  8066c4:	ad40004c 	andi	r21,r21,1
  8066c8:	a83f5826 	beq	r21,zero,80642c <__alt_mem_onchip_mem+0xff78642c>
  8066cc:	bd3fffc3 	ldbu	r20,-1(r23)
  8066d0:	b8bfffc4 	addi	r2,r23,-1
  8066d4:	1007883a 	mov	r3,r2
  8066d8:	01400e44 	movi	r5,57
  8066dc:	d9800717 	ldw	r6,28(sp)
  8066e0:	00000506 	br	8066f8 <_dtoa_r+0x974>
  8066e4:	18ffffc4 	addi	r3,r3,-1
  8066e8:	11824726 	beq	r2,r6,807008 <_dtoa_r+0x1284>
  8066ec:	1d000003 	ldbu	r20,0(r3)
  8066f0:	102f883a 	mov	r23,r2
  8066f4:	10bfffc4 	addi	r2,r2,-1
  8066f8:	a1003fcc 	andi	r4,r20,255
  8066fc:	2100201c 	xori	r4,r4,128
  806700:	213fe004 	addi	r4,r4,-128
  806704:	217ff726 	beq	r4,r5,8066e4 <__alt_mem_onchip_mem+0xff7866e4>
  806708:	a2000044 	addi	r8,r20,1
  80670c:	12000005 	stb	r8,0(r2)
  806710:	003f4606 	br	80642c <__alt_mem_onchip_mem+0xff78642c>
  806714:	d9000b17 	ldw	r4,44(sp)
  806718:	2000c826 	beq	r4,zero,806a3c <_dtoa_r+0xcb8>
  80671c:	d9800317 	ldw	r6,12(sp)
  806720:	00c00044 	movi	r3,1
  806724:	1980f90e 	bge	r3,r6,806b0c <_dtoa_r+0xd88>
  806728:	d8800617 	ldw	r2,24(sp)
  80672c:	d8c00a17 	ldw	r3,40(sp)
  806730:	157fffc4 	addi	r21,r2,-1
  806734:	1d41f316 	blt	r3,r21,806f04 <_dtoa_r+0x1180>
  806738:	1d6bc83a 	sub	r21,r3,r21
  80673c:	d9c00617 	ldw	r7,24(sp)
  806740:	3802aa16 	blt	r7,zero,8071ec <_dtoa_r+0x1468>
  806744:	dd000817 	ldw	r20,32(sp)
  806748:	d8800617 	ldw	r2,24(sp)
  80674c:	d8c00817 	ldw	r3,32(sp)
  806750:	01400044 	movi	r5,1
  806754:	e009883a 	mov	r4,fp
  806758:	1887883a 	add	r3,r3,r2
  80675c:	d8c00815 	stw	r3,32(sp)
  806760:	b0ad883a 	add	r22,r22,r2
  806764:	080982c0 	call	80982c <__i2b>
  806768:	1023883a 	mov	r17,r2
  80676c:	a0000826 	beq	r20,zero,806790 <_dtoa_r+0xa0c>
  806770:	0580070e 	bge	zero,r22,806790 <_dtoa_r+0xa0c>
  806774:	a005883a 	mov	r2,r20
  806778:	b500b916 	blt	r22,r20,806a60 <_dtoa_r+0xcdc>
  80677c:	d9000817 	ldw	r4,32(sp)
  806780:	a0a9c83a 	sub	r20,r20,r2
  806784:	b0adc83a 	sub	r22,r22,r2
  806788:	2089c83a 	sub	r4,r4,r2
  80678c:	d9000815 	stw	r4,32(sp)
  806790:	d9800a17 	ldw	r6,40(sp)
  806794:	0181810e 	bge	zero,r6,806d9c <_dtoa_r+0x1018>
  806798:	d9c00b17 	ldw	r7,44(sp)
  80679c:	3800b326 	beq	r7,zero,806a6c <_dtoa_r+0xce8>
  8067a0:	a800b226 	beq	r21,zero,806a6c <_dtoa_r+0xce8>
  8067a4:	880b883a 	mov	r5,r17
  8067a8:	a80d883a 	mov	r6,r21
  8067ac:	e009883a 	mov	r4,fp
  8067b0:	0809a600 	call	809a60 <__pow5mult>
  8067b4:	d9800917 	ldw	r6,36(sp)
  8067b8:	100b883a 	mov	r5,r2
  8067bc:	e009883a 	mov	r4,fp
  8067c0:	1023883a 	mov	r17,r2
  8067c4:	08098680 	call	809868 <__multiply>
  8067c8:	1021883a 	mov	r16,r2
  8067cc:	d8800a17 	ldw	r2,40(sp)
  8067d0:	d9400917 	ldw	r5,36(sp)
  8067d4:	e009883a 	mov	r4,fp
  8067d8:	1545c83a 	sub	r2,r2,r21
  8067dc:	d8800a15 	stw	r2,40(sp)
  8067e0:	08094c80 	call	8094c8 <_Bfree>
  8067e4:	d8c00a17 	ldw	r3,40(sp)
  8067e8:	18009f1e 	bne	r3,zero,806a68 <_dtoa_r+0xce4>
  8067ec:	05c00044 	movi	r23,1
  8067f0:	e009883a 	mov	r4,fp
  8067f4:	b80b883a 	mov	r5,r23
  8067f8:	080982c0 	call	80982c <__i2b>
  8067fc:	d9000d17 	ldw	r4,52(sp)
  806800:	102b883a 	mov	r21,r2
  806804:	2000ce26 	beq	r4,zero,806b40 <_dtoa_r+0xdbc>
  806808:	200d883a 	mov	r6,r4
  80680c:	100b883a 	mov	r5,r2
  806810:	e009883a 	mov	r4,fp
  806814:	0809a600 	call	809a60 <__pow5mult>
  806818:	d9800317 	ldw	r6,12(sp)
  80681c:	102b883a 	mov	r21,r2
  806820:	b981810e 	bge	r23,r6,806e28 <_dtoa_r+0x10a4>
  806824:	0027883a 	mov	r19,zero
  806828:	a8800417 	ldw	r2,16(r21)
  80682c:	05c00804 	movi	r23,32
  806830:	10800104 	addi	r2,r2,4
  806834:	1085883a 	add	r2,r2,r2
  806838:	1085883a 	add	r2,r2,r2
  80683c:	a885883a 	add	r2,r21,r2
  806840:	11000017 	ldw	r4,0(r2)
  806844:	08097140 	call	809714 <__hi0bits>
  806848:	b885c83a 	sub	r2,r23,r2
  80684c:	1585883a 	add	r2,r2,r22
  806850:	108007cc 	andi	r2,r2,31
  806854:	1000b326 	beq	r2,zero,806b24 <_dtoa_r+0xda0>
  806858:	00c00804 	movi	r3,32
  80685c:	1887c83a 	sub	r3,r3,r2
  806860:	01000104 	movi	r4,4
  806864:	20c2cd0e 	bge	r4,r3,80739c <_dtoa_r+0x1618>
  806868:	00c00704 	movi	r3,28
  80686c:	1885c83a 	sub	r2,r3,r2
  806870:	d8c00817 	ldw	r3,32(sp)
  806874:	a0a9883a 	add	r20,r20,r2
  806878:	b0ad883a 	add	r22,r22,r2
  80687c:	1887883a 	add	r3,r3,r2
  806880:	d8c00815 	stw	r3,32(sp)
  806884:	d9800817 	ldw	r6,32(sp)
  806888:	0180040e 	bge	zero,r6,80689c <_dtoa_r+0xb18>
  80688c:	800b883a 	mov	r5,r16
  806890:	e009883a 	mov	r4,fp
  806894:	0809ba00 	call	809ba0 <__lshift>
  806898:	1021883a 	mov	r16,r2
  80689c:	0580050e 	bge	zero,r22,8068b4 <_dtoa_r+0xb30>
  8068a0:	a80b883a 	mov	r5,r21
  8068a4:	b00d883a 	mov	r6,r22
  8068a8:	e009883a 	mov	r4,fp
  8068ac:	0809ba00 	call	809ba0 <__lshift>
  8068b0:	102b883a 	mov	r21,r2
  8068b4:	d9c00e17 	ldw	r7,56(sp)
  8068b8:	3801211e 	bne	r7,zero,806d40 <_dtoa_r+0xfbc>
  8068bc:	d9800617 	ldw	r6,24(sp)
  8068c0:	0181380e 	bge	zero,r6,806da4 <_dtoa_r+0x1020>
  8068c4:	d8c00b17 	ldw	r3,44(sp)
  8068c8:	1800ab1e 	bne	r3,zero,806b78 <_dtoa_r+0xdf4>
  8068cc:	dc800717 	ldw	r18,28(sp)
  8068d0:	dcc00617 	ldw	r19,24(sp)
  8068d4:	9029883a 	mov	r20,r18
  8068d8:	00000206 	br	8068e4 <_dtoa_r+0xb60>
  8068dc:	08094f00 	call	8094f0 <__multadd>
  8068e0:	1021883a 	mov	r16,r2
  8068e4:	a80b883a 	mov	r5,r21
  8068e8:	8009883a 	mov	r4,r16
  8068ec:	0805b840 	call	805b84 <quorem>
  8068f0:	10800c04 	addi	r2,r2,48
  8068f4:	90800005 	stb	r2,0(r18)
  8068f8:	94800044 	addi	r18,r18,1
  8068fc:	9507c83a 	sub	r3,r18,r20
  806900:	000f883a 	mov	r7,zero
  806904:	01800284 	movi	r6,10
  806908:	800b883a 	mov	r5,r16
  80690c:	e009883a 	mov	r4,fp
  806910:	1cfff216 	blt	r3,r19,8068dc <__alt_mem_onchip_mem+0xff7868dc>
  806914:	1011883a 	mov	r8,r2
  806918:	d8800617 	ldw	r2,24(sp)
  80691c:	0082370e 	bge	zero,r2,8071fc <_dtoa_r+0x1478>
  806920:	d9000717 	ldw	r4,28(sp)
  806924:	0025883a 	mov	r18,zero
  806928:	20af883a 	add	r23,r4,r2
  80692c:	01800044 	movi	r6,1
  806930:	800b883a 	mov	r5,r16
  806934:	e009883a 	mov	r4,fp
  806938:	da001715 	stw	r8,92(sp)
  80693c:	0809ba00 	call	809ba0 <__lshift>
  806940:	a80b883a 	mov	r5,r21
  806944:	1009883a 	mov	r4,r2
  806948:	d8800915 	stw	r2,36(sp)
  80694c:	0809ce80 	call	809ce8 <__mcmp>
  806950:	da001717 	ldw	r8,92(sp)
  806954:	0081800e 	bge	zero,r2,806f58 <_dtoa_r+0x11d4>
  806958:	b93fffc3 	ldbu	r4,-1(r23)
  80695c:	b8bfffc4 	addi	r2,r23,-1
  806960:	1007883a 	mov	r3,r2
  806964:	01800e44 	movi	r6,57
  806968:	d9c00717 	ldw	r7,28(sp)
  80696c:	00000506 	br	806984 <_dtoa_r+0xc00>
  806970:	18ffffc4 	addi	r3,r3,-1
  806974:	11c12326 	beq	r2,r7,806e04 <_dtoa_r+0x1080>
  806978:	19000003 	ldbu	r4,0(r3)
  80697c:	102f883a 	mov	r23,r2
  806980:	10bfffc4 	addi	r2,r2,-1
  806984:	21403fcc 	andi	r5,r4,255
  806988:	2940201c 	xori	r5,r5,128
  80698c:	297fe004 	addi	r5,r5,-128
  806990:	29bff726 	beq	r5,r6,806970 <__alt_mem_onchip_mem+0xff786970>
  806994:	21000044 	addi	r4,r4,1
  806998:	11000005 	stb	r4,0(r2)
  80699c:	a80b883a 	mov	r5,r21
  8069a0:	e009883a 	mov	r4,fp
  8069a4:	08094c80 	call	8094c8 <_Bfree>
  8069a8:	883ea026 	beq	r17,zero,80642c <__alt_mem_onchip_mem+0xff78642c>
  8069ac:	90000426 	beq	r18,zero,8069c0 <_dtoa_r+0xc3c>
  8069b0:	94400326 	beq	r18,r17,8069c0 <_dtoa_r+0xc3c>
  8069b4:	900b883a 	mov	r5,r18
  8069b8:	e009883a 	mov	r4,fp
  8069bc:	08094c80 	call	8094c8 <_Bfree>
  8069c0:	880b883a 	mov	r5,r17
  8069c4:	e009883a 	mov	r4,fp
  8069c8:	08094c80 	call	8094c8 <_Bfree>
  8069cc:	003e9706 	br	80642c <__alt_mem_onchip_mem+0xff78642c>
  8069d0:	01800044 	movi	r6,1
  8069d4:	d9800e15 	stw	r6,56(sp)
  8069d8:	003d9606 	br	806034 <__alt_mem_onchip_mem+0xff786034>
  8069dc:	d8800817 	ldw	r2,32(sp)
  8069e0:	d8c00517 	ldw	r3,20(sp)
  8069e4:	d8000d15 	stw	zero,52(sp)
  8069e8:	10c5c83a 	sub	r2,r2,r3
  8069ec:	00c9c83a 	sub	r4,zero,r3
  8069f0:	d8800815 	stw	r2,32(sp)
  8069f4:	d9000a15 	stw	r4,40(sp)
  8069f8:	003d9706 	br	806058 <__alt_mem_onchip_mem+0xff786058>
  8069fc:	05adc83a 	sub	r22,zero,r22
  806a00:	dd800815 	stw	r22,32(sp)
  806a04:	002d883a 	mov	r22,zero
  806a08:	003d8e06 	br	806044 <__alt_mem_onchip_mem+0xff786044>
  806a0c:	d9000517 	ldw	r4,20(sp)
  806a10:	080fcc00 	call	80fcc0 <__floatsidf>
  806a14:	100d883a 	mov	r6,r2
  806a18:	180f883a 	mov	r7,r3
  806a1c:	a009883a 	mov	r4,r20
  806a20:	880b883a 	mov	r5,r17
  806a24:	080e9d40 	call	80e9d4 <__eqdf2>
  806a28:	103d7126 	beq	r2,zero,805ff0 <__alt_mem_onchip_mem+0xff785ff0>
  806a2c:	d9c00517 	ldw	r7,20(sp)
  806a30:	39ffffc4 	addi	r7,r7,-1
  806a34:	d9c00515 	stw	r7,20(sp)
  806a38:	003d6d06 	br	805ff0 <__alt_mem_onchip_mem+0xff785ff0>
  806a3c:	dd400a17 	ldw	r21,40(sp)
  806a40:	dd000817 	ldw	r20,32(sp)
  806a44:	0023883a 	mov	r17,zero
  806a48:	003f4806 	br	80676c <__alt_mem_onchip_mem+0xff78676c>
  806a4c:	10e3c83a 	sub	r17,r2,r3
  806a50:	9448983a 	sll	r4,r18,r17
  806a54:	003d3206 	br	805f20 <__alt_mem_onchip_mem+0xff785f20>
  806a58:	d8000e15 	stw	zero,56(sp)
  806a5c:	003d7506 	br	806034 <__alt_mem_onchip_mem+0xff786034>
  806a60:	b005883a 	mov	r2,r22
  806a64:	003f4506 	br	80677c <__alt_mem_onchip_mem+0xff78677c>
  806a68:	dc000915 	stw	r16,36(sp)
  806a6c:	d9800a17 	ldw	r6,40(sp)
  806a70:	d9400917 	ldw	r5,36(sp)
  806a74:	e009883a 	mov	r4,fp
  806a78:	0809a600 	call	809a60 <__pow5mult>
  806a7c:	1021883a 	mov	r16,r2
  806a80:	003f5a06 	br	8067ec <__alt_mem_onchip_mem+0xff7867ec>
  806a84:	01c00044 	movi	r7,1
  806a88:	d9c00b15 	stw	r7,44(sp)
  806a8c:	d8802217 	ldw	r2,136(sp)
  806a90:	0081280e 	bge	zero,r2,806f34 <_dtoa_r+0x11b0>
  806a94:	100d883a 	mov	r6,r2
  806a98:	1021883a 	mov	r16,r2
  806a9c:	d8800c15 	stw	r2,48(sp)
  806aa0:	d8800615 	stw	r2,24(sp)
  806aa4:	003d8806 	br	8060c8 <__alt_mem_onchip_mem+0xff7860c8>
  806aa8:	d8800617 	ldw	r2,24(sp)
  806aac:	00be9b16 	blt	zero,r2,80651c <__alt_mem_onchip_mem+0xff78651c>
  806ab0:	10010f1e 	bne	r2,zero,806ef0 <_dtoa_r+0x116c>
  806ab4:	880b883a 	mov	r5,r17
  806ab8:	000d883a 	mov	r6,zero
  806abc:	01d00534 	movhi	r7,16404
  806ac0:	8009883a 	mov	r4,r16
  806ac4:	080ec2c0 	call	80ec2c <__muldf3>
  806ac8:	900d883a 	mov	r6,r18
  806acc:	980f883a 	mov	r7,r19
  806ad0:	1009883a 	mov	r4,r2
  806ad4:	180b883a 	mov	r5,r3
  806ad8:	080ea5c0 	call	80ea5c <__gedf2>
  806adc:	002b883a 	mov	r21,zero
  806ae0:	0023883a 	mov	r17,zero
  806ae4:	1000bf16 	blt	r2,zero,806de4 <_dtoa_r+0x1060>
  806ae8:	d9802217 	ldw	r6,136(sp)
  806aec:	ddc00717 	ldw	r23,28(sp)
  806af0:	018c303a 	nor	r6,zero,r6
  806af4:	d9800515 	stw	r6,20(sp)
  806af8:	a80b883a 	mov	r5,r21
  806afc:	e009883a 	mov	r4,fp
  806b00:	08094c80 	call	8094c8 <_Bfree>
  806b04:	883e4926 	beq	r17,zero,80642c <__alt_mem_onchip_mem+0xff78642c>
  806b08:	003fad06 	br	8069c0 <__alt_mem_onchip_mem+0xff7869c0>
  806b0c:	d9c01117 	ldw	r7,68(sp)
  806b10:	3801bc26 	beq	r7,zero,807204 <_dtoa_r+0x1480>
  806b14:	10810cc4 	addi	r2,r2,1075
  806b18:	dd400a17 	ldw	r21,40(sp)
  806b1c:	dd000817 	ldw	r20,32(sp)
  806b20:	003f0a06 	br	80674c <__alt_mem_onchip_mem+0xff78674c>
  806b24:	00800704 	movi	r2,28
  806b28:	d9000817 	ldw	r4,32(sp)
  806b2c:	a0a9883a 	add	r20,r20,r2
  806b30:	b0ad883a 	add	r22,r22,r2
  806b34:	2089883a 	add	r4,r4,r2
  806b38:	d9000815 	stw	r4,32(sp)
  806b3c:	003f5106 	br	806884 <__alt_mem_onchip_mem+0xff786884>
  806b40:	d8c00317 	ldw	r3,12(sp)
  806b44:	b8c1fc0e 	bge	r23,r3,807338 <_dtoa_r+0x15b4>
  806b48:	0027883a 	mov	r19,zero
  806b4c:	b805883a 	mov	r2,r23
  806b50:	003f3e06 	br	80684c <__alt_mem_onchip_mem+0xff78684c>
  806b54:	880b883a 	mov	r5,r17
  806b58:	e009883a 	mov	r4,fp
  806b5c:	000f883a 	mov	r7,zero
  806b60:	01800284 	movi	r6,10
  806b64:	08094f00 	call	8094f0 <__multadd>
  806b68:	d9000c17 	ldw	r4,48(sp)
  806b6c:	1023883a 	mov	r17,r2
  806b70:	0102040e 	bge	zero,r4,807384 <_dtoa_r+0x1600>
  806b74:	d9000615 	stw	r4,24(sp)
  806b78:	0500050e 	bge	zero,r20,806b90 <_dtoa_r+0xe0c>
  806b7c:	880b883a 	mov	r5,r17
  806b80:	a00d883a 	mov	r6,r20
  806b84:	e009883a 	mov	r4,fp
  806b88:	0809ba00 	call	809ba0 <__lshift>
  806b8c:	1023883a 	mov	r17,r2
  806b90:	9801241e 	bne	r19,zero,807024 <_dtoa_r+0x12a0>
  806b94:	8829883a 	mov	r20,r17
  806b98:	d9000617 	ldw	r4,24(sp)
  806b9c:	dcc00717 	ldw	r19,28(sp)
  806ba0:	9480004c 	andi	r18,r18,1
  806ba4:	20bfffc4 	addi	r2,r4,-1
  806ba8:	9885883a 	add	r2,r19,r2
  806bac:	d8800415 	stw	r2,16(sp)
  806bb0:	dc800615 	stw	r18,24(sp)
  806bb4:	a80b883a 	mov	r5,r21
  806bb8:	8009883a 	mov	r4,r16
  806bbc:	0805b840 	call	805b84 <quorem>
  806bc0:	880b883a 	mov	r5,r17
  806bc4:	8009883a 	mov	r4,r16
  806bc8:	102f883a 	mov	r23,r2
  806bcc:	0809ce80 	call	809ce8 <__mcmp>
  806bd0:	a80b883a 	mov	r5,r21
  806bd4:	a00d883a 	mov	r6,r20
  806bd8:	e009883a 	mov	r4,fp
  806bdc:	102d883a 	mov	r22,r2
  806be0:	0809d480 	call	809d48 <__mdiff>
  806be4:	1007883a 	mov	r3,r2
  806be8:	10800317 	ldw	r2,12(r2)
  806bec:	bc800c04 	addi	r18,r23,48
  806bf0:	180b883a 	mov	r5,r3
  806bf4:	10004e1e 	bne	r2,zero,806d30 <_dtoa_r+0xfac>
  806bf8:	8009883a 	mov	r4,r16
  806bfc:	d8c01615 	stw	r3,88(sp)
  806c00:	0809ce80 	call	809ce8 <__mcmp>
  806c04:	d8c01617 	ldw	r3,88(sp)
  806c08:	e009883a 	mov	r4,fp
  806c0c:	d8801615 	stw	r2,88(sp)
  806c10:	180b883a 	mov	r5,r3
  806c14:	08094c80 	call	8094c8 <_Bfree>
  806c18:	d8801617 	ldw	r2,88(sp)
  806c1c:	1000041e 	bne	r2,zero,806c30 <_dtoa_r+0xeac>
  806c20:	d9800317 	ldw	r6,12(sp)
  806c24:	3000021e 	bne	r6,zero,806c30 <_dtoa_r+0xeac>
  806c28:	d8c00617 	ldw	r3,24(sp)
  806c2c:	18003726 	beq	r3,zero,806d0c <_dtoa_r+0xf88>
  806c30:	b0002016 	blt	r22,zero,806cb4 <_dtoa_r+0xf30>
  806c34:	b000041e 	bne	r22,zero,806c48 <_dtoa_r+0xec4>
  806c38:	d9000317 	ldw	r4,12(sp)
  806c3c:	2000021e 	bne	r4,zero,806c48 <_dtoa_r+0xec4>
  806c40:	d8c00617 	ldw	r3,24(sp)
  806c44:	18001b26 	beq	r3,zero,806cb4 <_dtoa_r+0xf30>
  806c48:	00810716 	blt	zero,r2,807068 <_dtoa_r+0x12e4>
  806c4c:	d8c00417 	ldw	r3,16(sp)
  806c50:	9d800044 	addi	r22,r19,1
  806c54:	9c800005 	stb	r18,0(r19)
  806c58:	b02f883a 	mov	r23,r22
  806c5c:	98c10626 	beq	r19,r3,807078 <_dtoa_r+0x12f4>
  806c60:	800b883a 	mov	r5,r16
  806c64:	000f883a 	mov	r7,zero
  806c68:	01800284 	movi	r6,10
  806c6c:	e009883a 	mov	r4,fp
  806c70:	08094f00 	call	8094f0 <__multadd>
  806c74:	1021883a 	mov	r16,r2
  806c78:	000f883a 	mov	r7,zero
  806c7c:	01800284 	movi	r6,10
  806c80:	880b883a 	mov	r5,r17
  806c84:	e009883a 	mov	r4,fp
  806c88:	8d002526 	beq	r17,r20,806d20 <_dtoa_r+0xf9c>
  806c8c:	08094f00 	call	8094f0 <__multadd>
  806c90:	a00b883a 	mov	r5,r20
  806c94:	000f883a 	mov	r7,zero
  806c98:	01800284 	movi	r6,10
  806c9c:	e009883a 	mov	r4,fp
  806ca0:	1023883a 	mov	r17,r2
  806ca4:	08094f00 	call	8094f0 <__multadd>
  806ca8:	1029883a 	mov	r20,r2
  806cac:	b027883a 	mov	r19,r22
  806cb0:	003fc006 	br	806bb4 <__alt_mem_onchip_mem+0xff786bb4>
  806cb4:	9011883a 	mov	r8,r18
  806cb8:	00800e0e 	bge	zero,r2,806cf4 <_dtoa_r+0xf70>
  806cbc:	800b883a 	mov	r5,r16
  806cc0:	01800044 	movi	r6,1
  806cc4:	e009883a 	mov	r4,fp
  806cc8:	da001715 	stw	r8,92(sp)
  806ccc:	0809ba00 	call	809ba0 <__lshift>
  806cd0:	a80b883a 	mov	r5,r21
  806cd4:	1009883a 	mov	r4,r2
  806cd8:	1021883a 	mov	r16,r2
  806cdc:	0809ce80 	call	809ce8 <__mcmp>
  806ce0:	da001717 	ldw	r8,92(sp)
  806ce4:	0081960e 	bge	zero,r2,807340 <_dtoa_r+0x15bc>
  806ce8:	00800e44 	movi	r2,57
  806cec:	40817026 	beq	r8,r2,8072b0 <_dtoa_r+0x152c>
  806cf0:	ba000c44 	addi	r8,r23,49
  806cf4:	8825883a 	mov	r18,r17
  806cf8:	9dc00044 	addi	r23,r19,1
  806cfc:	9a000005 	stb	r8,0(r19)
  806d00:	a023883a 	mov	r17,r20
  806d04:	dc000915 	stw	r16,36(sp)
  806d08:	003f2406 	br	80699c <__alt_mem_onchip_mem+0xff78699c>
  806d0c:	00800e44 	movi	r2,57
  806d10:	9011883a 	mov	r8,r18
  806d14:	90816626 	beq	r18,r2,8072b0 <_dtoa_r+0x152c>
  806d18:	05bff516 	blt	zero,r22,806cf0 <__alt_mem_onchip_mem+0xff786cf0>
  806d1c:	003ff506 	br	806cf4 <__alt_mem_onchip_mem+0xff786cf4>
  806d20:	08094f00 	call	8094f0 <__multadd>
  806d24:	1023883a 	mov	r17,r2
  806d28:	1029883a 	mov	r20,r2
  806d2c:	003fdf06 	br	806cac <__alt_mem_onchip_mem+0xff786cac>
  806d30:	e009883a 	mov	r4,fp
  806d34:	08094c80 	call	8094c8 <_Bfree>
  806d38:	00800044 	movi	r2,1
  806d3c:	003fbc06 	br	806c30 <__alt_mem_onchip_mem+0xff786c30>
  806d40:	a80b883a 	mov	r5,r21
  806d44:	8009883a 	mov	r4,r16
  806d48:	0809ce80 	call	809ce8 <__mcmp>
  806d4c:	103edb0e 	bge	r2,zero,8068bc <__alt_mem_onchip_mem+0xff7868bc>
  806d50:	800b883a 	mov	r5,r16
  806d54:	000f883a 	mov	r7,zero
  806d58:	01800284 	movi	r6,10
  806d5c:	e009883a 	mov	r4,fp
  806d60:	08094f00 	call	8094f0 <__multadd>
  806d64:	1021883a 	mov	r16,r2
  806d68:	d8800517 	ldw	r2,20(sp)
  806d6c:	d8c00b17 	ldw	r3,44(sp)
  806d70:	10bfffc4 	addi	r2,r2,-1
  806d74:	d8800515 	stw	r2,20(sp)
  806d78:	183f761e 	bne	r3,zero,806b54 <__alt_mem_onchip_mem+0xff786b54>
  806d7c:	d9000c17 	ldw	r4,48(sp)
  806d80:	0101730e 	bge	zero,r4,807350 <_dtoa_r+0x15cc>
  806d84:	d9000615 	stw	r4,24(sp)
  806d88:	003ed006 	br	8068cc <__alt_mem_onchip_mem+0xff7868cc>
  806d8c:	00800084 	movi	r2,2
  806d90:	3081861e 	bne	r6,r2,8073ac <_dtoa_r+0x1628>
  806d94:	d8000b15 	stw	zero,44(sp)
  806d98:	003f3c06 	br	806a8c <__alt_mem_onchip_mem+0xff786a8c>
  806d9c:	dc000917 	ldw	r16,36(sp)
  806da0:	003e9206 	br	8067ec <__alt_mem_onchip_mem+0xff7867ec>
  806da4:	d9c00317 	ldw	r7,12(sp)
  806da8:	00800084 	movi	r2,2
  806dac:	11fec50e 	bge	r2,r7,8068c4 <__alt_mem_onchip_mem+0xff7868c4>
  806db0:	d9000617 	ldw	r4,24(sp)
  806db4:	20013c1e 	bne	r4,zero,8072a8 <_dtoa_r+0x1524>
  806db8:	a80b883a 	mov	r5,r21
  806dbc:	000f883a 	mov	r7,zero
  806dc0:	01800144 	movi	r6,5
  806dc4:	e009883a 	mov	r4,fp
  806dc8:	08094f00 	call	8094f0 <__multadd>
  806dcc:	100b883a 	mov	r5,r2
  806dd0:	8009883a 	mov	r4,r16
  806dd4:	102b883a 	mov	r21,r2
  806dd8:	0809ce80 	call	809ce8 <__mcmp>
  806ddc:	dc000915 	stw	r16,36(sp)
  806de0:	00bf410e 	bge	zero,r2,806ae8 <__alt_mem_onchip_mem+0xff786ae8>
  806de4:	d9c00717 	ldw	r7,28(sp)
  806de8:	00800c44 	movi	r2,49
  806dec:	38800005 	stb	r2,0(r7)
  806df0:	d8800517 	ldw	r2,20(sp)
  806df4:	3dc00044 	addi	r23,r7,1
  806df8:	10800044 	addi	r2,r2,1
  806dfc:	d8800515 	stw	r2,20(sp)
  806e00:	003f3d06 	br	806af8 <__alt_mem_onchip_mem+0xff786af8>
  806e04:	d9800517 	ldw	r6,20(sp)
  806e08:	d9c00717 	ldw	r7,28(sp)
  806e0c:	00800c44 	movi	r2,49
  806e10:	31800044 	addi	r6,r6,1
  806e14:	d9800515 	stw	r6,20(sp)
  806e18:	38800005 	stb	r2,0(r7)
  806e1c:	003edf06 	br	80699c <__alt_mem_onchip_mem+0xff78699c>
  806e20:	d8000b15 	stw	zero,44(sp)
  806e24:	003c9f06 	br	8060a4 <__alt_mem_onchip_mem+0xff7860a4>
  806e28:	903e7e1e 	bne	r18,zero,806824 <__alt_mem_onchip_mem+0xff786824>
  806e2c:	00800434 	movhi	r2,16
  806e30:	10bfffc4 	addi	r2,r2,-1
  806e34:	9884703a 	and	r2,r19,r2
  806e38:	1000ea1e 	bne	r2,zero,8071e4 <_dtoa_r+0x1460>
  806e3c:	9cdffc2c 	andhi	r19,r19,32752
  806e40:	9800e826 	beq	r19,zero,8071e4 <_dtoa_r+0x1460>
  806e44:	d9c00817 	ldw	r7,32(sp)
  806e48:	b5800044 	addi	r22,r22,1
  806e4c:	04c00044 	movi	r19,1
  806e50:	39c00044 	addi	r7,r7,1
  806e54:	d9c00815 	stw	r7,32(sp)
  806e58:	d8800d17 	ldw	r2,52(sp)
  806e5c:	103e721e 	bne	r2,zero,806828 <__alt_mem_onchip_mem+0xff786828>
  806e60:	00800044 	movi	r2,1
  806e64:	003e7906 	br	80684c <__alt_mem_onchip_mem+0xff78684c>
  806e68:	8009883a 	mov	r4,r16
  806e6c:	080fcc00 	call	80fcc0 <__floatsidf>
  806e70:	d9800f17 	ldw	r6,60(sp)
  806e74:	d9c01017 	ldw	r7,64(sp)
  806e78:	1009883a 	mov	r4,r2
  806e7c:	180b883a 	mov	r5,r3
  806e80:	080ec2c0 	call	80ec2c <__muldf3>
  806e84:	000d883a 	mov	r6,zero
  806e88:	01d00734 	movhi	r7,16412
  806e8c:	1009883a 	mov	r4,r2
  806e90:	180b883a 	mov	r5,r3
  806e94:	080d8400 	call	80d840 <__adddf3>
  806e98:	047f3034 	movhi	r17,64704
  806e9c:	1021883a 	mov	r16,r2
  806ea0:	1c63883a 	add	r17,r3,r17
  806ea4:	d9000f17 	ldw	r4,60(sp)
  806ea8:	d9401017 	ldw	r5,64(sp)
  806eac:	000d883a 	mov	r6,zero
  806eb0:	01d00534 	movhi	r7,16404
  806eb4:	080f3440 	call	80f344 <__subdf3>
  806eb8:	800d883a 	mov	r6,r16
  806ebc:	880f883a 	mov	r7,r17
  806ec0:	1009883a 	mov	r4,r2
  806ec4:	180b883a 	mov	r5,r3
  806ec8:	102b883a 	mov	r21,r2
  806ecc:	1829883a 	mov	r20,r3
  806ed0:	080ea5c0 	call	80ea5c <__gedf2>
  806ed4:	00806c16 	blt	zero,r2,807088 <_dtoa_r+0x1304>
  806ed8:	89e0003c 	xorhi	r7,r17,32768
  806edc:	800d883a 	mov	r6,r16
  806ee0:	a809883a 	mov	r4,r21
  806ee4:	a00b883a 	mov	r5,r20
  806ee8:	080eb380 	call	80eb38 <__ledf2>
  806eec:	103d7e0e 	bge	r2,zero,8064e8 <__alt_mem_onchip_mem+0xff7864e8>
  806ef0:	002b883a 	mov	r21,zero
  806ef4:	0023883a 	mov	r17,zero
  806ef8:	003efb06 	br	806ae8 <__alt_mem_onchip_mem+0xff786ae8>
  806efc:	d8800717 	ldw	r2,28(sp)
  806f00:	003bd006 	br	805e44 <__alt_mem_onchip_mem+0xff785e44>
  806f04:	d9000a17 	ldw	r4,40(sp)
  806f08:	d9800d17 	ldw	r6,52(sp)
  806f0c:	dd400a15 	stw	r21,40(sp)
  806f10:	a905c83a 	sub	r2,r21,r4
  806f14:	308d883a 	add	r6,r6,r2
  806f18:	d9800d15 	stw	r6,52(sp)
  806f1c:	002b883a 	mov	r21,zero
  806f20:	003e0606 	br	80673c <__alt_mem_onchip_mem+0xff78673c>
  806f24:	9023883a 	mov	r17,r18
  806f28:	9829883a 	mov	r20,r19
  806f2c:	04000084 	movi	r16,2
  806f30:	003c9206 	br	80617c <__alt_mem_onchip_mem+0xff78617c>
  806f34:	04000044 	movi	r16,1
  806f38:	dc000c15 	stw	r16,48(sp)
  806f3c:	dc000615 	stw	r16,24(sp)
  806f40:	dc002215 	stw	r16,136(sp)
  806f44:	e0001115 	stw	zero,68(fp)
  806f48:	000b883a 	mov	r5,zero
  806f4c:	003c6906 	br	8060f4 <__alt_mem_onchip_mem+0xff7860f4>
  806f50:	3021883a 	mov	r16,r6
  806f54:	003ffb06 	br	806f44 <__alt_mem_onchip_mem+0xff786f44>
  806f58:	1000021e 	bne	r2,zero,806f64 <_dtoa_r+0x11e0>
  806f5c:	4200004c 	andi	r8,r8,1
  806f60:	403e7d1e 	bne	r8,zero,806958 <__alt_mem_onchip_mem+0xff786958>
  806f64:	01000c04 	movi	r4,48
  806f68:	00000106 	br	806f70 <_dtoa_r+0x11ec>
  806f6c:	102f883a 	mov	r23,r2
  806f70:	b8bfffc4 	addi	r2,r23,-1
  806f74:	10c00007 	ldb	r3,0(r2)
  806f78:	193ffc26 	beq	r3,r4,806f6c <__alt_mem_onchip_mem+0xff786f6c>
  806f7c:	003e8706 	br	80699c <__alt_mem_onchip_mem+0xff78699c>
  806f80:	d8800517 	ldw	r2,20(sp)
  806f84:	00a3c83a 	sub	r17,zero,r2
  806f88:	8800a426 	beq	r17,zero,80721c <_dtoa_r+0x1498>
  806f8c:	888003cc 	andi	r2,r17,15
  806f90:	100490fa 	slli	r2,r2,3
  806f94:	00c02074 	movhi	r3,129
  806f98:	18d08904 	addi	r3,r3,16932
  806f9c:	1885883a 	add	r2,r3,r2
  806fa0:	11800017 	ldw	r6,0(r2)
  806fa4:	11c00117 	ldw	r7,4(r2)
  806fa8:	9009883a 	mov	r4,r18
  806fac:	980b883a 	mov	r5,r19
  806fb0:	8823d13a 	srai	r17,r17,4
  806fb4:	080ec2c0 	call	80ec2c <__muldf3>
  806fb8:	d8800f15 	stw	r2,60(sp)
  806fbc:	d8c01015 	stw	r3,64(sp)
  806fc0:	8800e826 	beq	r17,zero,807364 <_dtoa_r+0x15e0>
  806fc4:	05002074 	movhi	r20,129
  806fc8:	a5107f04 	addi	r20,r20,16892
  806fcc:	04000084 	movi	r16,2
  806fd0:	8980004c 	andi	r6,r17,1
  806fd4:	1009883a 	mov	r4,r2
  806fd8:	8823d07a 	srai	r17,r17,1
  806fdc:	180b883a 	mov	r5,r3
  806fe0:	30000426 	beq	r6,zero,806ff4 <_dtoa_r+0x1270>
  806fe4:	a1800017 	ldw	r6,0(r20)
  806fe8:	a1c00117 	ldw	r7,4(r20)
  806fec:	84000044 	addi	r16,r16,1
  806ff0:	080ec2c0 	call	80ec2c <__muldf3>
  806ff4:	a5000204 	addi	r20,r20,8
  806ff8:	883ff51e 	bne	r17,zero,806fd0 <__alt_mem_onchip_mem+0xff786fd0>
  806ffc:	d8800f15 	stw	r2,60(sp)
  807000:	d8c01015 	stw	r3,64(sp)
  807004:	003c7606 	br	8061e0 <__alt_mem_onchip_mem+0xff7861e0>
  807008:	00c00c04 	movi	r3,48
  80700c:	10c00005 	stb	r3,0(r2)
  807010:	d8c00517 	ldw	r3,20(sp)
  807014:	bd3fffc3 	ldbu	r20,-1(r23)
  807018:	18c00044 	addi	r3,r3,1
  80701c:	d8c00515 	stw	r3,20(sp)
  807020:	003db906 	br	806708 <__alt_mem_onchip_mem+0xff786708>
  807024:	89400117 	ldw	r5,4(r17)
  807028:	e009883a 	mov	r4,fp
  80702c:	08094200 	call	809420 <_Balloc>
  807030:	89800417 	ldw	r6,16(r17)
  807034:	89400304 	addi	r5,r17,12
  807038:	11000304 	addi	r4,r2,12
  80703c:	31800084 	addi	r6,r6,2
  807040:	318d883a 	add	r6,r6,r6
  807044:	318d883a 	add	r6,r6,r6
  807048:	1027883a 	mov	r19,r2
  80704c:	08090540 	call	809054 <memcpy>
  807050:	01800044 	movi	r6,1
  807054:	980b883a 	mov	r5,r19
  807058:	e009883a 	mov	r4,fp
  80705c:	0809ba00 	call	809ba0 <__lshift>
  807060:	1029883a 	mov	r20,r2
  807064:	003ecc06 	br	806b98 <__alt_mem_onchip_mem+0xff786b98>
  807068:	00800e44 	movi	r2,57
  80706c:	90809026 	beq	r18,r2,8072b0 <_dtoa_r+0x152c>
  807070:	92000044 	addi	r8,r18,1
  807074:	003f1f06 	br	806cf4 <__alt_mem_onchip_mem+0xff786cf4>
  807078:	9011883a 	mov	r8,r18
  80707c:	8825883a 	mov	r18,r17
  807080:	a023883a 	mov	r17,r20
  807084:	003e2906 	br	80692c <__alt_mem_onchip_mem+0xff78692c>
  807088:	002b883a 	mov	r21,zero
  80708c:	0023883a 	mov	r17,zero
  807090:	003f5406 	br	806de4 <__alt_mem_onchip_mem+0xff786de4>
  807094:	61bfffc4 	addi	r6,r12,-1
  807098:	300490fa 	slli	r2,r6,3
  80709c:	00c02074 	movhi	r3,129
  8070a0:	18d08904 	addi	r3,r3,16932
  8070a4:	1885883a 	add	r2,r3,r2
  8070a8:	11000017 	ldw	r4,0(r2)
  8070ac:	11400117 	ldw	r5,4(r2)
  8070b0:	d8800717 	ldw	r2,28(sp)
  8070b4:	880f883a 	mov	r7,r17
  8070b8:	d9801215 	stw	r6,72(sp)
  8070bc:	800d883a 	mov	r6,r16
  8070c0:	db001615 	stw	r12,88(sp)
  8070c4:	15c00044 	addi	r23,r2,1
  8070c8:	080ec2c0 	call	80ec2c <__muldf3>
  8070cc:	d9401017 	ldw	r5,64(sp)
  8070d0:	d9000f17 	ldw	r4,60(sp)
  8070d4:	d8c01515 	stw	r3,84(sp)
  8070d8:	d8801415 	stw	r2,80(sp)
  8070dc:	080fc400 	call	80fc40 <__fixdfsi>
  8070e0:	1009883a 	mov	r4,r2
  8070e4:	1021883a 	mov	r16,r2
  8070e8:	080fcc00 	call	80fcc0 <__floatsidf>
  8070ec:	d9000f17 	ldw	r4,60(sp)
  8070f0:	d9401017 	ldw	r5,64(sp)
  8070f4:	100d883a 	mov	r6,r2
  8070f8:	180f883a 	mov	r7,r3
  8070fc:	080f3440 	call	80f344 <__subdf3>
  807100:	1829883a 	mov	r20,r3
  807104:	d8c00717 	ldw	r3,28(sp)
  807108:	84000c04 	addi	r16,r16,48
  80710c:	1023883a 	mov	r17,r2
  807110:	1c000005 	stb	r16,0(r3)
  807114:	db001617 	ldw	r12,88(sp)
  807118:	00800044 	movi	r2,1
  80711c:	60802226 	beq	r12,r2,8071a8 <_dtoa_r+0x1424>
  807120:	d9c00717 	ldw	r7,28(sp)
  807124:	8805883a 	mov	r2,r17
  807128:	b82b883a 	mov	r21,r23
  80712c:	3b19883a 	add	r12,r7,r12
  807130:	6023883a 	mov	r17,r12
  807134:	a007883a 	mov	r3,r20
  807138:	dc800f15 	stw	r18,60(sp)
  80713c:	000d883a 	mov	r6,zero
  807140:	01d00934 	movhi	r7,16420
  807144:	1009883a 	mov	r4,r2
  807148:	180b883a 	mov	r5,r3
  80714c:	080ec2c0 	call	80ec2c <__muldf3>
  807150:	180b883a 	mov	r5,r3
  807154:	1009883a 	mov	r4,r2
  807158:	1829883a 	mov	r20,r3
  80715c:	1025883a 	mov	r18,r2
  807160:	080fc400 	call	80fc40 <__fixdfsi>
  807164:	1009883a 	mov	r4,r2
  807168:	1021883a 	mov	r16,r2
  80716c:	080fcc00 	call	80fcc0 <__floatsidf>
  807170:	100d883a 	mov	r6,r2
  807174:	180f883a 	mov	r7,r3
  807178:	9009883a 	mov	r4,r18
  80717c:	a00b883a 	mov	r5,r20
  807180:	84000c04 	addi	r16,r16,48
  807184:	080f3440 	call	80f344 <__subdf3>
  807188:	ad400044 	addi	r21,r21,1
  80718c:	ac3fffc5 	stb	r16,-1(r21)
  807190:	ac7fea1e 	bne	r21,r17,80713c <__alt_mem_onchip_mem+0xff78713c>
  807194:	1023883a 	mov	r17,r2
  807198:	d8801217 	ldw	r2,72(sp)
  80719c:	dc800f17 	ldw	r18,60(sp)
  8071a0:	1829883a 	mov	r20,r3
  8071a4:	b8af883a 	add	r23,r23,r2
  8071a8:	d9001417 	ldw	r4,80(sp)
  8071ac:	d9401517 	ldw	r5,84(sp)
  8071b0:	000d883a 	mov	r6,zero
  8071b4:	01cff834 	movhi	r7,16352
  8071b8:	080d8400 	call	80d840 <__adddf3>
  8071bc:	880d883a 	mov	r6,r17
  8071c0:	a00f883a 	mov	r7,r20
  8071c4:	1009883a 	mov	r4,r2
  8071c8:	180b883a 	mov	r5,r3
  8071cc:	080eb380 	call	80eb38 <__ledf2>
  8071d0:	10003e0e 	bge	r2,zero,8072cc <_dtoa_r+0x1548>
  8071d4:	d9001317 	ldw	r4,76(sp)
  8071d8:	bd3fffc3 	ldbu	r20,-1(r23)
  8071dc:	d9000515 	stw	r4,20(sp)
  8071e0:	003d3b06 	br	8066d0 <__alt_mem_onchip_mem+0xff7866d0>
  8071e4:	0027883a 	mov	r19,zero
  8071e8:	003f1b06 	br	806e58 <__alt_mem_onchip_mem+0xff786e58>
  8071ec:	d8800817 	ldw	r2,32(sp)
  8071f0:	11e9c83a 	sub	r20,r2,r7
  8071f4:	0005883a 	mov	r2,zero
  8071f8:	003d5406 	br	80674c <__alt_mem_onchip_mem+0xff78674c>
  8071fc:	00800044 	movi	r2,1
  807200:	003dc706 	br	806920 <__alt_mem_onchip_mem+0xff786920>
  807204:	d8c00217 	ldw	r3,8(sp)
  807208:	00800d84 	movi	r2,54
  80720c:	dd400a17 	ldw	r21,40(sp)
  807210:	10c5c83a 	sub	r2,r2,r3
  807214:	dd000817 	ldw	r20,32(sp)
  807218:	003d4c06 	br	80674c <__alt_mem_onchip_mem+0xff78674c>
  80721c:	dc800f15 	stw	r18,60(sp)
  807220:	dcc01015 	stw	r19,64(sp)
  807224:	04000084 	movi	r16,2
  807228:	003bed06 	br	8061e0 <__alt_mem_onchip_mem+0xff7861e0>
  80722c:	d9000617 	ldw	r4,24(sp)
  807230:	203f0d26 	beq	r4,zero,806e68 <__alt_mem_onchip_mem+0xff786e68>
  807234:	d9800c17 	ldw	r6,48(sp)
  807238:	01bcab0e 	bge	zero,r6,8064e8 <__alt_mem_onchip_mem+0xff7864e8>
  80723c:	d9401017 	ldw	r5,64(sp)
  807240:	d9000f17 	ldw	r4,60(sp)
  807244:	000d883a 	mov	r6,zero
  807248:	01d00934 	movhi	r7,16420
  80724c:	080ec2c0 	call	80ec2c <__muldf3>
  807250:	81000044 	addi	r4,r16,1
  807254:	d8800f15 	stw	r2,60(sp)
  807258:	d8c01015 	stw	r3,64(sp)
  80725c:	080fcc00 	call	80fcc0 <__floatsidf>
  807260:	d9800f17 	ldw	r6,60(sp)
  807264:	d9c01017 	ldw	r7,64(sp)
  807268:	1009883a 	mov	r4,r2
  80726c:	180b883a 	mov	r5,r3
  807270:	080ec2c0 	call	80ec2c <__muldf3>
  807274:	01d00734 	movhi	r7,16412
  807278:	000d883a 	mov	r6,zero
  80727c:	1009883a 	mov	r4,r2
  807280:	180b883a 	mov	r5,r3
  807284:	080d8400 	call	80d840 <__adddf3>
  807288:	d9c00517 	ldw	r7,20(sp)
  80728c:	047f3034 	movhi	r17,64704
  807290:	1021883a 	mov	r16,r2
  807294:	39ffffc4 	addi	r7,r7,-1
  807298:	d9c01315 	stw	r7,76(sp)
  80729c:	1c63883a 	add	r17,r3,r17
  8072a0:	db000c17 	ldw	r12,48(sp)
  8072a4:	003bea06 	br	806250 <__alt_mem_onchip_mem+0xff786250>
  8072a8:	dc000915 	stw	r16,36(sp)
  8072ac:	003e0e06 	br	806ae8 <__alt_mem_onchip_mem+0xff786ae8>
  8072b0:	01000e44 	movi	r4,57
  8072b4:	8825883a 	mov	r18,r17
  8072b8:	9dc00044 	addi	r23,r19,1
  8072bc:	99000005 	stb	r4,0(r19)
  8072c0:	a023883a 	mov	r17,r20
  8072c4:	dc000915 	stw	r16,36(sp)
  8072c8:	003da406 	br	80695c <__alt_mem_onchip_mem+0xff78695c>
  8072cc:	d9801417 	ldw	r6,80(sp)
  8072d0:	d9c01517 	ldw	r7,84(sp)
  8072d4:	0009883a 	mov	r4,zero
  8072d8:	014ff834 	movhi	r5,16352
  8072dc:	080f3440 	call	80f344 <__subdf3>
  8072e0:	880d883a 	mov	r6,r17
  8072e4:	a00f883a 	mov	r7,r20
  8072e8:	1009883a 	mov	r4,r2
  8072ec:	180b883a 	mov	r5,r3
  8072f0:	080ea5c0 	call	80ea5c <__gedf2>
  8072f4:	00bc7c0e 	bge	zero,r2,8064e8 <__alt_mem_onchip_mem+0xff7864e8>
  8072f8:	01000c04 	movi	r4,48
  8072fc:	00000106 	br	807304 <_dtoa_r+0x1580>
  807300:	102f883a 	mov	r23,r2
  807304:	b8bfffc4 	addi	r2,r23,-1
  807308:	10c00007 	ldb	r3,0(r2)
  80730c:	193ffc26 	beq	r3,r4,807300 <__alt_mem_onchip_mem+0xff787300>
  807310:	d9801317 	ldw	r6,76(sp)
  807314:	d9800515 	stw	r6,20(sp)
  807318:	003c4406 	br	80642c <__alt_mem_onchip_mem+0xff78642c>
  80731c:	d9801317 	ldw	r6,76(sp)
  807320:	d9800515 	stw	r6,20(sp)
  807324:	003cea06 	br	8066d0 <__alt_mem_onchip_mem+0xff7866d0>
  807328:	dd800f17 	ldw	r22,60(sp)
  80732c:	dcc01017 	ldw	r19,64(sp)
  807330:	dc801217 	ldw	r18,72(sp)
  807334:	003c6c06 	br	8064e8 <__alt_mem_onchip_mem+0xff7864e8>
  807338:	903e031e 	bne	r18,zero,806b48 <__alt_mem_onchip_mem+0xff786b48>
  80733c:	003ebb06 	br	806e2c <__alt_mem_onchip_mem+0xff786e2c>
  807340:	103e6c1e 	bne	r2,zero,806cf4 <__alt_mem_onchip_mem+0xff786cf4>
  807344:	4080004c 	andi	r2,r8,1
  807348:	103e6a26 	beq	r2,zero,806cf4 <__alt_mem_onchip_mem+0xff786cf4>
  80734c:	003e6606 	br	806ce8 <__alt_mem_onchip_mem+0xff786ce8>
  807350:	d8c00317 	ldw	r3,12(sp)
  807354:	00800084 	movi	r2,2
  807358:	10c02916 	blt	r2,r3,807400 <_dtoa_r+0x167c>
  80735c:	d9000c17 	ldw	r4,48(sp)
  807360:	003e8806 	br	806d84 <__alt_mem_onchip_mem+0xff786d84>
  807364:	04000084 	movi	r16,2
  807368:	003b9d06 	br	8061e0 <__alt_mem_onchip_mem+0xff7861e0>
  80736c:	d9001317 	ldw	r4,76(sp)
  807370:	d9000515 	stw	r4,20(sp)
  807374:	003cd606 	br	8066d0 <__alt_mem_onchip_mem+0xff7866d0>
  807378:	d8801317 	ldw	r2,76(sp)
  80737c:	d8800515 	stw	r2,20(sp)
  807380:	003c2a06 	br	80642c <__alt_mem_onchip_mem+0xff78642c>
  807384:	d9800317 	ldw	r6,12(sp)
  807388:	00800084 	movi	r2,2
  80738c:	11801516 	blt	r2,r6,8073e4 <_dtoa_r+0x1660>
  807390:	d9c00c17 	ldw	r7,48(sp)
  807394:	d9c00615 	stw	r7,24(sp)
  807398:	003df706 	br	806b78 <__alt_mem_onchip_mem+0xff786b78>
  80739c:	193d3926 	beq	r3,r4,806884 <__alt_mem_onchip_mem+0xff786884>
  8073a0:	00c00f04 	movi	r3,60
  8073a4:	1885c83a 	sub	r2,r3,r2
  8073a8:	003ddf06 	br	806b28 <__alt_mem_onchip_mem+0xff786b28>
  8073ac:	e009883a 	mov	r4,fp
  8073b0:	e0001115 	stw	zero,68(fp)
  8073b4:	000b883a 	mov	r5,zero
  8073b8:	08094200 	call	809420 <_Balloc>
  8073bc:	d8800715 	stw	r2,28(sp)
  8073c0:	d8c00717 	ldw	r3,28(sp)
  8073c4:	00bfffc4 	movi	r2,-1
  8073c8:	01000044 	movi	r4,1
  8073cc:	d8800c15 	stw	r2,48(sp)
  8073d0:	e0c01015 	stw	r3,64(fp)
  8073d4:	d9000b15 	stw	r4,44(sp)
  8073d8:	d8800615 	stw	r2,24(sp)
  8073dc:	d8002215 	stw	zero,136(sp)
  8073e0:	003c4106 	br	8064e8 <__alt_mem_onchip_mem+0xff7864e8>
  8073e4:	d8c00c17 	ldw	r3,48(sp)
  8073e8:	d8c00615 	stw	r3,24(sp)
  8073ec:	003e7006 	br	806db0 <__alt_mem_onchip_mem+0xff786db0>
  8073f0:	04400044 	movi	r17,1
  8073f4:	003b2006 	br	806078 <__alt_mem_onchip_mem+0xff786078>
  8073f8:	000b883a 	mov	r5,zero
  8073fc:	003b3d06 	br	8060f4 <__alt_mem_onchip_mem+0xff7860f4>
  807400:	d8800c17 	ldw	r2,48(sp)
  807404:	d8800615 	stw	r2,24(sp)
  807408:	003e6906 	br	806db0 <__alt_mem_onchip_mem+0xff786db0>

0080740c <__sflush_r>:
  80740c:	2880030b 	ldhu	r2,12(r5)
  807410:	defffb04 	addi	sp,sp,-20
  807414:	dcc00315 	stw	r19,12(sp)
  807418:	dc400115 	stw	r17,4(sp)
  80741c:	dfc00415 	stw	ra,16(sp)
  807420:	dc800215 	stw	r18,8(sp)
  807424:	dc000015 	stw	r16,0(sp)
  807428:	10c0020c 	andi	r3,r2,8
  80742c:	2823883a 	mov	r17,r5
  807430:	2027883a 	mov	r19,r4
  807434:	1800311e 	bne	r3,zero,8074fc <__sflush_r+0xf0>
  807438:	28c00117 	ldw	r3,4(r5)
  80743c:	10820014 	ori	r2,r2,2048
  807440:	2880030d 	sth	r2,12(r5)
  807444:	00c04b0e 	bge	zero,r3,807574 <__sflush_r+0x168>
  807448:	8a000a17 	ldw	r8,40(r17)
  80744c:	40002326 	beq	r8,zero,8074dc <__sflush_r+0xd0>
  807450:	9c000017 	ldw	r16,0(r19)
  807454:	10c4000c 	andi	r3,r2,4096
  807458:	98000015 	stw	zero,0(r19)
  80745c:	18004826 	beq	r3,zero,807580 <__sflush_r+0x174>
  807460:	89801417 	ldw	r6,80(r17)
  807464:	10c0010c 	andi	r3,r2,4
  807468:	18000626 	beq	r3,zero,807484 <__sflush_r+0x78>
  80746c:	88c00117 	ldw	r3,4(r17)
  807470:	88800c17 	ldw	r2,48(r17)
  807474:	30cdc83a 	sub	r6,r6,r3
  807478:	10000226 	beq	r2,zero,807484 <__sflush_r+0x78>
  80747c:	88800f17 	ldw	r2,60(r17)
  807480:	308dc83a 	sub	r6,r6,r2
  807484:	89400717 	ldw	r5,28(r17)
  807488:	000f883a 	mov	r7,zero
  80748c:	9809883a 	mov	r4,r19
  807490:	403ee83a 	callr	r8
  807494:	00ffffc4 	movi	r3,-1
  807498:	10c04426 	beq	r2,r3,8075ac <__sflush_r+0x1a0>
  80749c:	88c0030b 	ldhu	r3,12(r17)
  8074a0:	89000417 	ldw	r4,16(r17)
  8074a4:	88000115 	stw	zero,4(r17)
  8074a8:	197dffcc 	andi	r5,r3,63487
  8074ac:	8940030d 	sth	r5,12(r17)
  8074b0:	89000015 	stw	r4,0(r17)
  8074b4:	18c4000c 	andi	r3,r3,4096
  8074b8:	18002c1e 	bne	r3,zero,80756c <__sflush_r+0x160>
  8074bc:	89400c17 	ldw	r5,48(r17)
  8074c0:	9c000015 	stw	r16,0(r19)
  8074c4:	28000526 	beq	r5,zero,8074dc <__sflush_r+0xd0>
  8074c8:	88801004 	addi	r2,r17,64
  8074cc:	28800226 	beq	r5,r2,8074d8 <__sflush_r+0xcc>
  8074d0:	9809883a 	mov	r4,r19
  8074d4:	0807b780 	call	807b78 <_free_r>
  8074d8:	88000c15 	stw	zero,48(r17)
  8074dc:	0005883a 	mov	r2,zero
  8074e0:	dfc00417 	ldw	ra,16(sp)
  8074e4:	dcc00317 	ldw	r19,12(sp)
  8074e8:	dc800217 	ldw	r18,8(sp)
  8074ec:	dc400117 	ldw	r17,4(sp)
  8074f0:	dc000017 	ldw	r16,0(sp)
  8074f4:	dec00504 	addi	sp,sp,20
  8074f8:	f800283a 	ret
  8074fc:	2c800417 	ldw	r18,16(r5)
  807500:	903ff626 	beq	r18,zero,8074dc <__alt_mem_onchip_mem+0xff7874dc>
  807504:	2c000017 	ldw	r16,0(r5)
  807508:	108000cc 	andi	r2,r2,3
  80750c:	2c800015 	stw	r18,0(r5)
  807510:	84a1c83a 	sub	r16,r16,r18
  807514:	1000131e 	bne	r2,zero,807564 <__sflush_r+0x158>
  807518:	28800517 	ldw	r2,20(r5)
  80751c:	88800215 	stw	r2,8(r17)
  807520:	04000316 	blt	zero,r16,807530 <__sflush_r+0x124>
  807524:	003fed06 	br	8074dc <__alt_mem_onchip_mem+0xff7874dc>
  807528:	90a5883a 	add	r18,r18,r2
  80752c:	043feb0e 	bge	zero,r16,8074dc <__alt_mem_onchip_mem+0xff7874dc>
  807530:	88800917 	ldw	r2,36(r17)
  807534:	89400717 	ldw	r5,28(r17)
  807538:	800f883a 	mov	r7,r16
  80753c:	900d883a 	mov	r6,r18
  807540:	9809883a 	mov	r4,r19
  807544:	103ee83a 	callr	r2
  807548:	80a1c83a 	sub	r16,r16,r2
  80754c:	00bff616 	blt	zero,r2,807528 <__alt_mem_onchip_mem+0xff787528>
  807550:	88c0030b 	ldhu	r3,12(r17)
  807554:	00bfffc4 	movi	r2,-1
  807558:	18c01014 	ori	r3,r3,64
  80755c:	88c0030d 	sth	r3,12(r17)
  807560:	003fdf06 	br	8074e0 <__alt_mem_onchip_mem+0xff7874e0>
  807564:	0005883a 	mov	r2,zero
  807568:	003fec06 	br	80751c <__alt_mem_onchip_mem+0xff78751c>
  80756c:	88801415 	stw	r2,80(r17)
  807570:	003fd206 	br	8074bc <__alt_mem_onchip_mem+0xff7874bc>
  807574:	28c00f17 	ldw	r3,60(r5)
  807578:	00ffb316 	blt	zero,r3,807448 <__alt_mem_onchip_mem+0xff787448>
  80757c:	003fd706 	br	8074dc <__alt_mem_onchip_mem+0xff7874dc>
  807580:	89400717 	ldw	r5,28(r17)
  807584:	000d883a 	mov	r6,zero
  807588:	01c00044 	movi	r7,1
  80758c:	9809883a 	mov	r4,r19
  807590:	403ee83a 	callr	r8
  807594:	100d883a 	mov	r6,r2
  807598:	00bfffc4 	movi	r2,-1
  80759c:	30801426 	beq	r6,r2,8075f0 <__sflush_r+0x1e4>
  8075a0:	8880030b 	ldhu	r2,12(r17)
  8075a4:	8a000a17 	ldw	r8,40(r17)
  8075a8:	003fae06 	br	807464 <__alt_mem_onchip_mem+0xff787464>
  8075ac:	98c00017 	ldw	r3,0(r19)
  8075b0:	183fba26 	beq	r3,zero,80749c <__alt_mem_onchip_mem+0xff78749c>
  8075b4:	01000744 	movi	r4,29
  8075b8:	19000626 	beq	r3,r4,8075d4 <__sflush_r+0x1c8>
  8075bc:	01000584 	movi	r4,22
  8075c0:	19000426 	beq	r3,r4,8075d4 <__sflush_r+0x1c8>
  8075c4:	88c0030b 	ldhu	r3,12(r17)
  8075c8:	18c01014 	ori	r3,r3,64
  8075cc:	88c0030d 	sth	r3,12(r17)
  8075d0:	003fc306 	br	8074e0 <__alt_mem_onchip_mem+0xff7874e0>
  8075d4:	8880030b 	ldhu	r2,12(r17)
  8075d8:	88c00417 	ldw	r3,16(r17)
  8075dc:	88000115 	stw	zero,4(r17)
  8075e0:	10bdffcc 	andi	r2,r2,63487
  8075e4:	8880030d 	sth	r2,12(r17)
  8075e8:	88c00015 	stw	r3,0(r17)
  8075ec:	003fb306 	br	8074bc <__alt_mem_onchip_mem+0xff7874bc>
  8075f0:	98800017 	ldw	r2,0(r19)
  8075f4:	103fea26 	beq	r2,zero,8075a0 <__alt_mem_onchip_mem+0xff7875a0>
  8075f8:	00c00744 	movi	r3,29
  8075fc:	10c00226 	beq	r2,r3,807608 <__sflush_r+0x1fc>
  807600:	00c00584 	movi	r3,22
  807604:	10c0031e 	bne	r2,r3,807614 <__sflush_r+0x208>
  807608:	9c000015 	stw	r16,0(r19)
  80760c:	0005883a 	mov	r2,zero
  807610:	003fb306 	br	8074e0 <__alt_mem_onchip_mem+0xff7874e0>
  807614:	88c0030b 	ldhu	r3,12(r17)
  807618:	3005883a 	mov	r2,r6
  80761c:	18c01014 	ori	r3,r3,64
  807620:	88c0030d 	sth	r3,12(r17)
  807624:	003fae06 	br	8074e0 <__alt_mem_onchip_mem+0xff7874e0>

00807628 <_fflush_r>:
  807628:	defffd04 	addi	sp,sp,-12
  80762c:	dc000115 	stw	r16,4(sp)
  807630:	dfc00215 	stw	ra,8(sp)
  807634:	2021883a 	mov	r16,r4
  807638:	20000226 	beq	r4,zero,807644 <_fflush_r+0x1c>
  80763c:	20800e17 	ldw	r2,56(r4)
  807640:	10000c26 	beq	r2,zero,807674 <_fflush_r+0x4c>
  807644:	2880030f 	ldh	r2,12(r5)
  807648:	1000051e 	bne	r2,zero,807660 <_fflush_r+0x38>
  80764c:	0005883a 	mov	r2,zero
  807650:	dfc00217 	ldw	ra,8(sp)
  807654:	dc000117 	ldw	r16,4(sp)
  807658:	dec00304 	addi	sp,sp,12
  80765c:	f800283a 	ret
  807660:	8009883a 	mov	r4,r16
  807664:	dfc00217 	ldw	ra,8(sp)
  807668:	dc000117 	ldw	r16,4(sp)
  80766c:	dec00304 	addi	sp,sp,12
  807670:	080740c1 	jmpi	80740c <__sflush_r>
  807674:	d9400015 	stw	r5,0(sp)
  807678:	0807a040 	call	807a04 <__sinit>
  80767c:	d9400017 	ldw	r5,0(sp)
  807680:	003ff006 	br	807644 <__alt_mem_onchip_mem+0xff787644>

00807684 <fflush>:
  807684:	20000526 	beq	r4,zero,80769c <fflush+0x18>
  807688:	00802074 	movhi	r2,129
  80768c:	1098df04 	addi	r2,r2,25468
  807690:	200b883a 	mov	r5,r4
  807694:	11000017 	ldw	r4,0(r2)
  807698:	08076281 	jmpi	807628 <_fflush_r>
  80769c:	00802074 	movhi	r2,129
  8076a0:	1098de04 	addi	r2,r2,25464
  8076a4:	11000017 	ldw	r4,0(r2)
  8076a8:	01402034 	movhi	r5,128
  8076ac:	295d8a04 	addi	r5,r5,30248
  8076b0:	08084081 	jmpi	808408 <_fwalk_reent>

008076b4 <__fp_unlock>:
  8076b4:	0005883a 	mov	r2,zero
  8076b8:	f800283a 	ret

008076bc <_cleanup_r>:
  8076bc:	01402074 	movhi	r5,129
  8076c0:	29710804 	addi	r5,r5,-15328
  8076c4:	08084081 	jmpi	808408 <_fwalk_reent>

008076c8 <__sinit.part.1>:
  8076c8:	defff704 	addi	sp,sp,-36
  8076cc:	00c02034 	movhi	r3,128
  8076d0:	dfc00815 	stw	ra,32(sp)
  8076d4:	ddc00715 	stw	r23,28(sp)
  8076d8:	dd800615 	stw	r22,24(sp)
  8076dc:	dd400515 	stw	r21,20(sp)
  8076e0:	dd000415 	stw	r20,16(sp)
  8076e4:	dcc00315 	stw	r19,12(sp)
  8076e8:	dc800215 	stw	r18,8(sp)
  8076ec:	dc400115 	stw	r17,4(sp)
  8076f0:	dc000015 	stw	r16,0(sp)
  8076f4:	18ddaf04 	addi	r3,r3,30396
  8076f8:	24000117 	ldw	r16,4(r4)
  8076fc:	20c00f15 	stw	r3,60(r4)
  807700:	2080bb04 	addi	r2,r4,748
  807704:	00c000c4 	movi	r3,3
  807708:	20c0b915 	stw	r3,740(r4)
  80770c:	2080ba15 	stw	r2,744(r4)
  807710:	2000b815 	stw	zero,736(r4)
  807714:	05c00204 	movi	r23,8
  807718:	00800104 	movi	r2,4
  80771c:	2025883a 	mov	r18,r4
  807720:	b80d883a 	mov	r6,r23
  807724:	81001704 	addi	r4,r16,92
  807728:	000b883a 	mov	r5,zero
  80772c:	80000015 	stw	zero,0(r16)
  807730:	80000115 	stw	zero,4(r16)
  807734:	80000215 	stw	zero,8(r16)
  807738:	8080030d 	sth	r2,12(r16)
  80773c:	80001915 	stw	zero,100(r16)
  807740:	8000038d 	sth	zero,14(r16)
  807744:	80000415 	stw	zero,16(r16)
  807748:	80000515 	stw	zero,20(r16)
  80774c:	80000615 	stw	zero,24(r16)
  807750:	08092f80 	call	8092f8 <memset>
  807754:	05802074 	movhi	r22,129
  807758:	94400217 	ldw	r17,8(r18)
  80775c:	05402074 	movhi	r21,129
  807760:	05002074 	movhi	r20,129
  807764:	04c02074 	movhi	r19,129
  807768:	b5aa9204 	addi	r22,r22,-21944
  80776c:	ad6aa904 	addi	r21,r21,-21852
  807770:	a52ac804 	addi	r20,r20,-21728
  807774:	9ceadf04 	addi	r19,r19,-21636
  807778:	85800815 	stw	r22,32(r16)
  80777c:	85400915 	stw	r21,36(r16)
  807780:	85000a15 	stw	r20,40(r16)
  807784:	84c00b15 	stw	r19,44(r16)
  807788:	84000715 	stw	r16,28(r16)
  80778c:	00800284 	movi	r2,10
  807790:	8880030d 	sth	r2,12(r17)
  807794:	00800044 	movi	r2,1
  807798:	b80d883a 	mov	r6,r23
  80779c:	89001704 	addi	r4,r17,92
  8077a0:	000b883a 	mov	r5,zero
  8077a4:	88000015 	stw	zero,0(r17)
  8077a8:	88000115 	stw	zero,4(r17)
  8077ac:	88000215 	stw	zero,8(r17)
  8077b0:	88001915 	stw	zero,100(r17)
  8077b4:	8880038d 	sth	r2,14(r17)
  8077b8:	88000415 	stw	zero,16(r17)
  8077bc:	88000515 	stw	zero,20(r17)
  8077c0:	88000615 	stw	zero,24(r17)
  8077c4:	08092f80 	call	8092f8 <memset>
  8077c8:	94000317 	ldw	r16,12(r18)
  8077cc:	00800484 	movi	r2,18
  8077d0:	8c400715 	stw	r17,28(r17)
  8077d4:	8d800815 	stw	r22,32(r17)
  8077d8:	8d400915 	stw	r21,36(r17)
  8077dc:	8d000a15 	stw	r20,40(r17)
  8077e0:	8cc00b15 	stw	r19,44(r17)
  8077e4:	8080030d 	sth	r2,12(r16)
  8077e8:	00800084 	movi	r2,2
  8077ec:	80000015 	stw	zero,0(r16)
  8077f0:	80000115 	stw	zero,4(r16)
  8077f4:	80000215 	stw	zero,8(r16)
  8077f8:	80001915 	stw	zero,100(r16)
  8077fc:	8080038d 	sth	r2,14(r16)
  807800:	80000415 	stw	zero,16(r16)
  807804:	80000515 	stw	zero,20(r16)
  807808:	80000615 	stw	zero,24(r16)
  80780c:	b80d883a 	mov	r6,r23
  807810:	000b883a 	mov	r5,zero
  807814:	81001704 	addi	r4,r16,92
  807818:	08092f80 	call	8092f8 <memset>
  80781c:	00800044 	movi	r2,1
  807820:	84000715 	stw	r16,28(r16)
  807824:	85800815 	stw	r22,32(r16)
  807828:	85400915 	stw	r21,36(r16)
  80782c:	85000a15 	stw	r20,40(r16)
  807830:	84c00b15 	stw	r19,44(r16)
  807834:	90800e15 	stw	r2,56(r18)
  807838:	dfc00817 	ldw	ra,32(sp)
  80783c:	ddc00717 	ldw	r23,28(sp)
  807840:	dd800617 	ldw	r22,24(sp)
  807844:	dd400517 	ldw	r21,20(sp)
  807848:	dd000417 	ldw	r20,16(sp)
  80784c:	dcc00317 	ldw	r19,12(sp)
  807850:	dc800217 	ldw	r18,8(sp)
  807854:	dc400117 	ldw	r17,4(sp)
  807858:	dc000017 	ldw	r16,0(sp)
  80785c:	dec00904 	addi	sp,sp,36
  807860:	f800283a 	ret

00807864 <__fp_lock>:
  807864:	0005883a 	mov	r2,zero
  807868:	f800283a 	ret

0080786c <__sfmoreglue>:
  80786c:	defffc04 	addi	sp,sp,-16
  807870:	dc400115 	stw	r17,4(sp)
  807874:	2c7fffc4 	addi	r17,r5,-1
  807878:	8c401a24 	muli	r17,r17,104
  80787c:	dc800215 	stw	r18,8(sp)
  807880:	2825883a 	mov	r18,r5
  807884:	89401d04 	addi	r5,r17,116
  807888:	dc000015 	stw	r16,0(sp)
  80788c:	dfc00315 	stw	ra,12(sp)
  807890:	08087640 	call	808764 <_malloc_r>
  807894:	1021883a 	mov	r16,r2
  807898:	10000726 	beq	r2,zero,8078b8 <__sfmoreglue+0x4c>
  80789c:	11000304 	addi	r4,r2,12
  8078a0:	10000015 	stw	zero,0(r2)
  8078a4:	14800115 	stw	r18,4(r2)
  8078a8:	11000215 	stw	r4,8(r2)
  8078ac:	89801a04 	addi	r6,r17,104
  8078b0:	000b883a 	mov	r5,zero
  8078b4:	08092f80 	call	8092f8 <memset>
  8078b8:	8005883a 	mov	r2,r16
  8078bc:	dfc00317 	ldw	ra,12(sp)
  8078c0:	dc800217 	ldw	r18,8(sp)
  8078c4:	dc400117 	ldw	r17,4(sp)
  8078c8:	dc000017 	ldw	r16,0(sp)
  8078cc:	dec00404 	addi	sp,sp,16
  8078d0:	f800283a 	ret

008078d4 <__sfp>:
  8078d4:	defffb04 	addi	sp,sp,-20
  8078d8:	dc000015 	stw	r16,0(sp)
  8078dc:	04002074 	movhi	r16,129
  8078e0:	8418de04 	addi	r16,r16,25464
  8078e4:	dcc00315 	stw	r19,12(sp)
  8078e8:	2027883a 	mov	r19,r4
  8078ec:	81000017 	ldw	r4,0(r16)
  8078f0:	dfc00415 	stw	ra,16(sp)
  8078f4:	dc800215 	stw	r18,8(sp)
  8078f8:	20800e17 	ldw	r2,56(r4)
  8078fc:	dc400115 	stw	r17,4(sp)
  807900:	1000021e 	bne	r2,zero,80790c <__sfp+0x38>
  807904:	08076c80 	call	8076c8 <__sinit.part.1>
  807908:	81000017 	ldw	r4,0(r16)
  80790c:	2480b804 	addi	r18,r4,736
  807910:	047fffc4 	movi	r17,-1
  807914:	91000117 	ldw	r4,4(r18)
  807918:	94000217 	ldw	r16,8(r18)
  80791c:	213fffc4 	addi	r4,r4,-1
  807920:	20000a16 	blt	r4,zero,80794c <__sfp+0x78>
  807924:	8080030f 	ldh	r2,12(r16)
  807928:	10000c26 	beq	r2,zero,80795c <__sfp+0x88>
  80792c:	80c01d04 	addi	r3,r16,116
  807930:	00000206 	br	80793c <__sfp+0x68>
  807934:	18bfe60f 	ldh	r2,-104(r3)
  807938:	10000826 	beq	r2,zero,80795c <__sfp+0x88>
  80793c:	213fffc4 	addi	r4,r4,-1
  807940:	1c3ffd04 	addi	r16,r3,-12
  807944:	18c01a04 	addi	r3,r3,104
  807948:	247ffa1e 	bne	r4,r17,807934 <__alt_mem_onchip_mem+0xff787934>
  80794c:	90800017 	ldw	r2,0(r18)
  807950:	10001d26 	beq	r2,zero,8079c8 <__sfp+0xf4>
  807954:	1025883a 	mov	r18,r2
  807958:	003fee06 	br	807914 <__alt_mem_onchip_mem+0xff787914>
  80795c:	00bfffc4 	movi	r2,-1
  807960:	8080038d 	sth	r2,14(r16)
  807964:	00800044 	movi	r2,1
  807968:	8080030d 	sth	r2,12(r16)
  80796c:	80001915 	stw	zero,100(r16)
  807970:	80000015 	stw	zero,0(r16)
  807974:	80000215 	stw	zero,8(r16)
  807978:	80000115 	stw	zero,4(r16)
  80797c:	80000415 	stw	zero,16(r16)
  807980:	80000515 	stw	zero,20(r16)
  807984:	80000615 	stw	zero,24(r16)
  807988:	01800204 	movi	r6,8
  80798c:	000b883a 	mov	r5,zero
  807990:	81001704 	addi	r4,r16,92
  807994:	08092f80 	call	8092f8 <memset>
  807998:	8005883a 	mov	r2,r16
  80799c:	80000c15 	stw	zero,48(r16)
  8079a0:	80000d15 	stw	zero,52(r16)
  8079a4:	80001115 	stw	zero,68(r16)
  8079a8:	80001215 	stw	zero,72(r16)
  8079ac:	dfc00417 	ldw	ra,16(sp)
  8079b0:	dcc00317 	ldw	r19,12(sp)
  8079b4:	dc800217 	ldw	r18,8(sp)
  8079b8:	dc400117 	ldw	r17,4(sp)
  8079bc:	dc000017 	ldw	r16,0(sp)
  8079c0:	dec00504 	addi	sp,sp,20
  8079c4:	f800283a 	ret
  8079c8:	01400104 	movi	r5,4
  8079cc:	9809883a 	mov	r4,r19
  8079d0:	080786c0 	call	80786c <__sfmoreglue>
  8079d4:	90800015 	stw	r2,0(r18)
  8079d8:	103fde1e 	bne	r2,zero,807954 <__alt_mem_onchip_mem+0xff787954>
  8079dc:	00800304 	movi	r2,12
  8079e0:	98800015 	stw	r2,0(r19)
  8079e4:	0005883a 	mov	r2,zero
  8079e8:	003ff006 	br	8079ac <__alt_mem_onchip_mem+0xff7879ac>

008079ec <_cleanup>:
  8079ec:	00802074 	movhi	r2,129
  8079f0:	1098de04 	addi	r2,r2,25464
  8079f4:	11000017 	ldw	r4,0(r2)
  8079f8:	01402074 	movhi	r5,129
  8079fc:	29710804 	addi	r5,r5,-15328
  807a00:	08084081 	jmpi	808408 <_fwalk_reent>

00807a04 <__sinit>:
  807a04:	20800e17 	ldw	r2,56(r4)
  807a08:	10000126 	beq	r2,zero,807a10 <__sinit+0xc>
  807a0c:	f800283a 	ret
  807a10:	08076c81 	jmpi	8076c8 <__sinit.part.1>

00807a14 <__sfp_lock_acquire>:
  807a14:	f800283a 	ret

00807a18 <__sfp_lock_release>:
  807a18:	f800283a 	ret

00807a1c <__sinit_lock_acquire>:
  807a1c:	f800283a 	ret

00807a20 <__sinit_lock_release>:
  807a20:	f800283a 	ret

00807a24 <__fp_lock_all>:
  807a24:	00802074 	movhi	r2,129
  807a28:	1098df04 	addi	r2,r2,25468
  807a2c:	11000017 	ldw	r4,0(r2)
  807a30:	01402034 	movhi	r5,128
  807a34:	295e1904 	addi	r5,r5,30820
  807a38:	08083441 	jmpi	808344 <_fwalk>

00807a3c <__fp_unlock_all>:
  807a3c:	00802074 	movhi	r2,129
  807a40:	1098df04 	addi	r2,r2,25468
  807a44:	11000017 	ldw	r4,0(r2)
  807a48:	01402034 	movhi	r5,128
  807a4c:	295dad04 	addi	r5,r5,30388
  807a50:	08083441 	jmpi	808344 <_fwalk>

00807a54 <_malloc_trim_r>:
  807a54:	defffb04 	addi	sp,sp,-20
  807a58:	dcc00315 	stw	r19,12(sp)
  807a5c:	04c02074 	movhi	r19,129
  807a60:	dc800215 	stw	r18,8(sp)
  807a64:	dc400115 	stw	r17,4(sp)
  807a68:	dc000015 	stw	r16,0(sp)
  807a6c:	dfc00415 	stw	ra,16(sp)
  807a70:	2821883a 	mov	r16,r5
  807a74:	9cd2e104 	addi	r19,r19,19332
  807a78:	2025883a 	mov	r18,r4
  807a7c:	08104240 	call	810424 <__malloc_lock>
  807a80:	98800217 	ldw	r2,8(r19)
  807a84:	14400117 	ldw	r17,4(r2)
  807a88:	00bfff04 	movi	r2,-4
  807a8c:	88a2703a 	and	r17,r17,r2
  807a90:	8c21c83a 	sub	r16,r17,r16
  807a94:	8403fbc4 	addi	r16,r16,4079
  807a98:	8020d33a 	srli	r16,r16,12
  807a9c:	0083ffc4 	movi	r2,4095
  807aa0:	843fffc4 	addi	r16,r16,-1
  807aa4:	8020933a 	slli	r16,r16,12
  807aa8:	1400060e 	bge	r2,r16,807ac4 <_malloc_trim_r+0x70>
  807aac:	000b883a 	mov	r5,zero
  807ab0:	9009883a 	mov	r4,r18
  807ab4:	080a9f40 	call	80a9f4 <_sbrk_r>
  807ab8:	98c00217 	ldw	r3,8(r19)
  807abc:	1c47883a 	add	r3,r3,r17
  807ac0:	10c00a26 	beq	r2,r3,807aec <_malloc_trim_r+0x98>
  807ac4:	9009883a 	mov	r4,r18
  807ac8:	08104480 	call	810448 <__malloc_unlock>
  807acc:	0005883a 	mov	r2,zero
  807ad0:	dfc00417 	ldw	ra,16(sp)
  807ad4:	dcc00317 	ldw	r19,12(sp)
  807ad8:	dc800217 	ldw	r18,8(sp)
  807adc:	dc400117 	ldw	r17,4(sp)
  807ae0:	dc000017 	ldw	r16,0(sp)
  807ae4:	dec00504 	addi	sp,sp,20
  807ae8:	f800283a 	ret
  807aec:	040bc83a 	sub	r5,zero,r16
  807af0:	9009883a 	mov	r4,r18
  807af4:	080a9f40 	call	80a9f4 <_sbrk_r>
  807af8:	00ffffc4 	movi	r3,-1
  807afc:	10c00d26 	beq	r2,r3,807b34 <_malloc_trim_r+0xe0>
  807b00:	00c020b4 	movhi	r3,130
  807b04:	18e09004 	addi	r3,r3,-32192
  807b08:	18800017 	ldw	r2,0(r3)
  807b0c:	99000217 	ldw	r4,8(r19)
  807b10:	8c23c83a 	sub	r17,r17,r16
  807b14:	8c400054 	ori	r17,r17,1
  807b18:	1421c83a 	sub	r16,r2,r16
  807b1c:	24400115 	stw	r17,4(r4)
  807b20:	9009883a 	mov	r4,r18
  807b24:	1c000015 	stw	r16,0(r3)
  807b28:	08104480 	call	810448 <__malloc_unlock>
  807b2c:	00800044 	movi	r2,1
  807b30:	003fe706 	br	807ad0 <__alt_mem_onchip_mem+0xff787ad0>
  807b34:	000b883a 	mov	r5,zero
  807b38:	9009883a 	mov	r4,r18
  807b3c:	080a9f40 	call	80a9f4 <_sbrk_r>
  807b40:	99000217 	ldw	r4,8(r19)
  807b44:	014003c4 	movi	r5,15
  807b48:	1107c83a 	sub	r3,r2,r4
  807b4c:	28ffdd0e 	bge	r5,r3,807ac4 <__alt_mem_onchip_mem+0xff787ac4>
  807b50:	01402074 	movhi	r5,129
  807b54:	2958e104 	addi	r5,r5,25476
  807b58:	29400017 	ldw	r5,0(r5)
  807b5c:	18c00054 	ori	r3,r3,1
  807b60:	20c00115 	stw	r3,4(r4)
  807b64:	00c020b4 	movhi	r3,130
  807b68:	1145c83a 	sub	r2,r2,r5
  807b6c:	18e09004 	addi	r3,r3,-32192
  807b70:	18800015 	stw	r2,0(r3)
  807b74:	003fd306 	br	807ac4 <__alt_mem_onchip_mem+0xff787ac4>

00807b78 <_free_r>:
  807b78:	28004126 	beq	r5,zero,807c80 <_free_r+0x108>
  807b7c:	defffd04 	addi	sp,sp,-12
  807b80:	dc400115 	stw	r17,4(sp)
  807b84:	dc000015 	stw	r16,0(sp)
  807b88:	2023883a 	mov	r17,r4
  807b8c:	2821883a 	mov	r16,r5
  807b90:	dfc00215 	stw	ra,8(sp)
  807b94:	08104240 	call	810424 <__malloc_lock>
  807b98:	81ffff17 	ldw	r7,-4(r16)
  807b9c:	00bfff84 	movi	r2,-2
  807ba0:	01002074 	movhi	r4,129
  807ba4:	81bffe04 	addi	r6,r16,-8
  807ba8:	3884703a 	and	r2,r7,r2
  807bac:	2112e104 	addi	r4,r4,19332
  807bb0:	308b883a 	add	r5,r6,r2
  807bb4:	2a400117 	ldw	r9,4(r5)
  807bb8:	22000217 	ldw	r8,8(r4)
  807bbc:	00ffff04 	movi	r3,-4
  807bc0:	48c6703a 	and	r3,r9,r3
  807bc4:	2a005726 	beq	r5,r8,807d24 <_free_r+0x1ac>
  807bc8:	28c00115 	stw	r3,4(r5)
  807bcc:	39c0004c 	andi	r7,r7,1
  807bd0:	3800091e 	bne	r7,zero,807bf8 <_free_r+0x80>
  807bd4:	823ffe17 	ldw	r8,-8(r16)
  807bd8:	22400204 	addi	r9,r4,8
  807bdc:	320dc83a 	sub	r6,r6,r8
  807be0:	31c00217 	ldw	r7,8(r6)
  807be4:	1205883a 	add	r2,r2,r8
  807be8:	3a406526 	beq	r7,r9,807d80 <_free_r+0x208>
  807bec:	32000317 	ldw	r8,12(r6)
  807bf0:	3a000315 	stw	r8,12(r7)
  807bf4:	41c00215 	stw	r7,8(r8)
  807bf8:	28cf883a 	add	r7,r5,r3
  807bfc:	39c00117 	ldw	r7,4(r7)
  807c00:	39c0004c 	andi	r7,r7,1
  807c04:	38003a26 	beq	r7,zero,807cf0 <_free_r+0x178>
  807c08:	10c00054 	ori	r3,r2,1
  807c0c:	30c00115 	stw	r3,4(r6)
  807c10:	3087883a 	add	r3,r6,r2
  807c14:	18800015 	stw	r2,0(r3)
  807c18:	00c07fc4 	movi	r3,511
  807c1c:	18801936 	bltu	r3,r2,807c84 <_free_r+0x10c>
  807c20:	1004d0fa 	srli	r2,r2,3
  807c24:	01c00044 	movi	r7,1
  807c28:	21400117 	ldw	r5,4(r4)
  807c2c:	10c00044 	addi	r3,r2,1
  807c30:	18c7883a 	add	r3,r3,r3
  807c34:	1005d0ba 	srai	r2,r2,2
  807c38:	18c7883a 	add	r3,r3,r3
  807c3c:	18c7883a 	add	r3,r3,r3
  807c40:	1907883a 	add	r3,r3,r4
  807c44:	3884983a 	sll	r2,r7,r2
  807c48:	19c00017 	ldw	r7,0(r3)
  807c4c:	1a3ffe04 	addi	r8,r3,-8
  807c50:	1144b03a 	or	r2,r2,r5
  807c54:	32000315 	stw	r8,12(r6)
  807c58:	31c00215 	stw	r7,8(r6)
  807c5c:	20800115 	stw	r2,4(r4)
  807c60:	19800015 	stw	r6,0(r3)
  807c64:	39800315 	stw	r6,12(r7)
  807c68:	8809883a 	mov	r4,r17
  807c6c:	dfc00217 	ldw	ra,8(sp)
  807c70:	dc400117 	ldw	r17,4(sp)
  807c74:	dc000017 	ldw	r16,0(sp)
  807c78:	dec00304 	addi	sp,sp,12
  807c7c:	08104481 	jmpi	810448 <__malloc_unlock>
  807c80:	f800283a 	ret
  807c84:	100ad27a 	srli	r5,r2,9
  807c88:	00c00104 	movi	r3,4
  807c8c:	19404a36 	bltu	r3,r5,807db8 <_free_r+0x240>
  807c90:	100ad1ba 	srli	r5,r2,6
  807c94:	28c00e44 	addi	r3,r5,57
  807c98:	18c7883a 	add	r3,r3,r3
  807c9c:	29400e04 	addi	r5,r5,56
  807ca0:	18c7883a 	add	r3,r3,r3
  807ca4:	18c7883a 	add	r3,r3,r3
  807ca8:	1909883a 	add	r4,r3,r4
  807cac:	20c00017 	ldw	r3,0(r4)
  807cb0:	01c02074 	movhi	r7,129
  807cb4:	213ffe04 	addi	r4,r4,-8
  807cb8:	39d2e104 	addi	r7,r7,19332
  807cbc:	20c04426 	beq	r4,r3,807dd0 <_free_r+0x258>
  807cc0:	01ffff04 	movi	r7,-4
  807cc4:	19400117 	ldw	r5,4(r3)
  807cc8:	29ca703a 	and	r5,r5,r7
  807ccc:	1140022e 	bgeu	r2,r5,807cd8 <_free_r+0x160>
  807cd0:	18c00217 	ldw	r3,8(r3)
  807cd4:	20fffb1e 	bne	r4,r3,807cc4 <__alt_mem_onchip_mem+0xff787cc4>
  807cd8:	19000317 	ldw	r4,12(r3)
  807cdc:	31000315 	stw	r4,12(r6)
  807ce0:	30c00215 	stw	r3,8(r6)
  807ce4:	21800215 	stw	r6,8(r4)
  807ce8:	19800315 	stw	r6,12(r3)
  807cec:	003fde06 	br	807c68 <__alt_mem_onchip_mem+0xff787c68>
  807cf0:	29c00217 	ldw	r7,8(r5)
  807cf4:	10c5883a 	add	r2,r2,r3
  807cf8:	00c02074 	movhi	r3,129
  807cfc:	18d2e304 	addi	r3,r3,19340
  807d00:	38c03b26 	beq	r7,r3,807df0 <_free_r+0x278>
  807d04:	2a000317 	ldw	r8,12(r5)
  807d08:	11400054 	ori	r5,r2,1
  807d0c:	3087883a 	add	r3,r6,r2
  807d10:	3a000315 	stw	r8,12(r7)
  807d14:	41c00215 	stw	r7,8(r8)
  807d18:	31400115 	stw	r5,4(r6)
  807d1c:	18800015 	stw	r2,0(r3)
  807d20:	003fbd06 	br	807c18 <__alt_mem_onchip_mem+0xff787c18>
  807d24:	39c0004c 	andi	r7,r7,1
  807d28:	10c5883a 	add	r2,r2,r3
  807d2c:	3800071e 	bne	r7,zero,807d4c <_free_r+0x1d4>
  807d30:	81fffe17 	ldw	r7,-8(r16)
  807d34:	31cdc83a 	sub	r6,r6,r7
  807d38:	30c00317 	ldw	r3,12(r6)
  807d3c:	31400217 	ldw	r5,8(r6)
  807d40:	11c5883a 	add	r2,r2,r7
  807d44:	28c00315 	stw	r3,12(r5)
  807d48:	19400215 	stw	r5,8(r3)
  807d4c:	10c00054 	ori	r3,r2,1
  807d50:	30c00115 	stw	r3,4(r6)
  807d54:	00c02074 	movhi	r3,129
  807d58:	18d8e204 	addi	r3,r3,25480
  807d5c:	18c00017 	ldw	r3,0(r3)
  807d60:	21800215 	stw	r6,8(r4)
  807d64:	10ffc036 	bltu	r2,r3,807c68 <__alt_mem_onchip_mem+0xff787c68>
  807d68:	008020b4 	movhi	r2,130
  807d6c:	10a08104 	addi	r2,r2,-32252
  807d70:	11400017 	ldw	r5,0(r2)
  807d74:	8809883a 	mov	r4,r17
  807d78:	0807a540 	call	807a54 <_malloc_trim_r>
  807d7c:	003fba06 	br	807c68 <__alt_mem_onchip_mem+0xff787c68>
  807d80:	28c9883a 	add	r4,r5,r3
  807d84:	21000117 	ldw	r4,4(r4)
  807d88:	2100004c 	andi	r4,r4,1
  807d8c:	2000391e 	bne	r4,zero,807e74 <_free_r+0x2fc>
  807d90:	29c00217 	ldw	r7,8(r5)
  807d94:	29000317 	ldw	r4,12(r5)
  807d98:	1885883a 	add	r2,r3,r2
  807d9c:	10c00054 	ori	r3,r2,1
  807da0:	39000315 	stw	r4,12(r7)
  807da4:	21c00215 	stw	r7,8(r4)
  807da8:	30c00115 	stw	r3,4(r6)
  807dac:	308d883a 	add	r6,r6,r2
  807db0:	30800015 	stw	r2,0(r6)
  807db4:	003fac06 	br	807c68 <__alt_mem_onchip_mem+0xff787c68>
  807db8:	00c00504 	movi	r3,20
  807dbc:	19401536 	bltu	r3,r5,807e14 <_free_r+0x29c>
  807dc0:	28c01704 	addi	r3,r5,92
  807dc4:	18c7883a 	add	r3,r3,r3
  807dc8:	294016c4 	addi	r5,r5,91
  807dcc:	003fb406 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  807dd0:	280bd0ba 	srai	r5,r5,2
  807dd4:	00c00044 	movi	r3,1
  807dd8:	38800117 	ldw	r2,4(r7)
  807ddc:	194a983a 	sll	r5,r3,r5
  807de0:	2007883a 	mov	r3,r4
  807de4:	2884b03a 	or	r2,r5,r2
  807de8:	38800115 	stw	r2,4(r7)
  807dec:	003fbb06 	br	807cdc <__alt_mem_onchip_mem+0xff787cdc>
  807df0:	21800515 	stw	r6,20(r4)
  807df4:	21800415 	stw	r6,16(r4)
  807df8:	10c00054 	ori	r3,r2,1
  807dfc:	31c00315 	stw	r7,12(r6)
  807e00:	31c00215 	stw	r7,8(r6)
  807e04:	30c00115 	stw	r3,4(r6)
  807e08:	308d883a 	add	r6,r6,r2
  807e0c:	30800015 	stw	r2,0(r6)
  807e10:	003f9506 	br	807c68 <__alt_mem_onchip_mem+0xff787c68>
  807e14:	00c01504 	movi	r3,84
  807e18:	19400536 	bltu	r3,r5,807e30 <_free_r+0x2b8>
  807e1c:	100ad33a 	srli	r5,r2,12
  807e20:	28c01bc4 	addi	r3,r5,111
  807e24:	18c7883a 	add	r3,r3,r3
  807e28:	29401b84 	addi	r5,r5,110
  807e2c:	003f9c06 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  807e30:	00c05504 	movi	r3,340
  807e34:	19400536 	bltu	r3,r5,807e4c <_free_r+0x2d4>
  807e38:	100ad3fa 	srli	r5,r2,15
  807e3c:	28c01e04 	addi	r3,r5,120
  807e40:	18c7883a 	add	r3,r3,r3
  807e44:	29401dc4 	addi	r5,r5,119
  807e48:	003f9506 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  807e4c:	00c15504 	movi	r3,1364
  807e50:	19400536 	bltu	r3,r5,807e68 <_free_r+0x2f0>
  807e54:	100ad4ba 	srli	r5,r2,18
  807e58:	28c01f44 	addi	r3,r5,125
  807e5c:	18c7883a 	add	r3,r3,r3
  807e60:	29401f04 	addi	r5,r5,124
  807e64:	003f8e06 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  807e68:	00c03f84 	movi	r3,254
  807e6c:	01401f84 	movi	r5,126
  807e70:	003f8b06 	br	807ca0 <__alt_mem_onchip_mem+0xff787ca0>
  807e74:	10c00054 	ori	r3,r2,1
  807e78:	30c00115 	stw	r3,4(r6)
  807e7c:	308d883a 	add	r6,r6,r2
  807e80:	30800015 	stw	r2,0(r6)
  807e84:	003f7806 	br	807c68 <__alt_mem_onchip_mem+0xff787c68>

00807e88 <__sfvwrite_r>:
  807e88:	30800217 	ldw	r2,8(r6)
  807e8c:	10006726 	beq	r2,zero,80802c <__sfvwrite_r+0x1a4>
  807e90:	28c0030b 	ldhu	r3,12(r5)
  807e94:	defff404 	addi	sp,sp,-48
  807e98:	dd400715 	stw	r21,28(sp)
  807e9c:	dd000615 	stw	r20,24(sp)
  807ea0:	dc000215 	stw	r16,8(sp)
  807ea4:	dfc00b15 	stw	ra,44(sp)
  807ea8:	df000a15 	stw	fp,40(sp)
  807eac:	ddc00915 	stw	r23,36(sp)
  807eb0:	dd800815 	stw	r22,32(sp)
  807eb4:	dcc00515 	stw	r19,20(sp)
  807eb8:	dc800415 	stw	r18,16(sp)
  807ebc:	dc400315 	stw	r17,12(sp)
  807ec0:	1880020c 	andi	r2,r3,8
  807ec4:	2821883a 	mov	r16,r5
  807ec8:	202b883a 	mov	r21,r4
  807ecc:	3029883a 	mov	r20,r6
  807ed0:	10002726 	beq	r2,zero,807f70 <__sfvwrite_r+0xe8>
  807ed4:	28800417 	ldw	r2,16(r5)
  807ed8:	10002526 	beq	r2,zero,807f70 <__sfvwrite_r+0xe8>
  807edc:	1880008c 	andi	r2,r3,2
  807ee0:	a4400017 	ldw	r17,0(r20)
  807ee4:	10002a26 	beq	r2,zero,807f90 <__sfvwrite_r+0x108>
  807ee8:	05a00034 	movhi	r22,32768
  807eec:	0027883a 	mov	r19,zero
  807ef0:	0025883a 	mov	r18,zero
  807ef4:	b5bf0004 	addi	r22,r22,-1024
  807ef8:	980d883a 	mov	r6,r19
  807efc:	a809883a 	mov	r4,r21
  807f00:	90004626 	beq	r18,zero,80801c <__sfvwrite_r+0x194>
  807f04:	900f883a 	mov	r7,r18
  807f08:	b480022e 	bgeu	r22,r18,807f14 <__sfvwrite_r+0x8c>
  807f0c:	01e00034 	movhi	r7,32768
  807f10:	39ff0004 	addi	r7,r7,-1024
  807f14:	80800917 	ldw	r2,36(r16)
  807f18:	81400717 	ldw	r5,28(r16)
  807f1c:	103ee83a 	callr	r2
  807f20:	0080570e 	bge	zero,r2,808080 <__sfvwrite_r+0x1f8>
  807f24:	a0c00217 	ldw	r3,8(r20)
  807f28:	98a7883a 	add	r19,r19,r2
  807f2c:	90a5c83a 	sub	r18,r18,r2
  807f30:	1885c83a 	sub	r2,r3,r2
  807f34:	a0800215 	stw	r2,8(r20)
  807f38:	103fef1e 	bne	r2,zero,807ef8 <__alt_mem_onchip_mem+0xff787ef8>
  807f3c:	0005883a 	mov	r2,zero
  807f40:	dfc00b17 	ldw	ra,44(sp)
  807f44:	df000a17 	ldw	fp,40(sp)
  807f48:	ddc00917 	ldw	r23,36(sp)
  807f4c:	dd800817 	ldw	r22,32(sp)
  807f50:	dd400717 	ldw	r21,28(sp)
  807f54:	dd000617 	ldw	r20,24(sp)
  807f58:	dcc00517 	ldw	r19,20(sp)
  807f5c:	dc800417 	ldw	r18,16(sp)
  807f60:	dc400317 	ldw	r17,12(sp)
  807f64:	dc000217 	ldw	r16,8(sp)
  807f68:	dec00c04 	addi	sp,sp,48
  807f6c:	f800283a 	ret
  807f70:	800b883a 	mov	r5,r16
  807f74:	a809883a 	mov	r4,r21
  807f78:	0805a300 	call	805a30 <__swsetup_r>
  807f7c:	1000eb1e 	bne	r2,zero,80832c <__sfvwrite_r+0x4a4>
  807f80:	80c0030b 	ldhu	r3,12(r16)
  807f84:	a4400017 	ldw	r17,0(r20)
  807f88:	1880008c 	andi	r2,r3,2
  807f8c:	103fd61e 	bne	r2,zero,807ee8 <__alt_mem_onchip_mem+0xff787ee8>
  807f90:	1880004c 	andi	r2,r3,1
  807f94:	10003f1e 	bne	r2,zero,808094 <__sfvwrite_r+0x20c>
  807f98:	0039883a 	mov	fp,zero
  807f9c:	0025883a 	mov	r18,zero
  807fa0:	90001a26 	beq	r18,zero,80800c <__sfvwrite_r+0x184>
  807fa4:	1880800c 	andi	r2,r3,512
  807fa8:	84c00217 	ldw	r19,8(r16)
  807fac:	10002126 	beq	r2,zero,808034 <__sfvwrite_r+0x1ac>
  807fb0:	982f883a 	mov	r23,r19
  807fb4:	94c09336 	bltu	r18,r19,808204 <__sfvwrite_r+0x37c>
  807fb8:	1881200c 	andi	r2,r3,1152
  807fbc:	10009e1e 	bne	r2,zero,808238 <__sfvwrite_r+0x3b0>
  807fc0:	81000017 	ldw	r4,0(r16)
  807fc4:	b80d883a 	mov	r6,r23
  807fc8:	e00b883a 	mov	r5,fp
  807fcc:	080919c0 	call	80919c <memmove>
  807fd0:	80c00217 	ldw	r3,8(r16)
  807fd4:	81000017 	ldw	r4,0(r16)
  807fd8:	9005883a 	mov	r2,r18
  807fdc:	1ce7c83a 	sub	r19,r3,r19
  807fe0:	25cf883a 	add	r7,r4,r23
  807fe4:	84c00215 	stw	r19,8(r16)
  807fe8:	81c00015 	stw	r7,0(r16)
  807fec:	a0c00217 	ldw	r3,8(r20)
  807ff0:	e0b9883a 	add	fp,fp,r2
  807ff4:	90a5c83a 	sub	r18,r18,r2
  807ff8:	18a7c83a 	sub	r19,r3,r2
  807ffc:	a4c00215 	stw	r19,8(r20)
  808000:	983fce26 	beq	r19,zero,807f3c <__alt_mem_onchip_mem+0xff787f3c>
  808004:	80c0030b 	ldhu	r3,12(r16)
  808008:	903fe61e 	bne	r18,zero,807fa4 <__alt_mem_onchip_mem+0xff787fa4>
  80800c:	8f000017 	ldw	fp,0(r17)
  808010:	8c800117 	ldw	r18,4(r17)
  808014:	8c400204 	addi	r17,r17,8
  808018:	003fe106 	br	807fa0 <__alt_mem_onchip_mem+0xff787fa0>
  80801c:	8cc00017 	ldw	r19,0(r17)
  808020:	8c800117 	ldw	r18,4(r17)
  808024:	8c400204 	addi	r17,r17,8
  808028:	003fb306 	br	807ef8 <__alt_mem_onchip_mem+0xff787ef8>
  80802c:	0005883a 	mov	r2,zero
  808030:	f800283a 	ret
  808034:	81000017 	ldw	r4,0(r16)
  808038:	80800417 	ldw	r2,16(r16)
  80803c:	11005736 	bltu	r2,r4,80819c <__sfvwrite_r+0x314>
  808040:	85c00517 	ldw	r23,20(r16)
  808044:	95c05536 	bltu	r18,r23,80819c <__sfvwrite_r+0x314>
  808048:	00a00034 	movhi	r2,32768
  80804c:	10bfffc4 	addi	r2,r2,-1
  808050:	9009883a 	mov	r4,r18
  808054:	1480012e 	bgeu	r2,r18,80805c <__sfvwrite_r+0x1d4>
  808058:	1009883a 	mov	r4,r2
  80805c:	b80b883a 	mov	r5,r23
  808060:	080d68c0 	call	80d68c <__divsi3>
  808064:	15cf383a 	mul	r7,r2,r23
  808068:	81400717 	ldw	r5,28(r16)
  80806c:	80800917 	ldw	r2,36(r16)
  808070:	e00d883a 	mov	r6,fp
  808074:	a809883a 	mov	r4,r21
  808078:	103ee83a 	callr	r2
  80807c:	00bfdb16 	blt	zero,r2,807fec <__alt_mem_onchip_mem+0xff787fec>
  808080:	8080030b 	ldhu	r2,12(r16)
  808084:	10801014 	ori	r2,r2,64
  808088:	8080030d 	sth	r2,12(r16)
  80808c:	00bfffc4 	movi	r2,-1
  808090:	003fab06 	br	807f40 <__alt_mem_onchip_mem+0xff787f40>
  808094:	0027883a 	mov	r19,zero
  808098:	0011883a 	mov	r8,zero
  80809c:	0039883a 	mov	fp,zero
  8080a0:	0025883a 	mov	r18,zero
  8080a4:	90001f26 	beq	r18,zero,808124 <__sfvwrite_r+0x29c>
  8080a8:	40005a26 	beq	r8,zero,808214 <__sfvwrite_r+0x38c>
  8080ac:	982d883a 	mov	r22,r19
  8080b0:	94c0012e 	bgeu	r18,r19,8080b8 <__sfvwrite_r+0x230>
  8080b4:	902d883a 	mov	r22,r18
  8080b8:	81000017 	ldw	r4,0(r16)
  8080bc:	80800417 	ldw	r2,16(r16)
  8080c0:	b02f883a 	mov	r23,r22
  8080c4:	81c00517 	ldw	r7,20(r16)
  8080c8:	1100032e 	bgeu	r2,r4,8080d8 <__sfvwrite_r+0x250>
  8080cc:	80c00217 	ldw	r3,8(r16)
  8080d0:	38c7883a 	add	r3,r7,r3
  8080d4:	1d801816 	blt	r3,r22,808138 <__sfvwrite_r+0x2b0>
  8080d8:	b1c03e16 	blt	r22,r7,8081d4 <__sfvwrite_r+0x34c>
  8080dc:	80800917 	ldw	r2,36(r16)
  8080e0:	81400717 	ldw	r5,28(r16)
  8080e4:	e00d883a 	mov	r6,fp
  8080e8:	da000115 	stw	r8,4(sp)
  8080ec:	a809883a 	mov	r4,r21
  8080f0:	103ee83a 	callr	r2
  8080f4:	102f883a 	mov	r23,r2
  8080f8:	da000117 	ldw	r8,4(sp)
  8080fc:	00bfe00e 	bge	zero,r2,808080 <__alt_mem_onchip_mem+0xff788080>
  808100:	9de7c83a 	sub	r19,r19,r23
  808104:	98001f26 	beq	r19,zero,808184 <__sfvwrite_r+0x2fc>
  808108:	a0800217 	ldw	r2,8(r20)
  80810c:	e5f9883a 	add	fp,fp,r23
  808110:	95e5c83a 	sub	r18,r18,r23
  808114:	15efc83a 	sub	r23,r2,r23
  808118:	a5c00215 	stw	r23,8(r20)
  80811c:	b83f8726 	beq	r23,zero,807f3c <__alt_mem_onchip_mem+0xff787f3c>
  808120:	903fe11e 	bne	r18,zero,8080a8 <__alt_mem_onchip_mem+0xff7880a8>
  808124:	8f000017 	ldw	fp,0(r17)
  808128:	8c800117 	ldw	r18,4(r17)
  80812c:	0011883a 	mov	r8,zero
  808130:	8c400204 	addi	r17,r17,8
  808134:	003fdb06 	br	8080a4 <__alt_mem_onchip_mem+0xff7880a4>
  808138:	180d883a 	mov	r6,r3
  80813c:	e00b883a 	mov	r5,fp
  808140:	da000115 	stw	r8,4(sp)
  808144:	d8c00015 	stw	r3,0(sp)
  808148:	080919c0 	call	80919c <memmove>
  80814c:	d8c00017 	ldw	r3,0(sp)
  808150:	80800017 	ldw	r2,0(r16)
  808154:	800b883a 	mov	r5,r16
  808158:	a809883a 	mov	r4,r21
  80815c:	10c5883a 	add	r2,r2,r3
  808160:	80800015 	stw	r2,0(r16)
  808164:	d8c00015 	stw	r3,0(sp)
  808168:	08076280 	call	807628 <_fflush_r>
  80816c:	d8c00017 	ldw	r3,0(sp)
  808170:	da000117 	ldw	r8,4(sp)
  808174:	103fc21e 	bne	r2,zero,808080 <__alt_mem_onchip_mem+0xff788080>
  808178:	182f883a 	mov	r23,r3
  80817c:	9de7c83a 	sub	r19,r19,r23
  808180:	983fe11e 	bne	r19,zero,808108 <__alt_mem_onchip_mem+0xff788108>
  808184:	800b883a 	mov	r5,r16
  808188:	a809883a 	mov	r4,r21
  80818c:	08076280 	call	807628 <_fflush_r>
  808190:	103fbb1e 	bne	r2,zero,808080 <__alt_mem_onchip_mem+0xff788080>
  808194:	0011883a 	mov	r8,zero
  808198:	003fdb06 	br	808108 <__alt_mem_onchip_mem+0xff788108>
  80819c:	94c0012e 	bgeu	r18,r19,8081a4 <__sfvwrite_r+0x31c>
  8081a0:	9027883a 	mov	r19,r18
  8081a4:	980d883a 	mov	r6,r19
  8081a8:	e00b883a 	mov	r5,fp
  8081ac:	080919c0 	call	80919c <memmove>
  8081b0:	80800217 	ldw	r2,8(r16)
  8081b4:	80c00017 	ldw	r3,0(r16)
  8081b8:	14c5c83a 	sub	r2,r2,r19
  8081bc:	1cc7883a 	add	r3,r3,r19
  8081c0:	80800215 	stw	r2,8(r16)
  8081c4:	80c00015 	stw	r3,0(r16)
  8081c8:	10004326 	beq	r2,zero,8082d8 <__sfvwrite_r+0x450>
  8081cc:	9805883a 	mov	r2,r19
  8081d0:	003f8606 	br	807fec <__alt_mem_onchip_mem+0xff787fec>
  8081d4:	b00d883a 	mov	r6,r22
  8081d8:	e00b883a 	mov	r5,fp
  8081dc:	da000115 	stw	r8,4(sp)
  8081e0:	080919c0 	call	80919c <memmove>
  8081e4:	80800217 	ldw	r2,8(r16)
  8081e8:	80c00017 	ldw	r3,0(r16)
  8081ec:	da000117 	ldw	r8,4(sp)
  8081f0:	1585c83a 	sub	r2,r2,r22
  8081f4:	1dad883a 	add	r22,r3,r22
  8081f8:	80800215 	stw	r2,8(r16)
  8081fc:	85800015 	stw	r22,0(r16)
  808200:	003fbf06 	br	808100 <__alt_mem_onchip_mem+0xff788100>
  808204:	81000017 	ldw	r4,0(r16)
  808208:	9027883a 	mov	r19,r18
  80820c:	902f883a 	mov	r23,r18
  808210:	003f6c06 	br	807fc4 <__alt_mem_onchip_mem+0xff787fc4>
  808214:	900d883a 	mov	r6,r18
  808218:	01400284 	movi	r5,10
  80821c:	e009883a 	mov	r4,fp
  808220:	0808f700 	call	808f70 <memchr>
  808224:	10003e26 	beq	r2,zero,808320 <__sfvwrite_r+0x498>
  808228:	10800044 	addi	r2,r2,1
  80822c:	1727c83a 	sub	r19,r2,fp
  808230:	02000044 	movi	r8,1
  808234:	003f9d06 	br	8080ac <__alt_mem_onchip_mem+0xff7880ac>
  808238:	80800517 	ldw	r2,20(r16)
  80823c:	81400417 	ldw	r5,16(r16)
  808240:	81c00017 	ldw	r7,0(r16)
  808244:	10a7883a 	add	r19,r2,r2
  808248:	9885883a 	add	r2,r19,r2
  80824c:	1026d7fa 	srli	r19,r2,31
  808250:	396dc83a 	sub	r22,r7,r5
  808254:	b1000044 	addi	r4,r22,1
  808258:	9885883a 	add	r2,r19,r2
  80825c:	1027d07a 	srai	r19,r2,1
  808260:	2485883a 	add	r2,r4,r18
  808264:	980d883a 	mov	r6,r19
  808268:	9880022e 	bgeu	r19,r2,808274 <__sfvwrite_r+0x3ec>
  80826c:	1027883a 	mov	r19,r2
  808270:	100d883a 	mov	r6,r2
  808274:	18c1000c 	andi	r3,r3,1024
  808278:	18001c26 	beq	r3,zero,8082ec <__sfvwrite_r+0x464>
  80827c:	300b883a 	mov	r5,r6
  808280:	a809883a 	mov	r4,r21
  808284:	08087640 	call	808764 <_malloc_r>
  808288:	102f883a 	mov	r23,r2
  80828c:	10002926 	beq	r2,zero,808334 <__sfvwrite_r+0x4ac>
  808290:	81400417 	ldw	r5,16(r16)
  808294:	b00d883a 	mov	r6,r22
  808298:	1009883a 	mov	r4,r2
  80829c:	08090540 	call	809054 <memcpy>
  8082a0:	8080030b 	ldhu	r2,12(r16)
  8082a4:	00fedfc4 	movi	r3,-1153
  8082a8:	10c4703a 	and	r2,r2,r3
  8082ac:	10802014 	ori	r2,r2,128
  8082b0:	8080030d 	sth	r2,12(r16)
  8082b4:	bd89883a 	add	r4,r23,r22
  8082b8:	9d8fc83a 	sub	r7,r19,r22
  8082bc:	85c00415 	stw	r23,16(r16)
  8082c0:	84c00515 	stw	r19,20(r16)
  8082c4:	81000015 	stw	r4,0(r16)
  8082c8:	9027883a 	mov	r19,r18
  8082cc:	81c00215 	stw	r7,8(r16)
  8082d0:	902f883a 	mov	r23,r18
  8082d4:	003f3b06 	br	807fc4 <__alt_mem_onchip_mem+0xff787fc4>
  8082d8:	800b883a 	mov	r5,r16
  8082dc:	a809883a 	mov	r4,r21
  8082e0:	08076280 	call	807628 <_fflush_r>
  8082e4:	103fb926 	beq	r2,zero,8081cc <__alt_mem_onchip_mem+0xff7881cc>
  8082e8:	003f6506 	br	808080 <__alt_mem_onchip_mem+0xff788080>
  8082ec:	a809883a 	mov	r4,r21
  8082f0:	080a41c0 	call	80a41c <_realloc_r>
  8082f4:	102f883a 	mov	r23,r2
  8082f8:	103fee1e 	bne	r2,zero,8082b4 <__alt_mem_onchip_mem+0xff7882b4>
  8082fc:	81400417 	ldw	r5,16(r16)
  808300:	a809883a 	mov	r4,r21
  808304:	0807b780 	call	807b78 <_free_r>
  808308:	8080030b 	ldhu	r2,12(r16)
  80830c:	00ffdfc4 	movi	r3,-129
  808310:	1884703a 	and	r2,r3,r2
  808314:	00c00304 	movi	r3,12
  808318:	a8c00015 	stw	r3,0(r21)
  80831c:	003f5906 	br	808084 <__alt_mem_onchip_mem+0xff788084>
  808320:	94c00044 	addi	r19,r18,1
  808324:	02000044 	movi	r8,1
  808328:	003f6006 	br	8080ac <__alt_mem_onchip_mem+0xff7880ac>
  80832c:	00bfffc4 	movi	r2,-1
  808330:	003f0306 	br	807f40 <__alt_mem_onchip_mem+0xff787f40>
  808334:	00800304 	movi	r2,12
  808338:	a8800015 	stw	r2,0(r21)
  80833c:	8080030b 	ldhu	r2,12(r16)
  808340:	003f5006 	br	808084 <__alt_mem_onchip_mem+0xff788084>

00808344 <_fwalk>:
  808344:	defff704 	addi	sp,sp,-36
  808348:	dd000415 	stw	r20,16(sp)
  80834c:	dfc00815 	stw	ra,32(sp)
  808350:	ddc00715 	stw	r23,28(sp)
  808354:	dd800615 	stw	r22,24(sp)
  808358:	dd400515 	stw	r21,20(sp)
  80835c:	dcc00315 	stw	r19,12(sp)
  808360:	dc800215 	stw	r18,8(sp)
  808364:	dc400115 	stw	r17,4(sp)
  808368:	dc000015 	stw	r16,0(sp)
  80836c:	2500b804 	addi	r20,r4,736
  808370:	a0002326 	beq	r20,zero,808400 <_fwalk+0xbc>
  808374:	282b883a 	mov	r21,r5
  808378:	002f883a 	mov	r23,zero
  80837c:	05800044 	movi	r22,1
  808380:	04ffffc4 	movi	r19,-1
  808384:	a4400117 	ldw	r17,4(r20)
  808388:	a4800217 	ldw	r18,8(r20)
  80838c:	8c7fffc4 	addi	r17,r17,-1
  808390:	88000d16 	blt	r17,zero,8083c8 <_fwalk+0x84>
  808394:	94000304 	addi	r16,r18,12
  808398:	94800384 	addi	r18,r18,14
  80839c:	8080000b 	ldhu	r2,0(r16)
  8083a0:	8c7fffc4 	addi	r17,r17,-1
  8083a4:	813ffd04 	addi	r4,r16,-12
  8083a8:	b080042e 	bgeu	r22,r2,8083bc <_fwalk+0x78>
  8083ac:	9080000f 	ldh	r2,0(r18)
  8083b0:	14c00226 	beq	r2,r19,8083bc <_fwalk+0x78>
  8083b4:	a83ee83a 	callr	r21
  8083b8:	b8aeb03a 	or	r23,r23,r2
  8083bc:	84001a04 	addi	r16,r16,104
  8083c0:	94801a04 	addi	r18,r18,104
  8083c4:	8cfff51e 	bne	r17,r19,80839c <__alt_mem_onchip_mem+0xff78839c>
  8083c8:	a5000017 	ldw	r20,0(r20)
  8083cc:	a03fed1e 	bne	r20,zero,808384 <__alt_mem_onchip_mem+0xff788384>
  8083d0:	b805883a 	mov	r2,r23
  8083d4:	dfc00817 	ldw	ra,32(sp)
  8083d8:	ddc00717 	ldw	r23,28(sp)
  8083dc:	dd800617 	ldw	r22,24(sp)
  8083e0:	dd400517 	ldw	r21,20(sp)
  8083e4:	dd000417 	ldw	r20,16(sp)
  8083e8:	dcc00317 	ldw	r19,12(sp)
  8083ec:	dc800217 	ldw	r18,8(sp)
  8083f0:	dc400117 	ldw	r17,4(sp)
  8083f4:	dc000017 	ldw	r16,0(sp)
  8083f8:	dec00904 	addi	sp,sp,36
  8083fc:	f800283a 	ret
  808400:	002f883a 	mov	r23,zero
  808404:	003ff206 	br	8083d0 <__alt_mem_onchip_mem+0xff7883d0>

00808408 <_fwalk_reent>:
  808408:	defff704 	addi	sp,sp,-36
  80840c:	dd000415 	stw	r20,16(sp)
  808410:	dfc00815 	stw	ra,32(sp)
  808414:	ddc00715 	stw	r23,28(sp)
  808418:	dd800615 	stw	r22,24(sp)
  80841c:	dd400515 	stw	r21,20(sp)
  808420:	dcc00315 	stw	r19,12(sp)
  808424:	dc800215 	stw	r18,8(sp)
  808428:	dc400115 	stw	r17,4(sp)
  80842c:	dc000015 	stw	r16,0(sp)
  808430:	2500b804 	addi	r20,r4,736
  808434:	a0002326 	beq	r20,zero,8084c4 <_fwalk_reent+0xbc>
  808438:	282b883a 	mov	r21,r5
  80843c:	2027883a 	mov	r19,r4
  808440:	002f883a 	mov	r23,zero
  808444:	05800044 	movi	r22,1
  808448:	04bfffc4 	movi	r18,-1
  80844c:	a4400117 	ldw	r17,4(r20)
  808450:	a4000217 	ldw	r16,8(r20)
  808454:	8c7fffc4 	addi	r17,r17,-1
  808458:	88000c16 	blt	r17,zero,80848c <_fwalk_reent+0x84>
  80845c:	84000304 	addi	r16,r16,12
  808460:	8080000b 	ldhu	r2,0(r16)
  808464:	8c7fffc4 	addi	r17,r17,-1
  808468:	817ffd04 	addi	r5,r16,-12
  80846c:	b080052e 	bgeu	r22,r2,808484 <_fwalk_reent+0x7c>
  808470:	8080008f 	ldh	r2,2(r16)
  808474:	9809883a 	mov	r4,r19
  808478:	14800226 	beq	r2,r18,808484 <_fwalk_reent+0x7c>
  80847c:	a83ee83a 	callr	r21
  808480:	b8aeb03a 	or	r23,r23,r2
  808484:	84001a04 	addi	r16,r16,104
  808488:	8cbff51e 	bne	r17,r18,808460 <__alt_mem_onchip_mem+0xff788460>
  80848c:	a5000017 	ldw	r20,0(r20)
  808490:	a03fee1e 	bne	r20,zero,80844c <__alt_mem_onchip_mem+0xff78844c>
  808494:	b805883a 	mov	r2,r23
  808498:	dfc00817 	ldw	ra,32(sp)
  80849c:	ddc00717 	ldw	r23,28(sp)
  8084a0:	dd800617 	ldw	r22,24(sp)
  8084a4:	dd400517 	ldw	r21,20(sp)
  8084a8:	dd000417 	ldw	r20,16(sp)
  8084ac:	dcc00317 	ldw	r19,12(sp)
  8084b0:	dc800217 	ldw	r18,8(sp)
  8084b4:	dc400117 	ldw	r17,4(sp)
  8084b8:	dc000017 	ldw	r16,0(sp)
  8084bc:	dec00904 	addi	sp,sp,36
  8084c0:	f800283a 	ret
  8084c4:	002f883a 	mov	r23,zero
  8084c8:	003ff206 	br	808494 <__alt_mem_onchip_mem+0xff788494>

008084cc <_setlocale_r>:
  8084cc:	30001b26 	beq	r6,zero,80853c <_setlocale_r+0x70>
  8084d0:	01402074 	movhi	r5,129
  8084d4:	defffe04 	addi	sp,sp,-8
  8084d8:	29506f04 	addi	r5,r5,16828
  8084dc:	3009883a 	mov	r4,r6
  8084e0:	dc000015 	stw	r16,0(sp)
  8084e4:	dfc00115 	stw	ra,4(sp)
  8084e8:	3021883a 	mov	r16,r6
  8084ec:	080ab840 	call	80ab84 <strcmp>
  8084f0:	1000061e 	bne	r2,zero,80850c <_setlocale_r+0x40>
  8084f4:	00802074 	movhi	r2,129
  8084f8:	10905004 	addi	r2,r2,16704
  8084fc:	dfc00117 	ldw	ra,4(sp)
  808500:	dc000017 	ldw	r16,0(sp)
  808504:	dec00204 	addi	sp,sp,8
  808508:	f800283a 	ret
  80850c:	01402074 	movhi	r5,129
  808510:	29505004 	addi	r5,r5,16704
  808514:	8009883a 	mov	r4,r16
  808518:	080ab840 	call	80ab84 <strcmp>
  80851c:	103ff526 	beq	r2,zero,8084f4 <__alt_mem_onchip_mem+0xff7884f4>
  808520:	01402074 	movhi	r5,129
  808524:	29505a04 	addi	r5,r5,16744
  808528:	8009883a 	mov	r4,r16
  80852c:	080ab840 	call	80ab84 <strcmp>
  808530:	103ff026 	beq	r2,zero,8084f4 <__alt_mem_onchip_mem+0xff7884f4>
  808534:	0005883a 	mov	r2,zero
  808538:	003ff006 	br	8084fc <__alt_mem_onchip_mem+0xff7884fc>
  80853c:	00802074 	movhi	r2,129
  808540:	10905004 	addi	r2,r2,16704
  808544:	f800283a 	ret

00808548 <__locale_charset>:
  808548:	00802074 	movhi	r2,129
  80854c:	1092cb04 	addi	r2,r2,19244
  808550:	f800283a 	ret

00808554 <__locale_mb_cur_max>:
  808554:	00802074 	movhi	r2,129
  808558:	1098e004 	addi	r2,r2,25472
  80855c:	10800017 	ldw	r2,0(r2)
  808560:	f800283a 	ret

00808564 <__locale_msgcharset>:
  808564:	00802074 	movhi	r2,129
  808568:	1092c304 	addi	r2,r2,19212
  80856c:	f800283a 	ret

00808570 <__locale_cjk_lang>:
  808570:	0005883a 	mov	r2,zero
  808574:	f800283a 	ret

00808578 <_localeconv_r>:
  808578:	00802074 	movhi	r2,129
  80857c:	1092d304 	addi	r2,r2,19276
  808580:	f800283a 	ret

00808584 <setlocale>:
  808584:	00802074 	movhi	r2,129
  808588:	1098df04 	addi	r2,r2,25468
  80858c:	280d883a 	mov	r6,r5
  808590:	200b883a 	mov	r5,r4
  808594:	11000017 	ldw	r4,0(r2)
  808598:	08084cc1 	jmpi	8084cc <_setlocale_r>

0080859c <localeconv>:
  80859c:	00802074 	movhi	r2,129
  8085a0:	1092d304 	addi	r2,r2,19276
  8085a4:	f800283a 	ret

008085a8 <__smakebuf_r>:
  8085a8:	2880030b 	ldhu	r2,12(r5)
  8085ac:	10c0008c 	andi	r3,r2,2
  8085b0:	1800411e 	bne	r3,zero,8086b8 <__smakebuf_r+0x110>
  8085b4:	deffec04 	addi	sp,sp,-80
  8085b8:	dc000f15 	stw	r16,60(sp)
  8085bc:	2821883a 	mov	r16,r5
  8085c0:	2940038f 	ldh	r5,14(r5)
  8085c4:	dc401015 	stw	r17,64(sp)
  8085c8:	dfc01315 	stw	ra,76(sp)
  8085cc:	dcc01215 	stw	r19,72(sp)
  8085d0:	dc801115 	stw	r18,68(sp)
  8085d4:	2023883a 	mov	r17,r4
  8085d8:	28001c16 	blt	r5,zero,80864c <__smakebuf_r+0xa4>
  8085dc:	d80d883a 	mov	r6,sp
  8085e0:	080c72c0 	call	80c72c <_fstat_r>
  8085e4:	10001816 	blt	r2,zero,808648 <__smakebuf_r+0xa0>
  8085e8:	d8800117 	ldw	r2,4(sp)
  8085ec:	00e00014 	movui	r3,32768
  8085f0:	10bc000c 	andi	r2,r2,61440
  8085f4:	14c80020 	cmpeqi	r19,r2,8192
  8085f8:	10c03726 	beq	r2,r3,8086d8 <__smakebuf_r+0x130>
  8085fc:	80c0030b 	ldhu	r3,12(r16)
  808600:	18c20014 	ori	r3,r3,2048
  808604:	80c0030d 	sth	r3,12(r16)
  808608:	00c80004 	movi	r3,8192
  80860c:	10c0521e 	bne	r2,r3,808758 <__smakebuf_r+0x1b0>
  808610:	8140038f 	ldh	r5,14(r16)
  808614:	8809883a 	mov	r4,r17
  808618:	080c7880 	call	80c788 <_isatty_r>
  80861c:	10004c26 	beq	r2,zero,808750 <__smakebuf_r+0x1a8>
  808620:	8080030b 	ldhu	r2,12(r16)
  808624:	80c010c4 	addi	r3,r16,67
  808628:	80c00015 	stw	r3,0(r16)
  80862c:	10800054 	ori	r2,r2,1
  808630:	8080030d 	sth	r2,12(r16)
  808634:	00800044 	movi	r2,1
  808638:	80c00415 	stw	r3,16(r16)
  80863c:	80800515 	stw	r2,20(r16)
  808640:	04810004 	movi	r18,1024
  808644:	00000706 	br	808664 <__smakebuf_r+0xbc>
  808648:	8080030b 	ldhu	r2,12(r16)
  80864c:	10c0200c 	andi	r3,r2,128
  808650:	18001f1e 	bne	r3,zero,8086d0 <__smakebuf_r+0x128>
  808654:	04810004 	movi	r18,1024
  808658:	10820014 	ori	r2,r2,2048
  80865c:	8080030d 	sth	r2,12(r16)
  808660:	0027883a 	mov	r19,zero
  808664:	900b883a 	mov	r5,r18
  808668:	8809883a 	mov	r4,r17
  80866c:	08087640 	call	808764 <_malloc_r>
  808670:	10002c26 	beq	r2,zero,808724 <__smakebuf_r+0x17c>
  808674:	80c0030b 	ldhu	r3,12(r16)
  808678:	01002034 	movhi	r4,128
  80867c:	211daf04 	addi	r4,r4,30396
  808680:	89000f15 	stw	r4,60(r17)
  808684:	18c02014 	ori	r3,r3,128
  808688:	80c0030d 	sth	r3,12(r16)
  80868c:	80800015 	stw	r2,0(r16)
  808690:	80800415 	stw	r2,16(r16)
  808694:	84800515 	stw	r18,20(r16)
  808698:	98001a1e 	bne	r19,zero,808704 <__smakebuf_r+0x15c>
  80869c:	dfc01317 	ldw	ra,76(sp)
  8086a0:	dcc01217 	ldw	r19,72(sp)
  8086a4:	dc801117 	ldw	r18,68(sp)
  8086a8:	dc401017 	ldw	r17,64(sp)
  8086ac:	dc000f17 	ldw	r16,60(sp)
  8086b0:	dec01404 	addi	sp,sp,80
  8086b4:	f800283a 	ret
  8086b8:	288010c4 	addi	r2,r5,67
  8086bc:	28800015 	stw	r2,0(r5)
  8086c0:	28800415 	stw	r2,16(r5)
  8086c4:	00800044 	movi	r2,1
  8086c8:	28800515 	stw	r2,20(r5)
  8086cc:	f800283a 	ret
  8086d0:	04801004 	movi	r18,64
  8086d4:	003fe006 	br	808658 <__alt_mem_onchip_mem+0xff788658>
  8086d8:	81000a17 	ldw	r4,40(r16)
  8086dc:	00c02074 	movhi	r3,129
  8086e0:	18eac804 	addi	r3,r3,-21728
  8086e4:	20ffc51e 	bne	r4,r3,8085fc <__alt_mem_onchip_mem+0xff7885fc>
  8086e8:	8080030b 	ldhu	r2,12(r16)
  8086ec:	04810004 	movi	r18,1024
  8086f0:	84801315 	stw	r18,76(r16)
  8086f4:	1484b03a 	or	r2,r2,r18
  8086f8:	8080030d 	sth	r2,12(r16)
  8086fc:	0027883a 	mov	r19,zero
  808700:	003fd806 	br	808664 <__alt_mem_onchip_mem+0xff788664>
  808704:	8140038f 	ldh	r5,14(r16)
  808708:	8809883a 	mov	r4,r17
  80870c:	080c7880 	call	80c788 <_isatty_r>
  808710:	103fe226 	beq	r2,zero,80869c <__alt_mem_onchip_mem+0xff78869c>
  808714:	8080030b 	ldhu	r2,12(r16)
  808718:	10800054 	ori	r2,r2,1
  80871c:	8080030d 	sth	r2,12(r16)
  808720:	003fde06 	br	80869c <__alt_mem_onchip_mem+0xff78869c>
  808724:	8080030b 	ldhu	r2,12(r16)
  808728:	10c0800c 	andi	r3,r2,512
  80872c:	183fdb1e 	bne	r3,zero,80869c <__alt_mem_onchip_mem+0xff78869c>
  808730:	10800094 	ori	r2,r2,2
  808734:	80c010c4 	addi	r3,r16,67
  808738:	8080030d 	sth	r2,12(r16)
  80873c:	00800044 	movi	r2,1
  808740:	80c00015 	stw	r3,0(r16)
  808744:	80c00415 	stw	r3,16(r16)
  808748:	80800515 	stw	r2,20(r16)
  80874c:	003fd306 	br	80869c <__alt_mem_onchip_mem+0xff78869c>
  808750:	04810004 	movi	r18,1024
  808754:	003fc306 	br	808664 <__alt_mem_onchip_mem+0xff788664>
  808758:	0027883a 	mov	r19,zero
  80875c:	04810004 	movi	r18,1024
  808760:	003fc006 	br	808664 <__alt_mem_onchip_mem+0xff788664>

00808764 <_malloc_r>:
  808764:	defff504 	addi	sp,sp,-44
  808768:	dc800315 	stw	r18,12(sp)
  80876c:	dfc00a15 	stw	ra,40(sp)
  808770:	df000915 	stw	fp,36(sp)
  808774:	ddc00815 	stw	r23,32(sp)
  808778:	dd800715 	stw	r22,28(sp)
  80877c:	dd400615 	stw	r21,24(sp)
  808780:	dd000515 	stw	r20,20(sp)
  808784:	dcc00415 	stw	r19,16(sp)
  808788:	dc400215 	stw	r17,8(sp)
  80878c:	dc000115 	stw	r16,4(sp)
  808790:	288002c4 	addi	r2,r5,11
  808794:	00c00584 	movi	r3,22
  808798:	2025883a 	mov	r18,r4
  80879c:	18807f2e 	bgeu	r3,r2,80899c <_malloc_r+0x238>
  8087a0:	047ffe04 	movi	r17,-8
  8087a4:	1462703a 	and	r17,r2,r17
  8087a8:	8800a316 	blt	r17,zero,808a38 <_malloc_r+0x2d4>
  8087ac:	8940a236 	bltu	r17,r5,808a38 <_malloc_r+0x2d4>
  8087b0:	08104240 	call	810424 <__malloc_lock>
  8087b4:	00807dc4 	movi	r2,503
  8087b8:	1441e92e 	bgeu	r2,r17,808f60 <_malloc_r+0x7fc>
  8087bc:	8804d27a 	srli	r2,r17,9
  8087c0:	1000a126 	beq	r2,zero,808a48 <_malloc_r+0x2e4>
  8087c4:	00c00104 	movi	r3,4
  8087c8:	18811e36 	bltu	r3,r2,808c44 <_malloc_r+0x4e0>
  8087cc:	8804d1ba 	srli	r2,r17,6
  8087d0:	12000e44 	addi	r8,r2,57
  8087d4:	11c00e04 	addi	r7,r2,56
  8087d8:	4209883a 	add	r4,r8,r8
  8087dc:	04c02074 	movhi	r19,129
  8087e0:	2109883a 	add	r4,r4,r4
  8087e4:	9cd2e104 	addi	r19,r19,19332
  8087e8:	2109883a 	add	r4,r4,r4
  8087ec:	9909883a 	add	r4,r19,r4
  8087f0:	24000117 	ldw	r16,4(r4)
  8087f4:	213ffe04 	addi	r4,r4,-8
  8087f8:	24009726 	beq	r4,r16,808a58 <_malloc_r+0x2f4>
  8087fc:	80800117 	ldw	r2,4(r16)
  808800:	01bfff04 	movi	r6,-4
  808804:	014003c4 	movi	r5,15
  808808:	1184703a 	and	r2,r2,r6
  80880c:	1447c83a 	sub	r3,r2,r17
  808810:	28c00716 	blt	r5,r3,808830 <_malloc_r+0xcc>
  808814:	1800920e 	bge	r3,zero,808a60 <_malloc_r+0x2fc>
  808818:	84000317 	ldw	r16,12(r16)
  80881c:	24008e26 	beq	r4,r16,808a58 <_malloc_r+0x2f4>
  808820:	80800117 	ldw	r2,4(r16)
  808824:	1184703a 	and	r2,r2,r6
  808828:	1447c83a 	sub	r3,r2,r17
  80882c:	28fff90e 	bge	r5,r3,808814 <__alt_mem_onchip_mem+0xff788814>
  808830:	3809883a 	mov	r4,r7
  808834:	01802074 	movhi	r6,129
  808838:	9c000417 	ldw	r16,16(r19)
  80883c:	3192e104 	addi	r6,r6,19332
  808840:	32000204 	addi	r8,r6,8
  808844:	82013426 	beq	r16,r8,808d18 <_malloc_r+0x5b4>
  808848:	80c00117 	ldw	r3,4(r16)
  80884c:	00bfff04 	movi	r2,-4
  808850:	188e703a 	and	r7,r3,r2
  808854:	3c45c83a 	sub	r2,r7,r17
  808858:	00c003c4 	movi	r3,15
  80885c:	18811f16 	blt	r3,r2,808cdc <_malloc_r+0x578>
  808860:	32000515 	stw	r8,20(r6)
  808864:	32000415 	stw	r8,16(r6)
  808868:	10007f0e 	bge	r2,zero,808a68 <_malloc_r+0x304>
  80886c:	00807fc4 	movi	r2,511
  808870:	11c0fd36 	bltu	r2,r7,808c68 <_malloc_r+0x504>
  808874:	3806d0fa 	srli	r3,r7,3
  808878:	01c00044 	movi	r7,1
  80887c:	30800117 	ldw	r2,4(r6)
  808880:	19400044 	addi	r5,r3,1
  808884:	294b883a 	add	r5,r5,r5
  808888:	1807d0ba 	srai	r3,r3,2
  80888c:	294b883a 	add	r5,r5,r5
  808890:	294b883a 	add	r5,r5,r5
  808894:	298b883a 	add	r5,r5,r6
  808898:	38c6983a 	sll	r3,r7,r3
  80889c:	29c00017 	ldw	r7,0(r5)
  8088a0:	2a7ffe04 	addi	r9,r5,-8
  8088a4:	1886b03a 	or	r3,r3,r2
  8088a8:	82400315 	stw	r9,12(r16)
  8088ac:	81c00215 	stw	r7,8(r16)
  8088b0:	30c00115 	stw	r3,4(r6)
  8088b4:	2c000015 	stw	r16,0(r5)
  8088b8:	3c000315 	stw	r16,12(r7)
  8088bc:	2005d0ba 	srai	r2,r4,2
  8088c0:	01400044 	movi	r5,1
  8088c4:	288a983a 	sll	r5,r5,r2
  8088c8:	19406f36 	bltu	r3,r5,808a88 <_malloc_r+0x324>
  8088cc:	28c4703a 	and	r2,r5,r3
  8088d0:	10000a1e 	bne	r2,zero,8088fc <_malloc_r+0x198>
  8088d4:	00bfff04 	movi	r2,-4
  8088d8:	294b883a 	add	r5,r5,r5
  8088dc:	2088703a 	and	r4,r4,r2
  8088e0:	28c4703a 	and	r2,r5,r3
  8088e4:	21000104 	addi	r4,r4,4
  8088e8:	1000041e 	bne	r2,zero,8088fc <_malloc_r+0x198>
  8088ec:	294b883a 	add	r5,r5,r5
  8088f0:	28c4703a 	and	r2,r5,r3
  8088f4:	21000104 	addi	r4,r4,4
  8088f8:	103ffc26 	beq	r2,zero,8088ec <__alt_mem_onchip_mem+0xff7888ec>
  8088fc:	02bfff04 	movi	r10,-4
  808900:	024003c4 	movi	r9,15
  808904:	21800044 	addi	r6,r4,1
  808908:	318d883a 	add	r6,r6,r6
  80890c:	318d883a 	add	r6,r6,r6
  808910:	318d883a 	add	r6,r6,r6
  808914:	998d883a 	add	r6,r19,r6
  808918:	333ffe04 	addi	r12,r6,-8
  80891c:	2017883a 	mov	r11,r4
  808920:	31800104 	addi	r6,r6,4
  808924:	34000017 	ldw	r16,0(r6)
  808928:	31fffd04 	addi	r7,r6,-12
  80892c:	81c0041e 	bne	r16,r7,808940 <_malloc_r+0x1dc>
  808930:	0000fb06 	br	808d20 <_malloc_r+0x5bc>
  808934:	1801030e 	bge	r3,zero,808d44 <_malloc_r+0x5e0>
  808938:	84000317 	ldw	r16,12(r16)
  80893c:	81c0f826 	beq	r16,r7,808d20 <_malloc_r+0x5bc>
  808940:	80800117 	ldw	r2,4(r16)
  808944:	1284703a 	and	r2,r2,r10
  808948:	1447c83a 	sub	r3,r2,r17
  80894c:	48fff90e 	bge	r9,r3,808934 <__alt_mem_onchip_mem+0xff788934>
  808950:	80800317 	ldw	r2,12(r16)
  808954:	81000217 	ldw	r4,8(r16)
  808958:	89400054 	ori	r5,r17,1
  80895c:	81400115 	stw	r5,4(r16)
  808960:	20800315 	stw	r2,12(r4)
  808964:	11000215 	stw	r4,8(r2)
  808968:	8463883a 	add	r17,r16,r17
  80896c:	9c400515 	stw	r17,20(r19)
  808970:	9c400415 	stw	r17,16(r19)
  808974:	18800054 	ori	r2,r3,1
  808978:	88800115 	stw	r2,4(r17)
  80897c:	8a000315 	stw	r8,12(r17)
  808980:	8a000215 	stw	r8,8(r17)
  808984:	88e3883a 	add	r17,r17,r3
  808988:	88c00015 	stw	r3,0(r17)
  80898c:	9009883a 	mov	r4,r18
  808990:	08104480 	call	810448 <__malloc_unlock>
  808994:	80800204 	addi	r2,r16,8
  808998:	00001b06 	br	808a08 <_malloc_r+0x2a4>
  80899c:	04400404 	movi	r17,16
  8089a0:	89402536 	bltu	r17,r5,808a38 <_malloc_r+0x2d4>
  8089a4:	08104240 	call	810424 <__malloc_lock>
  8089a8:	00800184 	movi	r2,6
  8089ac:	01000084 	movi	r4,2
  8089b0:	04c02074 	movhi	r19,129
  8089b4:	1085883a 	add	r2,r2,r2
  8089b8:	9cd2e104 	addi	r19,r19,19332
  8089bc:	1085883a 	add	r2,r2,r2
  8089c0:	9885883a 	add	r2,r19,r2
  8089c4:	14000117 	ldw	r16,4(r2)
  8089c8:	10fffe04 	addi	r3,r2,-8
  8089cc:	80c0d926 	beq	r16,r3,808d34 <_malloc_r+0x5d0>
  8089d0:	80c00117 	ldw	r3,4(r16)
  8089d4:	81000317 	ldw	r4,12(r16)
  8089d8:	00bfff04 	movi	r2,-4
  8089dc:	1884703a 	and	r2,r3,r2
  8089e0:	81400217 	ldw	r5,8(r16)
  8089e4:	8085883a 	add	r2,r16,r2
  8089e8:	10c00117 	ldw	r3,4(r2)
  8089ec:	29000315 	stw	r4,12(r5)
  8089f0:	21400215 	stw	r5,8(r4)
  8089f4:	18c00054 	ori	r3,r3,1
  8089f8:	10c00115 	stw	r3,4(r2)
  8089fc:	9009883a 	mov	r4,r18
  808a00:	08104480 	call	810448 <__malloc_unlock>
  808a04:	80800204 	addi	r2,r16,8
  808a08:	dfc00a17 	ldw	ra,40(sp)
  808a0c:	df000917 	ldw	fp,36(sp)
  808a10:	ddc00817 	ldw	r23,32(sp)
  808a14:	dd800717 	ldw	r22,28(sp)
  808a18:	dd400617 	ldw	r21,24(sp)
  808a1c:	dd000517 	ldw	r20,20(sp)
  808a20:	dcc00417 	ldw	r19,16(sp)
  808a24:	dc800317 	ldw	r18,12(sp)
  808a28:	dc400217 	ldw	r17,8(sp)
  808a2c:	dc000117 	ldw	r16,4(sp)
  808a30:	dec00b04 	addi	sp,sp,44
  808a34:	f800283a 	ret
  808a38:	00800304 	movi	r2,12
  808a3c:	90800015 	stw	r2,0(r18)
  808a40:	0005883a 	mov	r2,zero
  808a44:	003ff006 	br	808a08 <__alt_mem_onchip_mem+0xff788a08>
  808a48:	01002004 	movi	r4,128
  808a4c:	02001004 	movi	r8,64
  808a50:	01c00fc4 	movi	r7,63
  808a54:	003f6106 	br	8087dc <__alt_mem_onchip_mem+0xff7887dc>
  808a58:	4009883a 	mov	r4,r8
  808a5c:	003f7506 	br	808834 <__alt_mem_onchip_mem+0xff788834>
  808a60:	81000317 	ldw	r4,12(r16)
  808a64:	003fde06 	br	8089e0 <__alt_mem_onchip_mem+0xff7889e0>
  808a68:	81c5883a 	add	r2,r16,r7
  808a6c:	11400117 	ldw	r5,4(r2)
  808a70:	9009883a 	mov	r4,r18
  808a74:	29400054 	ori	r5,r5,1
  808a78:	11400115 	stw	r5,4(r2)
  808a7c:	08104480 	call	810448 <__malloc_unlock>
  808a80:	80800204 	addi	r2,r16,8
  808a84:	003fe006 	br	808a08 <__alt_mem_onchip_mem+0xff788a08>
  808a88:	9c000217 	ldw	r16,8(r19)
  808a8c:	00bfff04 	movi	r2,-4
  808a90:	85800117 	ldw	r22,4(r16)
  808a94:	b0ac703a 	and	r22,r22,r2
  808a98:	b4400336 	bltu	r22,r17,808aa8 <_malloc_r+0x344>
  808a9c:	b445c83a 	sub	r2,r22,r17
  808aa0:	00c003c4 	movi	r3,15
  808aa4:	18805d16 	blt	r3,r2,808c1c <_malloc_r+0x4b8>
  808aa8:	05c02074 	movhi	r23,129
  808aac:	008020b4 	movhi	r2,130
  808ab0:	10a08104 	addi	r2,r2,-32252
  808ab4:	bdd8e104 	addi	r23,r23,25476
  808ab8:	15400017 	ldw	r21,0(r2)
  808abc:	b8c00017 	ldw	r3,0(r23)
  808ac0:	00bfffc4 	movi	r2,-1
  808ac4:	858d883a 	add	r6,r16,r22
  808ac8:	8d6b883a 	add	r21,r17,r21
  808acc:	1880ea26 	beq	r3,r2,808e78 <_malloc_r+0x714>
  808ad0:	ad4403c4 	addi	r21,r21,4111
  808ad4:	00bc0004 	movi	r2,-4096
  808ad8:	a8aa703a 	and	r21,r21,r2
  808adc:	a80b883a 	mov	r5,r21
  808ae0:	9009883a 	mov	r4,r18
  808ae4:	d9800015 	stw	r6,0(sp)
  808ae8:	080a9f40 	call	80a9f4 <_sbrk_r>
  808aec:	1029883a 	mov	r20,r2
  808af0:	00bfffc4 	movi	r2,-1
  808af4:	d9800017 	ldw	r6,0(sp)
  808af8:	a080e826 	beq	r20,r2,808e9c <_malloc_r+0x738>
  808afc:	a180a636 	bltu	r20,r6,808d98 <_malloc_r+0x634>
  808b00:	070020b4 	movhi	fp,130
  808b04:	e7209004 	addi	fp,fp,-32192
  808b08:	e0800017 	ldw	r2,0(fp)
  808b0c:	a887883a 	add	r3,r21,r2
  808b10:	e0c00015 	stw	r3,0(fp)
  808b14:	3500e626 	beq	r6,r20,808eb0 <_malloc_r+0x74c>
  808b18:	b9000017 	ldw	r4,0(r23)
  808b1c:	00bfffc4 	movi	r2,-1
  808b20:	2080ee26 	beq	r4,r2,808edc <_malloc_r+0x778>
  808b24:	a185c83a 	sub	r2,r20,r6
  808b28:	10c5883a 	add	r2,r2,r3
  808b2c:	e0800015 	stw	r2,0(fp)
  808b30:	a0c001cc 	andi	r3,r20,7
  808b34:	1800bc26 	beq	r3,zero,808e28 <_malloc_r+0x6c4>
  808b38:	a0e9c83a 	sub	r20,r20,r3
  808b3c:	00840204 	movi	r2,4104
  808b40:	a5000204 	addi	r20,r20,8
  808b44:	10c7c83a 	sub	r3,r2,r3
  808b48:	a545883a 	add	r2,r20,r21
  808b4c:	1083ffcc 	andi	r2,r2,4095
  808b50:	18abc83a 	sub	r21,r3,r2
  808b54:	a80b883a 	mov	r5,r21
  808b58:	9009883a 	mov	r4,r18
  808b5c:	080a9f40 	call	80a9f4 <_sbrk_r>
  808b60:	00ffffc4 	movi	r3,-1
  808b64:	10c0e126 	beq	r2,r3,808eec <_malloc_r+0x788>
  808b68:	1505c83a 	sub	r2,r2,r20
  808b6c:	1545883a 	add	r2,r2,r21
  808b70:	10800054 	ori	r2,r2,1
  808b74:	e0c00017 	ldw	r3,0(fp)
  808b78:	9d000215 	stw	r20,8(r19)
  808b7c:	a0800115 	stw	r2,4(r20)
  808b80:	a8c7883a 	add	r3,r21,r3
  808b84:	e0c00015 	stw	r3,0(fp)
  808b88:	84c00e26 	beq	r16,r19,808bc4 <_malloc_r+0x460>
  808b8c:	018003c4 	movi	r6,15
  808b90:	3580a72e 	bgeu	r6,r22,808e30 <_malloc_r+0x6cc>
  808b94:	81400117 	ldw	r5,4(r16)
  808b98:	013ffe04 	movi	r4,-8
  808b9c:	b0bffd04 	addi	r2,r22,-12
  808ba0:	1104703a 	and	r2,r2,r4
  808ba4:	2900004c 	andi	r4,r5,1
  808ba8:	2088b03a 	or	r4,r4,r2
  808bac:	81000115 	stw	r4,4(r16)
  808bb0:	01400144 	movi	r5,5
  808bb4:	8089883a 	add	r4,r16,r2
  808bb8:	21400115 	stw	r5,4(r4)
  808bbc:	21400215 	stw	r5,8(r4)
  808bc0:	3080cd36 	bltu	r6,r2,808ef8 <_malloc_r+0x794>
  808bc4:	008020b4 	movhi	r2,130
  808bc8:	10a08004 	addi	r2,r2,-32256
  808bcc:	11000017 	ldw	r4,0(r2)
  808bd0:	20c0012e 	bgeu	r4,r3,808bd8 <_malloc_r+0x474>
  808bd4:	10c00015 	stw	r3,0(r2)
  808bd8:	008020b4 	movhi	r2,130
  808bdc:	10a07f04 	addi	r2,r2,-32260
  808be0:	11000017 	ldw	r4,0(r2)
  808be4:	9c000217 	ldw	r16,8(r19)
  808be8:	20c0012e 	bgeu	r4,r3,808bf0 <_malloc_r+0x48c>
  808bec:	10c00015 	stw	r3,0(r2)
  808bf0:	80c00117 	ldw	r3,4(r16)
  808bf4:	00bfff04 	movi	r2,-4
  808bf8:	1886703a 	and	r3,r3,r2
  808bfc:	1c45c83a 	sub	r2,r3,r17
  808c00:	1c400236 	bltu	r3,r17,808c0c <_malloc_r+0x4a8>
  808c04:	00c003c4 	movi	r3,15
  808c08:	18800416 	blt	r3,r2,808c1c <_malloc_r+0x4b8>
  808c0c:	9009883a 	mov	r4,r18
  808c10:	08104480 	call	810448 <__malloc_unlock>
  808c14:	0005883a 	mov	r2,zero
  808c18:	003f7b06 	br	808a08 <__alt_mem_onchip_mem+0xff788a08>
  808c1c:	88c00054 	ori	r3,r17,1
  808c20:	80c00115 	stw	r3,4(r16)
  808c24:	8463883a 	add	r17,r16,r17
  808c28:	10800054 	ori	r2,r2,1
  808c2c:	9c400215 	stw	r17,8(r19)
  808c30:	88800115 	stw	r2,4(r17)
  808c34:	9009883a 	mov	r4,r18
  808c38:	08104480 	call	810448 <__malloc_unlock>
  808c3c:	80800204 	addi	r2,r16,8
  808c40:	003f7106 	br	808a08 <__alt_mem_onchip_mem+0xff788a08>
  808c44:	00c00504 	movi	r3,20
  808c48:	18804a2e 	bgeu	r3,r2,808d74 <_malloc_r+0x610>
  808c4c:	00c01504 	movi	r3,84
  808c50:	18806e36 	bltu	r3,r2,808e0c <_malloc_r+0x6a8>
  808c54:	8804d33a 	srli	r2,r17,12
  808c58:	12001bc4 	addi	r8,r2,111
  808c5c:	11c01b84 	addi	r7,r2,110
  808c60:	4209883a 	add	r4,r8,r8
  808c64:	003edd06 	br	8087dc <__alt_mem_onchip_mem+0xff7887dc>
  808c68:	3804d27a 	srli	r2,r7,9
  808c6c:	00c00104 	movi	r3,4
  808c70:	1880442e 	bgeu	r3,r2,808d84 <_malloc_r+0x620>
  808c74:	00c00504 	movi	r3,20
  808c78:	18808136 	bltu	r3,r2,808e80 <_malloc_r+0x71c>
  808c7c:	11401704 	addi	r5,r2,92
  808c80:	10c016c4 	addi	r3,r2,91
  808c84:	294b883a 	add	r5,r5,r5
  808c88:	294b883a 	add	r5,r5,r5
  808c8c:	294b883a 	add	r5,r5,r5
  808c90:	994b883a 	add	r5,r19,r5
  808c94:	28800017 	ldw	r2,0(r5)
  808c98:	01802074 	movhi	r6,129
  808c9c:	297ffe04 	addi	r5,r5,-8
  808ca0:	3192e104 	addi	r6,r6,19332
  808ca4:	28806526 	beq	r5,r2,808e3c <_malloc_r+0x6d8>
  808ca8:	01bfff04 	movi	r6,-4
  808cac:	10c00117 	ldw	r3,4(r2)
  808cb0:	1986703a 	and	r3,r3,r6
  808cb4:	38c0022e 	bgeu	r7,r3,808cc0 <_malloc_r+0x55c>
  808cb8:	10800217 	ldw	r2,8(r2)
  808cbc:	28bffb1e 	bne	r5,r2,808cac <__alt_mem_onchip_mem+0xff788cac>
  808cc0:	11400317 	ldw	r5,12(r2)
  808cc4:	98c00117 	ldw	r3,4(r19)
  808cc8:	81400315 	stw	r5,12(r16)
  808ccc:	80800215 	stw	r2,8(r16)
  808cd0:	2c000215 	stw	r16,8(r5)
  808cd4:	14000315 	stw	r16,12(r2)
  808cd8:	003ef806 	br	8088bc <__alt_mem_onchip_mem+0xff7888bc>
  808cdc:	88c00054 	ori	r3,r17,1
  808ce0:	80c00115 	stw	r3,4(r16)
  808ce4:	8463883a 	add	r17,r16,r17
  808ce8:	34400515 	stw	r17,20(r6)
  808cec:	34400415 	stw	r17,16(r6)
  808cf0:	10c00054 	ori	r3,r2,1
  808cf4:	8a000315 	stw	r8,12(r17)
  808cf8:	8a000215 	stw	r8,8(r17)
  808cfc:	88c00115 	stw	r3,4(r17)
  808d00:	88a3883a 	add	r17,r17,r2
  808d04:	88800015 	stw	r2,0(r17)
  808d08:	9009883a 	mov	r4,r18
  808d0c:	08104480 	call	810448 <__malloc_unlock>
  808d10:	80800204 	addi	r2,r16,8
  808d14:	003f3c06 	br	808a08 <__alt_mem_onchip_mem+0xff788a08>
  808d18:	30c00117 	ldw	r3,4(r6)
  808d1c:	003ee706 	br	8088bc <__alt_mem_onchip_mem+0xff7888bc>
  808d20:	5ac00044 	addi	r11,r11,1
  808d24:	588000cc 	andi	r2,r11,3
  808d28:	31800204 	addi	r6,r6,8
  808d2c:	103efd1e 	bne	r2,zero,808924 <__alt_mem_onchip_mem+0xff788924>
  808d30:	00002406 	br	808dc4 <_malloc_r+0x660>
  808d34:	14000317 	ldw	r16,12(r2)
  808d38:	143f251e 	bne	r2,r16,8089d0 <__alt_mem_onchip_mem+0xff7889d0>
  808d3c:	21000084 	addi	r4,r4,2
  808d40:	003ebc06 	br	808834 <__alt_mem_onchip_mem+0xff788834>
  808d44:	8085883a 	add	r2,r16,r2
  808d48:	10c00117 	ldw	r3,4(r2)
  808d4c:	81000317 	ldw	r4,12(r16)
  808d50:	81400217 	ldw	r5,8(r16)
  808d54:	18c00054 	ori	r3,r3,1
  808d58:	10c00115 	stw	r3,4(r2)
  808d5c:	29000315 	stw	r4,12(r5)
  808d60:	21400215 	stw	r5,8(r4)
  808d64:	9009883a 	mov	r4,r18
  808d68:	08104480 	call	810448 <__malloc_unlock>
  808d6c:	80800204 	addi	r2,r16,8
  808d70:	003f2506 	br	808a08 <__alt_mem_onchip_mem+0xff788a08>
  808d74:	12001704 	addi	r8,r2,92
  808d78:	11c016c4 	addi	r7,r2,91
  808d7c:	4209883a 	add	r4,r8,r8
  808d80:	003e9606 	br	8087dc <__alt_mem_onchip_mem+0xff7887dc>
  808d84:	3804d1ba 	srli	r2,r7,6
  808d88:	11400e44 	addi	r5,r2,57
  808d8c:	10c00e04 	addi	r3,r2,56
  808d90:	294b883a 	add	r5,r5,r5
  808d94:	003fbc06 	br	808c88 <__alt_mem_onchip_mem+0xff788c88>
  808d98:	84ff5926 	beq	r16,r19,808b00 <__alt_mem_onchip_mem+0xff788b00>
  808d9c:	00802074 	movhi	r2,129
  808da0:	1092e104 	addi	r2,r2,19332
  808da4:	14000217 	ldw	r16,8(r2)
  808da8:	00bfff04 	movi	r2,-4
  808dac:	80c00117 	ldw	r3,4(r16)
  808db0:	1886703a 	and	r3,r3,r2
  808db4:	003f9106 	br	808bfc <__alt_mem_onchip_mem+0xff788bfc>
  808db8:	60800217 	ldw	r2,8(r12)
  808dbc:	213fffc4 	addi	r4,r4,-1
  808dc0:	1300651e 	bne	r2,r12,808f58 <_malloc_r+0x7f4>
  808dc4:	208000cc 	andi	r2,r4,3
  808dc8:	633ffe04 	addi	r12,r12,-8
  808dcc:	103ffa1e 	bne	r2,zero,808db8 <__alt_mem_onchip_mem+0xff788db8>
  808dd0:	98800117 	ldw	r2,4(r19)
  808dd4:	0146303a 	nor	r3,zero,r5
  808dd8:	1884703a 	and	r2,r3,r2
  808ddc:	98800115 	stw	r2,4(r19)
  808de0:	294b883a 	add	r5,r5,r5
  808de4:	117f2836 	bltu	r2,r5,808a88 <__alt_mem_onchip_mem+0xff788a88>
  808de8:	283f2726 	beq	r5,zero,808a88 <__alt_mem_onchip_mem+0xff788a88>
  808dec:	2886703a 	and	r3,r5,r2
  808df0:	5809883a 	mov	r4,r11
  808df4:	183ec31e 	bne	r3,zero,808904 <__alt_mem_onchip_mem+0xff788904>
  808df8:	294b883a 	add	r5,r5,r5
  808dfc:	2886703a 	and	r3,r5,r2
  808e00:	21000104 	addi	r4,r4,4
  808e04:	183ffc26 	beq	r3,zero,808df8 <__alt_mem_onchip_mem+0xff788df8>
  808e08:	003ebe06 	br	808904 <__alt_mem_onchip_mem+0xff788904>
  808e0c:	00c05504 	movi	r3,340
  808e10:	18801236 	bltu	r3,r2,808e5c <_malloc_r+0x6f8>
  808e14:	8804d3fa 	srli	r2,r17,15
  808e18:	12001e04 	addi	r8,r2,120
  808e1c:	11c01dc4 	addi	r7,r2,119
  808e20:	4209883a 	add	r4,r8,r8
  808e24:	003e6d06 	br	8087dc <__alt_mem_onchip_mem+0xff7887dc>
  808e28:	00c40004 	movi	r3,4096
  808e2c:	003f4606 	br	808b48 <__alt_mem_onchip_mem+0xff788b48>
  808e30:	00800044 	movi	r2,1
  808e34:	a0800115 	stw	r2,4(r20)
  808e38:	003f7406 	br	808c0c <__alt_mem_onchip_mem+0xff788c0c>
  808e3c:	1805d0ba 	srai	r2,r3,2
  808e40:	01c00044 	movi	r7,1
  808e44:	30c00117 	ldw	r3,4(r6)
  808e48:	388e983a 	sll	r7,r7,r2
  808e4c:	2805883a 	mov	r2,r5
  808e50:	38c6b03a 	or	r3,r7,r3
  808e54:	30c00115 	stw	r3,4(r6)
  808e58:	003f9b06 	br	808cc8 <__alt_mem_onchip_mem+0xff788cc8>
  808e5c:	00c15504 	movi	r3,1364
  808e60:	18801a36 	bltu	r3,r2,808ecc <_malloc_r+0x768>
  808e64:	8804d4ba 	srli	r2,r17,18
  808e68:	12001f44 	addi	r8,r2,125
  808e6c:	11c01f04 	addi	r7,r2,124
  808e70:	4209883a 	add	r4,r8,r8
  808e74:	003e5906 	br	8087dc <__alt_mem_onchip_mem+0xff7887dc>
  808e78:	ad400404 	addi	r21,r21,16
  808e7c:	003f1706 	br	808adc <__alt_mem_onchip_mem+0xff788adc>
  808e80:	00c01504 	movi	r3,84
  808e84:	18802336 	bltu	r3,r2,808f14 <_malloc_r+0x7b0>
  808e88:	3804d33a 	srli	r2,r7,12
  808e8c:	11401bc4 	addi	r5,r2,111
  808e90:	10c01b84 	addi	r3,r2,110
  808e94:	294b883a 	add	r5,r5,r5
  808e98:	003f7b06 	br	808c88 <__alt_mem_onchip_mem+0xff788c88>
  808e9c:	9c000217 	ldw	r16,8(r19)
  808ea0:	00bfff04 	movi	r2,-4
  808ea4:	80c00117 	ldw	r3,4(r16)
  808ea8:	1886703a 	and	r3,r3,r2
  808eac:	003f5306 	br	808bfc <__alt_mem_onchip_mem+0xff788bfc>
  808eb0:	3083ffcc 	andi	r2,r6,4095
  808eb4:	103f181e 	bne	r2,zero,808b18 <__alt_mem_onchip_mem+0xff788b18>
  808eb8:	99000217 	ldw	r4,8(r19)
  808ebc:	b545883a 	add	r2,r22,r21
  808ec0:	10800054 	ori	r2,r2,1
  808ec4:	20800115 	stw	r2,4(r4)
  808ec8:	003f3e06 	br	808bc4 <__alt_mem_onchip_mem+0xff788bc4>
  808ecc:	01003f84 	movi	r4,254
  808ed0:	02001fc4 	movi	r8,127
  808ed4:	01c01f84 	movi	r7,126
  808ed8:	003e4006 	br	8087dc <__alt_mem_onchip_mem+0xff7887dc>
  808edc:	00802074 	movhi	r2,129
  808ee0:	1098e104 	addi	r2,r2,25476
  808ee4:	15000015 	stw	r20,0(r2)
  808ee8:	003f1106 	br	808b30 <__alt_mem_onchip_mem+0xff788b30>
  808eec:	00800044 	movi	r2,1
  808ef0:	002b883a 	mov	r21,zero
  808ef4:	003f1f06 	br	808b74 <__alt_mem_onchip_mem+0xff788b74>
  808ef8:	81400204 	addi	r5,r16,8
  808efc:	9009883a 	mov	r4,r18
  808f00:	0807b780 	call	807b78 <_free_r>
  808f04:	008020b4 	movhi	r2,130
  808f08:	10a09004 	addi	r2,r2,-32192
  808f0c:	10c00017 	ldw	r3,0(r2)
  808f10:	003f2c06 	br	808bc4 <__alt_mem_onchip_mem+0xff788bc4>
  808f14:	00c05504 	movi	r3,340
  808f18:	18800536 	bltu	r3,r2,808f30 <_malloc_r+0x7cc>
  808f1c:	3804d3fa 	srli	r2,r7,15
  808f20:	11401e04 	addi	r5,r2,120
  808f24:	10c01dc4 	addi	r3,r2,119
  808f28:	294b883a 	add	r5,r5,r5
  808f2c:	003f5606 	br	808c88 <__alt_mem_onchip_mem+0xff788c88>
  808f30:	00c15504 	movi	r3,1364
  808f34:	18800536 	bltu	r3,r2,808f4c <_malloc_r+0x7e8>
  808f38:	3804d4ba 	srli	r2,r7,18
  808f3c:	11401f44 	addi	r5,r2,125
  808f40:	10c01f04 	addi	r3,r2,124
  808f44:	294b883a 	add	r5,r5,r5
  808f48:	003f4f06 	br	808c88 <__alt_mem_onchip_mem+0xff788c88>
  808f4c:	01403f84 	movi	r5,254
  808f50:	00c01f84 	movi	r3,126
  808f54:	003f4c06 	br	808c88 <__alt_mem_onchip_mem+0xff788c88>
  808f58:	98800117 	ldw	r2,4(r19)
  808f5c:	003fa006 	br	808de0 <__alt_mem_onchip_mem+0xff788de0>
  808f60:	8808d0fa 	srli	r4,r17,3
  808f64:	20800044 	addi	r2,r4,1
  808f68:	1085883a 	add	r2,r2,r2
  808f6c:	003e9006 	br	8089b0 <__alt_mem_onchip_mem+0xff7889b0>

00808f70 <memchr>:
  808f70:	208000cc 	andi	r2,r4,3
  808f74:	280f883a 	mov	r7,r5
  808f78:	10003426 	beq	r2,zero,80904c <memchr+0xdc>
  808f7c:	30bfffc4 	addi	r2,r6,-1
  808f80:	30001a26 	beq	r6,zero,808fec <memchr+0x7c>
  808f84:	20c00003 	ldbu	r3,0(r4)
  808f88:	29803fcc 	andi	r6,r5,255
  808f8c:	30c0051e 	bne	r6,r3,808fa4 <memchr+0x34>
  808f90:	00001806 	br	808ff4 <memchr+0x84>
  808f94:	10001526 	beq	r2,zero,808fec <memchr+0x7c>
  808f98:	20c00003 	ldbu	r3,0(r4)
  808f9c:	10bfffc4 	addi	r2,r2,-1
  808fa0:	30c01426 	beq	r6,r3,808ff4 <memchr+0x84>
  808fa4:	21000044 	addi	r4,r4,1
  808fa8:	20c000cc 	andi	r3,r4,3
  808fac:	183ff91e 	bne	r3,zero,808f94 <__alt_mem_onchip_mem+0xff788f94>
  808fb0:	020000c4 	movi	r8,3
  808fb4:	40801136 	bltu	r8,r2,808ffc <memchr+0x8c>
  808fb8:	10000c26 	beq	r2,zero,808fec <memchr+0x7c>
  808fbc:	20c00003 	ldbu	r3,0(r4)
  808fc0:	29403fcc 	andi	r5,r5,255
  808fc4:	28c00b26 	beq	r5,r3,808ff4 <memchr+0x84>
  808fc8:	20c00044 	addi	r3,r4,1
  808fcc:	39803fcc 	andi	r6,r7,255
  808fd0:	2089883a 	add	r4,r4,r2
  808fd4:	00000306 	br	808fe4 <memchr+0x74>
  808fd8:	18c00044 	addi	r3,r3,1
  808fdc:	197fffc3 	ldbu	r5,-1(r3)
  808fe0:	31400526 	beq	r6,r5,808ff8 <memchr+0x88>
  808fe4:	1805883a 	mov	r2,r3
  808fe8:	20fffb1e 	bne	r4,r3,808fd8 <__alt_mem_onchip_mem+0xff788fd8>
  808fec:	0005883a 	mov	r2,zero
  808ff0:	f800283a 	ret
  808ff4:	2005883a 	mov	r2,r4
  808ff8:	f800283a 	ret
  808ffc:	28c03fcc 	andi	r3,r5,255
  809000:	1812923a 	slli	r9,r3,8
  809004:	02ffbff4 	movhi	r11,65279
  809008:	02a02074 	movhi	r10,32897
  80900c:	48d2b03a 	or	r9,r9,r3
  809010:	4806943a 	slli	r3,r9,16
  809014:	5affbfc4 	addi	r11,r11,-257
  809018:	52a02004 	addi	r10,r10,-32640
  80901c:	48d2b03a 	or	r9,r9,r3
  809020:	20c00017 	ldw	r3,0(r4)
  809024:	48c6f03a 	xor	r3,r9,r3
  809028:	1acd883a 	add	r6,r3,r11
  80902c:	00c6303a 	nor	r3,zero,r3
  809030:	30c6703a 	and	r3,r6,r3
  809034:	1a86703a 	and	r3,r3,r10
  809038:	183fe01e 	bne	r3,zero,808fbc <__alt_mem_onchip_mem+0xff788fbc>
  80903c:	10bfff04 	addi	r2,r2,-4
  809040:	21000104 	addi	r4,r4,4
  809044:	40bff636 	bltu	r8,r2,809020 <__alt_mem_onchip_mem+0xff789020>
  809048:	003fdb06 	br	808fb8 <__alt_mem_onchip_mem+0xff788fb8>
  80904c:	3005883a 	mov	r2,r6
  809050:	003fd706 	br	808fb0 <__alt_mem_onchip_mem+0xff788fb0>

00809054 <memcpy>:
  809054:	defffd04 	addi	sp,sp,-12
  809058:	dfc00215 	stw	ra,8(sp)
  80905c:	dc400115 	stw	r17,4(sp)
  809060:	dc000015 	stw	r16,0(sp)
  809064:	00c003c4 	movi	r3,15
  809068:	2005883a 	mov	r2,r4
  80906c:	1980452e 	bgeu	r3,r6,809184 <memcpy+0x130>
  809070:	2906b03a 	or	r3,r5,r4
  809074:	18c000cc 	andi	r3,r3,3
  809078:	1800441e 	bne	r3,zero,80918c <memcpy+0x138>
  80907c:	347ffc04 	addi	r17,r6,-16
  809080:	8822d13a 	srli	r17,r17,4
  809084:	28c00104 	addi	r3,r5,4
  809088:	23400104 	addi	r13,r4,4
  80908c:	8820913a 	slli	r16,r17,4
  809090:	2b000204 	addi	r12,r5,8
  809094:	22c00204 	addi	r11,r4,8
  809098:	84000504 	addi	r16,r16,20
  80909c:	2a800304 	addi	r10,r5,12
  8090a0:	22400304 	addi	r9,r4,12
  8090a4:	2c21883a 	add	r16,r5,r16
  8090a8:	2811883a 	mov	r8,r5
  8090ac:	200f883a 	mov	r7,r4
  8090b0:	41000017 	ldw	r4,0(r8)
  8090b4:	1fc00017 	ldw	ra,0(r3)
  8090b8:	63c00017 	ldw	r15,0(r12)
  8090bc:	39000015 	stw	r4,0(r7)
  8090c0:	53800017 	ldw	r14,0(r10)
  8090c4:	6fc00015 	stw	ra,0(r13)
  8090c8:	5bc00015 	stw	r15,0(r11)
  8090cc:	4b800015 	stw	r14,0(r9)
  8090d0:	18c00404 	addi	r3,r3,16
  8090d4:	39c00404 	addi	r7,r7,16
  8090d8:	42000404 	addi	r8,r8,16
  8090dc:	6b400404 	addi	r13,r13,16
  8090e0:	63000404 	addi	r12,r12,16
  8090e4:	5ac00404 	addi	r11,r11,16
  8090e8:	52800404 	addi	r10,r10,16
  8090ec:	4a400404 	addi	r9,r9,16
  8090f0:	1c3fef1e 	bne	r3,r16,8090b0 <__alt_mem_onchip_mem+0xff7890b0>
  8090f4:	89c00044 	addi	r7,r17,1
  8090f8:	380e913a 	slli	r7,r7,4
  8090fc:	310003cc 	andi	r4,r6,15
  809100:	02c000c4 	movi	r11,3
  809104:	11c7883a 	add	r3,r2,r7
  809108:	29cb883a 	add	r5,r5,r7
  80910c:	5900212e 	bgeu	r11,r4,809194 <memcpy+0x140>
  809110:	1813883a 	mov	r9,r3
  809114:	2811883a 	mov	r8,r5
  809118:	200f883a 	mov	r7,r4
  80911c:	42800017 	ldw	r10,0(r8)
  809120:	4a400104 	addi	r9,r9,4
  809124:	39ffff04 	addi	r7,r7,-4
  809128:	4abfff15 	stw	r10,-4(r9)
  80912c:	42000104 	addi	r8,r8,4
  809130:	59fffa36 	bltu	r11,r7,80911c <__alt_mem_onchip_mem+0xff78911c>
  809134:	213fff04 	addi	r4,r4,-4
  809138:	2008d0ba 	srli	r4,r4,2
  80913c:	318000cc 	andi	r6,r6,3
  809140:	21000044 	addi	r4,r4,1
  809144:	2109883a 	add	r4,r4,r4
  809148:	2109883a 	add	r4,r4,r4
  80914c:	1907883a 	add	r3,r3,r4
  809150:	290b883a 	add	r5,r5,r4
  809154:	30000626 	beq	r6,zero,809170 <memcpy+0x11c>
  809158:	198d883a 	add	r6,r3,r6
  80915c:	29c00003 	ldbu	r7,0(r5)
  809160:	18c00044 	addi	r3,r3,1
  809164:	29400044 	addi	r5,r5,1
  809168:	19ffffc5 	stb	r7,-1(r3)
  80916c:	19bffb1e 	bne	r3,r6,80915c <__alt_mem_onchip_mem+0xff78915c>
  809170:	dfc00217 	ldw	ra,8(sp)
  809174:	dc400117 	ldw	r17,4(sp)
  809178:	dc000017 	ldw	r16,0(sp)
  80917c:	dec00304 	addi	sp,sp,12
  809180:	f800283a 	ret
  809184:	2007883a 	mov	r3,r4
  809188:	003ff206 	br	809154 <__alt_mem_onchip_mem+0xff789154>
  80918c:	2007883a 	mov	r3,r4
  809190:	003ff106 	br	809158 <__alt_mem_onchip_mem+0xff789158>
  809194:	200d883a 	mov	r6,r4
  809198:	003fee06 	br	809154 <__alt_mem_onchip_mem+0xff789154>

0080919c <memmove>:
  80919c:	2005883a 	mov	r2,r4
  8091a0:	29000b2e 	bgeu	r5,r4,8091d0 <memmove+0x34>
  8091a4:	298f883a 	add	r7,r5,r6
  8091a8:	21c0092e 	bgeu	r4,r7,8091d0 <memmove+0x34>
  8091ac:	2187883a 	add	r3,r4,r6
  8091b0:	198bc83a 	sub	r5,r3,r6
  8091b4:	30004826 	beq	r6,zero,8092d8 <memmove+0x13c>
  8091b8:	39ffffc4 	addi	r7,r7,-1
  8091bc:	39000003 	ldbu	r4,0(r7)
  8091c0:	18ffffc4 	addi	r3,r3,-1
  8091c4:	19000005 	stb	r4,0(r3)
  8091c8:	28fffb1e 	bne	r5,r3,8091b8 <__alt_mem_onchip_mem+0xff7891b8>
  8091cc:	f800283a 	ret
  8091d0:	00c003c4 	movi	r3,15
  8091d4:	1980412e 	bgeu	r3,r6,8092dc <memmove+0x140>
  8091d8:	2886b03a 	or	r3,r5,r2
  8091dc:	18c000cc 	andi	r3,r3,3
  8091e0:	1800401e 	bne	r3,zero,8092e4 <memmove+0x148>
  8091e4:	33fffc04 	addi	r15,r6,-16
  8091e8:	781ed13a 	srli	r15,r15,4
  8091ec:	28c00104 	addi	r3,r5,4
  8091f0:	13400104 	addi	r13,r2,4
  8091f4:	781c913a 	slli	r14,r15,4
  8091f8:	2b000204 	addi	r12,r5,8
  8091fc:	12c00204 	addi	r11,r2,8
  809200:	73800504 	addi	r14,r14,20
  809204:	2a800304 	addi	r10,r5,12
  809208:	12400304 	addi	r9,r2,12
  80920c:	2b9d883a 	add	r14,r5,r14
  809210:	2811883a 	mov	r8,r5
  809214:	100f883a 	mov	r7,r2
  809218:	41000017 	ldw	r4,0(r8)
  80921c:	39c00404 	addi	r7,r7,16
  809220:	18c00404 	addi	r3,r3,16
  809224:	393ffc15 	stw	r4,-16(r7)
  809228:	193ffc17 	ldw	r4,-16(r3)
  80922c:	6b400404 	addi	r13,r13,16
  809230:	5ac00404 	addi	r11,r11,16
  809234:	693ffc15 	stw	r4,-16(r13)
  809238:	61000017 	ldw	r4,0(r12)
  80923c:	4a400404 	addi	r9,r9,16
  809240:	42000404 	addi	r8,r8,16
  809244:	593ffc15 	stw	r4,-16(r11)
  809248:	51000017 	ldw	r4,0(r10)
  80924c:	63000404 	addi	r12,r12,16
  809250:	52800404 	addi	r10,r10,16
  809254:	493ffc15 	stw	r4,-16(r9)
  809258:	1bbfef1e 	bne	r3,r14,809218 <__alt_mem_onchip_mem+0xff789218>
  80925c:	79000044 	addi	r4,r15,1
  809260:	2008913a 	slli	r4,r4,4
  809264:	328003cc 	andi	r10,r6,15
  809268:	02c000c4 	movi	r11,3
  80926c:	1107883a 	add	r3,r2,r4
  809270:	290b883a 	add	r5,r5,r4
  809274:	5a801e2e 	bgeu	r11,r10,8092f0 <memmove+0x154>
  809278:	1813883a 	mov	r9,r3
  80927c:	2811883a 	mov	r8,r5
  809280:	500f883a 	mov	r7,r10
  809284:	41000017 	ldw	r4,0(r8)
  809288:	4a400104 	addi	r9,r9,4
  80928c:	39ffff04 	addi	r7,r7,-4
  809290:	493fff15 	stw	r4,-4(r9)
  809294:	42000104 	addi	r8,r8,4
  809298:	59fffa36 	bltu	r11,r7,809284 <__alt_mem_onchip_mem+0xff789284>
  80929c:	513fff04 	addi	r4,r10,-4
  8092a0:	2008d0ba 	srli	r4,r4,2
  8092a4:	318000cc 	andi	r6,r6,3
  8092a8:	21000044 	addi	r4,r4,1
  8092ac:	2109883a 	add	r4,r4,r4
  8092b0:	2109883a 	add	r4,r4,r4
  8092b4:	1907883a 	add	r3,r3,r4
  8092b8:	290b883a 	add	r5,r5,r4
  8092bc:	30000b26 	beq	r6,zero,8092ec <memmove+0x150>
  8092c0:	198d883a 	add	r6,r3,r6
  8092c4:	29c00003 	ldbu	r7,0(r5)
  8092c8:	18c00044 	addi	r3,r3,1
  8092cc:	29400044 	addi	r5,r5,1
  8092d0:	19ffffc5 	stb	r7,-1(r3)
  8092d4:	19bffb1e 	bne	r3,r6,8092c4 <__alt_mem_onchip_mem+0xff7892c4>
  8092d8:	f800283a 	ret
  8092dc:	1007883a 	mov	r3,r2
  8092e0:	003ff606 	br	8092bc <__alt_mem_onchip_mem+0xff7892bc>
  8092e4:	1007883a 	mov	r3,r2
  8092e8:	003ff506 	br	8092c0 <__alt_mem_onchip_mem+0xff7892c0>
  8092ec:	f800283a 	ret
  8092f0:	500d883a 	mov	r6,r10
  8092f4:	003ff106 	br	8092bc <__alt_mem_onchip_mem+0xff7892bc>

008092f8 <memset>:
  8092f8:	20c000cc 	andi	r3,r4,3
  8092fc:	2005883a 	mov	r2,r4
  809300:	18004426 	beq	r3,zero,809414 <memset+0x11c>
  809304:	31ffffc4 	addi	r7,r6,-1
  809308:	30004026 	beq	r6,zero,80940c <memset+0x114>
  80930c:	2813883a 	mov	r9,r5
  809310:	200d883a 	mov	r6,r4
  809314:	2007883a 	mov	r3,r4
  809318:	00000406 	br	80932c <memset+0x34>
  80931c:	3a3fffc4 	addi	r8,r7,-1
  809320:	31800044 	addi	r6,r6,1
  809324:	38003926 	beq	r7,zero,80940c <memset+0x114>
  809328:	400f883a 	mov	r7,r8
  80932c:	18c00044 	addi	r3,r3,1
  809330:	32400005 	stb	r9,0(r6)
  809334:	1a0000cc 	andi	r8,r3,3
  809338:	403ff81e 	bne	r8,zero,80931c <__alt_mem_onchip_mem+0xff78931c>
  80933c:	010000c4 	movi	r4,3
  809340:	21c02d2e 	bgeu	r4,r7,8093f8 <memset+0x100>
  809344:	29003fcc 	andi	r4,r5,255
  809348:	200c923a 	slli	r6,r4,8
  80934c:	3108b03a 	or	r4,r6,r4
  809350:	200c943a 	slli	r6,r4,16
  809354:	218cb03a 	or	r6,r4,r6
  809358:	010003c4 	movi	r4,15
  80935c:	21c0182e 	bgeu	r4,r7,8093c0 <memset+0xc8>
  809360:	3b3ffc04 	addi	r12,r7,-16
  809364:	6018d13a 	srli	r12,r12,4
  809368:	1a000104 	addi	r8,r3,4
  80936c:	1ac00204 	addi	r11,r3,8
  809370:	6008913a 	slli	r4,r12,4
  809374:	1a800304 	addi	r10,r3,12
  809378:	1813883a 	mov	r9,r3
  80937c:	21000504 	addi	r4,r4,20
  809380:	1909883a 	add	r4,r3,r4
  809384:	49800015 	stw	r6,0(r9)
  809388:	41800015 	stw	r6,0(r8)
  80938c:	59800015 	stw	r6,0(r11)
  809390:	51800015 	stw	r6,0(r10)
  809394:	42000404 	addi	r8,r8,16
  809398:	4a400404 	addi	r9,r9,16
  80939c:	5ac00404 	addi	r11,r11,16
  8093a0:	52800404 	addi	r10,r10,16
  8093a4:	413ff71e 	bne	r8,r4,809384 <__alt_mem_onchip_mem+0xff789384>
  8093a8:	63000044 	addi	r12,r12,1
  8093ac:	6018913a 	slli	r12,r12,4
  8093b0:	39c003cc 	andi	r7,r7,15
  8093b4:	010000c4 	movi	r4,3
  8093b8:	1b07883a 	add	r3,r3,r12
  8093bc:	21c00e2e 	bgeu	r4,r7,8093f8 <memset+0x100>
  8093c0:	1813883a 	mov	r9,r3
  8093c4:	3811883a 	mov	r8,r7
  8093c8:	010000c4 	movi	r4,3
  8093cc:	49800015 	stw	r6,0(r9)
  8093d0:	423fff04 	addi	r8,r8,-4
  8093d4:	4a400104 	addi	r9,r9,4
  8093d8:	223ffc36 	bltu	r4,r8,8093cc <__alt_mem_onchip_mem+0xff7893cc>
  8093dc:	393fff04 	addi	r4,r7,-4
  8093e0:	2008d0ba 	srli	r4,r4,2
  8093e4:	39c000cc 	andi	r7,r7,3
  8093e8:	21000044 	addi	r4,r4,1
  8093ec:	2109883a 	add	r4,r4,r4
  8093f0:	2109883a 	add	r4,r4,r4
  8093f4:	1907883a 	add	r3,r3,r4
  8093f8:	38000526 	beq	r7,zero,809410 <memset+0x118>
  8093fc:	19cf883a 	add	r7,r3,r7
  809400:	19400005 	stb	r5,0(r3)
  809404:	18c00044 	addi	r3,r3,1
  809408:	38fffd1e 	bne	r7,r3,809400 <__alt_mem_onchip_mem+0xff789400>
  80940c:	f800283a 	ret
  809410:	f800283a 	ret
  809414:	2007883a 	mov	r3,r4
  809418:	300f883a 	mov	r7,r6
  80941c:	003fc706 	br	80933c <__alt_mem_onchip_mem+0xff78933c>

00809420 <_Balloc>:
  809420:	20801317 	ldw	r2,76(r4)
  809424:	defffc04 	addi	sp,sp,-16
  809428:	dc400115 	stw	r17,4(sp)
  80942c:	dc000015 	stw	r16,0(sp)
  809430:	dfc00315 	stw	ra,12(sp)
  809434:	dc800215 	stw	r18,8(sp)
  809438:	2023883a 	mov	r17,r4
  80943c:	2821883a 	mov	r16,r5
  809440:	10000f26 	beq	r2,zero,809480 <_Balloc+0x60>
  809444:	8407883a 	add	r3,r16,r16
  809448:	18c7883a 	add	r3,r3,r3
  80944c:	10c7883a 	add	r3,r2,r3
  809450:	18800017 	ldw	r2,0(r3)
  809454:	10001126 	beq	r2,zero,80949c <_Balloc+0x7c>
  809458:	11000017 	ldw	r4,0(r2)
  80945c:	19000015 	stw	r4,0(r3)
  809460:	10000415 	stw	zero,16(r2)
  809464:	10000315 	stw	zero,12(r2)
  809468:	dfc00317 	ldw	ra,12(sp)
  80946c:	dc800217 	ldw	r18,8(sp)
  809470:	dc400117 	ldw	r17,4(sp)
  809474:	dc000017 	ldw	r16,0(sp)
  809478:	dec00404 	addi	sp,sp,16
  80947c:	f800283a 	ret
  809480:	01800844 	movi	r6,33
  809484:	01400104 	movi	r5,4
  809488:	080c35c0 	call	80c35c <_calloc_r>
  80948c:	88801315 	stw	r2,76(r17)
  809490:	103fec1e 	bne	r2,zero,809444 <__alt_mem_onchip_mem+0xff789444>
  809494:	0005883a 	mov	r2,zero
  809498:	003ff306 	br	809468 <__alt_mem_onchip_mem+0xff789468>
  80949c:	01400044 	movi	r5,1
  8094a0:	2c24983a 	sll	r18,r5,r16
  8094a4:	8809883a 	mov	r4,r17
  8094a8:	91800144 	addi	r6,r18,5
  8094ac:	318d883a 	add	r6,r6,r6
  8094b0:	318d883a 	add	r6,r6,r6
  8094b4:	080c35c0 	call	80c35c <_calloc_r>
  8094b8:	103ff626 	beq	r2,zero,809494 <__alt_mem_onchip_mem+0xff789494>
  8094bc:	14000115 	stw	r16,4(r2)
  8094c0:	14800215 	stw	r18,8(r2)
  8094c4:	003fe606 	br	809460 <__alt_mem_onchip_mem+0xff789460>

008094c8 <_Bfree>:
  8094c8:	28000826 	beq	r5,zero,8094ec <_Bfree+0x24>
  8094cc:	28c00117 	ldw	r3,4(r5)
  8094d0:	20801317 	ldw	r2,76(r4)
  8094d4:	18c7883a 	add	r3,r3,r3
  8094d8:	18c7883a 	add	r3,r3,r3
  8094dc:	10c5883a 	add	r2,r2,r3
  8094e0:	10c00017 	ldw	r3,0(r2)
  8094e4:	28c00015 	stw	r3,0(r5)
  8094e8:	11400015 	stw	r5,0(r2)
  8094ec:	f800283a 	ret

008094f0 <__multadd>:
  8094f0:	defffa04 	addi	sp,sp,-24
  8094f4:	dc800315 	stw	r18,12(sp)
  8094f8:	dc400215 	stw	r17,8(sp)
  8094fc:	dc000115 	stw	r16,4(sp)
  809500:	2823883a 	mov	r17,r5
  809504:	2c000417 	ldw	r16,16(r5)
  809508:	dfc00515 	stw	ra,20(sp)
  80950c:	dcc00415 	stw	r19,16(sp)
  809510:	2025883a 	mov	r18,r4
  809514:	29400504 	addi	r5,r5,20
  809518:	0011883a 	mov	r8,zero
  80951c:	28c00017 	ldw	r3,0(r5)
  809520:	29400104 	addi	r5,r5,4
  809524:	42000044 	addi	r8,r8,1
  809528:	18bfffcc 	andi	r2,r3,65535
  80952c:	1185383a 	mul	r2,r2,r6
  809530:	1806d43a 	srli	r3,r3,16
  809534:	11cf883a 	add	r7,r2,r7
  809538:	3808d43a 	srli	r4,r7,16
  80953c:	1987383a 	mul	r3,r3,r6
  809540:	38bfffcc 	andi	r2,r7,65535
  809544:	1907883a 	add	r3,r3,r4
  809548:	1808943a 	slli	r4,r3,16
  80954c:	180ed43a 	srli	r7,r3,16
  809550:	2085883a 	add	r2,r4,r2
  809554:	28bfff15 	stw	r2,-4(r5)
  809558:	443ff016 	blt	r8,r16,80951c <__alt_mem_onchip_mem+0xff78951c>
  80955c:	38000926 	beq	r7,zero,809584 <__multadd+0x94>
  809560:	88800217 	ldw	r2,8(r17)
  809564:	80800f0e 	bge	r16,r2,8095a4 <__multadd+0xb4>
  809568:	80800144 	addi	r2,r16,5
  80956c:	1085883a 	add	r2,r2,r2
  809570:	1085883a 	add	r2,r2,r2
  809574:	8885883a 	add	r2,r17,r2
  809578:	11c00015 	stw	r7,0(r2)
  80957c:	84000044 	addi	r16,r16,1
  809580:	8c000415 	stw	r16,16(r17)
  809584:	8805883a 	mov	r2,r17
  809588:	dfc00517 	ldw	ra,20(sp)
  80958c:	dcc00417 	ldw	r19,16(sp)
  809590:	dc800317 	ldw	r18,12(sp)
  809594:	dc400217 	ldw	r17,8(sp)
  809598:	dc000117 	ldw	r16,4(sp)
  80959c:	dec00604 	addi	sp,sp,24
  8095a0:	f800283a 	ret
  8095a4:	89400117 	ldw	r5,4(r17)
  8095a8:	9009883a 	mov	r4,r18
  8095ac:	d9c00015 	stw	r7,0(sp)
  8095b0:	29400044 	addi	r5,r5,1
  8095b4:	08094200 	call	809420 <_Balloc>
  8095b8:	89800417 	ldw	r6,16(r17)
  8095bc:	89400304 	addi	r5,r17,12
  8095c0:	11000304 	addi	r4,r2,12
  8095c4:	31800084 	addi	r6,r6,2
  8095c8:	318d883a 	add	r6,r6,r6
  8095cc:	318d883a 	add	r6,r6,r6
  8095d0:	1027883a 	mov	r19,r2
  8095d4:	08090540 	call	809054 <memcpy>
  8095d8:	d9c00017 	ldw	r7,0(sp)
  8095dc:	88000a26 	beq	r17,zero,809608 <__multadd+0x118>
  8095e0:	88c00117 	ldw	r3,4(r17)
  8095e4:	90801317 	ldw	r2,76(r18)
  8095e8:	18c7883a 	add	r3,r3,r3
  8095ec:	18c7883a 	add	r3,r3,r3
  8095f0:	10c5883a 	add	r2,r2,r3
  8095f4:	10c00017 	ldw	r3,0(r2)
  8095f8:	88c00015 	stw	r3,0(r17)
  8095fc:	14400015 	stw	r17,0(r2)
  809600:	9823883a 	mov	r17,r19
  809604:	003fd806 	br	809568 <__alt_mem_onchip_mem+0xff789568>
  809608:	9823883a 	mov	r17,r19
  80960c:	003fd606 	br	809568 <__alt_mem_onchip_mem+0xff789568>

00809610 <__s2b>:
  809610:	defff904 	addi	sp,sp,-28
  809614:	dc400115 	stw	r17,4(sp)
  809618:	dc000015 	stw	r16,0(sp)
  80961c:	2023883a 	mov	r17,r4
  809620:	2821883a 	mov	r16,r5
  809624:	39000204 	addi	r4,r7,8
  809628:	01400244 	movi	r5,9
  80962c:	dcc00315 	stw	r19,12(sp)
  809630:	dc800215 	stw	r18,8(sp)
  809634:	dfc00615 	stw	ra,24(sp)
  809638:	dd400515 	stw	r21,20(sp)
  80963c:	dd000415 	stw	r20,16(sp)
  809640:	3825883a 	mov	r18,r7
  809644:	3027883a 	mov	r19,r6
  809648:	080d68c0 	call	80d68c <__divsi3>
  80964c:	00c00044 	movi	r3,1
  809650:	000b883a 	mov	r5,zero
  809654:	1880030e 	bge	r3,r2,809664 <__s2b+0x54>
  809658:	18c7883a 	add	r3,r3,r3
  80965c:	29400044 	addi	r5,r5,1
  809660:	18bffd16 	blt	r3,r2,809658 <__alt_mem_onchip_mem+0xff789658>
  809664:	8809883a 	mov	r4,r17
  809668:	08094200 	call	809420 <_Balloc>
  80966c:	d8c00717 	ldw	r3,28(sp)
  809670:	10c00515 	stw	r3,20(r2)
  809674:	00c00044 	movi	r3,1
  809678:	10c00415 	stw	r3,16(r2)
  80967c:	00c00244 	movi	r3,9
  809680:	1cc0210e 	bge	r3,r19,809708 <__s2b+0xf8>
  809684:	80eb883a 	add	r21,r16,r3
  809688:	a829883a 	mov	r20,r21
  80968c:	84e1883a 	add	r16,r16,r19
  809690:	a1c00007 	ldb	r7,0(r20)
  809694:	01800284 	movi	r6,10
  809698:	a5000044 	addi	r20,r20,1
  80969c:	100b883a 	mov	r5,r2
  8096a0:	39fff404 	addi	r7,r7,-48
  8096a4:	8809883a 	mov	r4,r17
  8096a8:	08094f00 	call	8094f0 <__multadd>
  8096ac:	a43ff81e 	bne	r20,r16,809690 <__alt_mem_onchip_mem+0xff789690>
  8096b0:	ace1883a 	add	r16,r21,r19
  8096b4:	843ffe04 	addi	r16,r16,-8
  8096b8:	9c800a0e 	bge	r19,r18,8096e4 <__s2b+0xd4>
  8096bc:	94e5c83a 	sub	r18,r18,r19
  8096c0:	84a5883a 	add	r18,r16,r18
  8096c4:	81c00007 	ldb	r7,0(r16)
  8096c8:	01800284 	movi	r6,10
  8096cc:	84000044 	addi	r16,r16,1
  8096d0:	100b883a 	mov	r5,r2
  8096d4:	39fff404 	addi	r7,r7,-48
  8096d8:	8809883a 	mov	r4,r17
  8096dc:	08094f00 	call	8094f0 <__multadd>
  8096e0:	84bff81e 	bne	r16,r18,8096c4 <__alt_mem_onchip_mem+0xff7896c4>
  8096e4:	dfc00617 	ldw	ra,24(sp)
  8096e8:	dd400517 	ldw	r21,20(sp)
  8096ec:	dd000417 	ldw	r20,16(sp)
  8096f0:	dcc00317 	ldw	r19,12(sp)
  8096f4:	dc800217 	ldw	r18,8(sp)
  8096f8:	dc400117 	ldw	r17,4(sp)
  8096fc:	dc000017 	ldw	r16,0(sp)
  809700:	dec00704 	addi	sp,sp,28
  809704:	f800283a 	ret
  809708:	84000284 	addi	r16,r16,10
  80970c:	1827883a 	mov	r19,r3
  809710:	003fe906 	br	8096b8 <__alt_mem_onchip_mem+0xff7896b8>

00809714 <__hi0bits>:
  809714:	20bfffec 	andhi	r2,r4,65535
  809718:	1000141e 	bne	r2,zero,80976c <__hi0bits+0x58>
  80971c:	2008943a 	slli	r4,r4,16
  809720:	00800404 	movi	r2,16
  809724:	20ffc02c 	andhi	r3,r4,65280
  809728:	1800021e 	bne	r3,zero,809734 <__hi0bits+0x20>
  80972c:	2008923a 	slli	r4,r4,8
  809730:	10800204 	addi	r2,r2,8
  809734:	20fc002c 	andhi	r3,r4,61440
  809738:	1800021e 	bne	r3,zero,809744 <__hi0bits+0x30>
  80973c:	2008913a 	slli	r4,r4,4
  809740:	10800104 	addi	r2,r2,4
  809744:	20f0002c 	andhi	r3,r4,49152
  809748:	1800031e 	bne	r3,zero,809758 <__hi0bits+0x44>
  80974c:	2109883a 	add	r4,r4,r4
  809750:	10800084 	addi	r2,r2,2
  809754:	2109883a 	add	r4,r4,r4
  809758:	20000316 	blt	r4,zero,809768 <__hi0bits+0x54>
  80975c:	2110002c 	andhi	r4,r4,16384
  809760:	2000041e 	bne	r4,zero,809774 <__hi0bits+0x60>
  809764:	00800804 	movi	r2,32
  809768:	f800283a 	ret
  80976c:	0005883a 	mov	r2,zero
  809770:	003fec06 	br	809724 <__alt_mem_onchip_mem+0xff789724>
  809774:	10800044 	addi	r2,r2,1
  809778:	f800283a 	ret

0080977c <__lo0bits>:
  80977c:	20c00017 	ldw	r3,0(r4)
  809780:	188001cc 	andi	r2,r3,7
  809784:	10000826 	beq	r2,zero,8097a8 <__lo0bits+0x2c>
  809788:	1880004c 	andi	r2,r3,1
  80978c:	1000211e 	bne	r2,zero,809814 <__lo0bits+0x98>
  809790:	1880008c 	andi	r2,r3,2
  809794:	1000211e 	bne	r2,zero,80981c <__lo0bits+0xa0>
  809798:	1806d0ba 	srli	r3,r3,2
  80979c:	00800084 	movi	r2,2
  8097a0:	20c00015 	stw	r3,0(r4)
  8097a4:	f800283a 	ret
  8097a8:	18bfffcc 	andi	r2,r3,65535
  8097ac:	10001326 	beq	r2,zero,8097fc <__lo0bits+0x80>
  8097b0:	0005883a 	mov	r2,zero
  8097b4:	19403fcc 	andi	r5,r3,255
  8097b8:	2800021e 	bne	r5,zero,8097c4 <__lo0bits+0x48>
  8097bc:	1806d23a 	srli	r3,r3,8
  8097c0:	10800204 	addi	r2,r2,8
  8097c4:	194003cc 	andi	r5,r3,15
  8097c8:	2800021e 	bne	r5,zero,8097d4 <__lo0bits+0x58>
  8097cc:	1806d13a 	srli	r3,r3,4
  8097d0:	10800104 	addi	r2,r2,4
  8097d4:	194000cc 	andi	r5,r3,3
  8097d8:	2800021e 	bne	r5,zero,8097e4 <__lo0bits+0x68>
  8097dc:	1806d0ba 	srli	r3,r3,2
  8097e0:	10800084 	addi	r2,r2,2
  8097e4:	1940004c 	andi	r5,r3,1
  8097e8:	2800081e 	bne	r5,zero,80980c <__lo0bits+0x90>
  8097ec:	1806d07a 	srli	r3,r3,1
  8097f0:	1800051e 	bne	r3,zero,809808 <__lo0bits+0x8c>
  8097f4:	00800804 	movi	r2,32
  8097f8:	f800283a 	ret
  8097fc:	1806d43a 	srli	r3,r3,16
  809800:	00800404 	movi	r2,16
  809804:	003feb06 	br	8097b4 <__alt_mem_onchip_mem+0xff7897b4>
  809808:	10800044 	addi	r2,r2,1
  80980c:	20c00015 	stw	r3,0(r4)
  809810:	f800283a 	ret
  809814:	0005883a 	mov	r2,zero
  809818:	f800283a 	ret
  80981c:	1806d07a 	srli	r3,r3,1
  809820:	00800044 	movi	r2,1
  809824:	20c00015 	stw	r3,0(r4)
  809828:	f800283a 	ret

0080982c <__i2b>:
  80982c:	defffd04 	addi	sp,sp,-12
  809830:	dc000015 	stw	r16,0(sp)
  809834:	04000044 	movi	r16,1
  809838:	dc400115 	stw	r17,4(sp)
  80983c:	2823883a 	mov	r17,r5
  809840:	800b883a 	mov	r5,r16
  809844:	dfc00215 	stw	ra,8(sp)
  809848:	08094200 	call	809420 <_Balloc>
  80984c:	14400515 	stw	r17,20(r2)
  809850:	14000415 	stw	r16,16(r2)
  809854:	dfc00217 	ldw	ra,8(sp)
  809858:	dc400117 	ldw	r17,4(sp)
  80985c:	dc000017 	ldw	r16,0(sp)
  809860:	dec00304 	addi	sp,sp,12
  809864:	f800283a 	ret

00809868 <__multiply>:
  809868:	defffa04 	addi	sp,sp,-24
  80986c:	dcc00315 	stw	r19,12(sp)
  809870:	dc800215 	stw	r18,8(sp)
  809874:	34c00417 	ldw	r19,16(r6)
  809878:	2c800417 	ldw	r18,16(r5)
  80987c:	dd000415 	stw	r20,16(sp)
  809880:	dc400115 	stw	r17,4(sp)
  809884:	dfc00515 	stw	ra,20(sp)
  809888:	dc000015 	stw	r16,0(sp)
  80988c:	2829883a 	mov	r20,r5
  809890:	3023883a 	mov	r17,r6
  809894:	94c0050e 	bge	r18,r19,8098ac <__multiply+0x44>
  809898:	9007883a 	mov	r3,r18
  80989c:	3029883a 	mov	r20,r6
  8098a0:	9825883a 	mov	r18,r19
  8098a4:	2823883a 	mov	r17,r5
  8098a8:	1827883a 	mov	r19,r3
  8098ac:	a0800217 	ldw	r2,8(r20)
  8098b0:	94e1883a 	add	r16,r18,r19
  8098b4:	a1400117 	ldw	r5,4(r20)
  8098b8:	1400010e 	bge	r2,r16,8098c0 <__multiply+0x58>
  8098bc:	29400044 	addi	r5,r5,1
  8098c0:	08094200 	call	809420 <_Balloc>
  8098c4:	8415883a 	add	r10,r16,r16
  8098c8:	12c00504 	addi	r11,r2,20
  8098cc:	5295883a 	add	r10,r10,r10
  8098d0:	5a95883a 	add	r10,r11,r10
  8098d4:	5807883a 	mov	r3,r11
  8098d8:	5a80032e 	bgeu	r11,r10,8098e8 <__multiply+0x80>
  8098dc:	18000015 	stw	zero,0(r3)
  8098e0:	18c00104 	addi	r3,r3,4
  8098e4:	1abffd36 	bltu	r3,r10,8098dc <__alt_mem_onchip_mem+0xff7898dc>
  8098e8:	9ce7883a 	add	r19,r19,r19
  8098ec:	94a5883a 	add	r18,r18,r18
  8098f0:	89800504 	addi	r6,r17,20
  8098f4:	9ce7883a 	add	r19,r19,r19
  8098f8:	a3400504 	addi	r13,r20,20
  8098fc:	94a5883a 	add	r18,r18,r18
  809900:	34d9883a 	add	r12,r6,r19
  809904:	6c93883a 	add	r9,r13,r18
  809908:	3300422e 	bgeu	r6,r12,809a14 <__multiply+0x1ac>
  80990c:	37c00017 	ldw	ra,0(r6)
  809910:	fbffffcc 	andi	r15,ra,65535
  809914:	78001b26 	beq	r15,zero,809984 <__multiply+0x11c>
  809918:	5811883a 	mov	r8,r11
  80991c:	681d883a 	mov	r14,r13
  809920:	000f883a 	mov	r7,zero
  809924:	71000017 	ldw	r4,0(r14)
  809928:	40c00017 	ldw	r3,0(r8)
  80992c:	73800104 	addi	r14,r14,4
  809930:	217fffcc 	andi	r5,r4,65535
  809934:	2bcb383a 	mul	r5,r5,r15
  809938:	2008d43a 	srli	r4,r4,16
  80993c:	1c7fffcc 	andi	r17,r3,65535
  809940:	2c4b883a 	add	r5,r5,r17
  809944:	29cb883a 	add	r5,r5,r7
  809948:	23c9383a 	mul	r4,r4,r15
  80994c:	1806d43a 	srli	r3,r3,16
  809950:	280ed43a 	srli	r7,r5,16
  809954:	297fffcc 	andi	r5,r5,65535
  809958:	20c7883a 	add	r3,r4,r3
  80995c:	19c7883a 	add	r3,r3,r7
  809960:	1808943a 	slli	r4,r3,16
  809964:	4023883a 	mov	r17,r8
  809968:	180ed43a 	srli	r7,r3,16
  80996c:	214ab03a 	or	r5,r4,r5
  809970:	41400015 	stw	r5,0(r8)
  809974:	42000104 	addi	r8,r8,4
  809978:	727fea36 	bltu	r14,r9,809924 <__alt_mem_onchip_mem+0xff789924>
  80997c:	89c00115 	stw	r7,4(r17)
  809980:	37c00017 	ldw	ra,0(r6)
  809984:	f83ed43a 	srli	ra,ra,16
  809988:	f8001f26 	beq	ra,zero,809a08 <__multiply+0x1a0>
  80998c:	58c00017 	ldw	r3,0(r11)
  809990:	681d883a 	mov	r14,r13
  809994:	581f883a 	mov	r15,r11
  809998:	1811883a 	mov	r8,r3
  80999c:	5825883a 	mov	r18,r11
  8099a0:	000f883a 	mov	r7,zero
  8099a4:	00000106 	br	8099ac <__multiply+0x144>
  8099a8:	8825883a 	mov	r18,r17
  8099ac:	7140000b 	ldhu	r5,0(r14)
  8099b0:	4010d43a 	srli	r8,r8,16
  8099b4:	193fffcc 	andi	r4,r3,65535
  8099b8:	2fcb383a 	mul	r5,r5,ra
  8099bc:	7bc00104 	addi	r15,r15,4
  8099c0:	73800104 	addi	r14,r14,4
  8099c4:	2a0b883a 	add	r5,r5,r8
  8099c8:	29cb883a 	add	r5,r5,r7
  8099cc:	2806943a 	slli	r3,r5,16
  8099d0:	94400104 	addi	r17,r18,4
  8099d4:	280ad43a 	srli	r5,r5,16
  8099d8:	1908b03a 	or	r4,r3,r4
  8099dc:	793fff15 	stw	r4,-4(r15)
  8099e0:	70ffff17 	ldw	r3,-4(r14)
  8099e4:	8a000017 	ldw	r8,0(r17)
  8099e8:	1806d43a 	srli	r3,r3,16
  8099ec:	413fffcc 	andi	r4,r8,65535
  8099f0:	1fc7383a 	mul	r3,r3,ra
  8099f4:	1907883a 	add	r3,r3,r4
  8099f8:	1947883a 	add	r3,r3,r5
  8099fc:	180ed43a 	srli	r7,r3,16
  809a00:	727fe936 	bltu	r14,r9,8099a8 <__alt_mem_onchip_mem+0xff7899a8>
  809a04:	90c00115 	stw	r3,4(r18)
  809a08:	31800104 	addi	r6,r6,4
  809a0c:	5ac00104 	addi	r11,r11,4
  809a10:	333fbe36 	bltu	r6,r12,80990c <__alt_mem_onchip_mem+0xff78990c>
  809a14:	0400090e 	bge	zero,r16,809a3c <__multiply+0x1d4>
  809a18:	50ffff17 	ldw	r3,-4(r10)
  809a1c:	52bfff04 	addi	r10,r10,-4
  809a20:	18000326 	beq	r3,zero,809a30 <__multiply+0x1c8>
  809a24:	00000506 	br	809a3c <__multiply+0x1d4>
  809a28:	50c00017 	ldw	r3,0(r10)
  809a2c:	1800031e 	bne	r3,zero,809a3c <__multiply+0x1d4>
  809a30:	843fffc4 	addi	r16,r16,-1
  809a34:	52bfff04 	addi	r10,r10,-4
  809a38:	803ffb1e 	bne	r16,zero,809a28 <__alt_mem_onchip_mem+0xff789a28>
  809a3c:	14000415 	stw	r16,16(r2)
  809a40:	dfc00517 	ldw	ra,20(sp)
  809a44:	dd000417 	ldw	r20,16(sp)
  809a48:	dcc00317 	ldw	r19,12(sp)
  809a4c:	dc800217 	ldw	r18,8(sp)
  809a50:	dc400117 	ldw	r17,4(sp)
  809a54:	dc000017 	ldw	r16,0(sp)
  809a58:	dec00604 	addi	sp,sp,24
  809a5c:	f800283a 	ret

00809a60 <__pow5mult>:
  809a60:	defffa04 	addi	sp,sp,-24
  809a64:	dcc00315 	stw	r19,12(sp)
  809a68:	dc000015 	stw	r16,0(sp)
  809a6c:	dfc00515 	stw	ra,20(sp)
  809a70:	dd000415 	stw	r20,16(sp)
  809a74:	dc800215 	stw	r18,8(sp)
  809a78:	dc400115 	stw	r17,4(sp)
  809a7c:	308000cc 	andi	r2,r6,3
  809a80:	3021883a 	mov	r16,r6
  809a84:	2027883a 	mov	r19,r4
  809a88:	10002f1e 	bne	r2,zero,809b48 <__pow5mult+0xe8>
  809a8c:	2825883a 	mov	r18,r5
  809a90:	8021d0ba 	srai	r16,r16,2
  809a94:	80001a26 	beq	r16,zero,809b00 <__pow5mult+0xa0>
  809a98:	9c401217 	ldw	r17,72(r19)
  809a9c:	8800061e 	bne	r17,zero,809ab8 <__pow5mult+0x58>
  809aa0:	00003406 	br	809b74 <__pow5mult+0x114>
  809aa4:	8021d07a 	srai	r16,r16,1
  809aa8:	80001526 	beq	r16,zero,809b00 <__pow5mult+0xa0>
  809aac:	88800017 	ldw	r2,0(r17)
  809ab0:	10001c26 	beq	r2,zero,809b24 <__pow5mult+0xc4>
  809ab4:	1023883a 	mov	r17,r2
  809ab8:	8080004c 	andi	r2,r16,1
  809abc:	103ff926 	beq	r2,zero,809aa4 <__alt_mem_onchip_mem+0xff789aa4>
  809ac0:	880d883a 	mov	r6,r17
  809ac4:	900b883a 	mov	r5,r18
  809ac8:	9809883a 	mov	r4,r19
  809acc:	08098680 	call	809868 <__multiply>
  809ad0:	90001b26 	beq	r18,zero,809b40 <__pow5mult+0xe0>
  809ad4:	91000117 	ldw	r4,4(r18)
  809ad8:	98c01317 	ldw	r3,76(r19)
  809adc:	8021d07a 	srai	r16,r16,1
  809ae0:	2109883a 	add	r4,r4,r4
  809ae4:	2109883a 	add	r4,r4,r4
  809ae8:	1907883a 	add	r3,r3,r4
  809aec:	19000017 	ldw	r4,0(r3)
  809af0:	91000015 	stw	r4,0(r18)
  809af4:	1c800015 	stw	r18,0(r3)
  809af8:	1025883a 	mov	r18,r2
  809afc:	803feb1e 	bne	r16,zero,809aac <__alt_mem_onchip_mem+0xff789aac>
  809b00:	9005883a 	mov	r2,r18
  809b04:	dfc00517 	ldw	ra,20(sp)
  809b08:	dd000417 	ldw	r20,16(sp)
  809b0c:	dcc00317 	ldw	r19,12(sp)
  809b10:	dc800217 	ldw	r18,8(sp)
  809b14:	dc400117 	ldw	r17,4(sp)
  809b18:	dc000017 	ldw	r16,0(sp)
  809b1c:	dec00604 	addi	sp,sp,24
  809b20:	f800283a 	ret
  809b24:	880d883a 	mov	r6,r17
  809b28:	880b883a 	mov	r5,r17
  809b2c:	9809883a 	mov	r4,r19
  809b30:	08098680 	call	809868 <__multiply>
  809b34:	88800015 	stw	r2,0(r17)
  809b38:	10000015 	stw	zero,0(r2)
  809b3c:	003fdd06 	br	809ab4 <__alt_mem_onchip_mem+0xff789ab4>
  809b40:	1025883a 	mov	r18,r2
  809b44:	003fd706 	br	809aa4 <__alt_mem_onchip_mem+0xff789aa4>
  809b48:	10bfffc4 	addi	r2,r2,-1
  809b4c:	1085883a 	add	r2,r2,r2
  809b50:	00c02074 	movhi	r3,129
  809b54:	18d07204 	addi	r3,r3,16840
  809b58:	1085883a 	add	r2,r2,r2
  809b5c:	1885883a 	add	r2,r3,r2
  809b60:	11800017 	ldw	r6,0(r2)
  809b64:	000f883a 	mov	r7,zero
  809b68:	08094f00 	call	8094f0 <__multadd>
  809b6c:	1025883a 	mov	r18,r2
  809b70:	003fc706 	br	809a90 <__alt_mem_onchip_mem+0xff789a90>
  809b74:	05000044 	movi	r20,1
  809b78:	a00b883a 	mov	r5,r20
  809b7c:	9809883a 	mov	r4,r19
  809b80:	08094200 	call	809420 <_Balloc>
  809b84:	1023883a 	mov	r17,r2
  809b88:	00809c44 	movi	r2,625
  809b8c:	88800515 	stw	r2,20(r17)
  809b90:	8d000415 	stw	r20,16(r17)
  809b94:	9c401215 	stw	r17,72(r19)
  809b98:	88000015 	stw	zero,0(r17)
  809b9c:	003fc606 	br	809ab8 <__alt_mem_onchip_mem+0xff789ab8>

00809ba0 <__lshift>:
  809ba0:	defff904 	addi	sp,sp,-28
  809ba4:	dd400515 	stw	r21,20(sp)
  809ba8:	dcc00315 	stw	r19,12(sp)
  809bac:	302bd17a 	srai	r21,r6,5
  809bb0:	2cc00417 	ldw	r19,16(r5)
  809bb4:	28800217 	ldw	r2,8(r5)
  809bb8:	dd000415 	stw	r20,16(sp)
  809bbc:	ace7883a 	add	r19,r21,r19
  809bc0:	dc800215 	stw	r18,8(sp)
  809bc4:	dc400115 	stw	r17,4(sp)
  809bc8:	dc000015 	stw	r16,0(sp)
  809bcc:	dfc00615 	stw	ra,24(sp)
  809bd0:	9c000044 	addi	r16,r19,1
  809bd4:	2823883a 	mov	r17,r5
  809bd8:	3029883a 	mov	r20,r6
  809bdc:	2025883a 	mov	r18,r4
  809be0:	29400117 	ldw	r5,4(r5)
  809be4:	1400030e 	bge	r2,r16,809bf4 <__lshift+0x54>
  809be8:	1085883a 	add	r2,r2,r2
  809bec:	29400044 	addi	r5,r5,1
  809bf0:	143ffd16 	blt	r2,r16,809be8 <__alt_mem_onchip_mem+0xff789be8>
  809bf4:	9009883a 	mov	r4,r18
  809bf8:	08094200 	call	809420 <_Balloc>
  809bfc:	10c00504 	addi	r3,r2,20
  809c00:	0540070e 	bge	zero,r21,809c20 <__lshift+0x80>
  809c04:	ad6b883a 	add	r21,r21,r21
  809c08:	ad6b883a 	add	r21,r21,r21
  809c0c:	1809883a 	mov	r4,r3
  809c10:	1d47883a 	add	r3,r3,r21
  809c14:	20000015 	stw	zero,0(r4)
  809c18:	21000104 	addi	r4,r4,4
  809c1c:	193ffd1e 	bne	r3,r4,809c14 <__alt_mem_onchip_mem+0xff789c14>
  809c20:	8a000417 	ldw	r8,16(r17)
  809c24:	89000504 	addi	r4,r17,20
  809c28:	a18007cc 	andi	r6,r20,31
  809c2c:	4211883a 	add	r8,r8,r8
  809c30:	4211883a 	add	r8,r8,r8
  809c34:	2211883a 	add	r8,r4,r8
  809c38:	30002326 	beq	r6,zero,809cc8 <__lshift+0x128>
  809c3c:	02400804 	movi	r9,32
  809c40:	4993c83a 	sub	r9,r9,r6
  809c44:	000b883a 	mov	r5,zero
  809c48:	21c00017 	ldw	r7,0(r4)
  809c4c:	1815883a 	mov	r10,r3
  809c50:	18c00104 	addi	r3,r3,4
  809c54:	398e983a 	sll	r7,r7,r6
  809c58:	21000104 	addi	r4,r4,4
  809c5c:	394ab03a 	or	r5,r7,r5
  809c60:	197fff15 	stw	r5,-4(r3)
  809c64:	217fff17 	ldw	r5,-4(r4)
  809c68:	2a4ad83a 	srl	r5,r5,r9
  809c6c:	223ff636 	bltu	r4,r8,809c48 <__alt_mem_onchip_mem+0xff789c48>
  809c70:	51400115 	stw	r5,4(r10)
  809c74:	28001a1e 	bne	r5,zero,809ce0 <__lshift+0x140>
  809c78:	843fffc4 	addi	r16,r16,-1
  809c7c:	14000415 	stw	r16,16(r2)
  809c80:	88000826 	beq	r17,zero,809ca4 <__lshift+0x104>
  809c84:	89000117 	ldw	r4,4(r17)
  809c88:	90c01317 	ldw	r3,76(r18)
  809c8c:	2109883a 	add	r4,r4,r4
  809c90:	2109883a 	add	r4,r4,r4
  809c94:	1907883a 	add	r3,r3,r4
  809c98:	19000017 	ldw	r4,0(r3)
  809c9c:	89000015 	stw	r4,0(r17)
  809ca0:	1c400015 	stw	r17,0(r3)
  809ca4:	dfc00617 	ldw	ra,24(sp)
  809ca8:	dd400517 	ldw	r21,20(sp)
  809cac:	dd000417 	ldw	r20,16(sp)
  809cb0:	dcc00317 	ldw	r19,12(sp)
  809cb4:	dc800217 	ldw	r18,8(sp)
  809cb8:	dc400117 	ldw	r17,4(sp)
  809cbc:	dc000017 	ldw	r16,0(sp)
  809cc0:	dec00704 	addi	sp,sp,28
  809cc4:	f800283a 	ret
  809cc8:	21400017 	ldw	r5,0(r4)
  809ccc:	18c00104 	addi	r3,r3,4
  809cd0:	21000104 	addi	r4,r4,4
  809cd4:	197fff15 	stw	r5,-4(r3)
  809cd8:	223ffb36 	bltu	r4,r8,809cc8 <__alt_mem_onchip_mem+0xff789cc8>
  809cdc:	003fe606 	br	809c78 <__alt_mem_onchip_mem+0xff789c78>
  809ce0:	9c000084 	addi	r16,r19,2
  809ce4:	003fe406 	br	809c78 <__alt_mem_onchip_mem+0xff789c78>

00809ce8 <__mcmp>:
  809ce8:	20800417 	ldw	r2,16(r4)
  809cec:	28c00417 	ldw	r3,16(r5)
  809cf0:	10c5c83a 	sub	r2,r2,r3
  809cf4:	1000111e 	bne	r2,zero,809d3c <__mcmp+0x54>
  809cf8:	18c7883a 	add	r3,r3,r3
  809cfc:	18c7883a 	add	r3,r3,r3
  809d00:	21000504 	addi	r4,r4,20
  809d04:	29400504 	addi	r5,r5,20
  809d08:	20c5883a 	add	r2,r4,r3
  809d0c:	28cb883a 	add	r5,r5,r3
  809d10:	00000106 	br	809d18 <__mcmp+0x30>
  809d14:	20800a2e 	bgeu	r4,r2,809d40 <__mcmp+0x58>
  809d18:	10bfff04 	addi	r2,r2,-4
  809d1c:	297fff04 	addi	r5,r5,-4
  809d20:	11800017 	ldw	r6,0(r2)
  809d24:	28c00017 	ldw	r3,0(r5)
  809d28:	30fffa26 	beq	r6,r3,809d14 <__alt_mem_onchip_mem+0xff789d14>
  809d2c:	30c00236 	bltu	r6,r3,809d38 <__mcmp+0x50>
  809d30:	00800044 	movi	r2,1
  809d34:	f800283a 	ret
  809d38:	00bfffc4 	movi	r2,-1
  809d3c:	f800283a 	ret
  809d40:	0005883a 	mov	r2,zero
  809d44:	f800283a 	ret

00809d48 <__mdiff>:
  809d48:	28c00417 	ldw	r3,16(r5)
  809d4c:	30800417 	ldw	r2,16(r6)
  809d50:	defffa04 	addi	sp,sp,-24
  809d54:	dcc00315 	stw	r19,12(sp)
  809d58:	dc800215 	stw	r18,8(sp)
  809d5c:	dfc00515 	stw	ra,20(sp)
  809d60:	dd000415 	stw	r20,16(sp)
  809d64:	dc400115 	stw	r17,4(sp)
  809d68:	dc000015 	stw	r16,0(sp)
  809d6c:	1887c83a 	sub	r3,r3,r2
  809d70:	2825883a 	mov	r18,r5
  809d74:	3027883a 	mov	r19,r6
  809d78:	1800141e 	bne	r3,zero,809dcc <__mdiff+0x84>
  809d7c:	1085883a 	add	r2,r2,r2
  809d80:	1085883a 	add	r2,r2,r2
  809d84:	2a000504 	addi	r8,r5,20
  809d88:	34000504 	addi	r16,r6,20
  809d8c:	4087883a 	add	r3,r8,r2
  809d90:	8085883a 	add	r2,r16,r2
  809d94:	00000106 	br	809d9c <__mdiff+0x54>
  809d98:	40c0592e 	bgeu	r8,r3,809f00 <__mdiff+0x1b8>
  809d9c:	18ffff04 	addi	r3,r3,-4
  809da0:	10bfff04 	addi	r2,r2,-4
  809da4:	19c00017 	ldw	r7,0(r3)
  809da8:	11400017 	ldw	r5,0(r2)
  809dac:	397ffa26 	beq	r7,r5,809d98 <__alt_mem_onchip_mem+0xff789d98>
  809db0:	3940592e 	bgeu	r7,r5,809f18 <__mdiff+0x1d0>
  809db4:	9005883a 	mov	r2,r18
  809db8:	4023883a 	mov	r17,r8
  809dbc:	9825883a 	mov	r18,r19
  809dc0:	05000044 	movi	r20,1
  809dc4:	1027883a 	mov	r19,r2
  809dc8:	00000406 	br	809ddc <__mdiff+0x94>
  809dcc:	18005616 	blt	r3,zero,809f28 <__mdiff+0x1e0>
  809dd0:	34400504 	addi	r17,r6,20
  809dd4:	2c000504 	addi	r16,r5,20
  809dd8:	0029883a 	mov	r20,zero
  809ddc:	91400117 	ldw	r5,4(r18)
  809de0:	08094200 	call	809420 <_Balloc>
  809de4:	92400417 	ldw	r9,16(r18)
  809de8:	9b000417 	ldw	r12,16(r19)
  809dec:	12c00504 	addi	r11,r2,20
  809df0:	4a51883a 	add	r8,r9,r9
  809df4:	6319883a 	add	r12,r12,r12
  809df8:	4211883a 	add	r8,r8,r8
  809dfc:	6319883a 	add	r12,r12,r12
  809e00:	15000315 	stw	r20,12(r2)
  809e04:	8211883a 	add	r8,r16,r8
  809e08:	8b19883a 	add	r12,r17,r12
  809e0c:	0007883a 	mov	r3,zero
  809e10:	81400017 	ldw	r5,0(r16)
  809e14:	89c00017 	ldw	r7,0(r17)
  809e18:	59800104 	addi	r6,r11,4
  809e1c:	293fffcc 	andi	r4,r5,65535
  809e20:	20c7883a 	add	r3,r4,r3
  809e24:	393fffcc 	andi	r4,r7,65535
  809e28:	1909c83a 	sub	r4,r3,r4
  809e2c:	280ad43a 	srli	r5,r5,16
  809e30:	380ed43a 	srli	r7,r7,16
  809e34:	2007d43a 	srai	r3,r4,16
  809e38:	213fffcc 	andi	r4,r4,65535
  809e3c:	29cbc83a 	sub	r5,r5,r7
  809e40:	28c7883a 	add	r3,r5,r3
  809e44:	180a943a 	slli	r5,r3,16
  809e48:	8c400104 	addi	r17,r17,4
  809e4c:	84000104 	addi	r16,r16,4
  809e50:	2908b03a 	or	r4,r5,r4
  809e54:	59000015 	stw	r4,0(r11)
  809e58:	1807d43a 	srai	r3,r3,16
  809e5c:	3015883a 	mov	r10,r6
  809e60:	3017883a 	mov	r11,r6
  809e64:	8b3fea36 	bltu	r17,r12,809e10 <__alt_mem_onchip_mem+0xff789e10>
  809e68:	8200162e 	bgeu	r16,r8,809ec4 <__mdiff+0x17c>
  809e6c:	8017883a 	mov	r11,r16
  809e70:	59400017 	ldw	r5,0(r11)
  809e74:	31800104 	addi	r6,r6,4
  809e78:	5ac00104 	addi	r11,r11,4
  809e7c:	293fffcc 	andi	r4,r5,65535
  809e80:	20c7883a 	add	r3,r4,r3
  809e84:	280ed43a 	srli	r7,r5,16
  809e88:	180bd43a 	srai	r5,r3,16
  809e8c:	193fffcc 	andi	r4,r3,65535
  809e90:	3947883a 	add	r3,r7,r5
  809e94:	180a943a 	slli	r5,r3,16
  809e98:	1807d43a 	srai	r3,r3,16
  809e9c:	2908b03a 	or	r4,r5,r4
  809ea0:	313fff15 	stw	r4,-4(r6)
  809ea4:	5a3ff236 	bltu	r11,r8,809e70 <__alt_mem_onchip_mem+0xff789e70>
  809ea8:	0406303a 	nor	r3,zero,r16
  809eac:	1a07883a 	add	r3,r3,r8
  809eb0:	1806d0ba 	srli	r3,r3,2
  809eb4:	18c00044 	addi	r3,r3,1
  809eb8:	18c7883a 	add	r3,r3,r3
  809ebc:	18c7883a 	add	r3,r3,r3
  809ec0:	50d5883a 	add	r10,r10,r3
  809ec4:	50ffff04 	addi	r3,r10,-4
  809ec8:	2000041e 	bne	r4,zero,809edc <__mdiff+0x194>
  809ecc:	18ffff04 	addi	r3,r3,-4
  809ed0:	19000017 	ldw	r4,0(r3)
  809ed4:	4a7fffc4 	addi	r9,r9,-1
  809ed8:	203ffc26 	beq	r4,zero,809ecc <__alt_mem_onchip_mem+0xff789ecc>
  809edc:	12400415 	stw	r9,16(r2)
  809ee0:	dfc00517 	ldw	ra,20(sp)
  809ee4:	dd000417 	ldw	r20,16(sp)
  809ee8:	dcc00317 	ldw	r19,12(sp)
  809eec:	dc800217 	ldw	r18,8(sp)
  809ef0:	dc400117 	ldw	r17,4(sp)
  809ef4:	dc000017 	ldw	r16,0(sp)
  809ef8:	dec00604 	addi	sp,sp,24
  809efc:	f800283a 	ret
  809f00:	000b883a 	mov	r5,zero
  809f04:	08094200 	call	809420 <_Balloc>
  809f08:	00c00044 	movi	r3,1
  809f0c:	10c00415 	stw	r3,16(r2)
  809f10:	10000515 	stw	zero,20(r2)
  809f14:	003ff206 	br	809ee0 <__alt_mem_onchip_mem+0xff789ee0>
  809f18:	8023883a 	mov	r17,r16
  809f1c:	0029883a 	mov	r20,zero
  809f20:	4021883a 	mov	r16,r8
  809f24:	003fad06 	br	809ddc <__alt_mem_onchip_mem+0xff789ddc>
  809f28:	9005883a 	mov	r2,r18
  809f2c:	94400504 	addi	r17,r18,20
  809f30:	9c000504 	addi	r16,r19,20
  809f34:	9825883a 	mov	r18,r19
  809f38:	05000044 	movi	r20,1
  809f3c:	1027883a 	mov	r19,r2
  809f40:	003fa606 	br	809ddc <__alt_mem_onchip_mem+0xff789ddc>

00809f44 <__ulp>:
  809f44:	295ffc2c 	andhi	r5,r5,32752
  809f48:	00bf3034 	movhi	r2,64704
  809f4c:	2887883a 	add	r3,r5,r2
  809f50:	00c0020e 	bge	zero,r3,809f5c <__ulp+0x18>
  809f54:	0005883a 	mov	r2,zero
  809f58:	f800283a 	ret
  809f5c:	00c7c83a 	sub	r3,zero,r3
  809f60:	1807d53a 	srai	r3,r3,20
  809f64:	008004c4 	movi	r2,19
  809f68:	10c00b0e 	bge	r2,r3,809f98 <__ulp+0x54>
  809f6c:	18bffb04 	addi	r2,r3,-20
  809f70:	01000784 	movi	r4,30
  809f74:	0007883a 	mov	r3,zero
  809f78:	20800516 	blt	r4,r2,809f90 <__ulp+0x4c>
  809f7c:	010007c4 	movi	r4,31
  809f80:	2089c83a 	sub	r4,r4,r2
  809f84:	00800044 	movi	r2,1
  809f88:	1104983a 	sll	r2,r2,r4
  809f8c:	f800283a 	ret
  809f90:	00800044 	movi	r2,1
  809f94:	f800283a 	ret
  809f98:	01400234 	movhi	r5,8
  809f9c:	28c7d83a 	sra	r3,r5,r3
  809fa0:	0005883a 	mov	r2,zero
  809fa4:	f800283a 	ret

00809fa8 <__b2d>:
  809fa8:	defffa04 	addi	sp,sp,-24
  809fac:	dc000015 	stw	r16,0(sp)
  809fb0:	24000417 	ldw	r16,16(r4)
  809fb4:	dc400115 	stw	r17,4(sp)
  809fb8:	24400504 	addi	r17,r4,20
  809fbc:	8421883a 	add	r16,r16,r16
  809fc0:	8421883a 	add	r16,r16,r16
  809fc4:	8c21883a 	add	r16,r17,r16
  809fc8:	dc800215 	stw	r18,8(sp)
  809fcc:	84bfff17 	ldw	r18,-4(r16)
  809fd0:	dd000415 	stw	r20,16(sp)
  809fd4:	dcc00315 	stw	r19,12(sp)
  809fd8:	9009883a 	mov	r4,r18
  809fdc:	2829883a 	mov	r20,r5
  809fe0:	dfc00515 	stw	ra,20(sp)
  809fe4:	08097140 	call	809714 <__hi0bits>
  809fe8:	00c00804 	movi	r3,32
  809fec:	1889c83a 	sub	r4,r3,r2
  809ff0:	a1000015 	stw	r4,0(r20)
  809ff4:	01000284 	movi	r4,10
  809ff8:	84ffff04 	addi	r19,r16,-4
  809ffc:	20801216 	blt	r4,r2,80a048 <__b2d+0xa0>
  80a000:	018002c4 	movi	r6,11
  80a004:	308dc83a 	sub	r6,r6,r2
  80a008:	9186d83a 	srl	r3,r18,r6
  80a00c:	18cffc34 	orhi	r3,r3,16368
  80a010:	8cc0212e 	bgeu	r17,r19,80a098 <__b2d+0xf0>
  80a014:	813ffe17 	ldw	r4,-8(r16)
  80a018:	218cd83a 	srl	r6,r4,r6
  80a01c:	10800544 	addi	r2,r2,21
  80a020:	9084983a 	sll	r2,r18,r2
  80a024:	1184b03a 	or	r2,r2,r6
  80a028:	dfc00517 	ldw	ra,20(sp)
  80a02c:	dd000417 	ldw	r20,16(sp)
  80a030:	dcc00317 	ldw	r19,12(sp)
  80a034:	dc800217 	ldw	r18,8(sp)
  80a038:	dc400117 	ldw	r17,4(sp)
  80a03c:	dc000017 	ldw	r16,0(sp)
  80a040:	dec00604 	addi	sp,sp,24
  80a044:	f800283a 	ret
  80a048:	8cc00f2e 	bgeu	r17,r19,80a088 <__b2d+0xe0>
  80a04c:	117ffd44 	addi	r5,r2,-11
  80a050:	80bffe17 	ldw	r2,-8(r16)
  80a054:	28000e26 	beq	r5,zero,80a090 <__b2d+0xe8>
  80a058:	1949c83a 	sub	r4,r3,r5
  80a05c:	9164983a 	sll	r18,r18,r5
  80a060:	1106d83a 	srl	r3,r2,r4
  80a064:	81bffe04 	addi	r6,r16,-8
  80a068:	948ffc34 	orhi	r18,r18,16368
  80a06c:	90c6b03a 	or	r3,r18,r3
  80a070:	89800e2e 	bgeu	r17,r6,80a0ac <__b2d+0x104>
  80a074:	81bffd17 	ldw	r6,-12(r16)
  80a078:	1144983a 	sll	r2,r2,r5
  80a07c:	310ad83a 	srl	r5,r6,r4
  80a080:	2884b03a 	or	r2,r5,r2
  80a084:	003fe806 	br	80a028 <__alt_mem_onchip_mem+0xff78a028>
  80a088:	10bffd44 	addi	r2,r2,-11
  80a08c:	1000041e 	bne	r2,zero,80a0a0 <__b2d+0xf8>
  80a090:	90cffc34 	orhi	r3,r18,16368
  80a094:	003fe406 	br	80a028 <__alt_mem_onchip_mem+0xff78a028>
  80a098:	000d883a 	mov	r6,zero
  80a09c:	003fdf06 	br	80a01c <__alt_mem_onchip_mem+0xff78a01c>
  80a0a0:	90a4983a 	sll	r18,r18,r2
  80a0a4:	0005883a 	mov	r2,zero
  80a0a8:	003ff906 	br	80a090 <__alt_mem_onchip_mem+0xff78a090>
  80a0ac:	1144983a 	sll	r2,r2,r5
  80a0b0:	003fdd06 	br	80a028 <__alt_mem_onchip_mem+0xff78a028>

0080a0b4 <__d2b>:
  80a0b4:	defff804 	addi	sp,sp,-32
  80a0b8:	dc000215 	stw	r16,8(sp)
  80a0bc:	3021883a 	mov	r16,r6
  80a0c0:	dc400315 	stw	r17,12(sp)
  80a0c4:	8022907a 	slli	r17,r16,1
  80a0c8:	dd000615 	stw	r20,24(sp)
  80a0cc:	2829883a 	mov	r20,r5
  80a0d0:	01400044 	movi	r5,1
  80a0d4:	dcc00515 	stw	r19,20(sp)
  80a0d8:	dc800415 	stw	r18,16(sp)
  80a0dc:	dfc00715 	stw	ra,28(sp)
  80a0e0:	3825883a 	mov	r18,r7
  80a0e4:	8822d57a 	srli	r17,r17,21
  80a0e8:	08094200 	call	809420 <_Balloc>
  80a0ec:	1027883a 	mov	r19,r2
  80a0f0:	00800434 	movhi	r2,16
  80a0f4:	10bfffc4 	addi	r2,r2,-1
  80a0f8:	808c703a 	and	r6,r16,r2
  80a0fc:	88000126 	beq	r17,zero,80a104 <__d2b+0x50>
  80a100:	31800434 	orhi	r6,r6,16
  80a104:	d9800015 	stw	r6,0(sp)
  80a108:	a0002426 	beq	r20,zero,80a19c <__d2b+0xe8>
  80a10c:	d9000104 	addi	r4,sp,4
  80a110:	dd000115 	stw	r20,4(sp)
  80a114:	080977c0 	call	80977c <__lo0bits>
  80a118:	d8c00017 	ldw	r3,0(sp)
  80a11c:	10002f1e 	bne	r2,zero,80a1dc <__d2b+0x128>
  80a120:	d9000117 	ldw	r4,4(sp)
  80a124:	99000515 	stw	r4,20(r19)
  80a128:	1821003a 	cmpeq	r16,r3,zero
  80a12c:	01000084 	movi	r4,2
  80a130:	2421c83a 	sub	r16,r4,r16
  80a134:	98c00615 	stw	r3,24(r19)
  80a138:	9c000415 	stw	r16,16(r19)
  80a13c:	88001f1e 	bne	r17,zero,80a1bc <__d2b+0x108>
  80a140:	10bef384 	addi	r2,r2,-1074
  80a144:	90800015 	stw	r2,0(r18)
  80a148:	00900034 	movhi	r2,16384
  80a14c:	10bfffc4 	addi	r2,r2,-1
  80a150:	8085883a 	add	r2,r16,r2
  80a154:	1085883a 	add	r2,r2,r2
  80a158:	1085883a 	add	r2,r2,r2
  80a15c:	9885883a 	add	r2,r19,r2
  80a160:	11000517 	ldw	r4,20(r2)
  80a164:	8020917a 	slli	r16,r16,5
  80a168:	08097140 	call	809714 <__hi0bits>
  80a16c:	d8c00817 	ldw	r3,32(sp)
  80a170:	8085c83a 	sub	r2,r16,r2
  80a174:	18800015 	stw	r2,0(r3)
  80a178:	9805883a 	mov	r2,r19
  80a17c:	dfc00717 	ldw	ra,28(sp)
  80a180:	dd000617 	ldw	r20,24(sp)
  80a184:	dcc00517 	ldw	r19,20(sp)
  80a188:	dc800417 	ldw	r18,16(sp)
  80a18c:	dc400317 	ldw	r17,12(sp)
  80a190:	dc000217 	ldw	r16,8(sp)
  80a194:	dec00804 	addi	sp,sp,32
  80a198:	f800283a 	ret
  80a19c:	d809883a 	mov	r4,sp
  80a1a0:	080977c0 	call	80977c <__lo0bits>
  80a1a4:	d8c00017 	ldw	r3,0(sp)
  80a1a8:	04000044 	movi	r16,1
  80a1ac:	9c000415 	stw	r16,16(r19)
  80a1b0:	98c00515 	stw	r3,20(r19)
  80a1b4:	10800804 	addi	r2,r2,32
  80a1b8:	883fe126 	beq	r17,zero,80a140 <__alt_mem_onchip_mem+0xff78a140>
  80a1bc:	00c00d44 	movi	r3,53
  80a1c0:	8c7ef344 	addi	r17,r17,-1075
  80a1c4:	88a3883a 	add	r17,r17,r2
  80a1c8:	1885c83a 	sub	r2,r3,r2
  80a1cc:	d8c00817 	ldw	r3,32(sp)
  80a1d0:	94400015 	stw	r17,0(r18)
  80a1d4:	18800015 	stw	r2,0(r3)
  80a1d8:	003fe706 	br	80a178 <__alt_mem_onchip_mem+0xff78a178>
  80a1dc:	01000804 	movi	r4,32
  80a1e0:	2089c83a 	sub	r4,r4,r2
  80a1e4:	1908983a 	sll	r4,r3,r4
  80a1e8:	d9400117 	ldw	r5,4(sp)
  80a1ec:	1886d83a 	srl	r3,r3,r2
  80a1f0:	2148b03a 	or	r4,r4,r5
  80a1f4:	99000515 	stw	r4,20(r19)
  80a1f8:	d8c00015 	stw	r3,0(sp)
  80a1fc:	003fca06 	br	80a128 <__alt_mem_onchip_mem+0xff78a128>

0080a200 <__ratio>:
  80a200:	defff904 	addi	sp,sp,-28
  80a204:	dc400315 	stw	r17,12(sp)
  80a208:	2823883a 	mov	r17,r5
  80a20c:	d9400104 	addi	r5,sp,4
  80a210:	dfc00615 	stw	ra,24(sp)
  80a214:	dcc00515 	stw	r19,20(sp)
  80a218:	dc800415 	stw	r18,16(sp)
  80a21c:	2027883a 	mov	r19,r4
  80a220:	dc000215 	stw	r16,8(sp)
  80a224:	0809fa80 	call	809fa8 <__b2d>
  80a228:	d80b883a 	mov	r5,sp
  80a22c:	8809883a 	mov	r4,r17
  80a230:	1025883a 	mov	r18,r2
  80a234:	1821883a 	mov	r16,r3
  80a238:	0809fa80 	call	809fa8 <__b2d>
  80a23c:	8a000417 	ldw	r8,16(r17)
  80a240:	99000417 	ldw	r4,16(r19)
  80a244:	d9400117 	ldw	r5,4(sp)
  80a248:	2209c83a 	sub	r4,r4,r8
  80a24c:	2010917a 	slli	r8,r4,5
  80a250:	d9000017 	ldw	r4,0(sp)
  80a254:	2909c83a 	sub	r4,r5,r4
  80a258:	4109883a 	add	r4,r8,r4
  80a25c:	01000e0e 	bge	zero,r4,80a298 <__ratio+0x98>
  80a260:	2008953a 	slli	r4,r4,20
  80a264:	2421883a 	add	r16,r4,r16
  80a268:	100d883a 	mov	r6,r2
  80a26c:	180f883a 	mov	r7,r3
  80a270:	9009883a 	mov	r4,r18
  80a274:	800b883a 	mov	r5,r16
  80a278:	080e0ec0 	call	80e0ec <__divdf3>
  80a27c:	dfc00617 	ldw	ra,24(sp)
  80a280:	dcc00517 	ldw	r19,20(sp)
  80a284:	dc800417 	ldw	r18,16(sp)
  80a288:	dc400317 	ldw	r17,12(sp)
  80a28c:	dc000217 	ldw	r16,8(sp)
  80a290:	dec00704 	addi	sp,sp,28
  80a294:	f800283a 	ret
  80a298:	2008953a 	slli	r4,r4,20
  80a29c:	1907c83a 	sub	r3,r3,r4
  80a2a0:	003ff106 	br	80a268 <__alt_mem_onchip_mem+0xff78a268>

0080a2a4 <_mprec_log10>:
  80a2a4:	defffe04 	addi	sp,sp,-8
  80a2a8:	dc000015 	stw	r16,0(sp)
  80a2ac:	dfc00115 	stw	ra,4(sp)
  80a2b0:	008005c4 	movi	r2,23
  80a2b4:	2021883a 	mov	r16,r4
  80a2b8:	11000d0e 	bge	r2,r4,80a2f0 <_mprec_log10+0x4c>
  80a2bc:	0005883a 	mov	r2,zero
  80a2c0:	00cffc34 	movhi	r3,16368
  80a2c4:	843fffc4 	addi	r16,r16,-1
  80a2c8:	000d883a 	mov	r6,zero
  80a2cc:	01d00934 	movhi	r7,16420
  80a2d0:	1009883a 	mov	r4,r2
  80a2d4:	180b883a 	mov	r5,r3
  80a2d8:	080ec2c0 	call	80ec2c <__muldf3>
  80a2dc:	803ff91e 	bne	r16,zero,80a2c4 <__alt_mem_onchip_mem+0xff78a2c4>
  80a2e0:	dfc00117 	ldw	ra,4(sp)
  80a2e4:	dc000017 	ldw	r16,0(sp)
  80a2e8:	dec00204 	addi	sp,sp,8
  80a2ec:	f800283a 	ret
  80a2f0:	202090fa 	slli	r16,r4,3
  80a2f4:	00802074 	movhi	r2,129
  80a2f8:	10908904 	addi	r2,r2,16932
  80a2fc:	1421883a 	add	r16,r2,r16
  80a300:	80800017 	ldw	r2,0(r16)
  80a304:	80c00117 	ldw	r3,4(r16)
  80a308:	dfc00117 	ldw	ra,4(sp)
  80a30c:	dc000017 	ldw	r16,0(sp)
  80a310:	dec00204 	addi	sp,sp,8
  80a314:	f800283a 	ret

0080a318 <__copybits>:
  80a318:	297fffc4 	addi	r5,r5,-1
  80a31c:	280fd17a 	srai	r7,r5,5
  80a320:	30c00417 	ldw	r3,16(r6)
  80a324:	30800504 	addi	r2,r6,20
  80a328:	39c00044 	addi	r7,r7,1
  80a32c:	18c7883a 	add	r3,r3,r3
  80a330:	39cf883a 	add	r7,r7,r7
  80a334:	18c7883a 	add	r3,r3,r3
  80a338:	39cf883a 	add	r7,r7,r7
  80a33c:	10c7883a 	add	r3,r2,r3
  80a340:	21cf883a 	add	r7,r4,r7
  80a344:	10c00d2e 	bgeu	r2,r3,80a37c <__copybits+0x64>
  80a348:	200b883a 	mov	r5,r4
  80a34c:	12000017 	ldw	r8,0(r2)
  80a350:	29400104 	addi	r5,r5,4
  80a354:	10800104 	addi	r2,r2,4
  80a358:	2a3fff15 	stw	r8,-4(r5)
  80a35c:	10fffb36 	bltu	r2,r3,80a34c <__alt_mem_onchip_mem+0xff78a34c>
  80a360:	1985c83a 	sub	r2,r3,r6
  80a364:	10bffac4 	addi	r2,r2,-21
  80a368:	1004d0ba 	srli	r2,r2,2
  80a36c:	10800044 	addi	r2,r2,1
  80a370:	1085883a 	add	r2,r2,r2
  80a374:	1085883a 	add	r2,r2,r2
  80a378:	2089883a 	add	r4,r4,r2
  80a37c:	21c0032e 	bgeu	r4,r7,80a38c <__copybits+0x74>
  80a380:	20000015 	stw	zero,0(r4)
  80a384:	21000104 	addi	r4,r4,4
  80a388:	21fffd36 	bltu	r4,r7,80a380 <__alt_mem_onchip_mem+0xff78a380>
  80a38c:	f800283a 	ret

0080a390 <__any_on>:
  80a390:	20c00417 	ldw	r3,16(r4)
  80a394:	2805d17a 	srai	r2,r5,5
  80a398:	21000504 	addi	r4,r4,20
  80a39c:	18800d0e 	bge	r3,r2,80a3d4 <__any_on+0x44>
  80a3a0:	18c7883a 	add	r3,r3,r3
  80a3a4:	18c7883a 	add	r3,r3,r3
  80a3a8:	20c7883a 	add	r3,r4,r3
  80a3ac:	20c0192e 	bgeu	r4,r3,80a414 <__any_on+0x84>
  80a3b0:	18bfff17 	ldw	r2,-4(r3)
  80a3b4:	18ffff04 	addi	r3,r3,-4
  80a3b8:	1000041e 	bne	r2,zero,80a3cc <__any_on+0x3c>
  80a3bc:	20c0142e 	bgeu	r4,r3,80a410 <__any_on+0x80>
  80a3c0:	18ffff04 	addi	r3,r3,-4
  80a3c4:	19400017 	ldw	r5,0(r3)
  80a3c8:	283ffc26 	beq	r5,zero,80a3bc <__alt_mem_onchip_mem+0xff78a3bc>
  80a3cc:	00800044 	movi	r2,1
  80a3d0:	f800283a 	ret
  80a3d4:	10c00a0e 	bge	r2,r3,80a400 <__any_on+0x70>
  80a3d8:	1085883a 	add	r2,r2,r2
  80a3dc:	1085883a 	add	r2,r2,r2
  80a3e0:	294007cc 	andi	r5,r5,31
  80a3e4:	2087883a 	add	r3,r4,r2
  80a3e8:	283ff026 	beq	r5,zero,80a3ac <__alt_mem_onchip_mem+0xff78a3ac>
  80a3ec:	19800017 	ldw	r6,0(r3)
  80a3f0:	3144d83a 	srl	r2,r6,r5
  80a3f4:	114a983a 	sll	r5,r2,r5
  80a3f8:	317ff41e 	bne	r6,r5,80a3cc <__alt_mem_onchip_mem+0xff78a3cc>
  80a3fc:	003feb06 	br	80a3ac <__alt_mem_onchip_mem+0xff78a3ac>
  80a400:	1085883a 	add	r2,r2,r2
  80a404:	1085883a 	add	r2,r2,r2
  80a408:	2087883a 	add	r3,r4,r2
  80a40c:	003fe706 	br	80a3ac <__alt_mem_onchip_mem+0xff78a3ac>
  80a410:	f800283a 	ret
  80a414:	0005883a 	mov	r2,zero
  80a418:	f800283a 	ret

0080a41c <_realloc_r>:
  80a41c:	defff604 	addi	sp,sp,-40
  80a420:	dc800215 	stw	r18,8(sp)
  80a424:	dfc00915 	stw	ra,36(sp)
  80a428:	df000815 	stw	fp,32(sp)
  80a42c:	ddc00715 	stw	r23,28(sp)
  80a430:	dd800615 	stw	r22,24(sp)
  80a434:	dd400515 	stw	r21,20(sp)
  80a438:	dd000415 	stw	r20,16(sp)
  80a43c:	dcc00315 	stw	r19,12(sp)
  80a440:	dc400115 	stw	r17,4(sp)
  80a444:	dc000015 	stw	r16,0(sp)
  80a448:	3025883a 	mov	r18,r6
  80a44c:	2800b726 	beq	r5,zero,80a72c <_realloc_r+0x310>
  80a450:	282b883a 	mov	r21,r5
  80a454:	2029883a 	mov	r20,r4
  80a458:	08104240 	call	810424 <__malloc_lock>
  80a45c:	a8bfff17 	ldw	r2,-4(r21)
  80a460:	043fff04 	movi	r16,-4
  80a464:	90c002c4 	addi	r3,r18,11
  80a468:	01000584 	movi	r4,22
  80a46c:	acfffe04 	addi	r19,r21,-8
  80a470:	1420703a 	and	r16,r2,r16
  80a474:	20c0332e 	bgeu	r4,r3,80a544 <_realloc_r+0x128>
  80a478:	047ffe04 	movi	r17,-8
  80a47c:	1c62703a 	and	r17,r3,r17
  80a480:	8807883a 	mov	r3,r17
  80a484:	88005816 	blt	r17,zero,80a5e8 <_realloc_r+0x1cc>
  80a488:	8c805736 	bltu	r17,r18,80a5e8 <_realloc_r+0x1cc>
  80a48c:	80c0300e 	bge	r16,r3,80a550 <_realloc_r+0x134>
  80a490:	07002074 	movhi	fp,129
  80a494:	e712e104 	addi	fp,fp,19332
  80a498:	e1c00217 	ldw	r7,8(fp)
  80a49c:	9c09883a 	add	r4,r19,r16
  80a4a0:	22000117 	ldw	r8,4(r4)
  80a4a4:	21c06326 	beq	r4,r7,80a634 <_realloc_r+0x218>
  80a4a8:	017fff84 	movi	r5,-2
  80a4ac:	414a703a 	and	r5,r8,r5
  80a4b0:	214b883a 	add	r5,r4,r5
  80a4b4:	29800117 	ldw	r6,4(r5)
  80a4b8:	3180004c 	andi	r6,r6,1
  80a4bc:	30003f26 	beq	r6,zero,80a5bc <_realloc_r+0x1a0>
  80a4c0:	1080004c 	andi	r2,r2,1
  80a4c4:	10008326 	beq	r2,zero,80a6d4 <_realloc_r+0x2b8>
  80a4c8:	900b883a 	mov	r5,r18
  80a4cc:	a009883a 	mov	r4,r20
  80a4d0:	08087640 	call	808764 <_malloc_r>
  80a4d4:	1025883a 	mov	r18,r2
  80a4d8:	10011e26 	beq	r2,zero,80a954 <_realloc_r+0x538>
  80a4dc:	a93fff17 	ldw	r4,-4(r21)
  80a4e0:	10fffe04 	addi	r3,r2,-8
  80a4e4:	00bfff84 	movi	r2,-2
  80a4e8:	2084703a 	and	r2,r4,r2
  80a4ec:	9885883a 	add	r2,r19,r2
  80a4f0:	1880ee26 	beq	r3,r2,80a8ac <_realloc_r+0x490>
  80a4f4:	81bfff04 	addi	r6,r16,-4
  80a4f8:	00800904 	movi	r2,36
  80a4fc:	1180b836 	bltu	r2,r6,80a7e0 <_realloc_r+0x3c4>
  80a500:	00c004c4 	movi	r3,19
  80a504:	19809636 	bltu	r3,r6,80a760 <_realloc_r+0x344>
  80a508:	9005883a 	mov	r2,r18
  80a50c:	a807883a 	mov	r3,r21
  80a510:	19000017 	ldw	r4,0(r3)
  80a514:	11000015 	stw	r4,0(r2)
  80a518:	19000117 	ldw	r4,4(r3)
  80a51c:	11000115 	stw	r4,4(r2)
  80a520:	18c00217 	ldw	r3,8(r3)
  80a524:	10c00215 	stw	r3,8(r2)
  80a528:	a80b883a 	mov	r5,r21
  80a52c:	a009883a 	mov	r4,r20
  80a530:	0807b780 	call	807b78 <_free_r>
  80a534:	a009883a 	mov	r4,r20
  80a538:	08104480 	call	810448 <__malloc_unlock>
  80a53c:	9005883a 	mov	r2,r18
  80a540:	00001206 	br	80a58c <_realloc_r+0x170>
  80a544:	00c00404 	movi	r3,16
  80a548:	1823883a 	mov	r17,r3
  80a54c:	003fce06 	br	80a488 <__alt_mem_onchip_mem+0xff78a488>
  80a550:	a825883a 	mov	r18,r21
  80a554:	8445c83a 	sub	r2,r16,r17
  80a558:	00c003c4 	movi	r3,15
  80a55c:	18802636 	bltu	r3,r2,80a5f8 <_realloc_r+0x1dc>
  80a560:	99800117 	ldw	r6,4(r19)
  80a564:	9c07883a 	add	r3,r19,r16
  80a568:	3180004c 	andi	r6,r6,1
  80a56c:	3420b03a 	or	r16,r6,r16
  80a570:	9c000115 	stw	r16,4(r19)
  80a574:	18800117 	ldw	r2,4(r3)
  80a578:	10800054 	ori	r2,r2,1
  80a57c:	18800115 	stw	r2,4(r3)
  80a580:	a009883a 	mov	r4,r20
  80a584:	08104480 	call	810448 <__malloc_unlock>
  80a588:	9005883a 	mov	r2,r18
  80a58c:	dfc00917 	ldw	ra,36(sp)
  80a590:	df000817 	ldw	fp,32(sp)
  80a594:	ddc00717 	ldw	r23,28(sp)
  80a598:	dd800617 	ldw	r22,24(sp)
  80a59c:	dd400517 	ldw	r21,20(sp)
  80a5a0:	dd000417 	ldw	r20,16(sp)
  80a5a4:	dcc00317 	ldw	r19,12(sp)
  80a5a8:	dc800217 	ldw	r18,8(sp)
  80a5ac:	dc400117 	ldw	r17,4(sp)
  80a5b0:	dc000017 	ldw	r16,0(sp)
  80a5b4:	dec00a04 	addi	sp,sp,40
  80a5b8:	f800283a 	ret
  80a5bc:	017fff04 	movi	r5,-4
  80a5c0:	414a703a 	and	r5,r8,r5
  80a5c4:	814d883a 	add	r6,r16,r5
  80a5c8:	30c01f16 	blt	r6,r3,80a648 <_realloc_r+0x22c>
  80a5cc:	20800317 	ldw	r2,12(r4)
  80a5d0:	20c00217 	ldw	r3,8(r4)
  80a5d4:	a825883a 	mov	r18,r21
  80a5d8:	3021883a 	mov	r16,r6
  80a5dc:	18800315 	stw	r2,12(r3)
  80a5e0:	10c00215 	stw	r3,8(r2)
  80a5e4:	003fdb06 	br	80a554 <__alt_mem_onchip_mem+0xff78a554>
  80a5e8:	00800304 	movi	r2,12
  80a5ec:	a0800015 	stw	r2,0(r20)
  80a5f0:	0005883a 	mov	r2,zero
  80a5f4:	003fe506 	br	80a58c <__alt_mem_onchip_mem+0xff78a58c>
  80a5f8:	98c00117 	ldw	r3,4(r19)
  80a5fc:	9c4b883a 	add	r5,r19,r17
  80a600:	11000054 	ori	r4,r2,1
  80a604:	18c0004c 	andi	r3,r3,1
  80a608:	1c62b03a 	or	r17,r3,r17
  80a60c:	9c400115 	stw	r17,4(r19)
  80a610:	29000115 	stw	r4,4(r5)
  80a614:	2885883a 	add	r2,r5,r2
  80a618:	10c00117 	ldw	r3,4(r2)
  80a61c:	29400204 	addi	r5,r5,8
  80a620:	a009883a 	mov	r4,r20
  80a624:	18c00054 	ori	r3,r3,1
  80a628:	10c00115 	stw	r3,4(r2)
  80a62c:	0807b780 	call	807b78 <_free_r>
  80a630:	003fd306 	br	80a580 <__alt_mem_onchip_mem+0xff78a580>
  80a634:	017fff04 	movi	r5,-4
  80a638:	414a703a 	and	r5,r8,r5
  80a63c:	89800404 	addi	r6,r17,16
  80a640:	8151883a 	add	r8,r16,r5
  80a644:	4180590e 	bge	r8,r6,80a7ac <_realloc_r+0x390>
  80a648:	1080004c 	andi	r2,r2,1
  80a64c:	103f9e1e 	bne	r2,zero,80a4c8 <__alt_mem_onchip_mem+0xff78a4c8>
  80a650:	adbffe17 	ldw	r22,-8(r21)
  80a654:	00bfff04 	movi	r2,-4
  80a658:	9dadc83a 	sub	r22,r19,r22
  80a65c:	b1800117 	ldw	r6,4(r22)
  80a660:	3084703a 	and	r2,r6,r2
  80a664:	20002026 	beq	r4,zero,80a6e8 <_realloc_r+0x2cc>
  80a668:	80af883a 	add	r23,r16,r2
  80a66c:	b96f883a 	add	r23,r23,r5
  80a670:	21c05f26 	beq	r4,r7,80a7f0 <_realloc_r+0x3d4>
  80a674:	b8c01c16 	blt	r23,r3,80a6e8 <_realloc_r+0x2cc>
  80a678:	20800317 	ldw	r2,12(r4)
  80a67c:	20c00217 	ldw	r3,8(r4)
  80a680:	81bfff04 	addi	r6,r16,-4
  80a684:	01000904 	movi	r4,36
  80a688:	18800315 	stw	r2,12(r3)
  80a68c:	10c00215 	stw	r3,8(r2)
  80a690:	b0c00217 	ldw	r3,8(r22)
  80a694:	b0800317 	ldw	r2,12(r22)
  80a698:	b4800204 	addi	r18,r22,8
  80a69c:	18800315 	stw	r2,12(r3)
  80a6a0:	10c00215 	stw	r3,8(r2)
  80a6a4:	21801b36 	bltu	r4,r6,80a714 <_realloc_r+0x2f8>
  80a6a8:	008004c4 	movi	r2,19
  80a6ac:	1180352e 	bgeu	r2,r6,80a784 <_realloc_r+0x368>
  80a6b0:	a8800017 	ldw	r2,0(r21)
  80a6b4:	b0800215 	stw	r2,8(r22)
  80a6b8:	a8800117 	ldw	r2,4(r21)
  80a6bc:	b0800315 	stw	r2,12(r22)
  80a6c0:	008006c4 	movi	r2,27
  80a6c4:	11807f36 	bltu	r2,r6,80a8c4 <_realloc_r+0x4a8>
  80a6c8:	b0800404 	addi	r2,r22,16
  80a6cc:	ad400204 	addi	r21,r21,8
  80a6d0:	00002d06 	br	80a788 <_realloc_r+0x36c>
  80a6d4:	adbffe17 	ldw	r22,-8(r21)
  80a6d8:	00bfff04 	movi	r2,-4
  80a6dc:	9dadc83a 	sub	r22,r19,r22
  80a6e0:	b1000117 	ldw	r4,4(r22)
  80a6e4:	2084703a 	and	r2,r4,r2
  80a6e8:	b03f7726 	beq	r22,zero,80a4c8 <__alt_mem_onchip_mem+0xff78a4c8>
  80a6ec:	80af883a 	add	r23,r16,r2
  80a6f0:	b8ff7516 	blt	r23,r3,80a4c8 <__alt_mem_onchip_mem+0xff78a4c8>
  80a6f4:	b0800317 	ldw	r2,12(r22)
  80a6f8:	b0c00217 	ldw	r3,8(r22)
  80a6fc:	81bfff04 	addi	r6,r16,-4
  80a700:	01000904 	movi	r4,36
  80a704:	18800315 	stw	r2,12(r3)
  80a708:	10c00215 	stw	r3,8(r2)
  80a70c:	b4800204 	addi	r18,r22,8
  80a710:	21bfe52e 	bgeu	r4,r6,80a6a8 <__alt_mem_onchip_mem+0xff78a6a8>
  80a714:	a80b883a 	mov	r5,r21
  80a718:	9009883a 	mov	r4,r18
  80a71c:	080919c0 	call	80919c <memmove>
  80a720:	b821883a 	mov	r16,r23
  80a724:	b027883a 	mov	r19,r22
  80a728:	003f8a06 	br	80a554 <__alt_mem_onchip_mem+0xff78a554>
  80a72c:	300b883a 	mov	r5,r6
  80a730:	dfc00917 	ldw	ra,36(sp)
  80a734:	df000817 	ldw	fp,32(sp)
  80a738:	ddc00717 	ldw	r23,28(sp)
  80a73c:	dd800617 	ldw	r22,24(sp)
  80a740:	dd400517 	ldw	r21,20(sp)
  80a744:	dd000417 	ldw	r20,16(sp)
  80a748:	dcc00317 	ldw	r19,12(sp)
  80a74c:	dc800217 	ldw	r18,8(sp)
  80a750:	dc400117 	ldw	r17,4(sp)
  80a754:	dc000017 	ldw	r16,0(sp)
  80a758:	dec00a04 	addi	sp,sp,40
  80a75c:	08087641 	jmpi	808764 <_malloc_r>
  80a760:	a8c00017 	ldw	r3,0(r21)
  80a764:	90c00015 	stw	r3,0(r18)
  80a768:	a8c00117 	ldw	r3,4(r21)
  80a76c:	90c00115 	stw	r3,4(r18)
  80a770:	00c006c4 	movi	r3,27
  80a774:	19804536 	bltu	r3,r6,80a88c <_realloc_r+0x470>
  80a778:	90800204 	addi	r2,r18,8
  80a77c:	a8c00204 	addi	r3,r21,8
  80a780:	003f6306 	br	80a510 <__alt_mem_onchip_mem+0xff78a510>
  80a784:	9005883a 	mov	r2,r18
  80a788:	a8c00017 	ldw	r3,0(r21)
  80a78c:	b821883a 	mov	r16,r23
  80a790:	b027883a 	mov	r19,r22
  80a794:	10c00015 	stw	r3,0(r2)
  80a798:	a8c00117 	ldw	r3,4(r21)
  80a79c:	10c00115 	stw	r3,4(r2)
  80a7a0:	a8c00217 	ldw	r3,8(r21)
  80a7a4:	10c00215 	stw	r3,8(r2)
  80a7a8:	003f6a06 	br	80a554 <__alt_mem_onchip_mem+0xff78a554>
  80a7ac:	9c67883a 	add	r19,r19,r17
  80a7b0:	4445c83a 	sub	r2,r8,r17
  80a7b4:	e4c00215 	stw	r19,8(fp)
  80a7b8:	10800054 	ori	r2,r2,1
  80a7bc:	98800115 	stw	r2,4(r19)
  80a7c0:	a8bfff17 	ldw	r2,-4(r21)
  80a7c4:	a009883a 	mov	r4,r20
  80a7c8:	1080004c 	andi	r2,r2,1
  80a7cc:	1462b03a 	or	r17,r2,r17
  80a7d0:	ac7fff15 	stw	r17,-4(r21)
  80a7d4:	08104480 	call	810448 <__malloc_unlock>
  80a7d8:	a805883a 	mov	r2,r21
  80a7dc:	003f6b06 	br	80a58c <__alt_mem_onchip_mem+0xff78a58c>
  80a7e0:	a80b883a 	mov	r5,r21
  80a7e4:	9009883a 	mov	r4,r18
  80a7e8:	080919c0 	call	80919c <memmove>
  80a7ec:	003f4e06 	br	80a528 <__alt_mem_onchip_mem+0xff78a528>
  80a7f0:	89000404 	addi	r4,r17,16
  80a7f4:	b93fbc16 	blt	r23,r4,80a6e8 <__alt_mem_onchip_mem+0xff78a6e8>
  80a7f8:	b0800317 	ldw	r2,12(r22)
  80a7fc:	b0c00217 	ldw	r3,8(r22)
  80a800:	81bfff04 	addi	r6,r16,-4
  80a804:	01000904 	movi	r4,36
  80a808:	18800315 	stw	r2,12(r3)
  80a80c:	10c00215 	stw	r3,8(r2)
  80a810:	b4800204 	addi	r18,r22,8
  80a814:	21804336 	bltu	r4,r6,80a924 <_realloc_r+0x508>
  80a818:	008004c4 	movi	r2,19
  80a81c:	11803f2e 	bgeu	r2,r6,80a91c <_realloc_r+0x500>
  80a820:	a8800017 	ldw	r2,0(r21)
  80a824:	b0800215 	stw	r2,8(r22)
  80a828:	a8800117 	ldw	r2,4(r21)
  80a82c:	b0800315 	stw	r2,12(r22)
  80a830:	008006c4 	movi	r2,27
  80a834:	11803f36 	bltu	r2,r6,80a934 <_realloc_r+0x518>
  80a838:	b0800404 	addi	r2,r22,16
  80a83c:	ad400204 	addi	r21,r21,8
  80a840:	a8c00017 	ldw	r3,0(r21)
  80a844:	10c00015 	stw	r3,0(r2)
  80a848:	a8c00117 	ldw	r3,4(r21)
  80a84c:	10c00115 	stw	r3,4(r2)
  80a850:	a8c00217 	ldw	r3,8(r21)
  80a854:	10c00215 	stw	r3,8(r2)
  80a858:	b447883a 	add	r3,r22,r17
  80a85c:	bc45c83a 	sub	r2,r23,r17
  80a860:	e0c00215 	stw	r3,8(fp)
  80a864:	10800054 	ori	r2,r2,1
  80a868:	18800115 	stw	r2,4(r3)
  80a86c:	b0800117 	ldw	r2,4(r22)
  80a870:	a009883a 	mov	r4,r20
  80a874:	1080004c 	andi	r2,r2,1
  80a878:	1462b03a 	or	r17,r2,r17
  80a87c:	b4400115 	stw	r17,4(r22)
  80a880:	08104480 	call	810448 <__malloc_unlock>
  80a884:	9005883a 	mov	r2,r18
  80a888:	003f4006 	br	80a58c <__alt_mem_onchip_mem+0xff78a58c>
  80a88c:	a8c00217 	ldw	r3,8(r21)
  80a890:	90c00215 	stw	r3,8(r18)
  80a894:	a8c00317 	ldw	r3,12(r21)
  80a898:	90c00315 	stw	r3,12(r18)
  80a89c:	30801126 	beq	r6,r2,80a8e4 <_realloc_r+0x4c8>
  80a8a0:	90800404 	addi	r2,r18,16
  80a8a4:	a8c00404 	addi	r3,r21,16
  80a8a8:	003f1906 	br	80a510 <__alt_mem_onchip_mem+0xff78a510>
  80a8ac:	90ffff17 	ldw	r3,-4(r18)
  80a8b0:	00bfff04 	movi	r2,-4
  80a8b4:	a825883a 	mov	r18,r21
  80a8b8:	1884703a 	and	r2,r3,r2
  80a8bc:	80a1883a 	add	r16,r16,r2
  80a8c0:	003f2406 	br	80a554 <__alt_mem_onchip_mem+0xff78a554>
  80a8c4:	a8800217 	ldw	r2,8(r21)
  80a8c8:	b0800415 	stw	r2,16(r22)
  80a8cc:	a8800317 	ldw	r2,12(r21)
  80a8d0:	b0800515 	stw	r2,20(r22)
  80a8d4:	31000a26 	beq	r6,r4,80a900 <_realloc_r+0x4e4>
  80a8d8:	b0800604 	addi	r2,r22,24
  80a8dc:	ad400404 	addi	r21,r21,16
  80a8e0:	003fa906 	br	80a788 <__alt_mem_onchip_mem+0xff78a788>
  80a8e4:	a9000417 	ldw	r4,16(r21)
  80a8e8:	90800604 	addi	r2,r18,24
  80a8ec:	a8c00604 	addi	r3,r21,24
  80a8f0:	91000415 	stw	r4,16(r18)
  80a8f4:	a9000517 	ldw	r4,20(r21)
  80a8f8:	91000515 	stw	r4,20(r18)
  80a8fc:	003f0406 	br	80a510 <__alt_mem_onchip_mem+0xff78a510>
  80a900:	a8c00417 	ldw	r3,16(r21)
  80a904:	ad400604 	addi	r21,r21,24
  80a908:	b0800804 	addi	r2,r22,32
  80a90c:	b0c00615 	stw	r3,24(r22)
  80a910:	a8ffff17 	ldw	r3,-4(r21)
  80a914:	b0c00715 	stw	r3,28(r22)
  80a918:	003f9b06 	br	80a788 <__alt_mem_onchip_mem+0xff78a788>
  80a91c:	9005883a 	mov	r2,r18
  80a920:	003fc706 	br	80a840 <__alt_mem_onchip_mem+0xff78a840>
  80a924:	a80b883a 	mov	r5,r21
  80a928:	9009883a 	mov	r4,r18
  80a92c:	080919c0 	call	80919c <memmove>
  80a930:	003fc906 	br	80a858 <__alt_mem_onchip_mem+0xff78a858>
  80a934:	a8800217 	ldw	r2,8(r21)
  80a938:	b0800415 	stw	r2,16(r22)
  80a93c:	a8800317 	ldw	r2,12(r21)
  80a940:	b0800515 	stw	r2,20(r22)
  80a944:	31000726 	beq	r6,r4,80a964 <_realloc_r+0x548>
  80a948:	b0800604 	addi	r2,r22,24
  80a94c:	ad400404 	addi	r21,r21,16
  80a950:	003fbb06 	br	80a840 <__alt_mem_onchip_mem+0xff78a840>
  80a954:	a009883a 	mov	r4,r20
  80a958:	08104480 	call	810448 <__malloc_unlock>
  80a95c:	0005883a 	mov	r2,zero
  80a960:	003f0a06 	br	80a58c <__alt_mem_onchip_mem+0xff78a58c>
  80a964:	a8c00417 	ldw	r3,16(r21)
  80a968:	ad400604 	addi	r21,r21,24
  80a96c:	b0800804 	addi	r2,r22,32
  80a970:	b0c00615 	stw	r3,24(r22)
  80a974:	a8ffff17 	ldw	r3,-4(r21)
  80a978:	b0c00715 	stw	r3,28(r22)
  80a97c:	003fb006 	br	80a840 <__alt_mem_onchip_mem+0xff78a840>

0080a980 <__fpclassifyd>:
  80a980:	00a00034 	movhi	r2,32768
  80a984:	10bfffc4 	addi	r2,r2,-1
  80a988:	2884703a 	and	r2,r5,r2
  80a98c:	10000726 	beq	r2,zero,80a9ac <__fpclassifyd+0x2c>
  80a990:	00fffc34 	movhi	r3,65520
  80a994:	019ff834 	movhi	r6,32736
  80a998:	28c7883a 	add	r3,r5,r3
  80a99c:	31bfffc4 	addi	r6,r6,-1
  80a9a0:	30c00536 	bltu	r6,r3,80a9b8 <__fpclassifyd+0x38>
  80a9a4:	00800104 	movi	r2,4
  80a9a8:	f800283a 	ret
  80a9ac:	2000021e 	bne	r4,zero,80a9b8 <__fpclassifyd+0x38>
  80a9b0:	00800084 	movi	r2,2
  80a9b4:	f800283a 	ret
  80a9b8:	00dffc34 	movhi	r3,32752
  80a9bc:	019ff834 	movhi	r6,32736
  80a9c0:	28cb883a 	add	r5,r5,r3
  80a9c4:	31bfffc4 	addi	r6,r6,-1
  80a9c8:	317ff62e 	bgeu	r6,r5,80a9a4 <__alt_mem_onchip_mem+0xff78a9a4>
  80a9cc:	01400434 	movhi	r5,16
  80a9d0:	297fffc4 	addi	r5,r5,-1
  80a9d4:	28800236 	bltu	r5,r2,80a9e0 <__fpclassifyd+0x60>
  80a9d8:	008000c4 	movi	r2,3
  80a9dc:	f800283a 	ret
  80a9e0:	10c00226 	beq	r2,r3,80a9ec <__fpclassifyd+0x6c>
  80a9e4:	0005883a 	mov	r2,zero
  80a9e8:	f800283a 	ret
  80a9ec:	2005003a 	cmpeq	r2,r4,zero
  80a9f0:	f800283a 	ret

0080a9f4 <_sbrk_r>:
  80a9f4:	defffd04 	addi	sp,sp,-12
  80a9f8:	dc000015 	stw	r16,0(sp)
  80a9fc:	040020b4 	movhi	r16,130
  80aa00:	dc400115 	stw	r17,4(sp)
  80aa04:	84208204 	addi	r16,r16,-32248
  80aa08:	2023883a 	mov	r17,r4
  80aa0c:	2809883a 	mov	r4,r5
  80aa10:	dfc00215 	stw	ra,8(sp)
  80aa14:	80000015 	stw	zero,0(r16)
  80aa18:	08106080 	call	810608 <sbrk>
  80aa1c:	00ffffc4 	movi	r3,-1
  80aa20:	10c00526 	beq	r2,r3,80aa38 <_sbrk_r+0x44>
  80aa24:	dfc00217 	ldw	ra,8(sp)
  80aa28:	dc400117 	ldw	r17,4(sp)
  80aa2c:	dc000017 	ldw	r16,0(sp)
  80aa30:	dec00304 	addi	sp,sp,12
  80aa34:	f800283a 	ret
  80aa38:	80c00017 	ldw	r3,0(r16)
  80aa3c:	183ff926 	beq	r3,zero,80aa24 <__alt_mem_onchip_mem+0xff78aa24>
  80aa40:	88c00015 	stw	r3,0(r17)
  80aa44:	003ff706 	br	80aa24 <__alt_mem_onchip_mem+0xff78aa24>

0080aa48 <__sread>:
  80aa48:	defffe04 	addi	sp,sp,-8
  80aa4c:	dc000015 	stw	r16,0(sp)
  80aa50:	2821883a 	mov	r16,r5
  80aa54:	2940038f 	ldh	r5,14(r5)
  80aa58:	dfc00115 	stw	ra,4(sp)
  80aa5c:	080c83c0 	call	80c83c <_read_r>
  80aa60:	10000716 	blt	r2,zero,80aa80 <__sread+0x38>
  80aa64:	80c01417 	ldw	r3,80(r16)
  80aa68:	1887883a 	add	r3,r3,r2
  80aa6c:	80c01415 	stw	r3,80(r16)
  80aa70:	dfc00117 	ldw	ra,4(sp)
  80aa74:	dc000017 	ldw	r16,0(sp)
  80aa78:	dec00204 	addi	sp,sp,8
  80aa7c:	f800283a 	ret
  80aa80:	80c0030b 	ldhu	r3,12(r16)
  80aa84:	18fbffcc 	andi	r3,r3,61439
  80aa88:	80c0030d 	sth	r3,12(r16)
  80aa8c:	dfc00117 	ldw	ra,4(sp)
  80aa90:	dc000017 	ldw	r16,0(sp)
  80aa94:	dec00204 	addi	sp,sp,8
  80aa98:	f800283a 	ret

0080aa9c <__seofread>:
  80aa9c:	0005883a 	mov	r2,zero
  80aaa0:	f800283a 	ret

0080aaa4 <__swrite>:
  80aaa4:	2880030b 	ldhu	r2,12(r5)
  80aaa8:	defffb04 	addi	sp,sp,-20
  80aaac:	dcc00315 	stw	r19,12(sp)
  80aab0:	dc800215 	stw	r18,8(sp)
  80aab4:	dc400115 	stw	r17,4(sp)
  80aab8:	dc000015 	stw	r16,0(sp)
  80aabc:	dfc00415 	stw	ra,16(sp)
  80aac0:	10c0400c 	andi	r3,r2,256
  80aac4:	2821883a 	mov	r16,r5
  80aac8:	2023883a 	mov	r17,r4
  80aacc:	3025883a 	mov	r18,r6
  80aad0:	3827883a 	mov	r19,r7
  80aad4:	18000526 	beq	r3,zero,80aaec <__swrite+0x48>
  80aad8:	2940038f 	ldh	r5,14(r5)
  80aadc:	01c00084 	movi	r7,2
  80aae0:	000d883a 	mov	r6,zero
  80aae4:	080c7dc0 	call	80c7dc <_lseek_r>
  80aae8:	8080030b 	ldhu	r2,12(r16)
  80aaec:	8140038f 	ldh	r5,14(r16)
  80aaf0:	10bbffcc 	andi	r2,r2,61439
  80aaf4:	980f883a 	mov	r7,r19
  80aaf8:	900d883a 	mov	r6,r18
  80aafc:	8809883a 	mov	r4,r17
  80ab00:	8080030d 	sth	r2,12(r16)
  80ab04:	dfc00417 	ldw	ra,16(sp)
  80ab08:	dcc00317 	ldw	r19,12(sp)
  80ab0c:	dc800217 	ldw	r18,8(sp)
  80ab10:	dc400117 	ldw	r17,4(sp)
  80ab14:	dc000017 	ldw	r16,0(sp)
  80ab18:	dec00504 	addi	sp,sp,20
  80ab1c:	080c2a81 	jmpi	80c2a8 <_write_r>

0080ab20 <__sseek>:
  80ab20:	defffe04 	addi	sp,sp,-8
  80ab24:	dc000015 	stw	r16,0(sp)
  80ab28:	2821883a 	mov	r16,r5
  80ab2c:	2940038f 	ldh	r5,14(r5)
  80ab30:	dfc00115 	stw	ra,4(sp)
  80ab34:	080c7dc0 	call	80c7dc <_lseek_r>
  80ab38:	00ffffc4 	movi	r3,-1
  80ab3c:	10c00826 	beq	r2,r3,80ab60 <__sseek+0x40>
  80ab40:	80c0030b 	ldhu	r3,12(r16)
  80ab44:	80801415 	stw	r2,80(r16)
  80ab48:	18c40014 	ori	r3,r3,4096
  80ab4c:	80c0030d 	sth	r3,12(r16)
  80ab50:	dfc00117 	ldw	ra,4(sp)
  80ab54:	dc000017 	ldw	r16,0(sp)
  80ab58:	dec00204 	addi	sp,sp,8
  80ab5c:	f800283a 	ret
  80ab60:	80c0030b 	ldhu	r3,12(r16)
  80ab64:	18fbffcc 	andi	r3,r3,61439
  80ab68:	80c0030d 	sth	r3,12(r16)
  80ab6c:	dfc00117 	ldw	ra,4(sp)
  80ab70:	dc000017 	ldw	r16,0(sp)
  80ab74:	dec00204 	addi	sp,sp,8
  80ab78:	f800283a 	ret

0080ab7c <__sclose>:
  80ab7c:	2940038f 	ldh	r5,14(r5)
  80ab80:	080c3081 	jmpi	80c308 <_close_r>

0080ab84 <strcmp>:
  80ab84:	2144b03a 	or	r2,r4,r5
  80ab88:	108000cc 	andi	r2,r2,3
  80ab8c:	1000171e 	bne	r2,zero,80abec <strcmp+0x68>
  80ab90:	20800017 	ldw	r2,0(r4)
  80ab94:	28c00017 	ldw	r3,0(r5)
  80ab98:	10c0141e 	bne	r2,r3,80abec <strcmp+0x68>
  80ab9c:	027fbff4 	movhi	r9,65279
  80aba0:	4a7fbfc4 	addi	r9,r9,-257
  80aba4:	0086303a 	nor	r3,zero,r2
  80aba8:	02202074 	movhi	r8,32897
  80abac:	1245883a 	add	r2,r2,r9
  80abb0:	42202004 	addi	r8,r8,-32640
  80abb4:	10c4703a 	and	r2,r2,r3
  80abb8:	1204703a 	and	r2,r2,r8
  80abbc:	10000226 	beq	r2,zero,80abc8 <strcmp+0x44>
  80abc0:	00002306 	br	80ac50 <strcmp+0xcc>
  80abc4:	1000221e 	bne	r2,zero,80ac50 <strcmp+0xcc>
  80abc8:	21000104 	addi	r4,r4,4
  80abcc:	20c00017 	ldw	r3,0(r4)
  80abd0:	29400104 	addi	r5,r5,4
  80abd4:	29800017 	ldw	r6,0(r5)
  80abd8:	1a4f883a 	add	r7,r3,r9
  80abdc:	00c4303a 	nor	r2,zero,r3
  80abe0:	3884703a 	and	r2,r7,r2
  80abe4:	1204703a 	and	r2,r2,r8
  80abe8:	19bff626 	beq	r3,r6,80abc4 <__alt_mem_onchip_mem+0xff78abc4>
  80abec:	20800003 	ldbu	r2,0(r4)
  80abf0:	10c03fcc 	andi	r3,r2,255
  80abf4:	18c0201c 	xori	r3,r3,128
  80abf8:	18ffe004 	addi	r3,r3,-128
  80abfc:	18000c26 	beq	r3,zero,80ac30 <strcmp+0xac>
  80ac00:	29800007 	ldb	r6,0(r5)
  80ac04:	19800326 	beq	r3,r6,80ac14 <strcmp+0x90>
  80ac08:	00001306 	br	80ac58 <strcmp+0xd4>
  80ac0c:	29800007 	ldb	r6,0(r5)
  80ac10:	11800b1e 	bne	r2,r6,80ac40 <strcmp+0xbc>
  80ac14:	21000044 	addi	r4,r4,1
  80ac18:	20c00003 	ldbu	r3,0(r4)
  80ac1c:	29400044 	addi	r5,r5,1
  80ac20:	18803fcc 	andi	r2,r3,255
  80ac24:	1080201c 	xori	r2,r2,128
  80ac28:	10bfe004 	addi	r2,r2,-128
  80ac2c:	103ff71e 	bne	r2,zero,80ac0c <__alt_mem_onchip_mem+0xff78ac0c>
  80ac30:	0007883a 	mov	r3,zero
  80ac34:	28800003 	ldbu	r2,0(r5)
  80ac38:	1885c83a 	sub	r2,r3,r2
  80ac3c:	f800283a 	ret
  80ac40:	28800003 	ldbu	r2,0(r5)
  80ac44:	18c03fcc 	andi	r3,r3,255
  80ac48:	1885c83a 	sub	r2,r3,r2
  80ac4c:	f800283a 	ret
  80ac50:	0005883a 	mov	r2,zero
  80ac54:	f800283a 	ret
  80ac58:	10c03fcc 	andi	r3,r2,255
  80ac5c:	003ff506 	br	80ac34 <__alt_mem_onchip_mem+0xff78ac34>

0080ac60 <__sprint_r.part.0>:
  80ac60:	28801917 	ldw	r2,100(r5)
  80ac64:	defff604 	addi	sp,sp,-40
  80ac68:	dd400515 	stw	r21,20(sp)
  80ac6c:	dfc00915 	stw	ra,36(sp)
  80ac70:	df000815 	stw	fp,32(sp)
  80ac74:	ddc00715 	stw	r23,28(sp)
  80ac78:	dd800615 	stw	r22,24(sp)
  80ac7c:	dd000415 	stw	r20,16(sp)
  80ac80:	dcc00315 	stw	r19,12(sp)
  80ac84:	dc800215 	stw	r18,8(sp)
  80ac88:	dc400115 	stw	r17,4(sp)
  80ac8c:	dc000015 	stw	r16,0(sp)
  80ac90:	1088000c 	andi	r2,r2,8192
  80ac94:	302b883a 	mov	r21,r6
  80ac98:	10002e26 	beq	r2,zero,80ad54 <__sprint_r.part.0+0xf4>
  80ac9c:	30800217 	ldw	r2,8(r6)
  80aca0:	35800017 	ldw	r22,0(r6)
  80aca4:	10002926 	beq	r2,zero,80ad4c <__sprint_r.part.0+0xec>
  80aca8:	2827883a 	mov	r19,r5
  80acac:	2029883a 	mov	r20,r4
  80acb0:	b5c00104 	addi	r23,r22,4
  80acb4:	04bfffc4 	movi	r18,-1
  80acb8:	bc400017 	ldw	r17,0(r23)
  80acbc:	b4000017 	ldw	r16,0(r22)
  80acc0:	0039883a 	mov	fp,zero
  80acc4:	8822d0ba 	srli	r17,r17,2
  80acc8:	8800031e 	bne	r17,zero,80acd8 <__sprint_r.part.0+0x78>
  80accc:	00001806 	br	80ad30 <__sprint_r.part.0+0xd0>
  80acd0:	84000104 	addi	r16,r16,4
  80acd4:	8f001526 	beq	r17,fp,80ad2c <__sprint_r.part.0+0xcc>
  80acd8:	81400017 	ldw	r5,0(r16)
  80acdc:	980d883a 	mov	r6,r19
  80ace0:	a009883a 	mov	r4,r20
  80ace4:	080c6880 	call	80c688 <_fputwc_r>
  80ace8:	e7000044 	addi	fp,fp,1
  80acec:	14bff81e 	bne	r2,r18,80acd0 <__alt_mem_onchip_mem+0xff78acd0>
  80acf0:	9005883a 	mov	r2,r18
  80acf4:	a8000215 	stw	zero,8(r21)
  80acf8:	a8000115 	stw	zero,4(r21)
  80acfc:	dfc00917 	ldw	ra,36(sp)
  80ad00:	df000817 	ldw	fp,32(sp)
  80ad04:	ddc00717 	ldw	r23,28(sp)
  80ad08:	dd800617 	ldw	r22,24(sp)
  80ad0c:	dd400517 	ldw	r21,20(sp)
  80ad10:	dd000417 	ldw	r20,16(sp)
  80ad14:	dcc00317 	ldw	r19,12(sp)
  80ad18:	dc800217 	ldw	r18,8(sp)
  80ad1c:	dc400117 	ldw	r17,4(sp)
  80ad20:	dc000017 	ldw	r16,0(sp)
  80ad24:	dec00a04 	addi	sp,sp,40
  80ad28:	f800283a 	ret
  80ad2c:	a8800217 	ldw	r2,8(r21)
  80ad30:	8c63883a 	add	r17,r17,r17
  80ad34:	8c63883a 	add	r17,r17,r17
  80ad38:	1445c83a 	sub	r2,r2,r17
  80ad3c:	a8800215 	stw	r2,8(r21)
  80ad40:	b5800204 	addi	r22,r22,8
  80ad44:	bdc00204 	addi	r23,r23,8
  80ad48:	103fdb1e 	bne	r2,zero,80acb8 <__alt_mem_onchip_mem+0xff78acb8>
  80ad4c:	0005883a 	mov	r2,zero
  80ad50:	003fe806 	br	80acf4 <__alt_mem_onchip_mem+0xff78acf4>
  80ad54:	0807e880 	call	807e88 <__sfvwrite_r>
  80ad58:	003fe606 	br	80acf4 <__alt_mem_onchip_mem+0xff78acf4>

0080ad5c <__sprint_r>:
  80ad5c:	30c00217 	ldw	r3,8(r6)
  80ad60:	18000126 	beq	r3,zero,80ad68 <__sprint_r+0xc>
  80ad64:	080ac601 	jmpi	80ac60 <__sprint_r.part.0>
  80ad68:	30000115 	stw	zero,4(r6)
  80ad6c:	0005883a 	mov	r2,zero
  80ad70:	f800283a 	ret

0080ad74 <___vfiprintf_internal_r>:
  80ad74:	deffc904 	addi	sp,sp,-220
  80ad78:	df003515 	stw	fp,212(sp)
  80ad7c:	dd003115 	stw	r20,196(sp)
  80ad80:	dfc03615 	stw	ra,216(sp)
  80ad84:	ddc03415 	stw	r23,208(sp)
  80ad88:	dd803315 	stw	r22,204(sp)
  80ad8c:	dd403215 	stw	r21,200(sp)
  80ad90:	dcc03015 	stw	r19,192(sp)
  80ad94:	dc802f15 	stw	r18,188(sp)
  80ad98:	dc402e15 	stw	r17,184(sp)
  80ad9c:	dc002d15 	stw	r16,180(sp)
  80ada0:	d9002015 	stw	r4,128(sp)
  80ada4:	d9c02215 	stw	r7,136(sp)
  80ada8:	2829883a 	mov	r20,r5
  80adac:	3039883a 	mov	fp,r6
  80adb0:	20000226 	beq	r4,zero,80adbc <___vfiprintf_internal_r+0x48>
  80adb4:	20800e17 	ldw	r2,56(r4)
  80adb8:	1000cf26 	beq	r2,zero,80b0f8 <___vfiprintf_internal_r+0x384>
  80adbc:	a080030b 	ldhu	r2,12(r20)
  80adc0:	10c8000c 	andi	r3,r2,8192
  80adc4:	1800061e 	bne	r3,zero,80ade0 <___vfiprintf_internal_r+0x6c>
  80adc8:	a1001917 	ldw	r4,100(r20)
  80adcc:	00f7ffc4 	movi	r3,-8193
  80add0:	10880014 	ori	r2,r2,8192
  80add4:	20c6703a 	and	r3,r4,r3
  80add8:	a080030d 	sth	r2,12(r20)
  80addc:	a0c01915 	stw	r3,100(r20)
  80ade0:	10c0020c 	andi	r3,r2,8
  80ade4:	1800a926 	beq	r3,zero,80b08c <___vfiprintf_internal_r+0x318>
  80ade8:	a0c00417 	ldw	r3,16(r20)
  80adec:	1800a726 	beq	r3,zero,80b08c <___vfiprintf_internal_r+0x318>
  80adf0:	1080068c 	andi	r2,r2,26
  80adf4:	00c00284 	movi	r3,10
  80adf8:	10c0ac26 	beq	r2,r3,80b0ac <___vfiprintf_internal_r+0x338>
  80adfc:	da801a04 	addi	r10,sp,104
  80ae00:	da801e15 	stw	r10,120(sp)
  80ae04:	d8801e17 	ldw	r2,120(sp)
  80ae08:	da8019c4 	addi	r10,sp,103
  80ae0c:	05802074 	movhi	r22,129
  80ae10:	05c02074 	movhi	r23,129
  80ae14:	da801f15 	stw	r10,124(sp)
  80ae18:	1295c83a 	sub	r10,r2,r10
  80ae1c:	b590bf04 	addi	r22,r22,17148
  80ae20:	bdd0bb04 	addi	r23,r23,17132
  80ae24:	dec01a15 	stw	sp,104(sp)
  80ae28:	d8001c15 	stw	zero,112(sp)
  80ae2c:	d8001b15 	stw	zero,108(sp)
  80ae30:	d8002615 	stw	zero,152(sp)
  80ae34:	d8002315 	stw	zero,140(sp)
  80ae38:	da802715 	stw	r10,156(sp)
  80ae3c:	d811883a 	mov	r8,sp
  80ae40:	dd002115 	stw	r20,132(sp)
  80ae44:	e021883a 	mov	r16,fp
  80ae48:	80800007 	ldb	r2,0(r16)
  80ae4c:	1003ea26 	beq	r2,zero,80bdf8 <___vfiprintf_internal_r+0x1084>
  80ae50:	00c00944 	movi	r3,37
  80ae54:	8025883a 	mov	r18,r16
  80ae58:	10c0021e 	bne	r2,r3,80ae64 <___vfiprintf_internal_r+0xf0>
  80ae5c:	00001606 	br	80aeb8 <___vfiprintf_internal_r+0x144>
  80ae60:	10c00326 	beq	r2,r3,80ae70 <___vfiprintf_internal_r+0xfc>
  80ae64:	94800044 	addi	r18,r18,1
  80ae68:	90800007 	ldb	r2,0(r18)
  80ae6c:	103ffc1e 	bne	r2,zero,80ae60 <__alt_mem_onchip_mem+0xff78ae60>
  80ae70:	9423c83a 	sub	r17,r18,r16
  80ae74:	88001026 	beq	r17,zero,80aeb8 <___vfiprintf_internal_r+0x144>
  80ae78:	d8c01c17 	ldw	r3,112(sp)
  80ae7c:	d8801b17 	ldw	r2,108(sp)
  80ae80:	44000015 	stw	r16,0(r8)
  80ae84:	88c7883a 	add	r3,r17,r3
  80ae88:	10800044 	addi	r2,r2,1
  80ae8c:	44400115 	stw	r17,4(r8)
  80ae90:	d8c01c15 	stw	r3,112(sp)
  80ae94:	d8801b15 	stw	r2,108(sp)
  80ae98:	010001c4 	movi	r4,7
  80ae9c:	2080760e 	bge	r4,r2,80b078 <___vfiprintf_internal_r+0x304>
  80aea0:	1803821e 	bne	r3,zero,80bcac <___vfiprintf_internal_r+0xf38>
  80aea4:	da802317 	ldw	r10,140(sp)
  80aea8:	d8001b15 	stw	zero,108(sp)
  80aeac:	d811883a 	mov	r8,sp
  80aeb0:	5455883a 	add	r10,r10,r17
  80aeb4:	da802315 	stw	r10,140(sp)
  80aeb8:	90800007 	ldb	r2,0(r18)
  80aebc:	10044626 	beq	r2,zero,80bfd8 <___vfiprintf_internal_r+0x1264>
  80aec0:	90c00047 	ldb	r3,1(r18)
  80aec4:	94000044 	addi	r16,r18,1
  80aec8:	d8001d85 	stb	zero,118(sp)
  80aecc:	0009883a 	mov	r4,zero
  80aed0:	000f883a 	mov	r7,zero
  80aed4:	027fffc4 	movi	r9,-1
  80aed8:	0023883a 	mov	r17,zero
  80aedc:	0029883a 	mov	r20,zero
  80aee0:	01401604 	movi	r5,88
  80aee4:	01800244 	movi	r6,9
  80aee8:	03400a84 	movi	r13,42
  80aeec:	03001b04 	movi	r12,108
  80aef0:	84000044 	addi	r16,r16,1
  80aef4:	18bff804 	addi	r2,r3,-32
  80aef8:	28827336 	bltu	r5,r2,80b8c8 <___vfiprintf_internal_r+0xb54>
  80aefc:	100490ba 	slli	r2,r2,2
  80af00:	02802074 	movhi	r10,129
  80af04:	52abc504 	addi	r10,r10,-20716
  80af08:	1285883a 	add	r2,r2,r10
  80af0c:	10800017 	ldw	r2,0(r2)
  80af10:	1000683a 	jmp	r2
  80af14:	0080b5fc 	xorhi	r2,zero,727
  80af18:	0080b8c8 	cmpgei	r2,zero,739
  80af1c:	0080b8c8 	cmpgei	r2,zero,739
  80af20:	0080b61c 	xori	r2,zero,728
  80af24:	0080b8c8 	cmpgei	r2,zero,739
  80af28:	0080b8c8 	cmpgei	r2,zero,739
  80af2c:	0080b8c8 	cmpgei	r2,zero,739
  80af30:	0080b8c8 	cmpgei	r2,zero,739
  80af34:	0080b8c8 	cmpgei	r2,zero,739
  80af38:	0080b8c8 	cmpgei	r2,zero,739
  80af3c:	0080b804 	movi	r2,736
  80af40:	0080b820 	cmpeqi	r2,zero,736
  80af44:	0080b8c8 	cmpgei	r2,zero,739
  80af48:	0080b108 	cmpgei	r2,zero,708
  80af4c:	0080b830 	cmpltui	r2,zero,736
  80af50:	0080b8c8 	cmpgei	r2,zero,739
  80af54:	0080b628 	cmpgeui	r2,zero,728
  80af58:	0080b634 	movhi	r2,728
  80af5c:	0080b634 	movhi	r2,728
  80af60:	0080b634 	movhi	r2,728
  80af64:	0080b634 	movhi	r2,728
  80af68:	0080b634 	movhi	r2,728
  80af6c:	0080b634 	movhi	r2,728
  80af70:	0080b634 	movhi	r2,728
  80af74:	0080b634 	movhi	r2,728
  80af78:	0080b634 	movhi	r2,728
  80af7c:	0080b8c8 	cmpgei	r2,zero,739
  80af80:	0080b8c8 	cmpgei	r2,zero,739
  80af84:	0080b8c8 	cmpgei	r2,zero,739
  80af88:	0080b8c8 	cmpgei	r2,zero,739
  80af8c:	0080b8c8 	cmpgei	r2,zero,739
  80af90:	0080b8c8 	cmpgei	r2,zero,739
  80af94:	0080b8c8 	cmpgei	r2,zero,739
  80af98:	0080b8c8 	cmpgei	r2,zero,739
  80af9c:	0080b8c8 	cmpgei	r2,zero,739
  80afa0:	0080b8c8 	cmpgei	r2,zero,739
  80afa4:	0080b660 	cmpeqi	r2,zero,729
  80afa8:	0080b8c8 	cmpgei	r2,zero,739
  80afac:	0080b8c8 	cmpgei	r2,zero,739
  80afb0:	0080b8c8 	cmpgei	r2,zero,739
  80afb4:	0080b8c8 	cmpgei	r2,zero,739
  80afb8:	0080b8c8 	cmpgei	r2,zero,739
  80afbc:	0080b8c8 	cmpgei	r2,zero,739
  80afc0:	0080b8c8 	cmpgei	r2,zero,739
  80afc4:	0080b8c8 	cmpgei	r2,zero,739
  80afc8:	0080b8c8 	cmpgei	r2,zero,739
  80afcc:	0080b8c8 	cmpgei	r2,zero,739
  80afd0:	0080b698 	cmpnei	r2,zero,730
  80afd4:	0080b8c8 	cmpgei	r2,zero,739
  80afd8:	0080b8c8 	cmpgei	r2,zero,739
  80afdc:	0080b8c8 	cmpgei	r2,zero,739
  80afe0:	0080b8c8 	cmpgei	r2,zero,739
  80afe4:	0080b8c8 	cmpgei	r2,zero,739
  80afe8:	0080b6f0 	cmpltui	r2,zero,731
  80afec:	0080b8c8 	cmpgei	r2,zero,739
  80aff0:	0080b8c8 	cmpgei	r2,zero,739
  80aff4:	0080b760 	cmpeqi	r2,zero,733
  80aff8:	0080b8c8 	cmpgei	r2,zero,739
  80affc:	0080b8c8 	cmpgei	r2,zero,739
  80b000:	0080b8c8 	cmpgei	r2,zero,739
  80b004:	0080b8c8 	cmpgei	r2,zero,739
  80b008:	0080b8c8 	cmpgei	r2,zero,739
  80b00c:	0080b8c8 	cmpgei	r2,zero,739
  80b010:	0080b8c8 	cmpgei	r2,zero,739
  80b014:	0080b8c8 	cmpgei	r2,zero,739
  80b018:	0080b8c8 	cmpgei	r2,zero,739
  80b01c:	0080b8c8 	cmpgei	r2,zero,739
  80b020:	0080b50c 	andi	r2,zero,724
  80b024:	0080b538 	rdprs	r2,zero,724
  80b028:	0080b8c8 	cmpgei	r2,zero,739
  80b02c:	0080b8c8 	cmpgei	r2,zero,739
  80b030:	0080b8c8 	cmpgei	r2,zero,739
  80b034:	0080b870 	cmpltui	r2,zero,737
  80b038:	0080b538 	rdprs	r2,zero,724
  80b03c:	0080b8c8 	cmpgei	r2,zero,739
  80b040:	0080b8c8 	cmpgei	r2,zero,739
  80b044:	0080b3cc 	andi	r2,zero,719
  80b048:	0080b8c8 	cmpgei	r2,zero,739
  80b04c:	0080b3dc 	xori	r2,zero,719
  80b050:	0080b418 	cmpnei	r2,zero,720
  80b054:	0080b114 	movui	r2,708
  80b058:	0080b3c0 	call	80b3c <__alt_mem_sdram-0x77f4c4>
  80b05c:	0080b8c8 	cmpgei	r2,zero,739
  80b060:	0080b79c 	xori	r2,zero,734
  80b064:	0080b8c8 	cmpgei	r2,zero,739
  80b068:	0080b7f4 	movhi	r2,735
  80b06c:	0080b8c8 	cmpgei	r2,zero,739
  80b070:	0080b8c8 	cmpgei	r2,zero,739
  80b074:	0080b4b8 	rdprs	r2,zero,722
  80b078:	42000204 	addi	r8,r8,8
  80b07c:	da802317 	ldw	r10,140(sp)
  80b080:	5455883a 	add	r10,r10,r17
  80b084:	da802315 	stw	r10,140(sp)
  80b088:	003f8b06 	br	80aeb8 <__alt_mem_onchip_mem+0xff78aeb8>
  80b08c:	d9002017 	ldw	r4,128(sp)
  80b090:	a00b883a 	mov	r5,r20
  80b094:	0805a300 	call	805a30 <__swsetup_r>
  80b098:	1003b11e 	bne	r2,zero,80bf60 <___vfiprintf_internal_r+0x11ec>
  80b09c:	a080030b 	ldhu	r2,12(r20)
  80b0a0:	00c00284 	movi	r3,10
  80b0a4:	1080068c 	andi	r2,r2,26
  80b0a8:	10ff541e 	bne	r2,r3,80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80b0ac:	a080038f 	ldh	r2,14(r20)
  80b0b0:	103f5216 	blt	r2,zero,80adfc <__alt_mem_onchip_mem+0xff78adfc>
  80b0b4:	d9c02217 	ldw	r7,136(sp)
  80b0b8:	d9002017 	ldw	r4,128(sp)
  80b0bc:	e00d883a 	mov	r6,fp
  80b0c0:	a00b883a 	mov	r5,r20
  80b0c4:	080c1ec0 	call	80c1ec <__sbprintf>
  80b0c8:	dfc03617 	ldw	ra,216(sp)
  80b0cc:	df003517 	ldw	fp,212(sp)
  80b0d0:	ddc03417 	ldw	r23,208(sp)
  80b0d4:	dd803317 	ldw	r22,204(sp)
  80b0d8:	dd403217 	ldw	r21,200(sp)
  80b0dc:	dd003117 	ldw	r20,196(sp)
  80b0e0:	dcc03017 	ldw	r19,192(sp)
  80b0e4:	dc802f17 	ldw	r18,188(sp)
  80b0e8:	dc402e17 	ldw	r17,184(sp)
  80b0ec:	dc002d17 	ldw	r16,180(sp)
  80b0f0:	dec03704 	addi	sp,sp,220
  80b0f4:	f800283a 	ret
  80b0f8:	0807a040 	call	807a04 <__sinit>
  80b0fc:	003f2f06 	br	80adbc <__alt_mem_onchip_mem+0xff78adbc>
  80b100:	0463c83a 	sub	r17,zero,r17
  80b104:	d8802215 	stw	r2,136(sp)
  80b108:	a5000114 	ori	r20,r20,4
  80b10c:	80c00007 	ldb	r3,0(r16)
  80b110:	003f7706 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b114:	00800c04 	movi	r2,48
  80b118:	da802217 	ldw	r10,136(sp)
  80b11c:	d8801d05 	stb	r2,116(sp)
  80b120:	00801e04 	movi	r2,120
  80b124:	d8801d45 	stb	r2,117(sp)
  80b128:	d8001d85 	stb	zero,118(sp)
  80b12c:	50c00104 	addi	r3,r10,4
  80b130:	54800017 	ldw	r18,0(r10)
  80b134:	0027883a 	mov	r19,zero
  80b138:	a0800094 	ori	r2,r20,2
  80b13c:	48030b16 	blt	r9,zero,80bd6c <___vfiprintf_internal_r+0xff8>
  80b140:	00bfdfc4 	movi	r2,-129
  80b144:	a096703a 	and	r11,r20,r2
  80b148:	d8c02215 	stw	r3,136(sp)
  80b14c:	5d000094 	ori	r20,r11,2
  80b150:	90032b1e 	bne	r18,zero,80be00 <___vfiprintf_internal_r+0x108c>
  80b154:	00802074 	movhi	r2,129
  80b158:	10905b04 	addi	r2,r2,16748
  80b15c:	d8802615 	stw	r2,152(sp)
  80b160:	0039883a 	mov	fp,zero
  80b164:	48017b1e 	bne	r9,zero,80b754 <___vfiprintf_internal_r+0x9e0>
  80b168:	0013883a 	mov	r9,zero
  80b16c:	0027883a 	mov	r19,zero
  80b170:	dd401a04 	addi	r21,sp,104
  80b174:	4825883a 	mov	r18,r9
  80b178:	4cc0010e 	bge	r9,r19,80b180 <___vfiprintf_internal_r+0x40c>
  80b17c:	9825883a 	mov	r18,r19
  80b180:	e7003fcc 	andi	fp,fp,255
  80b184:	e700201c 	xori	fp,fp,128
  80b188:	e73fe004 	addi	fp,fp,-128
  80b18c:	e0000126 	beq	fp,zero,80b194 <___vfiprintf_internal_r+0x420>
  80b190:	94800044 	addi	r18,r18,1
  80b194:	a380008c 	andi	r14,r20,2
  80b198:	70000126 	beq	r14,zero,80b1a0 <___vfiprintf_internal_r+0x42c>
  80b19c:	94800084 	addi	r18,r18,2
  80b1a0:	a700210c 	andi	fp,r20,132
  80b1a4:	e001df1e 	bne	fp,zero,80b924 <___vfiprintf_internal_r+0xbb0>
  80b1a8:	8c87c83a 	sub	r3,r17,r18
  80b1ac:	00c1dd0e 	bge	zero,r3,80b924 <___vfiprintf_internal_r+0xbb0>
  80b1b0:	01c00404 	movi	r7,16
  80b1b4:	d8801c17 	ldw	r2,112(sp)
  80b1b8:	38c3ad0e 	bge	r7,r3,80c070 <___vfiprintf_internal_r+0x12fc>
  80b1bc:	02802074 	movhi	r10,129
  80b1c0:	5290bf04 	addi	r10,r10,17148
  80b1c4:	dc002915 	stw	r16,164(sp)
  80b1c8:	d9801b17 	ldw	r6,108(sp)
  80b1cc:	da802415 	stw	r10,144(sp)
  80b1d0:	03c001c4 	movi	r15,7
  80b1d4:	da402515 	stw	r9,148(sp)
  80b1d8:	db802815 	stw	r14,160(sp)
  80b1dc:	1821883a 	mov	r16,r3
  80b1e0:	00000506 	br	80b1f8 <___vfiprintf_internal_r+0x484>
  80b1e4:	31400084 	addi	r5,r6,2
  80b1e8:	42000204 	addi	r8,r8,8
  80b1ec:	200d883a 	mov	r6,r4
  80b1f0:	843ffc04 	addi	r16,r16,-16
  80b1f4:	3c000d0e 	bge	r7,r16,80b22c <___vfiprintf_internal_r+0x4b8>
  80b1f8:	10800404 	addi	r2,r2,16
  80b1fc:	31000044 	addi	r4,r6,1
  80b200:	45800015 	stw	r22,0(r8)
  80b204:	41c00115 	stw	r7,4(r8)
  80b208:	d8801c15 	stw	r2,112(sp)
  80b20c:	d9001b15 	stw	r4,108(sp)
  80b210:	793ff40e 	bge	r15,r4,80b1e4 <__alt_mem_onchip_mem+0xff78b1e4>
  80b214:	1001b51e 	bne	r2,zero,80b8ec <___vfiprintf_internal_r+0xb78>
  80b218:	843ffc04 	addi	r16,r16,-16
  80b21c:	000d883a 	mov	r6,zero
  80b220:	01400044 	movi	r5,1
  80b224:	d811883a 	mov	r8,sp
  80b228:	3c3ff316 	blt	r7,r16,80b1f8 <__alt_mem_onchip_mem+0xff78b1f8>
  80b22c:	8007883a 	mov	r3,r16
  80b230:	da402517 	ldw	r9,148(sp)
  80b234:	db802817 	ldw	r14,160(sp)
  80b238:	dc002917 	ldw	r16,164(sp)
  80b23c:	da802417 	ldw	r10,144(sp)
  80b240:	1885883a 	add	r2,r3,r2
  80b244:	40c00115 	stw	r3,4(r8)
  80b248:	42800015 	stw	r10,0(r8)
  80b24c:	d8801c15 	stw	r2,112(sp)
  80b250:	d9401b15 	stw	r5,108(sp)
  80b254:	00c001c4 	movi	r3,7
  80b258:	19426016 	blt	r3,r5,80bbdc <___vfiprintf_internal_r+0xe68>
  80b25c:	d8c01d87 	ldb	r3,118(sp)
  80b260:	42000204 	addi	r8,r8,8
  80b264:	29000044 	addi	r4,r5,1
  80b268:	1801b31e 	bne	r3,zero,80b938 <___vfiprintf_internal_r+0xbc4>
  80b26c:	7001c026 	beq	r14,zero,80b970 <___vfiprintf_internal_r+0xbfc>
  80b270:	d8c01d04 	addi	r3,sp,116
  80b274:	10800084 	addi	r2,r2,2
  80b278:	40c00015 	stw	r3,0(r8)
  80b27c:	00c00084 	movi	r3,2
  80b280:	40c00115 	stw	r3,4(r8)
  80b284:	d8801c15 	stw	r2,112(sp)
  80b288:	d9001b15 	stw	r4,108(sp)
  80b28c:	00c001c4 	movi	r3,7
  80b290:	1902650e 	bge	r3,r4,80bc28 <___vfiprintf_internal_r+0xeb4>
  80b294:	10029a1e 	bne	r2,zero,80bd00 <___vfiprintf_internal_r+0xf8c>
  80b298:	00c02004 	movi	r3,128
  80b29c:	01000044 	movi	r4,1
  80b2a0:	000b883a 	mov	r5,zero
  80b2a4:	d811883a 	mov	r8,sp
  80b2a8:	e0c1b31e 	bne	fp,r3,80b978 <___vfiprintf_internal_r+0xc04>
  80b2ac:	8cb9c83a 	sub	fp,r17,r18
  80b2b0:	0701b10e 	bge	zero,fp,80b978 <___vfiprintf_internal_r+0xc04>
  80b2b4:	01c00404 	movi	r7,16
  80b2b8:	3f03890e 	bge	r7,fp,80c0e0 <___vfiprintf_internal_r+0x136c>
  80b2bc:	00c02074 	movhi	r3,129
  80b2c0:	18d0bb04 	addi	r3,r3,17132
  80b2c4:	d8c02415 	stw	r3,144(sp)
  80b2c8:	8007883a 	mov	r3,r16
  80b2cc:	034001c4 	movi	r13,7
  80b2d0:	e021883a 	mov	r16,fp
  80b2d4:	da402515 	stw	r9,148(sp)
  80b2d8:	1839883a 	mov	fp,r3
  80b2dc:	00000506 	br	80b2f4 <___vfiprintf_internal_r+0x580>
  80b2e0:	29800084 	addi	r6,r5,2
  80b2e4:	42000204 	addi	r8,r8,8
  80b2e8:	180b883a 	mov	r5,r3
  80b2ec:	843ffc04 	addi	r16,r16,-16
  80b2f0:	3c000d0e 	bge	r7,r16,80b328 <___vfiprintf_internal_r+0x5b4>
  80b2f4:	10800404 	addi	r2,r2,16
  80b2f8:	28c00044 	addi	r3,r5,1
  80b2fc:	45c00015 	stw	r23,0(r8)
  80b300:	41c00115 	stw	r7,4(r8)
  80b304:	d8801c15 	stw	r2,112(sp)
  80b308:	d8c01b15 	stw	r3,108(sp)
  80b30c:	68fff40e 	bge	r13,r3,80b2e0 <__alt_mem_onchip_mem+0xff78b2e0>
  80b310:	1002241e 	bne	r2,zero,80bba4 <___vfiprintf_internal_r+0xe30>
  80b314:	843ffc04 	addi	r16,r16,-16
  80b318:	01800044 	movi	r6,1
  80b31c:	000b883a 	mov	r5,zero
  80b320:	d811883a 	mov	r8,sp
  80b324:	3c3ff316 	blt	r7,r16,80b2f4 <__alt_mem_onchip_mem+0xff78b2f4>
  80b328:	da402517 	ldw	r9,148(sp)
  80b32c:	e007883a 	mov	r3,fp
  80b330:	8039883a 	mov	fp,r16
  80b334:	1821883a 	mov	r16,r3
  80b338:	d8c02417 	ldw	r3,144(sp)
  80b33c:	1705883a 	add	r2,r2,fp
  80b340:	47000115 	stw	fp,4(r8)
  80b344:	40c00015 	stw	r3,0(r8)
  80b348:	d8801c15 	stw	r2,112(sp)
  80b34c:	d9801b15 	stw	r6,108(sp)
  80b350:	00c001c4 	movi	r3,7
  80b354:	19827616 	blt	r3,r6,80bd30 <___vfiprintf_internal_r+0xfbc>
  80b358:	4cf9c83a 	sub	fp,r9,r19
  80b35c:	42000204 	addi	r8,r8,8
  80b360:	31000044 	addi	r4,r6,1
  80b364:	300b883a 	mov	r5,r6
  80b368:	07018516 	blt	zero,fp,80b980 <___vfiprintf_internal_r+0xc0c>
  80b36c:	9885883a 	add	r2,r19,r2
  80b370:	45400015 	stw	r21,0(r8)
  80b374:	44c00115 	stw	r19,4(r8)
  80b378:	d8801c15 	stw	r2,112(sp)
  80b37c:	d9001b15 	stw	r4,108(sp)
  80b380:	00c001c4 	movi	r3,7
  80b384:	1901dd0e 	bge	r3,r4,80bafc <___vfiprintf_internal_r+0xd88>
  80b388:	1002401e 	bne	r2,zero,80bc8c <___vfiprintf_internal_r+0xf18>
  80b38c:	d8001b15 	stw	zero,108(sp)
  80b390:	a2c0010c 	andi	r11,r20,4
  80b394:	58000226 	beq	r11,zero,80b3a0 <___vfiprintf_internal_r+0x62c>
  80b398:	8ca7c83a 	sub	r19,r17,r18
  80b39c:	04c2f216 	blt	zero,r19,80bf68 <___vfiprintf_internal_r+0x11f4>
  80b3a0:	8c80010e 	bge	r17,r18,80b3a8 <___vfiprintf_internal_r+0x634>
  80b3a4:	9023883a 	mov	r17,r18
  80b3a8:	da802317 	ldw	r10,140(sp)
  80b3ac:	5455883a 	add	r10,r10,r17
  80b3b0:	da802315 	stw	r10,140(sp)
  80b3b4:	d8001b15 	stw	zero,108(sp)
  80b3b8:	d811883a 	mov	r8,sp
  80b3bc:	003ea206 	br	80ae48 <__alt_mem_onchip_mem+0xff78ae48>
  80b3c0:	a5000814 	ori	r20,r20,32
  80b3c4:	80c00007 	ldb	r3,0(r16)
  80b3c8:	003ec906 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b3cc:	80c00007 	ldb	r3,0(r16)
  80b3d0:	1b030926 	beq	r3,r12,80bff8 <___vfiprintf_internal_r+0x1284>
  80b3d4:	a5000414 	ori	r20,r20,16
  80b3d8:	003ec506 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b3dc:	21003fcc 	andi	r4,r4,255
  80b3e0:	20035e1e 	bne	r4,zero,80c15c <___vfiprintf_internal_r+0x13e8>
  80b3e4:	a080080c 	andi	r2,r20,32
  80b3e8:	1002a526 	beq	r2,zero,80be80 <___vfiprintf_internal_r+0x110c>
  80b3ec:	da802217 	ldw	r10,136(sp)
  80b3f0:	50800017 	ldw	r2,0(r10)
  80b3f4:	da802317 	ldw	r10,140(sp)
  80b3f8:	5007d7fa 	srai	r3,r10,31
  80b3fc:	da802217 	ldw	r10,136(sp)
  80b400:	10c00115 	stw	r3,4(r2)
  80b404:	52800104 	addi	r10,r10,4
  80b408:	da802215 	stw	r10,136(sp)
  80b40c:	da802317 	ldw	r10,140(sp)
  80b410:	12800015 	stw	r10,0(r2)
  80b414:	003e8c06 	br	80ae48 <__alt_mem_onchip_mem+0xff78ae48>
  80b418:	21003fcc 	andi	r4,r4,255
  80b41c:	2003511e 	bne	r4,zero,80c164 <___vfiprintf_internal_r+0x13f0>
  80b420:	a080080c 	andi	r2,r20,32
  80b424:	1000a126 	beq	r2,zero,80b6ac <___vfiprintf_internal_r+0x938>
  80b428:	da802217 	ldw	r10,136(sp)
  80b42c:	d8001d85 	stb	zero,118(sp)
  80b430:	50800204 	addi	r2,r10,8
  80b434:	54800017 	ldw	r18,0(r10)
  80b438:	54c00117 	ldw	r19,4(r10)
  80b43c:	4802b416 	blt	r9,zero,80bf10 <___vfiprintf_internal_r+0x119c>
  80b440:	013fdfc4 	movi	r4,-129
  80b444:	94c6b03a 	or	r3,r18,r19
  80b448:	d8802215 	stw	r2,136(sp)
  80b44c:	a128703a 	and	r20,r20,r4
  80b450:	1800a226 	beq	r3,zero,80b6dc <___vfiprintf_internal_r+0x968>
  80b454:	0039883a 	mov	fp,zero
  80b458:	dd401a04 	addi	r21,sp,104
  80b45c:	9006d0fa 	srli	r3,r18,3
  80b460:	9808977a 	slli	r4,r19,29
  80b464:	9826d0fa 	srli	r19,r19,3
  80b468:	948001cc 	andi	r18,r18,7
  80b46c:	90800c04 	addi	r2,r18,48
  80b470:	ad7fffc4 	addi	r21,r21,-1
  80b474:	20e4b03a 	or	r18,r4,r3
  80b478:	a8800005 	stb	r2,0(r21)
  80b47c:	94c6b03a 	or	r3,r18,r19
  80b480:	183ff61e 	bne	r3,zero,80b45c <__alt_mem_onchip_mem+0xff78b45c>
  80b484:	a0c0004c 	andi	r3,r20,1
  80b488:	18005926 	beq	r3,zero,80b5f0 <___vfiprintf_internal_r+0x87c>
  80b48c:	10803fcc 	andi	r2,r2,255
  80b490:	1080201c 	xori	r2,r2,128
  80b494:	10bfe004 	addi	r2,r2,-128
  80b498:	00c00c04 	movi	r3,48
  80b49c:	10c05426 	beq	r2,r3,80b5f0 <___vfiprintf_internal_r+0x87c>
  80b4a0:	da801e17 	ldw	r10,120(sp)
  80b4a4:	a8bfffc4 	addi	r2,r21,-1
  80b4a8:	a8ffffc5 	stb	r3,-1(r21)
  80b4ac:	50a7c83a 	sub	r19,r10,r2
  80b4b0:	102b883a 	mov	r21,r2
  80b4b4:	003f2f06 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b4b8:	21003fcc 	andi	r4,r4,255
  80b4bc:	2003421e 	bne	r4,zero,80c1c8 <___vfiprintf_internal_r+0x1454>
  80b4c0:	00802074 	movhi	r2,129
  80b4c4:	10905b04 	addi	r2,r2,16748
  80b4c8:	d8802615 	stw	r2,152(sp)
  80b4cc:	a080080c 	andi	r2,r20,32
  80b4d0:	1000aa26 	beq	r2,zero,80b77c <___vfiprintf_internal_r+0xa08>
  80b4d4:	da802217 	ldw	r10,136(sp)
  80b4d8:	54800017 	ldw	r18,0(r10)
  80b4dc:	54c00117 	ldw	r19,4(r10)
  80b4e0:	52800204 	addi	r10,r10,8
  80b4e4:	da802215 	stw	r10,136(sp)
  80b4e8:	a080004c 	andi	r2,r20,1
  80b4ec:	1001d226 	beq	r2,zero,80bc38 <___vfiprintf_internal_r+0xec4>
  80b4f0:	94c4b03a 	or	r2,r18,r19
  80b4f4:	1002351e 	bne	r2,zero,80bdcc <___vfiprintf_internal_r+0x1058>
  80b4f8:	d8001d85 	stb	zero,118(sp)
  80b4fc:	48022216 	blt	r9,zero,80bd88 <___vfiprintf_internal_r+0x1014>
  80b500:	00bfdfc4 	movi	r2,-129
  80b504:	a0a8703a 	and	r20,r20,r2
  80b508:	003f1506 	br	80b160 <__alt_mem_onchip_mem+0xff78b160>
  80b50c:	da802217 	ldw	r10,136(sp)
  80b510:	04800044 	movi	r18,1
  80b514:	d8001d85 	stb	zero,118(sp)
  80b518:	50800017 	ldw	r2,0(r10)
  80b51c:	52800104 	addi	r10,r10,4
  80b520:	da802215 	stw	r10,136(sp)
  80b524:	d8801005 	stb	r2,64(sp)
  80b528:	9027883a 	mov	r19,r18
  80b52c:	dd401004 	addi	r21,sp,64
  80b530:	0013883a 	mov	r9,zero
  80b534:	003f1706 	br	80b194 <__alt_mem_onchip_mem+0xff78b194>
  80b538:	21003fcc 	andi	r4,r4,255
  80b53c:	2003201e 	bne	r4,zero,80c1c0 <___vfiprintf_internal_r+0x144c>
  80b540:	a080080c 	andi	r2,r20,32
  80b544:	10004b26 	beq	r2,zero,80b674 <___vfiprintf_internal_r+0x900>
  80b548:	da802217 	ldw	r10,136(sp)
  80b54c:	50800117 	ldw	r2,4(r10)
  80b550:	54800017 	ldw	r18,0(r10)
  80b554:	52800204 	addi	r10,r10,8
  80b558:	da802215 	stw	r10,136(sp)
  80b55c:	1027883a 	mov	r19,r2
  80b560:	10022c16 	blt	r2,zero,80be14 <___vfiprintf_internal_r+0x10a0>
  80b564:	df001d83 	ldbu	fp,118(sp)
  80b568:	48007216 	blt	r9,zero,80b734 <___vfiprintf_internal_r+0x9c0>
  80b56c:	00ffdfc4 	movi	r3,-129
  80b570:	94c4b03a 	or	r2,r18,r19
  80b574:	a0e8703a 	and	r20,r20,r3
  80b578:	1000cc26 	beq	r2,zero,80b8ac <___vfiprintf_internal_r+0xb38>
  80b57c:	98021026 	beq	r19,zero,80bdc0 <___vfiprintf_internal_r+0x104c>
  80b580:	dc402415 	stw	r17,144(sp)
  80b584:	dc002515 	stw	r16,148(sp)
  80b588:	9823883a 	mov	r17,r19
  80b58c:	9021883a 	mov	r16,r18
  80b590:	dd401a04 	addi	r21,sp,104
  80b594:	4825883a 	mov	r18,r9
  80b598:	4027883a 	mov	r19,r8
  80b59c:	8009883a 	mov	r4,r16
  80b5a0:	880b883a 	mov	r5,r17
  80b5a4:	01800284 	movi	r6,10
  80b5a8:	000f883a 	mov	r7,zero
  80b5ac:	080d1540 	call	80d154 <__umoddi3>
  80b5b0:	10800c04 	addi	r2,r2,48
  80b5b4:	ad7fffc4 	addi	r21,r21,-1
  80b5b8:	8009883a 	mov	r4,r16
  80b5bc:	880b883a 	mov	r5,r17
  80b5c0:	a8800005 	stb	r2,0(r21)
  80b5c4:	01800284 	movi	r6,10
  80b5c8:	000f883a 	mov	r7,zero
  80b5cc:	080cbdc0 	call	80cbdc <__udivdi3>
  80b5d0:	1021883a 	mov	r16,r2
  80b5d4:	10c4b03a 	or	r2,r2,r3
  80b5d8:	1823883a 	mov	r17,r3
  80b5dc:	103fef1e 	bne	r2,zero,80b59c <__alt_mem_onchip_mem+0xff78b59c>
  80b5e0:	dc402417 	ldw	r17,144(sp)
  80b5e4:	dc002517 	ldw	r16,148(sp)
  80b5e8:	9013883a 	mov	r9,r18
  80b5ec:	9811883a 	mov	r8,r19
  80b5f0:	da801e17 	ldw	r10,120(sp)
  80b5f4:	5567c83a 	sub	r19,r10,r21
  80b5f8:	003ede06 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b5fc:	38803fcc 	andi	r2,r7,255
  80b600:	1080201c 	xori	r2,r2,128
  80b604:	10bfe004 	addi	r2,r2,-128
  80b608:	1002371e 	bne	r2,zero,80bee8 <___vfiprintf_internal_r+0x1174>
  80b60c:	01000044 	movi	r4,1
  80b610:	01c00804 	movi	r7,32
  80b614:	80c00007 	ldb	r3,0(r16)
  80b618:	003e3506 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b61c:	a5000054 	ori	r20,r20,1
  80b620:	80c00007 	ldb	r3,0(r16)
  80b624:	003e3206 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b628:	a5002014 	ori	r20,r20,128
  80b62c:	80c00007 	ldb	r3,0(r16)
  80b630:	003e2f06 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b634:	8015883a 	mov	r10,r16
  80b638:	0023883a 	mov	r17,zero
  80b63c:	18bff404 	addi	r2,r3,-48
  80b640:	50c00007 	ldb	r3,0(r10)
  80b644:	8c4002a4 	muli	r17,r17,10
  80b648:	84000044 	addi	r16,r16,1
  80b64c:	8015883a 	mov	r10,r16
  80b650:	1463883a 	add	r17,r2,r17
  80b654:	18bff404 	addi	r2,r3,-48
  80b658:	30bff92e 	bgeu	r6,r2,80b640 <__alt_mem_onchip_mem+0xff78b640>
  80b65c:	003e2506 	br	80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b660:	21003fcc 	andi	r4,r4,255
  80b664:	2002d41e 	bne	r4,zero,80c1b8 <___vfiprintf_internal_r+0x1444>
  80b668:	a5000414 	ori	r20,r20,16
  80b66c:	a080080c 	andi	r2,r20,32
  80b670:	103fb51e 	bne	r2,zero,80b548 <__alt_mem_onchip_mem+0xff78b548>
  80b674:	a080040c 	andi	r2,r20,16
  80b678:	1001f826 	beq	r2,zero,80be5c <___vfiprintf_internal_r+0x10e8>
  80b67c:	da802217 	ldw	r10,136(sp)
  80b680:	54800017 	ldw	r18,0(r10)
  80b684:	52800104 	addi	r10,r10,4
  80b688:	da802215 	stw	r10,136(sp)
  80b68c:	9027d7fa 	srai	r19,r18,31
  80b690:	9805883a 	mov	r2,r19
  80b694:	003fb206 	br	80b560 <__alt_mem_onchip_mem+0xff78b560>
  80b698:	21003fcc 	andi	r4,r4,255
  80b69c:	2002c41e 	bne	r4,zero,80c1b0 <___vfiprintf_internal_r+0x143c>
  80b6a0:	a5000414 	ori	r20,r20,16
  80b6a4:	a080080c 	andi	r2,r20,32
  80b6a8:	103f5f1e 	bne	r2,zero,80b428 <__alt_mem_onchip_mem+0xff78b428>
  80b6ac:	a080040c 	andi	r2,r20,16
  80b6b0:	10020f26 	beq	r2,zero,80bef0 <___vfiprintf_internal_r+0x117c>
  80b6b4:	da802217 	ldw	r10,136(sp)
  80b6b8:	d8001d85 	stb	zero,118(sp)
  80b6bc:	0027883a 	mov	r19,zero
  80b6c0:	50800104 	addi	r2,r10,4
  80b6c4:	54800017 	ldw	r18,0(r10)
  80b6c8:	48021116 	blt	r9,zero,80bf10 <___vfiprintf_internal_r+0x119c>
  80b6cc:	00ffdfc4 	movi	r3,-129
  80b6d0:	d8802215 	stw	r2,136(sp)
  80b6d4:	a0e8703a 	and	r20,r20,r3
  80b6d8:	903f5e1e 	bne	r18,zero,80b454 <__alt_mem_onchip_mem+0xff78b454>
  80b6dc:	0039883a 	mov	fp,zero
  80b6e0:	4802a626 	beq	r9,zero,80c17c <___vfiprintf_internal_r+0x1408>
  80b6e4:	0025883a 	mov	r18,zero
  80b6e8:	0027883a 	mov	r19,zero
  80b6ec:	003f5a06 	br	80b458 <__alt_mem_onchip_mem+0xff78b458>
  80b6f0:	21003fcc 	andi	r4,r4,255
  80b6f4:	20029f1e 	bne	r4,zero,80c174 <___vfiprintf_internal_r+0x1400>
  80b6f8:	a5000414 	ori	r20,r20,16
  80b6fc:	a080080c 	andi	r2,r20,32
  80b700:	10005e1e 	bne	r2,zero,80b87c <___vfiprintf_internal_r+0xb08>
  80b704:	a080040c 	andi	r2,r20,16
  80b708:	1001a21e 	bne	r2,zero,80bd94 <___vfiprintf_internal_r+0x1020>
  80b70c:	a080100c 	andi	r2,r20,64
  80b710:	d8001d85 	stb	zero,118(sp)
  80b714:	da802217 	ldw	r10,136(sp)
  80b718:	1002231e 	bne	r2,zero,80bfa8 <___vfiprintf_internal_r+0x1234>
  80b71c:	50800104 	addi	r2,r10,4
  80b720:	54800017 	ldw	r18,0(r10)
  80b724:	0027883a 	mov	r19,zero
  80b728:	4801a00e 	bge	r9,zero,80bdac <___vfiprintf_internal_r+0x1038>
  80b72c:	d8802215 	stw	r2,136(sp)
  80b730:	0039883a 	mov	fp,zero
  80b734:	94c4b03a 	or	r2,r18,r19
  80b738:	103f901e 	bne	r2,zero,80b57c <__alt_mem_onchip_mem+0xff78b57c>
  80b73c:	00800044 	movi	r2,1
  80b740:	10803fcc 	andi	r2,r2,255
  80b744:	00c00044 	movi	r3,1
  80b748:	10c05926 	beq	r2,r3,80b8b0 <___vfiprintf_internal_r+0xb3c>
  80b74c:	00c00084 	movi	r3,2
  80b750:	10ffe41e 	bne	r2,r3,80b6e4 <__alt_mem_onchip_mem+0xff78b6e4>
  80b754:	0025883a 	mov	r18,zero
  80b758:	0027883a 	mov	r19,zero
  80b75c:	00013d06 	br	80bc54 <___vfiprintf_internal_r+0xee0>
  80b760:	21003fcc 	andi	r4,r4,255
  80b764:	2002811e 	bne	r4,zero,80c16c <___vfiprintf_internal_r+0x13f8>
  80b768:	00802074 	movhi	r2,129
  80b76c:	10905604 	addi	r2,r2,16728
  80b770:	d8802615 	stw	r2,152(sp)
  80b774:	a080080c 	andi	r2,r20,32
  80b778:	103f561e 	bne	r2,zero,80b4d4 <__alt_mem_onchip_mem+0xff78b4d4>
  80b77c:	a080040c 	andi	r2,r20,16
  80b780:	1001d126 	beq	r2,zero,80bec8 <___vfiprintf_internal_r+0x1154>
  80b784:	da802217 	ldw	r10,136(sp)
  80b788:	0027883a 	mov	r19,zero
  80b78c:	54800017 	ldw	r18,0(r10)
  80b790:	52800104 	addi	r10,r10,4
  80b794:	da802215 	stw	r10,136(sp)
  80b798:	003f5306 	br	80b4e8 <__alt_mem_onchip_mem+0xff78b4e8>
  80b79c:	da802217 	ldw	r10,136(sp)
  80b7a0:	d8001d85 	stb	zero,118(sp)
  80b7a4:	55400017 	ldw	r21,0(r10)
  80b7a8:	50c00104 	addi	r3,r10,4
  80b7ac:	a8024226 	beq	r21,zero,80c0b8 <___vfiprintf_internal_r+0x1344>
  80b7b0:	48021816 	blt	r9,zero,80c014 <___vfiprintf_internal_r+0x12a0>
  80b7b4:	480d883a 	mov	r6,r9
  80b7b8:	000b883a 	mov	r5,zero
  80b7bc:	a809883a 	mov	r4,r21
  80b7c0:	d8c02a15 	stw	r3,168(sp)
  80b7c4:	da002b15 	stw	r8,172(sp)
  80b7c8:	da402c15 	stw	r9,176(sp)
  80b7cc:	0808f700 	call	808f70 <memchr>
  80b7d0:	d8c02a17 	ldw	r3,168(sp)
  80b7d4:	da002b17 	ldw	r8,172(sp)
  80b7d8:	da402c17 	ldw	r9,176(sp)
  80b7dc:	10024826 	beq	r2,zero,80c100 <___vfiprintf_internal_r+0x138c>
  80b7e0:	1567c83a 	sub	r19,r2,r21
  80b7e4:	df001d83 	ldbu	fp,118(sp)
  80b7e8:	d8c02215 	stw	r3,136(sp)
  80b7ec:	0013883a 	mov	r9,zero
  80b7f0:	003e6006 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b7f4:	21003fcc 	andi	r4,r4,255
  80b7f8:	203fc026 	beq	r4,zero,80b6fc <__alt_mem_onchip_mem+0xff78b6fc>
  80b7fc:	d9c01d85 	stb	r7,118(sp)
  80b800:	003fbe06 	br	80b6fc <__alt_mem_onchip_mem+0xff78b6fc>
  80b804:	da802217 	ldw	r10,136(sp)
  80b808:	54400017 	ldw	r17,0(r10)
  80b80c:	50800104 	addi	r2,r10,4
  80b810:	883e3b16 	blt	r17,zero,80b100 <__alt_mem_onchip_mem+0xff78b100>
  80b814:	d8802215 	stw	r2,136(sp)
  80b818:	80c00007 	ldb	r3,0(r16)
  80b81c:	003db406 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b820:	01000044 	movi	r4,1
  80b824:	01c00ac4 	movi	r7,43
  80b828:	80c00007 	ldb	r3,0(r16)
  80b82c:	003db006 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b830:	80c00007 	ldb	r3,0(r16)
  80b834:	82800044 	addi	r10,r16,1
  80b838:	1b423c26 	beq	r3,r13,80c12c <___vfiprintf_internal_r+0x13b8>
  80b83c:	18bff404 	addi	r2,r3,-48
  80b840:	0013883a 	mov	r9,zero
  80b844:	30822b36 	bltu	r6,r2,80c0f4 <___vfiprintf_internal_r+0x1380>
  80b848:	50c00007 	ldb	r3,0(r10)
  80b84c:	4a4002a4 	muli	r9,r9,10
  80b850:	54000044 	addi	r16,r10,1
  80b854:	8015883a 	mov	r10,r16
  80b858:	4893883a 	add	r9,r9,r2
  80b85c:	18bff404 	addi	r2,r3,-48
  80b860:	30bff92e 	bgeu	r6,r2,80b848 <__alt_mem_onchip_mem+0xff78b848>
  80b864:	483da30e 	bge	r9,zero,80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b868:	027fffc4 	movi	r9,-1
  80b86c:	003da106 	br	80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80b870:	a5001014 	ori	r20,r20,64
  80b874:	80c00007 	ldb	r3,0(r16)
  80b878:	003d9d06 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80b87c:	da802217 	ldw	r10,136(sp)
  80b880:	d8001d85 	stb	zero,118(sp)
  80b884:	50c00204 	addi	r3,r10,8
  80b888:	54800017 	ldw	r18,0(r10)
  80b88c:	54c00117 	ldw	r19,4(r10)
  80b890:	4801ca16 	blt	r9,zero,80bfbc <___vfiprintf_internal_r+0x1248>
  80b894:	013fdfc4 	movi	r4,-129
  80b898:	94c4b03a 	or	r2,r18,r19
  80b89c:	d8c02215 	stw	r3,136(sp)
  80b8a0:	a128703a 	and	r20,r20,r4
  80b8a4:	0039883a 	mov	fp,zero
  80b8a8:	103f341e 	bne	r2,zero,80b57c <__alt_mem_onchip_mem+0xff78b57c>
  80b8ac:	483e2e26 	beq	r9,zero,80b168 <__alt_mem_onchip_mem+0xff78b168>
  80b8b0:	0025883a 	mov	r18,zero
  80b8b4:	94800c04 	addi	r18,r18,48
  80b8b8:	dc8019c5 	stb	r18,103(sp)
  80b8bc:	dcc02717 	ldw	r19,156(sp)
  80b8c0:	dd4019c4 	addi	r21,sp,103
  80b8c4:	003e2b06 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80b8c8:	21003fcc 	andi	r4,r4,255
  80b8cc:	2002361e 	bne	r4,zero,80c1a8 <___vfiprintf_internal_r+0x1434>
  80b8d0:	1801c126 	beq	r3,zero,80bfd8 <___vfiprintf_internal_r+0x1264>
  80b8d4:	04800044 	movi	r18,1
  80b8d8:	d8c01005 	stb	r3,64(sp)
  80b8dc:	d8001d85 	stb	zero,118(sp)
  80b8e0:	9027883a 	mov	r19,r18
  80b8e4:	dd401004 	addi	r21,sp,64
  80b8e8:	003f1106 	br	80b530 <__alt_mem_onchip_mem+0xff78b530>
  80b8ec:	d9402117 	ldw	r5,132(sp)
  80b8f0:	d9002017 	ldw	r4,128(sp)
  80b8f4:	d9801a04 	addi	r6,sp,104
  80b8f8:	d9c02b15 	stw	r7,172(sp)
  80b8fc:	dbc02a15 	stw	r15,168(sp)
  80b900:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80b904:	d9c02b17 	ldw	r7,172(sp)
  80b908:	dbc02a17 	ldw	r15,168(sp)
  80b90c:	10006d1e 	bne	r2,zero,80bac4 <___vfiprintf_internal_r+0xd50>
  80b910:	d9801b17 	ldw	r6,108(sp)
  80b914:	d8801c17 	ldw	r2,112(sp)
  80b918:	d811883a 	mov	r8,sp
  80b91c:	31400044 	addi	r5,r6,1
  80b920:	003e3306 	br	80b1f0 <__alt_mem_onchip_mem+0xff78b1f0>
  80b924:	d9401b17 	ldw	r5,108(sp)
  80b928:	d8801c17 	ldw	r2,112(sp)
  80b92c:	29000044 	addi	r4,r5,1
  80b930:	d8c01d87 	ldb	r3,118(sp)
  80b934:	183e4d26 	beq	r3,zero,80b26c <__alt_mem_onchip_mem+0xff78b26c>
  80b938:	00c00044 	movi	r3,1
  80b93c:	d9401d84 	addi	r5,sp,118
  80b940:	10c5883a 	add	r2,r2,r3
  80b944:	41400015 	stw	r5,0(r8)
  80b948:	40c00115 	stw	r3,4(r8)
  80b94c:	d8801c15 	stw	r2,112(sp)
  80b950:	d9001b15 	stw	r4,108(sp)
  80b954:	014001c4 	movi	r5,7
  80b958:	2900a90e 	bge	r5,r4,80bc00 <___vfiprintf_internal_r+0xe8c>
  80b95c:	1000da1e 	bne	r2,zero,80bcc8 <___vfiprintf_internal_r+0xf54>
  80b960:	7000ab1e 	bne	r14,zero,80bc10 <___vfiprintf_internal_r+0xe9c>
  80b964:	000b883a 	mov	r5,zero
  80b968:	1809883a 	mov	r4,r3
  80b96c:	d811883a 	mov	r8,sp
  80b970:	00c02004 	movi	r3,128
  80b974:	e0fe4d26 	beq	fp,r3,80b2ac <__alt_mem_onchip_mem+0xff78b2ac>
  80b978:	4cf9c83a 	sub	fp,r9,r19
  80b97c:	073e7b0e 	bge	zero,fp,80b36c <__alt_mem_onchip_mem+0xff78b36c>
  80b980:	01c00404 	movi	r7,16
  80b984:	3f01900e 	bge	r7,fp,80bfc8 <___vfiprintf_internal_r+0x1254>
  80b988:	00c02074 	movhi	r3,129
  80b98c:	18d0bb04 	addi	r3,r3,17132
  80b990:	d8c02415 	stw	r3,144(sp)
  80b994:	034001c4 	movi	r13,7
  80b998:	00000506 	br	80b9b0 <___vfiprintf_internal_r+0xc3c>
  80b99c:	29000084 	addi	r4,r5,2
  80b9a0:	42000204 	addi	r8,r8,8
  80b9a4:	180b883a 	mov	r5,r3
  80b9a8:	e73ffc04 	addi	fp,fp,-16
  80b9ac:	3f000d0e 	bge	r7,fp,80b9e4 <___vfiprintf_internal_r+0xc70>
  80b9b0:	10800404 	addi	r2,r2,16
  80b9b4:	28c00044 	addi	r3,r5,1
  80b9b8:	45c00015 	stw	r23,0(r8)
  80b9bc:	41c00115 	stw	r7,4(r8)
  80b9c0:	d8801c15 	stw	r2,112(sp)
  80b9c4:	d8c01b15 	stw	r3,108(sp)
  80b9c8:	68fff40e 	bge	r13,r3,80b99c <__alt_mem_onchip_mem+0xff78b99c>
  80b9cc:	1000101e 	bne	r2,zero,80ba10 <___vfiprintf_internal_r+0xc9c>
  80b9d0:	e73ffc04 	addi	fp,fp,-16
  80b9d4:	01000044 	movi	r4,1
  80b9d8:	000b883a 	mov	r5,zero
  80b9dc:	d811883a 	mov	r8,sp
  80b9e0:	3f3ff316 	blt	r7,fp,80b9b0 <__alt_mem_onchip_mem+0xff78b9b0>
  80b9e4:	da802417 	ldw	r10,144(sp)
  80b9e8:	1705883a 	add	r2,r2,fp
  80b9ec:	47000115 	stw	fp,4(r8)
  80b9f0:	42800015 	stw	r10,0(r8)
  80b9f4:	d8801c15 	stw	r2,112(sp)
  80b9f8:	d9001b15 	stw	r4,108(sp)
  80b9fc:	00c001c4 	movi	r3,7
  80ba00:	19003616 	blt	r3,r4,80badc <___vfiprintf_internal_r+0xd68>
  80ba04:	42000204 	addi	r8,r8,8
  80ba08:	21000044 	addi	r4,r4,1
  80ba0c:	003e5706 	br	80b36c <__alt_mem_onchip_mem+0xff78b36c>
  80ba10:	d9402117 	ldw	r5,132(sp)
  80ba14:	d9002017 	ldw	r4,128(sp)
  80ba18:	d9801a04 	addi	r6,sp,104
  80ba1c:	d9c02b15 	stw	r7,172(sp)
  80ba20:	db402a15 	stw	r13,168(sp)
  80ba24:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80ba28:	d9c02b17 	ldw	r7,172(sp)
  80ba2c:	db402a17 	ldw	r13,168(sp)
  80ba30:	1000241e 	bne	r2,zero,80bac4 <___vfiprintf_internal_r+0xd50>
  80ba34:	d9401b17 	ldw	r5,108(sp)
  80ba38:	d8801c17 	ldw	r2,112(sp)
  80ba3c:	d811883a 	mov	r8,sp
  80ba40:	29000044 	addi	r4,r5,1
  80ba44:	003fd806 	br	80b9a8 <__alt_mem_onchip_mem+0xff78b9a8>
  80ba48:	d9401b17 	ldw	r5,108(sp)
  80ba4c:	00c02074 	movhi	r3,129
  80ba50:	18d0bf04 	addi	r3,r3,17148
  80ba54:	d8c02415 	stw	r3,144(sp)
  80ba58:	29400044 	addi	r5,r5,1
  80ba5c:	d8c02417 	ldw	r3,144(sp)
  80ba60:	14c5883a 	add	r2,r2,r19
  80ba64:	44c00115 	stw	r19,4(r8)
  80ba68:	40c00015 	stw	r3,0(r8)
  80ba6c:	d8801c15 	stw	r2,112(sp)
  80ba70:	d9401b15 	stw	r5,108(sp)
  80ba74:	00c001c4 	movi	r3,7
  80ba78:	1940070e 	bge	r3,r5,80ba98 <___vfiprintf_internal_r+0xd24>
  80ba7c:	103e4826 	beq	r2,zero,80b3a0 <__alt_mem_onchip_mem+0xff78b3a0>
  80ba80:	d9402117 	ldw	r5,132(sp)
  80ba84:	d9002017 	ldw	r4,128(sp)
  80ba88:	d9801a04 	addi	r6,sp,104
  80ba8c:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80ba90:	10000c1e 	bne	r2,zero,80bac4 <___vfiprintf_internal_r+0xd50>
  80ba94:	d8801c17 	ldw	r2,112(sp)
  80ba98:	8c80010e 	bge	r17,r18,80baa0 <___vfiprintf_internal_r+0xd2c>
  80ba9c:	9023883a 	mov	r17,r18
  80baa0:	da802317 	ldw	r10,140(sp)
  80baa4:	5455883a 	add	r10,r10,r17
  80baa8:	da802315 	stw	r10,140(sp)
  80baac:	103e4126 	beq	r2,zero,80b3b4 <__alt_mem_onchip_mem+0xff78b3b4>
  80bab0:	d9402117 	ldw	r5,132(sp)
  80bab4:	d9002017 	ldw	r4,128(sp)
  80bab8:	d9801a04 	addi	r6,sp,104
  80babc:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bac0:	103e3c26 	beq	r2,zero,80b3b4 <__alt_mem_onchip_mem+0xff78b3b4>
  80bac4:	dd002117 	ldw	r20,132(sp)
  80bac8:	a080030b 	ldhu	r2,12(r20)
  80bacc:	1080100c 	andi	r2,r2,64
  80bad0:	1001231e 	bne	r2,zero,80bf60 <___vfiprintf_internal_r+0x11ec>
  80bad4:	d8802317 	ldw	r2,140(sp)
  80bad8:	003d7b06 	br	80b0c8 <__alt_mem_onchip_mem+0xff78b0c8>
  80badc:	1000991e 	bne	r2,zero,80bd44 <___vfiprintf_internal_r+0xfd0>
  80bae0:	00c00044 	movi	r3,1
  80bae4:	9805883a 	mov	r2,r19
  80bae8:	dd400015 	stw	r21,0(sp)
  80baec:	dcc00115 	stw	r19,4(sp)
  80baf0:	dcc01c15 	stw	r19,112(sp)
  80baf4:	d8c01b15 	stw	r3,108(sp)
  80baf8:	d811883a 	mov	r8,sp
  80bafc:	42000204 	addi	r8,r8,8
  80bb00:	a2c0010c 	andi	r11,r20,4
  80bb04:	583fe426 	beq	r11,zero,80ba98 <__alt_mem_onchip_mem+0xff78ba98>
  80bb08:	8ca7c83a 	sub	r19,r17,r18
  80bb0c:	04ffe20e 	bge	zero,r19,80ba98 <__alt_mem_onchip_mem+0xff78ba98>
  80bb10:	01c00404 	movi	r7,16
  80bb14:	3cffcc0e 	bge	r7,r19,80ba48 <__alt_mem_onchip_mem+0xff78ba48>
  80bb18:	02802074 	movhi	r10,129
  80bb1c:	5290bf04 	addi	r10,r10,17148
  80bb20:	d9001b17 	ldw	r4,108(sp)
  80bb24:	da802415 	stw	r10,144(sp)
  80bb28:	382b883a 	mov	r21,r7
  80bb2c:	050001c4 	movi	r20,7
  80bb30:	df002017 	ldw	fp,128(sp)
  80bb34:	00000506 	br	80bb4c <___vfiprintf_internal_r+0xdd8>
  80bb38:	21400084 	addi	r5,r4,2
  80bb3c:	42000204 	addi	r8,r8,8
  80bb40:	1809883a 	mov	r4,r3
  80bb44:	9cfffc04 	addi	r19,r19,-16
  80bb48:	acffc40e 	bge	r21,r19,80ba5c <__alt_mem_onchip_mem+0xff78ba5c>
  80bb4c:	10800404 	addi	r2,r2,16
  80bb50:	20c00044 	addi	r3,r4,1
  80bb54:	45800015 	stw	r22,0(r8)
  80bb58:	45400115 	stw	r21,4(r8)
  80bb5c:	d8801c15 	stw	r2,112(sp)
  80bb60:	d8c01b15 	stw	r3,108(sp)
  80bb64:	a0fff40e 	bge	r20,r3,80bb38 <__alt_mem_onchip_mem+0xff78bb38>
  80bb68:	1000041e 	bne	r2,zero,80bb7c <___vfiprintf_internal_r+0xe08>
  80bb6c:	01400044 	movi	r5,1
  80bb70:	0009883a 	mov	r4,zero
  80bb74:	d811883a 	mov	r8,sp
  80bb78:	003ff206 	br	80bb44 <__alt_mem_onchip_mem+0xff78bb44>
  80bb7c:	d9402117 	ldw	r5,132(sp)
  80bb80:	d9801a04 	addi	r6,sp,104
  80bb84:	e009883a 	mov	r4,fp
  80bb88:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bb8c:	103fcd1e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bb90:	d9001b17 	ldw	r4,108(sp)
  80bb94:	d8801c17 	ldw	r2,112(sp)
  80bb98:	d811883a 	mov	r8,sp
  80bb9c:	21400044 	addi	r5,r4,1
  80bba0:	003fe806 	br	80bb44 <__alt_mem_onchip_mem+0xff78bb44>
  80bba4:	d9402117 	ldw	r5,132(sp)
  80bba8:	d9002017 	ldw	r4,128(sp)
  80bbac:	d9801a04 	addi	r6,sp,104
  80bbb0:	d9c02b15 	stw	r7,172(sp)
  80bbb4:	db402a15 	stw	r13,168(sp)
  80bbb8:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bbbc:	d9c02b17 	ldw	r7,172(sp)
  80bbc0:	db402a17 	ldw	r13,168(sp)
  80bbc4:	103fbf1e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bbc8:	d9401b17 	ldw	r5,108(sp)
  80bbcc:	d8801c17 	ldw	r2,112(sp)
  80bbd0:	d811883a 	mov	r8,sp
  80bbd4:	29800044 	addi	r6,r5,1
  80bbd8:	003dc406 	br	80b2ec <__alt_mem_onchip_mem+0xff78b2ec>
  80bbdc:	1000d21e 	bne	r2,zero,80bf28 <___vfiprintf_internal_r+0x11b4>
  80bbe0:	d8c01d87 	ldb	r3,118(sp)
  80bbe4:	18009526 	beq	r3,zero,80be3c <___vfiprintf_internal_r+0x10c8>
  80bbe8:	00800044 	movi	r2,1
  80bbec:	d8c01d84 	addi	r3,sp,118
  80bbf0:	1009883a 	mov	r4,r2
  80bbf4:	d8c00015 	stw	r3,0(sp)
  80bbf8:	d8800115 	stw	r2,4(sp)
  80bbfc:	d811883a 	mov	r8,sp
  80bc00:	200b883a 	mov	r5,r4
  80bc04:	42000204 	addi	r8,r8,8
  80bc08:	21000044 	addi	r4,r4,1
  80bc0c:	003d9706 	br	80b26c <__alt_mem_onchip_mem+0xff78b26c>
  80bc10:	d9001d04 	addi	r4,sp,116
  80bc14:	00800084 	movi	r2,2
  80bc18:	d9000015 	stw	r4,0(sp)
  80bc1c:	d8800115 	stw	r2,4(sp)
  80bc20:	1809883a 	mov	r4,r3
  80bc24:	d811883a 	mov	r8,sp
  80bc28:	200b883a 	mov	r5,r4
  80bc2c:	42000204 	addi	r8,r8,8
  80bc30:	21000044 	addi	r4,r4,1
  80bc34:	003f4e06 	br	80b970 <__alt_mem_onchip_mem+0xff78b970>
  80bc38:	d8001d85 	stb	zero,118(sp)
  80bc3c:	48005016 	blt	r9,zero,80bd80 <___vfiprintf_internal_r+0x100c>
  80bc40:	00ffdfc4 	movi	r3,-129
  80bc44:	94c4b03a 	or	r2,r18,r19
  80bc48:	a0e8703a 	and	r20,r20,r3
  80bc4c:	103d4426 	beq	r2,zero,80b160 <__alt_mem_onchip_mem+0xff78b160>
  80bc50:	0039883a 	mov	fp,zero
  80bc54:	d9002617 	ldw	r4,152(sp)
  80bc58:	dd401a04 	addi	r21,sp,104
  80bc5c:	908003cc 	andi	r2,r18,15
  80bc60:	9806973a 	slli	r3,r19,28
  80bc64:	2085883a 	add	r2,r4,r2
  80bc68:	9024d13a 	srli	r18,r18,4
  80bc6c:	10800003 	ldbu	r2,0(r2)
  80bc70:	9826d13a 	srli	r19,r19,4
  80bc74:	ad7fffc4 	addi	r21,r21,-1
  80bc78:	1ca4b03a 	or	r18,r3,r18
  80bc7c:	a8800005 	stb	r2,0(r21)
  80bc80:	94c4b03a 	or	r2,r18,r19
  80bc84:	103ff51e 	bne	r2,zero,80bc5c <__alt_mem_onchip_mem+0xff78bc5c>
  80bc88:	003e5906 	br	80b5f0 <__alt_mem_onchip_mem+0xff78b5f0>
  80bc8c:	d9402117 	ldw	r5,132(sp)
  80bc90:	d9002017 	ldw	r4,128(sp)
  80bc94:	d9801a04 	addi	r6,sp,104
  80bc98:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bc9c:	103f891e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bca0:	d8801c17 	ldw	r2,112(sp)
  80bca4:	d811883a 	mov	r8,sp
  80bca8:	003f9506 	br	80bb00 <__alt_mem_onchip_mem+0xff78bb00>
  80bcac:	d9402117 	ldw	r5,132(sp)
  80bcb0:	d9002017 	ldw	r4,128(sp)
  80bcb4:	d9801a04 	addi	r6,sp,104
  80bcb8:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bcbc:	103f811e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bcc0:	d811883a 	mov	r8,sp
  80bcc4:	003ced06 	br	80b07c <__alt_mem_onchip_mem+0xff78b07c>
  80bcc8:	d9402117 	ldw	r5,132(sp)
  80bccc:	d9002017 	ldw	r4,128(sp)
  80bcd0:	d9801a04 	addi	r6,sp,104
  80bcd4:	da402c15 	stw	r9,176(sp)
  80bcd8:	db802a15 	stw	r14,168(sp)
  80bcdc:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bce0:	da402c17 	ldw	r9,176(sp)
  80bce4:	db802a17 	ldw	r14,168(sp)
  80bce8:	103f761e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bcec:	d9401b17 	ldw	r5,108(sp)
  80bcf0:	d8801c17 	ldw	r2,112(sp)
  80bcf4:	d811883a 	mov	r8,sp
  80bcf8:	29000044 	addi	r4,r5,1
  80bcfc:	003d5b06 	br	80b26c <__alt_mem_onchip_mem+0xff78b26c>
  80bd00:	d9402117 	ldw	r5,132(sp)
  80bd04:	d9002017 	ldw	r4,128(sp)
  80bd08:	d9801a04 	addi	r6,sp,104
  80bd0c:	da402c15 	stw	r9,176(sp)
  80bd10:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bd14:	da402c17 	ldw	r9,176(sp)
  80bd18:	103f6a1e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bd1c:	d9401b17 	ldw	r5,108(sp)
  80bd20:	d8801c17 	ldw	r2,112(sp)
  80bd24:	d811883a 	mov	r8,sp
  80bd28:	29000044 	addi	r4,r5,1
  80bd2c:	003f1006 	br	80b970 <__alt_mem_onchip_mem+0xff78b970>
  80bd30:	1000c31e 	bne	r2,zero,80c040 <___vfiprintf_internal_r+0x12cc>
  80bd34:	01000044 	movi	r4,1
  80bd38:	000b883a 	mov	r5,zero
  80bd3c:	d811883a 	mov	r8,sp
  80bd40:	003f0d06 	br	80b978 <__alt_mem_onchip_mem+0xff78b978>
  80bd44:	d9402117 	ldw	r5,132(sp)
  80bd48:	d9002017 	ldw	r4,128(sp)
  80bd4c:	d9801a04 	addi	r6,sp,104
  80bd50:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bd54:	103f5b1e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bd58:	d9001b17 	ldw	r4,108(sp)
  80bd5c:	d8801c17 	ldw	r2,112(sp)
  80bd60:	d811883a 	mov	r8,sp
  80bd64:	21000044 	addi	r4,r4,1
  80bd68:	003d8006 	br	80b36c <__alt_mem_onchip_mem+0xff78b36c>
  80bd6c:	01002074 	movhi	r4,129
  80bd70:	21105b04 	addi	r4,r4,16748
  80bd74:	d9002615 	stw	r4,152(sp)
  80bd78:	d8c02215 	stw	r3,136(sp)
  80bd7c:	1029883a 	mov	r20,r2
  80bd80:	94c4b03a 	or	r2,r18,r19
  80bd84:	103fb21e 	bne	r2,zero,80bc50 <__alt_mem_onchip_mem+0xff78bc50>
  80bd88:	0039883a 	mov	fp,zero
  80bd8c:	00800084 	movi	r2,2
  80bd90:	003e6b06 	br	80b740 <__alt_mem_onchip_mem+0xff78b740>
  80bd94:	da802217 	ldw	r10,136(sp)
  80bd98:	d8001d85 	stb	zero,118(sp)
  80bd9c:	0027883a 	mov	r19,zero
  80bda0:	50800104 	addi	r2,r10,4
  80bda4:	54800017 	ldw	r18,0(r10)
  80bda8:	483e6016 	blt	r9,zero,80b72c <__alt_mem_onchip_mem+0xff78b72c>
  80bdac:	00ffdfc4 	movi	r3,-129
  80bdb0:	d8802215 	stw	r2,136(sp)
  80bdb4:	a0e8703a 	and	r20,r20,r3
  80bdb8:	0039883a 	mov	fp,zero
  80bdbc:	903ebb26 	beq	r18,zero,80b8ac <__alt_mem_onchip_mem+0xff78b8ac>
  80bdc0:	00800244 	movi	r2,9
  80bdc4:	14bdee36 	bltu	r2,r18,80b580 <__alt_mem_onchip_mem+0xff78b580>
  80bdc8:	003eba06 	br	80b8b4 <__alt_mem_onchip_mem+0xff78b8b4>
  80bdcc:	00800c04 	movi	r2,48
  80bdd0:	d8c01d45 	stb	r3,117(sp)
  80bdd4:	d8801d05 	stb	r2,116(sp)
  80bdd8:	d8001d85 	stb	zero,118(sp)
  80bddc:	a0c00094 	ori	r3,r20,2
  80bde0:	4800a916 	blt	r9,zero,80c088 <___vfiprintf_internal_r+0x1314>
  80bde4:	00bfdfc4 	movi	r2,-129
  80bde8:	a096703a 	and	r11,r20,r2
  80bdec:	5d000094 	ori	r20,r11,2
  80bdf0:	0039883a 	mov	fp,zero
  80bdf4:	003f9706 	br	80bc54 <__alt_mem_onchip_mem+0xff78bc54>
  80bdf8:	8025883a 	mov	r18,r16
  80bdfc:	003c2e06 	br	80aeb8 <__alt_mem_onchip_mem+0xff78aeb8>
  80be00:	00802074 	movhi	r2,129
  80be04:	10905b04 	addi	r2,r2,16748
  80be08:	0039883a 	mov	fp,zero
  80be0c:	d8802615 	stw	r2,152(sp)
  80be10:	003f9006 	br	80bc54 <__alt_mem_onchip_mem+0xff78bc54>
  80be14:	04a5c83a 	sub	r18,zero,r18
  80be18:	07000b44 	movi	fp,45
  80be1c:	9004c03a 	cmpne	r2,r18,zero
  80be20:	04e7c83a 	sub	r19,zero,r19
  80be24:	df001d85 	stb	fp,118(sp)
  80be28:	98a7c83a 	sub	r19,r19,r2
  80be2c:	48009f16 	blt	r9,zero,80c0ac <___vfiprintf_internal_r+0x1338>
  80be30:	00bfdfc4 	movi	r2,-129
  80be34:	a0a8703a 	and	r20,r20,r2
  80be38:	003dd006 	br	80b57c <__alt_mem_onchip_mem+0xff78b57c>
  80be3c:	70004c26 	beq	r14,zero,80bf70 <___vfiprintf_internal_r+0x11fc>
  80be40:	00800084 	movi	r2,2
  80be44:	d8c01d04 	addi	r3,sp,116
  80be48:	d8c00015 	stw	r3,0(sp)
  80be4c:	d8800115 	stw	r2,4(sp)
  80be50:	01000044 	movi	r4,1
  80be54:	d811883a 	mov	r8,sp
  80be58:	003f7306 	br	80bc28 <__alt_mem_onchip_mem+0xff78bc28>
  80be5c:	a080100c 	andi	r2,r20,64
  80be60:	da802217 	ldw	r10,136(sp)
  80be64:	103e0626 	beq	r2,zero,80b680 <__alt_mem_onchip_mem+0xff78b680>
  80be68:	5480000f 	ldh	r18,0(r10)
  80be6c:	52800104 	addi	r10,r10,4
  80be70:	da802215 	stw	r10,136(sp)
  80be74:	9027d7fa 	srai	r19,r18,31
  80be78:	9805883a 	mov	r2,r19
  80be7c:	003db806 	br	80b560 <__alt_mem_onchip_mem+0xff78b560>
  80be80:	a080040c 	andi	r2,r20,16
  80be84:	1000091e 	bne	r2,zero,80beac <___vfiprintf_internal_r+0x1138>
  80be88:	a2c0100c 	andi	r11,r20,64
  80be8c:	58000726 	beq	r11,zero,80beac <___vfiprintf_internal_r+0x1138>
  80be90:	da802217 	ldw	r10,136(sp)
  80be94:	50800017 	ldw	r2,0(r10)
  80be98:	52800104 	addi	r10,r10,4
  80be9c:	da802215 	stw	r10,136(sp)
  80bea0:	da802317 	ldw	r10,140(sp)
  80bea4:	1280000d 	sth	r10,0(r2)
  80bea8:	003be706 	br	80ae48 <__alt_mem_onchip_mem+0xff78ae48>
  80beac:	da802217 	ldw	r10,136(sp)
  80beb0:	50800017 	ldw	r2,0(r10)
  80beb4:	52800104 	addi	r10,r10,4
  80beb8:	da802215 	stw	r10,136(sp)
  80bebc:	da802317 	ldw	r10,140(sp)
  80bec0:	12800015 	stw	r10,0(r2)
  80bec4:	003be006 	br	80ae48 <__alt_mem_onchip_mem+0xff78ae48>
  80bec8:	a080100c 	andi	r2,r20,64
  80becc:	da802217 	ldw	r10,136(sp)
  80bed0:	10003026 	beq	r2,zero,80bf94 <___vfiprintf_internal_r+0x1220>
  80bed4:	5480000b 	ldhu	r18,0(r10)
  80bed8:	52800104 	addi	r10,r10,4
  80bedc:	0027883a 	mov	r19,zero
  80bee0:	da802215 	stw	r10,136(sp)
  80bee4:	003d8006 	br	80b4e8 <__alt_mem_onchip_mem+0xff78b4e8>
  80bee8:	80c00007 	ldb	r3,0(r16)
  80beec:	003c0006 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80bef0:	a080100c 	andi	r2,r20,64
  80bef4:	d8001d85 	stb	zero,118(sp)
  80bef8:	da802217 	ldw	r10,136(sp)
  80befc:	1000201e 	bne	r2,zero,80bf80 <___vfiprintf_internal_r+0x120c>
  80bf00:	50800104 	addi	r2,r10,4
  80bf04:	54800017 	ldw	r18,0(r10)
  80bf08:	0027883a 	mov	r19,zero
  80bf0c:	483def0e 	bge	r9,zero,80b6cc <__alt_mem_onchip_mem+0xff78b6cc>
  80bf10:	94c6b03a 	or	r3,r18,r19
  80bf14:	d8802215 	stw	r2,136(sp)
  80bf18:	183d4e1e 	bne	r3,zero,80b454 <__alt_mem_onchip_mem+0xff78b454>
  80bf1c:	0039883a 	mov	fp,zero
  80bf20:	0005883a 	mov	r2,zero
  80bf24:	003e0606 	br	80b740 <__alt_mem_onchip_mem+0xff78b740>
  80bf28:	d9402117 	ldw	r5,132(sp)
  80bf2c:	d9002017 	ldw	r4,128(sp)
  80bf30:	d9801a04 	addi	r6,sp,104
  80bf34:	da402c15 	stw	r9,176(sp)
  80bf38:	db802a15 	stw	r14,168(sp)
  80bf3c:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bf40:	da402c17 	ldw	r9,176(sp)
  80bf44:	db802a17 	ldw	r14,168(sp)
  80bf48:	103ede1e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80bf4c:	d9401b17 	ldw	r5,108(sp)
  80bf50:	d8801c17 	ldw	r2,112(sp)
  80bf54:	d811883a 	mov	r8,sp
  80bf58:	29000044 	addi	r4,r5,1
  80bf5c:	003e7406 	br	80b930 <__alt_mem_onchip_mem+0xff78b930>
  80bf60:	00bfffc4 	movi	r2,-1
  80bf64:	003c5806 	br	80b0c8 <__alt_mem_onchip_mem+0xff78b0c8>
  80bf68:	d811883a 	mov	r8,sp
  80bf6c:	003ee806 	br	80bb10 <__alt_mem_onchip_mem+0xff78bb10>
  80bf70:	000b883a 	mov	r5,zero
  80bf74:	01000044 	movi	r4,1
  80bf78:	d811883a 	mov	r8,sp
  80bf7c:	003e7c06 	br	80b970 <__alt_mem_onchip_mem+0xff78b970>
  80bf80:	50800104 	addi	r2,r10,4
  80bf84:	5480000b 	ldhu	r18,0(r10)
  80bf88:	0027883a 	mov	r19,zero
  80bf8c:	483dcf0e 	bge	r9,zero,80b6cc <__alt_mem_onchip_mem+0xff78b6cc>
  80bf90:	003fdf06 	br	80bf10 <__alt_mem_onchip_mem+0xff78bf10>
  80bf94:	54800017 	ldw	r18,0(r10)
  80bf98:	52800104 	addi	r10,r10,4
  80bf9c:	0027883a 	mov	r19,zero
  80bfa0:	da802215 	stw	r10,136(sp)
  80bfa4:	003d5006 	br	80b4e8 <__alt_mem_onchip_mem+0xff78b4e8>
  80bfa8:	50800104 	addi	r2,r10,4
  80bfac:	5480000b 	ldhu	r18,0(r10)
  80bfb0:	0027883a 	mov	r19,zero
  80bfb4:	483f7d0e 	bge	r9,zero,80bdac <__alt_mem_onchip_mem+0xff78bdac>
  80bfb8:	003ddc06 	br	80b72c <__alt_mem_onchip_mem+0xff78b72c>
  80bfbc:	d8c02215 	stw	r3,136(sp)
  80bfc0:	0039883a 	mov	fp,zero
  80bfc4:	003ddb06 	br	80b734 <__alt_mem_onchip_mem+0xff78b734>
  80bfc8:	02802074 	movhi	r10,129
  80bfcc:	5290bb04 	addi	r10,r10,17132
  80bfd0:	da802415 	stw	r10,144(sp)
  80bfd4:	003e8306 	br	80b9e4 <__alt_mem_onchip_mem+0xff78b9e4>
  80bfd8:	d8801c17 	ldw	r2,112(sp)
  80bfdc:	dd002117 	ldw	r20,132(sp)
  80bfe0:	103eb926 	beq	r2,zero,80bac8 <__alt_mem_onchip_mem+0xff78bac8>
  80bfe4:	d9002017 	ldw	r4,128(sp)
  80bfe8:	d9801a04 	addi	r6,sp,104
  80bfec:	a00b883a 	mov	r5,r20
  80bff0:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80bff4:	003eb406 	br	80bac8 <__alt_mem_onchip_mem+0xff78bac8>
  80bff8:	80c00043 	ldbu	r3,1(r16)
  80bffc:	a5000814 	ori	r20,r20,32
  80c000:	84000044 	addi	r16,r16,1
  80c004:	18c03fcc 	andi	r3,r3,255
  80c008:	18c0201c 	xori	r3,r3,128
  80c00c:	18ffe004 	addi	r3,r3,-128
  80c010:	003bb706 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80c014:	a809883a 	mov	r4,r21
  80c018:	d8c02a15 	stw	r3,168(sp)
  80c01c:	da002b15 	stw	r8,172(sp)
  80c020:	08036c00 	call	8036c0 <strlen>
  80c024:	d8c02a17 	ldw	r3,168(sp)
  80c028:	1027883a 	mov	r19,r2
  80c02c:	df001d83 	ldbu	fp,118(sp)
  80c030:	d8c02215 	stw	r3,136(sp)
  80c034:	0013883a 	mov	r9,zero
  80c038:	da002b17 	ldw	r8,172(sp)
  80c03c:	003c4d06 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80c040:	d9402117 	ldw	r5,132(sp)
  80c044:	d9002017 	ldw	r4,128(sp)
  80c048:	d9801a04 	addi	r6,sp,104
  80c04c:	da402c15 	stw	r9,176(sp)
  80c050:	080ac600 	call	80ac60 <__sprint_r.part.0>
  80c054:	da402c17 	ldw	r9,176(sp)
  80c058:	103e9a1e 	bne	r2,zero,80bac4 <__alt_mem_onchip_mem+0xff78bac4>
  80c05c:	d9401b17 	ldw	r5,108(sp)
  80c060:	d8801c17 	ldw	r2,112(sp)
  80c064:	d811883a 	mov	r8,sp
  80c068:	29000044 	addi	r4,r5,1
  80c06c:	003e4206 	br	80b978 <__alt_mem_onchip_mem+0xff78b978>
  80c070:	d9401b17 	ldw	r5,108(sp)
  80c074:	01002074 	movhi	r4,129
  80c078:	2110bf04 	addi	r4,r4,17148
  80c07c:	d9002415 	stw	r4,144(sp)
  80c080:	29400044 	addi	r5,r5,1
  80c084:	003c6d06 	br	80b23c <__alt_mem_onchip_mem+0xff78b23c>
  80c088:	0039883a 	mov	fp,zero
  80c08c:	00800084 	movi	r2,2
  80c090:	10803fcc 	andi	r2,r2,255
  80c094:	01000044 	movi	r4,1
  80c098:	11001e26 	beq	r2,r4,80c114 <___vfiprintf_internal_r+0x13a0>
  80c09c:	01000084 	movi	r4,2
  80c0a0:	11001e1e 	bne	r2,r4,80c11c <___vfiprintf_internal_r+0x13a8>
  80c0a4:	1829883a 	mov	r20,r3
  80c0a8:	003eea06 	br	80bc54 <__alt_mem_onchip_mem+0xff78bc54>
  80c0ac:	a007883a 	mov	r3,r20
  80c0b0:	00800044 	movi	r2,1
  80c0b4:	003ff606 	br	80c090 <__alt_mem_onchip_mem+0xff78c090>
  80c0b8:	00800184 	movi	r2,6
  80c0bc:	1240012e 	bgeu	r2,r9,80c0c4 <___vfiprintf_internal_r+0x1350>
  80c0c0:	1013883a 	mov	r9,r2
  80c0c4:	4827883a 	mov	r19,r9
  80c0c8:	4825883a 	mov	r18,r9
  80c0cc:	48001516 	blt	r9,zero,80c124 <___vfiprintf_internal_r+0x13b0>
  80c0d0:	05402074 	movhi	r21,129
  80c0d4:	d8c02215 	stw	r3,136(sp)
  80c0d8:	ad506004 	addi	r21,r21,16768
  80c0dc:	003d1406 	br	80b530 <__alt_mem_onchip_mem+0xff78b530>
  80c0e0:	02802074 	movhi	r10,129
  80c0e4:	5290bb04 	addi	r10,r10,17132
  80c0e8:	da802415 	stw	r10,144(sp)
  80c0ec:	200d883a 	mov	r6,r4
  80c0f0:	003c9106 	br	80b338 <__alt_mem_onchip_mem+0xff78b338>
  80c0f4:	5021883a 	mov	r16,r10
  80c0f8:	0013883a 	mov	r9,zero
  80c0fc:	003b7d06 	br	80aef4 <__alt_mem_onchip_mem+0xff78aef4>
  80c100:	4827883a 	mov	r19,r9
  80c104:	df001d83 	ldbu	fp,118(sp)
  80c108:	d8c02215 	stw	r3,136(sp)
  80c10c:	0013883a 	mov	r9,zero
  80c110:	003c1806 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80c114:	1829883a 	mov	r20,r3
  80c118:	003d1806 	br	80b57c <__alt_mem_onchip_mem+0xff78b57c>
  80c11c:	1829883a 	mov	r20,r3
  80c120:	003ccd06 	br	80b458 <__alt_mem_onchip_mem+0xff78b458>
  80c124:	0025883a 	mov	r18,zero
  80c128:	003fe906 	br	80c0d0 <__alt_mem_onchip_mem+0xff78c0d0>
  80c12c:	d8802217 	ldw	r2,136(sp)
  80c130:	80c00043 	ldbu	r3,1(r16)
  80c134:	5021883a 	mov	r16,r10
  80c138:	12400017 	ldw	r9,0(r2)
  80c13c:	10800104 	addi	r2,r2,4
  80c140:	d8802215 	stw	r2,136(sp)
  80c144:	483faf0e 	bge	r9,zero,80c004 <__alt_mem_onchip_mem+0xff78c004>
  80c148:	18c03fcc 	andi	r3,r3,255
  80c14c:	18c0201c 	xori	r3,r3,128
  80c150:	027fffc4 	movi	r9,-1
  80c154:	18ffe004 	addi	r3,r3,-128
  80c158:	003b6506 	br	80aef0 <__alt_mem_onchip_mem+0xff78aef0>
  80c15c:	d9c01d85 	stb	r7,118(sp)
  80c160:	003ca006 	br	80b3e4 <__alt_mem_onchip_mem+0xff78b3e4>
  80c164:	d9c01d85 	stb	r7,118(sp)
  80c168:	003cad06 	br	80b420 <__alt_mem_onchip_mem+0xff78b420>
  80c16c:	d9c01d85 	stb	r7,118(sp)
  80c170:	003d7d06 	br	80b768 <__alt_mem_onchip_mem+0xff78b768>
  80c174:	d9c01d85 	stb	r7,118(sp)
  80c178:	003d5f06 	br	80b6f8 <__alt_mem_onchip_mem+0xff78b6f8>
  80c17c:	a080004c 	andi	r2,r20,1
  80c180:	0039883a 	mov	fp,zero
  80c184:	10000526 	beq	r2,zero,80c19c <___vfiprintf_internal_r+0x1428>
  80c188:	00800c04 	movi	r2,48
  80c18c:	d88019c5 	stb	r2,103(sp)
  80c190:	dcc02717 	ldw	r19,156(sp)
  80c194:	dd4019c4 	addi	r21,sp,103
  80c198:	003bf606 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80c19c:	0027883a 	mov	r19,zero
  80c1a0:	dd401a04 	addi	r21,sp,104
  80c1a4:	003bf306 	br	80b174 <__alt_mem_onchip_mem+0xff78b174>
  80c1a8:	d9c01d85 	stb	r7,118(sp)
  80c1ac:	003dc806 	br	80b8d0 <__alt_mem_onchip_mem+0xff78b8d0>
  80c1b0:	d9c01d85 	stb	r7,118(sp)
  80c1b4:	003d3a06 	br	80b6a0 <__alt_mem_onchip_mem+0xff78b6a0>
  80c1b8:	d9c01d85 	stb	r7,118(sp)
  80c1bc:	003d2a06 	br	80b668 <__alt_mem_onchip_mem+0xff78b668>
  80c1c0:	d9c01d85 	stb	r7,118(sp)
  80c1c4:	003cde06 	br	80b540 <__alt_mem_onchip_mem+0xff78b540>
  80c1c8:	d9c01d85 	stb	r7,118(sp)
  80c1cc:	003cbc06 	br	80b4c0 <__alt_mem_onchip_mem+0xff78b4c0>

0080c1d0 <__vfiprintf_internal>:
  80c1d0:	00802074 	movhi	r2,129
  80c1d4:	1098df04 	addi	r2,r2,25468
  80c1d8:	300f883a 	mov	r7,r6
  80c1dc:	280d883a 	mov	r6,r5
  80c1e0:	200b883a 	mov	r5,r4
  80c1e4:	11000017 	ldw	r4,0(r2)
  80c1e8:	080ad741 	jmpi	80ad74 <___vfiprintf_internal_r>

0080c1ec <__sbprintf>:
  80c1ec:	2880030b 	ldhu	r2,12(r5)
  80c1f0:	2ac01917 	ldw	r11,100(r5)
  80c1f4:	2a80038b 	ldhu	r10,14(r5)
  80c1f8:	2a400717 	ldw	r9,28(r5)
  80c1fc:	2a000917 	ldw	r8,36(r5)
  80c200:	defee204 	addi	sp,sp,-1144
  80c204:	00c10004 	movi	r3,1024
  80c208:	dc011a15 	stw	r16,1128(sp)
  80c20c:	10bfff4c 	andi	r2,r2,65533
  80c210:	2821883a 	mov	r16,r5
  80c214:	d8cb883a 	add	r5,sp,r3
  80c218:	dc811c15 	stw	r18,1136(sp)
  80c21c:	dc411b15 	stw	r17,1132(sp)
  80c220:	dfc11d15 	stw	ra,1140(sp)
  80c224:	2025883a 	mov	r18,r4
  80c228:	d881030d 	sth	r2,1036(sp)
  80c22c:	dac11915 	stw	r11,1124(sp)
  80c230:	da81038d 	sth	r10,1038(sp)
  80c234:	da410715 	stw	r9,1052(sp)
  80c238:	da010915 	stw	r8,1060(sp)
  80c23c:	dec10015 	stw	sp,1024(sp)
  80c240:	dec10415 	stw	sp,1040(sp)
  80c244:	d8c10215 	stw	r3,1032(sp)
  80c248:	d8c10515 	stw	r3,1044(sp)
  80c24c:	d8010615 	stw	zero,1048(sp)
  80c250:	080ad740 	call	80ad74 <___vfiprintf_internal_r>
  80c254:	1023883a 	mov	r17,r2
  80c258:	10000416 	blt	r2,zero,80c26c <__sbprintf+0x80>
  80c25c:	d9410004 	addi	r5,sp,1024
  80c260:	9009883a 	mov	r4,r18
  80c264:	08076280 	call	807628 <_fflush_r>
  80c268:	10000d1e 	bne	r2,zero,80c2a0 <__sbprintf+0xb4>
  80c26c:	d881030b 	ldhu	r2,1036(sp)
  80c270:	1080100c 	andi	r2,r2,64
  80c274:	10000326 	beq	r2,zero,80c284 <__sbprintf+0x98>
  80c278:	8080030b 	ldhu	r2,12(r16)
  80c27c:	10801014 	ori	r2,r2,64
  80c280:	8080030d 	sth	r2,12(r16)
  80c284:	8805883a 	mov	r2,r17
  80c288:	dfc11d17 	ldw	ra,1140(sp)
  80c28c:	dc811c17 	ldw	r18,1136(sp)
  80c290:	dc411b17 	ldw	r17,1132(sp)
  80c294:	dc011a17 	ldw	r16,1128(sp)
  80c298:	dec11e04 	addi	sp,sp,1144
  80c29c:	f800283a 	ret
  80c2a0:	047fffc4 	movi	r17,-1
  80c2a4:	003ff106 	br	80c26c <__alt_mem_onchip_mem+0xff78c26c>

0080c2a8 <_write_r>:
  80c2a8:	defffd04 	addi	sp,sp,-12
  80c2ac:	2805883a 	mov	r2,r5
  80c2b0:	dc000015 	stw	r16,0(sp)
  80c2b4:	040020b4 	movhi	r16,130
  80c2b8:	dc400115 	stw	r17,4(sp)
  80c2bc:	300b883a 	mov	r5,r6
  80c2c0:	84208204 	addi	r16,r16,-32248
  80c2c4:	2023883a 	mov	r17,r4
  80c2c8:	380d883a 	mov	r6,r7
  80c2cc:	1009883a 	mov	r4,r2
  80c2d0:	dfc00215 	stw	ra,8(sp)
  80c2d4:	80000015 	stw	zero,0(r16)
  80c2d8:	081094c0 	call	81094c <write>
  80c2dc:	00ffffc4 	movi	r3,-1
  80c2e0:	10c00526 	beq	r2,r3,80c2f8 <_write_r+0x50>
  80c2e4:	dfc00217 	ldw	ra,8(sp)
  80c2e8:	dc400117 	ldw	r17,4(sp)
  80c2ec:	dc000017 	ldw	r16,0(sp)
  80c2f0:	dec00304 	addi	sp,sp,12
  80c2f4:	f800283a 	ret
  80c2f8:	80c00017 	ldw	r3,0(r16)
  80c2fc:	183ff926 	beq	r3,zero,80c2e4 <__alt_mem_onchip_mem+0xff78c2e4>
  80c300:	88c00015 	stw	r3,0(r17)
  80c304:	003ff706 	br	80c2e4 <__alt_mem_onchip_mem+0xff78c2e4>

0080c308 <_close_r>:
  80c308:	defffd04 	addi	sp,sp,-12
  80c30c:	dc000015 	stw	r16,0(sp)
  80c310:	040020b4 	movhi	r16,130
  80c314:	dc400115 	stw	r17,4(sp)
  80c318:	84208204 	addi	r16,r16,-32248
  80c31c:	2023883a 	mov	r17,r4
  80c320:	2809883a 	mov	r4,r5
  80c324:	dfc00215 	stw	ra,8(sp)
  80c328:	80000015 	stw	zero,0(r16)
  80c32c:	080fee40 	call	80fee4 <close>
  80c330:	00ffffc4 	movi	r3,-1
  80c334:	10c00526 	beq	r2,r3,80c34c <_close_r+0x44>
  80c338:	dfc00217 	ldw	ra,8(sp)
  80c33c:	dc400117 	ldw	r17,4(sp)
  80c340:	dc000017 	ldw	r16,0(sp)
  80c344:	dec00304 	addi	sp,sp,12
  80c348:	f800283a 	ret
  80c34c:	80c00017 	ldw	r3,0(r16)
  80c350:	183ff926 	beq	r3,zero,80c338 <__alt_mem_onchip_mem+0xff78c338>
  80c354:	88c00015 	stw	r3,0(r17)
  80c358:	003ff706 	br	80c338 <__alt_mem_onchip_mem+0xff78c338>

0080c35c <_calloc_r>:
  80c35c:	298b383a 	mul	r5,r5,r6
  80c360:	defffe04 	addi	sp,sp,-8
  80c364:	dfc00115 	stw	ra,4(sp)
  80c368:	dc000015 	stw	r16,0(sp)
  80c36c:	08087640 	call	808764 <_malloc_r>
  80c370:	10002926 	beq	r2,zero,80c418 <_calloc_r+0xbc>
  80c374:	11bfff17 	ldw	r6,-4(r2)
  80c378:	1021883a 	mov	r16,r2
  80c37c:	00bfff04 	movi	r2,-4
  80c380:	308c703a 	and	r6,r6,r2
  80c384:	00c00904 	movi	r3,36
  80c388:	308d883a 	add	r6,r6,r2
  80c38c:	19801636 	bltu	r3,r6,80c3e8 <_calloc_r+0x8c>
  80c390:	008004c4 	movi	r2,19
  80c394:	11800b2e 	bgeu	r2,r6,80c3c4 <_calloc_r+0x68>
  80c398:	80000015 	stw	zero,0(r16)
  80c39c:	80000115 	stw	zero,4(r16)
  80c3a0:	008006c4 	movi	r2,27
  80c3a4:	11801a2e 	bgeu	r2,r6,80c410 <_calloc_r+0xb4>
  80c3a8:	80000215 	stw	zero,8(r16)
  80c3ac:	80000315 	stw	zero,12(r16)
  80c3b0:	30c0151e 	bne	r6,r3,80c408 <_calloc_r+0xac>
  80c3b4:	80000415 	stw	zero,16(r16)
  80c3b8:	80800604 	addi	r2,r16,24
  80c3bc:	80000515 	stw	zero,20(r16)
  80c3c0:	00000106 	br	80c3c8 <_calloc_r+0x6c>
  80c3c4:	8005883a 	mov	r2,r16
  80c3c8:	10000015 	stw	zero,0(r2)
  80c3cc:	10000115 	stw	zero,4(r2)
  80c3d0:	10000215 	stw	zero,8(r2)
  80c3d4:	8005883a 	mov	r2,r16
  80c3d8:	dfc00117 	ldw	ra,4(sp)
  80c3dc:	dc000017 	ldw	r16,0(sp)
  80c3e0:	dec00204 	addi	sp,sp,8
  80c3e4:	f800283a 	ret
  80c3e8:	000b883a 	mov	r5,zero
  80c3ec:	8009883a 	mov	r4,r16
  80c3f0:	08092f80 	call	8092f8 <memset>
  80c3f4:	8005883a 	mov	r2,r16
  80c3f8:	dfc00117 	ldw	ra,4(sp)
  80c3fc:	dc000017 	ldw	r16,0(sp)
  80c400:	dec00204 	addi	sp,sp,8
  80c404:	f800283a 	ret
  80c408:	80800404 	addi	r2,r16,16
  80c40c:	003fee06 	br	80c3c8 <__alt_mem_onchip_mem+0xff78c3c8>
  80c410:	80800204 	addi	r2,r16,8
  80c414:	003fec06 	br	80c3c8 <__alt_mem_onchip_mem+0xff78c3c8>
  80c418:	0005883a 	mov	r2,zero
  80c41c:	003fee06 	br	80c3d8 <__alt_mem_onchip_mem+0xff78c3d8>

0080c420 <_fclose_r>:
  80c420:	28003926 	beq	r5,zero,80c508 <_fclose_r+0xe8>
  80c424:	defffc04 	addi	sp,sp,-16
  80c428:	dc400115 	stw	r17,4(sp)
  80c42c:	dc000015 	stw	r16,0(sp)
  80c430:	dfc00315 	stw	ra,12(sp)
  80c434:	dc800215 	stw	r18,8(sp)
  80c438:	2023883a 	mov	r17,r4
  80c43c:	2821883a 	mov	r16,r5
  80c440:	20000226 	beq	r4,zero,80c44c <_fclose_r+0x2c>
  80c444:	20800e17 	ldw	r2,56(r4)
  80c448:	10002726 	beq	r2,zero,80c4e8 <_fclose_r+0xc8>
  80c44c:	8080030f 	ldh	r2,12(r16)
  80c450:	1000071e 	bne	r2,zero,80c470 <_fclose_r+0x50>
  80c454:	0005883a 	mov	r2,zero
  80c458:	dfc00317 	ldw	ra,12(sp)
  80c45c:	dc800217 	ldw	r18,8(sp)
  80c460:	dc400117 	ldw	r17,4(sp)
  80c464:	dc000017 	ldw	r16,0(sp)
  80c468:	dec00404 	addi	sp,sp,16
  80c46c:	f800283a 	ret
  80c470:	800b883a 	mov	r5,r16
  80c474:	8809883a 	mov	r4,r17
  80c478:	080740c0 	call	80740c <__sflush_r>
  80c47c:	1025883a 	mov	r18,r2
  80c480:	80800b17 	ldw	r2,44(r16)
  80c484:	10000426 	beq	r2,zero,80c498 <_fclose_r+0x78>
  80c488:	81400717 	ldw	r5,28(r16)
  80c48c:	8809883a 	mov	r4,r17
  80c490:	103ee83a 	callr	r2
  80c494:	10001616 	blt	r2,zero,80c4f0 <_fclose_r+0xd0>
  80c498:	8080030b 	ldhu	r2,12(r16)
  80c49c:	1080200c 	andi	r2,r2,128
  80c4a0:	1000151e 	bne	r2,zero,80c4f8 <_fclose_r+0xd8>
  80c4a4:	81400c17 	ldw	r5,48(r16)
  80c4a8:	28000526 	beq	r5,zero,80c4c0 <_fclose_r+0xa0>
  80c4ac:	80801004 	addi	r2,r16,64
  80c4b0:	28800226 	beq	r5,r2,80c4bc <_fclose_r+0x9c>
  80c4b4:	8809883a 	mov	r4,r17
  80c4b8:	0807b780 	call	807b78 <_free_r>
  80c4bc:	80000c15 	stw	zero,48(r16)
  80c4c0:	81401117 	ldw	r5,68(r16)
  80c4c4:	28000326 	beq	r5,zero,80c4d4 <_fclose_r+0xb4>
  80c4c8:	8809883a 	mov	r4,r17
  80c4cc:	0807b780 	call	807b78 <_free_r>
  80c4d0:	80001115 	stw	zero,68(r16)
  80c4d4:	0807a140 	call	807a14 <__sfp_lock_acquire>
  80c4d8:	8000030d 	sth	zero,12(r16)
  80c4dc:	0807a180 	call	807a18 <__sfp_lock_release>
  80c4e0:	9005883a 	mov	r2,r18
  80c4e4:	003fdc06 	br	80c458 <__alt_mem_onchip_mem+0xff78c458>
  80c4e8:	0807a040 	call	807a04 <__sinit>
  80c4ec:	003fd706 	br	80c44c <__alt_mem_onchip_mem+0xff78c44c>
  80c4f0:	04bfffc4 	movi	r18,-1
  80c4f4:	003fe806 	br	80c498 <__alt_mem_onchip_mem+0xff78c498>
  80c4f8:	81400417 	ldw	r5,16(r16)
  80c4fc:	8809883a 	mov	r4,r17
  80c500:	0807b780 	call	807b78 <_free_r>
  80c504:	003fe706 	br	80c4a4 <__alt_mem_onchip_mem+0xff78c4a4>
  80c508:	0005883a 	mov	r2,zero
  80c50c:	f800283a 	ret

0080c510 <fclose>:
  80c510:	00802074 	movhi	r2,129
  80c514:	1098df04 	addi	r2,r2,25468
  80c518:	200b883a 	mov	r5,r4
  80c51c:	11000017 	ldw	r4,0(r2)
  80c520:	080c4201 	jmpi	80c420 <_fclose_r>

0080c524 <__fputwc>:
  80c524:	defff804 	addi	sp,sp,-32
  80c528:	dcc00415 	stw	r19,16(sp)
  80c52c:	dc800315 	stw	r18,12(sp)
  80c530:	dc000115 	stw	r16,4(sp)
  80c534:	dfc00715 	stw	ra,28(sp)
  80c538:	dd400615 	stw	r21,24(sp)
  80c53c:	dd000515 	stw	r20,20(sp)
  80c540:	dc400215 	stw	r17,8(sp)
  80c544:	2027883a 	mov	r19,r4
  80c548:	2825883a 	mov	r18,r5
  80c54c:	3021883a 	mov	r16,r6
  80c550:	08085540 	call	808554 <__locale_mb_cur_max>
  80c554:	00c00044 	movi	r3,1
  80c558:	10c03e26 	beq	r2,r3,80c654 <__fputwc+0x130>
  80c55c:	81c01704 	addi	r7,r16,92
  80c560:	900d883a 	mov	r6,r18
  80c564:	d80b883a 	mov	r5,sp
  80c568:	9809883a 	mov	r4,r19
  80c56c:	080c9f40 	call	80c9f4 <_wcrtomb_r>
  80c570:	1029883a 	mov	r20,r2
  80c574:	00bfffc4 	movi	r2,-1
  80c578:	a0802026 	beq	r20,r2,80c5fc <__fputwc+0xd8>
  80c57c:	d9400003 	ldbu	r5,0(sp)
  80c580:	a0001c26 	beq	r20,zero,80c5f4 <__fputwc+0xd0>
  80c584:	0023883a 	mov	r17,zero
  80c588:	05400284 	movi	r21,10
  80c58c:	00000906 	br	80c5b4 <__fputwc+0x90>
  80c590:	80800017 	ldw	r2,0(r16)
  80c594:	11400005 	stb	r5,0(r2)
  80c598:	80c00017 	ldw	r3,0(r16)
  80c59c:	18c00044 	addi	r3,r3,1
  80c5a0:	80c00015 	stw	r3,0(r16)
  80c5a4:	8c400044 	addi	r17,r17,1
  80c5a8:	dc45883a 	add	r2,sp,r17
  80c5ac:	8d00112e 	bgeu	r17,r20,80c5f4 <__fputwc+0xd0>
  80c5b0:	11400003 	ldbu	r5,0(r2)
  80c5b4:	80c00217 	ldw	r3,8(r16)
  80c5b8:	18ffffc4 	addi	r3,r3,-1
  80c5bc:	80c00215 	stw	r3,8(r16)
  80c5c0:	183ff30e 	bge	r3,zero,80c590 <__alt_mem_onchip_mem+0xff78c590>
  80c5c4:	80800617 	ldw	r2,24(r16)
  80c5c8:	18801916 	blt	r3,r2,80c630 <__fputwc+0x10c>
  80c5cc:	80800017 	ldw	r2,0(r16)
  80c5d0:	11400005 	stb	r5,0(r2)
  80c5d4:	80800017 	ldw	r2,0(r16)
  80c5d8:	10c00003 	ldbu	r3,0(r2)
  80c5dc:	10800044 	addi	r2,r2,1
  80c5e0:	1d402326 	beq	r3,r21,80c670 <__fputwc+0x14c>
  80c5e4:	80800015 	stw	r2,0(r16)
  80c5e8:	8c400044 	addi	r17,r17,1
  80c5ec:	dc45883a 	add	r2,sp,r17
  80c5f0:	8d3fef36 	bltu	r17,r20,80c5b0 <__alt_mem_onchip_mem+0xff78c5b0>
  80c5f4:	9005883a 	mov	r2,r18
  80c5f8:	00000406 	br	80c60c <__fputwc+0xe8>
  80c5fc:	80c0030b 	ldhu	r3,12(r16)
  80c600:	a005883a 	mov	r2,r20
  80c604:	18c01014 	ori	r3,r3,64
  80c608:	80c0030d 	sth	r3,12(r16)
  80c60c:	dfc00717 	ldw	ra,28(sp)
  80c610:	dd400617 	ldw	r21,24(sp)
  80c614:	dd000517 	ldw	r20,20(sp)
  80c618:	dcc00417 	ldw	r19,16(sp)
  80c61c:	dc800317 	ldw	r18,12(sp)
  80c620:	dc400217 	ldw	r17,8(sp)
  80c624:	dc000117 	ldw	r16,4(sp)
  80c628:	dec00804 	addi	sp,sp,32
  80c62c:	f800283a 	ret
  80c630:	800d883a 	mov	r6,r16
  80c634:	29403fcc 	andi	r5,r5,255
  80c638:	9809883a 	mov	r4,r19
  80c63c:	080c89c0 	call	80c89c <__swbuf_r>
  80c640:	10bfffe0 	cmpeqi	r2,r2,-1
  80c644:	10803fcc 	andi	r2,r2,255
  80c648:	103fd626 	beq	r2,zero,80c5a4 <__alt_mem_onchip_mem+0xff78c5a4>
  80c64c:	00bfffc4 	movi	r2,-1
  80c650:	003fee06 	br	80c60c <__alt_mem_onchip_mem+0xff78c60c>
  80c654:	90ffffc4 	addi	r3,r18,-1
  80c658:	01003f84 	movi	r4,254
  80c65c:	20ffbf36 	bltu	r4,r3,80c55c <__alt_mem_onchip_mem+0xff78c55c>
  80c660:	900b883a 	mov	r5,r18
  80c664:	dc800005 	stb	r18,0(sp)
  80c668:	1029883a 	mov	r20,r2
  80c66c:	003fc506 	br	80c584 <__alt_mem_onchip_mem+0xff78c584>
  80c670:	800d883a 	mov	r6,r16
  80c674:	a80b883a 	mov	r5,r21
  80c678:	9809883a 	mov	r4,r19
  80c67c:	080c89c0 	call	80c89c <__swbuf_r>
  80c680:	10bfffe0 	cmpeqi	r2,r2,-1
  80c684:	003fef06 	br	80c644 <__alt_mem_onchip_mem+0xff78c644>

0080c688 <_fputwc_r>:
  80c688:	3080030b 	ldhu	r2,12(r6)
  80c68c:	10c8000c 	andi	r3,r2,8192
  80c690:	1800051e 	bne	r3,zero,80c6a8 <_fputwc_r+0x20>
  80c694:	30c01917 	ldw	r3,100(r6)
  80c698:	10880014 	ori	r2,r2,8192
  80c69c:	3080030d 	sth	r2,12(r6)
  80c6a0:	18880014 	ori	r2,r3,8192
  80c6a4:	30801915 	stw	r2,100(r6)
  80c6a8:	080c5241 	jmpi	80c524 <__fputwc>

0080c6ac <fputwc>:
  80c6ac:	00802074 	movhi	r2,129
  80c6b0:	defffc04 	addi	sp,sp,-16
  80c6b4:	1098df04 	addi	r2,r2,25468
  80c6b8:	dc000115 	stw	r16,4(sp)
  80c6bc:	14000017 	ldw	r16,0(r2)
  80c6c0:	dc400215 	stw	r17,8(sp)
  80c6c4:	dfc00315 	stw	ra,12(sp)
  80c6c8:	2023883a 	mov	r17,r4
  80c6cc:	80000226 	beq	r16,zero,80c6d8 <fputwc+0x2c>
  80c6d0:	80800e17 	ldw	r2,56(r16)
  80c6d4:	10001026 	beq	r2,zero,80c718 <fputwc+0x6c>
  80c6d8:	2880030b 	ldhu	r2,12(r5)
  80c6dc:	10c8000c 	andi	r3,r2,8192
  80c6e0:	1800051e 	bne	r3,zero,80c6f8 <fputwc+0x4c>
  80c6e4:	28c01917 	ldw	r3,100(r5)
  80c6e8:	10880014 	ori	r2,r2,8192
  80c6ec:	2880030d 	sth	r2,12(r5)
  80c6f0:	18880014 	ori	r2,r3,8192
  80c6f4:	28801915 	stw	r2,100(r5)
  80c6f8:	280d883a 	mov	r6,r5
  80c6fc:	8009883a 	mov	r4,r16
  80c700:	880b883a 	mov	r5,r17
  80c704:	dfc00317 	ldw	ra,12(sp)
  80c708:	dc400217 	ldw	r17,8(sp)
  80c70c:	dc000117 	ldw	r16,4(sp)
  80c710:	dec00404 	addi	sp,sp,16
  80c714:	080c5241 	jmpi	80c524 <__fputwc>
  80c718:	8009883a 	mov	r4,r16
  80c71c:	d9400015 	stw	r5,0(sp)
  80c720:	0807a040 	call	807a04 <__sinit>
  80c724:	d9400017 	ldw	r5,0(sp)
  80c728:	003feb06 	br	80c6d8 <__alt_mem_onchip_mem+0xff78c6d8>

0080c72c <_fstat_r>:
  80c72c:	defffd04 	addi	sp,sp,-12
  80c730:	2805883a 	mov	r2,r5
  80c734:	dc000015 	stw	r16,0(sp)
  80c738:	040020b4 	movhi	r16,130
  80c73c:	dc400115 	stw	r17,4(sp)
  80c740:	84208204 	addi	r16,r16,-32248
  80c744:	2023883a 	mov	r17,r4
  80c748:	300b883a 	mov	r5,r6
  80c74c:	1009883a 	mov	r4,r2
  80c750:	dfc00215 	stw	ra,8(sp)
  80c754:	80000015 	stw	zero,0(r16)
  80c758:	081001c0 	call	81001c <fstat>
  80c75c:	00ffffc4 	movi	r3,-1
  80c760:	10c00526 	beq	r2,r3,80c778 <_fstat_r+0x4c>
  80c764:	dfc00217 	ldw	ra,8(sp)
  80c768:	dc400117 	ldw	r17,4(sp)
  80c76c:	dc000017 	ldw	r16,0(sp)
  80c770:	dec00304 	addi	sp,sp,12
  80c774:	f800283a 	ret
  80c778:	80c00017 	ldw	r3,0(r16)
  80c77c:	183ff926 	beq	r3,zero,80c764 <__alt_mem_onchip_mem+0xff78c764>
  80c780:	88c00015 	stw	r3,0(r17)
  80c784:	003ff706 	br	80c764 <__alt_mem_onchip_mem+0xff78c764>

0080c788 <_isatty_r>:
  80c788:	defffd04 	addi	sp,sp,-12
  80c78c:	dc000015 	stw	r16,0(sp)
  80c790:	040020b4 	movhi	r16,130
  80c794:	dc400115 	stw	r17,4(sp)
  80c798:	84208204 	addi	r16,r16,-32248
  80c79c:	2023883a 	mov	r17,r4
  80c7a0:	2809883a 	mov	r4,r5
  80c7a4:	dfc00215 	stw	ra,8(sp)
  80c7a8:	80000015 	stw	zero,0(r16)
  80c7ac:	08101080 	call	810108 <isatty>
  80c7b0:	00ffffc4 	movi	r3,-1
  80c7b4:	10c00526 	beq	r2,r3,80c7cc <_isatty_r+0x44>
  80c7b8:	dfc00217 	ldw	ra,8(sp)
  80c7bc:	dc400117 	ldw	r17,4(sp)
  80c7c0:	dc000017 	ldw	r16,0(sp)
  80c7c4:	dec00304 	addi	sp,sp,12
  80c7c8:	f800283a 	ret
  80c7cc:	80c00017 	ldw	r3,0(r16)
  80c7d0:	183ff926 	beq	r3,zero,80c7b8 <__alt_mem_onchip_mem+0xff78c7b8>
  80c7d4:	88c00015 	stw	r3,0(r17)
  80c7d8:	003ff706 	br	80c7b8 <__alt_mem_onchip_mem+0xff78c7b8>

0080c7dc <_lseek_r>:
  80c7dc:	defffd04 	addi	sp,sp,-12
  80c7e0:	2805883a 	mov	r2,r5
  80c7e4:	dc000015 	stw	r16,0(sp)
  80c7e8:	040020b4 	movhi	r16,130
  80c7ec:	dc400115 	stw	r17,4(sp)
  80c7f0:	300b883a 	mov	r5,r6
  80c7f4:	84208204 	addi	r16,r16,-32248
  80c7f8:	2023883a 	mov	r17,r4
  80c7fc:	380d883a 	mov	r6,r7
  80c800:	1009883a 	mov	r4,r2
  80c804:	dfc00215 	stw	ra,8(sp)
  80c808:	80000015 	stw	zero,0(r16)
  80c80c:	08102d40 	call	8102d4 <lseek>
  80c810:	00ffffc4 	movi	r3,-1
  80c814:	10c00526 	beq	r2,r3,80c82c <_lseek_r+0x50>
  80c818:	dfc00217 	ldw	ra,8(sp)
  80c81c:	dc400117 	ldw	r17,4(sp)
  80c820:	dc000017 	ldw	r16,0(sp)
  80c824:	dec00304 	addi	sp,sp,12
  80c828:	f800283a 	ret
  80c82c:	80c00017 	ldw	r3,0(r16)
  80c830:	183ff926 	beq	r3,zero,80c818 <__alt_mem_onchip_mem+0xff78c818>
  80c834:	88c00015 	stw	r3,0(r17)
  80c838:	003ff706 	br	80c818 <__alt_mem_onchip_mem+0xff78c818>

0080c83c <_read_r>:
  80c83c:	defffd04 	addi	sp,sp,-12
  80c840:	2805883a 	mov	r2,r5
  80c844:	dc000015 	stw	r16,0(sp)
  80c848:	040020b4 	movhi	r16,130
  80c84c:	dc400115 	stw	r17,4(sp)
  80c850:	300b883a 	mov	r5,r6
  80c854:	84208204 	addi	r16,r16,-32248
  80c858:	2023883a 	mov	r17,r4
  80c85c:	380d883a 	mov	r6,r7
  80c860:	1009883a 	mov	r4,r2
  80c864:	dfc00215 	stw	ra,8(sp)
  80c868:	80000015 	stw	zero,0(r16)
  80c86c:	08104a80 	call	8104a8 <read>
  80c870:	00ffffc4 	movi	r3,-1
  80c874:	10c00526 	beq	r2,r3,80c88c <_read_r+0x50>
  80c878:	dfc00217 	ldw	ra,8(sp)
  80c87c:	dc400117 	ldw	r17,4(sp)
  80c880:	dc000017 	ldw	r16,0(sp)
  80c884:	dec00304 	addi	sp,sp,12
  80c888:	f800283a 	ret
  80c88c:	80c00017 	ldw	r3,0(r16)
  80c890:	183ff926 	beq	r3,zero,80c878 <__alt_mem_onchip_mem+0xff78c878>
  80c894:	88c00015 	stw	r3,0(r17)
  80c898:	003ff706 	br	80c878 <__alt_mem_onchip_mem+0xff78c878>

0080c89c <__swbuf_r>:
  80c89c:	defffb04 	addi	sp,sp,-20
  80c8a0:	dcc00315 	stw	r19,12(sp)
  80c8a4:	dc800215 	stw	r18,8(sp)
  80c8a8:	dc000015 	stw	r16,0(sp)
  80c8ac:	dfc00415 	stw	ra,16(sp)
  80c8b0:	dc400115 	stw	r17,4(sp)
  80c8b4:	2025883a 	mov	r18,r4
  80c8b8:	2827883a 	mov	r19,r5
  80c8bc:	3021883a 	mov	r16,r6
  80c8c0:	20000226 	beq	r4,zero,80c8cc <__swbuf_r+0x30>
  80c8c4:	20800e17 	ldw	r2,56(r4)
  80c8c8:	10004226 	beq	r2,zero,80c9d4 <__swbuf_r+0x138>
  80c8cc:	80800617 	ldw	r2,24(r16)
  80c8d0:	8100030b 	ldhu	r4,12(r16)
  80c8d4:	80800215 	stw	r2,8(r16)
  80c8d8:	2080020c 	andi	r2,r4,8
  80c8dc:	10003626 	beq	r2,zero,80c9b8 <__swbuf_r+0x11c>
  80c8e0:	80c00417 	ldw	r3,16(r16)
  80c8e4:	18003426 	beq	r3,zero,80c9b8 <__swbuf_r+0x11c>
  80c8e8:	2088000c 	andi	r2,r4,8192
  80c8ec:	9c403fcc 	andi	r17,r19,255
  80c8f0:	10001a26 	beq	r2,zero,80c95c <__swbuf_r+0xc0>
  80c8f4:	80800017 	ldw	r2,0(r16)
  80c8f8:	81000517 	ldw	r4,20(r16)
  80c8fc:	10c7c83a 	sub	r3,r2,r3
  80c900:	1900200e 	bge	r3,r4,80c984 <__swbuf_r+0xe8>
  80c904:	18c00044 	addi	r3,r3,1
  80c908:	81000217 	ldw	r4,8(r16)
  80c90c:	11400044 	addi	r5,r2,1
  80c910:	81400015 	stw	r5,0(r16)
  80c914:	213fffc4 	addi	r4,r4,-1
  80c918:	81000215 	stw	r4,8(r16)
  80c91c:	14c00005 	stb	r19,0(r2)
  80c920:	80800517 	ldw	r2,20(r16)
  80c924:	10c01e26 	beq	r2,r3,80c9a0 <__swbuf_r+0x104>
  80c928:	8080030b 	ldhu	r2,12(r16)
  80c92c:	1080004c 	andi	r2,r2,1
  80c930:	10000226 	beq	r2,zero,80c93c <__swbuf_r+0xa0>
  80c934:	00800284 	movi	r2,10
  80c938:	88801926 	beq	r17,r2,80c9a0 <__swbuf_r+0x104>
  80c93c:	8805883a 	mov	r2,r17
  80c940:	dfc00417 	ldw	ra,16(sp)
  80c944:	dcc00317 	ldw	r19,12(sp)
  80c948:	dc800217 	ldw	r18,8(sp)
  80c94c:	dc400117 	ldw	r17,4(sp)
  80c950:	dc000017 	ldw	r16,0(sp)
  80c954:	dec00504 	addi	sp,sp,20
  80c958:	f800283a 	ret
  80c95c:	81401917 	ldw	r5,100(r16)
  80c960:	00b7ffc4 	movi	r2,-8193
  80c964:	21080014 	ori	r4,r4,8192
  80c968:	2884703a 	and	r2,r5,r2
  80c96c:	80801915 	stw	r2,100(r16)
  80c970:	80800017 	ldw	r2,0(r16)
  80c974:	8100030d 	sth	r4,12(r16)
  80c978:	81000517 	ldw	r4,20(r16)
  80c97c:	10c7c83a 	sub	r3,r2,r3
  80c980:	193fe016 	blt	r3,r4,80c904 <__alt_mem_onchip_mem+0xff78c904>
  80c984:	800b883a 	mov	r5,r16
  80c988:	9009883a 	mov	r4,r18
  80c98c:	08076280 	call	807628 <_fflush_r>
  80c990:	1000071e 	bne	r2,zero,80c9b0 <__swbuf_r+0x114>
  80c994:	80800017 	ldw	r2,0(r16)
  80c998:	00c00044 	movi	r3,1
  80c99c:	003fda06 	br	80c908 <__alt_mem_onchip_mem+0xff78c908>
  80c9a0:	800b883a 	mov	r5,r16
  80c9a4:	9009883a 	mov	r4,r18
  80c9a8:	08076280 	call	807628 <_fflush_r>
  80c9ac:	103fe326 	beq	r2,zero,80c93c <__alt_mem_onchip_mem+0xff78c93c>
  80c9b0:	00bfffc4 	movi	r2,-1
  80c9b4:	003fe206 	br	80c940 <__alt_mem_onchip_mem+0xff78c940>
  80c9b8:	800b883a 	mov	r5,r16
  80c9bc:	9009883a 	mov	r4,r18
  80c9c0:	0805a300 	call	805a30 <__swsetup_r>
  80c9c4:	103ffa1e 	bne	r2,zero,80c9b0 <__alt_mem_onchip_mem+0xff78c9b0>
  80c9c8:	8100030b 	ldhu	r4,12(r16)
  80c9cc:	80c00417 	ldw	r3,16(r16)
  80c9d0:	003fc506 	br	80c8e8 <__alt_mem_onchip_mem+0xff78c8e8>
  80c9d4:	0807a040 	call	807a04 <__sinit>
  80c9d8:	003fbc06 	br	80c8cc <__alt_mem_onchip_mem+0xff78c8cc>

0080c9dc <__swbuf>:
  80c9dc:	00802074 	movhi	r2,129
  80c9e0:	1098df04 	addi	r2,r2,25468
  80c9e4:	280d883a 	mov	r6,r5
  80c9e8:	200b883a 	mov	r5,r4
  80c9ec:	11000017 	ldw	r4,0(r2)
  80c9f0:	080c89c1 	jmpi	80c89c <__swbuf_r>

0080c9f4 <_wcrtomb_r>:
  80c9f4:	defff604 	addi	sp,sp,-40
  80c9f8:	00802074 	movhi	r2,129
  80c9fc:	dc800815 	stw	r18,32(sp)
  80ca00:	dc400715 	stw	r17,28(sp)
  80ca04:	dc000615 	stw	r16,24(sp)
  80ca08:	1098e304 	addi	r2,r2,25484
  80ca0c:	dfc00915 	stw	ra,36(sp)
  80ca10:	2021883a 	mov	r16,r4
  80ca14:	3823883a 	mov	r17,r7
  80ca18:	14800017 	ldw	r18,0(r2)
  80ca1c:	28001426 	beq	r5,zero,80ca70 <_wcrtomb_r+0x7c>
  80ca20:	d9400415 	stw	r5,16(sp)
  80ca24:	d9800515 	stw	r6,20(sp)
  80ca28:	08085480 	call	808548 <__locale_charset>
  80ca2c:	d9800517 	ldw	r6,20(sp)
  80ca30:	d9400417 	ldw	r5,16(sp)
  80ca34:	100f883a 	mov	r7,r2
  80ca38:	dc400015 	stw	r17,0(sp)
  80ca3c:	8009883a 	mov	r4,r16
  80ca40:	903ee83a 	callr	r18
  80ca44:	00ffffc4 	movi	r3,-1
  80ca48:	10c0031e 	bne	r2,r3,80ca58 <_wcrtomb_r+0x64>
  80ca4c:	88000015 	stw	zero,0(r17)
  80ca50:	00c02284 	movi	r3,138
  80ca54:	80c00015 	stw	r3,0(r16)
  80ca58:	dfc00917 	ldw	ra,36(sp)
  80ca5c:	dc800817 	ldw	r18,32(sp)
  80ca60:	dc400717 	ldw	r17,28(sp)
  80ca64:	dc000617 	ldw	r16,24(sp)
  80ca68:	dec00a04 	addi	sp,sp,40
  80ca6c:	f800283a 	ret
  80ca70:	08085480 	call	808548 <__locale_charset>
  80ca74:	100f883a 	mov	r7,r2
  80ca78:	dc400015 	stw	r17,0(sp)
  80ca7c:	000d883a 	mov	r6,zero
  80ca80:	d9400104 	addi	r5,sp,4
  80ca84:	8009883a 	mov	r4,r16
  80ca88:	903ee83a 	callr	r18
  80ca8c:	003fed06 	br	80ca44 <__alt_mem_onchip_mem+0xff78ca44>

0080ca90 <wcrtomb>:
  80ca90:	defff604 	addi	sp,sp,-40
  80ca94:	00802074 	movhi	r2,129
  80ca98:	dc800615 	stw	r18,24(sp)
  80ca9c:	dc400515 	stw	r17,20(sp)
  80caa0:	1098df04 	addi	r2,r2,25468
  80caa4:	dfc00915 	stw	ra,36(sp)
  80caa8:	dd000815 	stw	r20,32(sp)
  80caac:	dcc00715 	stw	r19,28(sp)
  80cab0:	dc000415 	stw	r16,16(sp)
  80cab4:	3025883a 	mov	r18,r6
  80cab8:	14400017 	ldw	r17,0(r2)
  80cabc:	20001926 	beq	r4,zero,80cb24 <wcrtomb+0x94>
  80cac0:	00802074 	movhi	r2,129
  80cac4:	1098e304 	addi	r2,r2,25484
  80cac8:	15000017 	ldw	r20,0(r2)
  80cacc:	2021883a 	mov	r16,r4
  80cad0:	2827883a 	mov	r19,r5
  80cad4:	08085480 	call	808548 <__locale_charset>
  80cad8:	100f883a 	mov	r7,r2
  80cadc:	dc800015 	stw	r18,0(sp)
  80cae0:	980d883a 	mov	r6,r19
  80cae4:	800b883a 	mov	r5,r16
  80cae8:	8809883a 	mov	r4,r17
  80caec:	a03ee83a 	callr	r20
  80caf0:	00ffffc4 	movi	r3,-1
  80caf4:	10c0031e 	bne	r2,r3,80cb04 <wcrtomb+0x74>
  80caf8:	90000015 	stw	zero,0(r18)
  80cafc:	00c02284 	movi	r3,138
  80cb00:	88c00015 	stw	r3,0(r17)
  80cb04:	dfc00917 	ldw	ra,36(sp)
  80cb08:	dd000817 	ldw	r20,32(sp)
  80cb0c:	dcc00717 	ldw	r19,28(sp)
  80cb10:	dc800617 	ldw	r18,24(sp)
  80cb14:	dc400517 	ldw	r17,20(sp)
  80cb18:	dc000417 	ldw	r16,16(sp)
  80cb1c:	dec00a04 	addi	sp,sp,40
  80cb20:	f800283a 	ret
  80cb24:	00802074 	movhi	r2,129
  80cb28:	1098e304 	addi	r2,r2,25484
  80cb2c:	14000017 	ldw	r16,0(r2)
  80cb30:	08085480 	call	808548 <__locale_charset>
  80cb34:	100f883a 	mov	r7,r2
  80cb38:	dc800015 	stw	r18,0(sp)
  80cb3c:	000d883a 	mov	r6,zero
  80cb40:	d9400104 	addi	r5,sp,4
  80cb44:	8809883a 	mov	r4,r17
  80cb48:	803ee83a 	callr	r16
  80cb4c:	003fe806 	br	80caf0 <__alt_mem_onchip_mem+0xff78caf0>

0080cb50 <__ascii_wctomb>:
  80cb50:	28000526 	beq	r5,zero,80cb68 <__ascii_wctomb+0x18>
  80cb54:	00803fc4 	movi	r2,255
  80cb58:	11800536 	bltu	r2,r6,80cb70 <__ascii_wctomb+0x20>
  80cb5c:	29800005 	stb	r6,0(r5)
  80cb60:	00800044 	movi	r2,1
  80cb64:	f800283a 	ret
  80cb68:	0005883a 	mov	r2,zero
  80cb6c:	f800283a 	ret
  80cb70:	00802284 	movi	r2,138
  80cb74:	20800015 	stw	r2,0(r4)
  80cb78:	00bfffc4 	movi	r2,-1
  80cb7c:	f800283a 	ret

0080cb80 <_wctomb_r>:
  80cb80:	00802074 	movhi	r2,129
  80cb84:	defff904 	addi	sp,sp,-28
  80cb88:	1098e304 	addi	r2,r2,25484
  80cb8c:	dfc00615 	stw	ra,24(sp)
  80cb90:	dc400515 	stw	r17,20(sp)
  80cb94:	dc000415 	stw	r16,16(sp)
  80cb98:	3823883a 	mov	r17,r7
  80cb9c:	14000017 	ldw	r16,0(r2)
  80cba0:	d9000115 	stw	r4,4(sp)
  80cba4:	d9400215 	stw	r5,8(sp)
  80cba8:	d9800315 	stw	r6,12(sp)
  80cbac:	08085480 	call	808548 <__locale_charset>
  80cbb0:	d9800317 	ldw	r6,12(sp)
  80cbb4:	d9400217 	ldw	r5,8(sp)
  80cbb8:	d9000117 	ldw	r4,4(sp)
  80cbbc:	100f883a 	mov	r7,r2
  80cbc0:	dc400015 	stw	r17,0(sp)
  80cbc4:	803ee83a 	callr	r16
  80cbc8:	dfc00617 	ldw	ra,24(sp)
  80cbcc:	dc400517 	ldw	r17,20(sp)
  80cbd0:	dc000417 	ldw	r16,16(sp)
  80cbd4:	dec00704 	addi	sp,sp,28
  80cbd8:	f800283a 	ret

0080cbdc <__udivdi3>:
  80cbdc:	defff504 	addi	sp,sp,-44
  80cbe0:	dcc00415 	stw	r19,16(sp)
  80cbe4:	dc000115 	stw	r16,4(sp)
  80cbe8:	dfc00a15 	stw	ra,40(sp)
  80cbec:	df000915 	stw	fp,36(sp)
  80cbf0:	ddc00815 	stw	r23,32(sp)
  80cbf4:	dd800715 	stw	r22,28(sp)
  80cbf8:	dd400615 	stw	r21,24(sp)
  80cbfc:	dd000515 	stw	r20,20(sp)
  80cc00:	dc800315 	stw	r18,12(sp)
  80cc04:	dc400215 	stw	r17,8(sp)
  80cc08:	2027883a 	mov	r19,r4
  80cc0c:	2821883a 	mov	r16,r5
  80cc10:	3800411e 	bne	r7,zero,80cd18 <__udivdi3+0x13c>
  80cc14:	3023883a 	mov	r17,r6
  80cc18:	2025883a 	mov	r18,r4
  80cc1c:	2980522e 	bgeu	r5,r6,80cd68 <__udivdi3+0x18c>
  80cc20:	00bfffd4 	movui	r2,65535
  80cc24:	282d883a 	mov	r22,r5
  80cc28:	1180a836 	bltu	r2,r6,80cecc <__udivdi3+0x2f0>
  80cc2c:	00803fc4 	movi	r2,255
  80cc30:	1185803a 	cmpltu	r2,r2,r6
  80cc34:	100490fa 	slli	r2,r2,3
  80cc38:	3086d83a 	srl	r3,r6,r2
  80cc3c:	01002074 	movhi	r4,129
  80cc40:	2110c304 	addi	r4,r4,17164
  80cc44:	20c7883a 	add	r3,r4,r3
  80cc48:	18c00003 	ldbu	r3,0(r3)
  80cc4c:	1885883a 	add	r2,r3,r2
  80cc50:	00c00804 	movi	r3,32
  80cc54:	1887c83a 	sub	r3,r3,r2
  80cc58:	18000526 	beq	r3,zero,80cc70 <__udivdi3+0x94>
  80cc5c:	80e0983a 	sll	r16,r16,r3
  80cc60:	9884d83a 	srl	r2,r19,r2
  80cc64:	30e2983a 	sll	r17,r6,r3
  80cc68:	98e4983a 	sll	r18,r19,r3
  80cc6c:	142cb03a 	or	r22,r2,r16
  80cc70:	882ad43a 	srli	r21,r17,16
  80cc74:	b009883a 	mov	r4,r22
  80cc78:	8d3fffcc 	andi	r20,r17,65535
  80cc7c:	a80b883a 	mov	r5,r21
  80cc80:	080d7e80 	call	80d7e8 <__umodsi3>
  80cc84:	b009883a 	mov	r4,r22
  80cc88:	a80b883a 	mov	r5,r21
  80cc8c:	1027883a 	mov	r19,r2
  80cc90:	080d7840 	call	80d784 <__udivsi3>
  80cc94:	102d883a 	mov	r22,r2
  80cc98:	9826943a 	slli	r19,r19,16
  80cc9c:	9004d43a 	srli	r2,r18,16
  80cca0:	a5a1383a 	mul	r16,r20,r22
  80cca4:	14c4b03a 	or	r2,r2,r19
  80cca8:	1400052e 	bgeu	r2,r16,80ccc0 <__udivdi3+0xe4>
  80ccac:	1445883a 	add	r2,r2,r17
  80ccb0:	b0ffffc4 	addi	r3,r22,-1
  80ccb4:	14400136 	bltu	r2,r17,80ccbc <__udivdi3+0xe0>
  80ccb8:	14012336 	bltu	r2,r16,80d148 <__udivdi3+0x56c>
  80ccbc:	182d883a 	mov	r22,r3
  80ccc0:	1421c83a 	sub	r16,r2,r16
  80ccc4:	a80b883a 	mov	r5,r21
  80ccc8:	8009883a 	mov	r4,r16
  80cccc:	080d7e80 	call	80d7e8 <__umodsi3>
  80ccd0:	1027883a 	mov	r19,r2
  80ccd4:	a80b883a 	mov	r5,r21
  80ccd8:	8009883a 	mov	r4,r16
  80ccdc:	080d7840 	call	80d784 <__udivsi3>
  80cce0:	9826943a 	slli	r19,r19,16
  80cce4:	a0a9383a 	mul	r20,r20,r2
  80cce8:	94bfffcc 	andi	r18,r18,65535
  80ccec:	94e4b03a 	or	r18,r18,r19
  80ccf0:	9500052e 	bgeu	r18,r20,80cd08 <__udivdi3+0x12c>
  80ccf4:	8ca5883a 	add	r18,r17,r18
  80ccf8:	10ffffc4 	addi	r3,r2,-1
  80ccfc:	9440f136 	bltu	r18,r17,80d0c4 <__udivdi3+0x4e8>
  80cd00:	9500f02e 	bgeu	r18,r20,80d0c4 <__udivdi3+0x4e8>
  80cd04:	10bfff84 	addi	r2,r2,-2
  80cd08:	b00c943a 	slli	r6,r22,16
  80cd0c:	0007883a 	mov	r3,zero
  80cd10:	3084b03a 	or	r2,r6,r2
  80cd14:	00005906 	br	80ce7c <__udivdi3+0x2a0>
  80cd18:	29c05636 	bltu	r5,r7,80ce74 <__udivdi3+0x298>
  80cd1c:	00bfffd4 	movui	r2,65535
  80cd20:	11c0622e 	bgeu	r2,r7,80ceac <__udivdi3+0x2d0>
  80cd24:	00804034 	movhi	r2,256
  80cd28:	10bfffc4 	addi	r2,r2,-1
  80cd2c:	11c0ee36 	bltu	r2,r7,80d0e8 <__udivdi3+0x50c>
  80cd30:	00800404 	movi	r2,16
  80cd34:	3886d83a 	srl	r3,r7,r2
  80cd38:	01002074 	movhi	r4,129
  80cd3c:	2110c304 	addi	r4,r4,17164
  80cd40:	20c7883a 	add	r3,r4,r3
  80cd44:	18c00003 	ldbu	r3,0(r3)
  80cd48:	05400804 	movi	r21,32
  80cd4c:	1885883a 	add	r2,r3,r2
  80cd50:	a8abc83a 	sub	r21,r21,r2
  80cd54:	a800621e 	bne	r21,zero,80cee0 <__udivdi3+0x304>
  80cd58:	3c00e936 	bltu	r7,r16,80d100 <__udivdi3+0x524>
  80cd5c:	9985403a 	cmpgeu	r2,r19,r6
  80cd60:	0007883a 	mov	r3,zero
  80cd64:	00004506 	br	80ce7c <__udivdi3+0x2a0>
  80cd68:	3000041e 	bne	r6,zero,80cd7c <__udivdi3+0x1a0>
  80cd6c:	000b883a 	mov	r5,zero
  80cd70:	01000044 	movi	r4,1
  80cd74:	080d7840 	call	80d784 <__udivsi3>
  80cd78:	1023883a 	mov	r17,r2
  80cd7c:	00bfffd4 	movui	r2,65535
  80cd80:	14404e2e 	bgeu	r2,r17,80cebc <__udivdi3+0x2e0>
  80cd84:	00804034 	movhi	r2,256
  80cd88:	10bfffc4 	addi	r2,r2,-1
  80cd8c:	1440d836 	bltu	r2,r17,80d0f0 <__udivdi3+0x514>
  80cd90:	00800404 	movi	r2,16
  80cd94:	8886d83a 	srl	r3,r17,r2
  80cd98:	01002074 	movhi	r4,129
  80cd9c:	2110c304 	addi	r4,r4,17164
  80cda0:	20c7883a 	add	r3,r4,r3
  80cda4:	18c00003 	ldbu	r3,0(r3)
  80cda8:	1885883a 	add	r2,r3,r2
  80cdac:	00c00804 	movi	r3,32
  80cdb0:	1887c83a 	sub	r3,r3,r2
  80cdb4:	18008f1e 	bne	r3,zero,80cff4 <__udivdi3+0x418>
  80cdb8:	882ad43a 	srli	r21,r17,16
  80cdbc:	8461c83a 	sub	r16,r16,r17
  80cdc0:	8d3fffcc 	andi	r20,r17,65535
  80cdc4:	00c00044 	movi	r3,1
  80cdc8:	8009883a 	mov	r4,r16
  80cdcc:	a80b883a 	mov	r5,r21
  80cdd0:	d8c00015 	stw	r3,0(sp)
  80cdd4:	080d7e80 	call	80d7e8 <__umodsi3>
  80cdd8:	8009883a 	mov	r4,r16
  80cddc:	a80b883a 	mov	r5,r21
  80cde0:	1027883a 	mov	r19,r2
  80cde4:	080d7840 	call	80d784 <__udivsi3>
  80cde8:	9826943a 	slli	r19,r19,16
  80cdec:	9008d43a 	srli	r4,r18,16
  80cdf0:	1521383a 	mul	r16,r2,r20
  80cdf4:	102d883a 	mov	r22,r2
  80cdf8:	24c8b03a 	or	r4,r4,r19
  80cdfc:	d8c00017 	ldw	r3,0(sp)
  80ce00:	2400052e 	bgeu	r4,r16,80ce18 <__udivdi3+0x23c>
  80ce04:	2449883a 	add	r4,r4,r17
  80ce08:	b0bfffc4 	addi	r2,r22,-1
  80ce0c:	24400136 	bltu	r4,r17,80ce14 <__udivdi3+0x238>
  80ce10:	2400ca36 	bltu	r4,r16,80d13c <__udivdi3+0x560>
  80ce14:	102d883a 	mov	r22,r2
  80ce18:	2421c83a 	sub	r16,r4,r16
  80ce1c:	a80b883a 	mov	r5,r21
  80ce20:	8009883a 	mov	r4,r16
  80ce24:	d8c00015 	stw	r3,0(sp)
  80ce28:	080d7e80 	call	80d7e8 <__umodsi3>
  80ce2c:	1027883a 	mov	r19,r2
  80ce30:	a80b883a 	mov	r5,r21
  80ce34:	8009883a 	mov	r4,r16
  80ce38:	080d7840 	call	80d784 <__udivsi3>
  80ce3c:	9826943a 	slli	r19,r19,16
  80ce40:	1529383a 	mul	r20,r2,r20
  80ce44:	94bfffcc 	andi	r18,r18,65535
  80ce48:	94e4b03a 	or	r18,r18,r19
  80ce4c:	d8c00017 	ldw	r3,0(sp)
  80ce50:	9500052e 	bgeu	r18,r20,80ce68 <__udivdi3+0x28c>
  80ce54:	8ca5883a 	add	r18,r17,r18
  80ce58:	113fffc4 	addi	r4,r2,-1
  80ce5c:	94409736 	bltu	r18,r17,80d0bc <__udivdi3+0x4e0>
  80ce60:	9500962e 	bgeu	r18,r20,80d0bc <__udivdi3+0x4e0>
  80ce64:	10bfff84 	addi	r2,r2,-2
  80ce68:	b00c943a 	slli	r6,r22,16
  80ce6c:	3084b03a 	or	r2,r6,r2
  80ce70:	00000206 	br	80ce7c <__udivdi3+0x2a0>
  80ce74:	0007883a 	mov	r3,zero
  80ce78:	0005883a 	mov	r2,zero
  80ce7c:	dfc00a17 	ldw	ra,40(sp)
  80ce80:	df000917 	ldw	fp,36(sp)
  80ce84:	ddc00817 	ldw	r23,32(sp)
  80ce88:	dd800717 	ldw	r22,28(sp)
  80ce8c:	dd400617 	ldw	r21,24(sp)
  80ce90:	dd000517 	ldw	r20,20(sp)
  80ce94:	dcc00417 	ldw	r19,16(sp)
  80ce98:	dc800317 	ldw	r18,12(sp)
  80ce9c:	dc400217 	ldw	r17,8(sp)
  80cea0:	dc000117 	ldw	r16,4(sp)
  80cea4:	dec00b04 	addi	sp,sp,44
  80cea8:	f800283a 	ret
  80ceac:	00803fc4 	movi	r2,255
  80ceb0:	11c5803a 	cmpltu	r2,r2,r7
  80ceb4:	100490fa 	slli	r2,r2,3
  80ceb8:	003f9e06 	br	80cd34 <__alt_mem_onchip_mem+0xff78cd34>
  80cebc:	00803fc4 	movi	r2,255
  80cec0:	1445803a 	cmpltu	r2,r2,r17
  80cec4:	100490fa 	slli	r2,r2,3
  80cec8:	003fb206 	br	80cd94 <__alt_mem_onchip_mem+0xff78cd94>
  80cecc:	00804034 	movhi	r2,256
  80ced0:	10bfffc4 	addi	r2,r2,-1
  80ced4:	11808836 	bltu	r2,r6,80d0f8 <__udivdi3+0x51c>
  80ced8:	00800404 	movi	r2,16
  80cedc:	003f5606 	br	80cc38 <__alt_mem_onchip_mem+0xff78cc38>
  80cee0:	30aed83a 	srl	r23,r6,r2
  80cee4:	3d4e983a 	sll	r7,r7,r21
  80cee8:	80acd83a 	srl	r22,r16,r2
  80ceec:	9884d83a 	srl	r2,r19,r2
  80cef0:	3deeb03a 	or	r23,r7,r23
  80cef4:	b824d43a 	srli	r18,r23,16
  80cef8:	8560983a 	sll	r16,r16,r21
  80cefc:	b009883a 	mov	r4,r22
  80cf00:	900b883a 	mov	r5,r18
  80cf04:	3568983a 	sll	r20,r6,r21
  80cf08:	1420b03a 	or	r16,r2,r16
  80cf0c:	080d7e80 	call	80d7e8 <__umodsi3>
  80cf10:	b009883a 	mov	r4,r22
  80cf14:	900b883a 	mov	r5,r18
  80cf18:	1023883a 	mov	r17,r2
  80cf1c:	080d7840 	call	80d784 <__udivsi3>
  80cf20:	8808943a 	slli	r4,r17,16
  80cf24:	bf3fffcc 	andi	fp,r23,65535
  80cf28:	8006d43a 	srli	r3,r16,16
  80cf2c:	e0a3383a 	mul	r17,fp,r2
  80cf30:	100d883a 	mov	r6,r2
  80cf34:	1906b03a 	or	r3,r3,r4
  80cf38:	1c40042e 	bgeu	r3,r17,80cf4c <__udivdi3+0x370>
  80cf3c:	1dc7883a 	add	r3,r3,r23
  80cf40:	10bfffc4 	addi	r2,r2,-1
  80cf44:	1dc0752e 	bgeu	r3,r23,80d11c <__udivdi3+0x540>
  80cf48:	100d883a 	mov	r6,r2
  80cf4c:	1c63c83a 	sub	r17,r3,r17
  80cf50:	900b883a 	mov	r5,r18
  80cf54:	8809883a 	mov	r4,r17
  80cf58:	d9800015 	stw	r6,0(sp)
  80cf5c:	080d7e80 	call	80d7e8 <__umodsi3>
  80cf60:	102d883a 	mov	r22,r2
  80cf64:	8809883a 	mov	r4,r17
  80cf68:	900b883a 	mov	r5,r18
  80cf6c:	080d7840 	call	80d784 <__udivsi3>
  80cf70:	b02c943a 	slli	r22,r22,16
  80cf74:	e089383a 	mul	r4,fp,r2
  80cf78:	843fffcc 	andi	r16,r16,65535
  80cf7c:	85a0b03a 	or	r16,r16,r22
  80cf80:	d9800017 	ldw	r6,0(sp)
  80cf84:	8100042e 	bgeu	r16,r4,80cf98 <__udivdi3+0x3bc>
  80cf88:	85e1883a 	add	r16,r16,r23
  80cf8c:	10ffffc4 	addi	r3,r2,-1
  80cf90:	85c05e2e 	bgeu	r16,r23,80d10c <__udivdi3+0x530>
  80cf94:	1805883a 	mov	r2,r3
  80cf98:	300c943a 	slli	r6,r6,16
  80cf9c:	a17fffcc 	andi	r5,r20,65535
  80cfa0:	a028d43a 	srli	r20,r20,16
  80cfa4:	3084b03a 	or	r2,r6,r2
  80cfa8:	10ffffcc 	andi	r3,r2,65535
  80cfac:	100cd43a 	srli	r6,r2,16
  80cfb0:	194f383a 	mul	r7,r3,r5
  80cfb4:	1d07383a 	mul	r3,r3,r20
  80cfb8:	314b383a 	mul	r5,r6,r5
  80cfbc:	3810d43a 	srli	r8,r7,16
  80cfc0:	8121c83a 	sub	r16,r16,r4
  80cfc4:	1947883a 	add	r3,r3,r5
  80cfc8:	40c7883a 	add	r3,r8,r3
  80cfcc:	350d383a 	mul	r6,r6,r20
  80cfd0:	1940022e 	bgeu	r3,r5,80cfdc <__udivdi3+0x400>
  80cfd4:	01000074 	movhi	r4,1
  80cfd8:	310d883a 	add	r6,r6,r4
  80cfdc:	1828d43a 	srli	r20,r3,16
  80cfe0:	a18d883a 	add	r6,r20,r6
  80cfe4:	81803e36 	bltu	r16,r6,80d0e0 <__udivdi3+0x504>
  80cfe8:	81803826 	beq	r16,r6,80d0cc <__udivdi3+0x4f0>
  80cfec:	0007883a 	mov	r3,zero
  80cff0:	003fa206 	br	80ce7c <__alt_mem_onchip_mem+0xff78ce7c>
  80cff4:	88e2983a 	sll	r17,r17,r3
  80cff8:	80a8d83a 	srl	r20,r16,r2
  80cffc:	80e0983a 	sll	r16,r16,r3
  80d000:	882ad43a 	srli	r21,r17,16
  80d004:	9884d83a 	srl	r2,r19,r2
  80d008:	a009883a 	mov	r4,r20
  80d00c:	a80b883a 	mov	r5,r21
  80d010:	142eb03a 	or	r23,r2,r16
  80d014:	98e4983a 	sll	r18,r19,r3
  80d018:	080d7e80 	call	80d7e8 <__umodsi3>
  80d01c:	a009883a 	mov	r4,r20
  80d020:	a80b883a 	mov	r5,r21
  80d024:	1021883a 	mov	r16,r2
  80d028:	080d7840 	call	80d784 <__udivsi3>
  80d02c:	1039883a 	mov	fp,r2
  80d030:	8d3fffcc 	andi	r20,r17,65535
  80d034:	8020943a 	slli	r16,r16,16
  80d038:	b804d43a 	srli	r2,r23,16
  80d03c:	a72d383a 	mul	r22,r20,fp
  80d040:	1404b03a 	or	r2,r2,r16
  80d044:	1580062e 	bgeu	r2,r22,80d060 <__udivdi3+0x484>
  80d048:	1445883a 	add	r2,r2,r17
  80d04c:	e0ffffc4 	addi	r3,fp,-1
  80d050:	14403836 	bltu	r2,r17,80d134 <__udivdi3+0x558>
  80d054:	1580372e 	bgeu	r2,r22,80d134 <__udivdi3+0x558>
  80d058:	e73fff84 	addi	fp,fp,-2
  80d05c:	1445883a 	add	r2,r2,r17
  80d060:	15adc83a 	sub	r22,r2,r22
  80d064:	a80b883a 	mov	r5,r21
  80d068:	b009883a 	mov	r4,r22
  80d06c:	080d7e80 	call	80d7e8 <__umodsi3>
  80d070:	1027883a 	mov	r19,r2
  80d074:	b009883a 	mov	r4,r22
  80d078:	a80b883a 	mov	r5,r21
  80d07c:	080d7840 	call	80d784 <__udivsi3>
  80d080:	9826943a 	slli	r19,r19,16
  80d084:	a0a1383a 	mul	r16,r20,r2
  80d088:	b93fffcc 	andi	r4,r23,65535
  80d08c:	24c8b03a 	or	r4,r4,r19
  80d090:	2400062e 	bgeu	r4,r16,80d0ac <__udivdi3+0x4d0>
  80d094:	2449883a 	add	r4,r4,r17
  80d098:	10ffffc4 	addi	r3,r2,-1
  80d09c:	24402336 	bltu	r4,r17,80d12c <__udivdi3+0x550>
  80d0a0:	2400222e 	bgeu	r4,r16,80d12c <__udivdi3+0x550>
  80d0a4:	10bfff84 	addi	r2,r2,-2
  80d0a8:	2449883a 	add	r4,r4,r17
  80d0ac:	e038943a 	slli	fp,fp,16
  80d0b0:	2421c83a 	sub	r16,r4,r16
  80d0b4:	e086b03a 	or	r3,fp,r2
  80d0b8:	003f4306 	br	80cdc8 <__alt_mem_onchip_mem+0xff78cdc8>
  80d0bc:	2005883a 	mov	r2,r4
  80d0c0:	003f6906 	br	80ce68 <__alt_mem_onchip_mem+0xff78ce68>
  80d0c4:	1805883a 	mov	r2,r3
  80d0c8:	003f0f06 	br	80cd08 <__alt_mem_onchip_mem+0xff78cd08>
  80d0cc:	1806943a 	slli	r3,r3,16
  80d0d0:	9d66983a 	sll	r19,r19,r21
  80d0d4:	39ffffcc 	andi	r7,r7,65535
  80d0d8:	19c7883a 	add	r3,r3,r7
  80d0dc:	98ffc32e 	bgeu	r19,r3,80cfec <__alt_mem_onchip_mem+0xff78cfec>
  80d0e0:	10bfffc4 	addi	r2,r2,-1
  80d0e4:	003fc106 	br	80cfec <__alt_mem_onchip_mem+0xff78cfec>
  80d0e8:	00800604 	movi	r2,24
  80d0ec:	003f1106 	br	80cd34 <__alt_mem_onchip_mem+0xff78cd34>
  80d0f0:	00800604 	movi	r2,24
  80d0f4:	003f2706 	br	80cd94 <__alt_mem_onchip_mem+0xff78cd94>
  80d0f8:	00800604 	movi	r2,24
  80d0fc:	003ece06 	br	80cc38 <__alt_mem_onchip_mem+0xff78cc38>
  80d100:	0007883a 	mov	r3,zero
  80d104:	00800044 	movi	r2,1
  80d108:	003f5c06 	br	80ce7c <__alt_mem_onchip_mem+0xff78ce7c>
  80d10c:	813fa12e 	bgeu	r16,r4,80cf94 <__alt_mem_onchip_mem+0xff78cf94>
  80d110:	10bfff84 	addi	r2,r2,-2
  80d114:	85e1883a 	add	r16,r16,r23
  80d118:	003f9f06 	br	80cf98 <__alt_mem_onchip_mem+0xff78cf98>
  80d11c:	1c7f8a2e 	bgeu	r3,r17,80cf48 <__alt_mem_onchip_mem+0xff78cf48>
  80d120:	31bfff84 	addi	r6,r6,-2
  80d124:	1dc7883a 	add	r3,r3,r23
  80d128:	003f8806 	br	80cf4c <__alt_mem_onchip_mem+0xff78cf4c>
  80d12c:	1805883a 	mov	r2,r3
  80d130:	003fde06 	br	80d0ac <__alt_mem_onchip_mem+0xff78d0ac>
  80d134:	1839883a 	mov	fp,r3
  80d138:	003fc906 	br	80d060 <__alt_mem_onchip_mem+0xff78d060>
  80d13c:	b5bfff84 	addi	r22,r22,-2
  80d140:	2449883a 	add	r4,r4,r17
  80d144:	003f3406 	br	80ce18 <__alt_mem_onchip_mem+0xff78ce18>
  80d148:	b5bfff84 	addi	r22,r22,-2
  80d14c:	1445883a 	add	r2,r2,r17
  80d150:	003edb06 	br	80ccc0 <__alt_mem_onchip_mem+0xff78ccc0>

0080d154 <__umoddi3>:
  80d154:	defff404 	addi	sp,sp,-48
  80d158:	df000a15 	stw	fp,40(sp)
  80d15c:	dc400315 	stw	r17,12(sp)
  80d160:	dc000215 	stw	r16,8(sp)
  80d164:	dfc00b15 	stw	ra,44(sp)
  80d168:	ddc00915 	stw	r23,36(sp)
  80d16c:	dd800815 	stw	r22,32(sp)
  80d170:	dd400715 	stw	r21,28(sp)
  80d174:	dd000615 	stw	r20,24(sp)
  80d178:	dcc00515 	stw	r19,20(sp)
  80d17c:	dc800415 	stw	r18,16(sp)
  80d180:	2021883a 	mov	r16,r4
  80d184:	2823883a 	mov	r17,r5
  80d188:	2839883a 	mov	fp,r5
  80d18c:	38003c1e 	bne	r7,zero,80d280 <__umoddi3+0x12c>
  80d190:	3027883a 	mov	r19,r6
  80d194:	2029883a 	mov	r20,r4
  80d198:	2980512e 	bgeu	r5,r6,80d2e0 <__umoddi3+0x18c>
  80d19c:	00bfffd4 	movui	r2,65535
  80d1a0:	11809a36 	bltu	r2,r6,80d40c <__umoddi3+0x2b8>
  80d1a4:	01003fc4 	movi	r4,255
  80d1a8:	2189803a 	cmpltu	r4,r4,r6
  80d1ac:	200890fa 	slli	r4,r4,3
  80d1b0:	3104d83a 	srl	r2,r6,r4
  80d1b4:	00c02074 	movhi	r3,129
  80d1b8:	18d0c304 	addi	r3,r3,17164
  80d1bc:	1885883a 	add	r2,r3,r2
  80d1c0:	10c00003 	ldbu	r3,0(r2)
  80d1c4:	00800804 	movi	r2,32
  80d1c8:	1909883a 	add	r4,r3,r4
  80d1cc:	1125c83a 	sub	r18,r2,r4
  80d1d0:	90000526 	beq	r18,zero,80d1e8 <__umoddi3+0x94>
  80d1d4:	8ca2983a 	sll	r17,r17,r18
  80d1d8:	8108d83a 	srl	r4,r16,r4
  80d1dc:	34a6983a 	sll	r19,r6,r18
  80d1e0:	84a8983a 	sll	r20,r16,r18
  80d1e4:	2478b03a 	or	fp,r4,r17
  80d1e8:	982ed43a 	srli	r23,r19,16
  80d1ec:	e009883a 	mov	r4,fp
  80d1f0:	9dbfffcc 	andi	r22,r19,65535
  80d1f4:	b80b883a 	mov	r5,r23
  80d1f8:	080d7e80 	call	80d7e8 <__umodsi3>
  80d1fc:	e009883a 	mov	r4,fp
  80d200:	b80b883a 	mov	r5,r23
  80d204:	102b883a 	mov	r21,r2
  80d208:	080d7840 	call	80d784 <__udivsi3>
  80d20c:	a806943a 	slli	r3,r21,16
  80d210:	a008d43a 	srli	r4,r20,16
  80d214:	b085383a 	mul	r2,r22,r2
  80d218:	20c8b03a 	or	r4,r4,r3
  80d21c:	2080032e 	bgeu	r4,r2,80d22c <__umoddi3+0xd8>
  80d220:	24c9883a 	add	r4,r4,r19
  80d224:	24c00136 	bltu	r4,r19,80d22c <__umoddi3+0xd8>
  80d228:	20811036 	bltu	r4,r2,80d66c <__umoddi3+0x518>
  80d22c:	20abc83a 	sub	r21,r4,r2
  80d230:	b80b883a 	mov	r5,r23
  80d234:	a809883a 	mov	r4,r21
  80d238:	080d7e80 	call	80d7e8 <__umodsi3>
  80d23c:	1023883a 	mov	r17,r2
  80d240:	b80b883a 	mov	r5,r23
  80d244:	a809883a 	mov	r4,r21
  80d248:	080d7840 	call	80d784 <__udivsi3>
  80d24c:	8822943a 	slli	r17,r17,16
  80d250:	b085383a 	mul	r2,r22,r2
  80d254:	a0ffffcc 	andi	r3,r20,65535
  80d258:	1c46b03a 	or	r3,r3,r17
  80d25c:	1880042e 	bgeu	r3,r2,80d270 <__umoddi3+0x11c>
  80d260:	1cc7883a 	add	r3,r3,r19
  80d264:	1cc00236 	bltu	r3,r19,80d270 <__umoddi3+0x11c>
  80d268:	1880012e 	bgeu	r3,r2,80d270 <__umoddi3+0x11c>
  80d26c:	1cc7883a 	add	r3,r3,r19
  80d270:	1885c83a 	sub	r2,r3,r2
  80d274:	1484d83a 	srl	r2,r2,r18
  80d278:	0007883a 	mov	r3,zero
  80d27c:	00004f06 	br	80d3bc <__umoddi3+0x268>
  80d280:	29c04c36 	bltu	r5,r7,80d3b4 <__umoddi3+0x260>
  80d284:	00bfffd4 	movui	r2,65535
  80d288:	11c0582e 	bgeu	r2,r7,80d3ec <__umoddi3+0x298>
  80d28c:	00804034 	movhi	r2,256
  80d290:	10bfffc4 	addi	r2,r2,-1
  80d294:	11c0e736 	bltu	r2,r7,80d634 <__umoddi3+0x4e0>
  80d298:	01000404 	movi	r4,16
  80d29c:	3904d83a 	srl	r2,r7,r4
  80d2a0:	00c02074 	movhi	r3,129
  80d2a4:	18d0c304 	addi	r3,r3,17164
  80d2a8:	1885883a 	add	r2,r3,r2
  80d2ac:	14c00003 	ldbu	r19,0(r2)
  80d2b0:	00c00804 	movi	r3,32
  80d2b4:	9927883a 	add	r19,r19,r4
  80d2b8:	1ce9c83a 	sub	r20,r3,r19
  80d2bc:	a000581e 	bne	r20,zero,80d420 <__umoddi3+0x2cc>
  80d2c0:	3c400136 	bltu	r7,r17,80d2c8 <__umoddi3+0x174>
  80d2c4:	8180eb36 	bltu	r16,r6,80d674 <__umoddi3+0x520>
  80d2c8:	8185c83a 	sub	r2,r16,r6
  80d2cc:	89e3c83a 	sub	r17,r17,r7
  80d2d0:	8089803a 	cmpltu	r4,r16,r2
  80d2d4:	8939c83a 	sub	fp,r17,r4
  80d2d8:	e007883a 	mov	r3,fp
  80d2dc:	00003706 	br	80d3bc <__umoddi3+0x268>
  80d2e0:	3000041e 	bne	r6,zero,80d2f4 <__umoddi3+0x1a0>
  80d2e4:	000b883a 	mov	r5,zero
  80d2e8:	01000044 	movi	r4,1
  80d2ec:	080d7840 	call	80d784 <__udivsi3>
  80d2f0:	1027883a 	mov	r19,r2
  80d2f4:	00bfffd4 	movui	r2,65535
  80d2f8:	14c0402e 	bgeu	r2,r19,80d3fc <__umoddi3+0x2a8>
  80d2fc:	00804034 	movhi	r2,256
  80d300:	10bfffc4 	addi	r2,r2,-1
  80d304:	14c0cd36 	bltu	r2,r19,80d63c <__umoddi3+0x4e8>
  80d308:	00800404 	movi	r2,16
  80d30c:	9886d83a 	srl	r3,r19,r2
  80d310:	01002074 	movhi	r4,129
  80d314:	2110c304 	addi	r4,r4,17164
  80d318:	20c7883a 	add	r3,r4,r3
  80d31c:	18c00003 	ldbu	r3,0(r3)
  80d320:	1887883a 	add	r3,r3,r2
  80d324:	00800804 	movi	r2,32
  80d328:	10e5c83a 	sub	r18,r2,r3
  80d32c:	9000901e 	bne	r18,zero,80d570 <__umoddi3+0x41c>
  80d330:	982cd43a 	srli	r22,r19,16
  80d334:	8ce3c83a 	sub	r17,r17,r19
  80d338:	9d7fffcc 	andi	r21,r19,65535
  80d33c:	b00b883a 	mov	r5,r22
  80d340:	8809883a 	mov	r4,r17
  80d344:	080d7e80 	call	80d7e8 <__umodsi3>
  80d348:	8809883a 	mov	r4,r17
  80d34c:	b00b883a 	mov	r5,r22
  80d350:	1021883a 	mov	r16,r2
  80d354:	080d7840 	call	80d784 <__udivsi3>
  80d358:	8006943a 	slli	r3,r16,16
  80d35c:	a008d43a 	srli	r4,r20,16
  80d360:	1545383a 	mul	r2,r2,r21
  80d364:	20c8b03a 	or	r4,r4,r3
  80d368:	2080042e 	bgeu	r4,r2,80d37c <__umoddi3+0x228>
  80d36c:	24c9883a 	add	r4,r4,r19
  80d370:	24c00236 	bltu	r4,r19,80d37c <__umoddi3+0x228>
  80d374:	2080012e 	bgeu	r4,r2,80d37c <__umoddi3+0x228>
  80d378:	24c9883a 	add	r4,r4,r19
  80d37c:	20a1c83a 	sub	r16,r4,r2
  80d380:	b00b883a 	mov	r5,r22
  80d384:	8009883a 	mov	r4,r16
  80d388:	080d7e80 	call	80d7e8 <__umodsi3>
  80d38c:	1023883a 	mov	r17,r2
  80d390:	b00b883a 	mov	r5,r22
  80d394:	8009883a 	mov	r4,r16
  80d398:	080d7840 	call	80d784 <__udivsi3>
  80d39c:	8822943a 	slli	r17,r17,16
  80d3a0:	1545383a 	mul	r2,r2,r21
  80d3a4:	a53fffcc 	andi	r20,r20,65535
  80d3a8:	a446b03a 	or	r3,r20,r17
  80d3ac:	18bfb02e 	bgeu	r3,r2,80d270 <__alt_mem_onchip_mem+0xff78d270>
  80d3b0:	003fab06 	br	80d260 <__alt_mem_onchip_mem+0xff78d260>
  80d3b4:	2005883a 	mov	r2,r4
  80d3b8:	2807883a 	mov	r3,r5
  80d3bc:	dfc00b17 	ldw	ra,44(sp)
  80d3c0:	df000a17 	ldw	fp,40(sp)
  80d3c4:	ddc00917 	ldw	r23,36(sp)
  80d3c8:	dd800817 	ldw	r22,32(sp)
  80d3cc:	dd400717 	ldw	r21,28(sp)
  80d3d0:	dd000617 	ldw	r20,24(sp)
  80d3d4:	dcc00517 	ldw	r19,20(sp)
  80d3d8:	dc800417 	ldw	r18,16(sp)
  80d3dc:	dc400317 	ldw	r17,12(sp)
  80d3e0:	dc000217 	ldw	r16,8(sp)
  80d3e4:	dec00c04 	addi	sp,sp,48
  80d3e8:	f800283a 	ret
  80d3ec:	04c03fc4 	movi	r19,255
  80d3f0:	99c9803a 	cmpltu	r4,r19,r7
  80d3f4:	200890fa 	slli	r4,r4,3
  80d3f8:	003fa806 	br	80d29c <__alt_mem_onchip_mem+0xff78d29c>
  80d3fc:	00803fc4 	movi	r2,255
  80d400:	14c5803a 	cmpltu	r2,r2,r19
  80d404:	100490fa 	slli	r2,r2,3
  80d408:	003fc006 	br	80d30c <__alt_mem_onchip_mem+0xff78d30c>
  80d40c:	00804034 	movhi	r2,256
  80d410:	10bfffc4 	addi	r2,r2,-1
  80d414:	11808b36 	bltu	r2,r6,80d644 <__umoddi3+0x4f0>
  80d418:	01000404 	movi	r4,16
  80d41c:	003f6406 	br	80d1b0 <__alt_mem_onchip_mem+0xff78d1b0>
  80d420:	34c4d83a 	srl	r2,r6,r19
  80d424:	3d0e983a 	sll	r7,r7,r20
  80d428:	8cf8d83a 	srl	fp,r17,r19
  80d42c:	8d10983a 	sll	r8,r17,r20
  80d430:	38aab03a 	or	r21,r7,r2
  80d434:	a82cd43a 	srli	r22,r21,16
  80d438:	84e2d83a 	srl	r17,r16,r19
  80d43c:	e009883a 	mov	r4,fp
  80d440:	b00b883a 	mov	r5,r22
  80d444:	8a22b03a 	or	r17,r17,r8
  80d448:	3524983a 	sll	r18,r6,r20
  80d44c:	080d7e80 	call	80d7e8 <__umodsi3>
  80d450:	e009883a 	mov	r4,fp
  80d454:	b00b883a 	mov	r5,r22
  80d458:	102f883a 	mov	r23,r2
  80d45c:	080d7840 	call	80d784 <__udivsi3>
  80d460:	100d883a 	mov	r6,r2
  80d464:	b808943a 	slli	r4,r23,16
  80d468:	aa3fffcc 	andi	r8,r21,65535
  80d46c:	8804d43a 	srli	r2,r17,16
  80d470:	41af383a 	mul	r23,r8,r6
  80d474:	8520983a 	sll	r16,r16,r20
  80d478:	1104b03a 	or	r2,r2,r4
  80d47c:	15c0042e 	bgeu	r2,r23,80d490 <__umoddi3+0x33c>
  80d480:	1545883a 	add	r2,r2,r21
  80d484:	30ffffc4 	addi	r3,r6,-1
  80d488:	1540742e 	bgeu	r2,r21,80d65c <__umoddi3+0x508>
  80d48c:	180d883a 	mov	r6,r3
  80d490:	15efc83a 	sub	r23,r2,r23
  80d494:	b00b883a 	mov	r5,r22
  80d498:	b809883a 	mov	r4,r23
  80d49c:	d9800115 	stw	r6,4(sp)
  80d4a0:	da000015 	stw	r8,0(sp)
  80d4a4:	080d7e80 	call	80d7e8 <__umodsi3>
  80d4a8:	b00b883a 	mov	r5,r22
  80d4ac:	b809883a 	mov	r4,r23
  80d4b0:	1039883a 	mov	fp,r2
  80d4b4:	080d7840 	call	80d784 <__udivsi3>
  80d4b8:	da000017 	ldw	r8,0(sp)
  80d4bc:	e038943a 	slli	fp,fp,16
  80d4c0:	100b883a 	mov	r5,r2
  80d4c4:	4089383a 	mul	r4,r8,r2
  80d4c8:	8a3fffcc 	andi	r8,r17,65535
  80d4cc:	4710b03a 	or	r8,r8,fp
  80d4d0:	d9800117 	ldw	r6,4(sp)
  80d4d4:	4100042e 	bgeu	r8,r4,80d4e8 <__umoddi3+0x394>
  80d4d8:	4551883a 	add	r8,r8,r21
  80d4dc:	10bfffc4 	addi	r2,r2,-1
  80d4e0:	45405a2e 	bgeu	r8,r21,80d64c <__umoddi3+0x4f8>
  80d4e4:	100b883a 	mov	r5,r2
  80d4e8:	300c943a 	slli	r6,r6,16
  80d4ec:	91ffffcc 	andi	r7,r18,65535
  80d4f0:	9004d43a 	srli	r2,r18,16
  80d4f4:	314cb03a 	or	r6,r6,r5
  80d4f8:	317fffcc 	andi	r5,r6,65535
  80d4fc:	300cd43a 	srli	r6,r6,16
  80d500:	29d3383a 	mul	r9,r5,r7
  80d504:	288b383a 	mul	r5,r5,r2
  80d508:	31cf383a 	mul	r7,r6,r7
  80d50c:	4806d43a 	srli	r3,r9,16
  80d510:	4111c83a 	sub	r8,r8,r4
  80d514:	29cb883a 	add	r5,r5,r7
  80d518:	194b883a 	add	r5,r3,r5
  80d51c:	3085383a 	mul	r2,r6,r2
  80d520:	29c0022e 	bgeu	r5,r7,80d52c <__umoddi3+0x3d8>
  80d524:	00c00074 	movhi	r3,1
  80d528:	10c5883a 	add	r2,r2,r3
  80d52c:	2808d43a 	srli	r4,r5,16
  80d530:	280a943a 	slli	r5,r5,16
  80d534:	4a7fffcc 	andi	r9,r9,65535
  80d538:	2085883a 	add	r2,r4,r2
  80d53c:	2a4b883a 	add	r5,r5,r9
  80d540:	40803636 	bltu	r8,r2,80d61c <__umoddi3+0x4c8>
  80d544:	40804d26 	beq	r8,r2,80d67c <__umoddi3+0x528>
  80d548:	4089c83a 	sub	r4,r8,r2
  80d54c:	280f883a 	mov	r7,r5
  80d550:	81cfc83a 	sub	r7,r16,r7
  80d554:	81c7803a 	cmpltu	r3,r16,r7
  80d558:	20c7c83a 	sub	r3,r4,r3
  80d55c:	1cc4983a 	sll	r2,r3,r19
  80d560:	3d0ed83a 	srl	r7,r7,r20
  80d564:	1d06d83a 	srl	r3,r3,r20
  80d568:	11c4b03a 	or	r2,r2,r7
  80d56c:	003f9306 	br	80d3bc <__alt_mem_onchip_mem+0xff78d3bc>
  80d570:	9ca6983a 	sll	r19,r19,r18
  80d574:	88e8d83a 	srl	r20,r17,r3
  80d578:	80c4d83a 	srl	r2,r16,r3
  80d57c:	982cd43a 	srli	r22,r19,16
  80d580:	8ca2983a 	sll	r17,r17,r18
  80d584:	a009883a 	mov	r4,r20
  80d588:	b00b883a 	mov	r5,r22
  80d58c:	1478b03a 	or	fp,r2,r17
  80d590:	080d7e80 	call	80d7e8 <__umodsi3>
  80d594:	a009883a 	mov	r4,r20
  80d598:	b00b883a 	mov	r5,r22
  80d59c:	1023883a 	mov	r17,r2
  80d5a0:	080d7840 	call	80d784 <__udivsi3>
  80d5a4:	9d7fffcc 	andi	r21,r19,65535
  80d5a8:	880a943a 	slli	r5,r17,16
  80d5ac:	e008d43a 	srli	r4,fp,16
  80d5b0:	a885383a 	mul	r2,r21,r2
  80d5b4:	84a8983a 	sll	r20,r16,r18
  80d5b8:	2148b03a 	or	r4,r4,r5
  80d5bc:	2080042e 	bgeu	r4,r2,80d5d0 <__umoddi3+0x47c>
  80d5c0:	24c9883a 	add	r4,r4,r19
  80d5c4:	24c00236 	bltu	r4,r19,80d5d0 <__umoddi3+0x47c>
  80d5c8:	2080012e 	bgeu	r4,r2,80d5d0 <__umoddi3+0x47c>
  80d5cc:	24c9883a 	add	r4,r4,r19
  80d5d0:	20a3c83a 	sub	r17,r4,r2
  80d5d4:	b00b883a 	mov	r5,r22
  80d5d8:	8809883a 	mov	r4,r17
  80d5dc:	080d7e80 	call	80d7e8 <__umodsi3>
  80d5e0:	102f883a 	mov	r23,r2
  80d5e4:	8809883a 	mov	r4,r17
  80d5e8:	b00b883a 	mov	r5,r22
  80d5ec:	080d7840 	call	80d784 <__udivsi3>
  80d5f0:	b82e943a 	slli	r23,r23,16
  80d5f4:	a885383a 	mul	r2,r21,r2
  80d5f8:	e13fffcc 	andi	r4,fp,65535
  80d5fc:	25c8b03a 	or	r4,r4,r23
  80d600:	2080042e 	bgeu	r4,r2,80d614 <__umoddi3+0x4c0>
  80d604:	24c9883a 	add	r4,r4,r19
  80d608:	24c00236 	bltu	r4,r19,80d614 <__umoddi3+0x4c0>
  80d60c:	2080012e 	bgeu	r4,r2,80d614 <__umoddi3+0x4c0>
  80d610:	24c9883a 	add	r4,r4,r19
  80d614:	20a3c83a 	sub	r17,r4,r2
  80d618:	003f4806 	br	80d33c <__alt_mem_onchip_mem+0xff78d33c>
  80d61c:	2c8fc83a 	sub	r7,r5,r18
  80d620:	1545c83a 	sub	r2,r2,r21
  80d624:	29cb803a 	cmpltu	r5,r5,r7
  80d628:	1145c83a 	sub	r2,r2,r5
  80d62c:	4089c83a 	sub	r4,r8,r2
  80d630:	003fc706 	br	80d550 <__alt_mem_onchip_mem+0xff78d550>
  80d634:	01000604 	movi	r4,24
  80d638:	003f1806 	br	80d29c <__alt_mem_onchip_mem+0xff78d29c>
  80d63c:	00800604 	movi	r2,24
  80d640:	003f3206 	br	80d30c <__alt_mem_onchip_mem+0xff78d30c>
  80d644:	01000604 	movi	r4,24
  80d648:	003ed906 	br	80d1b0 <__alt_mem_onchip_mem+0xff78d1b0>
  80d64c:	413fa52e 	bgeu	r8,r4,80d4e4 <__alt_mem_onchip_mem+0xff78d4e4>
  80d650:	297fff84 	addi	r5,r5,-2
  80d654:	4551883a 	add	r8,r8,r21
  80d658:	003fa306 	br	80d4e8 <__alt_mem_onchip_mem+0xff78d4e8>
  80d65c:	15ff8b2e 	bgeu	r2,r23,80d48c <__alt_mem_onchip_mem+0xff78d48c>
  80d660:	31bfff84 	addi	r6,r6,-2
  80d664:	1545883a 	add	r2,r2,r21
  80d668:	003f8906 	br	80d490 <__alt_mem_onchip_mem+0xff78d490>
  80d66c:	24c9883a 	add	r4,r4,r19
  80d670:	003eee06 	br	80d22c <__alt_mem_onchip_mem+0xff78d22c>
  80d674:	8005883a 	mov	r2,r16
  80d678:	003f1706 	br	80d2d8 <__alt_mem_onchip_mem+0xff78d2d8>
  80d67c:	817fe736 	bltu	r16,r5,80d61c <__alt_mem_onchip_mem+0xff78d61c>
  80d680:	280f883a 	mov	r7,r5
  80d684:	0009883a 	mov	r4,zero
  80d688:	003fb106 	br	80d550 <__alt_mem_onchip_mem+0xff78d550>

0080d68c <__divsi3>:
  80d68c:	20001b16 	blt	r4,zero,80d6fc <__divsi3+0x70>
  80d690:	000f883a 	mov	r7,zero
  80d694:	28001616 	blt	r5,zero,80d6f0 <__divsi3+0x64>
  80d698:	200d883a 	mov	r6,r4
  80d69c:	29001a2e 	bgeu	r5,r4,80d708 <__divsi3+0x7c>
  80d6a0:	00800804 	movi	r2,32
  80d6a4:	00c00044 	movi	r3,1
  80d6a8:	00000106 	br	80d6b0 <__divsi3+0x24>
  80d6ac:	10000d26 	beq	r2,zero,80d6e4 <__divsi3+0x58>
  80d6b0:	294b883a 	add	r5,r5,r5
  80d6b4:	10bfffc4 	addi	r2,r2,-1
  80d6b8:	18c7883a 	add	r3,r3,r3
  80d6bc:	293ffb36 	bltu	r5,r4,80d6ac <__alt_mem_onchip_mem+0xff78d6ac>
  80d6c0:	0005883a 	mov	r2,zero
  80d6c4:	18000726 	beq	r3,zero,80d6e4 <__divsi3+0x58>
  80d6c8:	0005883a 	mov	r2,zero
  80d6cc:	31400236 	bltu	r6,r5,80d6d8 <__divsi3+0x4c>
  80d6d0:	314dc83a 	sub	r6,r6,r5
  80d6d4:	10c4b03a 	or	r2,r2,r3
  80d6d8:	1806d07a 	srli	r3,r3,1
  80d6dc:	280ad07a 	srli	r5,r5,1
  80d6e0:	183ffa1e 	bne	r3,zero,80d6cc <__alt_mem_onchip_mem+0xff78d6cc>
  80d6e4:	38000126 	beq	r7,zero,80d6ec <__divsi3+0x60>
  80d6e8:	0085c83a 	sub	r2,zero,r2
  80d6ec:	f800283a 	ret
  80d6f0:	014bc83a 	sub	r5,zero,r5
  80d6f4:	39c0005c 	xori	r7,r7,1
  80d6f8:	003fe706 	br	80d698 <__alt_mem_onchip_mem+0xff78d698>
  80d6fc:	0109c83a 	sub	r4,zero,r4
  80d700:	01c00044 	movi	r7,1
  80d704:	003fe306 	br	80d694 <__alt_mem_onchip_mem+0xff78d694>
  80d708:	00c00044 	movi	r3,1
  80d70c:	003fee06 	br	80d6c8 <__alt_mem_onchip_mem+0xff78d6c8>

0080d710 <__modsi3>:
  80d710:	20001716 	blt	r4,zero,80d770 <__modsi3+0x60>
  80d714:	000f883a 	mov	r7,zero
  80d718:	2005883a 	mov	r2,r4
  80d71c:	28001216 	blt	r5,zero,80d768 <__modsi3+0x58>
  80d720:	2900162e 	bgeu	r5,r4,80d77c <__modsi3+0x6c>
  80d724:	01800804 	movi	r6,32
  80d728:	00c00044 	movi	r3,1
  80d72c:	00000106 	br	80d734 <__modsi3+0x24>
  80d730:	30000a26 	beq	r6,zero,80d75c <__modsi3+0x4c>
  80d734:	294b883a 	add	r5,r5,r5
  80d738:	31bfffc4 	addi	r6,r6,-1
  80d73c:	18c7883a 	add	r3,r3,r3
  80d740:	293ffb36 	bltu	r5,r4,80d730 <__alt_mem_onchip_mem+0xff78d730>
  80d744:	18000526 	beq	r3,zero,80d75c <__modsi3+0x4c>
  80d748:	1806d07a 	srli	r3,r3,1
  80d74c:	11400136 	bltu	r2,r5,80d754 <__modsi3+0x44>
  80d750:	1145c83a 	sub	r2,r2,r5
  80d754:	280ad07a 	srli	r5,r5,1
  80d758:	183ffb1e 	bne	r3,zero,80d748 <__alt_mem_onchip_mem+0xff78d748>
  80d75c:	38000126 	beq	r7,zero,80d764 <__modsi3+0x54>
  80d760:	0085c83a 	sub	r2,zero,r2
  80d764:	f800283a 	ret
  80d768:	014bc83a 	sub	r5,zero,r5
  80d76c:	003fec06 	br	80d720 <__alt_mem_onchip_mem+0xff78d720>
  80d770:	0109c83a 	sub	r4,zero,r4
  80d774:	01c00044 	movi	r7,1
  80d778:	003fe706 	br	80d718 <__alt_mem_onchip_mem+0xff78d718>
  80d77c:	00c00044 	movi	r3,1
  80d780:	003ff106 	br	80d748 <__alt_mem_onchip_mem+0xff78d748>

0080d784 <__udivsi3>:
  80d784:	200d883a 	mov	r6,r4
  80d788:	2900152e 	bgeu	r5,r4,80d7e0 <__udivsi3+0x5c>
  80d78c:	28001416 	blt	r5,zero,80d7e0 <__udivsi3+0x5c>
  80d790:	00800804 	movi	r2,32
  80d794:	00c00044 	movi	r3,1
  80d798:	00000206 	br	80d7a4 <__udivsi3+0x20>
  80d79c:	10000e26 	beq	r2,zero,80d7d8 <__udivsi3+0x54>
  80d7a0:	28000516 	blt	r5,zero,80d7b8 <__udivsi3+0x34>
  80d7a4:	294b883a 	add	r5,r5,r5
  80d7a8:	10bfffc4 	addi	r2,r2,-1
  80d7ac:	18c7883a 	add	r3,r3,r3
  80d7b0:	293ffa36 	bltu	r5,r4,80d79c <__alt_mem_onchip_mem+0xff78d79c>
  80d7b4:	18000826 	beq	r3,zero,80d7d8 <__udivsi3+0x54>
  80d7b8:	0005883a 	mov	r2,zero
  80d7bc:	31400236 	bltu	r6,r5,80d7c8 <__udivsi3+0x44>
  80d7c0:	314dc83a 	sub	r6,r6,r5
  80d7c4:	10c4b03a 	or	r2,r2,r3
  80d7c8:	1806d07a 	srli	r3,r3,1
  80d7cc:	280ad07a 	srli	r5,r5,1
  80d7d0:	183ffa1e 	bne	r3,zero,80d7bc <__alt_mem_onchip_mem+0xff78d7bc>
  80d7d4:	f800283a 	ret
  80d7d8:	0005883a 	mov	r2,zero
  80d7dc:	f800283a 	ret
  80d7e0:	00c00044 	movi	r3,1
  80d7e4:	003ff406 	br	80d7b8 <__alt_mem_onchip_mem+0xff78d7b8>

0080d7e8 <__umodsi3>:
  80d7e8:	2005883a 	mov	r2,r4
  80d7ec:	2900122e 	bgeu	r5,r4,80d838 <__umodsi3+0x50>
  80d7f0:	28001116 	blt	r5,zero,80d838 <__umodsi3+0x50>
  80d7f4:	01800804 	movi	r6,32
  80d7f8:	00c00044 	movi	r3,1
  80d7fc:	00000206 	br	80d808 <__umodsi3+0x20>
  80d800:	30000c26 	beq	r6,zero,80d834 <__umodsi3+0x4c>
  80d804:	28000516 	blt	r5,zero,80d81c <__umodsi3+0x34>
  80d808:	294b883a 	add	r5,r5,r5
  80d80c:	31bfffc4 	addi	r6,r6,-1
  80d810:	18c7883a 	add	r3,r3,r3
  80d814:	293ffa36 	bltu	r5,r4,80d800 <__alt_mem_onchip_mem+0xff78d800>
  80d818:	18000626 	beq	r3,zero,80d834 <__umodsi3+0x4c>
  80d81c:	1806d07a 	srli	r3,r3,1
  80d820:	11400136 	bltu	r2,r5,80d828 <__umodsi3+0x40>
  80d824:	1145c83a 	sub	r2,r2,r5
  80d828:	280ad07a 	srli	r5,r5,1
  80d82c:	183ffb1e 	bne	r3,zero,80d81c <__alt_mem_onchip_mem+0xff78d81c>
  80d830:	f800283a 	ret
  80d834:	f800283a 	ret
  80d838:	00c00044 	movi	r3,1
  80d83c:	003ff706 	br	80d81c <__alt_mem_onchip_mem+0xff78d81c>

0080d840 <__adddf3>:
  80d840:	02c00434 	movhi	r11,16
  80d844:	5affffc4 	addi	r11,r11,-1
  80d848:	2806d7fa 	srli	r3,r5,31
  80d84c:	2ad4703a 	and	r10,r5,r11
  80d850:	3ad2703a 	and	r9,r7,r11
  80d854:	3804d53a 	srli	r2,r7,20
  80d858:	3018d77a 	srli	r12,r6,29
  80d85c:	280ad53a 	srli	r5,r5,20
  80d860:	501490fa 	slli	r10,r10,3
  80d864:	2010d77a 	srli	r8,r4,29
  80d868:	481290fa 	slli	r9,r9,3
  80d86c:	380ed7fa 	srli	r7,r7,31
  80d870:	defffb04 	addi	sp,sp,-20
  80d874:	dc800215 	stw	r18,8(sp)
  80d878:	dc400115 	stw	r17,4(sp)
  80d87c:	dc000015 	stw	r16,0(sp)
  80d880:	dfc00415 	stw	ra,16(sp)
  80d884:	dcc00315 	stw	r19,12(sp)
  80d888:	1c803fcc 	andi	r18,r3,255
  80d88c:	2c01ffcc 	andi	r16,r5,2047
  80d890:	5210b03a 	or	r8,r10,r8
  80d894:	202290fa 	slli	r17,r4,3
  80d898:	1081ffcc 	andi	r2,r2,2047
  80d89c:	4b12b03a 	or	r9,r9,r12
  80d8a0:	300c90fa 	slli	r6,r6,3
  80d8a4:	91c07526 	beq	r18,r7,80da7c <__adddf3+0x23c>
  80d8a8:	8087c83a 	sub	r3,r16,r2
  80d8ac:	00c0ab0e 	bge	zero,r3,80db5c <__adddf3+0x31c>
  80d8b0:	10002a1e 	bne	r2,zero,80d95c <__adddf3+0x11c>
  80d8b4:	4984b03a 	or	r2,r9,r6
  80d8b8:	1000961e 	bne	r2,zero,80db14 <__adddf3+0x2d4>
  80d8bc:	888001cc 	andi	r2,r17,7
  80d8c0:	10000726 	beq	r2,zero,80d8e0 <__adddf3+0xa0>
  80d8c4:	888003cc 	andi	r2,r17,15
  80d8c8:	00c00104 	movi	r3,4
  80d8cc:	10c00426 	beq	r2,r3,80d8e0 <__adddf3+0xa0>
  80d8d0:	88c7883a 	add	r3,r17,r3
  80d8d4:	1c63803a 	cmpltu	r17,r3,r17
  80d8d8:	4451883a 	add	r8,r8,r17
  80d8dc:	1823883a 	mov	r17,r3
  80d8e0:	4080202c 	andhi	r2,r8,128
  80d8e4:	10005926 	beq	r2,zero,80da4c <__adddf3+0x20c>
  80d8e8:	84000044 	addi	r16,r16,1
  80d8ec:	0081ffc4 	movi	r2,2047
  80d8f0:	8080ba26 	beq	r16,r2,80dbdc <__adddf3+0x39c>
  80d8f4:	00bfe034 	movhi	r2,65408
  80d8f8:	10bfffc4 	addi	r2,r2,-1
  80d8fc:	4090703a 	and	r8,r8,r2
  80d900:	4004977a 	slli	r2,r8,29
  80d904:	4010927a 	slli	r8,r8,9
  80d908:	8822d0fa 	srli	r17,r17,3
  80d90c:	8401ffcc 	andi	r16,r16,2047
  80d910:	4010d33a 	srli	r8,r8,12
  80d914:	9007883a 	mov	r3,r18
  80d918:	1444b03a 	or	r2,r2,r17
  80d91c:	8401ffcc 	andi	r16,r16,2047
  80d920:	8020953a 	slli	r16,r16,20
  80d924:	18c03fcc 	andi	r3,r3,255
  80d928:	01000434 	movhi	r4,16
  80d92c:	213fffc4 	addi	r4,r4,-1
  80d930:	180697fa 	slli	r3,r3,31
  80d934:	4110703a 	and	r8,r8,r4
  80d938:	4410b03a 	or	r8,r8,r16
  80d93c:	40c6b03a 	or	r3,r8,r3
  80d940:	dfc00417 	ldw	ra,16(sp)
  80d944:	dcc00317 	ldw	r19,12(sp)
  80d948:	dc800217 	ldw	r18,8(sp)
  80d94c:	dc400117 	ldw	r17,4(sp)
  80d950:	dc000017 	ldw	r16,0(sp)
  80d954:	dec00504 	addi	sp,sp,20
  80d958:	f800283a 	ret
  80d95c:	0081ffc4 	movi	r2,2047
  80d960:	80bfd626 	beq	r16,r2,80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80d964:	4a402034 	orhi	r9,r9,128
  80d968:	00800e04 	movi	r2,56
  80d96c:	10c09f16 	blt	r2,r3,80dbec <__adddf3+0x3ac>
  80d970:	008007c4 	movi	r2,31
  80d974:	10c0c216 	blt	r2,r3,80dc80 <__adddf3+0x440>
  80d978:	00800804 	movi	r2,32
  80d97c:	10c5c83a 	sub	r2,r2,r3
  80d980:	488a983a 	sll	r5,r9,r2
  80d984:	30c8d83a 	srl	r4,r6,r3
  80d988:	3084983a 	sll	r2,r6,r2
  80d98c:	48c6d83a 	srl	r3,r9,r3
  80d990:	290cb03a 	or	r6,r5,r4
  80d994:	1004c03a 	cmpne	r2,r2,zero
  80d998:	308cb03a 	or	r6,r6,r2
  80d99c:	898dc83a 	sub	r6,r17,r6
  80d9a0:	89a3803a 	cmpltu	r17,r17,r6
  80d9a4:	40d1c83a 	sub	r8,r8,r3
  80d9a8:	4451c83a 	sub	r8,r8,r17
  80d9ac:	3023883a 	mov	r17,r6
  80d9b0:	4080202c 	andhi	r2,r8,128
  80d9b4:	10002326 	beq	r2,zero,80da44 <__adddf3+0x204>
  80d9b8:	04c02034 	movhi	r19,128
  80d9bc:	9cffffc4 	addi	r19,r19,-1
  80d9c0:	44e6703a 	and	r19,r8,r19
  80d9c4:	98007626 	beq	r19,zero,80dba0 <__adddf3+0x360>
  80d9c8:	9809883a 	mov	r4,r19
  80d9cc:	080fe440 	call	80fe44 <__clzsi2>
  80d9d0:	10fffe04 	addi	r3,r2,-8
  80d9d4:	010007c4 	movi	r4,31
  80d9d8:	20c07716 	blt	r4,r3,80dbb8 <__adddf3+0x378>
  80d9dc:	00800804 	movi	r2,32
  80d9e0:	10c5c83a 	sub	r2,r2,r3
  80d9e4:	8884d83a 	srl	r2,r17,r2
  80d9e8:	98d0983a 	sll	r8,r19,r3
  80d9ec:	88e2983a 	sll	r17,r17,r3
  80d9f0:	1204b03a 	or	r2,r2,r8
  80d9f4:	1c007416 	blt	r3,r16,80dbc8 <__adddf3+0x388>
  80d9f8:	1c21c83a 	sub	r16,r3,r16
  80d9fc:	82000044 	addi	r8,r16,1
  80da00:	00c007c4 	movi	r3,31
  80da04:	1a009116 	blt	r3,r8,80dc4c <__adddf3+0x40c>
  80da08:	00c00804 	movi	r3,32
  80da0c:	1a07c83a 	sub	r3,r3,r8
  80da10:	8a08d83a 	srl	r4,r17,r8
  80da14:	88e2983a 	sll	r17,r17,r3
  80da18:	10c6983a 	sll	r3,r2,r3
  80da1c:	1210d83a 	srl	r8,r2,r8
  80da20:	8804c03a 	cmpne	r2,r17,zero
  80da24:	1906b03a 	or	r3,r3,r4
  80da28:	18a2b03a 	or	r17,r3,r2
  80da2c:	0021883a 	mov	r16,zero
  80da30:	003fa206 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80da34:	1890b03a 	or	r8,r3,r2
  80da38:	40017d26 	beq	r8,zero,80e030 <__adddf3+0x7f0>
  80da3c:	1011883a 	mov	r8,r2
  80da40:	1823883a 	mov	r17,r3
  80da44:	888001cc 	andi	r2,r17,7
  80da48:	103f9e1e 	bne	r2,zero,80d8c4 <__alt_mem_onchip_mem+0xff78d8c4>
  80da4c:	4004977a 	slli	r2,r8,29
  80da50:	8822d0fa 	srli	r17,r17,3
  80da54:	4010d0fa 	srli	r8,r8,3
  80da58:	9007883a 	mov	r3,r18
  80da5c:	1444b03a 	or	r2,r2,r17
  80da60:	0101ffc4 	movi	r4,2047
  80da64:	81002426 	beq	r16,r4,80daf8 <__adddf3+0x2b8>
  80da68:	8120703a 	and	r16,r16,r4
  80da6c:	01000434 	movhi	r4,16
  80da70:	213fffc4 	addi	r4,r4,-1
  80da74:	4110703a 	and	r8,r8,r4
  80da78:	003fa806 	br	80d91c <__alt_mem_onchip_mem+0xff78d91c>
  80da7c:	8089c83a 	sub	r4,r16,r2
  80da80:	01005e0e 	bge	zero,r4,80dbfc <__adddf3+0x3bc>
  80da84:	10002b26 	beq	r2,zero,80db34 <__adddf3+0x2f4>
  80da88:	0081ffc4 	movi	r2,2047
  80da8c:	80bf8b26 	beq	r16,r2,80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80da90:	4a402034 	orhi	r9,r9,128
  80da94:	00800e04 	movi	r2,56
  80da98:	1100a40e 	bge	r2,r4,80dd2c <__adddf3+0x4ec>
  80da9c:	498cb03a 	or	r6,r9,r6
  80daa0:	300ac03a 	cmpne	r5,r6,zero
  80daa4:	0013883a 	mov	r9,zero
  80daa8:	2c4b883a 	add	r5,r5,r17
  80daac:	2c63803a 	cmpltu	r17,r5,r17
  80dab0:	4a11883a 	add	r8,r9,r8
  80dab4:	8a11883a 	add	r8,r17,r8
  80dab8:	2823883a 	mov	r17,r5
  80dabc:	4080202c 	andhi	r2,r8,128
  80dac0:	103fe026 	beq	r2,zero,80da44 <__alt_mem_onchip_mem+0xff78da44>
  80dac4:	84000044 	addi	r16,r16,1
  80dac8:	0081ffc4 	movi	r2,2047
  80dacc:	8080d226 	beq	r16,r2,80de18 <__adddf3+0x5d8>
  80dad0:	00bfe034 	movhi	r2,65408
  80dad4:	10bfffc4 	addi	r2,r2,-1
  80dad8:	4090703a 	and	r8,r8,r2
  80dadc:	880ad07a 	srli	r5,r17,1
  80dae0:	400897fa 	slli	r4,r8,31
  80dae4:	88c0004c 	andi	r3,r17,1
  80dae8:	28e2b03a 	or	r17,r5,r3
  80daec:	4010d07a 	srli	r8,r8,1
  80daf0:	2462b03a 	or	r17,r4,r17
  80daf4:	003f7106 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80daf8:	4088b03a 	or	r4,r8,r2
  80dafc:	20014526 	beq	r4,zero,80e014 <__adddf3+0x7d4>
  80db00:	01000434 	movhi	r4,16
  80db04:	42000234 	orhi	r8,r8,8
  80db08:	213fffc4 	addi	r4,r4,-1
  80db0c:	4110703a 	and	r8,r8,r4
  80db10:	003f8206 	br	80d91c <__alt_mem_onchip_mem+0xff78d91c>
  80db14:	18ffffc4 	addi	r3,r3,-1
  80db18:	1800491e 	bne	r3,zero,80dc40 <__adddf3+0x400>
  80db1c:	898bc83a 	sub	r5,r17,r6
  80db20:	8963803a 	cmpltu	r17,r17,r5
  80db24:	4251c83a 	sub	r8,r8,r9
  80db28:	4451c83a 	sub	r8,r8,r17
  80db2c:	2823883a 	mov	r17,r5
  80db30:	003f9f06 	br	80d9b0 <__alt_mem_onchip_mem+0xff78d9b0>
  80db34:	4984b03a 	or	r2,r9,r6
  80db38:	103f6026 	beq	r2,zero,80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80db3c:	213fffc4 	addi	r4,r4,-1
  80db40:	2000931e 	bne	r4,zero,80dd90 <__adddf3+0x550>
  80db44:	898d883a 	add	r6,r17,r6
  80db48:	3463803a 	cmpltu	r17,r6,r17
  80db4c:	4251883a 	add	r8,r8,r9
  80db50:	8a11883a 	add	r8,r17,r8
  80db54:	3023883a 	mov	r17,r6
  80db58:	003fd806 	br	80dabc <__alt_mem_onchip_mem+0xff78dabc>
  80db5c:	1800541e 	bne	r3,zero,80dcb0 <__adddf3+0x470>
  80db60:	80800044 	addi	r2,r16,1
  80db64:	1081ffcc 	andi	r2,r2,2047
  80db68:	00c00044 	movi	r3,1
  80db6c:	1880a00e 	bge	r3,r2,80ddf0 <__adddf3+0x5b0>
  80db70:	8989c83a 	sub	r4,r17,r6
  80db74:	8905803a 	cmpltu	r2,r17,r4
  80db78:	4267c83a 	sub	r19,r8,r9
  80db7c:	98a7c83a 	sub	r19,r19,r2
  80db80:	9880202c 	andhi	r2,r19,128
  80db84:	10006326 	beq	r2,zero,80dd14 <__adddf3+0x4d4>
  80db88:	3463c83a 	sub	r17,r6,r17
  80db8c:	4a07c83a 	sub	r3,r9,r8
  80db90:	344d803a 	cmpltu	r6,r6,r17
  80db94:	19a7c83a 	sub	r19,r3,r6
  80db98:	3825883a 	mov	r18,r7
  80db9c:	983f8a1e 	bne	r19,zero,80d9c8 <__alt_mem_onchip_mem+0xff78d9c8>
  80dba0:	8809883a 	mov	r4,r17
  80dba4:	080fe440 	call	80fe44 <__clzsi2>
  80dba8:	10800804 	addi	r2,r2,32
  80dbac:	10fffe04 	addi	r3,r2,-8
  80dbb0:	010007c4 	movi	r4,31
  80dbb4:	20ff890e 	bge	r4,r3,80d9dc <__alt_mem_onchip_mem+0xff78d9dc>
  80dbb8:	10bff604 	addi	r2,r2,-40
  80dbbc:	8884983a 	sll	r2,r17,r2
  80dbc0:	0023883a 	mov	r17,zero
  80dbc4:	1c3f8c0e 	bge	r3,r16,80d9f8 <__alt_mem_onchip_mem+0xff78d9f8>
  80dbc8:	023fe034 	movhi	r8,65408
  80dbcc:	423fffc4 	addi	r8,r8,-1
  80dbd0:	80e1c83a 	sub	r16,r16,r3
  80dbd4:	1210703a 	and	r8,r2,r8
  80dbd8:	003f3806 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dbdc:	9007883a 	mov	r3,r18
  80dbe0:	0011883a 	mov	r8,zero
  80dbe4:	0005883a 	mov	r2,zero
  80dbe8:	003f4c06 	br	80d91c <__alt_mem_onchip_mem+0xff78d91c>
  80dbec:	498cb03a 	or	r6,r9,r6
  80dbf0:	300cc03a 	cmpne	r6,r6,zero
  80dbf4:	0007883a 	mov	r3,zero
  80dbf8:	003f6806 	br	80d99c <__alt_mem_onchip_mem+0xff78d99c>
  80dbfc:	20009c1e 	bne	r4,zero,80de70 <__adddf3+0x630>
  80dc00:	80800044 	addi	r2,r16,1
  80dc04:	1141ffcc 	andi	r5,r2,2047
  80dc08:	01000044 	movi	r4,1
  80dc0c:	2140670e 	bge	r4,r5,80ddac <__adddf3+0x56c>
  80dc10:	0101ffc4 	movi	r4,2047
  80dc14:	11007f26 	beq	r2,r4,80de14 <__adddf3+0x5d4>
  80dc18:	898d883a 	add	r6,r17,r6
  80dc1c:	4247883a 	add	r3,r8,r9
  80dc20:	3451803a 	cmpltu	r8,r6,r17
  80dc24:	40d1883a 	add	r8,r8,r3
  80dc28:	402297fa 	slli	r17,r8,31
  80dc2c:	300cd07a 	srli	r6,r6,1
  80dc30:	4010d07a 	srli	r8,r8,1
  80dc34:	1021883a 	mov	r16,r2
  80dc38:	89a2b03a 	or	r17,r17,r6
  80dc3c:	003f1f06 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dc40:	0081ffc4 	movi	r2,2047
  80dc44:	80bf481e 	bne	r16,r2,80d968 <__alt_mem_onchip_mem+0xff78d968>
  80dc48:	003f1c06 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dc4c:	843ff844 	addi	r16,r16,-31
  80dc50:	01000804 	movi	r4,32
  80dc54:	1406d83a 	srl	r3,r2,r16
  80dc58:	41005026 	beq	r8,r4,80dd9c <__adddf3+0x55c>
  80dc5c:	01001004 	movi	r4,64
  80dc60:	2211c83a 	sub	r8,r4,r8
  80dc64:	1204983a 	sll	r2,r2,r8
  80dc68:	88a2b03a 	or	r17,r17,r2
  80dc6c:	8822c03a 	cmpne	r17,r17,zero
  80dc70:	1c62b03a 	or	r17,r3,r17
  80dc74:	0011883a 	mov	r8,zero
  80dc78:	0021883a 	mov	r16,zero
  80dc7c:	003f7106 	br	80da44 <__alt_mem_onchip_mem+0xff78da44>
  80dc80:	193ff804 	addi	r4,r3,-32
  80dc84:	00800804 	movi	r2,32
  80dc88:	4908d83a 	srl	r4,r9,r4
  80dc8c:	18804526 	beq	r3,r2,80dda4 <__adddf3+0x564>
  80dc90:	00801004 	movi	r2,64
  80dc94:	10c5c83a 	sub	r2,r2,r3
  80dc98:	4886983a 	sll	r3,r9,r2
  80dc9c:	198cb03a 	or	r6,r3,r6
  80dca0:	300cc03a 	cmpne	r6,r6,zero
  80dca4:	218cb03a 	or	r6,r4,r6
  80dca8:	0007883a 	mov	r3,zero
  80dcac:	003f3b06 	br	80d99c <__alt_mem_onchip_mem+0xff78d99c>
  80dcb0:	80002a26 	beq	r16,zero,80dd5c <__adddf3+0x51c>
  80dcb4:	0101ffc4 	movi	r4,2047
  80dcb8:	11006826 	beq	r2,r4,80de5c <__adddf3+0x61c>
  80dcbc:	00c7c83a 	sub	r3,zero,r3
  80dcc0:	42002034 	orhi	r8,r8,128
  80dcc4:	01000e04 	movi	r4,56
  80dcc8:	20c07c16 	blt	r4,r3,80debc <__adddf3+0x67c>
  80dccc:	010007c4 	movi	r4,31
  80dcd0:	20c0da16 	blt	r4,r3,80e03c <__adddf3+0x7fc>
  80dcd4:	01000804 	movi	r4,32
  80dcd8:	20c9c83a 	sub	r4,r4,r3
  80dcdc:	4114983a 	sll	r10,r8,r4
  80dce0:	88cad83a 	srl	r5,r17,r3
  80dce4:	8908983a 	sll	r4,r17,r4
  80dce8:	40c6d83a 	srl	r3,r8,r3
  80dcec:	5162b03a 	or	r17,r10,r5
  80dcf0:	2008c03a 	cmpne	r4,r4,zero
  80dcf4:	8922b03a 	or	r17,r17,r4
  80dcf8:	3463c83a 	sub	r17,r6,r17
  80dcfc:	48c7c83a 	sub	r3,r9,r3
  80dd00:	344d803a 	cmpltu	r6,r6,r17
  80dd04:	1991c83a 	sub	r8,r3,r6
  80dd08:	1021883a 	mov	r16,r2
  80dd0c:	3825883a 	mov	r18,r7
  80dd10:	003f2706 	br	80d9b0 <__alt_mem_onchip_mem+0xff78d9b0>
  80dd14:	24d0b03a 	or	r8,r4,r19
  80dd18:	40001b1e 	bne	r8,zero,80dd88 <__adddf3+0x548>
  80dd1c:	0005883a 	mov	r2,zero
  80dd20:	0007883a 	mov	r3,zero
  80dd24:	0021883a 	mov	r16,zero
  80dd28:	003f4d06 	br	80da60 <__alt_mem_onchip_mem+0xff78da60>
  80dd2c:	008007c4 	movi	r2,31
  80dd30:	11003c16 	blt	r2,r4,80de24 <__adddf3+0x5e4>
  80dd34:	00800804 	movi	r2,32
  80dd38:	1105c83a 	sub	r2,r2,r4
  80dd3c:	488e983a 	sll	r7,r9,r2
  80dd40:	310ad83a 	srl	r5,r6,r4
  80dd44:	3084983a 	sll	r2,r6,r2
  80dd48:	4912d83a 	srl	r9,r9,r4
  80dd4c:	394ab03a 	or	r5,r7,r5
  80dd50:	1004c03a 	cmpne	r2,r2,zero
  80dd54:	288ab03a 	or	r5,r5,r2
  80dd58:	003f5306 	br	80daa8 <__alt_mem_onchip_mem+0xff78daa8>
  80dd5c:	4448b03a 	or	r4,r8,r17
  80dd60:	20003e26 	beq	r4,zero,80de5c <__adddf3+0x61c>
  80dd64:	00c6303a 	nor	r3,zero,r3
  80dd68:	18003a1e 	bne	r3,zero,80de54 <__adddf3+0x614>
  80dd6c:	3463c83a 	sub	r17,r6,r17
  80dd70:	4a07c83a 	sub	r3,r9,r8
  80dd74:	344d803a 	cmpltu	r6,r6,r17
  80dd78:	1991c83a 	sub	r8,r3,r6
  80dd7c:	1021883a 	mov	r16,r2
  80dd80:	3825883a 	mov	r18,r7
  80dd84:	003f0a06 	br	80d9b0 <__alt_mem_onchip_mem+0xff78d9b0>
  80dd88:	2023883a 	mov	r17,r4
  80dd8c:	003f0d06 	br	80d9c4 <__alt_mem_onchip_mem+0xff78d9c4>
  80dd90:	0081ffc4 	movi	r2,2047
  80dd94:	80bf3f1e 	bne	r16,r2,80da94 <__alt_mem_onchip_mem+0xff78da94>
  80dd98:	003ec806 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dd9c:	0005883a 	mov	r2,zero
  80dda0:	003fb106 	br	80dc68 <__alt_mem_onchip_mem+0xff78dc68>
  80dda4:	0007883a 	mov	r3,zero
  80dda8:	003fbc06 	br	80dc9c <__alt_mem_onchip_mem+0xff78dc9c>
  80ddac:	4444b03a 	or	r2,r8,r17
  80ddb0:	8000871e 	bne	r16,zero,80dfd0 <__adddf3+0x790>
  80ddb4:	1000ba26 	beq	r2,zero,80e0a0 <__adddf3+0x860>
  80ddb8:	4984b03a 	or	r2,r9,r6
  80ddbc:	103ebf26 	beq	r2,zero,80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80ddc0:	8985883a 	add	r2,r17,r6
  80ddc4:	4247883a 	add	r3,r8,r9
  80ddc8:	1451803a 	cmpltu	r8,r2,r17
  80ddcc:	40d1883a 	add	r8,r8,r3
  80ddd0:	40c0202c 	andhi	r3,r8,128
  80ddd4:	1023883a 	mov	r17,r2
  80ddd8:	183f1a26 	beq	r3,zero,80da44 <__alt_mem_onchip_mem+0xff78da44>
  80dddc:	00bfe034 	movhi	r2,65408
  80dde0:	10bfffc4 	addi	r2,r2,-1
  80dde4:	2021883a 	mov	r16,r4
  80dde8:	4090703a 	and	r8,r8,r2
  80ddec:	003eb306 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80ddf0:	4444b03a 	or	r2,r8,r17
  80ddf4:	8000291e 	bne	r16,zero,80de9c <__adddf3+0x65c>
  80ddf8:	10004b1e 	bne	r2,zero,80df28 <__adddf3+0x6e8>
  80ddfc:	4990b03a 	or	r8,r9,r6
  80de00:	40008b26 	beq	r8,zero,80e030 <__adddf3+0x7f0>
  80de04:	4811883a 	mov	r8,r9
  80de08:	3023883a 	mov	r17,r6
  80de0c:	3825883a 	mov	r18,r7
  80de10:	003eaa06 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80de14:	1021883a 	mov	r16,r2
  80de18:	0011883a 	mov	r8,zero
  80de1c:	0005883a 	mov	r2,zero
  80de20:	003f0f06 	br	80da60 <__alt_mem_onchip_mem+0xff78da60>
  80de24:	217ff804 	addi	r5,r4,-32
  80de28:	00800804 	movi	r2,32
  80de2c:	494ad83a 	srl	r5,r9,r5
  80de30:	20807d26 	beq	r4,r2,80e028 <__adddf3+0x7e8>
  80de34:	00801004 	movi	r2,64
  80de38:	1109c83a 	sub	r4,r2,r4
  80de3c:	4912983a 	sll	r9,r9,r4
  80de40:	498cb03a 	or	r6,r9,r6
  80de44:	300cc03a 	cmpne	r6,r6,zero
  80de48:	298ab03a 	or	r5,r5,r6
  80de4c:	0013883a 	mov	r9,zero
  80de50:	003f1506 	br	80daa8 <__alt_mem_onchip_mem+0xff78daa8>
  80de54:	0101ffc4 	movi	r4,2047
  80de58:	113f9a1e 	bne	r2,r4,80dcc4 <__alt_mem_onchip_mem+0xff78dcc4>
  80de5c:	4811883a 	mov	r8,r9
  80de60:	3023883a 	mov	r17,r6
  80de64:	1021883a 	mov	r16,r2
  80de68:	3825883a 	mov	r18,r7
  80de6c:	003e9306 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80de70:	8000161e 	bne	r16,zero,80decc <__adddf3+0x68c>
  80de74:	444ab03a 	or	r5,r8,r17
  80de78:	28005126 	beq	r5,zero,80dfc0 <__adddf3+0x780>
  80de7c:	0108303a 	nor	r4,zero,r4
  80de80:	20004d1e 	bne	r4,zero,80dfb8 <__adddf3+0x778>
  80de84:	89a3883a 	add	r17,r17,r6
  80de88:	4253883a 	add	r9,r8,r9
  80de8c:	898d803a 	cmpltu	r6,r17,r6
  80de90:	3251883a 	add	r8,r6,r9
  80de94:	1021883a 	mov	r16,r2
  80de98:	003f0806 	br	80dabc <__alt_mem_onchip_mem+0xff78dabc>
  80de9c:	1000301e 	bne	r2,zero,80df60 <__adddf3+0x720>
  80dea0:	4984b03a 	or	r2,r9,r6
  80dea4:	10007126 	beq	r2,zero,80e06c <__adddf3+0x82c>
  80dea8:	4811883a 	mov	r8,r9
  80deac:	3023883a 	mov	r17,r6
  80deb0:	3825883a 	mov	r18,r7
  80deb4:	0401ffc4 	movi	r16,2047
  80deb8:	003e8006 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80debc:	4462b03a 	or	r17,r8,r17
  80dec0:	8822c03a 	cmpne	r17,r17,zero
  80dec4:	0007883a 	mov	r3,zero
  80dec8:	003f8b06 	br	80dcf8 <__alt_mem_onchip_mem+0xff78dcf8>
  80decc:	0141ffc4 	movi	r5,2047
  80ded0:	11403b26 	beq	r2,r5,80dfc0 <__adddf3+0x780>
  80ded4:	0109c83a 	sub	r4,zero,r4
  80ded8:	42002034 	orhi	r8,r8,128
  80dedc:	01400e04 	movi	r5,56
  80dee0:	29006716 	blt	r5,r4,80e080 <__adddf3+0x840>
  80dee4:	014007c4 	movi	r5,31
  80dee8:	29007016 	blt	r5,r4,80e0ac <__adddf3+0x86c>
  80deec:	01400804 	movi	r5,32
  80def0:	290bc83a 	sub	r5,r5,r4
  80def4:	4154983a 	sll	r10,r8,r5
  80def8:	890ed83a 	srl	r7,r17,r4
  80defc:	894a983a 	sll	r5,r17,r5
  80df00:	4108d83a 	srl	r4,r8,r4
  80df04:	51e2b03a 	or	r17,r10,r7
  80df08:	280ac03a 	cmpne	r5,r5,zero
  80df0c:	8962b03a 	or	r17,r17,r5
  80df10:	89a3883a 	add	r17,r17,r6
  80df14:	2253883a 	add	r9,r4,r9
  80df18:	898d803a 	cmpltu	r6,r17,r6
  80df1c:	3251883a 	add	r8,r6,r9
  80df20:	1021883a 	mov	r16,r2
  80df24:	003ee506 	br	80dabc <__alt_mem_onchip_mem+0xff78dabc>
  80df28:	4984b03a 	or	r2,r9,r6
  80df2c:	103e6326 	beq	r2,zero,80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80df30:	8987c83a 	sub	r3,r17,r6
  80df34:	88c9803a 	cmpltu	r4,r17,r3
  80df38:	4245c83a 	sub	r2,r8,r9
  80df3c:	1105c83a 	sub	r2,r2,r4
  80df40:	1100202c 	andhi	r4,r2,128
  80df44:	203ebb26 	beq	r4,zero,80da34 <__alt_mem_onchip_mem+0xff78da34>
  80df48:	3463c83a 	sub	r17,r6,r17
  80df4c:	4a07c83a 	sub	r3,r9,r8
  80df50:	344d803a 	cmpltu	r6,r6,r17
  80df54:	1991c83a 	sub	r8,r3,r6
  80df58:	3825883a 	mov	r18,r7
  80df5c:	003e5706 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80df60:	4984b03a 	or	r2,r9,r6
  80df64:	10002e26 	beq	r2,zero,80e020 <__adddf3+0x7e0>
  80df68:	4004d0fa 	srli	r2,r8,3
  80df6c:	8822d0fa 	srli	r17,r17,3
  80df70:	4010977a 	slli	r8,r8,29
  80df74:	10c0022c 	andhi	r3,r2,8
  80df78:	4462b03a 	or	r17,r8,r17
  80df7c:	18000826 	beq	r3,zero,80dfa0 <__adddf3+0x760>
  80df80:	4808d0fa 	srli	r4,r9,3
  80df84:	20c0022c 	andhi	r3,r4,8
  80df88:	1800051e 	bne	r3,zero,80dfa0 <__adddf3+0x760>
  80df8c:	300cd0fa 	srli	r6,r6,3
  80df90:	4806977a 	slli	r3,r9,29
  80df94:	2005883a 	mov	r2,r4
  80df98:	3825883a 	mov	r18,r7
  80df9c:	19a2b03a 	or	r17,r3,r6
  80dfa0:	8810d77a 	srli	r8,r17,29
  80dfa4:	100490fa 	slli	r2,r2,3
  80dfa8:	882290fa 	slli	r17,r17,3
  80dfac:	0401ffc4 	movi	r16,2047
  80dfb0:	4090b03a 	or	r8,r8,r2
  80dfb4:	003e4106 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dfb8:	0141ffc4 	movi	r5,2047
  80dfbc:	117fc71e 	bne	r2,r5,80dedc <__alt_mem_onchip_mem+0xff78dedc>
  80dfc0:	4811883a 	mov	r8,r9
  80dfc4:	3023883a 	mov	r17,r6
  80dfc8:	1021883a 	mov	r16,r2
  80dfcc:	003e3b06 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80dfd0:	10002f26 	beq	r2,zero,80e090 <__adddf3+0x850>
  80dfd4:	4984b03a 	or	r2,r9,r6
  80dfd8:	10001126 	beq	r2,zero,80e020 <__adddf3+0x7e0>
  80dfdc:	4004d0fa 	srli	r2,r8,3
  80dfe0:	8822d0fa 	srli	r17,r17,3
  80dfe4:	4010977a 	slli	r8,r8,29
  80dfe8:	10c0022c 	andhi	r3,r2,8
  80dfec:	4462b03a 	or	r17,r8,r17
  80dff0:	183feb26 	beq	r3,zero,80dfa0 <__alt_mem_onchip_mem+0xff78dfa0>
  80dff4:	4808d0fa 	srli	r4,r9,3
  80dff8:	20c0022c 	andhi	r3,r4,8
  80dffc:	183fe81e 	bne	r3,zero,80dfa0 <__alt_mem_onchip_mem+0xff78dfa0>
  80e000:	300cd0fa 	srli	r6,r6,3
  80e004:	4806977a 	slli	r3,r9,29
  80e008:	2005883a 	mov	r2,r4
  80e00c:	19a2b03a 	or	r17,r3,r6
  80e010:	003fe306 	br	80dfa0 <__alt_mem_onchip_mem+0xff78dfa0>
  80e014:	0011883a 	mov	r8,zero
  80e018:	0005883a 	mov	r2,zero
  80e01c:	003e3f06 	br	80d91c <__alt_mem_onchip_mem+0xff78d91c>
  80e020:	0401ffc4 	movi	r16,2047
  80e024:	003e2506 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80e028:	0013883a 	mov	r9,zero
  80e02c:	003f8406 	br	80de40 <__alt_mem_onchip_mem+0xff78de40>
  80e030:	0005883a 	mov	r2,zero
  80e034:	0007883a 	mov	r3,zero
  80e038:	003e8906 	br	80da60 <__alt_mem_onchip_mem+0xff78da60>
  80e03c:	197ff804 	addi	r5,r3,-32
  80e040:	01000804 	movi	r4,32
  80e044:	414ad83a 	srl	r5,r8,r5
  80e048:	19002426 	beq	r3,r4,80e0dc <__adddf3+0x89c>
  80e04c:	01001004 	movi	r4,64
  80e050:	20c7c83a 	sub	r3,r4,r3
  80e054:	40c6983a 	sll	r3,r8,r3
  80e058:	1c46b03a 	or	r3,r3,r17
  80e05c:	1806c03a 	cmpne	r3,r3,zero
  80e060:	28e2b03a 	or	r17,r5,r3
  80e064:	0007883a 	mov	r3,zero
  80e068:	003f2306 	br	80dcf8 <__alt_mem_onchip_mem+0xff78dcf8>
  80e06c:	0007883a 	mov	r3,zero
  80e070:	5811883a 	mov	r8,r11
  80e074:	00bfffc4 	movi	r2,-1
  80e078:	0401ffc4 	movi	r16,2047
  80e07c:	003e7806 	br	80da60 <__alt_mem_onchip_mem+0xff78da60>
  80e080:	4462b03a 	or	r17,r8,r17
  80e084:	8822c03a 	cmpne	r17,r17,zero
  80e088:	0009883a 	mov	r4,zero
  80e08c:	003fa006 	br	80df10 <__alt_mem_onchip_mem+0xff78df10>
  80e090:	4811883a 	mov	r8,r9
  80e094:	3023883a 	mov	r17,r6
  80e098:	0401ffc4 	movi	r16,2047
  80e09c:	003e0706 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80e0a0:	4811883a 	mov	r8,r9
  80e0a4:	3023883a 	mov	r17,r6
  80e0a8:	003e0406 	br	80d8bc <__alt_mem_onchip_mem+0xff78d8bc>
  80e0ac:	21fff804 	addi	r7,r4,-32
  80e0b0:	01400804 	movi	r5,32
  80e0b4:	41ced83a 	srl	r7,r8,r7
  80e0b8:	21400a26 	beq	r4,r5,80e0e4 <__adddf3+0x8a4>
  80e0bc:	01401004 	movi	r5,64
  80e0c0:	2909c83a 	sub	r4,r5,r4
  80e0c4:	4108983a 	sll	r4,r8,r4
  80e0c8:	2448b03a 	or	r4,r4,r17
  80e0cc:	2008c03a 	cmpne	r4,r4,zero
  80e0d0:	3922b03a 	or	r17,r7,r4
  80e0d4:	0009883a 	mov	r4,zero
  80e0d8:	003f8d06 	br	80df10 <__alt_mem_onchip_mem+0xff78df10>
  80e0dc:	0007883a 	mov	r3,zero
  80e0e0:	003fdd06 	br	80e058 <__alt_mem_onchip_mem+0xff78e058>
  80e0e4:	0009883a 	mov	r4,zero
  80e0e8:	003ff706 	br	80e0c8 <__alt_mem_onchip_mem+0xff78e0c8>

0080e0ec <__divdf3>:
  80e0ec:	defff204 	addi	sp,sp,-56
  80e0f0:	dd400915 	stw	r21,36(sp)
  80e0f4:	282ad53a 	srli	r21,r5,20
  80e0f8:	dd000815 	stw	r20,32(sp)
  80e0fc:	2828d7fa 	srli	r20,r5,31
  80e100:	dc000415 	stw	r16,16(sp)
  80e104:	04000434 	movhi	r16,16
  80e108:	df000c15 	stw	fp,48(sp)
  80e10c:	843fffc4 	addi	r16,r16,-1
  80e110:	dfc00d15 	stw	ra,52(sp)
  80e114:	ddc00b15 	stw	r23,44(sp)
  80e118:	dd800a15 	stw	r22,40(sp)
  80e11c:	dcc00715 	stw	r19,28(sp)
  80e120:	dc800615 	stw	r18,24(sp)
  80e124:	dc400515 	stw	r17,20(sp)
  80e128:	ad41ffcc 	andi	r21,r21,2047
  80e12c:	2c20703a 	and	r16,r5,r16
  80e130:	a7003fcc 	andi	fp,r20,255
  80e134:	a8006126 	beq	r21,zero,80e2bc <__divdf3+0x1d0>
  80e138:	0081ffc4 	movi	r2,2047
  80e13c:	2025883a 	mov	r18,r4
  80e140:	a8803726 	beq	r21,r2,80e220 <__divdf3+0x134>
  80e144:	80800434 	orhi	r2,r16,16
  80e148:	100490fa 	slli	r2,r2,3
  80e14c:	2020d77a 	srli	r16,r4,29
  80e150:	202490fa 	slli	r18,r4,3
  80e154:	ad7f0044 	addi	r21,r21,-1023
  80e158:	80a0b03a 	or	r16,r16,r2
  80e15c:	0027883a 	mov	r19,zero
  80e160:	0013883a 	mov	r9,zero
  80e164:	3804d53a 	srli	r2,r7,20
  80e168:	382cd7fa 	srli	r22,r7,31
  80e16c:	04400434 	movhi	r17,16
  80e170:	8c7fffc4 	addi	r17,r17,-1
  80e174:	1081ffcc 	andi	r2,r2,2047
  80e178:	3011883a 	mov	r8,r6
  80e17c:	3c62703a 	and	r17,r7,r17
  80e180:	b5c03fcc 	andi	r23,r22,255
  80e184:	10006c26 	beq	r2,zero,80e338 <__divdf3+0x24c>
  80e188:	00c1ffc4 	movi	r3,2047
  80e18c:	10c06426 	beq	r2,r3,80e320 <__divdf3+0x234>
  80e190:	88c00434 	orhi	r3,r17,16
  80e194:	180690fa 	slli	r3,r3,3
  80e198:	3022d77a 	srli	r17,r6,29
  80e19c:	301090fa 	slli	r8,r6,3
  80e1a0:	10bf0044 	addi	r2,r2,-1023
  80e1a4:	88e2b03a 	or	r17,r17,r3
  80e1a8:	000f883a 	mov	r7,zero
  80e1ac:	a58cf03a 	xor	r6,r20,r22
  80e1b0:	3cc8b03a 	or	r4,r7,r19
  80e1b4:	a8abc83a 	sub	r21,r21,r2
  80e1b8:	008003c4 	movi	r2,15
  80e1bc:	3007883a 	mov	r3,r6
  80e1c0:	34c03fcc 	andi	r19,r6,255
  80e1c4:	11009036 	bltu	r2,r4,80e408 <__divdf3+0x31c>
  80e1c8:	200890ba 	slli	r4,r4,2
  80e1cc:	00802074 	movhi	r2,129
  80e1d0:	10b87804 	addi	r2,r2,-7712
  80e1d4:	2089883a 	add	r4,r4,r2
  80e1d8:	20800017 	ldw	r2,0(r4)
  80e1dc:	1000683a 	jmp	r2
  80e1e0:	0080e408 	cmpgei	r2,zero,912
  80e1e4:	0080e258 	cmpnei	r2,zero,905
  80e1e8:	0080e3f8 	rdprs	r2,zero,911
  80e1ec:	0080e24c 	andi	r2,zero,905
  80e1f0:	0080e3f8 	rdprs	r2,zero,911
  80e1f4:	0080e3cc 	andi	r2,zero,911
  80e1f8:	0080e3f8 	rdprs	r2,zero,911
  80e1fc:	0080e24c 	andi	r2,zero,905
  80e200:	0080e258 	cmpnei	r2,zero,905
  80e204:	0080e258 	cmpnei	r2,zero,905
  80e208:	0080e3cc 	andi	r2,zero,911
  80e20c:	0080e24c 	andi	r2,zero,905
  80e210:	0080e23c 	xorhi	r2,zero,904
  80e214:	0080e23c 	xorhi	r2,zero,904
  80e218:	0080e23c 	xorhi	r2,zero,904
  80e21c:	0080e6ec 	andhi	r2,zero,923
  80e220:	2404b03a 	or	r2,r4,r16
  80e224:	1000661e 	bne	r2,zero,80e3c0 <__divdf3+0x2d4>
  80e228:	04c00204 	movi	r19,8
  80e22c:	0021883a 	mov	r16,zero
  80e230:	0025883a 	mov	r18,zero
  80e234:	02400084 	movi	r9,2
  80e238:	003fca06 	br	80e164 <__alt_mem_onchip_mem+0xff78e164>
  80e23c:	8023883a 	mov	r17,r16
  80e240:	9011883a 	mov	r8,r18
  80e244:	e02f883a 	mov	r23,fp
  80e248:	480f883a 	mov	r7,r9
  80e24c:	00800084 	movi	r2,2
  80e250:	3881311e 	bne	r7,r2,80e718 <__divdf3+0x62c>
  80e254:	b827883a 	mov	r19,r23
  80e258:	98c0004c 	andi	r3,r19,1
  80e25c:	0081ffc4 	movi	r2,2047
  80e260:	000b883a 	mov	r5,zero
  80e264:	0025883a 	mov	r18,zero
  80e268:	1004953a 	slli	r2,r2,20
  80e26c:	18c03fcc 	andi	r3,r3,255
  80e270:	04400434 	movhi	r17,16
  80e274:	8c7fffc4 	addi	r17,r17,-1
  80e278:	180697fa 	slli	r3,r3,31
  80e27c:	2c4a703a 	and	r5,r5,r17
  80e280:	288ab03a 	or	r5,r5,r2
  80e284:	28c6b03a 	or	r3,r5,r3
  80e288:	9005883a 	mov	r2,r18
  80e28c:	dfc00d17 	ldw	ra,52(sp)
  80e290:	df000c17 	ldw	fp,48(sp)
  80e294:	ddc00b17 	ldw	r23,44(sp)
  80e298:	dd800a17 	ldw	r22,40(sp)
  80e29c:	dd400917 	ldw	r21,36(sp)
  80e2a0:	dd000817 	ldw	r20,32(sp)
  80e2a4:	dcc00717 	ldw	r19,28(sp)
  80e2a8:	dc800617 	ldw	r18,24(sp)
  80e2ac:	dc400517 	ldw	r17,20(sp)
  80e2b0:	dc000417 	ldw	r16,16(sp)
  80e2b4:	dec00e04 	addi	sp,sp,56
  80e2b8:	f800283a 	ret
  80e2bc:	2404b03a 	or	r2,r4,r16
  80e2c0:	2027883a 	mov	r19,r4
  80e2c4:	10003926 	beq	r2,zero,80e3ac <__divdf3+0x2c0>
  80e2c8:	80012e26 	beq	r16,zero,80e784 <__divdf3+0x698>
  80e2cc:	8009883a 	mov	r4,r16
  80e2d0:	d9800315 	stw	r6,12(sp)
  80e2d4:	d9c00215 	stw	r7,8(sp)
  80e2d8:	080fe440 	call	80fe44 <__clzsi2>
  80e2dc:	d9800317 	ldw	r6,12(sp)
  80e2e0:	d9c00217 	ldw	r7,8(sp)
  80e2e4:	113ffd44 	addi	r4,r2,-11
  80e2e8:	00c00704 	movi	r3,28
  80e2ec:	19012116 	blt	r3,r4,80e774 <__divdf3+0x688>
  80e2f0:	00c00744 	movi	r3,29
  80e2f4:	147ffe04 	addi	r17,r2,-8
  80e2f8:	1907c83a 	sub	r3,r3,r4
  80e2fc:	8460983a 	sll	r16,r16,r17
  80e300:	98c6d83a 	srl	r3,r19,r3
  80e304:	9c64983a 	sll	r18,r19,r17
  80e308:	1c20b03a 	or	r16,r3,r16
  80e30c:	1080fcc4 	addi	r2,r2,1011
  80e310:	00abc83a 	sub	r21,zero,r2
  80e314:	0027883a 	mov	r19,zero
  80e318:	0013883a 	mov	r9,zero
  80e31c:	003f9106 	br	80e164 <__alt_mem_onchip_mem+0xff78e164>
  80e320:	3446b03a 	or	r3,r6,r17
  80e324:	18001f1e 	bne	r3,zero,80e3a4 <__divdf3+0x2b8>
  80e328:	0023883a 	mov	r17,zero
  80e32c:	0011883a 	mov	r8,zero
  80e330:	01c00084 	movi	r7,2
  80e334:	003f9d06 	br	80e1ac <__alt_mem_onchip_mem+0xff78e1ac>
  80e338:	3446b03a 	or	r3,r6,r17
  80e33c:	18001526 	beq	r3,zero,80e394 <__divdf3+0x2a8>
  80e340:	88011b26 	beq	r17,zero,80e7b0 <__divdf3+0x6c4>
  80e344:	8809883a 	mov	r4,r17
  80e348:	d9800315 	stw	r6,12(sp)
  80e34c:	da400115 	stw	r9,4(sp)
  80e350:	080fe440 	call	80fe44 <__clzsi2>
  80e354:	d9800317 	ldw	r6,12(sp)
  80e358:	da400117 	ldw	r9,4(sp)
  80e35c:	113ffd44 	addi	r4,r2,-11
  80e360:	00c00704 	movi	r3,28
  80e364:	19010e16 	blt	r3,r4,80e7a0 <__divdf3+0x6b4>
  80e368:	00c00744 	movi	r3,29
  80e36c:	123ffe04 	addi	r8,r2,-8
  80e370:	1907c83a 	sub	r3,r3,r4
  80e374:	8a22983a 	sll	r17,r17,r8
  80e378:	30c6d83a 	srl	r3,r6,r3
  80e37c:	3210983a 	sll	r8,r6,r8
  80e380:	1c62b03a 	or	r17,r3,r17
  80e384:	1080fcc4 	addi	r2,r2,1011
  80e388:	0085c83a 	sub	r2,zero,r2
  80e38c:	000f883a 	mov	r7,zero
  80e390:	003f8606 	br	80e1ac <__alt_mem_onchip_mem+0xff78e1ac>
  80e394:	0023883a 	mov	r17,zero
  80e398:	0011883a 	mov	r8,zero
  80e39c:	01c00044 	movi	r7,1
  80e3a0:	003f8206 	br	80e1ac <__alt_mem_onchip_mem+0xff78e1ac>
  80e3a4:	01c000c4 	movi	r7,3
  80e3a8:	003f8006 	br	80e1ac <__alt_mem_onchip_mem+0xff78e1ac>
  80e3ac:	04c00104 	movi	r19,4
  80e3b0:	0021883a 	mov	r16,zero
  80e3b4:	0025883a 	mov	r18,zero
  80e3b8:	02400044 	movi	r9,1
  80e3bc:	003f6906 	br	80e164 <__alt_mem_onchip_mem+0xff78e164>
  80e3c0:	04c00304 	movi	r19,12
  80e3c4:	024000c4 	movi	r9,3
  80e3c8:	003f6606 	br	80e164 <__alt_mem_onchip_mem+0xff78e164>
  80e3cc:	01400434 	movhi	r5,16
  80e3d0:	0007883a 	mov	r3,zero
  80e3d4:	297fffc4 	addi	r5,r5,-1
  80e3d8:	04bfffc4 	movi	r18,-1
  80e3dc:	0081ffc4 	movi	r2,2047
  80e3e0:	003fa106 	br	80e268 <__alt_mem_onchip_mem+0xff78e268>
  80e3e4:	00c00044 	movi	r3,1
  80e3e8:	1887c83a 	sub	r3,r3,r2
  80e3ec:	01000e04 	movi	r4,56
  80e3f0:	20c1210e 	bge	r4,r3,80e878 <__divdf3+0x78c>
  80e3f4:	98c0004c 	andi	r3,r19,1
  80e3f8:	0005883a 	mov	r2,zero
  80e3fc:	000b883a 	mov	r5,zero
  80e400:	0025883a 	mov	r18,zero
  80e404:	003f9806 	br	80e268 <__alt_mem_onchip_mem+0xff78e268>
  80e408:	8c00fd36 	bltu	r17,r16,80e800 <__divdf3+0x714>
  80e40c:	8440fb26 	beq	r16,r17,80e7fc <__divdf3+0x710>
  80e410:	8007883a 	mov	r3,r16
  80e414:	ad7fffc4 	addi	r21,r21,-1
  80e418:	0021883a 	mov	r16,zero
  80e41c:	4004d63a 	srli	r2,r8,24
  80e420:	8822923a 	slli	r17,r17,8
  80e424:	1809883a 	mov	r4,r3
  80e428:	402c923a 	slli	r22,r8,8
  80e42c:	88b8b03a 	or	fp,r17,r2
  80e430:	e028d43a 	srli	r20,fp,16
  80e434:	d8c00015 	stw	r3,0(sp)
  80e438:	e5ffffcc 	andi	r23,fp,65535
  80e43c:	a00b883a 	mov	r5,r20
  80e440:	080d7840 	call	80d784 <__udivsi3>
  80e444:	d8c00017 	ldw	r3,0(sp)
  80e448:	a00b883a 	mov	r5,r20
  80e44c:	d8800315 	stw	r2,12(sp)
  80e450:	1809883a 	mov	r4,r3
  80e454:	080d7e80 	call	80d7e8 <__umodsi3>
  80e458:	d9800317 	ldw	r6,12(sp)
  80e45c:	1006943a 	slli	r3,r2,16
  80e460:	9004d43a 	srli	r2,r18,16
  80e464:	b9a3383a 	mul	r17,r23,r6
  80e468:	10c4b03a 	or	r2,r2,r3
  80e46c:	1440062e 	bgeu	r2,r17,80e488 <__divdf3+0x39c>
  80e470:	1705883a 	add	r2,r2,fp
  80e474:	30ffffc4 	addi	r3,r6,-1
  80e478:	1700ee36 	bltu	r2,fp,80e834 <__divdf3+0x748>
  80e47c:	1440ed2e 	bgeu	r2,r17,80e834 <__divdf3+0x748>
  80e480:	31bfff84 	addi	r6,r6,-2
  80e484:	1705883a 	add	r2,r2,fp
  80e488:	1463c83a 	sub	r17,r2,r17
  80e48c:	a00b883a 	mov	r5,r20
  80e490:	8809883a 	mov	r4,r17
  80e494:	d9800315 	stw	r6,12(sp)
  80e498:	080d7840 	call	80d784 <__udivsi3>
  80e49c:	a00b883a 	mov	r5,r20
  80e4a0:	8809883a 	mov	r4,r17
  80e4a4:	d8800215 	stw	r2,8(sp)
  80e4a8:	080d7e80 	call	80d7e8 <__umodsi3>
  80e4ac:	d9c00217 	ldw	r7,8(sp)
  80e4b0:	1004943a 	slli	r2,r2,16
  80e4b4:	94bfffcc 	andi	r18,r18,65535
  80e4b8:	b9d1383a 	mul	r8,r23,r7
  80e4bc:	90a4b03a 	or	r18,r18,r2
  80e4c0:	d9800317 	ldw	r6,12(sp)
  80e4c4:	9200062e 	bgeu	r18,r8,80e4e0 <__divdf3+0x3f4>
  80e4c8:	9725883a 	add	r18,r18,fp
  80e4cc:	38bfffc4 	addi	r2,r7,-1
  80e4d0:	9700d636 	bltu	r18,fp,80e82c <__divdf3+0x740>
  80e4d4:	9200d52e 	bgeu	r18,r8,80e82c <__divdf3+0x740>
  80e4d8:	39ffff84 	addi	r7,r7,-2
  80e4dc:	9725883a 	add	r18,r18,fp
  80e4e0:	3004943a 	slli	r2,r6,16
  80e4e4:	b012d43a 	srli	r9,r22,16
  80e4e8:	b1bfffcc 	andi	r6,r22,65535
  80e4ec:	11e2b03a 	or	r17,r2,r7
  80e4f0:	8806d43a 	srli	r3,r17,16
  80e4f4:	893fffcc 	andi	r4,r17,65535
  80e4f8:	218b383a 	mul	r5,r4,r6
  80e4fc:	30c5383a 	mul	r2,r6,r3
  80e500:	2249383a 	mul	r4,r4,r9
  80e504:	280ed43a 	srli	r7,r5,16
  80e508:	9225c83a 	sub	r18,r18,r8
  80e50c:	2089883a 	add	r4,r4,r2
  80e510:	3909883a 	add	r4,r7,r4
  80e514:	1a47383a 	mul	r3,r3,r9
  80e518:	2080022e 	bgeu	r4,r2,80e524 <__divdf3+0x438>
  80e51c:	00800074 	movhi	r2,1
  80e520:	1887883a 	add	r3,r3,r2
  80e524:	2004d43a 	srli	r2,r4,16
  80e528:	2008943a 	slli	r4,r4,16
  80e52c:	297fffcc 	andi	r5,r5,65535
  80e530:	10c7883a 	add	r3,r2,r3
  80e534:	2149883a 	add	r4,r4,r5
  80e538:	90c0a536 	bltu	r18,r3,80e7d0 <__divdf3+0x6e4>
  80e53c:	90c0bf26 	beq	r18,r3,80e83c <__divdf3+0x750>
  80e540:	90c7c83a 	sub	r3,r18,r3
  80e544:	810fc83a 	sub	r7,r16,r4
  80e548:	81e5803a 	cmpltu	r18,r16,r7
  80e54c:	1ca5c83a 	sub	r18,r3,r18
  80e550:	e480c126 	beq	fp,r18,80e858 <__divdf3+0x76c>
  80e554:	a00b883a 	mov	r5,r20
  80e558:	9009883a 	mov	r4,r18
  80e55c:	d9800315 	stw	r6,12(sp)
  80e560:	d9c00215 	stw	r7,8(sp)
  80e564:	da400115 	stw	r9,4(sp)
  80e568:	080d7840 	call	80d784 <__udivsi3>
  80e56c:	a00b883a 	mov	r5,r20
  80e570:	9009883a 	mov	r4,r18
  80e574:	d8800015 	stw	r2,0(sp)
  80e578:	080d7e80 	call	80d7e8 <__umodsi3>
  80e57c:	d9c00217 	ldw	r7,8(sp)
  80e580:	da000017 	ldw	r8,0(sp)
  80e584:	1006943a 	slli	r3,r2,16
  80e588:	3804d43a 	srli	r2,r7,16
  80e58c:	ba21383a 	mul	r16,r23,r8
  80e590:	d9800317 	ldw	r6,12(sp)
  80e594:	10c4b03a 	or	r2,r2,r3
  80e598:	da400117 	ldw	r9,4(sp)
  80e59c:	1400062e 	bgeu	r2,r16,80e5b8 <__divdf3+0x4cc>
  80e5a0:	1705883a 	add	r2,r2,fp
  80e5a4:	40ffffc4 	addi	r3,r8,-1
  80e5a8:	1700ad36 	bltu	r2,fp,80e860 <__divdf3+0x774>
  80e5ac:	1400ac2e 	bgeu	r2,r16,80e860 <__divdf3+0x774>
  80e5b0:	423fff84 	addi	r8,r8,-2
  80e5b4:	1705883a 	add	r2,r2,fp
  80e5b8:	1421c83a 	sub	r16,r2,r16
  80e5bc:	a00b883a 	mov	r5,r20
  80e5c0:	8009883a 	mov	r4,r16
  80e5c4:	d9800315 	stw	r6,12(sp)
  80e5c8:	d9c00215 	stw	r7,8(sp)
  80e5cc:	da000015 	stw	r8,0(sp)
  80e5d0:	da400115 	stw	r9,4(sp)
  80e5d4:	080d7840 	call	80d784 <__udivsi3>
  80e5d8:	8009883a 	mov	r4,r16
  80e5dc:	a00b883a 	mov	r5,r20
  80e5e0:	1025883a 	mov	r18,r2
  80e5e4:	080d7e80 	call	80d7e8 <__umodsi3>
  80e5e8:	d9c00217 	ldw	r7,8(sp)
  80e5ec:	1004943a 	slli	r2,r2,16
  80e5f0:	bcaf383a 	mul	r23,r23,r18
  80e5f4:	393fffcc 	andi	r4,r7,65535
  80e5f8:	2088b03a 	or	r4,r4,r2
  80e5fc:	d9800317 	ldw	r6,12(sp)
  80e600:	da000017 	ldw	r8,0(sp)
  80e604:	da400117 	ldw	r9,4(sp)
  80e608:	25c0062e 	bgeu	r4,r23,80e624 <__divdf3+0x538>
  80e60c:	2709883a 	add	r4,r4,fp
  80e610:	90bfffc4 	addi	r2,r18,-1
  80e614:	27009436 	bltu	r4,fp,80e868 <__divdf3+0x77c>
  80e618:	25c0932e 	bgeu	r4,r23,80e868 <__divdf3+0x77c>
  80e61c:	94bfff84 	addi	r18,r18,-2
  80e620:	2709883a 	add	r4,r4,fp
  80e624:	4004943a 	slli	r2,r8,16
  80e628:	25efc83a 	sub	r23,r4,r23
  80e62c:	1490b03a 	or	r8,r2,r18
  80e630:	4008d43a 	srli	r4,r8,16
  80e634:	40ffffcc 	andi	r3,r8,65535
  80e638:	30c5383a 	mul	r2,r6,r3
  80e63c:	1a47383a 	mul	r3,r3,r9
  80e640:	310d383a 	mul	r6,r6,r4
  80e644:	100ad43a 	srli	r5,r2,16
  80e648:	4913383a 	mul	r9,r9,r4
  80e64c:	1987883a 	add	r3,r3,r6
  80e650:	28c7883a 	add	r3,r5,r3
  80e654:	1980022e 	bgeu	r3,r6,80e660 <__divdf3+0x574>
  80e658:	01000074 	movhi	r4,1
  80e65c:	4913883a 	add	r9,r9,r4
  80e660:	1808d43a 	srli	r4,r3,16
  80e664:	1806943a 	slli	r3,r3,16
  80e668:	10bfffcc 	andi	r2,r2,65535
  80e66c:	2253883a 	add	r9,r4,r9
  80e670:	1887883a 	add	r3,r3,r2
  80e674:	ba403836 	bltu	r23,r9,80e758 <__divdf3+0x66c>
  80e678:	ba403626 	beq	r23,r9,80e754 <__divdf3+0x668>
  80e67c:	42000054 	ori	r8,r8,1
  80e680:	a880ffc4 	addi	r2,r21,1023
  80e684:	00bf570e 	bge	zero,r2,80e3e4 <__alt_mem_onchip_mem+0xff78e3e4>
  80e688:	40c001cc 	andi	r3,r8,7
  80e68c:	18000726 	beq	r3,zero,80e6ac <__divdf3+0x5c0>
  80e690:	40c003cc 	andi	r3,r8,15
  80e694:	01000104 	movi	r4,4
  80e698:	19000426 	beq	r3,r4,80e6ac <__divdf3+0x5c0>
  80e69c:	4107883a 	add	r3,r8,r4
  80e6a0:	1a11803a 	cmpltu	r8,r3,r8
  80e6a4:	8a23883a 	add	r17,r17,r8
  80e6a8:	1811883a 	mov	r8,r3
  80e6ac:	88c0402c 	andhi	r3,r17,256
  80e6b0:	18000426 	beq	r3,zero,80e6c4 <__divdf3+0x5d8>
  80e6b4:	00ffc034 	movhi	r3,65280
  80e6b8:	18ffffc4 	addi	r3,r3,-1
  80e6bc:	a8810004 	addi	r2,r21,1024
  80e6c0:	88e2703a 	and	r17,r17,r3
  80e6c4:	00c1ff84 	movi	r3,2046
  80e6c8:	18bee316 	blt	r3,r2,80e258 <__alt_mem_onchip_mem+0xff78e258>
  80e6cc:	8824977a 	slli	r18,r17,29
  80e6d0:	4010d0fa 	srli	r8,r8,3
  80e6d4:	8822927a 	slli	r17,r17,9
  80e6d8:	1081ffcc 	andi	r2,r2,2047
  80e6dc:	9224b03a 	or	r18,r18,r8
  80e6e0:	880ad33a 	srli	r5,r17,12
  80e6e4:	98c0004c 	andi	r3,r19,1
  80e6e8:	003edf06 	br	80e268 <__alt_mem_onchip_mem+0xff78e268>
  80e6ec:	8080022c 	andhi	r2,r16,8
  80e6f0:	10001226 	beq	r2,zero,80e73c <__divdf3+0x650>
  80e6f4:	8880022c 	andhi	r2,r17,8
  80e6f8:	1000101e 	bne	r2,zero,80e73c <__divdf3+0x650>
  80e6fc:	00800434 	movhi	r2,16
  80e700:	89400234 	orhi	r5,r17,8
  80e704:	10bfffc4 	addi	r2,r2,-1
  80e708:	b007883a 	mov	r3,r22
  80e70c:	288a703a 	and	r5,r5,r2
  80e710:	4025883a 	mov	r18,r8
  80e714:	003f3106 	br	80e3dc <__alt_mem_onchip_mem+0xff78e3dc>
  80e718:	008000c4 	movi	r2,3
  80e71c:	3880a626 	beq	r7,r2,80e9b8 <__divdf3+0x8cc>
  80e720:	00800044 	movi	r2,1
  80e724:	3880521e 	bne	r7,r2,80e870 <__divdf3+0x784>
  80e728:	b807883a 	mov	r3,r23
  80e72c:	0005883a 	mov	r2,zero
  80e730:	000b883a 	mov	r5,zero
  80e734:	0025883a 	mov	r18,zero
  80e738:	003ecb06 	br	80e268 <__alt_mem_onchip_mem+0xff78e268>
  80e73c:	00800434 	movhi	r2,16
  80e740:	81400234 	orhi	r5,r16,8
  80e744:	10bfffc4 	addi	r2,r2,-1
  80e748:	a007883a 	mov	r3,r20
  80e74c:	288a703a 	and	r5,r5,r2
  80e750:	003f2206 	br	80e3dc <__alt_mem_onchip_mem+0xff78e3dc>
  80e754:	183fca26 	beq	r3,zero,80e680 <__alt_mem_onchip_mem+0xff78e680>
  80e758:	e5ef883a 	add	r23,fp,r23
  80e75c:	40bfffc4 	addi	r2,r8,-1
  80e760:	bf00392e 	bgeu	r23,fp,80e848 <__divdf3+0x75c>
  80e764:	1011883a 	mov	r8,r2
  80e768:	ba7fc41e 	bne	r23,r9,80e67c <__alt_mem_onchip_mem+0xff78e67c>
  80e76c:	b0ffc31e 	bne	r22,r3,80e67c <__alt_mem_onchip_mem+0xff78e67c>
  80e770:	003fc306 	br	80e680 <__alt_mem_onchip_mem+0xff78e680>
  80e774:	143ff604 	addi	r16,r2,-40
  80e778:	9c20983a 	sll	r16,r19,r16
  80e77c:	0025883a 	mov	r18,zero
  80e780:	003ee206 	br	80e30c <__alt_mem_onchip_mem+0xff78e30c>
  80e784:	d9800315 	stw	r6,12(sp)
  80e788:	d9c00215 	stw	r7,8(sp)
  80e78c:	080fe440 	call	80fe44 <__clzsi2>
  80e790:	10800804 	addi	r2,r2,32
  80e794:	d9c00217 	ldw	r7,8(sp)
  80e798:	d9800317 	ldw	r6,12(sp)
  80e79c:	003ed106 	br	80e2e4 <__alt_mem_onchip_mem+0xff78e2e4>
  80e7a0:	147ff604 	addi	r17,r2,-40
  80e7a4:	3462983a 	sll	r17,r6,r17
  80e7a8:	0011883a 	mov	r8,zero
  80e7ac:	003ef506 	br	80e384 <__alt_mem_onchip_mem+0xff78e384>
  80e7b0:	3009883a 	mov	r4,r6
  80e7b4:	d9800315 	stw	r6,12(sp)
  80e7b8:	da400115 	stw	r9,4(sp)
  80e7bc:	080fe440 	call	80fe44 <__clzsi2>
  80e7c0:	10800804 	addi	r2,r2,32
  80e7c4:	da400117 	ldw	r9,4(sp)
  80e7c8:	d9800317 	ldw	r6,12(sp)
  80e7cc:	003ee306 	br	80e35c <__alt_mem_onchip_mem+0xff78e35c>
  80e7d0:	85a1883a 	add	r16,r16,r22
  80e7d4:	8585803a 	cmpltu	r2,r16,r22
  80e7d8:	1705883a 	add	r2,r2,fp
  80e7dc:	14a5883a 	add	r18,r2,r18
  80e7e0:	88bfffc4 	addi	r2,r17,-1
  80e7e4:	e4800c2e 	bgeu	fp,r18,80e818 <__divdf3+0x72c>
  80e7e8:	90c03e36 	bltu	r18,r3,80e8e4 <__divdf3+0x7f8>
  80e7ec:	1c806926 	beq	r3,r18,80e994 <__divdf3+0x8a8>
  80e7f0:	90c7c83a 	sub	r3,r18,r3
  80e7f4:	1023883a 	mov	r17,r2
  80e7f8:	003f5206 	br	80e544 <__alt_mem_onchip_mem+0xff78e544>
  80e7fc:	923f0436 	bltu	r18,r8,80e410 <__alt_mem_onchip_mem+0xff78e410>
  80e800:	800897fa 	slli	r4,r16,31
  80e804:	9004d07a 	srli	r2,r18,1
  80e808:	8006d07a 	srli	r3,r16,1
  80e80c:	902097fa 	slli	r16,r18,31
  80e810:	20a4b03a 	or	r18,r4,r2
  80e814:	003f0106 	br	80e41c <__alt_mem_onchip_mem+0xff78e41c>
  80e818:	e4bff51e 	bne	fp,r18,80e7f0 <__alt_mem_onchip_mem+0xff78e7f0>
  80e81c:	85bff22e 	bgeu	r16,r22,80e7e8 <__alt_mem_onchip_mem+0xff78e7e8>
  80e820:	e0c7c83a 	sub	r3,fp,r3
  80e824:	1023883a 	mov	r17,r2
  80e828:	003f4606 	br	80e544 <__alt_mem_onchip_mem+0xff78e544>
  80e82c:	100f883a 	mov	r7,r2
  80e830:	003f2b06 	br	80e4e0 <__alt_mem_onchip_mem+0xff78e4e0>
  80e834:	180d883a 	mov	r6,r3
  80e838:	003f1306 	br	80e488 <__alt_mem_onchip_mem+0xff78e488>
  80e83c:	813fe436 	bltu	r16,r4,80e7d0 <__alt_mem_onchip_mem+0xff78e7d0>
  80e840:	0007883a 	mov	r3,zero
  80e844:	003f3f06 	br	80e544 <__alt_mem_onchip_mem+0xff78e544>
  80e848:	ba402c36 	bltu	r23,r9,80e8fc <__divdf3+0x810>
  80e84c:	4dc05426 	beq	r9,r23,80e9a0 <__divdf3+0x8b4>
  80e850:	1011883a 	mov	r8,r2
  80e854:	003f8906 	br	80e67c <__alt_mem_onchip_mem+0xff78e67c>
  80e858:	023fffc4 	movi	r8,-1
  80e85c:	003f8806 	br	80e680 <__alt_mem_onchip_mem+0xff78e680>
  80e860:	1811883a 	mov	r8,r3
  80e864:	003f5406 	br	80e5b8 <__alt_mem_onchip_mem+0xff78e5b8>
  80e868:	1025883a 	mov	r18,r2
  80e86c:	003f6d06 	br	80e624 <__alt_mem_onchip_mem+0xff78e624>
  80e870:	b827883a 	mov	r19,r23
  80e874:	003f8206 	br	80e680 <__alt_mem_onchip_mem+0xff78e680>
  80e878:	010007c4 	movi	r4,31
  80e87c:	20c02616 	blt	r4,r3,80e918 <__divdf3+0x82c>
  80e880:	00800804 	movi	r2,32
  80e884:	10c5c83a 	sub	r2,r2,r3
  80e888:	888a983a 	sll	r5,r17,r2
  80e88c:	40c8d83a 	srl	r4,r8,r3
  80e890:	4084983a 	sll	r2,r8,r2
  80e894:	88e2d83a 	srl	r17,r17,r3
  80e898:	2906b03a 	or	r3,r5,r4
  80e89c:	1004c03a 	cmpne	r2,r2,zero
  80e8a0:	1886b03a 	or	r3,r3,r2
  80e8a4:	188001cc 	andi	r2,r3,7
  80e8a8:	10000726 	beq	r2,zero,80e8c8 <__divdf3+0x7dc>
  80e8ac:	188003cc 	andi	r2,r3,15
  80e8b0:	01000104 	movi	r4,4
  80e8b4:	11000426 	beq	r2,r4,80e8c8 <__divdf3+0x7dc>
  80e8b8:	1805883a 	mov	r2,r3
  80e8bc:	10c00104 	addi	r3,r2,4
  80e8c0:	1885803a 	cmpltu	r2,r3,r2
  80e8c4:	88a3883a 	add	r17,r17,r2
  80e8c8:	8880202c 	andhi	r2,r17,128
  80e8cc:	10002726 	beq	r2,zero,80e96c <__divdf3+0x880>
  80e8d0:	98c0004c 	andi	r3,r19,1
  80e8d4:	00800044 	movi	r2,1
  80e8d8:	000b883a 	mov	r5,zero
  80e8dc:	0025883a 	mov	r18,zero
  80e8e0:	003e6106 	br	80e268 <__alt_mem_onchip_mem+0xff78e268>
  80e8e4:	85a1883a 	add	r16,r16,r22
  80e8e8:	8585803a 	cmpltu	r2,r16,r22
  80e8ec:	1705883a 	add	r2,r2,fp
  80e8f0:	14a5883a 	add	r18,r2,r18
  80e8f4:	8c7fff84 	addi	r17,r17,-2
  80e8f8:	003f1106 	br	80e540 <__alt_mem_onchip_mem+0xff78e540>
  80e8fc:	b589883a 	add	r4,r22,r22
  80e900:	25ad803a 	cmpltu	r22,r4,r22
  80e904:	b739883a 	add	fp,r22,fp
  80e908:	40bfff84 	addi	r2,r8,-2
  80e90c:	bf2f883a 	add	r23,r23,fp
  80e910:	202d883a 	mov	r22,r4
  80e914:	003f9306 	br	80e764 <__alt_mem_onchip_mem+0xff78e764>
  80e918:	013ff844 	movi	r4,-31
  80e91c:	2085c83a 	sub	r2,r4,r2
  80e920:	8888d83a 	srl	r4,r17,r2
  80e924:	00800804 	movi	r2,32
  80e928:	18802126 	beq	r3,r2,80e9b0 <__divdf3+0x8c4>
  80e92c:	00801004 	movi	r2,64
  80e930:	10c5c83a 	sub	r2,r2,r3
  80e934:	8884983a 	sll	r2,r17,r2
  80e938:	1204b03a 	or	r2,r2,r8
  80e93c:	1004c03a 	cmpne	r2,r2,zero
  80e940:	2084b03a 	or	r2,r4,r2
  80e944:	144001cc 	andi	r17,r2,7
  80e948:	88000d1e 	bne	r17,zero,80e980 <__divdf3+0x894>
  80e94c:	000b883a 	mov	r5,zero
  80e950:	1024d0fa 	srli	r18,r2,3
  80e954:	98c0004c 	andi	r3,r19,1
  80e958:	0005883a 	mov	r2,zero
  80e95c:	9464b03a 	or	r18,r18,r17
  80e960:	003e4106 	br	80e268 <__alt_mem_onchip_mem+0xff78e268>
  80e964:	1007883a 	mov	r3,r2
  80e968:	0023883a 	mov	r17,zero
  80e96c:	880a927a 	slli	r5,r17,9
  80e970:	1805883a 	mov	r2,r3
  80e974:	8822977a 	slli	r17,r17,29
  80e978:	280ad33a 	srli	r5,r5,12
  80e97c:	003ff406 	br	80e950 <__alt_mem_onchip_mem+0xff78e950>
  80e980:	10c003cc 	andi	r3,r2,15
  80e984:	01000104 	movi	r4,4
  80e988:	193ff626 	beq	r3,r4,80e964 <__alt_mem_onchip_mem+0xff78e964>
  80e98c:	0023883a 	mov	r17,zero
  80e990:	003fca06 	br	80e8bc <__alt_mem_onchip_mem+0xff78e8bc>
  80e994:	813fd336 	bltu	r16,r4,80e8e4 <__alt_mem_onchip_mem+0xff78e8e4>
  80e998:	1023883a 	mov	r17,r2
  80e99c:	003fa806 	br	80e840 <__alt_mem_onchip_mem+0xff78e840>
  80e9a0:	b0ffd636 	bltu	r22,r3,80e8fc <__alt_mem_onchip_mem+0xff78e8fc>
  80e9a4:	1011883a 	mov	r8,r2
  80e9a8:	b0ff341e 	bne	r22,r3,80e67c <__alt_mem_onchip_mem+0xff78e67c>
  80e9ac:	003f3406 	br	80e680 <__alt_mem_onchip_mem+0xff78e680>
  80e9b0:	0005883a 	mov	r2,zero
  80e9b4:	003fe006 	br	80e938 <__alt_mem_onchip_mem+0xff78e938>
  80e9b8:	00800434 	movhi	r2,16
  80e9bc:	89400234 	orhi	r5,r17,8
  80e9c0:	10bfffc4 	addi	r2,r2,-1
  80e9c4:	b807883a 	mov	r3,r23
  80e9c8:	288a703a 	and	r5,r5,r2
  80e9cc:	4025883a 	mov	r18,r8
  80e9d0:	003e8206 	br	80e3dc <__alt_mem_onchip_mem+0xff78e3dc>

0080e9d4 <__eqdf2>:
  80e9d4:	2804d53a 	srli	r2,r5,20
  80e9d8:	3806d53a 	srli	r3,r7,20
  80e9dc:	02000434 	movhi	r8,16
  80e9e0:	423fffc4 	addi	r8,r8,-1
  80e9e4:	1081ffcc 	andi	r2,r2,2047
  80e9e8:	0281ffc4 	movi	r10,2047
  80e9ec:	2a12703a 	and	r9,r5,r8
  80e9f0:	18c1ffcc 	andi	r3,r3,2047
  80e9f4:	3a10703a 	and	r8,r7,r8
  80e9f8:	280ad7fa 	srli	r5,r5,31
  80e9fc:	380ed7fa 	srli	r7,r7,31
  80ea00:	12801026 	beq	r2,r10,80ea44 <__eqdf2+0x70>
  80ea04:	0281ffc4 	movi	r10,2047
  80ea08:	1a800a26 	beq	r3,r10,80ea34 <__eqdf2+0x60>
  80ea0c:	10c00226 	beq	r2,r3,80ea18 <__eqdf2+0x44>
  80ea10:	00800044 	movi	r2,1
  80ea14:	f800283a 	ret
  80ea18:	4a3ffd1e 	bne	r9,r8,80ea10 <__alt_mem_onchip_mem+0xff78ea10>
  80ea1c:	21bffc1e 	bne	r4,r6,80ea10 <__alt_mem_onchip_mem+0xff78ea10>
  80ea20:	29c00c26 	beq	r5,r7,80ea54 <__eqdf2+0x80>
  80ea24:	103ffa1e 	bne	r2,zero,80ea10 <__alt_mem_onchip_mem+0xff78ea10>
  80ea28:	2244b03a 	or	r2,r4,r9
  80ea2c:	1004c03a 	cmpne	r2,r2,zero
  80ea30:	f800283a 	ret
  80ea34:	3214b03a 	or	r10,r6,r8
  80ea38:	503ff426 	beq	r10,zero,80ea0c <__alt_mem_onchip_mem+0xff78ea0c>
  80ea3c:	00800044 	movi	r2,1
  80ea40:	f800283a 	ret
  80ea44:	2254b03a 	or	r10,r4,r9
  80ea48:	503fee26 	beq	r10,zero,80ea04 <__alt_mem_onchip_mem+0xff78ea04>
  80ea4c:	00800044 	movi	r2,1
  80ea50:	f800283a 	ret
  80ea54:	0005883a 	mov	r2,zero
  80ea58:	f800283a 	ret

0080ea5c <__gedf2>:
  80ea5c:	2804d53a 	srli	r2,r5,20
  80ea60:	3806d53a 	srli	r3,r7,20
  80ea64:	02000434 	movhi	r8,16
  80ea68:	423fffc4 	addi	r8,r8,-1
  80ea6c:	1081ffcc 	andi	r2,r2,2047
  80ea70:	0241ffc4 	movi	r9,2047
  80ea74:	2a14703a 	and	r10,r5,r8
  80ea78:	18c1ffcc 	andi	r3,r3,2047
  80ea7c:	3a10703a 	and	r8,r7,r8
  80ea80:	280ad7fa 	srli	r5,r5,31
  80ea84:	380ed7fa 	srli	r7,r7,31
  80ea88:	12401d26 	beq	r2,r9,80eb00 <__gedf2+0xa4>
  80ea8c:	0241ffc4 	movi	r9,2047
  80ea90:	1a401226 	beq	r3,r9,80eadc <__gedf2+0x80>
  80ea94:	1000081e 	bne	r2,zero,80eab8 <__gedf2+0x5c>
  80ea98:	2296b03a 	or	r11,r4,r10
  80ea9c:	5813003a 	cmpeq	r9,r11,zero
  80eaa0:	1800091e 	bne	r3,zero,80eac8 <__gedf2+0x6c>
  80eaa4:	3218b03a 	or	r12,r6,r8
  80eaa8:	6000071e 	bne	r12,zero,80eac8 <__gedf2+0x6c>
  80eaac:	0005883a 	mov	r2,zero
  80eab0:	5800101e 	bne	r11,zero,80eaf4 <__gedf2+0x98>
  80eab4:	f800283a 	ret
  80eab8:	18000c1e 	bne	r3,zero,80eaec <__gedf2+0x90>
  80eabc:	3212b03a 	or	r9,r6,r8
  80eac0:	48000c26 	beq	r9,zero,80eaf4 <__gedf2+0x98>
  80eac4:	0013883a 	mov	r9,zero
  80eac8:	39c03fcc 	andi	r7,r7,255
  80eacc:	48000826 	beq	r9,zero,80eaf0 <__gedf2+0x94>
  80ead0:	38000926 	beq	r7,zero,80eaf8 <__gedf2+0x9c>
  80ead4:	00800044 	movi	r2,1
  80ead8:	f800283a 	ret
  80eadc:	3212b03a 	or	r9,r6,r8
  80eae0:	483fec26 	beq	r9,zero,80ea94 <__alt_mem_onchip_mem+0xff78ea94>
  80eae4:	00bfff84 	movi	r2,-2
  80eae8:	f800283a 	ret
  80eaec:	39c03fcc 	andi	r7,r7,255
  80eaf0:	29c00626 	beq	r5,r7,80eb0c <__gedf2+0xb0>
  80eaf4:	283ff726 	beq	r5,zero,80ead4 <__alt_mem_onchip_mem+0xff78ead4>
  80eaf8:	00bfffc4 	movi	r2,-1
  80eafc:	f800283a 	ret
  80eb00:	2292b03a 	or	r9,r4,r10
  80eb04:	483fe126 	beq	r9,zero,80ea8c <__alt_mem_onchip_mem+0xff78ea8c>
  80eb08:	003ff606 	br	80eae4 <__alt_mem_onchip_mem+0xff78eae4>
  80eb0c:	18bff916 	blt	r3,r2,80eaf4 <__alt_mem_onchip_mem+0xff78eaf4>
  80eb10:	10c00316 	blt	r2,r3,80eb20 <__gedf2+0xc4>
  80eb14:	42bff736 	bltu	r8,r10,80eaf4 <__alt_mem_onchip_mem+0xff78eaf4>
  80eb18:	52000326 	beq	r10,r8,80eb28 <__gedf2+0xcc>
  80eb1c:	5200042e 	bgeu	r10,r8,80eb30 <__gedf2+0xd4>
  80eb20:	283fec1e 	bne	r5,zero,80ead4 <__alt_mem_onchip_mem+0xff78ead4>
  80eb24:	003ff406 	br	80eaf8 <__alt_mem_onchip_mem+0xff78eaf8>
  80eb28:	313ff236 	bltu	r6,r4,80eaf4 <__alt_mem_onchip_mem+0xff78eaf4>
  80eb2c:	21bffc36 	bltu	r4,r6,80eb20 <__alt_mem_onchip_mem+0xff78eb20>
  80eb30:	0005883a 	mov	r2,zero
  80eb34:	f800283a 	ret

0080eb38 <__ledf2>:
  80eb38:	2804d53a 	srli	r2,r5,20
  80eb3c:	3810d53a 	srli	r8,r7,20
  80eb40:	00c00434 	movhi	r3,16
  80eb44:	18ffffc4 	addi	r3,r3,-1
  80eb48:	1081ffcc 	andi	r2,r2,2047
  80eb4c:	0241ffc4 	movi	r9,2047
  80eb50:	28d4703a 	and	r10,r5,r3
  80eb54:	4201ffcc 	andi	r8,r8,2047
  80eb58:	38c6703a 	and	r3,r7,r3
  80eb5c:	280ad7fa 	srli	r5,r5,31
  80eb60:	380ed7fa 	srli	r7,r7,31
  80eb64:	12401f26 	beq	r2,r9,80ebe4 <__ledf2+0xac>
  80eb68:	0241ffc4 	movi	r9,2047
  80eb6c:	42401426 	beq	r8,r9,80ebc0 <__ledf2+0x88>
  80eb70:	1000091e 	bne	r2,zero,80eb98 <__ledf2+0x60>
  80eb74:	2296b03a 	or	r11,r4,r10
  80eb78:	5813003a 	cmpeq	r9,r11,zero
  80eb7c:	29403fcc 	andi	r5,r5,255
  80eb80:	40000a1e 	bne	r8,zero,80ebac <__ledf2+0x74>
  80eb84:	30d8b03a 	or	r12,r6,r3
  80eb88:	6000081e 	bne	r12,zero,80ebac <__ledf2+0x74>
  80eb8c:	0005883a 	mov	r2,zero
  80eb90:	5800111e 	bne	r11,zero,80ebd8 <__ledf2+0xa0>
  80eb94:	f800283a 	ret
  80eb98:	29403fcc 	andi	r5,r5,255
  80eb9c:	40000c1e 	bne	r8,zero,80ebd0 <__ledf2+0x98>
  80eba0:	30d2b03a 	or	r9,r6,r3
  80eba4:	48000c26 	beq	r9,zero,80ebd8 <__ledf2+0xa0>
  80eba8:	0013883a 	mov	r9,zero
  80ebac:	39c03fcc 	andi	r7,r7,255
  80ebb0:	48000826 	beq	r9,zero,80ebd4 <__ledf2+0x9c>
  80ebb4:	38001126 	beq	r7,zero,80ebfc <__ledf2+0xc4>
  80ebb8:	00800044 	movi	r2,1
  80ebbc:	f800283a 	ret
  80ebc0:	30d2b03a 	or	r9,r6,r3
  80ebc4:	483fea26 	beq	r9,zero,80eb70 <__alt_mem_onchip_mem+0xff78eb70>
  80ebc8:	00800084 	movi	r2,2
  80ebcc:	f800283a 	ret
  80ebd0:	39c03fcc 	andi	r7,r7,255
  80ebd4:	39400726 	beq	r7,r5,80ebf4 <__ledf2+0xbc>
  80ebd8:	2800081e 	bne	r5,zero,80ebfc <__ledf2+0xc4>
  80ebdc:	00800044 	movi	r2,1
  80ebe0:	f800283a 	ret
  80ebe4:	2292b03a 	or	r9,r4,r10
  80ebe8:	483fdf26 	beq	r9,zero,80eb68 <__alt_mem_onchip_mem+0xff78eb68>
  80ebec:	00800084 	movi	r2,2
  80ebf0:	f800283a 	ret
  80ebf4:	4080030e 	bge	r8,r2,80ec04 <__ledf2+0xcc>
  80ebf8:	383fef26 	beq	r7,zero,80ebb8 <__alt_mem_onchip_mem+0xff78ebb8>
  80ebfc:	00bfffc4 	movi	r2,-1
  80ec00:	f800283a 	ret
  80ec04:	123feb16 	blt	r2,r8,80ebb4 <__alt_mem_onchip_mem+0xff78ebb4>
  80ec08:	1abff336 	bltu	r3,r10,80ebd8 <__alt_mem_onchip_mem+0xff78ebd8>
  80ec0c:	50c00326 	beq	r10,r3,80ec1c <__ledf2+0xe4>
  80ec10:	50c0042e 	bgeu	r10,r3,80ec24 <__ledf2+0xec>
  80ec14:	283fe81e 	bne	r5,zero,80ebb8 <__alt_mem_onchip_mem+0xff78ebb8>
  80ec18:	003ff806 	br	80ebfc <__alt_mem_onchip_mem+0xff78ebfc>
  80ec1c:	313fee36 	bltu	r6,r4,80ebd8 <__alt_mem_onchip_mem+0xff78ebd8>
  80ec20:	21bffc36 	bltu	r4,r6,80ec14 <__alt_mem_onchip_mem+0xff78ec14>
  80ec24:	0005883a 	mov	r2,zero
  80ec28:	f800283a 	ret

0080ec2c <__muldf3>:
  80ec2c:	defff304 	addi	sp,sp,-52
  80ec30:	2804d53a 	srli	r2,r5,20
  80ec34:	dd800915 	stw	r22,36(sp)
  80ec38:	282cd7fa 	srli	r22,r5,31
  80ec3c:	dc000315 	stw	r16,12(sp)
  80ec40:	04000434 	movhi	r16,16
  80ec44:	dd400815 	stw	r21,32(sp)
  80ec48:	dc800515 	stw	r18,20(sp)
  80ec4c:	843fffc4 	addi	r16,r16,-1
  80ec50:	dfc00c15 	stw	ra,48(sp)
  80ec54:	df000b15 	stw	fp,44(sp)
  80ec58:	ddc00a15 	stw	r23,40(sp)
  80ec5c:	dd000715 	stw	r20,28(sp)
  80ec60:	dcc00615 	stw	r19,24(sp)
  80ec64:	dc400415 	stw	r17,16(sp)
  80ec68:	1481ffcc 	andi	r18,r2,2047
  80ec6c:	2c20703a 	and	r16,r5,r16
  80ec70:	b02b883a 	mov	r21,r22
  80ec74:	b2403fcc 	andi	r9,r22,255
  80ec78:	90006026 	beq	r18,zero,80edfc <__muldf3+0x1d0>
  80ec7c:	0081ffc4 	movi	r2,2047
  80ec80:	2029883a 	mov	r20,r4
  80ec84:	90803626 	beq	r18,r2,80ed60 <__muldf3+0x134>
  80ec88:	80800434 	orhi	r2,r16,16
  80ec8c:	100490fa 	slli	r2,r2,3
  80ec90:	2020d77a 	srli	r16,r4,29
  80ec94:	202890fa 	slli	r20,r4,3
  80ec98:	94bf0044 	addi	r18,r18,-1023
  80ec9c:	80a0b03a 	or	r16,r16,r2
  80eca0:	0027883a 	mov	r19,zero
  80eca4:	0039883a 	mov	fp,zero
  80eca8:	3804d53a 	srli	r2,r7,20
  80ecac:	382ed7fa 	srli	r23,r7,31
  80ecb0:	04400434 	movhi	r17,16
  80ecb4:	8c7fffc4 	addi	r17,r17,-1
  80ecb8:	1081ffcc 	andi	r2,r2,2047
  80ecbc:	3011883a 	mov	r8,r6
  80ecc0:	3c62703a 	and	r17,r7,r17
  80ecc4:	ba803fcc 	andi	r10,r23,255
  80ecc8:	10006d26 	beq	r2,zero,80ee80 <__muldf3+0x254>
  80eccc:	00c1ffc4 	movi	r3,2047
  80ecd0:	10c06526 	beq	r2,r3,80ee68 <__muldf3+0x23c>
  80ecd4:	88c00434 	orhi	r3,r17,16
  80ecd8:	180690fa 	slli	r3,r3,3
  80ecdc:	3022d77a 	srli	r17,r6,29
  80ece0:	301090fa 	slli	r8,r6,3
  80ece4:	10bf0044 	addi	r2,r2,-1023
  80ece8:	88e2b03a 	or	r17,r17,r3
  80ecec:	000b883a 	mov	r5,zero
  80ecf0:	9085883a 	add	r2,r18,r2
  80ecf4:	2cc8b03a 	or	r4,r5,r19
  80ecf8:	00c003c4 	movi	r3,15
  80ecfc:	bdacf03a 	xor	r22,r23,r22
  80ed00:	12c00044 	addi	r11,r2,1
  80ed04:	19009936 	bltu	r3,r4,80ef6c <__muldf3+0x340>
  80ed08:	200890ba 	slli	r4,r4,2
  80ed0c:	00c02074 	movhi	r3,129
  80ed10:	18fb4804 	addi	r3,r3,-4832
  80ed14:	20c9883a 	add	r4,r4,r3
  80ed18:	20c00017 	ldw	r3,0(r4)
  80ed1c:	1800683a 	jmp	r3
  80ed20:	0080ef6c 	andhi	r2,zero,957
  80ed24:	0080ed80 	call	80ed8 <__alt_mem_sdram-0x77f128>
  80ed28:	0080ed80 	call	80ed8 <__alt_mem_sdram-0x77f128>
  80ed2c:	0080ed7c 	xorhi	r2,zero,949
  80ed30:	0080ef48 	cmpgei	r2,zero,957
  80ed34:	0080ef48 	cmpgei	r2,zero,957
  80ed38:	0080ef30 	cmpltui	r2,zero,956
  80ed3c:	0080ed7c 	xorhi	r2,zero,949
  80ed40:	0080ef48 	cmpgei	r2,zero,957
  80ed44:	0080ef30 	cmpltui	r2,zero,956
  80ed48:	0080ef48 	cmpgei	r2,zero,957
  80ed4c:	0080ed7c 	xorhi	r2,zero,949
  80ed50:	0080ef58 	cmpnei	r2,zero,957
  80ed54:	0080ef58 	cmpnei	r2,zero,957
  80ed58:	0080ef58 	cmpnei	r2,zero,957
  80ed5c:	0080f174 	movhi	r2,965
  80ed60:	2404b03a 	or	r2,r4,r16
  80ed64:	10006f1e 	bne	r2,zero,80ef24 <__muldf3+0x2f8>
  80ed68:	04c00204 	movi	r19,8
  80ed6c:	0021883a 	mov	r16,zero
  80ed70:	0029883a 	mov	r20,zero
  80ed74:	07000084 	movi	fp,2
  80ed78:	003fcb06 	br	80eca8 <__alt_mem_onchip_mem+0xff78eca8>
  80ed7c:	502d883a 	mov	r22,r10
  80ed80:	00800084 	movi	r2,2
  80ed84:	28805726 	beq	r5,r2,80eee4 <__muldf3+0x2b8>
  80ed88:	008000c4 	movi	r2,3
  80ed8c:	28816626 	beq	r5,r2,80f328 <__muldf3+0x6fc>
  80ed90:	00800044 	movi	r2,1
  80ed94:	2881411e 	bne	r5,r2,80f29c <__muldf3+0x670>
  80ed98:	b02b883a 	mov	r21,r22
  80ed9c:	0005883a 	mov	r2,zero
  80eda0:	000b883a 	mov	r5,zero
  80eda4:	0029883a 	mov	r20,zero
  80eda8:	1004953a 	slli	r2,r2,20
  80edac:	a8c03fcc 	andi	r3,r21,255
  80edb0:	04400434 	movhi	r17,16
  80edb4:	8c7fffc4 	addi	r17,r17,-1
  80edb8:	180697fa 	slli	r3,r3,31
  80edbc:	2c4a703a 	and	r5,r5,r17
  80edc0:	288ab03a 	or	r5,r5,r2
  80edc4:	28c6b03a 	or	r3,r5,r3
  80edc8:	a005883a 	mov	r2,r20
  80edcc:	dfc00c17 	ldw	ra,48(sp)
  80edd0:	df000b17 	ldw	fp,44(sp)
  80edd4:	ddc00a17 	ldw	r23,40(sp)
  80edd8:	dd800917 	ldw	r22,36(sp)
  80eddc:	dd400817 	ldw	r21,32(sp)
  80ede0:	dd000717 	ldw	r20,28(sp)
  80ede4:	dcc00617 	ldw	r19,24(sp)
  80ede8:	dc800517 	ldw	r18,20(sp)
  80edec:	dc400417 	ldw	r17,16(sp)
  80edf0:	dc000317 	ldw	r16,12(sp)
  80edf4:	dec00d04 	addi	sp,sp,52
  80edf8:	f800283a 	ret
  80edfc:	2404b03a 	or	r2,r4,r16
  80ee00:	2027883a 	mov	r19,r4
  80ee04:	10004226 	beq	r2,zero,80ef10 <__muldf3+0x2e4>
  80ee08:	8000fc26 	beq	r16,zero,80f1fc <__muldf3+0x5d0>
  80ee0c:	8009883a 	mov	r4,r16
  80ee10:	d9800215 	stw	r6,8(sp)
  80ee14:	d9c00015 	stw	r7,0(sp)
  80ee18:	da400115 	stw	r9,4(sp)
  80ee1c:	080fe440 	call	80fe44 <__clzsi2>
  80ee20:	d9800217 	ldw	r6,8(sp)
  80ee24:	d9c00017 	ldw	r7,0(sp)
  80ee28:	da400117 	ldw	r9,4(sp)
  80ee2c:	113ffd44 	addi	r4,r2,-11
  80ee30:	00c00704 	movi	r3,28
  80ee34:	1900ed16 	blt	r3,r4,80f1ec <__muldf3+0x5c0>
  80ee38:	00c00744 	movi	r3,29
  80ee3c:	147ffe04 	addi	r17,r2,-8
  80ee40:	1907c83a 	sub	r3,r3,r4
  80ee44:	8460983a 	sll	r16,r16,r17
  80ee48:	98c6d83a 	srl	r3,r19,r3
  80ee4c:	9c68983a 	sll	r20,r19,r17
  80ee50:	1c20b03a 	or	r16,r3,r16
  80ee54:	1080fcc4 	addi	r2,r2,1011
  80ee58:	00a5c83a 	sub	r18,zero,r2
  80ee5c:	0027883a 	mov	r19,zero
  80ee60:	0039883a 	mov	fp,zero
  80ee64:	003f9006 	br	80eca8 <__alt_mem_onchip_mem+0xff78eca8>
  80ee68:	3446b03a 	or	r3,r6,r17
  80ee6c:	1800261e 	bne	r3,zero,80ef08 <__muldf3+0x2dc>
  80ee70:	0023883a 	mov	r17,zero
  80ee74:	0011883a 	mov	r8,zero
  80ee78:	01400084 	movi	r5,2
  80ee7c:	003f9c06 	br	80ecf0 <__alt_mem_onchip_mem+0xff78ecf0>
  80ee80:	3446b03a 	or	r3,r6,r17
  80ee84:	18001c26 	beq	r3,zero,80eef8 <__muldf3+0x2cc>
  80ee88:	8800ce26 	beq	r17,zero,80f1c4 <__muldf3+0x598>
  80ee8c:	8809883a 	mov	r4,r17
  80ee90:	d9800215 	stw	r6,8(sp)
  80ee94:	da400115 	stw	r9,4(sp)
  80ee98:	da800015 	stw	r10,0(sp)
  80ee9c:	080fe440 	call	80fe44 <__clzsi2>
  80eea0:	d9800217 	ldw	r6,8(sp)
  80eea4:	da400117 	ldw	r9,4(sp)
  80eea8:	da800017 	ldw	r10,0(sp)
  80eeac:	113ffd44 	addi	r4,r2,-11
  80eeb0:	00c00704 	movi	r3,28
  80eeb4:	1900bf16 	blt	r3,r4,80f1b4 <__muldf3+0x588>
  80eeb8:	00c00744 	movi	r3,29
  80eebc:	123ffe04 	addi	r8,r2,-8
  80eec0:	1907c83a 	sub	r3,r3,r4
  80eec4:	8a22983a 	sll	r17,r17,r8
  80eec8:	30c6d83a 	srl	r3,r6,r3
  80eecc:	3210983a 	sll	r8,r6,r8
  80eed0:	1c62b03a 	or	r17,r3,r17
  80eed4:	1080fcc4 	addi	r2,r2,1011
  80eed8:	0085c83a 	sub	r2,zero,r2
  80eedc:	000b883a 	mov	r5,zero
  80eee0:	003f8306 	br	80ecf0 <__alt_mem_onchip_mem+0xff78ecf0>
  80eee4:	b02b883a 	mov	r21,r22
  80eee8:	0081ffc4 	movi	r2,2047
  80eeec:	000b883a 	mov	r5,zero
  80eef0:	0029883a 	mov	r20,zero
  80eef4:	003fac06 	br	80eda8 <__alt_mem_onchip_mem+0xff78eda8>
  80eef8:	0023883a 	mov	r17,zero
  80eefc:	0011883a 	mov	r8,zero
  80ef00:	01400044 	movi	r5,1
  80ef04:	003f7a06 	br	80ecf0 <__alt_mem_onchip_mem+0xff78ecf0>
  80ef08:	014000c4 	movi	r5,3
  80ef0c:	003f7806 	br	80ecf0 <__alt_mem_onchip_mem+0xff78ecf0>
  80ef10:	04c00104 	movi	r19,4
  80ef14:	0021883a 	mov	r16,zero
  80ef18:	0029883a 	mov	r20,zero
  80ef1c:	07000044 	movi	fp,1
  80ef20:	003f6106 	br	80eca8 <__alt_mem_onchip_mem+0xff78eca8>
  80ef24:	04c00304 	movi	r19,12
  80ef28:	070000c4 	movi	fp,3
  80ef2c:	003f5e06 	br	80eca8 <__alt_mem_onchip_mem+0xff78eca8>
  80ef30:	01400434 	movhi	r5,16
  80ef34:	002b883a 	mov	r21,zero
  80ef38:	297fffc4 	addi	r5,r5,-1
  80ef3c:	053fffc4 	movi	r20,-1
  80ef40:	0081ffc4 	movi	r2,2047
  80ef44:	003f9806 	br	80eda8 <__alt_mem_onchip_mem+0xff78eda8>
  80ef48:	8023883a 	mov	r17,r16
  80ef4c:	a011883a 	mov	r8,r20
  80ef50:	e00b883a 	mov	r5,fp
  80ef54:	003f8a06 	br	80ed80 <__alt_mem_onchip_mem+0xff78ed80>
  80ef58:	8023883a 	mov	r17,r16
  80ef5c:	a011883a 	mov	r8,r20
  80ef60:	482d883a 	mov	r22,r9
  80ef64:	e00b883a 	mov	r5,fp
  80ef68:	003f8506 	br	80ed80 <__alt_mem_onchip_mem+0xff78ed80>
  80ef6c:	a00ad43a 	srli	r5,r20,16
  80ef70:	401ad43a 	srli	r13,r8,16
  80ef74:	a53fffcc 	andi	r20,r20,65535
  80ef78:	423fffcc 	andi	r8,r8,65535
  80ef7c:	4519383a 	mul	r12,r8,r20
  80ef80:	4147383a 	mul	r3,r8,r5
  80ef84:	6d09383a 	mul	r4,r13,r20
  80ef88:	600cd43a 	srli	r6,r12,16
  80ef8c:	2b5d383a 	mul	r14,r5,r13
  80ef90:	20c9883a 	add	r4,r4,r3
  80ef94:	310d883a 	add	r6,r6,r4
  80ef98:	30c0022e 	bgeu	r6,r3,80efa4 <__muldf3+0x378>
  80ef9c:	00c00074 	movhi	r3,1
  80efa0:	70dd883a 	add	r14,r14,r3
  80efa4:	8826d43a 	srli	r19,r17,16
  80efa8:	8bffffcc 	andi	r15,r17,65535
  80efac:	7d23383a 	mul	r17,r15,r20
  80efb0:	7949383a 	mul	r4,r15,r5
  80efb4:	9d29383a 	mul	r20,r19,r20
  80efb8:	8814d43a 	srli	r10,r17,16
  80efbc:	3012943a 	slli	r9,r6,16
  80efc0:	a129883a 	add	r20,r20,r4
  80efc4:	633fffcc 	andi	r12,r12,65535
  80efc8:	5515883a 	add	r10,r10,r20
  80efcc:	3006d43a 	srli	r3,r6,16
  80efd0:	4b13883a 	add	r9,r9,r12
  80efd4:	2ccb383a 	mul	r5,r5,r19
  80efd8:	5100022e 	bgeu	r10,r4,80efe4 <__muldf3+0x3b8>
  80efdc:	01000074 	movhi	r4,1
  80efe0:	290b883a 	add	r5,r5,r4
  80efe4:	802ad43a 	srli	r21,r16,16
  80efe8:	843fffcc 	andi	r16,r16,65535
  80efec:	440d383a 	mul	r6,r8,r16
  80eff0:	4565383a 	mul	r18,r8,r21
  80eff4:	8349383a 	mul	r4,r16,r13
  80eff8:	500e943a 	slli	r7,r10,16
  80effc:	3010d43a 	srli	r8,r6,16
  80f000:	5028d43a 	srli	r20,r10,16
  80f004:	2489883a 	add	r4,r4,r18
  80f008:	8abfffcc 	andi	r10,r17,65535
  80f00c:	3a95883a 	add	r10,r7,r10
  80f010:	4119883a 	add	r12,r8,r4
  80f014:	a169883a 	add	r20,r20,r5
  80f018:	1a87883a 	add	r3,r3,r10
  80f01c:	6d5b383a 	mul	r13,r13,r21
  80f020:	6480022e 	bgeu	r12,r18,80f02c <__muldf3+0x400>
  80f024:	01000074 	movhi	r4,1
  80f028:	691b883a 	add	r13,r13,r4
  80f02c:	7c25383a 	mul	r18,r15,r16
  80f030:	7d4b383a 	mul	r5,r15,r21
  80f034:	84cf383a 	mul	r7,r16,r19
  80f038:	901ed43a 	srli	r15,r18,16
  80f03c:	6008d43a 	srli	r4,r12,16
  80f040:	6010943a 	slli	r8,r12,16
  80f044:	394f883a 	add	r7,r7,r5
  80f048:	333fffcc 	andi	r12,r6,65535
  80f04c:	79df883a 	add	r15,r15,r7
  80f050:	235b883a 	add	r13,r4,r13
  80f054:	9d63383a 	mul	r17,r19,r21
  80f058:	4309883a 	add	r4,r8,r12
  80f05c:	7940022e 	bgeu	r15,r5,80f068 <__muldf3+0x43c>
  80f060:	01400074 	movhi	r5,1
  80f064:	8963883a 	add	r17,r17,r5
  80f068:	780a943a 	slli	r5,r15,16
  80f06c:	91bfffcc 	andi	r6,r18,65535
  80f070:	70c7883a 	add	r3,r14,r3
  80f074:	298d883a 	add	r6,r5,r6
  80f078:	1a8f803a 	cmpltu	r7,r3,r10
  80f07c:	350b883a 	add	r5,r6,r20
  80f080:	20c7883a 	add	r3,r4,r3
  80f084:	3955883a 	add	r10,r7,r5
  80f088:	1909803a 	cmpltu	r4,r3,r4
  80f08c:	6a91883a 	add	r8,r13,r10
  80f090:	780cd43a 	srli	r6,r15,16
  80f094:	2219883a 	add	r12,r4,r8
  80f098:	2d0b803a 	cmpltu	r5,r5,r20
  80f09c:	51cf803a 	cmpltu	r7,r10,r7
  80f0a0:	29ceb03a 	or	r7,r5,r7
  80f0a4:	4351803a 	cmpltu	r8,r8,r13
  80f0a8:	610b803a 	cmpltu	r5,r12,r4
  80f0ac:	4148b03a 	or	r4,r8,r5
  80f0b0:	398f883a 	add	r7,r7,r6
  80f0b4:	3909883a 	add	r4,r7,r4
  80f0b8:	1810927a 	slli	r8,r3,9
  80f0bc:	2449883a 	add	r4,r4,r17
  80f0c0:	2008927a 	slli	r4,r4,9
  80f0c4:	6022d5fa 	srli	r17,r12,23
  80f0c8:	1806d5fa 	srli	r3,r3,23
  80f0cc:	4252b03a 	or	r9,r8,r9
  80f0d0:	600a927a 	slli	r5,r12,9
  80f0d4:	4810c03a 	cmpne	r8,r9,zero
  80f0d8:	2462b03a 	or	r17,r4,r17
  80f0dc:	40c6b03a 	or	r3,r8,r3
  80f0e0:	8900402c 	andhi	r4,r17,256
  80f0e4:	1950b03a 	or	r8,r3,r5
  80f0e8:	20000726 	beq	r4,zero,80f108 <__muldf3+0x4dc>
  80f0ec:	4006d07a 	srli	r3,r8,1
  80f0f0:	880497fa 	slli	r2,r17,31
  80f0f4:	4200004c 	andi	r8,r8,1
  80f0f8:	8822d07a 	srli	r17,r17,1
  80f0fc:	1a10b03a 	or	r8,r3,r8
  80f100:	1210b03a 	or	r8,r2,r8
  80f104:	5805883a 	mov	r2,r11
  80f108:	1140ffc4 	addi	r5,r2,1023
  80f10c:	0140440e 	bge	zero,r5,80f220 <__muldf3+0x5f4>
  80f110:	40c001cc 	andi	r3,r8,7
  80f114:	18000726 	beq	r3,zero,80f134 <__muldf3+0x508>
  80f118:	40c003cc 	andi	r3,r8,15
  80f11c:	01000104 	movi	r4,4
  80f120:	19000426 	beq	r3,r4,80f134 <__muldf3+0x508>
  80f124:	4107883a 	add	r3,r8,r4
  80f128:	1a11803a 	cmpltu	r8,r3,r8
  80f12c:	8a23883a 	add	r17,r17,r8
  80f130:	1811883a 	mov	r8,r3
  80f134:	88c0402c 	andhi	r3,r17,256
  80f138:	18000426 	beq	r3,zero,80f14c <__muldf3+0x520>
  80f13c:	11410004 	addi	r5,r2,1024
  80f140:	00bfc034 	movhi	r2,65280
  80f144:	10bfffc4 	addi	r2,r2,-1
  80f148:	88a2703a 	and	r17,r17,r2
  80f14c:	0081ff84 	movi	r2,2046
  80f150:	117f6416 	blt	r2,r5,80eee4 <__alt_mem_onchip_mem+0xff78eee4>
  80f154:	8828977a 	slli	r20,r17,29
  80f158:	4010d0fa 	srli	r8,r8,3
  80f15c:	8822927a 	slli	r17,r17,9
  80f160:	2881ffcc 	andi	r2,r5,2047
  80f164:	a228b03a 	or	r20,r20,r8
  80f168:	880ad33a 	srli	r5,r17,12
  80f16c:	b02b883a 	mov	r21,r22
  80f170:	003f0d06 	br	80eda8 <__alt_mem_onchip_mem+0xff78eda8>
  80f174:	8080022c 	andhi	r2,r16,8
  80f178:	10000926 	beq	r2,zero,80f1a0 <__muldf3+0x574>
  80f17c:	8880022c 	andhi	r2,r17,8
  80f180:	1000071e 	bne	r2,zero,80f1a0 <__muldf3+0x574>
  80f184:	00800434 	movhi	r2,16
  80f188:	89400234 	orhi	r5,r17,8
  80f18c:	10bfffc4 	addi	r2,r2,-1
  80f190:	b82b883a 	mov	r21,r23
  80f194:	288a703a 	and	r5,r5,r2
  80f198:	4029883a 	mov	r20,r8
  80f19c:	003f6806 	br	80ef40 <__alt_mem_onchip_mem+0xff78ef40>
  80f1a0:	00800434 	movhi	r2,16
  80f1a4:	81400234 	orhi	r5,r16,8
  80f1a8:	10bfffc4 	addi	r2,r2,-1
  80f1ac:	288a703a 	and	r5,r5,r2
  80f1b0:	003f6306 	br	80ef40 <__alt_mem_onchip_mem+0xff78ef40>
  80f1b4:	147ff604 	addi	r17,r2,-40
  80f1b8:	3462983a 	sll	r17,r6,r17
  80f1bc:	0011883a 	mov	r8,zero
  80f1c0:	003f4406 	br	80eed4 <__alt_mem_onchip_mem+0xff78eed4>
  80f1c4:	3009883a 	mov	r4,r6
  80f1c8:	d9800215 	stw	r6,8(sp)
  80f1cc:	da400115 	stw	r9,4(sp)
  80f1d0:	da800015 	stw	r10,0(sp)
  80f1d4:	080fe440 	call	80fe44 <__clzsi2>
  80f1d8:	10800804 	addi	r2,r2,32
  80f1dc:	da800017 	ldw	r10,0(sp)
  80f1e0:	da400117 	ldw	r9,4(sp)
  80f1e4:	d9800217 	ldw	r6,8(sp)
  80f1e8:	003f3006 	br	80eeac <__alt_mem_onchip_mem+0xff78eeac>
  80f1ec:	143ff604 	addi	r16,r2,-40
  80f1f0:	9c20983a 	sll	r16,r19,r16
  80f1f4:	0029883a 	mov	r20,zero
  80f1f8:	003f1606 	br	80ee54 <__alt_mem_onchip_mem+0xff78ee54>
  80f1fc:	d9800215 	stw	r6,8(sp)
  80f200:	d9c00015 	stw	r7,0(sp)
  80f204:	da400115 	stw	r9,4(sp)
  80f208:	080fe440 	call	80fe44 <__clzsi2>
  80f20c:	10800804 	addi	r2,r2,32
  80f210:	da400117 	ldw	r9,4(sp)
  80f214:	d9c00017 	ldw	r7,0(sp)
  80f218:	d9800217 	ldw	r6,8(sp)
  80f21c:	003f0306 	br	80ee2c <__alt_mem_onchip_mem+0xff78ee2c>
  80f220:	00c00044 	movi	r3,1
  80f224:	1947c83a 	sub	r3,r3,r5
  80f228:	00800e04 	movi	r2,56
  80f22c:	10feda16 	blt	r2,r3,80ed98 <__alt_mem_onchip_mem+0xff78ed98>
  80f230:	008007c4 	movi	r2,31
  80f234:	10c01b16 	blt	r2,r3,80f2a4 <__muldf3+0x678>
  80f238:	00800804 	movi	r2,32
  80f23c:	10c5c83a 	sub	r2,r2,r3
  80f240:	888a983a 	sll	r5,r17,r2
  80f244:	40c8d83a 	srl	r4,r8,r3
  80f248:	4084983a 	sll	r2,r8,r2
  80f24c:	88e2d83a 	srl	r17,r17,r3
  80f250:	2906b03a 	or	r3,r5,r4
  80f254:	1004c03a 	cmpne	r2,r2,zero
  80f258:	1886b03a 	or	r3,r3,r2
  80f25c:	188001cc 	andi	r2,r3,7
  80f260:	10000726 	beq	r2,zero,80f280 <__muldf3+0x654>
  80f264:	188003cc 	andi	r2,r3,15
  80f268:	01000104 	movi	r4,4
  80f26c:	11000426 	beq	r2,r4,80f280 <__muldf3+0x654>
  80f270:	1805883a 	mov	r2,r3
  80f274:	10c00104 	addi	r3,r2,4
  80f278:	1885803a 	cmpltu	r2,r3,r2
  80f27c:	88a3883a 	add	r17,r17,r2
  80f280:	8880202c 	andhi	r2,r17,128
  80f284:	10001c26 	beq	r2,zero,80f2f8 <__muldf3+0x6cc>
  80f288:	b02b883a 	mov	r21,r22
  80f28c:	00800044 	movi	r2,1
  80f290:	000b883a 	mov	r5,zero
  80f294:	0029883a 	mov	r20,zero
  80f298:	003ec306 	br	80eda8 <__alt_mem_onchip_mem+0xff78eda8>
  80f29c:	5805883a 	mov	r2,r11
  80f2a0:	003f9906 	br	80f108 <__alt_mem_onchip_mem+0xff78f108>
  80f2a4:	00bff844 	movi	r2,-31
  80f2a8:	1145c83a 	sub	r2,r2,r5
  80f2ac:	8888d83a 	srl	r4,r17,r2
  80f2b0:	00800804 	movi	r2,32
  80f2b4:	18801a26 	beq	r3,r2,80f320 <__muldf3+0x6f4>
  80f2b8:	00801004 	movi	r2,64
  80f2bc:	10c5c83a 	sub	r2,r2,r3
  80f2c0:	8884983a 	sll	r2,r17,r2
  80f2c4:	1204b03a 	or	r2,r2,r8
  80f2c8:	1004c03a 	cmpne	r2,r2,zero
  80f2cc:	2084b03a 	or	r2,r4,r2
  80f2d0:	144001cc 	andi	r17,r2,7
  80f2d4:	88000d1e 	bne	r17,zero,80f30c <__muldf3+0x6e0>
  80f2d8:	000b883a 	mov	r5,zero
  80f2dc:	1028d0fa 	srli	r20,r2,3
  80f2e0:	b02b883a 	mov	r21,r22
  80f2e4:	0005883a 	mov	r2,zero
  80f2e8:	a468b03a 	or	r20,r20,r17
  80f2ec:	003eae06 	br	80eda8 <__alt_mem_onchip_mem+0xff78eda8>
  80f2f0:	1007883a 	mov	r3,r2
  80f2f4:	0023883a 	mov	r17,zero
  80f2f8:	880a927a 	slli	r5,r17,9
  80f2fc:	1805883a 	mov	r2,r3
  80f300:	8822977a 	slli	r17,r17,29
  80f304:	280ad33a 	srli	r5,r5,12
  80f308:	003ff406 	br	80f2dc <__alt_mem_onchip_mem+0xff78f2dc>
  80f30c:	10c003cc 	andi	r3,r2,15
  80f310:	01000104 	movi	r4,4
  80f314:	193ff626 	beq	r3,r4,80f2f0 <__alt_mem_onchip_mem+0xff78f2f0>
  80f318:	0023883a 	mov	r17,zero
  80f31c:	003fd506 	br	80f274 <__alt_mem_onchip_mem+0xff78f274>
  80f320:	0005883a 	mov	r2,zero
  80f324:	003fe706 	br	80f2c4 <__alt_mem_onchip_mem+0xff78f2c4>
  80f328:	00800434 	movhi	r2,16
  80f32c:	89400234 	orhi	r5,r17,8
  80f330:	10bfffc4 	addi	r2,r2,-1
  80f334:	b02b883a 	mov	r21,r22
  80f338:	288a703a 	and	r5,r5,r2
  80f33c:	4029883a 	mov	r20,r8
  80f340:	003eff06 	br	80ef40 <__alt_mem_onchip_mem+0xff78ef40>

0080f344 <__subdf3>:
  80f344:	02000434 	movhi	r8,16
  80f348:	423fffc4 	addi	r8,r8,-1
  80f34c:	defffb04 	addi	sp,sp,-20
  80f350:	2a14703a 	and	r10,r5,r8
  80f354:	3812d53a 	srli	r9,r7,20
  80f358:	3a10703a 	and	r8,r7,r8
  80f35c:	2006d77a 	srli	r3,r4,29
  80f360:	3004d77a 	srli	r2,r6,29
  80f364:	dc000015 	stw	r16,0(sp)
  80f368:	501490fa 	slli	r10,r10,3
  80f36c:	2820d53a 	srli	r16,r5,20
  80f370:	401090fa 	slli	r8,r8,3
  80f374:	dc800215 	stw	r18,8(sp)
  80f378:	dc400115 	stw	r17,4(sp)
  80f37c:	dfc00415 	stw	ra,16(sp)
  80f380:	202290fa 	slli	r17,r4,3
  80f384:	dcc00315 	stw	r19,12(sp)
  80f388:	4a41ffcc 	andi	r9,r9,2047
  80f38c:	0101ffc4 	movi	r4,2047
  80f390:	2824d7fa 	srli	r18,r5,31
  80f394:	8401ffcc 	andi	r16,r16,2047
  80f398:	50c6b03a 	or	r3,r10,r3
  80f39c:	380ed7fa 	srli	r7,r7,31
  80f3a0:	408ab03a 	or	r5,r8,r2
  80f3a4:	300c90fa 	slli	r6,r6,3
  80f3a8:	49009626 	beq	r9,r4,80f604 <__subdf3+0x2c0>
  80f3ac:	39c0005c 	xori	r7,r7,1
  80f3b0:	8245c83a 	sub	r2,r16,r9
  80f3b4:	3c807426 	beq	r7,r18,80f588 <__subdf3+0x244>
  80f3b8:	0080af0e 	bge	zero,r2,80f678 <__subdf3+0x334>
  80f3bc:	48002a1e 	bne	r9,zero,80f468 <__subdf3+0x124>
  80f3c0:	2988b03a 	or	r4,r5,r6
  80f3c4:	20009a1e 	bne	r4,zero,80f630 <__subdf3+0x2ec>
  80f3c8:	888001cc 	andi	r2,r17,7
  80f3cc:	10000726 	beq	r2,zero,80f3ec <__subdf3+0xa8>
  80f3d0:	888003cc 	andi	r2,r17,15
  80f3d4:	01000104 	movi	r4,4
  80f3d8:	11000426 	beq	r2,r4,80f3ec <__subdf3+0xa8>
  80f3dc:	890b883a 	add	r5,r17,r4
  80f3e0:	2c63803a 	cmpltu	r17,r5,r17
  80f3e4:	1c47883a 	add	r3,r3,r17
  80f3e8:	2823883a 	mov	r17,r5
  80f3ec:	1880202c 	andhi	r2,r3,128
  80f3f0:	10005926 	beq	r2,zero,80f558 <__subdf3+0x214>
  80f3f4:	84000044 	addi	r16,r16,1
  80f3f8:	0081ffc4 	movi	r2,2047
  80f3fc:	8080be26 	beq	r16,r2,80f6f8 <__subdf3+0x3b4>
  80f400:	017fe034 	movhi	r5,65408
  80f404:	297fffc4 	addi	r5,r5,-1
  80f408:	1946703a 	and	r3,r3,r5
  80f40c:	1804977a 	slli	r2,r3,29
  80f410:	1806927a 	slli	r3,r3,9
  80f414:	8822d0fa 	srli	r17,r17,3
  80f418:	8401ffcc 	andi	r16,r16,2047
  80f41c:	180ad33a 	srli	r5,r3,12
  80f420:	9100004c 	andi	r4,r18,1
  80f424:	1444b03a 	or	r2,r2,r17
  80f428:	80c1ffcc 	andi	r3,r16,2047
  80f42c:	1820953a 	slli	r16,r3,20
  80f430:	20c03fcc 	andi	r3,r4,255
  80f434:	180897fa 	slli	r4,r3,31
  80f438:	00c00434 	movhi	r3,16
  80f43c:	18ffffc4 	addi	r3,r3,-1
  80f440:	28c6703a 	and	r3,r5,r3
  80f444:	1c06b03a 	or	r3,r3,r16
  80f448:	1906b03a 	or	r3,r3,r4
  80f44c:	dfc00417 	ldw	ra,16(sp)
  80f450:	dcc00317 	ldw	r19,12(sp)
  80f454:	dc800217 	ldw	r18,8(sp)
  80f458:	dc400117 	ldw	r17,4(sp)
  80f45c:	dc000017 	ldw	r16,0(sp)
  80f460:	dec00504 	addi	sp,sp,20
  80f464:	f800283a 	ret
  80f468:	0101ffc4 	movi	r4,2047
  80f46c:	813fd626 	beq	r16,r4,80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f470:	29402034 	orhi	r5,r5,128
  80f474:	01000e04 	movi	r4,56
  80f478:	2080a316 	blt	r4,r2,80f708 <__subdf3+0x3c4>
  80f47c:	010007c4 	movi	r4,31
  80f480:	2080c616 	blt	r4,r2,80f79c <__subdf3+0x458>
  80f484:	01000804 	movi	r4,32
  80f488:	2089c83a 	sub	r4,r4,r2
  80f48c:	2910983a 	sll	r8,r5,r4
  80f490:	308ed83a 	srl	r7,r6,r2
  80f494:	3108983a 	sll	r4,r6,r4
  80f498:	2884d83a 	srl	r2,r5,r2
  80f49c:	41ccb03a 	or	r6,r8,r7
  80f4a0:	2008c03a 	cmpne	r4,r4,zero
  80f4a4:	310cb03a 	or	r6,r6,r4
  80f4a8:	898dc83a 	sub	r6,r17,r6
  80f4ac:	89a3803a 	cmpltu	r17,r17,r6
  80f4b0:	1887c83a 	sub	r3,r3,r2
  80f4b4:	1c47c83a 	sub	r3,r3,r17
  80f4b8:	3023883a 	mov	r17,r6
  80f4bc:	1880202c 	andhi	r2,r3,128
  80f4c0:	10002326 	beq	r2,zero,80f550 <__subdf3+0x20c>
  80f4c4:	04c02034 	movhi	r19,128
  80f4c8:	9cffffc4 	addi	r19,r19,-1
  80f4cc:	1ce6703a 	and	r19,r3,r19
  80f4d0:	98007a26 	beq	r19,zero,80f6bc <__subdf3+0x378>
  80f4d4:	9809883a 	mov	r4,r19
  80f4d8:	080fe440 	call	80fe44 <__clzsi2>
  80f4dc:	113ffe04 	addi	r4,r2,-8
  80f4e0:	00c007c4 	movi	r3,31
  80f4e4:	19007b16 	blt	r3,r4,80f6d4 <__subdf3+0x390>
  80f4e8:	00800804 	movi	r2,32
  80f4ec:	1105c83a 	sub	r2,r2,r4
  80f4f0:	8884d83a 	srl	r2,r17,r2
  80f4f4:	9906983a 	sll	r3,r19,r4
  80f4f8:	8922983a 	sll	r17,r17,r4
  80f4fc:	10c4b03a 	or	r2,r2,r3
  80f500:	24007816 	blt	r4,r16,80f6e4 <__subdf3+0x3a0>
  80f504:	2421c83a 	sub	r16,r4,r16
  80f508:	80c00044 	addi	r3,r16,1
  80f50c:	010007c4 	movi	r4,31
  80f510:	20c09516 	blt	r4,r3,80f768 <__subdf3+0x424>
  80f514:	01400804 	movi	r5,32
  80f518:	28cbc83a 	sub	r5,r5,r3
  80f51c:	88c8d83a 	srl	r4,r17,r3
  80f520:	8962983a 	sll	r17,r17,r5
  80f524:	114a983a 	sll	r5,r2,r5
  80f528:	10c6d83a 	srl	r3,r2,r3
  80f52c:	8804c03a 	cmpne	r2,r17,zero
  80f530:	290ab03a 	or	r5,r5,r4
  80f534:	28a2b03a 	or	r17,r5,r2
  80f538:	0021883a 	mov	r16,zero
  80f53c:	003fa206 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f540:	2090b03a 	or	r8,r4,r2
  80f544:	40018e26 	beq	r8,zero,80fb80 <__subdf3+0x83c>
  80f548:	1007883a 	mov	r3,r2
  80f54c:	2023883a 	mov	r17,r4
  80f550:	888001cc 	andi	r2,r17,7
  80f554:	103f9e1e 	bne	r2,zero,80f3d0 <__alt_mem_onchip_mem+0xff78f3d0>
  80f558:	1804977a 	slli	r2,r3,29
  80f55c:	8822d0fa 	srli	r17,r17,3
  80f560:	1810d0fa 	srli	r8,r3,3
  80f564:	9100004c 	andi	r4,r18,1
  80f568:	1444b03a 	or	r2,r2,r17
  80f56c:	00c1ffc4 	movi	r3,2047
  80f570:	80c02826 	beq	r16,r3,80f614 <__subdf3+0x2d0>
  80f574:	01400434 	movhi	r5,16
  80f578:	297fffc4 	addi	r5,r5,-1
  80f57c:	80e0703a 	and	r16,r16,r3
  80f580:	414a703a 	and	r5,r8,r5
  80f584:	003fa806 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f588:	0080630e 	bge	zero,r2,80f718 <__subdf3+0x3d4>
  80f58c:	48003026 	beq	r9,zero,80f650 <__subdf3+0x30c>
  80f590:	0101ffc4 	movi	r4,2047
  80f594:	813f8c26 	beq	r16,r4,80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f598:	29402034 	orhi	r5,r5,128
  80f59c:	01000e04 	movi	r4,56
  80f5a0:	2080a90e 	bge	r4,r2,80f848 <__subdf3+0x504>
  80f5a4:	298cb03a 	or	r6,r5,r6
  80f5a8:	3012c03a 	cmpne	r9,r6,zero
  80f5ac:	0005883a 	mov	r2,zero
  80f5b0:	4c53883a 	add	r9,r9,r17
  80f5b4:	4c63803a 	cmpltu	r17,r9,r17
  80f5b8:	10c7883a 	add	r3,r2,r3
  80f5bc:	88c7883a 	add	r3,r17,r3
  80f5c0:	4823883a 	mov	r17,r9
  80f5c4:	1880202c 	andhi	r2,r3,128
  80f5c8:	1000d026 	beq	r2,zero,80f90c <__subdf3+0x5c8>
  80f5cc:	84000044 	addi	r16,r16,1
  80f5d0:	0081ffc4 	movi	r2,2047
  80f5d4:	8080fe26 	beq	r16,r2,80f9d0 <__subdf3+0x68c>
  80f5d8:	00bfe034 	movhi	r2,65408
  80f5dc:	10bfffc4 	addi	r2,r2,-1
  80f5e0:	1886703a 	and	r3,r3,r2
  80f5e4:	880ad07a 	srli	r5,r17,1
  80f5e8:	180497fa 	slli	r2,r3,31
  80f5ec:	8900004c 	andi	r4,r17,1
  80f5f0:	2922b03a 	or	r17,r5,r4
  80f5f4:	1806d07a 	srli	r3,r3,1
  80f5f8:	1462b03a 	or	r17,r2,r17
  80f5fc:	3825883a 	mov	r18,r7
  80f600:	003f7106 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f604:	2984b03a 	or	r2,r5,r6
  80f608:	103f6826 	beq	r2,zero,80f3ac <__alt_mem_onchip_mem+0xff78f3ac>
  80f60c:	39c03fcc 	andi	r7,r7,255
  80f610:	003f6706 	br	80f3b0 <__alt_mem_onchip_mem+0xff78f3b0>
  80f614:	4086b03a 	or	r3,r8,r2
  80f618:	18015226 	beq	r3,zero,80fb64 <__subdf3+0x820>
  80f61c:	00c00434 	movhi	r3,16
  80f620:	41400234 	orhi	r5,r8,8
  80f624:	18ffffc4 	addi	r3,r3,-1
  80f628:	28ca703a 	and	r5,r5,r3
  80f62c:	003f7e06 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f630:	10bfffc4 	addi	r2,r2,-1
  80f634:	1000491e 	bne	r2,zero,80f75c <__subdf3+0x418>
  80f638:	898fc83a 	sub	r7,r17,r6
  80f63c:	89e3803a 	cmpltu	r17,r17,r7
  80f640:	1947c83a 	sub	r3,r3,r5
  80f644:	1c47c83a 	sub	r3,r3,r17
  80f648:	3823883a 	mov	r17,r7
  80f64c:	003f9b06 	br	80f4bc <__alt_mem_onchip_mem+0xff78f4bc>
  80f650:	2988b03a 	or	r4,r5,r6
  80f654:	203f5c26 	beq	r4,zero,80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f658:	10bfffc4 	addi	r2,r2,-1
  80f65c:	1000931e 	bne	r2,zero,80f8ac <__subdf3+0x568>
  80f660:	898d883a 	add	r6,r17,r6
  80f664:	3463803a 	cmpltu	r17,r6,r17
  80f668:	1947883a 	add	r3,r3,r5
  80f66c:	88c7883a 	add	r3,r17,r3
  80f670:	3023883a 	mov	r17,r6
  80f674:	003fd306 	br	80f5c4 <__alt_mem_onchip_mem+0xff78f5c4>
  80f678:	1000541e 	bne	r2,zero,80f7cc <__subdf3+0x488>
  80f67c:	80800044 	addi	r2,r16,1
  80f680:	1081ffcc 	andi	r2,r2,2047
  80f684:	01000044 	movi	r4,1
  80f688:	2080a20e 	bge	r4,r2,80f914 <__subdf3+0x5d0>
  80f68c:	8989c83a 	sub	r4,r17,r6
  80f690:	8905803a 	cmpltu	r2,r17,r4
  80f694:	1967c83a 	sub	r19,r3,r5
  80f698:	98a7c83a 	sub	r19,r19,r2
  80f69c:	9880202c 	andhi	r2,r19,128
  80f6a0:	10006326 	beq	r2,zero,80f830 <__subdf3+0x4ec>
  80f6a4:	3463c83a 	sub	r17,r6,r17
  80f6a8:	28c7c83a 	sub	r3,r5,r3
  80f6ac:	344d803a 	cmpltu	r6,r6,r17
  80f6b0:	19a7c83a 	sub	r19,r3,r6
  80f6b4:	3825883a 	mov	r18,r7
  80f6b8:	983f861e 	bne	r19,zero,80f4d4 <__alt_mem_onchip_mem+0xff78f4d4>
  80f6bc:	8809883a 	mov	r4,r17
  80f6c0:	080fe440 	call	80fe44 <__clzsi2>
  80f6c4:	10800804 	addi	r2,r2,32
  80f6c8:	113ffe04 	addi	r4,r2,-8
  80f6cc:	00c007c4 	movi	r3,31
  80f6d0:	193f850e 	bge	r3,r4,80f4e8 <__alt_mem_onchip_mem+0xff78f4e8>
  80f6d4:	10bff604 	addi	r2,r2,-40
  80f6d8:	8884983a 	sll	r2,r17,r2
  80f6dc:	0023883a 	mov	r17,zero
  80f6e0:	243f880e 	bge	r4,r16,80f504 <__alt_mem_onchip_mem+0xff78f504>
  80f6e4:	00ffe034 	movhi	r3,65408
  80f6e8:	18ffffc4 	addi	r3,r3,-1
  80f6ec:	8121c83a 	sub	r16,r16,r4
  80f6f0:	10c6703a 	and	r3,r2,r3
  80f6f4:	003f3406 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f6f8:	9100004c 	andi	r4,r18,1
  80f6fc:	000b883a 	mov	r5,zero
  80f700:	0005883a 	mov	r2,zero
  80f704:	003f4806 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80f708:	298cb03a 	or	r6,r5,r6
  80f70c:	300cc03a 	cmpne	r6,r6,zero
  80f710:	0005883a 	mov	r2,zero
  80f714:	003f6406 	br	80f4a8 <__alt_mem_onchip_mem+0xff78f4a8>
  80f718:	10009a1e 	bne	r2,zero,80f984 <__subdf3+0x640>
  80f71c:	82400044 	addi	r9,r16,1
  80f720:	4881ffcc 	andi	r2,r9,2047
  80f724:	02800044 	movi	r10,1
  80f728:	5080670e 	bge	r10,r2,80f8c8 <__subdf3+0x584>
  80f72c:	0081ffc4 	movi	r2,2047
  80f730:	4880af26 	beq	r9,r2,80f9f0 <__subdf3+0x6ac>
  80f734:	898d883a 	add	r6,r17,r6
  80f738:	1945883a 	add	r2,r3,r5
  80f73c:	3447803a 	cmpltu	r3,r6,r17
  80f740:	1887883a 	add	r3,r3,r2
  80f744:	182297fa 	slli	r17,r3,31
  80f748:	300cd07a 	srli	r6,r6,1
  80f74c:	1806d07a 	srli	r3,r3,1
  80f750:	4821883a 	mov	r16,r9
  80f754:	89a2b03a 	or	r17,r17,r6
  80f758:	003f1b06 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f75c:	0101ffc4 	movi	r4,2047
  80f760:	813f441e 	bne	r16,r4,80f474 <__alt_mem_onchip_mem+0xff78f474>
  80f764:	003f1806 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f768:	843ff844 	addi	r16,r16,-31
  80f76c:	01400804 	movi	r5,32
  80f770:	1408d83a 	srl	r4,r2,r16
  80f774:	19405026 	beq	r3,r5,80f8b8 <__subdf3+0x574>
  80f778:	01401004 	movi	r5,64
  80f77c:	28c7c83a 	sub	r3,r5,r3
  80f780:	10c4983a 	sll	r2,r2,r3
  80f784:	88a2b03a 	or	r17,r17,r2
  80f788:	8822c03a 	cmpne	r17,r17,zero
  80f78c:	2462b03a 	or	r17,r4,r17
  80f790:	0007883a 	mov	r3,zero
  80f794:	0021883a 	mov	r16,zero
  80f798:	003f6d06 	br	80f550 <__alt_mem_onchip_mem+0xff78f550>
  80f79c:	11fff804 	addi	r7,r2,-32
  80f7a0:	01000804 	movi	r4,32
  80f7a4:	29ced83a 	srl	r7,r5,r7
  80f7a8:	11004526 	beq	r2,r4,80f8c0 <__subdf3+0x57c>
  80f7ac:	01001004 	movi	r4,64
  80f7b0:	2089c83a 	sub	r4,r4,r2
  80f7b4:	2904983a 	sll	r2,r5,r4
  80f7b8:	118cb03a 	or	r6,r2,r6
  80f7bc:	300cc03a 	cmpne	r6,r6,zero
  80f7c0:	398cb03a 	or	r6,r7,r6
  80f7c4:	0005883a 	mov	r2,zero
  80f7c8:	003f3706 	br	80f4a8 <__alt_mem_onchip_mem+0xff78f4a8>
  80f7cc:	80002a26 	beq	r16,zero,80f878 <__subdf3+0x534>
  80f7d0:	0101ffc4 	movi	r4,2047
  80f7d4:	49006626 	beq	r9,r4,80f970 <__subdf3+0x62c>
  80f7d8:	0085c83a 	sub	r2,zero,r2
  80f7dc:	18c02034 	orhi	r3,r3,128
  80f7e0:	01000e04 	movi	r4,56
  80f7e4:	20807e16 	blt	r4,r2,80f9e0 <__subdf3+0x69c>
  80f7e8:	010007c4 	movi	r4,31
  80f7ec:	2080e716 	blt	r4,r2,80fb8c <__subdf3+0x848>
  80f7f0:	01000804 	movi	r4,32
  80f7f4:	2089c83a 	sub	r4,r4,r2
  80f7f8:	1914983a 	sll	r10,r3,r4
  80f7fc:	8890d83a 	srl	r8,r17,r2
  80f800:	8908983a 	sll	r4,r17,r4
  80f804:	1884d83a 	srl	r2,r3,r2
  80f808:	5222b03a 	or	r17,r10,r8
  80f80c:	2006c03a 	cmpne	r3,r4,zero
  80f810:	88e2b03a 	or	r17,r17,r3
  80f814:	3463c83a 	sub	r17,r6,r17
  80f818:	2885c83a 	sub	r2,r5,r2
  80f81c:	344d803a 	cmpltu	r6,r6,r17
  80f820:	1187c83a 	sub	r3,r2,r6
  80f824:	4821883a 	mov	r16,r9
  80f828:	3825883a 	mov	r18,r7
  80f82c:	003f2306 	br	80f4bc <__alt_mem_onchip_mem+0xff78f4bc>
  80f830:	24d0b03a 	or	r8,r4,r19
  80f834:	40001b1e 	bne	r8,zero,80f8a4 <__subdf3+0x560>
  80f838:	0005883a 	mov	r2,zero
  80f83c:	0009883a 	mov	r4,zero
  80f840:	0021883a 	mov	r16,zero
  80f844:	003f4906 	br	80f56c <__alt_mem_onchip_mem+0xff78f56c>
  80f848:	010007c4 	movi	r4,31
  80f84c:	20803a16 	blt	r4,r2,80f938 <__subdf3+0x5f4>
  80f850:	01000804 	movi	r4,32
  80f854:	2089c83a 	sub	r4,r4,r2
  80f858:	2912983a 	sll	r9,r5,r4
  80f85c:	3090d83a 	srl	r8,r6,r2
  80f860:	3108983a 	sll	r4,r6,r4
  80f864:	2884d83a 	srl	r2,r5,r2
  80f868:	4a12b03a 	or	r9,r9,r8
  80f86c:	2008c03a 	cmpne	r4,r4,zero
  80f870:	4912b03a 	or	r9,r9,r4
  80f874:	003f4e06 	br	80f5b0 <__alt_mem_onchip_mem+0xff78f5b0>
  80f878:	1c48b03a 	or	r4,r3,r17
  80f87c:	20003c26 	beq	r4,zero,80f970 <__subdf3+0x62c>
  80f880:	0084303a 	nor	r2,zero,r2
  80f884:	1000381e 	bne	r2,zero,80f968 <__subdf3+0x624>
  80f888:	3463c83a 	sub	r17,r6,r17
  80f88c:	28c5c83a 	sub	r2,r5,r3
  80f890:	344d803a 	cmpltu	r6,r6,r17
  80f894:	1187c83a 	sub	r3,r2,r6
  80f898:	4821883a 	mov	r16,r9
  80f89c:	3825883a 	mov	r18,r7
  80f8a0:	003f0606 	br	80f4bc <__alt_mem_onchip_mem+0xff78f4bc>
  80f8a4:	2023883a 	mov	r17,r4
  80f8a8:	003f0906 	br	80f4d0 <__alt_mem_onchip_mem+0xff78f4d0>
  80f8ac:	0101ffc4 	movi	r4,2047
  80f8b0:	813f3a1e 	bne	r16,r4,80f59c <__alt_mem_onchip_mem+0xff78f59c>
  80f8b4:	003ec406 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f8b8:	0005883a 	mov	r2,zero
  80f8bc:	003fb106 	br	80f784 <__alt_mem_onchip_mem+0xff78f784>
  80f8c0:	0005883a 	mov	r2,zero
  80f8c4:	003fbc06 	br	80f7b8 <__alt_mem_onchip_mem+0xff78f7b8>
  80f8c8:	1c44b03a 	or	r2,r3,r17
  80f8cc:	80008e1e 	bne	r16,zero,80fb08 <__subdf3+0x7c4>
  80f8d0:	1000c826 	beq	r2,zero,80fbf4 <__subdf3+0x8b0>
  80f8d4:	2984b03a 	or	r2,r5,r6
  80f8d8:	103ebb26 	beq	r2,zero,80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f8dc:	8989883a 	add	r4,r17,r6
  80f8e0:	1945883a 	add	r2,r3,r5
  80f8e4:	2447803a 	cmpltu	r3,r4,r17
  80f8e8:	1887883a 	add	r3,r3,r2
  80f8ec:	1880202c 	andhi	r2,r3,128
  80f8f0:	2023883a 	mov	r17,r4
  80f8f4:	103f1626 	beq	r2,zero,80f550 <__alt_mem_onchip_mem+0xff78f550>
  80f8f8:	00bfe034 	movhi	r2,65408
  80f8fc:	10bfffc4 	addi	r2,r2,-1
  80f900:	5021883a 	mov	r16,r10
  80f904:	1886703a 	and	r3,r3,r2
  80f908:	003eaf06 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f90c:	3825883a 	mov	r18,r7
  80f910:	003f0f06 	br	80f550 <__alt_mem_onchip_mem+0xff78f550>
  80f914:	1c44b03a 	or	r2,r3,r17
  80f918:	8000251e 	bne	r16,zero,80f9b0 <__subdf3+0x66c>
  80f91c:	1000661e 	bne	r2,zero,80fab8 <__subdf3+0x774>
  80f920:	2990b03a 	or	r8,r5,r6
  80f924:	40009626 	beq	r8,zero,80fb80 <__subdf3+0x83c>
  80f928:	2807883a 	mov	r3,r5
  80f92c:	3023883a 	mov	r17,r6
  80f930:	3825883a 	mov	r18,r7
  80f934:	003ea406 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f938:	127ff804 	addi	r9,r2,-32
  80f93c:	01000804 	movi	r4,32
  80f940:	2a52d83a 	srl	r9,r5,r9
  80f944:	11008c26 	beq	r2,r4,80fb78 <__subdf3+0x834>
  80f948:	01001004 	movi	r4,64
  80f94c:	2085c83a 	sub	r2,r4,r2
  80f950:	2884983a 	sll	r2,r5,r2
  80f954:	118cb03a 	or	r6,r2,r6
  80f958:	300cc03a 	cmpne	r6,r6,zero
  80f95c:	4992b03a 	or	r9,r9,r6
  80f960:	0005883a 	mov	r2,zero
  80f964:	003f1206 	br	80f5b0 <__alt_mem_onchip_mem+0xff78f5b0>
  80f968:	0101ffc4 	movi	r4,2047
  80f96c:	493f9c1e 	bne	r9,r4,80f7e0 <__alt_mem_onchip_mem+0xff78f7e0>
  80f970:	2807883a 	mov	r3,r5
  80f974:	3023883a 	mov	r17,r6
  80f978:	4821883a 	mov	r16,r9
  80f97c:	3825883a 	mov	r18,r7
  80f980:	003e9106 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f984:	80001f1e 	bne	r16,zero,80fa04 <__subdf3+0x6c0>
  80f988:	1c48b03a 	or	r4,r3,r17
  80f98c:	20005a26 	beq	r4,zero,80faf8 <__subdf3+0x7b4>
  80f990:	0084303a 	nor	r2,zero,r2
  80f994:	1000561e 	bne	r2,zero,80faf0 <__subdf3+0x7ac>
  80f998:	89a3883a 	add	r17,r17,r6
  80f99c:	1945883a 	add	r2,r3,r5
  80f9a0:	898d803a 	cmpltu	r6,r17,r6
  80f9a4:	3087883a 	add	r3,r6,r2
  80f9a8:	4821883a 	mov	r16,r9
  80f9ac:	003f0506 	br	80f5c4 <__alt_mem_onchip_mem+0xff78f5c4>
  80f9b0:	10002b1e 	bne	r2,zero,80fa60 <__subdf3+0x71c>
  80f9b4:	2984b03a 	or	r2,r5,r6
  80f9b8:	10008026 	beq	r2,zero,80fbbc <__subdf3+0x878>
  80f9bc:	2807883a 	mov	r3,r5
  80f9c0:	3023883a 	mov	r17,r6
  80f9c4:	3825883a 	mov	r18,r7
  80f9c8:	0401ffc4 	movi	r16,2047
  80f9cc:	003e7e06 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80f9d0:	3809883a 	mov	r4,r7
  80f9d4:	0011883a 	mov	r8,zero
  80f9d8:	0005883a 	mov	r2,zero
  80f9dc:	003ee306 	br	80f56c <__alt_mem_onchip_mem+0xff78f56c>
  80f9e0:	1c62b03a 	or	r17,r3,r17
  80f9e4:	8822c03a 	cmpne	r17,r17,zero
  80f9e8:	0005883a 	mov	r2,zero
  80f9ec:	003f8906 	br	80f814 <__alt_mem_onchip_mem+0xff78f814>
  80f9f0:	3809883a 	mov	r4,r7
  80f9f4:	4821883a 	mov	r16,r9
  80f9f8:	0011883a 	mov	r8,zero
  80f9fc:	0005883a 	mov	r2,zero
  80fa00:	003eda06 	br	80f56c <__alt_mem_onchip_mem+0xff78f56c>
  80fa04:	0101ffc4 	movi	r4,2047
  80fa08:	49003b26 	beq	r9,r4,80faf8 <__subdf3+0x7b4>
  80fa0c:	0085c83a 	sub	r2,zero,r2
  80fa10:	18c02034 	orhi	r3,r3,128
  80fa14:	01000e04 	movi	r4,56
  80fa18:	20806e16 	blt	r4,r2,80fbd4 <__subdf3+0x890>
  80fa1c:	010007c4 	movi	r4,31
  80fa20:	20807716 	blt	r4,r2,80fc00 <__subdf3+0x8bc>
  80fa24:	01000804 	movi	r4,32
  80fa28:	2089c83a 	sub	r4,r4,r2
  80fa2c:	1914983a 	sll	r10,r3,r4
  80fa30:	8890d83a 	srl	r8,r17,r2
  80fa34:	8908983a 	sll	r4,r17,r4
  80fa38:	1884d83a 	srl	r2,r3,r2
  80fa3c:	5222b03a 	or	r17,r10,r8
  80fa40:	2006c03a 	cmpne	r3,r4,zero
  80fa44:	88e2b03a 	or	r17,r17,r3
  80fa48:	89a3883a 	add	r17,r17,r6
  80fa4c:	1145883a 	add	r2,r2,r5
  80fa50:	898d803a 	cmpltu	r6,r17,r6
  80fa54:	3087883a 	add	r3,r6,r2
  80fa58:	4821883a 	mov	r16,r9
  80fa5c:	003ed906 	br	80f5c4 <__alt_mem_onchip_mem+0xff78f5c4>
  80fa60:	2984b03a 	or	r2,r5,r6
  80fa64:	10004226 	beq	r2,zero,80fb70 <__subdf3+0x82c>
  80fa68:	1808d0fa 	srli	r4,r3,3
  80fa6c:	8822d0fa 	srli	r17,r17,3
  80fa70:	1806977a 	slli	r3,r3,29
  80fa74:	2080022c 	andhi	r2,r4,8
  80fa78:	1c62b03a 	or	r17,r3,r17
  80fa7c:	10000826 	beq	r2,zero,80faa0 <__subdf3+0x75c>
  80fa80:	2812d0fa 	srli	r9,r5,3
  80fa84:	4880022c 	andhi	r2,r9,8
  80fa88:	1000051e 	bne	r2,zero,80faa0 <__subdf3+0x75c>
  80fa8c:	300cd0fa 	srli	r6,r6,3
  80fa90:	2804977a 	slli	r2,r5,29
  80fa94:	4809883a 	mov	r4,r9
  80fa98:	3825883a 	mov	r18,r7
  80fa9c:	11a2b03a 	or	r17,r2,r6
  80faa0:	8806d77a 	srli	r3,r17,29
  80faa4:	200890fa 	slli	r4,r4,3
  80faa8:	882290fa 	slli	r17,r17,3
  80faac:	0401ffc4 	movi	r16,2047
  80fab0:	1906b03a 	or	r3,r3,r4
  80fab4:	003e4406 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80fab8:	2984b03a 	or	r2,r5,r6
  80fabc:	103e4226 	beq	r2,zero,80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80fac0:	8989c83a 	sub	r4,r17,r6
  80fac4:	8911803a 	cmpltu	r8,r17,r4
  80fac8:	1945c83a 	sub	r2,r3,r5
  80facc:	1205c83a 	sub	r2,r2,r8
  80fad0:	1200202c 	andhi	r8,r2,128
  80fad4:	403e9a26 	beq	r8,zero,80f540 <__alt_mem_onchip_mem+0xff78f540>
  80fad8:	3463c83a 	sub	r17,r6,r17
  80fadc:	28c5c83a 	sub	r2,r5,r3
  80fae0:	344d803a 	cmpltu	r6,r6,r17
  80fae4:	1187c83a 	sub	r3,r2,r6
  80fae8:	3825883a 	mov	r18,r7
  80faec:	003e3606 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80faf0:	0101ffc4 	movi	r4,2047
  80faf4:	493fc71e 	bne	r9,r4,80fa14 <__alt_mem_onchip_mem+0xff78fa14>
  80faf8:	2807883a 	mov	r3,r5
  80fafc:	3023883a 	mov	r17,r6
  80fb00:	4821883a 	mov	r16,r9
  80fb04:	003e3006 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80fb08:	10003626 	beq	r2,zero,80fbe4 <__subdf3+0x8a0>
  80fb0c:	2984b03a 	or	r2,r5,r6
  80fb10:	10001726 	beq	r2,zero,80fb70 <__subdf3+0x82c>
  80fb14:	1808d0fa 	srli	r4,r3,3
  80fb18:	8822d0fa 	srli	r17,r17,3
  80fb1c:	1806977a 	slli	r3,r3,29
  80fb20:	2080022c 	andhi	r2,r4,8
  80fb24:	1c62b03a 	or	r17,r3,r17
  80fb28:	10000726 	beq	r2,zero,80fb48 <__subdf3+0x804>
  80fb2c:	2812d0fa 	srli	r9,r5,3
  80fb30:	4880022c 	andhi	r2,r9,8
  80fb34:	1000041e 	bne	r2,zero,80fb48 <__subdf3+0x804>
  80fb38:	300cd0fa 	srli	r6,r6,3
  80fb3c:	2804977a 	slli	r2,r5,29
  80fb40:	4809883a 	mov	r4,r9
  80fb44:	11a2b03a 	or	r17,r2,r6
  80fb48:	8806d77a 	srli	r3,r17,29
  80fb4c:	200890fa 	slli	r4,r4,3
  80fb50:	882290fa 	slli	r17,r17,3
  80fb54:	3825883a 	mov	r18,r7
  80fb58:	1906b03a 	or	r3,r3,r4
  80fb5c:	0401ffc4 	movi	r16,2047
  80fb60:	003e1906 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80fb64:	000b883a 	mov	r5,zero
  80fb68:	0005883a 	mov	r2,zero
  80fb6c:	003e2e06 	br	80f428 <__alt_mem_onchip_mem+0xff78f428>
  80fb70:	0401ffc4 	movi	r16,2047
  80fb74:	003e1406 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80fb78:	0005883a 	mov	r2,zero
  80fb7c:	003f7506 	br	80f954 <__alt_mem_onchip_mem+0xff78f954>
  80fb80:	0005883a 	mov	r2,zero
  80fb84:	0009883a 	mov	r4,zero
  80fb88:	003e7806 	br	80f56c <__alt_mem_onchip_mem+0xff78f56c>
  80fb8c:	123ff804 	addi	r8,r2,-32
  80fb90:	01000804 	movi	r4,32
  80fb94:	1a10d83a 	srl	r8,r3,r8
  80fb98:	11002526 	beq	r2,r4,80fc30 <__subdf3+0x8ec>
  80fb9c:	01001004 	movi	r4,64
  80fba0:	2085c83a 	sub	r2,r4,r2
  80fba4:	1884983a 	sll	r2,r3,r2
  80fba8:	1444b03a 	or	r2,r2,r17
  80fbac:	1004c03a 	cmpne	r2,r2,zero
  80fbb0:	40a2b03a 	or	r17,r8,r2
  80fbb4:	0005883a 	mov	r2,zero
  80fbb8:	003f1606 	br	80f814 <__alt_mem_onchip_mem+0xff78f814>
  80fbbc:	02000434 	movhi	r8,16
  80fbc0:	0009883a 	mov	r4,zero
  80fbc4:	423fffc4 	addi	r8,r8,-1
  80fbc8:	00bfffc4 	movi	r2,-1
  80fbcc:	0401ffc4 	movi	r16,2047
  80fbd0:	003e6606 	br	80f56c <__alt_mem_onchip_mem+0xff78f56c>
  80fbd4:	1c62b03a 	or	r17,r3,r17
  80fbd8:	8822c03a 	cmpne	r17,r17,zero
  80fbdc:	0005883a 	mov	r2,zero
  80fbe0:	003f9906 	br	80fa48 <__alt_mem_onchip_mem+0xff78fa48>
  80fbe4:	2807883a 	mov	r3,r5
  80fbe8:	3023883a 	mov	r17,r6
  80fbec:	0401ffc4 	movi	r16,2047
  80fbf0:	003df506 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80fbf4:	2807883a 	mov	r3,r5
  80fbf8:	3023883a 	mov	r17,r6
  80fbfc:	003df206 	br	80f3c8 <__alt_mem_onchip_mem+0xff78f3c8>
  80fc00:	123ff804 	addi	r8,r2,-32
  80fc04:	01000804 	movi	r4,32
  80fc08:	1a10d83a 	srl	r8,r3,r8
  80fc0c:	11000a26 	beq	r2,r4,80fc38 <__subdf3+0x8f4>
  80fc10:	01001004 	movi	r4,64
  80fc14:	2085c83a 	sub	r2,r4,r2
  80fc18:	1884983a 	sll	r2,r3,r2
  80fc1c:	1444b03a 	or	r2,r2,r17
  80fc20:	1004c03a 	cmpne	r2,r2,zero
  80fc24:	40a2b03a 	or	r17,r8,r2
  80fc28:	0005883a 	mov	r2,zero
  80fc2c:	003f8606 	br	80fa48 <__alt_mem_onchip_mem+0xff78fa48>
  80fc30:	0005883a 	mov	r2,zero
  80fc34:	003fdc06 	br	80fba8 <__alt_mem_onchip_mem+0xff78fba8>
  80fc38:	0005883a 	mov	r2,zero
  80fc3c:	003ff706 	br	80fc1c <__alt_mem_onchip_mem+0xff78fc1c>

0080fc40 <__fixdfsi>:
  80fc40:	280cd53a 	srli	r6,r5,20
  80fc44:	00c00434 	movhi	r3,16
  80fc48:	18ffffc4 	addi	r3,r3,-1
  80fc4c:	3181ffcc 	andi	r6,r6,2047
  80fc50:	01c0ff84 	movi	r7,1022
  80fc54:	28c6703a 	and	r3,r5,r3
  80fc58:	280ad7fa 	srli	r5,r5,31
  80fc5c:	3980120e 	bge	r7,r6,80fca8 <__fixdfsi+0x68>
  80fc60:	00810744 	movi	r2,1053
  80fc64:	11800c16 	blt	r2,r6,80fc98 <__fixdfsi+0x58>
  80fc68:	00810cc4 	movi	r2,1075
  80fc6c:	1185c83a 	sub	r2,r2,r6
  80fc70:	01c007c4 	movi	r7,31
  80fc74:	18c00434 	orhi	r3,r3,16
  80fc78:	38800d16 	blt	r7,r2,80fcb0 <__fixdfsi+0x70>
  80fc7c:	31befb44 	addi	r6,r6,-1043
  80fc80:	2084d83a 	srl	r2,r4,r2
  80fc84:	1986983a 	sll	r3,r3,r6
  80fc88:	1884b03a 	or	r2,r3,r2
  80fc8c:	28000726 	beq	r5,zero,80fcac <__fixdfsi+0x6c>
  80fc90:	0085c83a 	sub	r2,zero,r2
  80fc94:	f800283a 	ret
  80fc98:	00a00034 	movhi	r2,32768
  80fc9c:	10bfffc4 	addi	r2,r2,-1
  80fca0:	2885883a 	add	r2,r5,r2
  80fca4:	f800283a 	ret
  80fca8:	0005883a 	mov	r2,zero
  80fcac:	f800283a 	ret
  80fcb0:	008104c4 	movi	r2,1043
  80fcb4:	1185c83a 	sub	r2,r2,r6
  80fcb8:	1884d83a 	srl	r2,r3,r2
  80fcbc:	003ff306 	br	80fc8c <__alt_mem_onchip_mem+0xff78fc8c>

0080fcc0 <__floatsidf>:
  80fcc0:	defffd04 	addi	sp,sp,-12
  80fcc4:	dfc00215 	stw	ra,8(sp)
  80fcc8:	dc400115 	stw	r17,4(sp)
  80fccc:	dc000015 	stw	r16,0(sp)
  80fcd0:	20002b26 	beq	r4,zero,80fd80 <__floatsidf+0xc0>
  80fcd4:	2023883a 	mov	r17,r4
  80fcd8:	2020d7fa 	srli	r16,r4,31
  80fcdc:	20002d16 	blt	r4,zero,80fd94 <__floatsidf+0xd4>
  80fce0:	8809883a 	mov	r4,r17
  80fce4:	080fe440 	call	80fe44 <__clzsi2>
  80fce8:	01410784 	movi	r5,1054
  80fcec:	288bc83a 	sub	r5,r5,r2
  80fcf0:	01010cc4 	movi	r4,1075
  80fcf4:	2149c83a 	sub	r4,r4,r5
  80fcf8:	00c007c4 	movi	r3,31
  80fcfc:	1900160e 	bge	r3,r4,80fd58 <__floatsidf+0x98>
  80fd00:	00c104c4 	movi	r3,1043
  80fd04:	1947c83a 	sub	r3,r3,r5
  80fd08:	88c6983a 	sll	r3,r17,r3
  80fd0c:	00800434 	movhi	r2,16
  80fd10:	10bfffc4 	addi	r2,r2,-1
  80fd14:	1886703a 	and	r3,r3,r2
  80fd18:	2941ffcc 	andi	r5,r5,2047
  80fd1c:	800d883a 	mov	r6,r16
  80fd20:	0005883a 	mov	r2,zero
  80fd24:	280a953a 	slli	r5,r5,20
  80fd28:	31803fcc 	andi	r6,r6,255
  80fd2c:	01000434 	movhi	r4,16
  80fd30:	300c97fa 	slli	r6,r6,31
  80fd34:	213fffc4 	addi	r4,r4,-1
  80fd38:	1906703a 	and	r3,r3,r4
  80fd3c:	1946b03a 	or	r3,r3,r5
  80fd40:	1986b03a 	or	r3,r3,r6
  80fd44:	dfc00217 	ldw	ra,8(sp)
  80fd48:	dc400117 	ldw	r17,4(sp)
  80fd4c:	dc000017 	ldw	r16,0(sp)
  80fd50:	dec00304 	addi	sp,sp,12
  80fd54:	f800283a 	ret
  80fd58:	00c002c4 	movi	r3,11
  80fd5c:	1887c83a 	sub	r3,r3,r2
  80fd60:	88c6d83a 	srl	r3,r17,r3
  80fd64:	8904983a 	sll	r2,r17,r4
  80fd68:	01000434 	movhi	r4,16
  80fd6c:	213fffc4 	addi	r4,r4,-1
  80fd70:	2941ffcc 	andi	r5,r5,2047
  80fd74:	1906703a 	and	r3,r3,r4
  80fd78:	800d883a 	mov	r6,r16
  80fd7c:	003fe906 	br	80fd24 <__alt_mem_onchip_mem+0xff78fd24>
  80fd80:	000d883a 	mov	r6,zero
  80fd84:	000b883a 	mov	r5,zero
  80fd88:	0007883a 	mov	r3,zero
  80fd8c:	0005883a 	mov	r2,zero
  80fd90:	003fe406 	br	80fd24 <__alt_mem_onchip_mem+0xff78fd24>
  80fd94:	0123c83a 	sub	r17,zero,r4
  80fd98:	003fd106 	br	80fce0 <__alt_mem_onchip_mem+0xff78fce0>

0080fd9c <__floatunsidf>:
  80fd9c:	defffe04 	addi	sp,sp,-8
  80fda0:	dc000015 	stw	r16,0(sp)
  80fda4:	dfc00115 	stw	ra,4(sp)
  80fda8:	2021883a 	mov	r16,r4
  80fdac:	20002226 	beq	r4,zero,80fe38 <__floatunsidf+0x9c>
  80fdb0:	080fe440 	call	80fe44 <__clzsi2>
  80fdb4:	01010784 	movi	r4,1054
  80fdb8:	2089c83a 	sub	r4,r4,r2
  80fdbc:	01810cc4 	movi	r6,1075
  80fdc0:	310dc83a 	sub	r6,r6,r4
  80fdc4:	00c007c4 	movi	r3,31
  80fdc8:	1980120e 	bge	r3,r6,80fe14 <__floatunsidf+0x78>
  80fdcc:	00c104c4 	movi	r3,1043
  80fdd0:	1907c83a 	sub	r3,r3,r4
  80fdd4:	80ca983a 	sll	r5,r16,r3
  80fdd8:	00800434 	movhi	r2,16
  80fddc:	10bfffc4 	addi	r2,r2,-1
  80fde0:	2101ffcc 	andi	r4,r4,2047
  80fde4:	0021883a 	mov	r16,zero
  80fde8:	288a703a 	and	r5,r5,r2
  80fdec:	2008953a 	slli	r4,r4,20
  80fdf0:	00c00434 	movhi	r3,16
  80fdf4:	18ffffc4 	addi	r3,r3,-1
  80fdf8:	28c6703a 	and	r3,r5,r3
  80fdfc:	8005883a 	mov	r2,r16
  80fe00:	1906b03a 	or	r3,r3,r4
  80fe04:	dfc00117 	ldw	ra,4(sp)
  80fe08:	dc000017 	ldw	r16,0(sp)
  80fe0c:	dec00204 	addi	sp,sp,8
  80fe10:	f800283a 	ret
  80fe14:	00c002c4 	movi	r3,11
  80fe18:	188bc83a 	sub	r5,r3,r2
  80fe1c:	814ad83a 	srl	r5,r16,r5
  80fe20:	00c00434 	movhi	r3,16
  80fe24:	18ffffc4 	addi	r3,r3,-1
  80fe28:	81a0983a 	sll	r16,r16,r6
  80fe2c:	2101ffcc 	andi	r4,r4,2047
  80fe30:	28ca703a 	and	r5,r5,r3
  80fe34:	003fed06 	br	80fdec <__alt_mem_onchip_mem+0xff78fdec>
  80fe38:	0009883a 	mov	r4,zero
  80fe3c:	000b883a 	mov	r5,zero
  80fe40:	003fea06 	br	80fdec <__alt_mem_onchip_mem+0xff78fdec>

0080fe44 <__clzsi2>:
  80fe44:	00bfffd4 	movui	r2,65535
  80fe48:	11000536 	bltu	r2,r4,80fe60 <__clzsi2+0x1c>
  80fe4c:	00803fc4 	movi	r2,255
  80fe50:	11000f36 	bltu	r2,r4,80fe90 <__clzsi2+0x4c>
  80fe54:	00800804 	movi	r2,32
  80fe58:	0007883a 	mov	r3,zero
  80fe5c:	00000506 	br	80fe74 <__clzsi2+0x30>
  80fe60:	00804034 	movhi	r2,256
  80fe64:	10bfffc4 	addi	r2,r2,-1
  80fe68:	11000c2e 	bgeu	r2,r4,80fe9c <__clzsi2+0x58>
  80fe6c:	00800204 	movi	r2,8
  80fe70:	00c00604 	movi	r3,24
  80fe74:	20c8d83a 	srl	r4,r4,r3
  80fe78:	00c02074 	movhi	r3,129
  80fe7c:	18d0c304 	addi	r3,r3,17164
  80fe80:	1909883a 	add	r4,r3,r4
  80fe84:	20c00003 	ldbu	r3,0(r4)
  80fe88:	10c5c83a 	sub	r2,r2,r3
  80fe8c:	f800283a 	ret
  80fe90:	00800604 	movi	r2,24
  80fe94:	00c00204 	movi	r3,8
  80fe98:	003ff606 	br	80fe74 <__alt_mem_onchip_mem+0xff78fe74>
  80fe9c:	00800404 	movi	r2,16
  80fea0:	1007883a 	mov	r3,r2
  80fea4:	003ff306 	br	80fe74 <__alt_mem_onchip_mem+0xff78fe74>

0080fea8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80fea8:	defffe04 	addi	sp,sp,-8
  80feac:	dfc00115 	stw	ra,4(sp)
  80feb0:	df000015 	stw	fp,0(sp)
  80feb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80feb8:	d0a00b17 	ldw	r2,-32724(gp)
  80febc:	10000326 	beq	r2,zero,80fecc <alt_get_errno+0x24>
  80fec0:	d0a00b17 	ldw	r2,-32724(gp)
  80fec4:	103ee83a 	callr	r2
  80fec8:	00000106 	br	80fed0 <alt_get_errno+0x28>
  80fecc:	d0a7a404 	addi	r2,gp,-24944
}
  80fed0:	e037883a 	mov	sp,fp
  80fed4:	dfc00117 	ldw	ra,4(sp)
  80fed8:	df000017 	ldw	fp,0(sp)
  80fedc:	dec00204 	addi	sp,sp,8
  80fee0:	f800283a 	ret

0080fee4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80fee4:	defffb04 	addi	sp,sp,-20
  80fee8:	dfc00415 	stw	ra,16(sp)
  80feec:	df000315 	stw	fp,12(sp)
  80fef0:	df000304 	addi	fp,sp,12
  80fef4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80fef8:	e0bfff17 	ldw	r2,-4(fp)
  80fefc:	10000616 	blt	r2,zero,80ff18 <close+0x34>
  80ff00:	e0bfff17 	ldw	r2,-4(fp)
  80ff04:	10c00324 	muli	r3,r2,12
  80ff08:	00802074 	movhi	r2,129
  80ff0c:	1093ed04 	addi	r2,r2,20404
  80ff10:	1885883a 	add	r2,r3,r2
  80ff14:	00000106 	br	80ff1c <close+0x38>
  80ff18:	0005883a 	mov	r2,zero
  80ff1c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80ff20:	e0bffd17 	ldw	r2,-12(fp)
  80ff24:	10001926 	beq	r2,zero,80ff8c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80ff28:	e0bffd17 	ldw	r2,-12(fp)
  80ff2c:	10800017 	ldw	r2,0(r2)
  80ff30:	10800417 	ldw	r2,16(r2)
  80ff34:	10000626 	beq	r2,zero,80ff50 <close+0x6c>
  80ff38:	e0bffd17 	ldw	r2,-12(fp)
  80ff3c:	10800017 	ldw	r2,0(r2)
  80ff40:	10800417 	ldw	r2,16(r2)
  80ff44:	e13ffd17 	ldw	r4,-12(fp)
  80ff48:	103ee83a 	callr	r2
  80ff4c:	00000106 	br	80ff54 <close+0x70>
  80ff50:	0005883a 	mov	r2,zero
  80ff54:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80ff58:	e13fff17 	ldw	r4,-4(fp)
  80ff5c:	08105a40 	call	8105a4 <alt_release_fd>
    if (rval < 0)
  80ff60:	e0bffe17 	ldw	r2,-8(fp)
  80ff64:	1000070e 	bge	r2,zero,80ff84 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80ff68:	080fea80 	call	80fea8 <alt_get_errno>
  80ff6c:	1007883a 	mov	r3,r2
  80ff70:	e0bffe17 	ldw	r2,-8(fp)
  80ff74:	0085c83a 	sub	r2,zero,r2
  80ff78:	18800015 	stw	r2,0(r3)
      return -1;
  80ff7c:	00bfffc4 	movi	r2,-1
  80ff80:	00000706 	br	80ffa0 <close+0xbc>
    }
    return 0;
  80ff84:	0005883a 	mov	r2,zero
  80ff88:	00000506 	br	80ffa0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80ff8c:	080fea80 	call	80fea8 <alt_get_errno>
  80ff90:	1007883a 	mov	r3,r2
  80ff94:	00801444 	movi	r2,81
  80ff98:	18800015 	stw	r2,0(r3)
    return -1;
  80ff9c:	00bfffc4 	movi	r2,-1
  }
}
  80ffa0:	e037883a 	mov	sp,fp
  80ffa4:	dfc00117 	ldw	ra,4(sp)
  80ffa8:	df000017 	ldw	fp,0(sp)
  80ffac:	dec00204 	addi	sp,sp,8
  80ffb0:	f800283a 	ret

0080ffb4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80ffb4:	defffc04 	addi	sp,sp,-16
  80ffb8:	df000315 	stw	fp,12(sp)
  80ffbc:	df000304 	addi	fp,sp,12
  80ffc0:	e13ffd15 	stw	r4,-12(fp)
  80ffc4:	e17ffe15 	stw	r5,-8(fp)
  80ffc8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ffcc:	e0bfff17 	ldw	r2,-4(fp)
}
  80ffd0:	e037883a 	mov	sp,fp
  80ffd4:	df000017 	ldw	fp,0(sp)
  80ffd8:	dec00104 	addi	sp,sp,4
  80ffdc:	f800283a 	ret

0080ffe0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ffe0:	defffe04 	addi	sp,sp,-8
  80ffe4:	dfc00115 	stw	ra,4(sp)
  80ffe8:	df000015 	stw	fp,0(sp)
  80ffec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80fff0:	d0a00b17 	ldw	r2,-32724(gp)
  80fff4:	10000326 	beq	r2,zero,810004 <alt_get_errno+0x24>
  80fff8:	d0a00b17 	ldw	r2,-32724(gp)
  80fffc:	103ee83a 	callr	r2
  810000:	00000106 	br	810008 <alt_get_errno+0x28>
  810004:	d0a7a404 	addi	r2,gp,-24944
}
  810008:	e037883a 	mov	sp,fp
  81000c:	dfc00117 	ldw	ra,4(sp)
  810010:	df000017 	ldw	fp,0(sp)
  810014:	dec00204 	addi	sp,sp,8
  810018:	f800283a 	ret

0081001c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  81001c:	defffb04 	addi	sp,sp,-20
  810020:	dfc00415 	stw	ra,16(sp)
  810024:	df000315 	stw	fp,12(sp)
  810028:	df000304 	addi	fp,sp,12
  81002c:	e13ffe15 	stw	r4,-8(fp)
  810030:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810034:	e0bffe17 	ldw	r2,-8(fp)
  810038:	10000616 	blt	r2,zero,810054 <fstat+0x38>
  81003c:	e0bffe17 	ldw	r2,-8(fp)
  810040:	10c00324 	muli	r3,r2,12
  810044:	00802074 	movhi	r2,129
  810048:	1093ed04 	addi	r2,r2,20404
  81004c:	1885883a 	add	r2,r3,r2
  810050:	00000106 	br	810058 <fstat+0x3c>
  810054:	0005883a 	mov	r2,zero
  810058:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  81005c:	e0bffd17 	ldw	r2,-12(fp)
  810060:	10001026 	beq	r2,zero,8100a4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  810064:	e0bffd17 	ldw	r2,-12(fp)
  810068:	10800017 	ldw	r2,0(r2)
  81006c:	10800817 	ldw	r2,32(r2)
  810070:	10000726 	beq	r2,zero,810090 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  810074:	e0bffd17 	ldw	r2,-12(fp)
  810078:	10800017 	ldw	r2,0(r2)
  81007c:	10800817 	ldw	r2,32(r2)
  810080:	e17fff17 	ldw	r5,-4(fp)
  810084:	e13ffd17 	ldw	r4,-12(fp)
  810088:	103ee83a 	callr	r2
  81008c:	00000a06 	br	8100b8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  810090:	e0bfff17 	ldw	r2,-4(fp)
  810094:	00c80004 	movi	r3,8192
  810098:	10c00115 	stw	r3,4(r2)
      return 0;
  81009c:	0005883a 	mov	r2,zero
  8100a0:	00000506 	br	8100b8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  8100a4:	080ffe00 	call	80ffe0 <alt_get_errno>
  8100a8:	1007883a 	mov	r3,r2
  8100ac:	00801444 	movi	r2,81
  8100b0:	18800015 	stw	r2,0(r3)
    return -1;
  8100b4:	00bfffc4 	movi	r2,-1
  }
}
  8100b8:	e037883a 	mov	sp,fp
  8100bc:	dfc00117 	ldw	ra,4(sp)
  8100c0:	df000017 	ldw	fp,0(sp)
  8100c4:	dec00204 	addi	sp,sp,8
  8100c8:	f800283a 	ret

008100cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8100cc:	defffe04 	addi	sp,sp,-8
  8100d0:	dfc00115 	stw	ra,4(sp)
  8100d4:	df000015 	stw	fp,0(sp)
  8100d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8100dc:	d0a00b17 	ldw	r2,-32724(gp)
  8100e0:	10000326 	beq	r2,zero,8100f0 <alt_get_errno+0x24>
  8100e4:	d0a00b17 	ldw	r2,-32724(gp)
  8100e8:	103ee83a 	callr	r2
  8100ec:	00000106 	br	8100f4 <alt_get_errno+0x28>
  8100f0:	d0a7a404 	addi	r2,gp,-24944
}
  8100f4:	e037883a 	mov	sp,fp
  8100f8:	dfc00117 	ldw	ra,4(sp)
  8100fc:	df000017 	ldw	fp,0(sp)
  810100:	dec00204 	addi	sp,sp,8
  810104:	f800283a 	ret

00810108 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810108:	deffed04 	addi	sp,sp,-76
  81010c:	dfc01215 	stw	ra,72(sp)
  810110:	df001115 	stw	fp,68(sp)
  810114:	df001104 	addi	fp,sp,68
  810118:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81011c:	e0bfff17 	ldw	r2,-4(fp)
  810120:	10000616 	blt	r2,zero,81013c <isatty+0x34>
  810124:	e0bfff17 	ldw	r2,-4(fp)
  810128:	10c00324 	muli	r3,r2,12
  81012c:	00802074 	movhi	r2,129
  810130:	1093ed04 	addi	r2,r2,20404
  810134:	1885883a 	add	r2,r3,r2
  810138:	00000106 	br	810140 <isatty+0x38>
  81013c:	0005883a 	mov	r2,zero
  810140:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  810144:	e0bfef17 	ldw	r2,-68(fp)
  810148:	10000e26 	beq	r2,zero,810184 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  81014c:	e0bfef17 	ldw	r2,-68(fp)
  810150:	10800017 	ldw	r2,0(r2)
  810154:	10800817 	ldw	r2,32(r2)
  810158:	1000021e 	bne	r2,zero,810164 <isatty+0x5c>
    {
      return 1;
  81015c:	00800044 	movi	r2,1
  810160:	00000d06 	br	810198 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810164:	e0bff004 	addi	r2,fp,-64
  810168:	100b883a 	mov	r5,r2
  81016c:	e13fff17 	ldw	r4,-4(fp)
  810170:	081001c0 	call	81001c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810174:	e0bff117 	ldw	r2,-60(fp)
  810178:	10880020 	cmpeqi	r2,r2,8192
  81017c:	10803fcc 	andi	r2,r2,255
  810180:	00000506 	br	810198 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810184:	08100cc0 	call	8100cc <alt_get_errno>
  810188:	1007883a 	mov	r3,r2
  81018c:	00801444 	movi	r2,81
  810190:	18800015 	stw	r2,0(r3)
    return 0;
  810194:	0005883a 	mov	r2,zero
  }
}
  810198:	e037883a 	mov	sp,fp
  81019c:	dfc00117 	ldw	ra,4(sp)
  8101a0:	df000017 	ldw	fp,0(sp)
  8101a4:	dec00204 	addi	sp,sp,8
  8101a8:	f800283a 	ret

008101ac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  8101ac:	defffc04 	addi	sp,sp,-16
  8101b0:	df000315 	stw	fp,12(sp)
  8101b4:	df000304 	addi	fp,sp,12
  8101b8:	e13ffd15 	stw	r4,-12(fp)
  8101bc:	e17ffe15 	stw	r5,-8(fp)
  8101c0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  8101c4:	e0fffe17 	ldw	r3,-8(fp)
  8101c8:	e0bffd17 	ldw	r2,-12(fp)
  8101cc:	18800c26 	beq	r3,r2,810200 <alt_load_section+0x54>
  {
    while( to != end )
  8101d0:	00000806 	br	8101f4 <alt_load_section+0x48>
    {
      *to++ = *from++;
  8101d4:	e0bffe17 	ldw	r2,-8(fp)
  8101d8:	10c00104 	addi	r3,r2,4
  8101dc:	e0fffe15 	stw	r3,-8(fp)
  8101e0:	e0fffd17 	ldw	r3,-12(fp)
  8101e4:	19000104 	addi	r4,r3,4
  8101e8:	e13ffd15 	stw	r4,-12(fp)
  8101ec:	18c00017 	ldw	r3,0(r3)
  8101f0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  8101f4:	e0fffe17 	ldw	r3,-8(fp)
  8101f8:	e0bfff17 	ldw	r2,-4(fp)
  8101fc:	18bff51e 	bne	r3,r2,8101d4 <__alt_mem_onchip_mem+0xff7901d4>
    {
      *to++ = *from++;
    }
  }
}
  810200:	0001883a 	nop
  810204:	e037883a 	mov	sp,fp
  810208:	df000017 	ldw	fp,0(sp)
  81020c:	dec00104 	addi	sp,sp,4
  810210:	f800283a 	ret

00810214 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810214:	defffe04 	addi	sp,sp,-8
  810218:	dfc00115 	stw	ra,4(sp)
  81021c:	df000015 	stw	fp,0(sp)
  810220:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810224:	01802074 	movhi	r6,129
  810228:	3198f004 	addi	r6,r6,25536
  81022c:	01402074 	movhi	r5,129
  810230:	2951b404 	addi	r5,r5,18128
  810234:	01002074 	movhi	r4,129
  810238:	2118f004 	addi	r4,r4,25536
  81023c:	08101ac0 	call	8101ac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810240:	01802034 	movhi	r6,128
  810244:	31809104 	addi	r6,r6,580
  810248:	01402034 	movhi	r5,128
  81024c:	29400804 	addi	r5,r5,32
  810250:	01002034 	movhi	r4,128
  810254:	21000804 	addi	r4,r4,32
  810258:	08101ac0 	call	8101ac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  81025c:	01802074 	movhi	r6,129
  810260:	3191b404 	addi	r6,r6,18128
  810264:	01402074 	movhi	r5,129
  810268:	29502004 	addi	r5,r5,16512
  81026c:	01002074 	movhi	r4,129
  810270:	21102004 	addi	r4,r4,16512
  810274:	08101ac0 	call	8101ac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  810278:	0812f880 	call	812f88 <alt_dcache_flush_all>
  alt_icache_flush_all();
  81027c:	08131700 	call	813170 <alt_icache_flush_all>
}
  810280:	0001883a 	nop
  810284:	e037883a 	mov	sp,fp
  810288:	dfc00117 	ldw	ra,4(sp)
  81028c:	df000017 	ldw	fp,0(sp)
  810290:	dec00204 	addi	sp,sp,8
  810294:	f800283a 	ret

00810298 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810298:	defffe04 	addi	sp,sp,-8
  81029c:	dfc00115 	stw	ra,4(sp)
  8102a0:	df000015 	stw	fp,0(sp)
  8102a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8102a8:	d0a00b17 	ldw	r2,-32724(gp)
  8102ac:	10000326 	beq	r2,zero,8102bc <alt_get_errno+0x24>
  8102b0:	d0a00b17 	ldw	r2,-32724(gp)
  8102b4:	103ee83a 	callr	r2
  8102b8:	00000106 	br	8102c0 <alt_get_errno+0x28>
  8102bc:	d0a7a404 	addi	r2,gp,-24944
}
  8102c0:	e037883a 	mov	sp,fp
  8102c4:	dfc00117 	ldw	ra,4(sp)
  8102c8:	df000017 	ldw	fp,0(sp)
  8102cc:	dec00204 	addi	sp,sp,8
  8102d0:	f800283a 	ret

008102d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  8102d4:	defff904 	addi	sp,sp,-28
  8102d8:	dfc00615 	stw	ra,24(sp)
  8102dc:	df000515 	stw	fp,20(sp)
  8102e0:	df000504 	addi	fp,sp,20
  8102e4:	e13ffd15 	stw	r4,-12(fp)
  8102e8:	e17ffe15 	stw	r5,-8(fp)
  8102ec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  8102f0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8102f4:	e0bffd17 	ldw	r2,-12(fp)
  8102f8:	10000616 	blt	r2,zero,810314 <lseek+0x40>
  8102fc:	e0bffd17 	ldw	r2,-12(fp)
  810300:	10c00324 	muli	r3,r2,12
  810304:	00802074 	movhi	r2,129
  810308:	1093ed04 	addi	r2,r2,20404
  81030c:	1885883a 	add	r2,r3,r2
  810310:	00000106 	br	810318 <lseek+0x44>
  810314:	0005883a 	mov	r2,zero
  810318:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  81031c:	e0bffc17 	ldw	r2,-16(fp)
  810320:	10001026 	beq	r2,zero,810364 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  810324:	e0bffc17 	ldw	r2,-16(fp)
  810328:	10800017 	ldw	r2,0(r2)
  81032c:	10800717 	ldw	r2,28(r2)
  810330:	10000926 	beq	r2,zero,810358 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  810334:	e0bffc17 	ldw	r2,-16(fp)
  810338:	10800017 	ldw	r2,0(r2)
  81033c:	10800717 	ldw	r2,28(r2)
  810340:	e1bfff17 	ldw	r6,-4(fp)
  810344:	e17ffe17 	ldw	r5,-8(fp)
  810348:	e13ffc17 	ldw	r4,-16(fp)
  81034c:	103ee83a 	callr	r2
  810350:	e0bffb15 	stw	r2,-20(fp)
  810354:	00000506 	br	81036c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  810358:	00bfde84 	movi	r2,-134
  81035c:	e0bffb15 	stw	r2,-20(fp)
  810360:	00000206 	br	81036c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  810364:	00bfebc4 	movi	r2,-81
  810368:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  81036c:	e0bffb17 	ldw	r2,-20(fp)
  810370:	1000070e 	bge	r2,zero,810390 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  810374:	08102980 	call	810298 <alt_get_errno>
  810378:	1007883a 	mov	r3,r2
  81037c:	e0bffb17 	ldw	r2,-20(fp)
  810380:	0085c83a 	sub	r2,zero,r2
  810384:	18800015 	stw	r2,0(r3)
    rc = -1;
  810388:	00bfffc4 	movi	r2,-1
  81038c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  810390:	e0bffb17 	ldw	r2,-20(fp)
}
  810394:	e037883a 	mov	sp,fp
  810398:	dfc00117 	ldw	ra,4(sp)
  81039c:	df000017 	ldw	fp,0(sp)
  8103a0:	dec00204 	addi	sp,sp,8
  8103a4:	f800283a 	ret

008103a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  8103a8:	defffd04 	addi	sp,sp,-12
  8103ac:	dfc00215 	stw	ra,8(sp)
  8103b0:	df000115 	stw	fp,4(sp)
  8103b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  8103b8:	0009883a 	mov	r4,zero
  8103bc:	0810a780 	call	810a78 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  8103c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  8103c4:	0810ab00 	call	810ab0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  8103c8:	01802074 	movhi	r6,129
  8103cc:	31910604 	addi	r6,r6,17432
  8103d0:	01402074 	movhi	r5,129
  8103d4:	29510604 	addi	r5,r5,17432
  8103d8:	01002074 	movhi	r4,129
  8103dc:	21110604 	addi	r4,r4,17432
  8103e0:	08135080 	call	813508 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  8103e4:	08130b00 	call	8130b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  8103e8:	01002074 	movhi	r4,129
  8103ec:	210c4404 	addi	r4,r4,12560
  8103f0:	0813cec0 	call	813cec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  8103f4:	d0a7a517 	ldw	r2,-24940(gp)
  8103f8:	d0e7a617 	ldw	r3,-24936(gp)
  8103fc:	d127a717 	ldw	r4,-24932(gp)
  810400:	200d883a 	mov	r6,r4
  810404:	180b883a 	mov	r5,r3
  810408:	1009883a 	mov	r4,r2
  81040c:	08030f00 	call	8030f0 <main>
  810410:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  810414:	01000044 	movi	r4,1
  810418:	080fee40 	call	80fee4 <close>
  exit (result);
  81041c:	e13fff17 	ldw	r4,-4(fp)
  810420:	0813d000 	call	813d00 <exit>

00810424 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  810424:	defffe04 	addi	sp,sp,-8
  810428:	df000115 	stw	fp,4(sp)
  81042c:	df000104 	addi	fp,sp,4
  810430:	e13fff15 	stw	r4,-4(fp)
}
  810434:	0001883a 	nop
  810438:	e037883a 	mov	sp,fp
  81043c:	df000017 	ldw	fp,0(sp)
  810440:	dec00104 	addi	sp,sp,4
  810444:	f800283a 	ret

00810448 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  810448:	defffe04 	addi	sp,sp,-8
  81044c:	df000115 	stw	fp,4(sp)
  810450:	df000104 	addi	fp,sp,4
  810454:	e13fff15 	stw	r4,-4(fp)
}
  810458:	0001883a 	nop
  81045c:	e037883a 	mov	sp,fp
  810460:	df000017 	ldw	fp,0(sp)
  810464:	dec00104 	addi	sp,sp,4
  810468:	f800283a 	ret

0081046c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81046c:	defffe04 	addi	sp,sp,-8
  810470:	dfc00115 	stw	ra,4(sp)
  810474:	df000015 	stw	fp,0(sp)
  810478:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81047c:	d0a00b17 	ldw	r2,-32724(gp)
  810480:	10000326 	beq	r2,zero,810490 <alt_get_errno+0x24>
  810484:	d0a00b17 	ldw	r2,-32724(gp)
  810488:	103ee83a 	callr	r2
  81048c:	00000106 	br	810494 <alt_get_errno+0x28>
  810490:	d0a7a404 	addi	r2,gp,-24944
}
  810494:	e037883a 	mov	sp,fp
  810498:	dfc00117 	ldw	ra,4(sp)
  81049c:	df000017 	ldw	fp,0(sp)
  8104a0:	dec00204 	addi	sp,sp,8
  8104a4:	f800283a 	ret

008104a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8104a8:	defff904 	addi	sp,sp,-28
  8104ac:	dfc00615 	stw	ra,24(sp)
  8104b0:	df000515 	stw	fp,20(sp)
  8104b4:	df000504 	addi	fp,sp,20
  8104b8:	e13ffd15 	stw	r4,-12(fp)
  8104bc:	e17ffe15 	stw	r5,-8(fp)
  8104c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8104c4:	e0bffd17 	ldw	r2,-12(fp)
  8104c8:	10000616 	blt	r2,zero,8104e4 <read+0x3c>
  8104cc:	e0bffd17 	ldw	r2,-12(fp)
  8104d0:	10c00324 	muli	r3,r2,12
  8104d4:	00802074 	movhi	r2,129
  8104d8:	1093ed04 	addi	r2,r2,20404
  8104dc:	1885883a 	add	r2,r3,r2
  8104e0:	00000106 	br	8104e8 <read+0x40>
  8104e4:	0005883a 	mov	r2,zero
  8104e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8104ec:	e0bffb17 	ldw	r2,-20(fp)
  8104f0:	10002226 	beq	r2,zero,81057c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8104f4:	e0bffb17 	ldw	r2,-20(fp)
  8104f8:	10800217 	ldw	r2,8(r2)
  8104fc:	108000cc 	andi	r2,r2,3
  810500:	10800060 	cmpeqi	r2,r2,1
  810504:	1000181e 	bne	r2,zero,810568 <read+0xc0>
        (fd->dev->read))
  810508:	e0bffb17 	ldw	r2,-20(fp)
  81050c:	10800017 	ldw	r2,0(r2)
  810510:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  810514:	10001426 	beq	r2,zero,810568 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  810518:	e0bffb17 	ldw	r2,-20(fp)
  81051c:	10800017 	ldw	r2,0(r2)
  810520:	10800517 	ldw	r2,20(r2)
  810524:	e0ffff17 	ldw	r3,-4(fp)
  810528:	180d883a 	mov	r6,r3
  81052c:	e17ffe17 	ldw	r5,-8(fp)
  810530:	e13ffb17 	ldw	r4,-20(fp)
  810534:	103ee83a 	callr	r2
  810538:	e0bffc15 	stw	r2,-16(fp)
  81053c:	e0bffc17 	ldw	r2,-16(fp)
  810540:	1000070e 	bge	r2,zero,810560 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  810544:	081046c0 	call	81046c <alt_get_errno>
  810548:	1007883a 	mov	r3,r2
  81054c:	e0bffc17 	ldw	r2,-16(fp)
  810550:	0085c83a 	sub	r2,zero,r2
  810554:	18800015 	stw	r2,0(r3)
          return -1;
  810558:	00bfffc4 	movi	r2,-1
  81055c:	00000c06 	br	810590 <read+0xe8>
        }
        return rval;
  810560:	e0bffc17 	ldw	r2,-16(fp)
  810564:	00000a06 	br	810590 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  810568:	081046c0 	call	81046c <alt_get_errno>
  81056c:	1007883a 	mov	r3,r2
  810570:	00800344 	movi	r2,13
  810574:	18800015 	stw	r2,0(r3)
  810578:	00000406 	br	81058c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  81057c:	081046c0 	call	81046c <alt_get_errno>
  810580:	1007883a 	mov	r3,r2
  810584:	00801444 	movi	r2,81
  810588:	18800015 	stw	r2,0(r3)
  }
  return -1;
  81058c:	00bfffc4 	movi	r2,-1
}
  810590:	e037883a 	mov	sp,fp
  810594:	dfc00117 	ldw	ra,4(sp)
  810598:	df000017 	ldw	fp,0(sp)
  81059c:	dec00204 	addi	sp,sp,8
  8105a0:	f800283a 	ret

008105a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8105a4:	defffe04 	addi	sp,sp,-8
  8105a8:	df000115 	stw	fp,4(sp)
  8105ac:	df000104 	addi	fp,sp,4
  8105b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8105b4:	e0bfff17 	ldw	r2,-4(fp)
  8105b8:	108000d0 	cmplti	r2,r2,3
  8105bc:	10000d1e 	bne	r2,zero,8105f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8105c0:	00802074 	movhi	r2,129
  8105c4:	1093ed04 	addi	r2,r2,20404
  8105c8:	e0ffff17 	ldw	r3,-4(fp)
  8105cc:	18c00324 	muli	r3,r3,12
  8105d0:	10c5883a 	add	r2,r2,r3
  8105d4:	10800204 	addi	r2,r2,8
  8105d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8105dc:	00802074 	movhi	r2,129
  8105e0:	1093ed04 	addi	r2,r2,20404
  8105e4:	e0ffff17 	ldw	r3,-4(fp)
  8105e8:	18c00324 	muli	r3,r3,12
  8105ec:	10c5883a 	add	r2,r2,r3
  8105f0:	10000015 	stw	zero,0(r2)
  }
}
  8105f4:	0001883a 	nop
  8105f8:	e037883a 	mov	sp,fp
  8105fc:	df000017 	ldw	fp,0(sp)
  810600:	dec00104 	addi	sp,sp,4
  810604:	f800283a 	ret

00810608 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  810608:	defff904 	addi	sp,sp,-28
  81060c:	df000615 	stw	fp,24(sp)
  810610:	df000604 	addi	fp,sp,24
  810614:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810618:	0005303a 	rdctl	r2,status
  81061c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810620:	e0fffe17 	ldw	r3,-8(fp)
  810624:	00bfff84 	movi	r2,-2
  810628:	1884703a 	and	r2,r3,r2
  81062c:	1001703a 	wrctl	status,r2
  
  return context;
  810630:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  810634:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  810638:	d0a00c17 	ldw	r2,-32720(gp)
  81063c:	10c000c4 	addi	r3,r2,3
  810640:	00bfff04 	movi	r2,-4
  810644:	1884703a 	and	r2,r3,r2
  810648:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  81064c:	d0e00c17 	ldw	r3,-32720(gp)
  810650:	e0bfff17 	ldw	r2,-4(fp)
  810654:	1887883a 	add	r3,r3,r2
  810658:	00804034 	movhi	r2,256
  81065c:	10800004 	addi	r2,r2,0
  810660:	10c0062e 	bgeu	r2,r3,81067c <sbrk+0x74>
  810664:	e0bffb17 	ldw	r2,-20(fp)
  810668:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81066c:	e0bffa17 	ldw	r2,-24(fp)
  810670:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  810674:	00bfffc4 	movi	r2,-1
  810678:	00000b06 	br	8106a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  81067c:	d0a00c17 	ldw	r2,-32720(gp)
  810680:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  810684:	d0e00c17 	ldw	r3,-32720(gp)
  810688:	e0bfff17 	ldw	r2,-4(fp)
  81068c:	1885883a 	add	r2,r3,r2
  810690:	d0a00c15 	stw	r2,-32720(gp)
  810694:	e0bffb17 	ldw	r2,-20(fp)
  810698:	e0bffc15 	stw	r2,-16(fp)
  81069c:	e0bffc17 	ldw	r2,-16(fp)
  8106a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8106a4:	e0bffd17 	ldw	r2,-12(fp)
} 
  8106a8:	e037883a 	mov	sp,fp
  8106ac:	df000017 	ldw	fp,0(sp)
  8106b0:	dec00104 	addi	sp,sp,4
  8106b4:	f800283a 	ret

008106b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8106b8:	defffa04 	addi	sp,sp,-24
  8106bc:	df000515 	stw	fp,20(sp)
  8106c0:	df000504 	addi	fp,sp,20
  8106c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106c8:	0005303a 	rdctl	r2,status
  8106cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106d0:	e0fffc17 	ldw	r3,-16(fp)
  8106d4:	00bfff84 	movi	r2,-2
  8106d8:	1884703a 	and	r2,r3,r2
  8106dc:	1001703a 	wrctl	status,r2
  
  return context;
  8106e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8106e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8106e8:	e0bfff17 	ldw	r2,-4(fp)
  8106ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8106f0:	e0bffd17 	ldw	r2,-12(fp)
  8106f4:	10800017 	ldw	r2,0(r2)
  8106f8:	e0fffd17 	ldw	r3,-12(fp)
  8106fc:	18c00117 	ldw	r3,4(r3)
  810700:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  810704:	e0bffd17 	ldw	r2,-12(fp)
  810708:	10800117 	ldw	r2,4(r2)
  81070c:	e0fffd17 	ldw	r3,-12(fp)
  810710:	18c00017 	ldw	r3,0(r3)
  810714:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  810718:	e0bffd17 	ldw	r2,-12(fp)
  81071c:	e0fffd17 	ldw	r3,-12(fp)
  810720:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  810724:	e0bffd17 	ldw	r2,-12(fp)
  810728:	e0fffd17 	ldw	r3,-12(fp)
  81072c:	10c00015 	stw	r3,0(r2)
  810730:	e0bffb17 	ldw	r2,-20(fp)
  810734:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810738:	e0bffe17 	ldw	r2,-8(fp)
  81073c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  810740:	0001883a 	nop
  810744:	e037883a 	mov	sp,fp
  810748:	df000017 	ldw	fp,0(sp)
  81074c:	dec00104 	addi	sp,sp,4
  810750:	f800283a 	ret

00810754 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  810754:	defffb04 	addi	sp,sp,-20
  810758:	dfc00415 	stw	ra,16(sp)
  81075c:	df000315 	stw	fp,12(sp)
  810760:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  810764:	d0a00d17 	ldw	r2,-32716(gp)
  810768:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81076c:	d0a7a917 	ldw	r2,-24924(gp)
  810770:	10800044 	addi	r2,r2,1
  810774:	d0a7a915 	stw	r2,-24924(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810778:	00002e06 	br	810834 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  81077c:	e0bffd17 	ldw	r2,-12(fp)
  810780:	10800017 	ldw	r2,0(r2)
  810784:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  810788:	e0bffd17 	ldw	r2,-12(fp)
  81078c:	10800403 	ldbu	r2,16(r2)
  810790:	10803fcc 	andi	r2,r2,255
  810794:	10000426 	beq	r2,zero,8107a8 <alt_tick+0x54>
  810798:	d0a7a917 	ldw	r2,-24924(gp)
  81079c:	1000021e 	bne	r2,zero,8107a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  8107a0:	e0bffd17 	ldw	r2,-12(fp)
  8107a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8107a8:	e0bffd17 	ldw	r2,-12(fp)
  8107ac:	10800217 	ldw	r2,8(r2)
  8107b0:	d0e7a917 	ldw	r3,-24924(gp)
  8107b4:	18801d36 	bltu	r3,r2,81082c <alt_tick+0xd8>
  8107b8:	e0bffd17 	ldw	r2,-12(fp)
  8107bc:	10800403 	ldbu	r2,16(r2)
  8107c0:	10803fcc 	andi	r2,r2,255
  8107c4:	1000191e 	bne	r2,zero,81082c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8107c8:	e0bffd17 	ldw	r2,-12(fp)
  8107cc:	10800317 	ldw	r2,12(r2)
  8107d0:	e0fffd17 	ldw	r3,-12(fp)
  8107d4:	18c00517 	ldw	r3,20(r3)
  8107d8:	1809883a 	mov	r4,r3
  8107dc:	103ee83a 	callr	r2
  8107e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8107e4:	e0bfff17 	ldw	r2,-4(fp)
  8107e8:	1000031e 	bne	r2,zero,8107f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8107ec:	e13ffd17 	ldw	r4,-12(fp)
  8107f0:	08106b80 	call	8106b8 <alt_alarm_stop>
  8107f4:	00000d06 	br	81082c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8107f8:	e0bffd17 	ldw	r2,-12(fp)
  8107fc:	10c00217 	ldw	r3,8(r2)
  810800:	e0bfff17 	ldw	r2,-4(fp)
  810804:	1887883a 	add	r3,r3,r2
  810808:	e0bffd17 	ldw	r2,-12(fp)
  81080c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  810810:	e0bffd17 	ldw	r2,-12(fp)
  810814:	10c00217 	ldw	r3,8(r2)
  810818:	d0a7a917 	ldw	r2,-24924(gp)
  81081c:	1880032e 	bgeu	r3,r2,81082c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  810820:	e0bffd17 	ldw	r2,-12(fp)
  810824:	00c00044 	movi	r3,1
  810828:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  81082c:	e0bffe17 	ldw	r2,-8(fp)
  810830:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  810834:	e0fffd17 	ldw	r3,-12(fp)
  810838:	d0a00d04 	addi	r2,gp,-32716
  81083c:	18bfcf1e 	bne	r3,r2,81077c <__alt_mem_onchip_mem+0xff79077c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  810840:	0001883a 	nop
}
  810844:	0001883a 	nop
  810848:	e037883a 	mov	sp,fp
  81084c:	dfc00117 	ldw	ra,4(sp)
  810850:	df000017 	ldw	fp,0(sp)
  810854:	dec00204 	addi	sp,sp,8
  810858:	f800283a 	ret

0081085c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81085c:	defffe04 	addi	sp,sp,-8
  810860:	dfc00115 	stw	ra,4(sp)
  810864:	df000015 	stw	fp,0(sp)
  810868:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  81086c:	d0a00b17 	ldw	r2,-32724(gp)
  810870:	10000326 	beq	r2,zero,810880 <alt_get_errno+0x24>
  810874:	d0a00b17 	ldw	r2,-32724(gp)
  810878:	103ee83a 	callr	r2
  81087c:	00000106 	br	810884 <alt_get_errno+0x28>
  810880:	d0a7a404 	addi	r2,gp,-24944
}
  810884:	e037883a 	mov	sp,fp
  810888:	dfc00117 	ldw	ra,4(sp)
  81088c:	df000017 	ldw	fp,0(sp)
  810890:	dec00204 	addi	sp,sp,8
  810894:	f800283a 	ret

00810898 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
  810898:	defffc04 	addi	sp,sp,-16
  81089c:	dfc00315 	stw	ra,12(sp)
  8108a0:	df000215 	stw	fp,8(sp)
  8108a4:	df000204 	addi	fp,sp,8
  8108a8:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8108ac:	d0a7a917 	ldw	r2,-24924(gp)
  clock_t ticks = alt_nticks(); 
  8108b0:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8108b4:	d0a7a817 	ldw	r2,-24928(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
  8108b8:	1000061e 	bne	r2,zero,8108d4 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
  8108bc:	081085c0 	call	81085c <alt_get_errno>
  8108c0:	1007883a 	mov	r3,r2
  8108c4:	00801604 	movi	r2,88
  8108c8:	18800015 	stw	r2,0(r3)
    return 0;
  8108cc:	0005883a 	mov	r2,zero
  8108d0:	00000a06 	br	8108fc <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
  8108d4:	e0bfff17 	ldw	r2,-4(fp)
  8108d8:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
  8108dc:	e0bfff17 	ldw	r2,-4(fp)
  8108e0:	e0fffe17 	ldw	r3,-8(fp)
  8108e4:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
  8108e8:	e0bfff17 	ldw	r2,-4(fp)
  8108ec:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
  8108f0:	e0bfff17 	ldw	r2,-4(fp)
  8108f4:	10000315 	stw	zero,12(r2)

  return ticks;
  8108f8:	e0bffe17 	ldw	r2,-8(fp)
}
  8108fc:	e037883a 	mov	sp,fp
  810900:	dfc00117 	ldw	ra,4(sp)
  810904:	df000017 	ldw	fp,0(sp)
  810908:	dec00204 	addi	sp,sp,8
  81090c:	f800283a 	ret

00810910 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810910:	defffe04 	addi	sp,sp,-8
  810914:	dfc00115 	stw	ra,4(sp)
  810918:	df000015 	stw	fp,0(sp)
  81091c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810920:	d0a00b17 	ldw	r2,-32724(gp)
  810924:	10000326 	beq	r2,zero,810934 <alt_get_errno+0x24>
  810928:	d0a00b17 	ldw	r2,-32724(gp)
  81092c:	103ee83a 	callr	r2
  810930:	00000106 	br	810938 <alt_get_errno+0x28>
  810934:	d0a7a404 	addi	r2,gp,-24944
}
  810938:	e037883a 	mov	sp,fp
  81093c:	dfc00117 	ldw	ra,4(sp)
  810940:	df000017 	ldw	fp,0(sp)
  810944:	dec00204 	addi	sp,sp,8
  810948:	f800283a 	ret

0081094c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  81094c:	defff904 	addi	sp,sp,-28
  810950:	dfc00615 	stw	ra,24(sp)
  810954:	df000515 	stw	fp,20(sp)
  810958:	df000504 	addi	fp,sp,20
  81095c:	e13ffd15 	stw	r4,-12(fp)
  810960:	e17ffe15 	stw	r5,-8(fp)
  810964:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810968:	e0bffd17 	ldw	r2,-12(fp)
  81096c:	10000616 	blt	r2,zero,810988 <write+0x3c>
  810970:	e0bffd17 	ldw	r2,-12(fp)
  810974:	10c00324 	muli	r3,r2,12
  810978:	00802074 	movhi	r2,129
  81097c:	1093ed04 	addi	r2,r2,20404
  810980:	1885883a 	add	r2,r3,r2
  810984:	00000106 	br	81098c <write+0x40>
  810988:	0005883a 	mov	r2,zero
  81098c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  810990:	e0bffb17 	ldw	r2,-20(fp)
  810994:	10002126 	beq	r2,zero,810a1c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  810998:	e0bffb17 	ldw	r2,-20(fp)
  81099c:	10800217 	ldw	r2,8(r2)
  8109a0:	108000cc 	andi	r2,r2,3
  8109a4:	10001826 	beq	r2,zero,810a08 <write+0xbc>
  8109a8:	e0bffb17 	ldw	r2,-20(fp)
  8109ac:	10800017 	ldw	r2,0(r2)
  8109b0:	10800617 	ldw	r2,24(r2)
  8109b4:	10001426 	beq	r2,zero,810a08 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  8109b8:	e0bffb17 	ldw	r2,-20(fp)
  8109bc:	10800017 	ldw	r2,0(r2)
  8109c0:	10800617 	ldw	r2,24(r2)
  8109c4:	e0ffff17 	ldw	r3,-4(fp)
  8109c8:	180d883a 	mov	r6,r3
  8109cc:	e17ffe17 	ldw	r5,-8(fp)
  8109d0:	e13ffb17 	ldw	r4,-20(fp)
  8109d4:	103ee83a 	callr	r2
  8109d8:	e0bffc15 	stw	r2,-16(fp)
  8109dc:	e0bffc17 	ldw	r2,-16(fp)
  8109e0:	1000070e 	bge	r2,zero,810a00 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  8109e4:	08109100 	call	810910 <alt_get_errno>
  8109e8:	1007883a 	mov	r3,r2
  8109ec:	e0bffc17 	ldw	r2,-16(fp)
  8109f0:	0085c83a 	sub	r2,zero,r2
  8109f4:	18800015 	stw	r2,0(r3)
        return -1;
  8109f8:	00bfffc4 	movi	r2,-1
  8109fc:	00000c06 	br	810a30 <write+0xe4>
      }
      return rval;
  810a00:	e0bffc17 	ldw	r2,-16(fp)
  810a04:	00000a06 	br	810a30 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  810a08:	08109100 	call	810910 <alt_get_errno>
  810a0c:	1007883a 	mov	r3,r2
  810a10:	00800344 	movi	r2,13
  810a14:	18800015 	stw	r2,0(r3)
  810a18:	00000406 	br	810a2c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  810a1c:	08109100 	call	810910 <alt_get_errno>
  810a20:	1007883a 	mov	r3,r2
  810a24:	00801444 	movi	r2,81
  810a28:	18800015 	stw	r2,0(r3)
  }
  return -1;
  810a2c:	00bfffc4 	movi	r2,-1
}
  810a30:	e037883a 	mov	sp,fp
  810a34:	dfc00117 	ldw	ra,4(sp)
  810a38:	df000017 	ldw	fp,0(sp)
  810a3c:	dec00204 	addi	sp,sp,8
  810a40:	f800283a 	ret

00810a44 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  810a44:	defffd04 	addi	sp,sp,-12
  810a48:	dfc00215 	stw	ra,8(sp)
  810a4c:	df000115 	stw	fp,4(sp)
  810a50:	df000104 	addi	fp,sp,4
  810a54:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  810a58:	d1600804 	addi	r5,gp,-32736
  810a5c:	e13fff17 	ldw	r4,-4(fp)
  810a60:	081300c0 	call	81300c <alt_dev_llist_insert>
}
  810a64:	e037883a 	mov	sp,fp
  810a68:	dfc00117 	ldw	ra,4(sp)
  810a6c:	df000017 	ldw	fp,0(sp)
  810a70:	dec00204 	addi	sp,sp,8
  810a74:	f800283a 	ret

00810a78 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  810a78:	defffd04 	addi	sp,sp,-12
  810a7c:	dfc00215 	stw	ra,8(sp)
  810a80:	df000115 	stw	fp,4(sp)
  810a84:	df000104 	addi	fp,sp,4
  810a88:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  810a8c:	08138080 	call	813808 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  810a90:	00800044 	movi	r2,1
  810a94:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  810a98:	0001883a 	nop
  810a9c:	e037883a 	mov	sp,fp
  810aa0:	dfc00117 	ldw	ra,4(sp)
  810aa4:	df000017 	ldw	fp,0(sp)
  810aa8:	dec00204 	addi	sp,sp,8
  810aac:	f800283a 	ret

00810ab0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  810ab0:	defffe04 	addi	sp,sp,-8
  810ab4:	dfc00115 	stw	ra,4(sp)
  810ab8:	df000015 	stw	fp,0(sp)
  810abc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  810ac0:	01c0fa04 	movi	r7,1000
  810ac4:	01800084 	movi	r6,2
  810ac8:	000b883a 	mov	r5,zero
  810acc:	01004434 	movhi	r4,272
  810ad0:	21040804 	addi	r4,r4,4128
  810ad4:	08125080 	call	812508 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  810ad8:	01800044 	movi	r6,1
  810adc:	000b883a 	mov	r5,zero
  810ae0:	01002074 	movhi	r4,129
  810ae4:	21145704 	addi	r4,r4,20828
  810ae8:	0810cb00 	call	810cb0 <altera_avalon_jtag_uart_init>
  810aec:	01002074 	movhi	r4,129
  810af0:	21144d04 	addi	r4,r4,20788
  810af4:	0810a440 	call	810a44 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  810af8:	01002074 	movhi	r4,129
  810afc:	21186f04 	addi	r4,r4,25020
  810b00:	08122fc0 	call	8122fc <altera_avalon_lcd_16207_init>
  810b04:	01002074 	movhi	r4,129
  810b08:	21186504 	addi	r4,r4,24980
  810b0c:	0810a440 	call	810a44 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  810b10:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  810b14:	000d883a 	mov	r6,zero
  810b18:	000b883a 	mov	r5,zero
  810b1c:	01002074 	movhi	r4,129
  810b20:	2118b704 	addi	r4,r4,25308
  810b24:	08126940 	call	812694 <altera_avalon_uart_init>
  810b28:	01002074 	movhi	r4,129
  810b2c:	2118ad04 	addi	r4,r4,25268
  810b30:	0810a440 	call	810a44 <alt_dev_reg>
}
  810b34:	0001883a 	nop
  810b38:	e037883a 	mov	sp,fp
  810b3c:	dfc00117 	ldw	ra,4(sp)
  810b40:	df000017 	ldw	fp,0(sp)
  810b44:	dec00204 	addi	sp,sp,8
  810b48:	f800283a 	ret

00810b4c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  810b4c:	defffa04 	addi	sp,sp,-24
  810b50:	dfc00515 	stw	ra,20(sp)
  810b54:	df000415 	stw	fp,16(sp)
  810b58:	df000404 	addi	fp,sp,16
  810b5c:	e13ffd15 	stw	r4,-12(fp)
  810b60:	e17ffe15 	stw	r5,-8(fp)
  810b64:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810b68:	e0bffd17 	ldw	r2,-12(fp)
  810b6c:	10800017 	ldw	r2,0(r2)
  810b70:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  810b74:	e0bffc17 	ldw	r2,-16(fp)
  810b78:	10c00a04 	addi	r3,r2,40
  810b7c:	e0bffd17 	ldw	r2,-12(fp)
  810b80:	10800217 	ldw	r2,8(r2)
  810b84:	100f883a 	mov	r7,r2
  810b88:	e1bfff17 	ldw	r6,-4(fp)
  810b8c:	e17ffe17 	ldw	r5,-8(fp)
  810b90:	1809883a 	mov	r4,r3
  810b94:	08111740 	call	811174 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  810b98:	e037883a 	mov	sp,fp
  810b9c:	dfc00117 	ldw	ra,4(sp)
  810ba0:	df000017 	ldw	fp,0(sp)
  810ba4:	dec00204 	addi	sp,sp,8
  810ba8:	f800283a 	ret

00810bac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  810bac:	defffa04 	addi	sp,sp,-24
  810bb0:	dfc00515 	stw	ra,20(sp)
  810bb4:	df000415 	stw	fp,16(sp)
  810bb8:	df000404 	addi	fp,sp,16
  810bbc:	e13ffd15 	stw	r4,-12(fp)
  810bc0:	e17ffe15 	stw	r5,-8(fp)
  810bc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810bc8:	e0bffd17 	ldw	r2,-12(fp)
  810bcc:	10800017 	ldw	r2,0(r2)
  810bd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  810bd4:	e0bffc17 	ldw	r2,-16(fp)
  810bd8:	10c00a04 	addi	r3,r2,40
  810bdc:	e0bffd17 	ldw	r2,-12(fp)
  810be0:	10800217 	ldw	r2,8(r2)
  810be4:	100f883a 	mov	r7,r2
  810be8:	e1bfff17 	ldw	r6,-4(fp)
  810bec:	e17ffe17 	ldw	r5,-8(fp)
  810bf0:	1809883a 	mov	r4,r3
  810bf4:	08113900 	call	811390 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  810bf8:	e037883a 	mov	sp,fp
  810bfc:	dfc00117 	ldw	ra,4(sp)
  810c00:	df000017 	ldw	fp,0(sp)
  810c04:	dec00204 	addi	sp,sp,8
  810c08:	f800283a 	ret

00810c0c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  810c0c:	defffc04 	addi	sp,sp,-16
  810c10:	dfc00315 	stw	ra,12(sp)
  810c14:	df000215 	stw	fp,8(sp)
  810c18:	df000204 	addi	fp,sp,8
  810c1c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  810c20:	e0bfff17 	ldw	r2,-4(fp)
  810c24:	10800017 	ldw	r2,0(r2)
  810c28:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  810c2c:	e0bffe17 	ldw	r2,-8(fp)
  810c30:	10c00a04 	addi	r3,r2,40
  810c34:	e0bfff17 	ldw	r2,-4(fp)
  810c38:	10800217 	ldw	r2,8(r2)
  810c3c:	100b883a 	mov	r5,r2
  810c40:	1809883a 	mov	r4,r3
  810c44:	081101c0 	call	81101c <altera_avalon_jtag_uart_close>
}
  810c48:	e037883a 	mov	sp,fp
  810c4c:	dfc00117 	ldw	ra,4(sp)
  810c50:	df000017 	ldw	fp,0(sp)
  810c54:	dec00204 	addi	sp,sp,8
  810c58:	f800283a 	ret

00810c5c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  810c5c:	defffa04 	addi	sp,sp,-24
  810c60:	dfc00515 	stw	ra,20(sp)
  810c64:	df000415 	stw	fp,16(sp)
  810c68:	df000404 	addi	fp,sp,16
  810c6c:	e13ffd15 	stw	r4,-12(fp)
  810c70:	e17ffe15 	stw	r5,-8(fp)
  810c74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  810c78:	e0bffd17 	ldw	r2,-12(fp)
  810c7c:	10800017 	ldw	r2,0(r2)
  810c80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  810c84:	e0bffc17 	ldw	r2,-16(fp)
  810c88:	10800a04 	addi	r2,r2,40
  810c8c:	e1bfff17 	ldw	r6,-4(fp)
  810c90:	e17ffe17 	ldw	r5,-8(fp)
  810c94:	1009883a 	mov	r4,r2
  810c98:	08110840 	call	811084 <altera_avalon_jtag_uart_ioctl>
}
  810c9c:	e037883a 	mov	sp,fp
  810ca0:	dfc00117 	ldw	ra,4(sp)
  810ca4:	df000017 	ldw	fp,0(sp)
  810ca8:	dec00204 	addi	sp,sp,8
  810cac:	f800283a 	ret

00810cb0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  810cb0:	defffa04 	addi	sp,sp,-24
  810cb4:	dfc00515 	stw	ra,20(sp)
  810cb8:	df000415 	stw	fp,16(sp)
  810cbc:	df000404 	addi	fp,sp,16
  810cc0:	e13ffd15 	stw	r4,-12(fp)
  810cc4:	e17ffe15 	stw	r5,-8(fp)
  810cc8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810ccc:	e0bffd17 	ldw	r2,-12(fp)
  810cd0:	00c00044 	movi	r3,1
  810cd4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  810cd8:	e0bffd17 	ldw	r2,-12(fp)
  810cdc:	10800017 	ldw	r2,0(r2)
  810ce0:	10800104 	addi	r2,r2,4
  810ce4:	1007883a 	mov	r3,r2
  810ce8:	e0bffd17 	ldw	r2,-12(fp)
  810cec:	10800817 	ldw	r2,32(r2)
  810cf0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  810cf4:	e0bffe17 	ldw	r2,-8(fp)
  810cf8:	e0ffff17 	ldw	r3,-4(fp)
  810cfc:	d8000015 	stw	zero,0(sp)
  810d00:	e1fffd17 	ldw	r7,-12(fp)
  810d04:	01802074 	movhi	r6,129
  810d08:	31835c04 	addi	r6,r6,3440
  810d0c:	180b883a 	mov	r5,r3
  810d10:	1009883a 	mov	r4,r2
  810d14:	08131a40 	call	8131a4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  810d18:	e0bffd17 	ldw	r2,-12(fp)
  810d1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  810d20:	e0bffd17 	ldw	r2,-12(fp)
  810d24:	10800204 	addi	r2,r2,8
  810d28:	d0e7a817 	ldw	r3,-24928(gp)
  810d2c:	e1fffd17 	ldw	r7,-12(fp)
  810d30:	01802074 	movhi	r6,129
  810d34:	3183df04 	addi	r6,r6,3964
  810d38:	180b883a 	mov	r5,r3
  810d3c:	1009883a 	mov	r4,r2
  810d40:	0812e5c0 	call	812e5c <alt_alarm_start>
  810d44:	1000040e 	bge	r2,zero,810d58 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  810d48:	e0fffd17 	ldw	r3,-12(fp)
  810d4c:	00a00034 	movhi	r2,32768
  810d50:	10bfffc4 	addi	r2,r2,-1
  810d54:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  810d58:	0001883a 	nop
  810d5c:	e037883a 	mov	sp,fp
  810d60:	dfc00117 	ldw	ra,4(sp)
  810d64:	df000017 	ldw	fp,0(sp)
  810d68:	dec00204 	addi	sp,sp,8
  810d6c:	f800283a 	ret

00810d70 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  810d70:	defff804 	addi	sp,sp,-32
  810d74:	df000715 	stw	fp,28(sp)
  810d78:	df000704 	addi	fp,sp,28
  810d7c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  810d80:	e0bfff17 	ldw	r2,-4(fp)
  810d84:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  810d88:	e0bffb17 	ldw	r2,-20(fp)
  810d8c:	10800017 	ldw	r2,0(r2)
  810d90:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810d94:	e0bffc17 	ldw	r2,-16(fp)
  810d98:	10800104 	addi	r2,r2,4
  810d9c:	10800037 	ldwio	r2,0(r2)
  810da0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  810da4:	e0bffd17 	ldw	r2,-12(fp)
  810da8:	1080c00c 	andi	r2,r2,768
  810dac:	10006d26 	beq	r2,zero,810f64 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  810db0:	e0bffd17 	ldw	r2,-12(fp)
  810db4:	1080400c 	andi	r2,r2,256
  810db8:	10003526 	beq	r2,zero,810e90 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  810dbc:	00800074 	movhi	r2,1
  810dc0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810dc4:	e0bffb17 	ldw	r2,-20(fp)
  810dc8:	10800a17 	ldw	r2,40(r2)
  810dcc:	10800044 	addi	r2,r2,1
  810dd0:	1081ffcc 	andi	r2,r2,2047
  810dd4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  810dd8:	e0bffb17 	ldw	r2,-20(fp)
  810ddc:	10c00b17 	ldw	r3,44(r2)
  810de0:	e0bffe17 	ldw	r2,-8(fp)
  810de4:	18801526 	beq	r3,r2,810e3c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  810de8:	e0bffc17 	ldw	r2,-16(fp)
  810dec:	10800037 	ldwio	r2,0(r2)
  810df0:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  810df4:	e0bff917 	ldw	r2,-28(fp)
  810df8:	10a0000c 	andi	r2,r2,32768
  810dfc:	10001126 	beq	r2,zero,810e44 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  810e00:	e0bffb17 	ldw	r2,-20(fp)
  810e04:	10800a17 	ldw	r2,40(r2)
  810e08:	e0fff917 	ldw	r3,-28(fp)
  810e0c:	1809883a 	mov	r4,r3
  810e10:	e0fffb17 	ldw	r3,-20(fp)
  810e14:	1885883a 	add	r2,r3,r2
  810e18:	10800e04 	addi	r2,r2,56
  810e1c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810e20:	e0bffb17 	ldw	r2,-20(fp)
  810e24:	10800a17 	ldw	r2,40(r2)
  810e28:	10800044 	addi	r2,r2,1
  810e2c:	10c1ffcc 	andi	r3,r2,2047
  810e30:	e0bffb17 	ldw	r2,-20(fp)
  810e34:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  810e38:	003fe206 	br	810dc4 <__alt_mem_onchip_mem+0xff790dc4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  810e3c:	0001883a 	nop
  810e40:	00000106 	br	810e48 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  810e44:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  810e48:	e0bff917 	ldw	r2,-28(fp)
  810e4c:	10bfffec 	andhi	r2,r2,65535
  810e50:	10000f26 	beq	r2,zero,810e90 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  810e54:	e0bffb17 	ldw	r2,-20(fp)
  810e58:	10c00817 	ldw	r3,32(r2)
  810e5c:	00bfff84 	movi	r2,-2
  810e60:	1886703a 	and	r3,r3,r2
  810e64:	e0bffb17 	ldw	r2,-20(fp)
  810e68:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  810e6c:	e0bffc17 	ldw	r2,-16(fp)
  810e70:	10800104 	addi	r2,r2,4
  810e74:	1007883a 	mov	r3,r2
  810e78:	e0bffb17 	ldw	r2,-20(fp)
  810e7c:	10800817 	ldw	r2,32(r2)
  810e80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810e84:	e0bffc17 	ldw	r2,-16(fp)
  810e88:	10800104 	addi	r2,r2,4
  810e8c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  810e90:	e0bffd17 	ldw	r2,-12(fp)
  810e94:	1080800c 	andi	r2,r2,512
  810e98:	103fbe26 	beq	r2,zero,810d94 <__alt_mem_onchip_mem+0xff790d94>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  810e9c:	e0bffd17 	ldw	r2,-12(fp)
  810ea0:	1004d43a 	srli	r2,r2,16
  810ea4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  810ea8:	00001406 	br	810efc <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  810eac:	e0bffc17 	ldw	r2,-16(fp)
  810eb0:	e0fffb17 	ldw	r3,-20(fp)
  810eb4:	18c00d17 	ldw	r3,52(r3)
  810eb8:	e13ffb17 	ldw	r4,-20(fp)
  810ebc:	20c7883a 	add	r3,r4,r3
  810ec0:	18c20e04 	addi	r3,r3,2104
  810ec4:	18c00003 	ldbu	r3,0(r3)
  810ec8:	18c03fcc 	andi	r3,r3,255
  810ecc:	18c0201c 	xori	r3,r3,128
  810ed0:	18ffe004 	addi	r3,r3,-128
  810ed4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  810ed8:	e0bffb17 	ldw	r2,-20(fp)
  810edc:	10800d17 	ldw	r2,52(r2)
  810ee0:	10800044 	addi	r2,r2,1
  810ee4:	10c1ffcc 	andi	r3,r2,2047
  810ee8:	e0bffb17 	ldw	r2,-20(fp)
  810eec:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  810ef0:	e0bffa17 	ldw	r2,-24(fp)
  810ef4:	10bfffc4 	addi	r2,r2,-1
  810ef8:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  810efc:	e0bffa17 	ldw	r2,-24(fp)
  810f00:	10000526 	beq	r2,zero,810f18 <altera_avalon_jtag_uart_irq+0x1a8>
  810f04:	e0bffb17 	ldw	r2,-20(fp)
  810f08:	10c00d17 	ldw	r3,52(r2)
  810f0c:	e0bffb17 	ldw	r2,-20(fp)
  810f10:	10800c17 	ldw	r2,48(r2)
  810f14:	18bfe51e 	bne	r3,r2,810eac <__alt_mem_onchip_mem+0xff790eac>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  810f18:	e0bffa17 	ldw	r2,-24(fp)
  810f1c:	103f9d26 	beq	r2,zero,810d94 <__alt_mem_onchip_mem+0xff790d94>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  810f20:	e0bffb17 	ldw	r2,-20(fp)
  810f24:	10c00817 	ldw	r3,32(r2)
  810f28:	00bfff44 	movi	r2,-3
  810f2c:	1886703a 	and	r3,r3,r2
  810f30:	e0bffb17 	ldw	r2,-20(fp)
  810f34:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  810f38:	e0bffb17 	ldw	r2,-20(fp)
  810f3c:	10800017 	ldw	r2,0(r2)
  810f40:	10800104 	addi	r2,r2,4
  810f44:	1007883a 	mov	r3,r2
  810f48:	e0bffb17 	ldw	r2,-20(fp)
  810f4c:	10800817 	ldw	r2,32(r2)
  810f50:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  810f54:	e0bffc17 	ldw	r2,-16(fp)
  810f58:	10800104 	addi	r2,r2,4
  810f5c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  810f60:	003f8c06 	br	810d94 <__alt_mem_onchip_mem+0xff790d94>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  810f64:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  810f68:	0001883a 	nop
  810f6c:	e037883a 	mov	sp,fp
  810f70:	df000017 	ldw	fp,0(sp)
  810f74:	dec00104 	addi	sp,sp,4
  810f78:	f800283a 	ret

00810f7c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  810f7c:	defff804 	addi	sp,sp,-32
  810f80:	df000715 	stw	fp,28(sp)
  810f84:	df000704 	addi	fp,sp,28
  810f88:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  810f8c:	e0bffb17 	ldw	r2,-20(fp)
  810f90:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  810f94:	e0bff917 	ldw	r2,-28(fp)
  810f98:	10800017 	ldw	r2,0(r2)
  810f9c:	10800104 	addi	r2,r2,4
  810fa0:	10800037 	ldwio	r2,0(r2)
  810fa4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  810fa8:	e0bffa17 	ldw	r2,-24(fp)
  810fac:	1081000c 	andi	r2,r2,1024
  810fb0:	10000b26 	beq	r2,zero,810fe0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  810fb4:	e0bff917 	ldw	r2,-28(fp)
  810fb8:	10800017 	ldw	r2,0(r2)
  810fbc:	10800104 	addi	r2,r2,4
  810fc0:	1007883a 	mov	r3,r2
  810fc4:	e0bff917 	ldw	r2,-28(fp)
  810fc8:	10800817 	ldw	r2,32(r2)
  810fcc:	10810014 	ori	r2,r2,1024
  810fd0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  810fd4:	e0bff917 	ldw	r2,-28(fp)
  810fd8:	10000915 	stw	zero,36(r2)
  810fdc:	00000a06 	br	811008 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  810fe0:	e0bff917 	ldw	r2,-28(fp)
  810fe4:	10c00917 	ldw	r3,36(r2)
  810fe8:	00a00034 	movhi	r2,32768
  810fec:	10bfff04 	addi	r2,r2,-4
  810ff0:	10c00536 	bltu	r2,r3,811008 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  810ff4:	e0bff917 	ldw	r2,-28(fp)
  810ff8:	10800917 	ldw	r2,36(r2)
  810ffc:	10c00044 	addi	r3,r2,1
  811000:	e0bff917 	ldw	r2,-28(fp)
  811004:	10c00915 	stw	r3,36(r2)
  811008:	d0a7a817 	ldw	r2,-24928(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  81100c:	e037883a 	mov	sp,fp
  811010:	df000017 	ldw	fp,0(sp)
  811014:	dec00104 	addi	sp,sp,4
  811018:	f800283a 	ret

0081101c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  81101c:	defffd04 	addi	sp,sp,-12
  811020:	df000215 	stw	fp,8(sp)
  811024:	df000204 	addi	fp,sp,8
  811028:	e13ffe15 	stw	r4,-8(fp)
  81102c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811030:	00000506 	br	811048 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811034:	e0bfff17 	ldw	r2,-4(fp)
  811038:	1090000c 	andi	r2,r2,16384
  81103c:	10000226 	beq	r2,zero,811048 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811040:	00bffd44 	movi	r2,-11
  811044:	00000b06 	br	811074 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811048:	e0bffe17 	ldw	r2,-8(fp)
  81104c:	10c00d17 	ldw	r3,52(r2)
  811050:	e0bffe17 	ldw	r2,-8(fp)
  811054:	10800c17 	ldw	r2,48(r2)
  811058:	18800526 	beq	r3,r2,811070 <altera_avalon_jtag_uart_close+0x54>
  81105c:	e0bffe17 	ldw	r2,-8(fp)
  811060:	10c00917 	ldw	r3,36(r2)
  811064:	e0bffe17 	ldw	r2,-8(fp)
  811068:	10800117 	ldw	r2,4(r2)
  81106c:	18bff136 	bltu	r3,r2,811034 <__alt_mem_onchip_mem+0xff791034>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811070:	0005883a 	mov	r2,zero
}
  811074:	e037883a 	mov	sp,fp
  811078:	df000017 	ldw	fp,0(sp)
  81107c:	dec00104 	addi	sp,sp,4
  811080:	f800283a 	ret

00811084 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811084:	defffa04 	addi	sp,sp,-24
  811088:	df000515 	stw	fp,20(sp)
  81108c:	df000504 	addi	fp,sp,20
  811090:	e13ffd15 	stw	r4,-12(fp)
  811094:	e17ffe15 	stw	r5,-8(fp)
  811098:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  81109c:	00bff9c4 	movi	r2,-25
  8110a0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  8110a4:	e0bffe17 	ldw	r2,-8(fp)
  8110a8:	10da8060 	cmpeqi	r3,r2,27137
  8110ac:	1800031e 	bne	r3,zero,8110bc <altera_avalon_jtag_uart_ioctl+0x38>
  8110b0:	109a80a0 	cmpeqi	r2,r2,27138
  8110b4:	1000181e 	bne	r2,zero,811118 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  8110b8:	00002906 	br	811160 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  8110bc:	e0bffd17 	ldw	r2,-12(fp)
  8110c0:	10c00117 	ldw	r3,4(r2)
  8110c4:	00a00034 	movhi	r2,32768
  8110c8:	10bfffc4 	addi	r2,r2,-1
  8110cc:	18802126 	beq	r3,r2,811154 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  8110d0:	e0bfff17 	ldw	r2,-4(fp)
  8110d4:	10800017 	ldw	r2,0(r2)
  8110d8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8110dc:	e0bffc17 	ldw	r2,-16(fp)
  8110e0:	10800090 	cmplti	r2,r2,2
  8110e4:	1000061e 	bne	r2,zero,811100 <altera_avalon_jtag_uart_ioctl+0x7c>
  8110e8:	e0fffc17 	ldw	r3,-16(fp)
  8110ec:	00a00034 	movhi	r2,32768
  8110f0:	10bfffc4 	addi	r2,r2,-1
  8110f4:	18800226 	beq	r3,r2,811100 <altera_avalon_jtag_uart_ioctl+0x7c>
  8110f8:	e0bffc17 	ldw	r2,-16(fp)
  8110fc:	00000206 	br	811108 <altera_avalon_jtag_uart_ioctl+0x84>
  811100:	00a00034 	movhi	r2,32768
  811104:	10bfff84 	addi	r2,r2,-2
  811108:	e0fffd17 	ldw	r3,-12(fp)
  81110c:	18800115 	stw	r2,4(r3)
      rc = 0;
  811110:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811114:	00000f06 	br	811154 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  811118:	e0bffd17 	ldw	r2,-12(fp)
  81111c:	10c00117 	ldw	r3,4(r2)
  811120:	00a00034 	movhi	r2,32768
  811124:	10bfffc4 	addi	r2,r2,-1
  811128:	18800c26 	beq	r3,r2,81115c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  81112c:	e0bffd17 	ldw	r2,-12(fp)
  811130:	10c00917 	ldw	r3,36(r2)
  811134:	e0bffd17 	ldw	r2,-12(fp)
  811138:	10800117 	ldw	r2,4(r2)
  81113c:	1885803a 	cmpltu	r2,r3,r2
  811140:	10c03fcc 	andi	r3,r2,255
  811144:	e0bfff17 	ldw	r2,-4(fp)
  811148:	10c00015 	stw	r3,0(r2)
      rc = 0;
  81114c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  811150:	00000206 	br	81115c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  811154:	0001883a 	nop
  811158:	00000106 	br	811160 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  81115c:	0001883a 	nop

  default:
    break;
  }

  return rc;
  811160:	e0bffb17 	ldw	r2,-20(fp)
}
  811164:	e037883a 	mov	sp,fp
  811168:	df000017 	ldw	fp,0(sp)
  81116c:	dec00104 	addi	sp,sp,4
  811170:	f800283a 	ret

00811174 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  811174:	defff304 	addi	sp,sp,-52
  811178:	dfc00c15 	stw	ra,48(sp)
  81117c:	df000b15 	stw	fp,44(sp)
  811180:	df000b04 	addi	fp,sp,44
  811184:	e13ffc15 	stw	r4,-16(fp)
  811188:	e17ffd15 	stw	r5,-12(fp)
  81118c:	e1bffe15 	stw	r6,-8(fp)
  811190:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  811194:	e0bffd17 	ldw	r2,-12(fp)
  811198:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  81119c:	00004706 	br	8112bc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8111a0:	e0bffc17 	ldw	r2,-16(fp)
  8111a4:	10800a17 	ldw	r2,40(r2)
  8111a8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8111ac:	e0bffc17 	ldw	r2,-16(fp)
  8111b0:	10800b17 	ldw	r2,44(r2)
  8111b4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  8111b8:	e0fff717 	ldw	r3,-36(fp)
  8111bc:	e0bff817 	ldw	r2,-32(fp)
  8111c0:	18800536 	bltu	r3,r2,8111d8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  8111c4:	e0fff717 	ldw	r3,-36(fp)
  8111c8:	e0bff817 	ldw	r2,-32(fp)
  8111cc:	1885c83a 	sub	r2,r3,r2
  8111d0:	e0bff615 	stw	r2,-40(fp)
  8111d4:	00000406 	br	8111e8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8111d8:	00c20004 	movi	r3,2048
  8111dc:	e0bff817 	ldw	r2,-32(fp)
  8111e0:	1885c83a 	sub	r2,r3,r2
  8111e4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  8111e8:	e0bff617 	ldw	r2,-40(fp)
  8111ec:	10001e26 	beq	r2,zero,811268 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  8111f0:	e0fffe17 	ldw	r3,-8(fp)
  8111f4:	e0bff617 	ldw	r2,-40(fp)
  8111f8:	1880022e 	bgeu	r3,r2,811204 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  8111fc:	e0bffe17 	ldw	r2,-8(fp)
  811200:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  811204:	e0bffc17 	ldw	r2,-16(fp)
  811208:	10c00e04 	addi	r3,r2,56
  81120c:	e0bff817 	ldw	r2,-32(fp)
  811210:	1885883a 	add	r2,r3,r2
  811214:	e1bff617 	ldw	r6,-40(fp)
  811218:	100b883a 	mov	r5,r2
  81121c:	e13ff517 	ldw	r4,-44(fp)
  811220:	08090540 	call	809054 <memcpy>
      ptr   += n;
  811224:	e0fff517 	ldw	r3,-44(fp)
  811228:	e0bff617 	ldw	r2,-40(fp)
  81122c:	1885883a 	add	r2,r3,r2
  811230:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  811234:	e0fffe17 	ldw	r3,-8(fp)
  811238:	e0bff617 	ldw	r2,-40(fp)
  81123c:	1885c83a 	sub	r2,r3,r2
  811240:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811244:	e0fff817 	ldw	r3,-32(fp)
  811248:	e0bff617 	ldw	r2,-40(fp)
  81124c:	1885883a 	add	r2,r3,r2
  811250:	10c1ffcc 	andi	r3,r2,2047
  811254:	e0bffc17 	ldw	r2,-16(fp)
  811258:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  81125c:	e0bffe17 	ldw	r2,-8(fp)
  811260:	00bfcf16 	blt	zero,r2,8111a0 <__alt_mem_onchip_mem+0xff7911a0>
  811264:	00000106 	br	81126c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  811268:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  81126c:	e0fff517 	ldw	r3,-44(fp)
  811270:	e0bffd17 	ldw	r2,-12(fp)
  811274:	1880141e 	bne	r3,r2,8112c8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  811278:	e0bfff17 	ldw	r2,-4(fp)
  81127c:	1090000c 	andi	r2,r2,16384
  811280:	1000131e 	bne	r2,zero,8112d0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  811284:	0001883a 	nop
  811288:	e0bffc17 	ldw	r2,-16(fp)
  81128c:	10c00a17 	ldw	r3,40(r2)
  811290:	e0bff717 	ldw	r2,-36(fp)
  811294:	1880051e 	bne	r3,r2,8112ac <altera_avalon_jtag_uart_read+0x138>
  811298:	e0bffc17 	ldw	r2,-16(fp)
  81129c:	10c00917 	ldw	r3,36(r2)
  8112a0:	e0bffc17 	ldw	r2,-16(fp)
  8112a4:	10800117 	ldw	r2,4(r2)
  8112a8:	18bff736 	bltu	r3,r2,811288 <__alt_mem_onchip_mem+0xff791288>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8112ac:	e0bffc17 	ldw	r2,-16(fp)
  8112b0:	10c00a17 	ldw	r3,40(r2)
  8112b4:	e0bff717 	ldw	r2,-36(fp)
  8112b8:	18800726 	beq	r3,r2,8112d8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8112bc:	e0bffe17 	ldw	r2,-8(fp)
  8112c0:	00bfb716 	blt	zero,r2,8111a0 <__alt_mem_onchip_mem+0xff7911a0>
  8112c4:	00000506 	br	8112dc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  8112c8:	0001883a 	nop
  8112cc:	00000306 	br	8112dc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  8112d0:	0001883a 	nop
  8112d4:	00000106 	br	8112dc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  8112d8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  8112dc:	e0fff517 	ldw	r3,-44(fp)
  8112e0:	e0bffd17 	ldw	r2,-12(fp)
  8112e4:	18801826 	beq	r3,r2,811348 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8112e8:	0005303a 	rdctl	r2,status
  8112ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8112f0:	e0fffb17 	ldw	r3,-20(fp)
  8112f4:	00bfff84 	movi	r2,-2
  8112f8:	1884703a 	and	r2,r3,r2
  8112fc:	1001703a 	wrctl	status,r2
  
  return context;
  811300:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  811304:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811308:	e0bffc17 	ldw	r2,-16(fp)
  81130c:	10800817 	ldw	r2,32(r2)
  811310:	10c00054 	ori	r3,r2,1
  811314:	e0bffc17 	ldw	r2,-16(fp)
  811318:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81131c:	e0bffc17 	ldw	r2,-16(fp)
  811320:	10800017 	ldw	r2,0(r2)
  811324:	10800104 	addi	r2,r2,4
  811328:	1007883a 	mov	r3,r2
  81132c:	e0bffc17 	ldw	r2,-16(fp)
  811330:	10800817 	ldw	r2,32(r2)
  811334:	18800035 	stwio	r2,0(r3)
  811338:	e0bffa17 	ldw	r2,-24(fp)
  81133c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811340:	e0bff917 	ldw	r2,-28(fp)
  811344:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  811348:	e0fff517 	ldw	r3,-44(fp)
  81134c:	e0bffd17 	ldw	r2,-12(fp)
  811350:	18800426 	beq	r3,r2,811364 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  811354:	e0fff517 	ldw	r3,-44(fp)
  811358:	e0bffd17 	ldw	r2,-12(fp)
  81135c:	1885c83a 	sub	r2,r3,r2
  811360:	00000606 	br	81137c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  811364:	e0bfff17 	ldw	r2,-4(fp)
  811368:	1090000c 	andi	r2,r2,16384
  81136c:	10000226 	beq	r2,zero,811378 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  811370:	00bffd44 	movi	r2,-11
  811374:	00000106 	br	81137c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  811378:	00bffec4 	movi	r2,-5
}
  81137c:	e037883a 	mov	sp,fp
  811380:	dfc00117 	ldw	ra,4(sp)
  811384:	df000017 	ldw	fp,0(sp)
  811388:	dec00204 	addi	sp,sp,8
  81138c:	f800283a 	ret

00811390 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  811390:	defff304 	addi	sp,sp,-52
  811394:	dfc00c15 	stw	ra,48(sp)
  811398:	df000b15 	stw	fp,44(sp)
  81139c:	df000b04 	addi	fp,sp,44
  8113a0:	e13ffc15 	stw	r4,-16(fp)
  8113a4:	e17ffd15 	stw	r5,-12(fp)
  8113a8:	e1bffe15 	stw	r6,-8(fp)
  8113ac:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8113b0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8113b4:	e0bffd17 	ldw	r2,-12(fp)
  8113b8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8113bc:	00003706 	br	81149c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  8113c0:	e0bffc17 	ldw	r2,-16(fp)
  8113c4:	10800c17 	ldw	r2,48(r2)
  8113c8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  8113cc:	e0bffc17 	ldw	r2,-16(fp)
  8113d0:	10800d17 	ldw	r2,52(r2)
  8113d4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  8113d8:	e0fff917 	ldw	r3,-28(fp)
  8113dc:	e0bff517 	ldw	r2,-44(fp)
  8113e0:	1880062e 	bgeu	r3,r2,8113fc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  8113e4:	e0fff517 	ldw	r3,-44(fp)
  8113e8:	e0bff917 	ldw	r2,-28(fp)
  8113ec:	1885c83a 	sub	r2,r3,r2
  8113f0:	10bfffc4 	addi	r2,r2,-1
  8113f4:	e0bff615 	stw	r2,-40(fp)
  8113f8:	00000b06 	br	811428 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  8113fc:	e0bff517 	ldw	r2,-44(fp)
  811400:	10000526 	beq	r2,zero,811418 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  811404:	00c20004 	movi	r3,2048
  811408:	e0bff917 	ldw	r2,-28(fp)
  81140c:	1885c83a 	sub	r2,r3,r2
  811410:	e0bff615 	stw	r2,-40(fp)
  811414:	00000406 	br	811428 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  811418:	00c1ffc4 	movi	r3,2047
  81141c:	e0bff917 	ldw	r2,-28(fp)
  811420:	1885c83a 	sub	r2,r3,r2
  811424:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  811428:	e0bff617 	ldw	r2,-40(fp)
  81142c:	10001e26 	beq	r2,zero,8114a8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  811430:	e0fffe17 	ldw	r3,-8(fp)
  811434:	e0bff617 	ldw	r2,-40(fp)
  811438:	1880022e 	bgeu	r3,r2,811444 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  81143c:	e0bffe17 	ldw	r2,-8(fp)
  811440:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  811444:	e0bffc17 	ldw	r2,-16(fp)
  811448:	10c20e04 	addi	r3,r2,2104
  81144c:	e0bff917 	ldw	r2,-28(fp)
  811450:	1885883a 	add	r2,r3,r2
  811454:	e1bff617 	ldw	r6,-40(fp)
  811458:	e17ffd17 	ldw	r5,-12(fp)
  81145c:	1009883a 	mov	r4,r2
  811460:	08090540 	call	809054 <memcpy>
      ptr   += n;
  811464:	e0fffd17 	ldw	r3,-12(fp)
  811468:	e0bff617 	ldw	r2,-40(fp)
  81146c:	1885883a 	add	r2,r3,r2
  811470:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  811474:	e0fffe17 	ldw	r3,-8(fp)
  811478:	e0bff617 	ldw	r2,-40(fp)
  81147c:	1885c83a 	sub	r2,r3,r2
  811480:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811484:	e0fff917 	ldw	r3,-28(fp)
  811488:	e0bff617 	ldw	r2,-40(fp)
  81148c:	1885883a 	add	r2,r3,r2
  811490:	10c1ffcc 	andi	r3,r2,2047
  811494:	e0bffc17 	ldw	r2,-16(fp)
  811498:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  81149c:	e0bffe17 	ldw	r2,-8(fp)
  8114a0:	00bfc716 	blt	zero,r2,8113c0 <__alt_mem_onchip_mem+0xff7913c0>
  8114a4:	00000106 	br	8114ac <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8114a8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8114ac:	0005303a 	rdctl	r2,status
  8114b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8114b4:	e0fffb17 	ldw	r3,-20(fp)
  8114b8:	00bfff84 	movi	r2,-2
  8114bc:	1884703a 	and	r2,r3,r2
  8114c0:	1001703a 	wrctl	status,r2
  
  return context;
  8114c4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  8114c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  8114cc:	e0bffc17 	ldw	r2,-16(fp)
  8114d0:	10800817 	ldw	r2,32(r2)
  8114d4:	10c00094 	ori	r3,r2,2
  8114d8:	e0bffc17 	ldw	r2,-16(fp)
  8114dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8114e0:	e0bffc17 	ldw	r2,-16(fp)
  8114e4:	10800017 	ldw	r2,0(r2)
  8114e8:	10800104 	addi	r2,r2,4
  8114ec:	1007883a 	mov	r3,r2
  8114f0:	e0bffc17 	ldw	r2,-16(fp)
  8114f4:	10800817 	ldw	r2,32(r2)
  8114f8:	18800035 	stwio	r2,0(r3)
  8114fc:	e0bffa17 	ldw	r2,-24(fp)
  811500:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811504:	e0bff817 	ldw	r2,-32(fp)
  811508:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  81150c:	e0bffe17 	ldw	r2,-8(fp)
  811510:	0080100e 	bge	zero,r2,811554 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  811514:	e0bfff17 	ldw	r2,-4(fp)
  811518:	1090000c 	andi	r2,r2,16384
  81151c:	1000101e 	bne	r2,zero,811560 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  811520:	0001883a 	nop
  811524:	e0bffc17 	ldw	r2,-16(fp)
  811528:	10c00d17 	ldw	r3,52(r2)
  81152c:	e0bff517 	ldw	r2,-44(fp)
  811530:	1880051e 	bne	r3,r2,811548 <altera_avalon_jtag_uart_write+0x1b8>
  811534:	e0bffc17 	ldw	r2,-16(fp)
  811538:	10c00917 	ldw	r3,36(r2)
  81153c:	e0bffc17 	ldw	r2,-16(fp)
  811540:	10800117 	ldw	r2,4(r2)
  811544:	18bff736 	bltu	r3,r2,811524 <__alt_mem_onchip_mem+0xff791524>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  811548:	e0bffc17 	ldw	r2,-16(fp)
  81154c:	10800917 	ldw	r2,36(r2)
  811550:	1000051e 	bne	r2,zero,811568 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  811554:	e0bffe17 	ldw	r2,-8(fp)
  811558:	00bfd016 	blt	zero,r2,81149c <__alt_mem_onchip_mem+0xff79149c>
  81155c:	00000306 	br	81156c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  811560:	0001883a 	nop
  811564:	00000106 	br	81156c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  811568:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  81156c:	e0fffd17 	ldw	r3,-12(fp)
  811570:	e0bff717 	ldw	r2,-36(fp)
  811574:	18800426 	beq	r3,r2,811588 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  811578:	e0fffd17 	ldw	r3,-12(fp)
  81157c:	e0bff717 	ldw	r2,-36(fp)
  811580:	1885c83a 	sub	r2,r3,r2
  811584:	00000606 	br	8115a0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  811588:	e0bfff17 	ldw	r2,-4(fp)
  81158c:	1090000c 	andi	r2,r2,16384
  811590:	10000226 	beq	r2,zero,81159c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  811594:	00bffd44 	movi	r2,-11
  811598:	00000106 	br	8115a0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  81159c:	00bffec4 	movi	r2,-5
}
  8115a0:	e037883a 	mov	sp,fp
  8115a4:	dfc00117 	ldw	ra,4(sp)
  8115a8:	df000017 	ldw	fp,0(sp)
  8115ac:	dec00204 	addi	sp,sp,8
  8115b0:	f800283a 	ret

008115b4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8115b4:	defffa04 	addi	sp,sp,-24
  8115b8:	dfc00515 	stw	ra,20(sp)
  8115bc:	df000415 	stw	fp,16(sp)
  8115c0:	df000404 	addi	fp,sp,16
  8115c4:	e13ffe15 	stw	r4,-8(fp)
  8115c8:	2805883a 	mov	r2,r5
  8115cc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8115d0:	e0bffe17 	ldw	r2,-8(fp)
  8115d4:	10800017 	ldw	r2,0(r2)
  8115d8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8115dc:	008003f4 	movhi	r2,15
  8115e0:	10909004 	addi	r2,r2,16960
  8115e4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8115e8:	e0bffe17 	ldw	r2,-8(fp)
  8115ec:	10800803 	ldbu	r2,32(r2)
  8115f0:	10803fcc 	andi	r2,r2,255
  8115f4:	1080201c 	xori	r2,r2,128
  8115f8:	10bfe004 	addi	r2,r2,-128
  8115fc:	1000151e 	bne	r2,zero,811654 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811600:	00000906 	br	811628 <lcd_write_command+0x74>
    if (--i == 0)
  811604:	e0bffc17 	ldw	r2,-16(fp)
  811608:	10bfffc4 	addi	r2,r2,-1
  81160c:	e0bffc15 	stw	r2,-16(fp)
  811610:	e0bffc17 	ldw	r2,-16(fp)
  811614:	1000041e 	bne	r2,zero,811628 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  811618:	e0bffe17 	ldw	r2,-8(fp)
  81161c:	00c00044 	movi	r3,1
  811620:	10c00805 	stb	r3,32(r2)
      return;
  811624:	00000c06 	br	811658 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  811628:	e0bffd17 	ldw	r2,-12(fp)
  81162c:	10800104 	addi	r2,r2,4
  811630:	10800037 	ldwio	r2,0(r2)
  811634:	1080200c 	andi	r2,r2,128
  811638:	103ff21e 	bne	r2,zero,811604 <__alt_mem_onchip_mem+0xff791604>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81163c:	01001904 	movi	r4,100
  811640:	08137d80 	call	8137d8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  811644:	e0bffd17 	ldw	r2,-12(fp)
  811648:	e0ffff03 	ldbu	r3,-4(fp)
  81164c:	10c00035 	stwio	r3,0(r2)
  811650:	00000106 	br	811658 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  811654:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  811658:	e037883a 	mov	sp,fp
  81165c:	dfc00117 	ldw	ra,4(sp)
  811660:	df000017 	ldw	fp,0(sp)
  811664:	dec00204 	addi	sp,sp,8
  811668:	f800283a 	ret

0081166c <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  81166c:	defffa04 	addi	sp,sp,-24
  811670:	dfc00515 	stw	ra,20(sp)
  811674:	df000415 	stw	fp,16(sp)
  811678:	df000404 	addi	fp,sp,16
  81167c:	e13ffe15 	stw	r4,-8(fp)
  811680:	2805883a 	mov	r2,r5
  811684:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  811688:	e0bffe17 	ldw	r2,-8(fp)
  81168c:	10800017 	ldw	r2,0(r2)
  811690:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  811694:	008003f4 	movhi	r2,15
  811698:	10909004 	addi	r2,r2,16960
  81169c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8116a0:	e0bffe17 	ldw	r2,-8(fp)
  8116a4:	10800803 	ldbu	r2,32(r2)
  8116a8:	10803fcc 	andi	r2,r2,255
  8116ac:	1080201c 	xori	r2,r2,128
  8116b0:	10bfe004 	addi	r2,r2,-128
  8116b4:	10001d1e 	bne	r2,zero,81172c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8116b8:	00000906 	br	8116e0 <lcd_write_data+0x74>
    if (--i == 0)
  8116bc:	e0bffc17 	ldw	r2,-16(fp)
  8116c0:	10bfffc4 	addi	r2,r2,-1
  8116c4:	e0bffc15 	stw	r2,-16(fp)
  8116c8:	e0bffc17 	ldw	r2,-16(fp)
  8116cc:	1000041e 	bne	r2,zero,8116e0 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  8116d0:	e0bffe17 	ldw	r2,-8(fp)
  8116d4:	00c00044 	movi	r3,1
  8116d8:	10c00805 	stb	r3,32(r2)
      return;
  8116dc:	00001406 	br	811730 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  8116e0:	e0bffd17 	ldw	r2,-12(fp)
  8116e4:	10800104 	addi	r2,r2,4
  8116e8:	10800037 	ldwio	r2,0(r2)
  8116ec:	1080200c 	andi	r2,r2,128
  8116f0:	103ff21e 	bne	r2,zero,8116bc <__alt_mem_onchip_mem+0xff7916bc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  8116f4:	01001904 	movi	r4,100
  8116f8:	08137d80 	call	8137d8 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  8116fc:	e0bffd17 	ldw	r2,-12(fp)
  811700:	10800204 	addi	r2,r2,8
  811704:	1007883a 	mov	r3,r2
  811708:	e0bfff03 	ldbu	r2,-4(fp)
  81170c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  811710:	e0bffe17 	ldw	r2,-8(fp)
  811714:	108008c3 	ldbu	r2,35(r2)
  811718:	10800044 	addi	r2,r2,1
  81171c:	1007883a 	mov	r3,r2
  811720:	e0bffe17 	ldw	r2,-8(fp)
  811724:	10c008c5 	stb	r3,35(r2)
  811728:	00000106 	br	811730 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  81172c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  811730:	e037883a 	mov	sp,fp
  811734:	dfc00117 	ldw	ra,4(sp)
  811738:	df000017 	ldw	fp,0(sp)
  81173c:	dec00204 	addi	sp,sp,8
  811740:	f800283a 	ret

00811744 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  811744:	defffc04 	addi	sp,sp,-16
  811748:	dfc00315 	stw	ra,12(sp)
  81174c:	df000215 	stw	fp,8(sp)
  811750:	df000204 	addi	fp,sp,8
  811754:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  811758:	01400044 	movi	r5,1
  81175c:	e13fff17 	ldw	r4,-4(fp)
  811760:	08115b40 	call	8115b4 <lcd_write_command>

  sp->x = 0;
  811764:	e0bfff17 	ldw	r2,-4(fp)
  811768:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  81176c:	e0bfff17 	ldw	r2,-4(fp)
  811770:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  811774:	e0bfff17 	ldw	r2,-4(fp)
  811778:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81177c:	e03ffe15 	stw	zero,-8(fp)
  811780:	00001b06 	br	8117f0 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  811784:	e0bffe17 	ldw	r2,-8(fp)
  811788:	108018e4 	muli	r2,r2,99
  81178c:	10801004 	addi	r2,r2,64
  811790:	e0ffff17 	ldw	r3,-4(fp)
  811794:	1885883a 	add	r2,r3,r2
  811798:	01801444 	movi	r6,81
  81179c:	01400804 	movi	r5,32
  8117a0:	1009883a 	mov	r4,r2
  8117a4:	08092f80 	call	8092f8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8117a8:	e0bffe17 	ldw	r2,-8(fp)
  8117ac:	108018e4 	muli	r2,r2,99
  8117b0:	10800c04 	addi	r2,r2,48
  8117b4:	e0ffff17 	ldw	r3,-4(fp)
  8117b8:	1885883a 	add	r2,r3,r2
  8117bc:	01800404 	movi	r6,16
  8117c0:	01400804 	movi	r5,32
  8117c4:	1009883a 	mov	r4,r2
  8117c8:	08092f80 	call	8092f8 <memset>
    sp->line[y].width = 0;
  8117cc:	e0ffff17 	ldw	r3,-4(fp)
  8117d0:	e0bffe17 	ldw	r2,-8(fp)
  8117d4:	108018e4 	muli	r2,r2,99
  8117d8:	1885883a 	add	r2,r3,r2
  8117dc:	10802444 	addi	r2,r2,145
  8117e0:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8117e4:	e0bffe17 	ldw	r2,-8(fp)
  8117e8:	10800044 	addi	r2,r2,1
  8117ec:	e0bffe15 	stw	r2,-8(fp)
  8117f0:	e0bffe17 	ldw	r2,-8(fp)
  8117f4:	10800090 	cmplti	r2,r2,2
  8117f8:	103fe21e 	bne	r2,zero,811784 <__alt_mem_onchip_mem+0xff791784>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  8117fc:	0001883a 	nop
  811800:	e037883a 	mov	sp,fp
  811804:	dfc00117 	ldw	ra,4(sp)
  811808:	df000017 	ldw	fp,0(sp)
  81180c:	dec00204 	addi	sp,sp,8
  811810:	f800283a 	ret

00811814 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  811814:	defff704 	addi	sp,sp,-36
  811818:	dfc00815 	stw	ra,32(sp)
  81181c:	df000715 	stw	fp,28(sp)
  811820:	df000704 	addi	fp,sp,28
  811824:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  811828:	e0bfff17 	ldw	r2,-4(fp)
  81182c:	10800943 	ldbu	r2,37(r2)
  811830:	10803fcc 	andi	r2,r2,255
  811834:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811838:	e03ff915 	stw	zero,-28(fp)
  81183c:	00006706 	br	8119dc <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  811840:	e0ffff17 	ldw	r3,-4(fp)
  811844:	e0bff917 	ldw	r2,-28(fp)
  811848:	108018e4 	muli	r2,r2,99
  81184c:	1885883a 	add	r2,r3,r2
  811850:	10802444 	addi	r2,r2,145
  811854:	10800003 	ldbu	r2,0(r2)
  811858:	10803fcc 	andi	r2,r2,255
  81185c:	1080201c 	xori	r2,r2,128
  811860:	10bfe004 	addi	r2,r2,-128
  811864:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  811868:	e0ffff17 	ldw	r3,-4(fp)
  81186c:	e0bff917 	ldw	r2,-28(fp)
  811870:	108018e4 	muli	r2,r2,99
  811874:	1885883a 	add	r2,r3,r2
  811878:	10802484 	addi	r2,r2,146
  81187c:	10800003 	ldbu	r2,0(r2)
  811880:	10c03fcc 	andi	r3,r2,255
  811884:	e0bffc17 	ldw	r2,-16(fp)
  811888:	1885383a 	mul	r2,r3,r2
  81188c:	1005d23a 	srai	r2,r2,8
  811890:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  811894:	e0fffb17 	ldw	r3,-20(fp)
  811898:	e0bffd17 	ldw	r2,-12(fp)
  81189c:	18800116 	blt	r3,r2,8118a4 <lcd_repaint_screen+0x90>
      offset = 0;
  8118a0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8118a4:	e03ffa15 	stw	zero,-24(fp)
  8118a8:	00004606 	br	8119c4 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8118ac:	e0fffa17 	ldw	r3,-24(fp)
  8118b0:	e0bffb17 	ldw	r2,-20(fp)
  8118b4:	1885883a 	add	r2,r3,r2
  8118b8:	e17ffd17 	ldw	r5,-12(fp)
  8118bc:	1009883a 	mov	r4,r2
  8118c0:	080d7100 	call	80d710 <__modsi3>
  8118c4:	1009883a 	mov	r4,r2
  8118c8:	e0ffff17 	ldw	r3,-4(fp)
  8118cc:	e0bff917 	ldw	r2,-28(fp)
  8118d0:	108018e4 	muli	r2,r2,99
  8118d4:	1885883a 	add	r2,r3,r2
  8118d8:	1105883a 	add	r2,r2,r4
  8118dc:	10801004 	addi	r2,r2,64
  8118e0:	10800003 	ldbu	r2,0(r2)
  8118e4:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  8118e8:	e0ffff17 	ldw	r3,-4(fp)
  8118ec:	e0bff917 	ldw	r2,-28(fp)
  8118f0:	108018e4 	muli	r2,r2,99
  8118f4:	1887883a 	add	r3,r3,r2
  8118f8:	e0bffa17 	ldw	r2,-24(fp)
  8118fc:	1885883a 	add	r2,r3,r2
  811900:	10800c04 	addi	r2,r2,48
  811904:	10800003 	ldbu	r2,0(r2)
  811908:	10c03fcc 	andi	r3,r2,255
  81190c:	18c0201c 	xori	r3,r3,128
  811910:	18ffe004 	addi	r3,r3,-128
  811914:	e0bffe07 	ldb	r2,-8(fp)
  811918:	18802726 	beq	r3,r2,8119b8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  81191c:	e0fff917 	ldw	r3,-28(fp)
  811920:	d0a00f04 	addi	r2,gp,-32708
  811924:	1885883a 	add	r2,r3,r2
  811928:	10800003 	ldbu	r2,0(r2)
  81192c:	1007883a 	mov	r3,r2
  811930:	e0bffa17 	ldw	r2,-24(fp)
  811934:	1885883a 	add	r2,r3,r2
  811938:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  81193c:	e0fffe43 	ldbu	r3,-7(fp)
  811940:	e0bfff17 	ldw	r2,-4(fp)
  811944:	108008c3 	ldbu	r2,35(r2)
  811948:	10803fcc 	andi	r2,r2,255
  81194c:	1080201c 	xori	r2,r2,128
  811950:	10bfe004 	addi	r2,r2,-128
  811954:	18800a26 	beq	r3,r2,811980 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  811958:	e0fffe43 	ldbu	r3,-7(fp)
  81195c:	00bfe004 	movi	r2,-128
  811960:	1884b03a 	or	r2,r3,r2
  811964:	10803fcc 	andi	r2,r2,255
  811968:	100b883a 	mov	r5,r2
  81196c:	e13fff17 	ldw	r4,-4(fp)
  811970:	08115b40 	call	8115b4 <lcd_write_command>
          sp->address = address;
  811974:	e0fffe43 	ldbu	r3,-7(fp)
  811978:	e0bfff17 	ldw	r2,-4(fp)
  81197c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  811980:	e0bffe03 	ldbu	r2,-8(fp)
  811984:	10803fcc 	andi	r2,r2,255
  811988:	100b883a 	mov	r5,r2
  81198c:	e13fff17 	ldw	r4,-4(fp)
  811990:	081166c0 	call	81166c <lcd_write_data>
        sp->line[y].visible[x] = c;
  811994:	e0ffff17 	ldw	r3,-4(fp)
  811998:	e0bff917 	ldw	r2,-28(fp)
  81199c:	108018e4 	muli	r2,r2,99
  8119a0:	1887883a 	add	r3,r3,r2
  8119a4:	e0bffa17 	ldw	r2,-24(fp)
  8119a8:	1885883a 	add	r2,r3,r2
  8119ac:	10800c04 	addi	r2,r2,48
  8119b0:	e0fffe03 	ldbu	r3,-8(fp)
  8119b4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8119b8:	e0bffa17 	ldw	r2,-24(fp)
  8119bc:	10800044 	addi	r2,r2,1
  8119c0:	e0bffa15 	stw	r2,-24(fp)
  8119c4:	e0bffa17 	ldw	r2,-24(fp)
  8119c8:	10800410 	cmplti	r2,r2,16
  8119cc:	103fb71e 	bne	r2,zero,8118ac <__alt_mem_onchip_mem+0xff7918ac>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8119d0:	e0bff917 	ldw	r2,-28(fp)
  8119d4:	10800044 	addi	r2,r2,1
  8119d8:	e0bff915 	stw	r2,-28(fp)
  8119dc:	e0bff917 	ldw	r2,-28(fp)
  8119e0:	10800090 	cmplti	r2,r2,2
  8119e4:	103f961e 	bne	r2,zero,811840 <__alt_mem_onchip_mem+0xff791840>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  8119e8:	0001883a 	nop
  8119ec:	e037883a 	mov	sp,fp
  8119f0:	dfc00117 	ldw	ra,4(sp)
  8119f4:	df000017 	ldw	fp,0(sp)
  8119f8:	dec00204 	addi	sp,sp,8
  8119fc:	f800283a 	ret

00811a00 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  811a00:	defffc04 	addi	sp,sp,-16
  811a04:	dfc00315 	stw	ra,12(sp)
  811a08:	df000215 	stw	fp,8(sp)
  811a0c:	df000204 	addi	fp,sp,8
  811a10:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811a14:	e03ffe15 	stw	zero,-8(fp)
  811a18:	00001d06 	br	811a90 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  811a1c:	e0bffe17 	ldw	r2,-8(fp)
  811a20:	00800f16 	blt	zero,r2,811a60 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  811a24:	e0bffe17 	ldw	r2,-8(fp)
  811a28:	108018e4 	muli	r2,r2,99
  811a2c:	10801004 	addi	r2,r2,64
  811a30:	e0ffff17 	ldw	r3,-4(fp)
  811a34:	1889883a 	add	r4,r3,r2
  811a38:	e0bffe17 	ldw	r2,-8(fp)
  811a3c:	10800044 	addi	r2,r2,1
  811a40:	108018e4 	muli	r2,r2,99
  811a44:	10801004 	addi	r2,r2,64
  811a48:	e0ffff17 	ldw	r3,-4(fp)
  811a4c:	1885883a 	add	r2,r3,r2
  811a50:	01801404 	movi	r6,80
  811a54:	100b883a 	mov	r5,r2
  811a58:	08090540 	call	809054 <memcpy>
  811a5c:	00000906 	br	811a84 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  811a60:	e0bffe17 	ldw	r2,-8(fp)
  811a64:	108018e4 	muli	r2,r2,99
  811a68:	10801004 	addi	r2,r2,64
  811a6c:	e0ffff17 	ldw	r3,-4(fp)
  811a70:	1885883a 	add	r2,r3,r2
  811a74:	01801404 	movi	r6,80
  811a78:	01400804 	movi	r5,32
  811a7c:	1009883a 	mov	r4,r2
  811a80:	08092f80 	call	8092f8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  811a84:	e0bffe17 	ldw	r2,-8(fp)
  811a88:	10800044 	addi	r2,r2,1
  811a8c:	e0bffe15 	stw	r2,-8(fp)
  811a90:	e0bffe17 	ldw	r2,-8(fp)
  811a94:	10800090 	cmplti	r2,r2,2
  811a98:	103fe01e 	bne	r2,zero,811a1c <__alt_mem_onchip_mem+0xff791a1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  811a9c:	e0bfff17 	ldw	r2,-4(fp)
  811aa0:	10800883 	ldbu	r2,34(r2)
  811aa4:	10bfffc4 	addi	r2,r2,-1
  811aa8:	1007883a 	mov	r3,r2
  811aac:	e0bfff17 	ldw	r2,-4(fp)
  811ab0:	10c00885 	stb	r3,34(r2)
}
  811ab4:	0001883a 	nop
  811ab8:	e037883a 	mov	sp,fp
  811abc:	dfc00117 	ldw	ra,4(sp)
  811ac0:	df000017 	ldw	fp,0(sp)
  811ac4:	dec00204 	addi	sp,sp,8
  811ac8:	f800283a 	ret

00811acc <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  811acc:	defff904 	addi	sp,sp,-28
  811ad0:	dfc00615 	stw	ra,24(sp)
  811ad4:	df000515 	stw	fp,20(sp)
  811ad8:	df000504 	addi	fp,sp,20
  811adc:	e13ffe15 	stw	r4,-8(fp)
  811ae0:	2805883a 	mov	r2,r5
  811ae4:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  811ae8:	e03ffb15 	stw	zero,-20(fp)
  811aec:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  811af0:	e0bffe17 	ldw	r2,-8(fp)
  811af4:	10800a03 	ldbu	r2,40(r2)
  811af8:	10803fcc 	andi	r2,r2,255
  811afc:	1080201c 	xori	r2,r2,128
  811b00:	10bfe004 	addi	r2,r2,-128
  811b04:	108016d8 	cmpnei	r2,r2,91
  811b08:	1000411e 	bne	r2,zero,811c10 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  811b0c:	e0bffe17 	ldw	r2,-8(fp)
  811b10:	10800a04 	addi	r2,r2,40
  811b14:	10800044 	addi	r2,r2,1
  811b18:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  811b1c:	00000c06 	br	811b50 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  811b20:	e0bffb17 	ldw	r2,-20(fp)
  811b24:	10c002a4 	muli	r3,r2,10
  811b28:	e0bffd17 	ldw	r2,-12(fp)
  811b2c:	11000044 	addi	r4,r2,1
  811b30:	e13ffd15 	stw	r4,-12(fp)
  811b34:	10800003 	ldbu	r2,0(r2)
  811b38:	10803fcc 	andi	r2,r2,255
  811b3c:	1080201c 	xori	r2,r2,128
  811b40:	10bfe004 	addi	r2,r2,-128
  811b44:	10bff404 	addi	r2,r2,-48
  811b48:	1885883a 	add	r2,r3,r2
  811b4c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  811b50:	d0e01117 	ldw	r3,-32700(gp)
  811b54:	e0bffd17 	ldw	r2,-12(fp)
  811b58:	10800003 	ldbu	r2,0(r2)
  811b5c:	10803fcc 	andi	r2,r2,255
  811b60:	1080201c 	xori	r2,r2,128
  811b64:	10bfe004 	addi	r2,r2,-128
  811b68:	10800044 	addi	r2,r2,1
  811b6c:	1885883a 	add	r2,r3,r2
  811b70:	10800003 	ldbu	r2,0(r2)
  811b74:	10803fcc 	andi	r2,r2,255
  811b78:	1080010c 	andi	r2,r2,4
  811b7c:	103fe81e 	bne	r2,zero,811b20 <__alt_mem_onchip_mem+0xff791b20>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  811b80:	e0bffd17 	ldw	r2,-12(fp)
  811b84:	10800003 	ldbu	r2,0(r2)
  811b88:	10803fcc 	andi	r2,r2,255
  811b8c:	1080201c 	xori	r2,r2,128
  811b90:	10bfe004 	addi	r2,r2,-128
  811b94:	10800ed8 	cmpnei	r2,r2,59
  811b98:	10001f1e 	bne	r2,zero,811c18 <lcd_handle_escape+0x14c>
    {
      ptr++;
  811b9c:	e0bffd17 	ldw	r2,-12(fp)
  811ba0:	10800044 	addi	r2,r2,1
  811ba4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  811ba8:	00000c06 	br	811bdc <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  811bac:	e0bffc17 	ldw	r2,-16(fp)
  811bb0:	10c002a4 	muli	r3,r2,10
  811bb4:	e0bffd17 	ldw	r2,-12(fp)
  811bb8:	11000044 	addi	r4,r2,1
  811bbc:	e13ffd15 	stw	r4,-12(fp)
  811bc0:	10800003 	ldbu	r2,0(r2)
  811bc4:	10803fcc 	andi	r2,r2,255
  811bc8:	1080201c 	xori	r2,r2,128
  811bcc:	10bfe004 	addi	r2,r2,-128
  811bd0:	10bff404 	addi	r2,r2,-48
  811bd4:	1885883a 	add	r2,r3,r2
  811bd8:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  811bdc:	d0e01117 	ldw	r3,-32700(gp)
  811be0:	e0bffd17 	ldw	r2,-12(fp)
  811be4:	10800003 	ldbu	r2,0(r2)
  811be8:	10803fcc 	andi	r2,r2,255
  811bec:	1080201c 	xori	r2,r2,128
  811bf0:	10bfe004 	addi	r2,r2,-128
  811bf4:	10800044 	addi	r2,r2,1
  811bf8:	1885883a 	add	r2,r3,r2
  811bfc:	10800003 	ldbu	r2,0(r2)
  811c00:	10803fcc 	andi	r2,r2,255
  811c04:	1080010c 	andi	r2,r2,4
  811c08:	103fe81e 	bne	r2,zero,811bac <__alt_mem_onchip_mem+0xff791bac>
  811c0c:	00000206 	br	811c18 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  811c10:	00bfffc4 	movi	r2,-1
  811c14:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  811c18:	e0bfff07 	ldb	r2,-4(fp)
  811c1c:	10c012a0 	cmpeqi	r3,r2,74
  811c20:	1800291e 	bne	r3,zero,811cc8 <lcd_handle_escape+0x1fc>
  811c24:	10c012c8 	cmpgei	r3,r2,75
  811c28:	1800031e 	bne	r3,zero,811c38 <lcd_handle_escape+0x16c>
  811c2c:	10801220 	cmpeqi	r2,r2,72
  811c30:	1000061e 	bne	r2,zero,811c4c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811c34:	00004a06 	br	811d60 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  811c38:	10c012e0 	cmpeqi	r3,r2,75
  811c3c:	1800281e 	bne	r3,zero,811ce0 <lcd_handle_escape+0x214>
  811c40:	108019a0 	cmpeqi	r2,r2,102
  811c44:	1000011e 	bne	r2,zero,811c4c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  811c48:	00004506 	br	811d60 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  811c4c:	e0bffc17 	ldw	r2,-16(fp)
  811c50:	0080050e 	bge	zero,r2,811c68 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  811c54:	e0bffc17 	ldw	r2,-16(fp)
  811c58:	10bfffc4 	addi	r2,r2,-1
  811c5c:	1007883a 	mov	r3,r2
  811c60:	e0bffe17 	ldw	r2,-8(fp)
  811c64:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  811c68:	e0bffb17 	ldw	r2,-20(fp)
  811c6c:	0080370e 	bge	zero,r2,811d4c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  811c70:	e0bffb17 	ldw	r2,-20(fp)
  811c74:	10bfffc4 	addi	r2,r2,-1
  811c78:	1007883a 	mov	r3,r2
  811c7c:	e0bffe17 	ldw	r2,-8(fp)
  811c80:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  811c84:	e0bffe17 	ldw	r2,-8(fp)
  811c88:	10800883 	ldbu	r2,34(r2)
  811c8c:	10803fcc 	andi	r2,r2,255
  811c90:	10800170 	cmpltui	r2,r2,5
  811c94:	1000061e 	bne	r2,zero,811cb0 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  811c98:	e0bffe17 	ldw	r2,-8(fp)
  811c9c:	00c00104 	movi	r3,4
  811ca0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  811ca4:	00000206 	br	811cb0 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  811ca8:	e13ffe17 	ldw	r4,-8(fp)
  811cac:	0811a000 	call	811a00 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  811cb0:	e0bffe17 	ldw	r2,-8(fp)
  811cb4:	10800883 	ldbu	r2,34(r2)
  811cb8:	10803fcc 	andi	r2,r2,255
  811cbc:	108000e8 	cmpgeui	r2,r2,3
  811cc0:	103ff91e 	bne	r2,zero,811ca8 <__alt_mem_onchip_mem+0xff791ca8>
        lcd_scroll_up(sp);
    }
    break;
  811cc4:	00002106 	br	811d4c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  811cc8:	e0bffb17 	ldw	r2,-20(fp)
  811ccc:	10800098 	cmpnei	r2,r2,2
  811cd0:	1000201e 	bne	r2,zero,811d54 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  811cd4:	e13ffe17 	ldw	r4,-8(fp)
  811cd8:	08117440 	call	811744 <lcd_clear_screen>
    break;
  811cdc:	00001d06 	br	811d54 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  811ce0:	e0bffb17 	ldw	r2,-20(fp)
  811ce4:	00801d16 	blt	zero,r2,811d5c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811ce8:	e0bffe17 	ldw	r2,-8(fp)
  811cec:	10800843 	ldbu	r2,33(r2)
  811cf0:	10803fcc 	andi	r2,r2,255
  811cf4:	10801428 	cmpgeui	r2,r2,80
  811cf8:	1000181e 	bne	r2,zero,811d5c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  811cfc:	e0bffe17 	ldw	r2,-8(fp)
  811d00:	10800883 	ldbu	r2,34(r2)
  811d04:	10803fcc 	andi	r2,r2,255
  811d08:	108018e4 	muli	r2,r2,99
  811d0c:	10801004 	addi	r2,r2,64
  811d10:	e0fffe17 	ldw	r3,-8(fp)
  811d14:	1887883a 	add	r3,r3,r2
  811d18:	e0bffe17 	ldw	r2,-8(fp)
  811d1c:	10800843 	ldbu	r2,33(r2)
  811d20:	10803fcc 	andi	r2,r2,255
  811d24:	1889883a 	add	r4,r3,r2
  811d28:	e0bffe17 	ldw	r2,-8(fp)
  811d2c:	10800843 	ldbu	r2,33(r2)
  811d30:	10803fcc 	andi	r2,r2,255
  811d34:	00c01404 	movi	r3,80
  811d38:	1885c83a 	sub	r2,r3,r2
  811d3c:	100d883a 	mov	r6,r2
  811d40:	01400804 	movi	r5,32
  811d44:	08092f80 	call	8092f8 <memset>
    }
    break;
  811d48:	00000406 	br	811d5c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  811d4c:	0001883a 	nop
  811d50:	00000306 	br	811d60 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  811d54:	0001883a 	nop
  811d58:	00000106 	br	811d60 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  811d5c:	0001883a 	nop
  }
}
  811d60:	0001883a 	nop
  811d64:	e037883a 	mov	sp,fp
  811d68:	dfc00117 	ldw	ra,4(sp)
  811d6c:	df000017 	ldw	fp,0(sp)
  811d70:	dec00204 	addi	sp,sp,8
  811d74:	f800283a 	ret

00811d78 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  811d78:	defff304 	addi	sp,sp,-52
  811d7c:	dfc00c15 	stw	ra,48(sp)
  811d80:	df000b15 	stw	fp,44(sp)
  811d84:	df000b04 	addi	fp,sp,44
  811d88:	e13ffc15 	stw	r4,-16(fp)
  811d8c:	e17ffd15 	stw	r5,-12(fp)
  811d90:	e1bffe15 	stw	r6,-8(fp)
  811d94:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  811d98:	e0bffe17 	ldw	r2,-8(fp)
  811d9c:	e0fffd17 	ldw	r3,-12(fp)
  811da0:	1885883a 	add	r2,r3,r2
  811da4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  811da8:	e0bffc17 	ldw	r2,-16(fp)
  811dac:	00c00044 	movi	r3,1
  811db0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  811db4:	00009906 	br	81201c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  811db8:	e0bffd17 	ldw	r2,-12(fp)
  811dbc:	10800003 	ldbu	r2,0(r2)
  811dc0:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  811dc4:	e0bffc17 	ldw	r2,-16(fp)
  811dc8:	10800903 	ldbu	r2,36(r2)
  811dcc:	10803fcc 	andi	r2,r2,255
  811dd0:	1080201c 	xori	r2,r2,128
  811dd4:	10bfe004 	addi	r2,r2,-128
  811dd8:	10003716 	blt	r2,zero,811eb8 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  811ddc:	e0bffc17 	ldw	r2,-16(fp)
  811de0:	10800903 	ldbu	r2,36(r2)
  811de4:	10803fcc 	andi	r2,r2,255
  811de8:	1080201c 	xori	r2,r2,128
  811dec:	10bfe004 	addi	r2,r2,-128
  811df0:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  811df4:	e0bffa17 	ldw	r2,-24(fp)
  811df8:	1000031e 	bne	r2,zero,811e08 <altera_avalon_lcd_16207_write+0x90>
  811dfc:	e0bff907 	ldb	r2,-28(fp)
  811e00:	108016d8 	cmpnei	r2,r2,91
  811e04:	10000d1e 	bne	r2,zero,811e3c <altera_avalon_lcd_16207_write+0xc4>
  811e08:	e0bffa17 	ldw	r2,-24(fp)
  811e0c:	10001826 	beq	r2,zero,811e70 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  811e10:	d0e01117 	ldw	r3,-32700(gp)
  811e14:	e0bff907 	ldb	r2,-28(fp)
  811e18:	10800044 	addi	r2,r2,1
  811e1c:	1885883a 	add	r2,r3,r2
  811e20:	10800003 	ldbu	r2,0(r2)
  811e24:	10803fcc 	andi	r2,r2,255
  811e28:	1080010c 	andi	r2,r2,4
  811e2c:	1000101e 	bne	r2,zero,811e70 <altera_avalon_lcd_16207_write+0xf8>
  811e30:	e0bff907 	ldb	r2,-28(fp)
  811e34:	10800ee0 	cmpeqi	r2,r2,59
  811e38:	10000d1e 	bne	r2,zero,811e70 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  811e3c:	e0fffc17 	ldw	r3,-16(fp)
  811e40:	e0bffa17 	ldw	r2,-24(fp)
  811e44:	1885883a 	add	r2,r3,r2
  811e48:	10800a04 	addi	r2,r2,40
  811e4c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  811e50:	e0bff907 	ldb	r2,-28(fp)
  811e54:	100b883a 	mov	r5,r2
  811e58:	e13ffc17 	ldw	r4,-16(fp)
  811e5c:	0811acc0 	call	811acc <lcd_handle_escape>

        sp->esccount = -1;
  811e60:	e0bffc17 	ldw	r2,-16(fp)
  811e64:	00ffffc4 	movi	r3,-1
  811e68:	10c00905 	stb	r3,36(r2)
  811e6c:	00006806 	br	812010 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  811e70:	e0bffc17 	ldw	r2,-16(fp)
  811e74:	10800903 	ldbu	r2,36(r2)
  811e78:	10803fcc 	andi	r2,r2,255
  811e7c:	108001e8 	cmpgeui	r2,r2,7
  811e80:	1000631e 	bne	r2,zero,812010 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  811e84:	e0fffc17 	ldw	r3,-16(fp)
  811e88:	e0bffa17 	ldw	r2,-24(fp)
  811e8c:	1885883a 	add	r2,r3,r2
  811e90:	10800a04 	addi	r2,r2,40
  811e94:	e0fff903 	ldbu	r3,-28(fp)
  811e98:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  811e9c:	e0bffc17 	ldw	r2,-16(fp)
  811ea0:	10800903 	ldbu	r2,36(r2)
  811ea4:	10800044 	addi	r2,r2,1
  811ea8:	1007883a 	mov	r3,r2
  811eac:	e0bffc17 	ldw	r2,-16(fp)
  811eb0:	10c00905 	stb	r3,36(r2)
  811eb4:	00005606 	br	812010 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  811eb8:	e0bff907 	ldb	r2,-28(fp)
  811ebc:	108006d8 	cmpnei	r2,r2,27
  811ec0:	1000031e 	bne	r2,zero,811ed0 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  811ec4:	e0bffc17 	ldw	r2,-16(fp)
  811ec8:	10000905 	stb	zero,36(r2)
  811ecc:	00005006 	br	812010 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  811ed0:	e0bff907 	ldb	r2,-28(fp)
  811ed4:	10800358 	cmpnei	r2,r2,13
  811ed8:	1000031e 	bne	r2,zero,811ee8 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  811edc:	e0bffc17 	ldw	r2,-16(fp)
  811ee0:	10000845 	stb	zero,33(r2)
  811ee4:	00004a06 	br	812010 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  811ee8:	e0bff907 	ldb	r2,-28(fp)
  811eec:	10800298 	cmpnei	r2,r2,10
  811ef0:	1000101e 	bne	r2,zero,811f34 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  811ef4:	e0bffc17 	ldw	r2,-16(fp)
  811ef8:	10000845 	stb	zero,33(r2)
      sp->y++;
  811efc:	e0bffc17 	ldw	r2,-16(fp)
  811f00:	10800883 	ldbu	r2,34(r2)
  811f04:	10800044 	addi	r2,r2,1
  811f08:	1007883a 	mov	r3,r2
  811f0c:	e0bffc17 	ldw	r2,-16(fp)
  811f10:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  811f14:	e0bffc17 	ldw	r2,-16(fp)
  811f18:	10800883 	ldbu	r2,34(r2)
  811f1c:	10803fcc 	andi	r2,r2,255
  811f20:	108000f0 	cmpltui	r2,r2,3
  811f24:	10003a1e 	bne	r2,zero,812010 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  811f28:	e13ffc17 	ldw	r4,-16(fp)
  811f2c:	0811a000 	call	811a00 <lcd_scroll_up>
  811f30:	00003706 	br	812010 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  811f34:	e0bff907 	ldb	r2,-28(fp)
  811f38:	10800218 	cmpnei	r2,r2,8
  811f3c:	10000b1e 	bne	r2,zero,811f6c <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  811f40:	e0bffc17 	ldw	r2,-16(fp)
  811f44:	10800843 	ldbu	r2,33(r2)
  811f48:	10803fcc 	andi	r2,r2,255
  811f4c:	10003026 	beq	r2,zero,812010 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  811f50:	e0bffc17 	ldw	r2,-16(fp)
  811f54:	10800843 	ldbu	r2,33(r2)
  811f58:	10bfffc4 	addi	r2,r2,-1
  811f5c:	1007883a 	mov	r3,r2
  811f60:	e0bffc17 	ldw	r2,-16(fp)
  811f64:	10c00845 	stb	r3,33(r2)
  811f68:	00002906 	br	812010 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  811f6c:	d0e01117 	ldw	r3,-32700(gp)
  811f70:	e0bff907 	ldb	r2,-28(fp)
  811f74:	10800044 	addi	r2,r2,1
  811f78:	1885883a 	add	r2,r3,r2
  811f7c:	10800003 	ldbu	r2,0(r2)
  811f80:	10803fcc 	andi	r2,r2,255
  811f84:	1080201c 	xori	r2,r2,128
  811f88:	10bfe004 	addi	r2,r2,-128
  811f8c:	108025cc 	andi	r2,r2,151
  811f90:	10001f26 	beq	r2,zero,812010 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  811f94:	e0bffc17 	ldw	r2,-16(fp)
  811f98:	10800883 	ldbu	r2,34(r2)
  811f9c:	10803fcc 	andi	r2,r2,255
  811fa0:	108000b0 	cmpltui	r2,r2,2
  811fa4:	1000021e 	bne	r2,zero,811fb0 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  811fa8:	e13ffc17 	ldw	r4,-16(fp)
  811fac:	0811a000 	call	811a00 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  811fb0:	e0bffc17 	ldw	r2,-16(fp)
  811fb4:	10800843 	ldbu	r2,33(r2)
  811fb8:	10803fcc 	andi	r2,r2,255
  811fbc:	10801428 	cmpgeui	r2,r2,80
  811fc0:	10000d1e 	bne	r2,zero,811ff8 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  811fc4:	e0bffc17 	ldw	r2,-16(fp)
  811fc8:	10800883 	ldbu	r2,34(r2)
  811fcc:	10c03fcc 	andi	r3,r2,255
  811fd0:	e0bffc17 	ldw	r2,-16(fp)
  811fd4:	10800843 	ldbu	r2,33(r2)
  811fd8:	10803fcc 	andi	r2,r2,255
  811fdc:	e13ffc17 	ldw	r4,-16(fp)
  811fe0:	18c018e4 	muli	r3,r3,99
  811fe4:	20c7883a 	add	r3,r4,r3
  811fe8:	1885883a 	add	r2,r3,r2
  811fec:	10801004 	addi	r2,r2,64
  811ff0:	e0fff903 	ldbu	r3,-28(fp)
  811ff4:	10c00005 	stb	r3,0(r2)

      sp->x++;
  811ff8:	e0bffc17 	ldw	r2,-16(fp)
  811ffc:	10800843 	ldbu	r2,33(r2)
  812000:	10800044 	addi	r2,r2,1
  812004:	1007883a 	mov	r3,r2
  812008:	e0bffc17 	ldw	r2,-16(fp)
  81200c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812010:	e0bffd17 	ldw	r2,-12(fp)
  812014:	10800044 	addi	r2,r2,1
  812018:	e0bffd15 	stw	r2,-12(fp)
  81201c:	e0fffd17 	ldw	r3,-12(fp)
  812020:	e0bff817 	ldw	r2,-32(fp)
  812024:	18bf6436 	bltu	r3,r2,811db8 <__alt_mem_onchip_mem+0xff791db8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812028:	00800404 	movi	r2,16
  81202c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812030:	e03ff515 	stw	zero,-44(fp)
  812034:	00003706 	br	812114 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812038:	00801404 	movi	r2,80
  81203c:	e0bff715 	stw	r2,-36(fp)
  812040:	00001106 	br	812088 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  812044:	e0bff717 	ldw	r2,-36(fp)
  812048:	10bfffc4 	addi	r2,r2,-1
  81204c:	e13ffc17 	ldw	r4,-16(fp)
  812050:	e0fff517 	ldw	r3,-44(fp)
  812054:	18c018e4 	muli	r3,r3,99
  812058:	20c7883a 	add	r3,r4,r3
  81205c:	1885883a 	add	r2,r3,r2
  812060:	10801004 	addi	r2,r2,64
  812064:	10800003 	ldbu	r2,0(r2)
  812068:	10803fcc 	andi	r2,r2,255
  81206c:	1080201c 	xori	r2,r2,128
  812070:	10bfe004 	addi	r2,r2,-128
  812074:	10800820 	cmpeqi	r2,r2,32
  812078:	10000626 	beq	r2,zero,812094 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  81207c:	e0bff717 	ldw	r2,-36(fp)
  812080:	10bfffc4 	addi	r2,r2,-1
  812084:	e0bff715 	stw	r2,-36(fp)
  812088:	e0bff717 	ldw	r2,-36(fp)
  81208c:	00bfed16 	blt	zero,r2,812044 <__alt_mem_onchip_mem+0xff792044>
  812090:	00000106 	br	812098 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  812094:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812098:	e0bff717 	ldw	r2,-36(fp)
  81209c:	10800448 	cmpgei	r2,r2,17
  8120a0:	1000031e 	bne	r2,zero,8120b0 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  8120a4:	00800404 	movi	r2,16
  8120a8:	e0bff715 	stw	r2,-36(fp)
  8120ac:	00000306 	br	8120bc <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  8120b0:	e0bff717 	ldw	r2,-36(fp)
  8120b4:	10800044 	addi	r2,r2,1
  8120b8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  8120bc:	e0bff717 	ldw	r2,-36(fp)
  8120c0:	1009883a 	mov	r4,r2
  8120c4:	e0fffc17 	ldw	r3,-16(fp)
  8120c8:	e0bff517 	ldw	r2,-44(fp)
  8120cc:	108018e4 	muli	r2,r2,99
  8120d0:	1885883a 	add	r2,r3,r2
  8120d4:	10802444 	addi	r2,r2,145
  8120d8:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  8120dc:	e0fff617 	ldw	r3,-40(fp)
  8120e0:	e0bff717 	ldw	r2,-36(fp)
  8120e4:	1880020e 	bge	r3,r2,8120f0 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  8120e8:	e0bff717 	ldw	r2,-36(fp)
  8120ec:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  8120f0:	e0fffc17 	ldw	r3,-16(fp)
  8120f4:	e0bff517 	ldw	r2,-44(fp)
  8120f8:	108018e4 	muli	r2,r2,99
  8120fc:	1885883a 	add	r2,r3,r2
  812100:	10802484 	addi	r2,r2,146
  812104:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812108:	e0bff517 	ldw	r2,-44(fp)
  81210c:	10800044 	addi	r2,r2,1
  812110:	e0bff515 	stw	r2,-44(fp)
  812114:	e0bff517 	ldw	r2,-44(fp)
  812118:	10800090 	cmplti	r2,r2,2
  81211c:	103fc61e 	bne	r2,zero,812038 <__alt_mem_onchip_mem+0xff792038>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  812120:	e0bff617 	ldw	r2,-40(fp)
  812124:	10800448 	cmpgei	r2,r2,17
  812128:	1000031e 	bne	r2,zero,812138 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  81212c:	e0bffc17 	ldw	r2,-16(fp)
  812130:	10000985 	stb	zero,38(r2)
  812134:	00002e06 	br	8121f0 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  812138:	e0bff617 	ldw	r2,-40(fp)
  81213c:	1085883a 	add	r2,r2,r2
  812140:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  812144:	e0bff617 	ldw	r2,-40(fp)
  812148:	1007883a 	mov	r3,r2
  81214c:	e0bffc17 	ldw	r2,-16(fp)
  812150:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812154:	e03ff515 	stw	zero,-44(fp)
  812158:	00002206 	br	8121e4 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  81215c:	e0fffc17 	ldw	r3,-16(fp)
  812160:	e0bff517 	ldw	r2,-44(fp)
  812164:	108018e4 	muli	r2,r2,99
  812168:	1885883a 	add	r2,r3,r2
  81216c:	10802444 	addi	r2,r2,145
  812170:	10800003 	ldbu	r2,0(r2)
  812174:	10803fcc 	andi	r2,r2,255
  812178:	1080201c 	xori	r2,r2,128
  81217c:	10bfe004 	addi	r2,r2,-128
  812180:	10800450 	cmplti	r2,r2,17
  812184:	1000141e 	bne	r2,zero,8121d8 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  812188:	e0fffc17 	ldw	r3,-16(fp)
  81218c:	e0bff517 	ldw	r2,-44(fp)
  812190:	108018e4 	muli	r2,r2,99
  812194:	1885883a 	add	r2,r3,r2
  812198:	10802444 	addi	r2,r2,145
  81219c:	10800003 	ldbu	r2,0(r2)
  8121a0:	10803fcc 	andi	r2,r2,255
  8121a4:	1080201c 	xori	r2,r2,128
  8121a8:	10bfe004 	addi	r2,r2,-128
  8121ac:	1004923a 	slli	r2,r2,8
  8121b0:	e17ff617 	ldw	r5,-40(fp)
  8121b4:	1009883a 	mov	r4,r2
  8121b8:	080d68c0 	call	80d68c <__divsi3>
  8121bc:	1009883a 	mov	r4,r2
  8121c0:	e0fffc17 	ldw	r3,-16(fp)
  8121c4:	e0bff517 	ldw	r2,-44(fp)
  8121c8:	108018e4 	muli	r2,r2,99
  8121cc:	1885883a 	add	r2,r3,r2
  8121d0:	10802484 	addi	r2,r2,146
  8121d4:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8121d8:	e0bff517 	ldw	r2,-44(fp)
  8121dc:	10800044 	addi	r2,r2,1
  8121e0:	e0bff515 	stw	r2,-44(fp)
  8121e4:	e0bff517 	ldw	r2,-44(fp)
  8121e8:	10800090 	cmplti	r2,r2,2
  8121ec:	103fdb1e 	bne	r2,zero,81215c <__alt_mem_onchip_mem+0xff79215c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  8121f0:	e0bffc17 	ldw	r2,-16(fp)
  8121f4:	10800943 	ldbu	r2,37(r2)
  8121f8:	10803fcc 	andi	r2,r2,255
  8121fc:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  812200:	e13ffc17 	ldw	r4,-16(fp)
  812204:	08118140 	call	811814 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  812208:	e0bffc17 	ldw	r2,-16(fp)
  81220c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  812210:	e0bffc17 	ldw	r2,-16(fp)
  812214:	10800943 	ldbu	r2,37(r2)
  812218:	10c03fcc 	andi	r3,r2,255
  81221c:	e0bffb17 	ldw	r2,-20(fp)
  812220:	18800426 	beq	r3,r2,812234 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  812224:	e0bffc17 	ldw	r2,-16(fp)
  812228:	00c00044 	movi	r3,1
  81222c:	10c009c5 	stb	r3,39(r2)
  }
  812230:	003fef06 	br	8121f0 <__alt_mem_onchip_mem+0xff7921f0>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  812234:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  812238:	e0bffe17 	ldw	r2,-8(fp)
}
  81223c:	e037883a 	mov	sp,fp
  812240:	dfc00117 	ldw	ra,4(sp)
  812244:	df000017 	ldw	fp,0(sp)
  812248:	dec00204 	addi	sp,sp,8
  81224c:	f800283a 	ret

00812250 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  812250:	defffc04 	addi	sp,sp,-16
  812254:	dfc00315 	stw	ra,12(sp)
  812258:	df000215 	stw	fp,8(sp)
  81225c:	df000204 	addi	fp,sp,8
  812260:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  812264:	e0bfff17 	ldw	r2,-4(fp)
  812268:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  81226c:	e0bffe17 	ldw	r2,-8(fp)
  812270:	10800943 	ldbu	r2,37(r2)
  812274:	10803fcc 	andi	r2,r2,255
  812278:	10c00044 	addi	r3,r2,1
  81227c:	e0bffe17 	ldw	r2,-8(fp)
  812280:	10800983 	ldbu	r2,38(r2)
  812284:	10803fcc 	andi	r2,r2,255
  812288:	18800316 	blt	r3,r2,812298 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  81228c:	e0bffe17 	ldw	r2,-8(fp)
  812290:	10000945 	stb	zero,37(r2)
  812294:	00000606 	br	8122b0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  812298:	e0bffe17 	ldw	r2,-8(fp)
  81229c:	10800943 	ldbu	r2,37(r2)
  8122a0:	10800044 	addi	r2,r2,1
  8122a4:	1007883a 	mov	r3,r2
  8122a8:	e0bffe17 	ldw	r2,-8(fp)
  8122ac:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8122b0:	e0bffe17 	ldw	r2,-8(fp)
  8122b4:	10800983 	ldbu	r2,38(r2)
  8122b8:	10803fcc 	andi	r2,r2,255
  8122bc:	10000826 	beq	r2,zero,8122e0 <alt_lcd_16207_timeout+0x90>
  8122c0:	e0bffe17 	ldw	r2,-8(fp)
  8122c4:	108009c3 	ldbu	r2,39(r2)
  8122c8:	10803fcc 	andi	r2,r2,255
  8122cc:	1080201c 	xori	r2,r2,128
  8122d0:	10bfe004 	addi	r2,r2,-128
  8122d4:	1000021e 	bne	r2,zero,8122e0 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  8122d8:	e13ffe17 	ldw	r4,-8(fp)
  8122dc:	08118140 	call	811814 <lcd_repaint_screen>

  return sp->period;
  8122e0:	e0bffe17 	ldw	r2,-8(fp)
  8122e4:	10800717 	ldw	r2,28(r2)
}
  8122e8:	e037883a 	mov	sp,fp
  8122ec:	dfc00117 	ldw	ra,4(sp)
  8122f0:	df000017 	ldw	fp,0(sp)
  8122f4:	dec00204 	addi	sp,sp,8
  8122f8:	f800283a 	ret

008122fc <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  8122fc:	defffc04 	addi	sp,sp,-16
  812300:	dfc00315 	stw	ra,12(sp)
  812304:	df000215 	stw	fp,8(sp)
  812308:	df000204 	addi	fp,sp,8
  81230c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  812310:	e0bfff17 	ldw	r2,-4(fp)
  812314:	10800017 	ldw	r2,0(r2)
  812318:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  81231c:	e0bfff17 	ldw	r2,-4(fp)
  812320:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  812324:	010ea604 	movi	r4,15000
  812328:	08137d80 	call	8137d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81232c:	e0bffe17 	ldw	r2,-8(fp)
  812330:	00c00c04 	movi	r3,48
  812334:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  812338:	01040104 	movi	r4,4100
  81233c:	08137d80 	call	8137d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812340:	e0bffe17 	ldw	r2,-8(fp)
  812344:	00c00c04 	movi	r3,48
  812348:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  81234c:	0100fa04 	movi	r4,1000
  812350:	08137d80 	call	8137d8 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  812354:	e0bffe17 	ldw	r2,-8(fp)
  812358:	00c00c04 	movi	r3,48
  81235c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  812360:	01400e04 	movi	r5,56
  812364:	e13fff17 	ldw	r4,-4(fp)
  812368:	08115b40 	call	8115b4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  81236c:	01400204 	movi	r5,8
  812370:	e13fff17 	ldw	r4,-4(fp)
  812374:	08115b40 	call	8115b4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  812378:	e13fff17 	ldw	r4,-4(fp)
  81237c:	08117440 	call	811744 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  812380:	01400184 	movi	r5,6
  812384:	e13fff17 	ldw	r4,-4(fp)
  812388:	08115b40 	call	8115b4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  81238c:	01400304 	movi	r5,12
  812390:	e13fff17 	ldw	r4,-4(fp)
  812394:	08115b40 	call	8115b4 <lcd_write_command>

  sp->esccount = -1;
  812398:	e0bfff17 	ldw	r2,-4(fp)
  81239c:	00ffffc4 	movi	r3,-1
  8123a0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8123a4:	e0bfff17 	ldw	r2,-4(fp)
  8123a8:	10800a04 	addi	r2,r2,40
  8123ac:	01800204 	movi	r6,8
  8123b0:	000b883a 	mov	r5,zero
  8123b4:	1009883a 	mov	r4,r2
  8123b8:	08092f80 	call	8092f8 <memset>

  sp->scrollpos = 0;
  8123bc:	e0bfff17 	ldw	r2,-4(fp)
  8123c0:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  8123c4:	e0bfff17 	ldw	r2,-4(fp)
  8123c8:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  8123cc:	e0bfff17 	ldw	r2,-4(fp)
  8123d0:	100009c5 	stb	zero,39(r2)
  8123d4:	d0a7a817 	ldw	r2,-24928(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  8123d8:	01400284 	movi	r5,10
  8123dc:	1009883a 	mov	r4,r2
  8123e0:	080d7840 	call	80d784 <__udivsi3>
  8123e4:	1007883a 	mov	r3,r2
  8123e8:	e0bfff17 	ldw	r2,-4(fp)
  8123ec:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  8123f0:	e0bfff17 	ldw	r2,-4(fp)
  8123f4:	10c00104 	addi	r3,r2,4
  8123f8:	e0bfff17 	ldw	r2,-4(fp)
  8123fc:	10800717 	ldw	r2,28(r2)
  812400:	e1ffff17 	ldw	r7,-4(fp)
  812404:	01802074 	movhi	r6,129
  812408:	31889404 	addi	r6,r6,8784
  81240c:	100b883a 	mov	r5,r2
  812410:	1809883a 	mov	r4,r3
  812414:	0812e5c0 	call	812e5c <alt_alarm_start>
}
  812418:	0001883a 	nop
  81241c:	e037883a 	mov	sp,fp
  812420:	dfc00117 	ldw	ra,4(sp)
  812424:	df000017 	ldw	fp,0(sp)
  812428:	dec00204 	addi	sp,sp,8
  81242c:	f800283a 	ret

00812430 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812430:	defffa04 	addi	sp,sp,-24
  812434:	dfc00515 	stw	ra,20(sp)
  812438:	df000415 	stw	fp,16(sp)
  81243c:	df000404 	addi	fp,sp,16
  812440:	e13ffd15 	stw	r4,-12(fp)
  812444:	e17ffe15 	stw	r5,-8(fp)
  812448:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  81244c:	e0bffd17 	ldw	r2,-12(fp)
  812450:	10800017 	ldw	r2,0(r2)
  812454:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  812458:	e0bffc17 	ldw	r2,-16(fp)
  81245c:	10c00a04 	addi	r3,r2,40
  812460:	e0bffd17 	ldw	r2,-12(fp)
  812464:	10800217 	ldw	r2,8(r2)
  812468:	100f883a 	mov	r7,r2
  81246c:	e1bfff17 	ldw	r6,-4(fp)
  812470:	e17ffe17 	ldw	r5,-8(fp)
  812474:	1809883a 	mov	r4,r3
  812478:	0811d780 	call	811d78 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  81247c:	e037883a 	mov	sp,fp
  812480:	dfc00117 	ldw	ra,4(sp)
  812484:	df000017 	ldw	fp,0(sp)
  812488:	dec00204 	addi	sp,sp,8
  81248c:	f800283a 	ret

00812490 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  812490:	defffa04 	addi	sp,sp,-24
  812494:	dfc00515 	stw	ra,20(sp)
  812498:	df000415 	stw	fp,16(sp)
  81249c:	df000404 	addi	fp,sp,16
  8124a0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8124a4:	0007883a 	mov	r3,zero
  8124a8:	e0bfff17 	ldw	r2,-4(fp)
  8124ac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8124b0:	e0bfff17 	ldw	r2,-4(fp)
  8124b4:	10800104 	addi	r2,r2,4
  8124b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8124bc:	0005303a 	rdctl	r2,status
  8124c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8124c4:	e0fffd17 	ldw	r3,-12(fp)
  8124c8:	00bfff84 	movi	r2,-2
  8124cc:	1884703a 	and	r2,r3,r2
  8124d0:	1001703a 	wrctl	status,r2
  
  return context;
  8124d4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  8124d8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  8124dc:	08107540 	call	810754 <alt_tick>
  8124e0:	e0bffc17 	ldw	r2,-16(fp)
  8124e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8124e8:	e0bffe17 	ldw	r2,-8(fp)
  8124ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  8124f0:	0001883a 	nop
  8124f4:	e037883a 	mov	sp,fp
  8124f8:	dfc00117 	ldw	ra,4(sp)
  8124fc:	df000017 	ldw	fp,0(sp)
  812500:	dec00204 	addi	sp,sp,8
  812504:	f800283a 	ret

00812508 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  812508:	defff804 	addi	sp,sp,-32
  81250c:	dfc00715 	stw	ra,28(sp)
  812510:	df000615 	stw	fp,24(sp)
  812514:	df000604 	addi	fp,sp,24
  812518:	e13ffc15 	stw	r4,-16(fp)
  81251c:	e17ffd15 	stw	r5,-12(fp)
  812520:	e1bffe15 	stw	r6,-8(fp)
  812524:	e1ffff15 	stw	r7,-4(fp)
  812528:	e0bfff17 	ldw	r2,-4(fp)
  81252c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  812530:	d0a7a817 	ldw	r2,-24928(gp)
  812534:	1000021e 	bne	r2,zero,812540 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  812538:	e0bffb17 	ldw	r2,-20(fp)
  81253c:	d0a7a815 	stw	r2,-24928(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  812540:	e0bffc17 	ldw	r2,-16(fp)
  812544:	10800104 	addi	r2,r2,4
  812548:	00c001c4 	movi	r3,7
  81254c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  812550:	d8000015 	stw	zero,0(sp)
  812554:	e1fffc17 	ldw	r7,-16(fp)
  812558:	01802074 	movhi	r6,129
  81255c:	31892404 	addi	r6,r6,9360
  812560:	e17ffe17 	ldw	r5,-8(fp)
  812564:	e13ffd17 	ldw	r4,-12(fp)
  812568:	08131a40 	call	8131a4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  81256c:	0001883a 	nop
  812570:	e037883a 	mov	sp,fp
  812574:	dfc00117 	ldw	ra,4(sp)
  812578:	df000017 	ldw	fp,0(sp)
  81257c:	dec00204 	addi	sp,sp,8
  812580:	f800283a 	ret

00812584 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812584:	defffa04 	addi	sp,sp,-24
  812588:	dfc00515 	stw	ra,20(sp)
  81258c:	df000415 	stw	fp,16(sp)
  812590:	df000404 	addi	fp,sp,16
  812594:	e13ffd15 	stw	r4,-12(fp)
  812598:	e17ffe15 	stw	r5,-8(fp)
  81259c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8125a0:	e0bffd17 	ldw	r2,-12(fp)
  8125a4:	10800017 	ldw	r2,0(r2)
  8125a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8125ac:	e0bffc17 	ldw	r2,-16(fp)
  8125b0:	10c00a04 	addi	r3,r2,40
  8125b4:	e0bffd17 	ldw	r2,-12(fp)
  8125b8:	10800217 	ldw	r2,8(r2)
  8125bc:	100f883a 	mov	r7,r2
  8125c0:	e1bfff17 	ldw	r6,-4(fp)
  8125c4:	e17ffe17 	ldw	r5,-8(fp)
  8125c8:	1809883a 	mov	r4,r3
  8125cc:	0812a980 	call	812a98 <altera_avalon_uart_read>
      fd->fd_flags);
}
  8125d0:	e037883a 	mov	sp,fp
  8125d4:	dfc00117 	ldw	ra,4(sp)
  8125d8:	df000017 	ldw	fp,0(sp)
  8125dc:	dec00204 	addi	sp,sp,8
  8125e0:	f800283a 	ret

008125e4 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  8125e4:	defffa04 	addi	sp,sp,-24
  8125e8:	dfc00515 	stw	ra,20(sp)
  8125ec:	df000415 	stw	fp,16(sp)
  8125f0:	df000404 	addi	fp,sp,16
  8125f4:	e13ffd15 	stw	r4,-12(fp)
  8125f8:	e17ffe15 	stw	r5,-8(fp)
  8125fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812600:	e0bffd17 	ldw	r2,-12(fp)
  812604:	10800017 	ldw	r2,0(r2)
  812608:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  81260c:	e0bffc17 	ldw	r2,-16(fp)
  812610:	10c00a04 	addi	r3,r2,40
  812614:	e0bffd17 	ldw	r2,-12(fp)
  812618:	10800217 	ldw	r2,8(r2)
  81261c:	100f883a 	mov	r7,r2
  812620:	e1bfff17 	ldw	r6,-4(fp)
  812624:	e17ffe17 	ldw	r5,-8(fp)
  812628:	1809883a 	mov	r4,r3
  81262c:	0812cb00 	call	812cb0 <altera_avalon_uart_write>
      fd->fd_flags);
}
  812630:	e037883a 	mov	sp,fp
  812634:	dfc00117 	ldw	ra,4(sp)
  812638:	df000017 	ldw	fp,0(sp)
  81263c:	dec00204 	addi	sp,sp,8
  812640:	f800283a 	ret

00812644 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  812644:	defffc04 	addi	sp,sp,-16
  812648:	dfc00315 	stw	ra,12(sp)
  81264c:	df000215 	stw	fp,8(sp)
  812650:	df000204 	addi	fp,sp,8
  812654:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  812658:	e0bfff17 	ldw	r2,-4(fp)
  81265c:	10800017 	ldw	r2,0(r2)
  812660:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  812664:	e0bffe17 	ldw	r2,-8(fp)
  812668:	10c00a04 	addi	r3,r2,40
  81266c:	e0bfff17 	ldw	r2,-4(fp)
  812670:	10800217 	ldw	r2,8(r2)
  812674:	100b883a 	mov	r5,r2
  812678:	1809883a 	mov	r4,r3
  81267c:	0812a080 	call	812a08 <altera_avalon_uart_close>
}
  812680:	e037883a 	mov	sp,fp
  812684:	dfc00117 	ldw	ra,4(sp)
  812688:	df000017 	ldw	fp,0(sp)
  81268c:	dec00204 	addi	sp,sp,8
  812690:	f800283a 	ret

00812694 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  812694:	defff804 	addi	sp,sp,-32
  812698:	dfc00715 	stw	ra,28(sp)
  81269c:	df000615 	stw	fp,24(sp)
  8126a0:	df000604 	addi	fp,sp,24
  8126a4:	e13ffd15 	stw	r4,-12(fp)
  8126a8:	e17ffe15 	stw	r5,-8(fp)
  8126ac:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8126b0:	e0bffd17 	ldw	r2,-12(fp)
  8126b4:	10800017 	ldw	r2,0(r2)
  8126b8:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  8126bc:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8126c0:	1000041e 	bne	r2,zero,8126d4 <altera_avalon_uart_init+0x40>
  8126c4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8126c8:	1000021e 	bne	r2,zero,8126d4 <altera_avalon_uart_init+0x40>
  8126cc:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  8126d0:	10000226 	beq	r2,zero,8126dc <altera_avalon_uart_init+0x48>
  8126d4:	00800044 	movi	r2,1
  8126d8:	00000106 	br	8126e0 <altera_avalon_uart_init+0x4c>
  8126dc:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  8126e0:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  8126e4:	e0bffc17 	ldw	r2,-16(fp)
  8126e8:	10000f1e 	bne	r2,zero,812728 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  8126ec:	e0bffd17 	ldw	r2,-12(fp)
  8126f0:	00c32004 	movi	r3,3200
  8126f4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  8126f8:	e0bffb17 	ldw	r2,-20(fp)
  8126fc:	10800304 	addi	r2,r2,12
  812700:	e0fffd17 	ldw	r3,-12(fp)
  812704:	18c00117 	ldw	r3,4(r3)
  812708:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  81270c:	d8000015 	stw	zero,0(sp)
  812710:	e1fffd17 	ldw	r7,-12(fp)
  812714:	01802074 	movhi	r6,129
  812718:	3189d004 	addi	r6,r6,10048
  81271c:	e17fff17 	ldw	r5,-4(fp)
  812720:	e13ffe17 	ldw	r4,-8(fp)
  812724:	08131a40 	call	8131a4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  812728:	0001883a 	nop
  81272c:	e037883a 	mov	sp,fp
  812730:	dfc00117 	ldw	ra,4(sp)
  812734:	df000017 	ldw	fp,0(sp)
  812738:	dec00204 	addi	sp,sp,8
  81273c:	f800283a 	ret

00812740 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  812740:	defffa04 	addi	sp,sp,-24
  812744:	dfc00515 	stw	ra,20(sp)
  812748:	df000415 	stw	fp,16(sp)
  81274c:	df000404 	addi	fp,sp,16
  812750:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  812754:	e0bfff17 	ldw	r2,-4(fp)
  812758:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  81275c:	e0bffc17 	ldw	r2,-16(fp)
  812760:	10800017 	ldw	r2,0(r2)
  812764:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  812768:	e0bffd17 	ldw	r2,-12(fp)
  81276c:	10800204 	addi	r2,r2,8
  812770:	10800037 	ldwio	r2,0(r2)
  812774:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  812778:	e0bffd17 	ldw	r2,-12(fp)
  81277c:	10800204 	addi	r2,r2,8
  812780:	0007883a 	mov	r3,zero
  812784:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  812788:	e0bffd17 	ldw	r2,-12(fp)
  81278c:	10800204 	addi	r2,r2,8
  812790:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  812794:	e0bffe17 	ldw	r2,-8(fp)
  812798:	1080200c 	andi	r2,r2,128
  81279c:	10000326 	beq	r2,zero,8127ac <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8127a0:	e17ffe17 	ldw	r5,-8(fp)
  8127a4:	e13ffc17 	ldw	r4,-16(fp)
  8127a8:	08127dc0 	call	8127dc <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8127ac:	e0bffe17 	ldw	r2,-8(fp)
  8127b0:	1081100c 	andi	r2,r2,1088
  8127b4:	10000326 	beq	r2,zero,8127c4 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  8127b8:	e17ffe17 	ldw	r5,-8(fp)
  8127bc:	e13ffc17 	ldw	r4,-16(fp)
  8127c0:	08128c00 	call	8128c0 <altera_avalon_uart_txirq>
  }
  

}
  8127c4:	0001883a 	nop
  8127c8:	e037883a 	mov	sp,fp
  8127cc:	dfc00117 	ldw	ra,4(sp)
  8127d0:	df000017 	ldw	fp,0(sp)
  8127d4:	dec00204 	addi	sp,sp,8
  8127d8:	f800283a 	ret

008127dc <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8127dc:	defffc04 	addi	sp,sp,-16
  8127e0:	df000315 	stw	fp,12(sp)
  8127e4:	df000304 	addi	fp,sp,12
  8127e8:	e13ffe15 	stw	r4,-8(fp)
  8127ec:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  8127f0:	e0bfff17 	ldw	r2,-4(fp)
  8127f4:	108000cc 	andi	r2,r2,3
  8127f8:	10002c1e 	bne	r2,zero,8128ac <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  8127fc:	e0bffe17 	ldw	r2,-8(fp)
  812800:	10800317 	ldw	r2,12(r2)
  812804:	e0bffe17 	ldw	r2,-8(fp)
  812808:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81280c:	e0bffe17 	ldw	r2,-8(fp)
  812810:	10800317 	ldw	r2,12(r2)
  812814:	10800044 	addi	r2,r2,1
  812818:	10800fcc 	andi	r2,r2,63
  81281c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  812820:	e0bffe17 	ldw	r2,-8(fp)
  812824:	10800317 	ldw	r2,12(r2)
  812828:	e0fffe17 	ldw	r3,-8(fp)
  81282c:	18c00017 	ldw	r3,0(r3)
  812830:	18c00037 	ldwio	r3,0(r3)
  812834:	1809883a 	mov	r4,r3
  812838:	e0fffe17 	ldw	r3,-8(fp)
  81283c:	1885883a 	add	r2,r3,r2
  812840:	10800704 	addi	r2,r2,28
  812844:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  812848:	e0bffe17 	ldw	r2,-8(fp)
  81284c:	e0fffd17 	ldw	r3,-12(fp)
  812850:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812854:	e0bffe17 	ldw	r2,-8(fp)
  812858:	10800317 	ldw	r2,12(r2)
  81285c:	10800044 	addi	r2,r2,1
  812860:	10800fcc 	andi	r2,r2,63
  812864:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  812868:	e0bffe17 	ldw	r2,-8(fp)
  81286c:	10c00217 	ldw	r3,8(r2)
  812870:	e0bffd17 	ldw	r2,-12(fp)
  812874:	18800e1e 	bne	r3,r2,8128b0 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812878:	e0bffe17 	ldw	r2,-8(fp)
  81287c:	10c00117 	ldw	r3,4(r2)
  812880:	00bfdfc4 	movi	r2,-129
  812884:	1886703a 	and	r3,r3,r2
  812888:	e0bffe17 	ldw	r2,-8(fp)
  81288c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  812890:	e0bffe17 	ldw	r2,-8(fp)
  812894:	10800017 	ldw	r2,0(r2)
  812898:	10800304 	addi	r2,r2,12
  81289c:	e0fffe17 	ldw	r3,-8(fp)
  8128a0:	18c00117 	ldw	r3,4(r3)
  8128a4:	10c00035 	stwio	r3,0(r2)
  8128a8:	00000106 	br	8128b0 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8128ac:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8128b0:	e037883a 	mov	sp,fp
  8128b4:	df000017 	ldw	fp,0(sp)
  8128b8:	dec00104 	addi	sp,sp,4
  8128bc:	f800283a 	ret

008128c0 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  8128c0:	defffb04 	addi	sp,sp,-20
  8128c4:	df000415 	stw	fp,16(sp)
  8128c8:	df000404 	addi	fp,sp,16
  8128cc:	e13ffc15 	stw	r4,-16(fp)
  8128d0:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  8128d4:	e0bffc17 	ldw	r2,-16(fp)
  8128d8:	10c00417 	ldw	r3,16(r2)
  8128dc:	e0bffc17 	ldw	r2,-16(fp)
  8128e0:	10800517 	ldw	r2,20(r2)
  8128e4:	18803226 	beq	r3,r2,8129b0 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  8128e8:	e0bffc17 	ldw	r2,-16(fp)
  8128ec:	10800617 	ldw	r2,24(r2)
  8128f0:	1080008c 	andi	r2,r2,2
  8128f4:	10000326 	beq	r2,zero,812904 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8128f8:	e0bffd17 	ldw	r2,-12(fp)
  8128fc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  812900:	10001d26 	beq	r2,zero,812978 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  812904:	e0bffc17 	ldw	r2,-16(fp)
  812908:	10800417 	ldw	r2,16(r2)
  81290c:	e0bffc17 	ldw	r2,-16(fp)
  812910:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  812914:	e0bffc17 	ldw	r2,-16(fp)
  812918:	10800017 	ldw	r2,0(r2)
  81291c:	10800104 	addi	r2,r2,4
  812920:	e0fffc17 	ldw	r3,-16(fp)
  812924:	18c00417 	ldw	r3,16(r3)
  812928:	e13ffc17 	ldw	r4,-16(fp)
  81292c:	20c7883a 	add	r3,r4,r3
  812930:	18c01704 	addi	r3,r3,92
  812934:	18c00003 	ldbu	r3,0(r3)
  812938:	18c03fcc 	andi	r3,r3,255
  81293c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  812940:	e0bffc17 	ldw	r2,-16(fp)
  812944:	10800417 	ldw	r2,16(r2)
  812948:	10800044 	addi	r2,r2,1
  81294c:	e0fffc17 	ldw	r3,-16(fp)
  812950:	18800415 	stw	r2,16(r3)
  812954:	10c00fcc 	andi	r3,r2,63
  812958:	e0bffc17 	ldw	r2,-16(fp)
  81295c:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  812960:	e0bffc17 	ldw	r2,-16(fp)
  812964:	10800117 	ldw	r2,4(r2)
  812968:	10c01014 	ori	r3,r2,64
  81296c:	e0bffc17 	ldw	r2,-16(fp)
  812970:	10c00115 	stw	r3,4(r2)
  812974:	00000e06 	br	8129b0 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  812978:	e0bffc17 	ldw	r2,-16(fp)
  81297c:	10800017 	ldw	r2,0(r2)
  812980:	10800204 	addi	r2,r2,8
  812984:	10800037 	ldwio	r2,0(r2)
  812988:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  81298c:	e0bffd17 	ldw	r2,-12(fp)
  812990:	1082000c 	andi	r2,r2,2048
  812994:	1000061e 	bne	r2,zero,8129b0 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  812998:	e0bffc17 	ldw	r2,-16(fp)
  81299c:	10c00117 	ldw	r3,4(r2)
  8129a0:	00bfefc4 	movi	r2,-65
  8129a4:	1886703a 	and	r3,r3,r2
  8129a8:	e0bffc17 	ldw	r2,-16(fp)
  8129ac:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8129b0:	e0bffc17 	ldw	r2,-16(fp)
  8129b4:	10c00417 	ldw	r3,16(r2)
  8129b8:	e0bffc17 	ldw	r2,-16(fp)
  8129bc:	10800517 	ldw	r2,20(r2)
  8129c0:	1880061e 	bne	r3,r2,8129dc <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  8129c4:	e0bffc17 	ldw	r2,-16(fp)
  8129c8:	10c00117 	ldw	r3,4(r2)
  8129cc:	00beefc4 	movi	r2,-1089
  8129d0:	1886703a 	and	r3,r3,r2
  8129d4:	e0bffc17 	ldw	r2,-16(fp)
  8129d8:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  8129dc:	e0bffc17 	ldw	r2,-16(fp)
  8129e0:	10800017 	ldw	r2,0(r2)
  8129e4:	10800304 	addi	r2,r2,12
  8129e8:	e0fffc17 	ldw	r3,-16(fp)
  8129ec:	18c00117 	ldw	r3,4(r3)
  8129f0:	10c00035 	stwio	r3,0(r2)
}
  8129f4:	0001883a 	nop
  8129f8:	e037883a 	mov	sp,fp
  8129fc:	df000017 	ldw	fp,0(sp)
  812a00:	dec00104 	addi	sp,sp,4
  812a04:	f800283a 	ret

00812a08 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  812a08:	defffd04 	addi	sp,sp,-12
  812a0c:	df000215 	stw	fp,8(sp)
  812a10:	df000204 	addi	fp,sp,8
  812a14:	e13ffe15 	stw	r4,-8(fp)
  812a18:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  812a1c:	00000506 	br	812a34 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  812a20:	e0bfff17 	ldw	r2,-4(fp)
  812a24:	1090000c 	andi	r2,r2,16384
  812a28:	10000226 	beq	r2,zero,812a34 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  812a2c:	00bffd44 	movi	r2,-11
  812a30:	00000606 	br	812a4c <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  812a34:	e0bffe17 	ldw	r2,-8(fp)
  812a38:	10c00417 	ldw	r3,16(r2)
  812a3c:	e0bffe17 	ldw	r2,-8(fp)
  812a40:	10800517 	ldw	r2,20(r2)
  812a44:	18bff61e 	bne	r3,r2,812a20 <__alt_mem_onchip_mem+0xff792a20>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  812a48:	0005883a 	mov	r2,zero
}
  812a4c:	e037883a 	mov	sp,fp
  812a50:	df000017 	ldw	fp,0(sp)
  812a54:	dec00104 	addi	sp,sp,4
  812a58:	f800283a 	ret

00812a5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812a5c:	defffe04 	addi	sp,sp,-8
  812a60:	dfc00115 	stw	ra,4(sp)
  812a64:	df000015 	stw	fp,0(sp)
  812a68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812a6c:	d0a00b17 	ldw	r2,-32724(gp)
  812a70:	10000326 	beq	r2,zero,812a80 <alt_get_errno+0x24>
  812a74:	d0a00b17 	ldw	r2,-32724(gp)
  812a78:	103ee83a 	callr	r2
  812a7c:	00000106 	br	812a84 <alt_get_errno+0x28>
  812a80:	d0a7a404 	addi	r2,gp,-24944
}
  812a84:	e037883a 	mov	sp,fp
  812a88:	dfc00117 	ldw	ra,4(sp)
  812a8c:	df000017 	ldw	fp,0(sp)
  812a90:	dec00204 	addi	sp,sp,8
  812a94:	f800283a 	ret

00812a98 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  812a98:	defff204 	addi	sp,sp,-56
  812a9c:	dfc00d15 	stw	ra,52(sp)
  812aa0:	df000c15 	stw	fp,48(sp)
  812aa4:	df000c04 	addi	fp,sp,48
  812aa8:	e13ffc15 	stw	r4,-16(fp)
  812aac:	e17ffd15 	stw	r5,-12(fp)
  812ab0:	e1bffe15 	stw	r6,-8(fp)
  812ab4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  812ab8:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  812abc:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  812ac0:	e0bfff17 	ldw	r2,-4(fp)
  812ac4:	1090000c 	andi	r2,r2,16384
  812ac8:	1005003a 	cmpeq	r2,r2,zero
  812acc:	10803fcc 	andi	r2,r2,255
  812ad0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  812ad4:	00001306 	br	812b24 <altera_avalon_uart_read+0x8c>
    {
      count++;
  812ad8:	e0bff517 	ldw	r2,-44(fp)
  812adc:	10800044 	addi	r2,r2,1
  812ae0:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  812ae4:	e0bffd17 	ldw	r2,-12(fp)
  812ae8:	10c00044 	addi	r3,r2,1
  812aec:	e0fffd15 	stw	r3,-12(fp)
  812af0:	e0fffc17 	ldw	r3,-16(fp)
  812af4:	18c00217 	ldw	r3,8(r3)
  812af8:	e13ffc17 	ldw	r4,-16(fp)
  812afc:	20c7883a 	add	r3,r4,r3
  812b00:	18c00704 	addi	r3,r3,28
  812b04:	18c00003 	ldbu	r3,0(r3)
  812b08:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  812b0c:	e0bffc17 	ldw	r2,-16(fp)
  812b10:	10800217 	ldw	r2,8(r2)
  812b14:	10800044 	addi	r2,r2,1
  812b18:	10c00fcc 	andi	r3,r2,63
  812b1c:	e0bffc17 	ldw	r2,-16(fp)
  812b20:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  812b24:	e0fff517 	ldw	r3,-44(fp)
  812b28:	e0bffe17 	ldw	r2,-8(fp)
  812b2c:	1880050e 	bge	r3,r2,812b44 <altera_avalon_uart_read+0xac>
  812b30:	e0bffc17 	ldw	r2,-16(fp)
  812b34:	10c00217 	ldw	r3,8(r2)
  812b38:	e0bffc17 	ldw	r2,-16(fp)
  812b3c:	10800317 	ldw	r2,12(r2)
  812b40:	18bfe51e 	bne	r3,r2,812ad8 <__alt_mem_onchip_mem+0xff792ad8>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  812b44:	e0bff517 	ldw	r2,-44(fp)
  812b48:	1000251e 	bne	r2,zero,812be0 <altera_avalon_uart_read+0x148>
  812b4c:	e0bffc17 	ldw	r2,-16(fp)
  812b50:	10c00217 	ldw	r3,8(r2)
  812b54:	e0bffc17 	ldw	r2,-16(fp)
  812b58:	10800317 	ldw	r2,12(r2)
  812b5c:	1880201e 	bne	r3,r2,812be0 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  812b60:	e0bff617 	ldw	r2,-40(fp)
  812b64:	1000071e 	bne	r2,zero,812b84 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  812b68:	0812a5c0 	call	812a5c <alt_get_errno>
  812b6c:	1007883a 	mov	r3,r2
  812b70:	008002c4 	movi	r2,11
  812b74:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  812b78:	00800044 	movi	r2,1
  812b7c:	e0bff405 	stb	r2,-48(fp)
        break;
  812b80:	00001b06 	br	812bf0 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b84:	0005303a 	rdctl	r2,status
  812b88:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b8c:	e0fff917 	ldw	r3,-28(fp)
  812b90:	00bfff84 	movi	r2,-2
  812b94:	1884703a 	and	r2,r3,r2
  812b98:	1001703a 	wrctl	status,r2
  
  return context;
  812b9c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  812ba0:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812ba4:	e0bffc17 	ldw	r2,-16(fp)
  812ba8:	10800117 	ldw	r2,4(r2)
  812bac:	10c02014 	ori	r3,r2,128
  812bb0:	e0bffc17 	ldw	r2,-16(fp)
  812bb4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812bb8:	e0bffc17 	ldw	r2,-16(fp)
  812bbc:	10800017 	ldw	r2,0(r2)
  812bc0:	10800304 	addi	r2,r2,12
  812bc4:	e0fffc17 	ldw	r3,-16(fp)
  812bc8:	18c00117 	ldw	r3,4(r3)
  812bcc:	10c00035 	stwio	r3,0(r2)
  812bd0:	e0bff817 	ldw	r2,-32(fp)
  812bd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812bd8:	e0bffa17 	ldw	r2,-24(fp)
  812bdc:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  812be0:	e0bff517 	ldw	r2,-44(fp)
  812be4:	1000021e 	bne	r2,zero,812bf0 <altera_avalon_uart_read+0x158>
  812be8:	e0bffe17 	ldw	r2,-8(fp)
  812bec:	103fcd1e 	bne	r2,zero,812b24 <__alt_mem_onchip_mem+0xff792b24>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812bf0:	0005303a 	rdctl	r2,status
  812bf4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812bf8:	e0fffb17 	ldw	r3,-20(fp)
  812bfc:	00bfff84 	movi	r2,-2
  812c00:	1884703a 	and	r2,r3,r2
  812c04:	1001703a 	wrctl	status,r2
  
  return context;
  812c08:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  812c0c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  812c10:	e0bffc17 	ldw	r2,-16(fp)
  812c14:	10800117 	ldw	r2,4(r2)
  812c18:	10c02014 	ori	r3,r2,128
  812c1c:	e0bffc17 	ldw	r2,-16(fp)
  812c20:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812c24:	e0bffc17 	ldw	r2,-16(fp)
  812c28:	10800017 	ldw	r2,0(r2)
  812c2c:	10800304 	addi	r2,r2,12
  812c30:	e0fffc17 	ldw	r3,-16(fp)
  812c34:	18c00117 	ldw	r3,4(r3)
  812c38:	10c00035 	stwio	r3,0(r2)
  812c3c:	e0bff817 	ldw	r2,-32(fp)
  812c40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c44:	e0bff717 	ldw	r2,-36(fp)
  812c48:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  812c4c:	e0bff403 	ldbu	r2,-48(fp)
  812c50:	10000226 	beq	r2,zero,812c5c <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  812c54:	00bffd44 	movi	r2,-11
  812c58:	00000106 	br	812c60 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  812c5c:	e0bff517 	ldw	r2,-44(fp)
  }
}
  812c60:	e037883a 	mov	sp,fp
  812c64:	dfc00117 	ldw	ra,4(sp)
  812c68:	df000017 	ldw	fp,0(sp)
  812c6c:	dec00204 	addi	sp,sp,8
  812c70:	f800283a 	ret

00812c74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812c74:	defffe04 	addi	sp,sp,-8
  812c78:	dfc00115 	stw	ra,4(sp)
  812c7c:	df000015 	stw	fp,0(sp)
  812c80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812c84:	d0a00b17 	ldw	r2,-32724(gp)
  812c88:	10000326 	beq	r2,zero,812c98 <alt_get_errno+0x24>
  812c8c:	d0a00b17 	ldw	r2,-32724(gp)
  812c90:	103ee83a 	callr	r2
  812c94:	00000106 	br	812c9c <alt_get_errno+0x28>
  812c98:	d0a7a404 	addi	r2,gp,-24944
}
  812c9c:	e037883a 	mov	sp,fp
  812ca0:	dfc00117 	ldw	ra,4(sp)
  812ca4:	df000017 	ldw	fp,0(sp)
  812ca8:	dec00204 	addi	sp,sp,8
  812cac:	f800283a 	ret

00812cb0 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  812cb0:	defff204 	addi	sp,sp,-56
  812cb4:	dfc00d15 	stw	ra,52(sp)
  812cb8:	df000c15 	stw	fp,48(sp)
  812cbc:	df000c04 	addi	fp,sp,48
  812cc0:	e13ffc15 	stw	r4,-16(fp)
  812cc4:	e17ffd15 	stw	r5,-12(fp)
  812cc8:	e1bffe15 	stw	r6,-8(fp)
  812ccc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  812cd0:	e0bffe17 	ldw	r2,-8(fp)
  812cd4:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  812cd8:	e0bfff17 	ldw	r2,-4(fp)
  812cdc:	1090000c 	andi	r2,r2,16384
  812ce0:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812ce4:	00003c06 	br	812dd8 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  812ce8:	e0bffc17 	ldw	r2,-16(fp)
  812cec:	10800517 	ldw	r2,20(r2)
  812cf0:	10800044 	addi	r2,r2,1
  812cf4:	10800fcc 	andi	r2,r2,63
  812cf8:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  812cfc:	e0bffc17 	ldw	r2,-16(fp)
  812d00:	10c00417 	ldw	r3,16(r2)
  812d04:	e0bff717 	ldw	r2,-36(fp)
  812d08:	1880221e 	bne	r3,r2,812d94 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  812d0c:	e0bff517 	ldw	r2,-44(fp)
  812d10:	10000526 	beq	r2,zero,812d28 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  812d14:	0812c740 	call	812c74 <alt_get_errno>
  812d18:	1007883a 	mov	r3,r2
  812d1c:	008002c4 	movi	r2,11
  812d20:	18800015 	stw	r2,0(r3)
        break;
  812d24:	00002e06 	br	812de0 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d28:	0005303a 	rdctl	r2,status
  812d2c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d30:	e0fff917 	ldw	r3,-28(fp)
  812d34:	00bfff84 	movi	r2,-2
  812d38:	1884703a 	and	r2,r3,r2
  812d3c:	1001703a 	wrctl	status,r2
  
  return context;
  812d40:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  812d44:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812d48:	e0bffc17 	ldw	r2,-16(fp)
  812d4c:	10800117 	ldw	r2,4(r2)
  812d50:	10c11014 	ori	r3,r2,1088
  812d54:	e0bffc17 	ldw	r2,-16(fp)
  812d58:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812d5c:	e0bffc17 	ldw	r2,-16(fp)
  812d60:	10800017 	ldw	r2,0(r2)
  812d64:	10800304 	addi	r2,r2,12
  812d68:	e0fffc17 	ldw	r3,-16(fp)
  812d6c:	18c00117 	ldw	r3,4(r3)
  812d70:	10c00035 	stwio	r3,0(r2)
  812d74:	e0bff817 	ldw	r2,-32(fp)
  812d78:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d7c:	e0bff617 	ldw	r2,-40(fp)
  812d80:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  812d84:	e0bffc17 	ldw	r2,-16(fp)
  812d88:	10c00417 	ldw	r3,16(r2)
  812d8c:	e0bff717 	ldw	r2,-36(fp)
  812d90:	18bffc26 	beq	r3,r2,812d84 <__alt_mem_onchip_mem+0xff792d84>
      }
    }

    count--;
  812d94:	e0bff417 	ldw	r2,-48(fp)
  812d98:	10bfffc4 	addi	r2,r2,-1
  812d9c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  812da0:	e0bffc17 	ldw	r2,-16(fp)
  812da4:	10c00517 	ldw	r3,20(r2)
  812da8:	e0bffd17 	ldw	r2,-12(fp)
  812dac:	11000044 	addi	r4,r2,1
  812db0:	e13ffd15 	stw	r4,-12(fp)
  812db4:	10800003 	ldbu	r2,0(r2)
  812db8:	1009883a 	mov	r4,r2
  812dbc:	e0bffc17 	ldw	r2,-16(fp)
  812dc0:	10c5883a 	add	r2,r2,r3
  812dc4:	10801704 	addi	r2,r2,92
  812dc8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  812dcc:	e0bffc17 	ldw	r2,-16(fp)
  812dd0:	e0fff717 	ldw	r3,-36(fp)
  812dd4:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  812dd8:	e0bff417 	ldw	r2,-48(fp)
  812ddc:	103fc21e 	bne	r2,zero,812ce8 <__alt_mem_onchip_mem+0xff792ce8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812de0:	0005303a 	rdctl	r2,status
  812de4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812de8:	e0fffb17 	ldw	r3,-20(fp)
  812dec:	00bfff84 	movi	r2,-2
  812df0:	1884703a 	and	r2,r3,r2
  812df4:	1001703a 	wrctl	status,r2
  
  return context;
  812df8:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  812dfc:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  812e00:	e0bffc17 	ldw	r2,-16(fp)
  812e04:	10800117 	ldw	r2,4(r2)
  812e08:	10c11014 	ori	r3,r2,1088
  812e0c:	e0bffc17 	ldw	r2,-16(fp)
  812e10:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  812e14:	e0bffc17 	ldw	r2,-16(fp)
  812e18:	10800017 	ldw	r2,0(r2)
  812e1c:	10800304 	addi	r2,r2,12
  812e20:	e0fffc17 	ldw	r3,-16(fp)
  812e24:	18c00117 	ldw	r3,4(r3)
  812e28:	10c00035 	stwio	r3,0(r2)
  812e2c:	e0bff817 	ldw	r2,-32(fp)
  812e30:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e34:	e0bffa17 	ldw	r2,-24(fp)
  812e38:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  812e3c:	e0fffe17 	ldw	r3,-8(fp)
  812e40:	e0bff417 	ldw	r2,-48(fp)
  812e44:	1885c83a 	sub	r2,r3,r2
}
  812e48:	e037883a 	mov	sp,fp
  812e4c:	dfc00117 	ldw	ra,4(sp)
  812e50:	df000017 	ldw	fp,0(sp)
  812e54:	dec00204 	addi	sp,sp,8
  812e58:	f800283a 	ret

00812e5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  812e5c:	defff504 	addi	sp,sp,-44
  812e60:	df000a15 	stw	fp,40(sp)
  812e64:	df000a04 	addi	fp,sp,40
  812e68:	e13ffc15 	stw	r4,-16(fp)
  812e6c:	e17ffd15 	stw	r5,-12(fp)
  812e70:	e1bffe15 	stw	r6,-8(fp)
  812e74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  812e78:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812e7c:	d0a7a817 	ldw	r2,-24928(gp)
  
  if (alt_ticks_per_second ())
  812e80:	10003c26 	beq	r2,zero,812f74 <alt_alarm_start+0x118>
  {
    if (alarm)
  812e84:	e0bffc17 	ldw	r2,-16(fp)
  812e88:	10003826 	beq	r2,zero,812f6c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  812e8c:	e0bffc17 	ldw	r2,-16(fp)
  812e90:	e0fffe17 	ldw	r3,-8(fp)
  812e94:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  812e98:	e0bffc17 	ldw	r2,-16(fp)
  812e9c:	e0ffff17 	ldw	r3,-4(fp)
  812ea0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812ea4:	0005303a 	rdctl	r2,status
  812ea8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812eac:	e0fff917 	ldw	r3,-28(fp)
  812eb0:	00bfff84 	movi	r2,-2
  812eb4:	1884703a 	and	r2,r3,r2
  812eb8:	1001703a 	wrctl	status,r2
  
  return context;
  812ebc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  812ec0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812ec4:	d0a7a917 	ldw	r2,-24924(gp)
      
      current_nticks = alt_nticks();
  812ec8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  812ecc:	e0fffd17 	ldw	r3,-12(fp)
  812ed0:	e0bff617 	ldw	r2,-40(fp)
  812ed4:	1885883a 	add	r2,r3,r2
  812ed8:	10c00044 	addi	r3,r2,1
  812edc:	e0bffc17 	ldw	r2,-16(fp)
  812ee0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812ee4:	e0bffc17 	ldw	r2,-16(fp)
  812ee8:	10c00217 	ldw	r3,8(r2)
  812eec:	e0bff617 	ldw	r2,-40(fp)
  812ef0:	1880042e 	bgeu	r3,r2,812f04 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  812ef4:	e0bffc17 	ldw	r2,-16(fp)
  812ef8:	00c00044 	movi	r3,1
  812efc:	10c00405 	stb	r3,16(r2)
  812f00:	00000206 	br	812f0c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  812f04:	e0bffc17 	ldw	r2,-16(fp)
  812f08:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  812f0c:	e0bffc17 	ldw	r2,-16(fp)
  812f10:	d0e00d04 	addi	r3,gp,-32716
  812f14:	e0fffa15 	stw	r3,-24(fp)
  812f18:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812f1c:	e0bffb17 	ldw	r2,-20(fp)
  812f20:	e0fffa17 	ldw	r3,-24(fp)
  812f24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812f28:	e0bffa17 	ldw	r2,-24(fp)
  812f2c:	10c00017 	ldw	r3,0(r2)
  812f30:	e0bffb17 	ldw	r2,-20(fp)
  812f34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812f38:	e0bffa17 	ldw	r2,-24(fp)
  812f3c:	10800017 	ldw	r2,0(r2)
  812f40:	e0fffb17 	ldw	r3,-20(fp)
  812f44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812f48:	e0bffa17 	ldw	r2,-24(fp)
  812f4c:	e0fffb17 	ldw	r3,-20(fp)
  812f50:	10c00015 	stw	r3,0(r2)
  812f54:	e0bff817 	ldw	r2,-32(fp)
  812f58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f5c:	e0bff717 	ldw	r2,-36(fp)
  812f60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  812f64:	0005883a 	mov	r2,zero
  812f68:	00000306 	br	812f78 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  812f6c:	00bffa84 	movi	r2,-22
  812f70:	00000106 	br	812f78 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  812f74:	00bfde84 	movi	r2,-134
  }
}
  812f78:	e037883a 	mov	sp,fp
  812f7c:	df000017 	ldw	fp,0(sp)
  812f80:	dec00104 	addi	sp,sp,4
  812f84:	f800283a 	ret

00812f88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  812f88:	defffe04 	addi	sp,sp,-8
  812f8c:	df000115 	stw	fp,4(sp)
  812f90:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812f94:	e03fff15 	stw	zero,-4(fp)
  812f98:	00000506 	br	812fb0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  812f9c:	e0bfff17 	ldw	r2,-4(fp)
  812fa0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  812fa4:	e0bfff17 	ldw	r2,-4(fp)
  812fa8:	10800804 	addi	r2,r2,32
  812fac:	e0bfff15 	stw	r2,-4(fp)
  812fb0:	e0bfff17 	ldw	r2,-4(fp)
  812fb4:	10820030 	cmpltui	r2,r2,2048
  812fb8:	103ff81e 	bne	r2,zero,812f9c <__alt_mem_onchip_mem+0xff792f9c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  812fbc:	0001883a 	nop
  812fc0:	e037883a 	mov	sp,fp
  812fc4:	df000017 	ldw	fp,0(sp)
  812fc8:	dec00104 	addi	sp,sp,4
  812fcc:	f800283a 	ret

00812fd0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  812fd0:	defffe04 	addi	sp,sp,-8
  812fd4:	dfc00115 	stw	ra,4(sp)
  812fd8:	df000015 	stw	fp,0(sp)
  812fdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  812fe0:	d0a00b17 	ldw	r2,-32724(gp)
  812fe4:	10000326 	beq	r2,zero,812ff4 <alt_get_errno+0x24>
  812fe8:	d0a00b17 	ldw	r2,-32724(gp)
  812fec:	103ee83a 	callr	r2
  812ff0:	00000106 	br	812ff8 <alt_get_errno+0x28>
  812ff4:	d0a7a404 	addi	r2,gp,-24944
}
  812ff8:	e037883a 	mov	sp,fp
  812ffc:	dfc00117 	ldw	ra,4(sp)
  813000:	df000017 	ldw	fp,0(sp)
  813004:	dec00204 	addi	sp,sp,8
  813008:	f800283a 	ret

0081300c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81300c:	defffa04 	addi	sp,sp,-24
  813010:	dfc00515 	stw	ra,20(sp)
  813014:	df000415 	stw	fp,16(sp)
  813018:	df000404 	addi	fp,sp,16
  81301c:	e13ffe15 	stw	r4,-8(fp)
  813020:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813024:	e0bffe17 	ldw	r2,-8(fp)
  813028:	10000326 	beq	r2,zero,813038 <alt_dev_llist_insert+0x2c>
  81302c:	e0bffe17 	ldw	r2,-8(fp)
  813030:	10800217 	ldw	r2,8(r2)
  813034:	1000061e 	bne	r2,zero,813050 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  813038:	0812fd00 	call	812fd0 <alt_get_errno>
  81303c:	1007883a 	mov	r3,r2
  813040:	00800584 	movi	r2,22
  813044:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813048:	00bffa84 	movi	r2,-22
  81304c:	00001306 	br	81309c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813050:	e0bffe17 	ldw	r2,-8(fp)
  813054:	e0ffff17 	ldw	r3,-4(fp)
  813058:	e0fffc15 	stw	r3,-16(fp)
  81305c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813060:	e0bffd17 	ldw	r2,-12(fp)
  813064:	e0fffc17 	ldw	r3,-16(fp)
  813068:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  81306c:	e0bffc17 	ldw	r2,-16(fp)
  813070:	10c00017 	ldw	r3,0(r2)
  813074:	e0bffd17 	ldw	r2,-12(fp)
  813078:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  81307c:	e0bffc17 	ldw	r2,-16(fp)
  813080:	10800017 	ldw	r2,0(r2)
  813084:	e0fffd17 	ldw	r3,-12(fp)
  813088:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  81308c:	e0bffc17 	ldw	r2,-16(fp)
  813090:	e0fffd17 	ldw	r3,-12(fp)
  813094:	10c00015 	stw	r3,0(r2)

  return 0;  
  813098:	0005883a 	mov	r2,zero
}
  81309c:	e037883a 	mov	sp,fp
  8130a0:	dfc00117 	ldw	ra,4(sp)
  8130a4:	df000017 	ldw	fp,0(sp)
  8130a8:	dec00204 	addi	sp,sp,8
  8130ac:	f800283a 	ret

008130b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8130b0:	defffd04 	addi	sp,sp,-12
  8130b4:	dfc00215 	stw	ra,8(sp)
  8130b8:	df000115 	stw	fp,4(sp)
  8130bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8130c0:	00802074 	movhi	r2,129
  8130c4:	10901f04 	addi	r2,r2,16508
  8130c8:	e0bfff15 	stw	r2,-4(fp)
  8130cc:	00000606 	br	8130e8 <_do_ctors+0x38>
        (*ctor) (); 
  8130d0:	e0bfff17 	ldw	r2,-4(fp)
  8130d4:	10800017 	ldw	r2,0(r2)
  8130d8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8130dc:	e0bfff17 	ldw	r2,-4(fp)
  8130e0:	10bfff04 	addi	r2,r2,-4
  8130e4:	e0bfff15 	stw	r2,-4(fp)
  8130e8:	e0ffff17 	ldw	r3,-4(fp)
  8130ec:	00802074 	movhi	r2,129
  8130f0:	10902004 	addi	r2,r2,16512
  8130f4:	18bff62e 	bgeu	r3,r2,8130d0 <__alt_mem_onchip_mem+0xff7930d0>
        (*ctor) (); 
}
  8130f8:	0001883a 	nop
  8130fc:	e037883a 	mov	sp,fp
  813100:	dfc00117 	ldw	ra,4(sp)
  813104:	df000017 	ldw	fp,0(sp)
  813108:	dec00204 	addi	sp,sp,8
  81310c:	f800283a 	ret

00813110 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  813110:	defffd04 	addi	sp,sp,-12
  813114:	dfc00215 	stw	ra,8(sp)
  813118:	df000115 	stw	fp,4(sp)
  81311c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  813120:	00802074 	movhi	r2,129
  813124:	10901f04 	addi	r2,r2,16508
  813128:	e0bfff15 	stw	r2,-4(fp)
  81312c:	00000606 	br	813148 <_do_dtors+0x38>
        (*dtor) (); 
  813130:	e0bfff17 	ldw	r2,-4(fp)
  813134:	10800017 	ldw	r2,0(r2)
  813138:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  81313c:	e0bfff17 	ldw	r2,-4(fp)
  813140:	10bfff04 	addi	r2,r2,-4
  813144:	e0bfff15 	stw	r2,-4(fp)
  813148:	e0ffff17 	ldw	r3,-4(fp)
  81314c:	00802074 	movhi	r2,129
  813150:	10902004 	addi	r2,r2,16512
  813154:	18bff62e 	bgeu	r3,r2,813130 <__alt_mem_onchip_mem+0xff793130>
        (*dtor) (); 
}
  813158:	0001883a 	nop
  81315c:	e037883a 	mov	sp,fp
  813160:	dfc00117 	ldw	ra,4(sp)
  813164:	df000017 	ldw	fp,0(sp)
  813168:	dec00204 	addi	sp,sp,8
  81316c:	f800283a 	ret

00813170 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  813170:	defffe04 	addi	sp,sp,-8
  813174:	dfc00115 	stw	ra,4(sp)
  813178:	df000015 	stw	fp,0(sp)
  81317c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  813180:	01440004 	movi	r5,4096
  813184:	0009883a 	mov	r4,zero
  813188:	0813bc00 	call	813bc0 <alt_icache_flush>
#endif
}
  81318c:	0001883a 	nop
  813190:	e037883a 	mov	sp,fp
  813194:	dfc00117 	ldw	ra,4(sp)
  813198:	df000017 	ldw	fp,0(sp)
  81319c:	dec00204 	addi	sp,sp,8
  8131a0:	f800283a 	ret

008131a4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8131a4:	defff904 	addi	sp,sp,-28
  8131a8:	dfc00615 	stw	ra,24(sp)
  8131ac:	df000515 	stw	fp,20(sp)
  8131b0:	df000504 	addi	fp,sp,20
  8131b4:	e13ffc15 	stw	r4,-16(fp)
  8131b8:	e17ffd15 	stw	r5,-12(fp)
  8131bc:	e1bffe15 	stw	r6,-8(fp)
  8131c0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  8131c4:	e0800217 	ldw	r2,8(fp)
  8131c8:	d8800015 	stw	r2,0(sp)
  8131cc:	e1ffff17 	ldw	r7,-4(fp)
  8131d0:	e1bffe17 	ldw	r6,-8(fp)
  8131d4:	e17ffd17 	ldw	r5,-12(fp)
  8131d8:	e13ffc17 	ldw	r4,-16(fp)
  8131dc:	08133540 	call	813354 <alt_iic_isr_register>
}  
  8131e0:	e037883a 	mov	sp,fp
  8131e4:	dfc00117 	ldw	ra,4(sp)
  8131e8:	df000017 	ldw	fp,0(sp)
  8131ec:	dec00204 	addi	sp,sp,8
  8131f0:	f800283a 	ret

008131f4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8131f4:	defff904 	addi	sp,sp,-28
  8131f8:	df000615 	stw	fp,24(sp)
  8131fc:	df000604 	addi	fp,sp,24
  813200:	e13ffe15 	stw	r4,-8(fp)
  813204:	e17fff15 	stw	r5,-4(fp)
  813208:	e0bfff17 	ldw	r2,-4(fp)
  81320c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813210:	0005303a 	rdctl	r2,status
  813214:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813218:	e0fffb17 	ldw	r3,-20(fp)
  81321c:	00bfff84 	movi	r2,-2
  813220:	1884703a 	and	r2,r3,r2
  813224:	1001703a 	wrctl	status,r2
  
  return context;
  813228:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  81322c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  813230:	00c00044 	movi	r3,1
  813234:	e0bffa17 	ldw	r2,-24(fp)
  813238:	1884983a 	sll	r2,r3,r2
  81323c:	1007883a 	mov	r3,r2
  813240:	d0a7aa17 	ldw	r2,-24920(gp)
  813244:	1884b03a 	or	r2,r3,r2
  813248:	d0a7aa15 	stw	r2,-24920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81324c:	d0a7aa17 	ldw	r2,-24920(gp)
  813250:	100170fa 	wrctl	ienable,r2
  813254:	e0bffc17 	ldw	r2,-16(fp)
  813258:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81325c:	e0bffd17 	ldw	r2,-12(fp)
  813260:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  813264:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  813268:	0001883a 	nop
}
  81326c:	e037883a 	mov	sp,fp
  813270:	df000017 	ldw	fp,0(sp)
  813274:	dec00104 	addi	sp,sp,4
  813278:	f800283a 	ret

0081327c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  81327c:	defff904 	addi	sp,sp,-28
  813280:	df000615 	stw	fp,24(sp)
  813284:	df000604 	addi	fp,sp,24
  813288:	e13ffe15 	stw	r4,-8(fp)
  81328c:	e17fff15 	stw	r5,-4(fp)
  813290:	e0bfff17 	ldw	r2,-4(fp)
  813294:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813298:	0005303a 	rdctl	r2,status
  81329c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8132a0:	e0fffb17 	ldw	r3,-20(fp)
  8132a4:	00bfff84 	movi	r2,-2
  8132a8:	1884703a 	and	r2,r3,r2
  8132ac:	1001703a 	wrctl	status,r2
  
  return context;
  8132b0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8132b4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  8132b8:	00c00044 	movi	r3,1
  8132bc:	e0bffa17 	ldw	r2,-24(fp)
  8132c0:	1884983a 	sll	r2,r3,r2
  8132c4:	0084303a 	nor	r2,zero,r2
  8132c8:	1007883a 	mov	r3,r2
  8132cc:	d0a7aa17 	ldw	r2,-24920(gp)
  8132d0:	1884703a 	and	r2,r3,r2
  8132d4:	d0a7aa15 	stw	r2,-24920(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8132d8:	d0a7aa17 	ldw	r2,-24920(gp)
  8132dc:	100170fa 	wrctl	ienable,r2
  8132e0:	e0bffc17 	ldw	r2,-16(fp)
  8132e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8132e8:	e0bffd17 	ldw	r2,-12(fp)
  8132ec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8132f0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  8132f4:	0001883a 	nop
}
  8132f8:	e037883a 	mov	sp,fp
  8132fc:	df000017 	ldw	fp,0(sp)
  813300:	dec00104 	addi	sp,sp,4
  813304:	f800283a 	ret

00813308 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  813308:	defffc04 	addi	sp,sp,-16
  81330c:	df000315 	stw	fp,12(sp)
  813310:	df000304 	addi	fp,sp,12
  813314:	e13ffe15 	stw	r4,-8(fp)
  813318:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  81331c:	000530fa 	rdctl	r2,ienable
  813320:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  813324:	00c00044 	movi	r3,1
  813328:	e0bfff17 	ldw	r2,-4(fp)
  81332c:	1884983a 	sll	r2,r3,r2
  813330:	1007883a 	mov	r3,r2
  813334:	e0bffd17 	ldw	r2,-12(fp)
  813338:	1884703a 	and	r2,r3,r2
  81333c:	1004c03a 	cmpne	r2,r2,zero
  813340:	10803fcc 	andi	r2,r2,255
}
  813344:	e037883a 	mov	sp,fp
  813348:	df000017 	ldw	fp,0(sp)
  81334c:	dec00104 	addi	sp,sp,4
  813350:	f800283a 	ret

00813354 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  813354:	defff504 	addi	sp,sp,-44
  813358:	dfc00a15 	stw	ra,40(sp)
  81335c:	df000915 	stw	fp,36(sp)
  813360:	df000904 	addi	fp,sp,36
  813364:	e13ffc15 	stw	r4,-16(fp)
  813368:	e17ffd15 	stw	r5,-12(fp)
  81336c:	e1bffe15 	stw	r6,-8(fp)
  813370:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  813374:	00bffa84 	movi	r2,-22
  813378:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  81337c:	e0bffd17 	ldw	r2,-12(fp)
  813380:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  813384:	e0bff817 	ldw	r2,-32(fp)
  813388:	10800808 	cmpgei	r2,r2,32
  81338c:	1000271e 	bne	r2,zero,81342c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813390:	0005303a 	rdctl	r2,status
  813394:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813398:	e0fffb17 	ldw	r3,-20(fp)
  81339c:	00bfff84 	movi	r2,-2
  8133a0:	1884703a 	and	r2,r3,r2
  8133a4:	1001703a 	wrctl	status,r2
  
  return context;
  8133a8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8133ac:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  8133b0:	008020b4 	movhi	r2,130
  8133b4:	10a0ac04 	addi	r2,r2,-32080
  8133b8:	e0fff817 	ldw	r3,-32(fp)
  8133bc:	180690fa 	slli	r3,r3,3
  8133c0:	10c5883a 	add	r2,r2,r3
  8133c4:	e0fffe17 	ldw	r3,-8(fp)
  8133c8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  8133cc:	008020b4 	movhi	r2,130
  8133d0:	10a0ac04 	addi	r2,r2,-32080
  8133d4:	e0fff817 	ldw	r3,-32(fp)
  8133d8:	180690fa 	slli	r3,r3,3
  8133dc:	10c5883a 	add	r2,r2,r3
  8133e0:	10800104 	addi	r2,r2,4
  8133e4:	e0ffff17 	ldw	r3,-4(fp)
  8133e8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8133ec:	e0bffe17 	ldw	r2,-8(fp)
  8133f0:	10000526 	beq	r2,zero,813408 <alt_iic_isr_register+0xb4>
  8133f4:	e0bff817 	ldw	r2,-32(fp)
  8133f8:	100b883a 	mov	r5,r2
  8133fc:	e13ffc17 	ldw	r4,-16(fp)
  813400:	08131f40 	call	8131f4 <alt_ic_irq_enable>
  813404:	00000406 	br	813418 <alt_iic_isr_register+0xc4>
  813408:	e0bff817 	ldw	r2,-32(fp)
  81340c:	100b883a 	mov	r5,r2
  813410:	e13ffc17 	ldw	r4,-16(fp)
  813414:	081327c0 	call	81327c <alt_ic_irq_disable>
  813418:	e0bff715 	stw	r2,-36(fp)
  81341c:	e0bffa17 	ldw	r2,-24(fp)
  813420:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813424:	e0bff917 	ldw	r2,-28(fp)
  813428:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  81342c:	e0bff717 	ldw	r2,-36(fp)
}
  813430:	e037883a 	mov	sp,fp
  813434:	dfc00117 	ldw	ra,4(sp)
  813438:	df000017 	ldw	fp,0(sp)
  81343c:	dec00204 	addi	sp,sp,8
  813440:	f800283a 	ret

00813444 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  813444:	defff904 	addi	sp,sp,-28
  813448:	dfc00615 	stw	ra,24(sp)
  81344c:	df000515 	stw	fp,20(sp)
  813450:	df000504 	addi	fp,sp,20
  813454:	e13ffc15 	stw	r4,-16(fp)
  813458:	e17ffd15 	stw	r5,-12(fp)
  81345c:	e1bffe15 	stw	r6,-8(fp)
  813460:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  813464:	e1bfff17 	ldw	r6,-4(fp)
  813468:	e17ffe17 	ldw	r5,-8(fp)
  81346c:	e13ffd17 	ldw	r4,-12(fp)
  813470:	08136840 	call	813684 <open>
  813474:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  813478:	e0bffb17 	ldw	r2,-20(fp)
  81347c:	10001c16 	blt	r2,zero,8134f0 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  813480:	00802074 	movhi	r2,129
  813484:	1093ed04 	addi	r2,r2,20404
  813488:	e0fffb17 	ldw	r3,-20(fp)
  81348c:	18c00324 	muli	r3,r3,12
  813490:	10c5883a 	add	r2,r2,r3
  813494:	10c00017 	ldw	r3,0(r2)
  813498:	e0bffc17 	ldw	r2,-16(fp)
  81349c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8134a0:	00802074 	movhi	r2,129
  8134a4:	1093ed04 	addi	r2,r2,20404
  8134a8:	e0fffb17 	ldw	r3,-20(fp)
  8134ac:	18c00324 	muli	r3,r3,12
  8134b0:	10c5883a 	add	r2,r2,r3
  8134b4:	10800104 	addi	r2,r2,4
  8134b8:	10c00017 	ldw	r3,0(r2)
  8134bc:	e0bffc17 	ldw	r2,-16(fp)
  8134c0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8134c4:	00802074 	movhi	r2,129
  8134c8:	1093ed04 	addi	r2,r2,20404
  8134cc:	e0fffb17 	ldw	r3,-20(fp)
  8134d0:	18c00324 	muli	r3,r3,12
  8134d4:	10c5883a 	add	r2,r2,r3
  8134d8:	10800204 	addi	r2,r2,8
  8134dc:	10c00017 	ldw	r3,0(r2)
  8134e0:	e0bffc17 	ldw	r2,-16(fp)
  8134e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8134e8:	e13ffb17 	ldw	r4,-20(fp)
  8134ec:	08105a40 	call	8105a4 <alt_release_fd>
  }
} 
  8134f0:	0001883a 	nop
  8134f4:	e037883a 	mov	sp,fp
  8134f8:	dfc00117 	ldw	ra,4(sp)
  8134fc:	df000017 	ldw	fp,0(sp)
  813500:	dec00204 	addi	sp,sp,8
  813504:	f800283a 	ret

00813508 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813508:	defffb04 	addi	sp,sp,-20
  81350c:	dfc00415 	stw	ra,16(sp)
  813510:	df000315 	stw	fp,12(sp)
  813514:	df000304 	addi	fp,sp,12
  813518:	e13ffd15 	stw	r4,-12(fp)
  81351c:	e17ffe15 	stw	r5,-8(fp)
  813520:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  813524:	01c07fc4 	movi	r7,511
  813528:	01800044 	movi	r6,1
  81352c:	e17ffd17 	ldw	r5,-12(fp)
  813530:	01002074 	movhi	r4,129
  813534:	2113f004 	addi	r4,r4,20416
  813538:	08134440 	call	813444 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81353c:	01c07fc4 	movi	r7,511
  813540:	000d883a 	mov	r6,zero
  813544:	e17ffe17 	ldw	r5,-8(fp)
  813548:	01002074 	movhi	r4,129
  81354c:	2113ed04 	addi	r4,r4,20404
  813550:	08134440 	call	813444 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  813554:	01c07fc4 	movi	r7,511
  813558:	01800044 	movi	r6,1
  81355c:	e17fff17 	ldw	r5,-4(fp)
  813560:	01002074 	movhi	r4,129
  813564:	2113f304 	addi	r4,r4,20428
  813568:	08134440 	call	813444 <alt_open_fd>
}  
  81356c:	0001883a 	nop
  813570:	e037883a 	mov	sp,fp
  813574:	dfc00117 	ldw	ra,4(sp)
  813578:	df000017 	ldw	fp,0(sp)
  81357c:	dec00204 	addi	sp,sp,8
  813580:	f800283a 	ret

00813584 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813584:	defffe04 	addi	sp,sp,-8
  813588:	dfc00115 	stw	ra,4(sp)
  81358c:	df000015 	stw	fp,0(sp)
  813590:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813594:	d0a00b17 	ldw	r2,-32724(gp)
  813598:	10000326 	beq	r2,zero,8135a8 <alt_get_errno+0x24>
  81359c:	d0a00b17 	ldw	r2,-32724(gp)
  8135a0:	103ee83a 	callr	r2
  8135a4:	00000106 	br	8135ac <alt_get_errno+0x28>
  8135a8:	d0a7a404 	addi	r2,gp,-24944
}
  8135ac:	e037883a 	mov	sp,fp
  8135b0:	dfc00117 	ldw	ra,4(sp)
  8135b4:	df000017 	ldw	fp,0(sp)
  8135b8:	dec00204 	addi	sp,sp,8
  8135bc:	f800283a 	ret

008135c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8135c0:	defffd04 	addi	sp,sp,-12
  8135c4:	df000215 	stw	fp,8(sp)
  8135c8:	df000204 	addi	fp,sp,8
  8135cc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8135d0:	e0bfff17 	ldw	r2,-4(fp)
  8135d4:	10800217 	ldw	r2,8(r2)
  8135d8:	10d00034 	orhi	r3,r2,16384
  8135dc:	e0bfff17 	ldw	r2,-4(fp)
  8135e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8135e4:	e03ffe15 	stw	zero,-8(fp)
  8135e8:	00001d06 	br	813660 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8135ec:	00802074 	movhi	r2,129
  8135f0:	1093ed04 	addi	r2,r2,20404
  8135f4:	e0fffe17 	ldw	r3,-8(fp)
  8135f8:	18c00324 	muli	r3,r3,12
  8135fc:	10c5883a 	add	r2,r2,r3
  813600:	10c00017 	ldw	r3,0(r2)
  813604:	e0bfff17 	ldw	r2,-4(fp)
  813608:	10800017 	ldw	r2,0(r2)
  81360c:	1880111e 	bne	r3,r2,813654 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813610:	00802074 	movhi	r2,129
  813614:	1093ed04 	addi	r2,r2,20404
  813618:	e0fffe17 	ldw	r3,-8(fp)
  81361c:	18c00324 	muli	r3,r3,12
  813620:	10c5883a 	add	r2,r2,r3
  813624:	10800204 	addi	r2,r2,8
  813628:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81362c:	1000090e 	bge	r2,zero,813654 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  813630:	e0bffe17 	ldw	r2,-8(fp)
  813634:	10c00324 	muli	r3,r2,12
  813638:	00802074 	movhi	r2,129
  81363c:	1093ed04 	addi	r2,r2,20404
  813640:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813644:	e0bfff17 	ldw	r2,-4(fp)
  813648:	18800226 	beq	r3,r2,813654 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81364c:	00bffcc4 	movi	r2,-13
  813650:	00000806 	br	813674 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813654:	e0bffe17 	ldw	r2,-8(fp)
  813658:	10800044 	addi	r2,r2,1
  81365c:	e0bffe15 	stw	r2,-8(fp)
  813660:	d0a00a17 	ldw	r2,-32728(gp)
  813664:	1007883a 	mov	r3,r2
  813668:	e0bffe17 	ldw	r2,-8(fp)
  81366c:	18bfdf2e 	bgeu	r3,r2,8135ec <__alt_mem_onchip_mem+0xff7935ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813670:	0005883a 	mov	r2,zero
}
  813674:	e037883a 	mov	sp,fp
  813678:	df000017 	ldw	fp,0(sp)
  81367c:	dec00104 	addi	sp,sp,4
  813680:	f800283a 	ret

00813684 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813684:	defff604 	addi	sp,sp,-40
  813688:	dfc00915 	stw	ra,36(sp)
  81368c:	df000815 	stw	fp,32(sp)
  813690:	df000804 	addi	fp,sp,32
  813694:	e13ffd15 	stw	r4,-12(fp)
  813698:	e17ffe15 	stw	r5,-8(fp)
  81369c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8136a0:	00bfffc4 	movi	r2,-1
  8136a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8136a8:	00bffb44 	movi	r2,-19
  8136ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8136b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8136b4:	d1600804 	addi	r5,gp,-32736
  8136b8:	e13ffd17 	ldw	r4,-12(fp)
  8136bc:	08139840 	call	813984 <alt_find_dev>
  8136c0:	e0bff815 	stw	r2,-32(fp)
  8136c4:	e0bff817 	ldw	r2,-32(fp)
  8136c8:	1000051e 	bne	r2,zero,8136e0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8136cc:	e13ffd17 	ldw	r4,-12(fp)
  8136d0:	0813a140 	call	813a14 <alt_find_file>
  8136d4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8136d8:	00800044 	movi	r2,1
  8136dc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8136e0:	e0bff817 	ldw	r2,-32(fp)
  8136e4:	10002926 	beq	r2,zero,81378c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8136e8:	e13ff817 	ldw	r4,-32(fp)
  8136ec:	0813b1c0 	call	813b1c <alt_get_fd>
  8136f0:	e0bff915 	stw	r2,-28(fp)
  8136f4:	e0bff917 	ldw	r2,-28(fp)
  8136f8:	1000030e 	bge	r2,zero,813708 <open+0x84>
    {
      status = index;
  8136fc:	e0bff917 	ldw	r2,-28(fp)
  813700:	e0bffa15 	stw	r2,-24(fp)
  813704:	00002306 	br	813794 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  813708:	e0bff917 	ldw	r2,-28(fp)
  81370c:	10c00324 	muli	r3,r2,12
  813710:	00802074 	movhi	r2,129
  813714:	1093ed04 	addi	r2,r2,20404
  813718:	1885883a 	add	r2,r3,r2
  81371c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813720:	e0fffe17 	ldw	r3,-8(fp)
  813724:	00900034 	movhi	r2,16384
  813728:	10bfffc4 	addi	r2,r2,-1
  81372c:	1886703a 	and	r3,r3,r2
  813730:	e0bffc17 	ldw	r2,-16(fp)
  813734:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813738:	e0bffb17 	ldw	r2,-20(fp)
  81373c:	1000051e 	bne	r2,zero,813754 <open+0xd0>
  813740:	e13ffc17 	ldw	r4,-16(fp)
  813744:	08135c00 	call	8135c0 <alt_file_locked>
  813748:	e0bffa15 	stw	r2,-24(fp)
  81374c:	e0bffa17 	ldw	r2,-24(fp)
  813750:	10001016 	blt	r2,zero,813794 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813754:	e0bff817 	ldw	r2,-32(fp)
  813758:	10800317 	ldw	r2,12(r2)
  81375c:	10000826 	beq	r2,zero,813780 <open+0xfc>
  813760:	e0bff817 	ldw	r2,-32(fp)
  813764:	10800317 	ldw	r2,12(r2)
  813768:	e1ffff17 	ldw	r7,-4(fp)
  81376c:	e1bffe17 	ldw	r6,-8(fp)
  813770:	e17ffd17 	ldw	r5,-12(fp)
  813774:	e13ffc17 	ldw	r4,-16(fp)
  813778:	103ee83a 	callr	r2
  81377c:	00000106 	br	813784 <open+0x100>
  813780:	0005883a 	mov	r2,zero
  813784:	e0bffa15 	stw	r2,-24(fp)
  813788:	00000206 	br	813794 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81378c:	00bffb44 	movi	r2,-19
  813790:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  813794:	e0bffa17 	ldw	r2,-24(fp)
  813798:	1000090e 	bge	r2,zero,8137c0 <open+0x13c>
  {
    alt_release_fd (index);  
  81379c:	e13ff917 	ldw	r4,-28(fp)
  8137a0:	08105a40 	call	8105a4 <alt_release_fd>
    ALT_ERRNO = -status;
  8137a4:	08135840 	call	813584 <alt_get_errno>
  8137a8:	1007883a 	mov	r3,r2
  8137ac:	e0bffa17 	ldw	r2,-24(fp)
  8137b0:	0085c83a 	sub	r2,zero,r2
  8137b4:	18800015 	stw	r2,0(r3)
    return -1;
  8137b8:	00bfffc4 	movi	r2,-1
  8137bc:	00000106 	br	8137c4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  8137c0:	e0bff917 	ldw	r2,-28(fp)
}
  8137c4:	e037883a 	mov	sp,fp
  8137c8:	dfc00117 	ldw	ra,4(sp)
  8137cc:	df000017 	ldw	fp,0(sp)
  8137d0:	dec00204 	addi	sp,sp,8
  8137d4:	f800283a 	ret

008137d8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  8137d8:	defffd04 	addi	sp,sp,-12
  8137dc:	dfc00215 	stw	ra,8(sp)
  8137e0:	df000115 	stw	fp,4(sp)
  8137e4:	df000104 	addi	fp,sp,4
  8137e8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  8137ec:	e13fff17 	ldw	r4,-4(fp)
  8137f0:	081382c0 	call	81382c <alt_busy_sleep>
}
  8137f4:	e037883a 	mov	sp,fp
  8137f8:	dfc00117 	ldw	ra,4(sp)
  8137fc:	df000017 	ldw	fp,0(sp)
  813800:	dec00204 	addi	sp,sp,8
  813804:	f800283a 	ret

00813808 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  813808:	deffff04 	addi	sp,sp,-4
  81380c:	df000015 	stw	fp,0(sp)
  813810:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813814:	000170fa 	wrctl	ienable,zero
}
  813818:	0001883a 	nop
  81381c:	e037883a 	mov	sp,fp
  813820:	df000017 	ldw	fp,0(sp)
  813824:	dec00104 	addi	sp,sp,4
  813828:	f800283a 	ret

0081382c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81382c:	defffa04 	addi	sp,sp,-24
  813830:	dfc00515 	stw	ra,20(sp)
  813834:	df000415 	stw	fp,16(sp)
  813838:	df000404 	addi	fp,sp,16
  81383c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  813840:	008000c4 	movi	r2,3
  813844:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  813848:	e0fffd17 	ldw	r3,-12(fp)
  81384c:	008003f4 	movhi	r2,15
  813850:	10909004 	addi	r2,r2,16960
  813854:	1885383a 	mul	r2,r3,r2
  813858:	100b883a 	mov	r5,r2
  81385c:	0100bef4 	movhi	r4,763
  813860:	213c2004 	addi	r4,r4,-3968
  813864:	080d7840 	call	80d784 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  813868:	100b883a 	mov	r5,r2
  81386c:	01200034 	movhi	r4,32768
  813870:	213fffc4 	addi	r4,r4,-1
  813874:	080d7840 	call	80d784 <__udivsi3>
  813878:	100b883a 	mov	r5,r2
  81387c:	e13fff17 	ldw	r4,-4(fp)
  813880:	080d7840 	call	80d784 <__udivsi3>
  813884:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  813888:	e0bffe17 	ldw	r2,-8(fp)
  81388c:	10002a26 	beq	r2,zero,813938 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  813890:	e03ffc15 	stw	zero,-16(fp)
  813894:	00001706 	br	8138f4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  813898:	00a00034 	movhi	r2,32768
  81389c:	10bfffc4 	addi	r2,r2,-1
  8138a0:	10bfffc4 	addi	r2,r2,-1
  8138a4:	103ffe1e 	bne	r2,zero,8138a0 <__alt_mem_onchip_mem+0xff7938a0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8138a8:	e0fffd17 	ldw	r3,-12(fp)
  8138ac:	008003f4 	movhi	r2,15
  8138b0:	10909004 	addi	r2,r2,16960
  8138b4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8138b8:	100b883a 	mov	r5,r2
  8138bc:	0100bef4 	movhi	r4,763
  8138c0:	213c2004 	addi	r4,r4,-3968
  8138c4:	080d7840 	call	80d784 <__udivsi3>
  8138c8:	100b883a 	mov	r5,r2
  8138cc:	01200034 	movhi	r4,32768
  8138d0:	213fffc4 	addi	r4,r4,-1
  8138d4:	080d7840 	call	80d784 <__udivsi3>
  8138d8:	1007883a 	mov	r3,r2
  8138dc:	e0bfff17 	ldw	r2,-4(fp)
  8138e0:	10c5c83a 	sub	r2,r2,r3
  8138e4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8138e8:	e0bffc17 	ldw	r2,-16(fp)
  8138ec:	10800044 	addi	r2,r2,1
  8138f0:	e0bffc15 	stw	r2,-16(fp)
  8138f4:	e0fffc17 	ldw	r3,-16(fp)
  8138f8:	e0bffe17 	ldw	r2,-8(fp)
  8138fc:	18bfe616 	blt	r3,r2,813898 <__alt_mem_onchip_mem+0xff793898>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  813900:	e0fffd17 	ldw	r3,-12(fp)
  813904:	008003f4 	movhi	r2,15
  813908:	10909004 	addi	r2,r2,16960
  81390c:	1885383a 	mul	r2,r3,r2
  813910:	100b883a 	mov	r5,r2
  813914:	0100bef4 	movhi	r4,763
  813918:	213c2004 	addi	r4,r4,-3968
  81391c:	080d7840 	call	80d784 <__udivsi3>
  813920:	1007883a 	mov	r3,r2
  813924:	e0bfff17 	ldw	r2,-4(fp)
  813928:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81392c:	10bfffc4 	addi	r2,r2,-1
  813930:	103ffe1e 	bne	r2,zero,81392c <__alt_mem_onchip_mem+0xff79392c>
  813934:	00000d06 	br	81396c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  813938:	e0fffd17 	ldw	r3,-12(fp)
  81393c:	008003f4 	movhi	r2,15
  813940:	10909004 	addi	r2,r2,16960
  813944:	1885383a 	mul	r2,r3,r2
  813948:	100b883a 	mov	r5,r2
  81394c:	0100bef4 	movhi	r4,763
  813950:	213c2004 	addi	r4,r4,-3968
  813954:	080d7840 	call	80d784 <__udivsi3>
  813958:	1007883a 	mov	r3,r2
  81395c:	e0bfff17 	ldw	r2,-4(fp)
  813960:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  813964:	10bfffc4 	addi	r2,r2,-1
  813968:	00bffe16 	blt	zero,r2,813964 <__alt_mem_onchip_mem+0xff793964>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81396c:	0005883a 	mov	r2,zero
}
  813970:	e037883a 	mov	sp,fp
  813974:	dfc00117 	ldw	ra,4(sp)
  813978:	df000017 	ldw	fp,0(sp)
  81397c:	dec00204 	addi	sp,sp,8
  813980:	f800283a 	ret

00813984 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  813984:	defffa04 	addi	sp,sp,-24
  813988:	dfc00515 	stw	ra,20(sp)
  81398c:	df000415 	stw	fp,16(sp)
  813990:	df000404 	addi	fp,sp,16
  813994:	e13ffe15 	stw	r4,-8(fp)
  813998:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  81399c:	e0bfff17 	ldw	r2,-4(fp)
  8139a0:	10800017 	ldw	r2,0(r2)
  8139a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8139a8:	e13ffe17 	ldw	r4,-8(fp)
  8139ac:	08036c00 	call	8036c0 <strlen>
  8139b0:	10800044 	addi	r2,r2,1
  8139b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8139b8:	00000d06 	br	8139f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8139bc:	e0bffc17 	ldw	r2,-16(fp)
  8139c0:	10800217 	ldw	r2,8(r2)
  8139c4:	e0fffd17 	ldw	r3,-12(fp)
  8139c8:	180d883a 	mov	r6,r3
  8139cc:	e17ffe17 	ldw	r5,-8(fp)
  8139d0:	1009883a 	mov	r4,r2
  8139d4:	0813d380 	call	813d38 <memcmp>
  8139d8:	1000021e 	bne	r2,zero,8139e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8139dc:	e0bffc17 	ldw	r2,-16(fp)
  8139e0:	00000706 	br	813a00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8139e4:	e0bffc17 	ldw	r2,-16(fp)
  8139e8:	10800017 	ldw	r2,0(r2)
  8139ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8139f0:	e0fffc17 	ldw	r3,-16(fp)
  8139f4:	e0bfff17 	ldw	r2,-4(fp)
  8139f8:	18bff01e 	bne	r3,r2,8139bc <__alt_mem_onchip_mem+0xff7939bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8139fc:	0005883a 	mov	r2,zero
}
  813a00:	e037883a 	mov	sp,fp
  813a04:	dfc00117 	ldw	ra,4(sp)
  813a08:	df000017 	ldw	fp,0(sp)
  813a0c:	dec00204 	addi	sp,sp,8
  813a10:	f800283a 	ret

00813a14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813a14:	defffb04 	addi	sp,sp,-20
  813a18:	dfc00415 	stw	ra,16(sp)
  813a1c:	df000315 	stw	fp,12(sp)
  813a20:	df000304 	addi	fp,sp,12
  813a24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  813a28:	d0a00617 	ldw	r2,-32744(gp)
  813a2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813a30:	00003106 	br	813af8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  813a34:	e0bffd17 	ldw	r2,-12(fp)
  813a38:	10800217 	ldw	r2,8(r2)
  813a3c:	1009883a 	mov	r4,r2
  813a40:	08036c00 	call	8036c0 <strlen>
  813a44:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  813a48:	e0bffd17 	ldw	r2,-12(fp)
  813a4c:	10c00217 	ldw	r3,8(r2)
  813a50:	e0bffe17 	ldw	r2,-8(fp)
  813a54:	10bfffc4 	addi	r2,r2,-1
  813a58:	1885883a 	add	r2,r3,r2
  813a5c:	10800003 	ldbu	r2,0(r2)
  813a60:	10803fcc 	andi	r2,r2,255
  813a64:	1080201c 	xori	r2,r2,128
  813a68:	10bfe004 	addi	r2,r2,-128
  813a6c:	10800bd8 	cmpnei	r2,r2,47
  813a70:	1000031e 	bne	r2,zero,813a80 <alt_find_file+0x6c>
    {
      len -= 1;
  813a74:	e0bffe17 	ldw	r2,-8(fp)
  813a78:	10bfffc4 	addi	r2,r2,-1
  813a7c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813a80:	e0bffe17 	ldw	r2,-8(fp)
  813a84:	e0ffff17 	ldw	r3,-4(fp)
  813a88:	1885883a 	add	r2,r3,r2
  813a8c:	10800003 	ldbu	r2,0(r2)
  813a90:	10803fcc 	andi	r2,r2,255
  813a94:	1080201c 	xori	r2,r2,128
  813a98:	10bfe004 	addi	r2,r2,-128
  813a9c:	10800be0 	cmpeqi	r2,r2,47
  813aa0:	1000081e 	bne	r2,zero,813ac4 <alt_find_file+0xb0>
  813aa4:	e0bffe17 	ldw	r2,-8(fp)
  813aa8:	e0ffff17 	ldw	r3,-4(fp)
  813aac:	1885883a 	add	r2,r3,r2
  813ab0:	10800003 	ldbu	r2,0(r2)
  813ab4:	10803fcc 	andi	r2,r2,255
  813ab8:	1080201c 	xori	r2,r2,128
  813abc:	10bfe004 	addi	r2,r2,-128
  813ac0:	10000a1e 	bne	r2,zero,813aec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  813ac4:	e0bffd17 	ldw	r2,-12(fp)
  813ac8:	10800217 	ldw	r2,8(r2)
  813acc:	e0fffe17 	ldw	r3,-8(fp)
  813ad0:	180d883a 	mov	r6,r3
  813ad4:	e17fff17 	ldw	r5,-4(fp)
  813ad8:	1009883a 	mov	r4,r2
  813adc:	0813d380 	call	813d38 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813ae0:	1000021e 	bne	r2,zero,813aec <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  813ae4:	e0bffd17 	ldw	r2,-12(fp)
  813ae8:	00000706 	br	813b08 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  813aec:	e0bffd17 	ldw	r2,-12(fp)
  813af0:	10800017 	ldw	r2,0(r2)
  813af4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813af8:	e0fffd17 	ldw	r3,-12(fp)
  813afc:	d0a00604 	addi	r2,gp,-32744
  813b00:	18bfcc1e 	bne	r3,r2,813a34 <__alt_mem_onchip_mem+0xff793a34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813b04:	0005883a 	mov	r2,zero
}
  813b08:	e037883a 	mov	sp,fp
  813b0c:	dfc00117 	ldw	ra,4(sp)
  813b10:	df000017 	ldw	fp,0(sp)
  813b14:	dec00204 	addi	sp,sp,8
  813b18:	f800283a 	ret

00813b1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813b1c:	defffc04 	addi	sp,sp,-16
  813b20:	df000315 	stw	fp,12(sp)
  813b24:	df000304 	addi	fp,sp,12
  813b28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813b2c:	00bffa04 	movi	r2,-24
  813b30:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813b34:	e03ffd15 	stw	zero,-12(fp)
  813b38:	00001906 	br	813ba0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  813b3c:	00802074 	movhi	r2,129
  813b40:	1093ed04 	addi	r2,r2,20404
  813b44:	e0fffd17 	ldw	r3,-12(fp)
  813b48:	18c00324 	muli	r3,r3,12
  813b4c:	10c5883a 	add	r2,r2,r3
  813b50:	10800017 	ldw	r2,0(r2)
  813b54:	10000f1e 	bne	r2,zero,813b94 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  813b58:	00802074 	movhi	r2,129
  813b5c:	1093ed04 	addi	r2,r2,20404
  813b60:	e0fffd17 	ldw	r3,-12(fp)
  813b64:	18c00324 	muli	r3,r3,12
  813b68:	10c5883a 	add	r2,r2,r3
  813b6c:	e0ffff17 	ldw	r3,-4(fp)
  813b70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  813b74:	d0e00a17 	ldw	r3,-32728(gp)
  813b78:	e0bffd17 	ldw	r2,-12(fp)
  813b7c:	1880020e 	bge	r3,r2,813b88 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  813b80:	e0bffd17 	ldw	r2,-12(fp)
  813b84:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  813b88:	e0bffd17 	ldw	r2,-12(fp)
  813b8c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  813b90:	00000606 	br	813bac <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813b94:	e0bffd17 	ldw	r2,-12(fp)
  813b98:	10800044 	addi	r2,r2,1
  813b9c:	e0bffd15 	stw	r2,-12(fp)
  813ba0:	e0bffd17 	ldw	r2,-12(fp)
  813ba4:	10800810 	cmplti	r2,r2,32
  813ba8:	103fe41e 	bne	r2,zero,813b3c <__alt_mem_onchip_mem+0xff793b3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  813bac:	e0bffe17 	ldw	r2,-8(fp)
}
  813bb0:	e037883a 	mov	sp,fp
  813bb4:	df000017 	ldw	fp,0(sp)
  813bb8:	dec00104 	addi	sp,sp,4
  813bbc:	f800283a 	ret

00813bc0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  813bc0:	defffb04 	addi	sp,sp,-20
  813bc4:	df000415 	stw	fp,16(sp)
  813bc8:	df000404 	addi	fp,sp,16
  813bcc:	e13ffe15 	stw	r4,-8(fp)
  813bd0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  813bd4:	e0bfff17 	ldw	r2,-4(fp)
  813bd8:	10840070 	cmpltui	r2,r2,4097
  813bdc:	1000021e 	bne	r2,zero,813be8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  813be0:	00840004 	movi	r2,4096
  813be4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  813be8:	e0fffe17 	ldw	r3,-8(fp)
  813bec:	e0bfff17 	ldw	r2,-4(fp)
  813bf0:	1885883a 	add	r2,r3,r2
  813bf4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813bf8:	e0bffe17 	ldw	r2,-8(fp)
  813bfc:	e0bffc15 	stw	r2,-16(fp)
  813c00:	00000506 	br	813c18 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  813c04:	e0bffc17 	ldw	r2,-16(fp)
  813c08:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  813c0c:	e0bffc17 	ldw	r2,-16(fp)
  813c10:	10800804 	addi	r2,r2,32
  813c14:	e0bffc15 	stw	r2,-16(fp)
  813c18:	e0fffc17 	ldw	r3,-16(fp)
  813c1c:	e0bffd17 	ldw	r2,-12(fp)
  813c20:	18bff836 	bltu	r3,r2,813c04 <__alt_mem_onchip_mem+0xff793c04>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  813c24:	e0bffe17 	ldw	r2,-8(fp)
  813c28:	108007cc 	andi	r2,r2,31
  813c2c:	10000226 	beq	r2,zero,813c38 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  813c30:	e0bffc17 	ldw	r2,-16(fp)
  813c34:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  813c38:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  813c3c:	0001883a 	nop
  813c40:	e037883a 	mov	sp,fp
  813c44:	df000017 	ldw	fp,0(sp)
  813c48:	dec00104 	addi	sp,sp,4
  813c4c:	f800283a 	ret

00813c50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  813c50:	defffe04 	addi	sp,sp,-8
  813c54:	df000115 	stw	fp,4(sp)
  813c58:	df000104 	addi	fp,sp,4
  813c5c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  813c60:	e0bfff17 	ldw	r2,-4(fp)
  813c64:	10bffe84 	addi	r2,r2,-6
  813c68:	10c00428 	cmpgeui	r3,r2,16
  813c6c:	18001a1e 	bne	r3,zero,813cd8 <alt_exception_cause_generated_bad_addr+0x88>
  813c70:	100690ba 	slli	r3,r2,2
  813c74:	00802074 	movhi	r2,129
  813c78:	108f2204 	addi	r2,r2,15496
  813c7c:	1885883a 	add	r2,r3,r2
  813c80:	10800017 	ldw	r2,0(r2)
  813c84:	1000683a 	jmp	r2
  813c88:	00813cc8 	cmpgei	r2,zero,1267
  813c8c:	00813cc8 	cmpgei	r2,zero,1267
  813c90:	00813cd8 	cmpnei	r2,zero,1267
  813c94:	00813cd8 	cmpnei	r2,zero,1267
  813c98:	00813cd8 	cmpnei	r2,zero,1267
  813c9c:	00813cc8 	cmpgei	r2,zero,1267
  813ca0:	00813cd0 	cmplti	r2,zero,1267
  813ca4:	00813cd8 	cmpnei	r2,zero,1267
  813ca8:	00813cc8 	cmpgei	r2,zero,1267
  813cac:	00813cc8 	cmpgei	r2,zero,1267
  813cb0:	00813cd8 	cmpnei	r2,zero,1267
  813cb4:	00813cc8 	cmpgei	r2,zero,1267
  813cb8:	00813cd0 	cmplti	r2,zero,1267
  813cbc:	00813cd8 	cmpnei	r2,zero,1267
  813cc0:	00813cd8 	cmpnei	r2,zero,1267
  813cc4:	00813cc8 	cmpgei	r2,zero,1267
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  813cc8:	00800044 	movi	r2,1
  813ccc:	00000306 	br	813cdc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  813cd0:	0005883a 	mov	r2,zero
  813cd4:	00000106 	br	813cdc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  813cd8:	0005883a 	mov	r2,zero
  }
}
  813cdc:	e037883a 	mov	sp,fp
  813ce0:	df000017 	ldw	fp,0(sp)
  813ce4:	dec00104 	addi	sp,sp,4
  813ce8:	f800283a 	ret

00813cec <atexit>:
  813cec:	200b883a 	mov	r5,r4
  813cf0:	000f883a 	mov	r7,zero
  813cf4:	000d883a 	mov	r6,zero
  813cf8:	0009883a 	mov	r4,zero
  813cfc:	0813db41 	jmpi	813db4 <__register_exitproc>

00813d00 <exit>:
  813d00:	defffe04 	addi	sp,sp,-8
  813d04:	000b883a 	mov	r5,zero
  813d08:	dc000015 	stw	r16,0(sp)
  813d0c:	dfc00115 	stw	ra,4(sp)
  813d10:	2021883a 	mov	r16,r4
  813d14:	0813ecc0 	call	813ecc <__call_exitprocs>
  813d18:	00802074 	movhi	r2,129
  813d1c:	1098de04 	addi	r2,r2,25464
  813d20:	11000017 	ldw	r4,0(r2)
  813d24:	20800f17 	ldw	r2,60(r4)
  813d28:	10000126 	beq	r2,zero,813d30 <exit+0x30>
  813d2c:	103ee83a 	callr	r2
  813d30:	8009883a 	mov	r4,r16
  813d34:	081404c0 	call	81404c <_exit>

00813d38 <memcmp>:
  813d38:	01c000c4 	movi	r7,3
  813d3c:	3980192e 	bgeu	r7,r6,813da4 <memcmp+0x6c>
  813d40:	2144b03a 	or	r2,r4,r5
  813d44:	11c4703a 	and	r2,r2,r7
  813d48:	10000f26 	beq	r2,zero,813d88 <memcmp+0x50>
  813d4c:	20800003 	ldbu	r2,0(r4)
  813d50:	28c00003 	ldbu	r3,0(r5)
  813d54:	10c0151e 	bne	r2,r3,813dac <memcmp+0x74>
  813d58:	31bfff84 	addi	r6,r6,-2
  813d5c:	01ffffc4 	movi	r7,-1
  813d60:	00000406 	br	813d74 <memcmp+0x3c>
  813d64:	20800003 	ldbu	r2,0(r4)
  813d68:	28c00003 	ldbu	r3,0(r5)
  813d6c:	31bfffc4 	addi	r6,r6,-1
  813d70:	10c00e1e 	bne	r2,r3,813dac <memcmp+0x74>
  813d74:	21000044 	addi	r4,r4,1
  813d78:	29400044 	addi	r5,r5,1
  813d7c:	31fff91e 	bne	r6,r7,813d64 <__alt_mem_onchip_mem+0xff793d64>
  813d80:	0005883a 	mov	r2,zero
  813d84:	f800283a 	ret
  813d88:	20c00017 	ldw	r3,0(r4)
  813d8c:	28800017 	ldw	r2,0(r5)
  813d90:	18bfee1e 	bne	r3,r2,813d4c <__alt_mem_onchip_mem+0xff793d4c>
  813d94:	31bfff04 	addi	r6,r6,-4
  813d98:	21000104 	addi	r4,r4,4
  813d9c:	29400104 	addi	r5,r5,4
  813da0:	39bff936 	bltu	r7,r6,813d88 <__alt_mem_onchip_mem+0xff793d88>
  813da4:	303fe91e 	bne	r6,zero,813d4c <__alt_mem_onchip_mem+0xff793d4c>
  813da8:	003ff506 	br	813d80 <__alt_mem_onchip_mem+0xff793d80>
  813dac:	10c5c83a 	sub	r2,r2,r3
  813db0:	f800283a 	ret

00813db4 <__register_exitproc>:
  813db4:	defffa04 	addi	sp,sp,-24
  813db8:	dc000315 	stw	r16,12(sp)
  813dbc:	04002074 	movhi	r16,129
  813dc0:	8418de04 	addi	r16,r16,25464
  813dc4:	80c00017 	ldw	r3,0(r16)
  813dc8:	dc400415 	stw	r17,16(sp)
  813dcc:	dfc00515 	stw	ra,20(sp)
  813dd0:	18805217 	ldw	r2,328(r3)
  813dd4:	2023883a 	mov	r17,r4
  813dd8:	10003726 	beq	r2,zero,813eb8 <__register_exitproc+0x104>
  813ddc:	10c00117 	ldw	r3,4(r2)
  813de0:	010007c4 	movi	r4,31
  813de4:	20c00e16 	blt	r4,r3,813e20 <__register_exitproc+0x6c>
  813de8:	1a000044 	addi	r8,r3,1
  813dec:	8800221e 	bne	r17,zero,813e78 <__register_exitproc+0xc4>
  813df0:	18c00084 	addi	r3,r3,2
  813df4:	18c7883a 	add	r3,r3,r3
  813df8:	18c7883a 	add	r3,r3,r3
  813dfc:	12000115 	stw	r8,4(r2)
  813e00:	10c7883a 	add	r3,r2,r3
  813e04:	19400015 	stw	r5,0(r3)
  813e08:	0005883a 	mov	r2,zero
  813e0c:	dfc00517 	ldw	ra,20(sp)
  813e10:	dc400417 	ldw	r17,16(sp)
  813e14:	dc000317 	ldw	r16,12(sp)
  813e18:	dec00604 	addi	sp,sp,24
  813e1c:	f800283a 	ret
  813e20:	00800034 	movhi	r2,0
  813e24:	10800004 	addi	r2,r2,0
  813e28:	10002626 	beq	r2,zero,813ec4 <__register_exitproc+0x110>
  813e2c:	01006404 	movi	r4,400
  813e30:	d9400015 	stw	r5,0(sp)
  813e34:	d9800115 	stw	r6,4(sp)
  813e38:	d9c00215 	stw	r7,8(sp)
  813e3c:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  813e40:	d9400017 	ldw	r5,0(sp)
  813e44:	d9800117 	ldw	r6,4(sp)
  813e48:	d9c00217 	ldw	r7,8(sp)
  813e4c:	10001d26 	beq	r2,zero,813ec4 <__register_exitproc+0x110>
  813e50:	81000017 	ldw	r4,0(r16)
  813e54:	10000115 	stw	zero,4(r2)
  813e58:	02000044 	movi	r8,1
  813e5c:	22405217 	ldw	r9,328(r4)
  813e60:	0007883a 	mov	r3,zero
  813e64:	12400015 	stw	r9,0(r2)
  813e68:	20805215 	stw	r2,328(r4)
  813e6c:	10006215 	stw	zero,392(r2)
  813e70:	10006315 	stw	zero,396(r2)
  813e74:	883fde26 	beq	r17,zero,813df0 <__alt_mem_onchip_mem+0xff793df0>
  813e78:	18c9883a 	add	r4,r3,r3
  813e7c:	2109883a 	add	r4,r4,r4
  813e80:	1109883a 	add	r4,r2,r4
  813e84:	21802215 	stw	r6,136(r4)
  813e88:	01800044 	movi	r6,1
  813e8c:	12406217 	ldw	r9,392(r2)
  813e90:	30cc983a 	sll	r6,r6,r3
  813e94:	4992b03a 	or	r9,r9,r6
  813e98:	12406215 	stw	r9,392(r2)
  813e9c:	21c04215 	stw	r7,264(r4)
  813ea0:	01000084 	movi	r4,2
  813ea4:	893fd21e 	bne	r17,r4,813df0 <__alt_mem_onchip_mem+0xff793df0>
  813ea8:	11006317 	ldw	r4,396(r2)
  813eac:	218cb03a 	or	r6,r4,r6
  813eb0:	11806315 	stw	r6,396(r2)
  813eb4:	003fce06 	br	813df0 <__alt_mem_onchip_mem+0xff793df0>
  813eb8:	18805304 	addi	r2,r3,332
  813ebc:	18805215 	stw	r2,328(r3)
  813ec0:	003fc606 	br	813ddc <__alt_mem_onchip_mem+0xff793ddc>
  813ec4:	00bfffc4 	movi	r2,-1
  813ec8:	003fd006 	br	813e0c <__alt_mem_onchip_mem+0xff793e0c>

00813ecc <__call_exitprocs>:
  813ecc:	defff504 	addi	sp,sp,-44
  813ed0:	df000915 	stw	fp,36(sp)
  813ed4:	dd400615 	stw	r21,24(sp)
  813ed8:	dc800315 	stw	r18,12(sp)
  813edc:	dfc00a15 	stw	ra,40(sp)
  813ee0:	ddc00815 	stw	r23,32(sp)
  813ee4:	dd800715 	stw	r22,28(sp)
  813ee8:	dd000515 	stw	r20,20(sp)
  813eec:	dcc00415 	stw	r19,16(sp)
  813ef0:	dc400215 	stw	r17,8(sp)
  813ef4:	dc000115 	stw	r16,4(sp)
  813ef8:	d9000015 	stw	r4,0(sp)
  813efc:	2839883a 	mov	fp,r5
  813f00:	04800044 	movi	r18,1
  813f04:	057fffc4 	movi	r21,-1
  813f08:	00802074 	movhi	r2,129
  813f0c:	1098de04 	addi	r2,r2,25464
  813f10:	12000017 	ldw	r8,0(r2)
  813f14:	45005217 	ldw	r20,328(r8)
  813f18:	44c05204 	addi	r19,r8,328
  813f1c:	a0001c26 	beq	r20,zero,813f90 <__call_exitprocs+0xc4>
  813f20:	a0800117 	ldw	r2,4(r20)
  813f24:	15ffffc4 	addi	r23,r2,-1
  813f28:	b8000d16 	blt	r23,zero,813f60 <__call_exitprocs+0x94>
  813f2c:	14000044 	addi	r16,r2,1
  813f30:	8421883a 	add	r16,r16,r16
  813f34:	8421883a 	add	r16,r16,r16
  813f38:	84402004 	addi	r17,r16,128
  813f3c:	a463883a 	add	r17,r20,r17
  813f40:	a421883a 	add	r16,r20,r16
  813f44:	e0001e26 	beq	fp,zero,813fc0 <__call_exitprocs+0xf4>
  813f48:	80804017 	ldw	r2,256(r16)
  813f4c:	e0801c26 	beq	fp,r2,813fc0 <__call_exitprocs+0xf4>
  813f50:	bdffffc4 	addi	r23,r23,-1
  813f54:	843fff04 	addi	r16,r16,-4
  813f58:	8c7fff04 	addi	r17,r17,-4
  813f5c:	bd7ff91e 	bne	r23,r21,813f44 <__alt_mem_onchip_mem+0xff793f44>
  813f60:	00800034 	movhi	r2,0
  813f64:	10800004 	addi	r2,r2,0
  813f68:	10000926 	beq	r2,zero,813f90 <__call_exitprocs+0xc4>
  813f6c:	a0800117 	ldw	r2,4(r20)
  813f70:	1000301e 	bne	r2,zero,814034 <__call_exitprocs+0x168>
  813f74:	a0800017 	ldw	r2,0(r20)
  813f78:	10003226 	beq	r2,zero,814044 <__call_exitprocs+0x178>
  813f7c:	a009883a 	mov	r4,r20
  813f80:	98800015 	stw	r2,0(r19)
  813f84:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  813f88:	9d000017 	ldw	r20,0(r19)
  813f8c:	a03fe41e 	bne	r20,zero,813f20 <__alt_mem_onchip_mem+0xff793f20>
  813f90:	dfc00a17 	ldw	ra,40(sp)
  813f94:	df000917 	ldw	fp,36(sp)
  813f98:	ddc00817 	ldw	r23,32(sp)
  813f9c:	dd800717 	ldw	r22,28(sp)
  813fa0:	dd400617 	ldw	r21,24(sp)
  813fa4:	dd000517 	ldw	r20,20(sp)
  813fa8:	dcc00417 	ldw	r19,16(sp)
  813fac:	dc800317 	ldw	r18,12(sp)
  813fb0:	dc400217 	ldw	r17,8(sp)
  813fb4:	dc000117 	ldw	r16,4(sp)
  813fb8:	dec00b04 	addi	sp,sp,44
  813fbc:	f800283a 	ret
  813fc0:	a0800117 	ldw	r2,4(r20)
  813fc4:	80c00017 	ldw	r3,0(r16)
  813fc8:	10bfffc4 	addi	r2,r2,-1
  813fcc:	15c01426 	beq	r2,r23,814020 <__call_exitprocs+0x154>
  813fd0:	80000015 	stw	zero,0(r16)
  813fd4:	183fde26 	beq	r3,zero,813f50 <__alt_mem_onchip_mem+0xff793f50>
  813fd8:	95c8983a 	sll	r4,r18,r23
  813fdc:	a0806217 	ldw	r2,392(r20)
  813fe0:	a5800117 	ldw	r22,4(r20)
  813fe4:	2084703a 	and	r2,r4,r2
  813fe8:	10000b26 	beq	r2,zero,814018 <__call_exitprocs+0x14c>
  813fec:	a0806317 	ldw	r2,396(r20)
  813ff0:	2088703a 	and	r4,r4,r2
  813ff4:	20000c1e 	bne	r4,zero,814028 <__call_exitprocs+0x15c>
  813ff8:	89400017 	ldw	r5,0(r17)
  813ffc:	d9000017 	ldw	r4,0(sp)
  814000:	183ee83a 	callr	r3
  814004:	a0800117 	ldw	r2,4(r20)
  814008:	15bfbf1e 	bne	r2,r22,813f08 <__alt_mem_onchip_mem+0xff793f08>
  81400c:	98800017 	ldw	r2,0(r19)
  814010:	153fcf26 	beq	r2,r20,813f50 <__alt_mem_onchip_mem+0xff793f50>
  814014:	003fbc06 	br	813f08 <__alt_mem_onchip_mem+0xff793f08>
  814018:	183ee83a 	callr	r3
  81401c:	003ff906 	br	814004 <__alt_mem_onchip_mem+0xff794004>
  814020:	a5c00115 	stw	r23,4(r20)
  814024:	003feb06 	br	813fd4 <__alt_mem_onchip_mem+0xff793fd4>
  814028:	89000017 	ldw	r4,0(r17)
  81402c:	183ee83a 	callr	r3
  814030:	003ff406 	br	814004 <__alt_mem_onchip_mem+0xff794004>
  814034:	a0800017 	ldw	r2,0(r20)
  814038:	a027883a 	mov	r19,r20
  81403c:	1029883a 	mov	r20,r2
  814040:	003fb606 	br	813f1c <__alt_mem_onchip_mem+0xff793f1c>
  814044:	0005883a 	mov	r2,zero
  814048:	003ffb06 	br	814038 <__alt_mem_onchip_mem+0xff794038>

0081404c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  81404c:	defffd04 	addi	sp,sp,-12
  814050:	df000215 	stw	fp,8(sp)
  814054:	df000204 	addi	fp,sp,8
  814058:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  81405c:	0001883a 	nop
  814060:	e0bfff17 	ldw	r2,-4(fp)
  814064:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  814068:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81406c:	10000226 	beq	r2,zero,814078 <_exit+0x2c>
    ALT_SIM_FAIL();
  814070:	002af070 	cmpltui	zero,zero,43969
  814074:	00000106 	br	81407c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  814078:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81407c:	003fff06 	br	81407c <__alt_mem_onchip_mem+0xff79407c>
