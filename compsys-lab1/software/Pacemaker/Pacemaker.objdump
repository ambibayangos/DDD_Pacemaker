
Pacemaker.elf:     file format elf32-littlenios2
Pacemaker.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x0001541c memsz 0x0001541c flags r-x
    LOAD off    0x0001643c vaddr 0x0081543c paddr 0x0081712c align 2**12
         filesz 0x00001cf0 memsz 0x00001cf0 flags rw-
    LOAD off    0x00018e1c vaddr 0x00818e1c paddr 0x00818e1c align 2**12
         filesz 0x00000000 memsz 0x00000318 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00014b30  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006c8  00814d74  00814d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001cf0  0081543c  0081712c  0001643c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000318  00818e1c  00818e1c  00018e1c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00819134  00819134  0001812c  2**0
                  CONTENTS
  7 .onchip_mem   00000000  01080000  01080000  0001812c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001812c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001118  00000000  00000000  00018150  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002be2f  00000000  00000000  00019268  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000adb0  00000000  00000000  00045097  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e67f  00000000  00000000  0004fe47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027c4  00000000  00000000  0005e4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004701  00000000  00000000  00060c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000184ac  00000000  00000000  0006538d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0007d83c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000019d0  00000000  00000000  0007d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008465a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  0008465d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00084660  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00084661  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00084662  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00084666  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008466a  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008466e  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  00084677  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  00084680  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00084689  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  00084695  2**0
                  CONTENTS, READONLY
 30 .jdi          00004152  00000000  00000000  000846c1  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006b318  00000000  00000000  00088813  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00814d74 l    d  .rodata	00000000 .rodata
0081543c l    d  .rwdata	00000000 .rwdata
00818e1c l    d  .bss	00000000 .bss
00819134 l    d  .sdram	00000000 .sdram
01080000 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Pacemaker_bsp//obj/HAL/src/crt0.o
0080028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 pacemaker.c
00000000 l    df *ABS*	00000000 pacemaker_fsm.c
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
00815454 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
00804ba0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00814ef6 l     O .rodata	00000010 zeroes.4404
008071cc l     F .text	000000bc __sbprintf
00814f06 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
00807490 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00808fc0 l     F .text	00000008 __fp_unlock
00808fd4 l     F .text	0000019c __sinit.part.1
00809170 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00815ca0 l     O .rwdata	00000020 lc_ctype_charset
00815c80 l     O .rwdata	00000020 lc_message_charset
00815cc0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00814f34 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080baac l     F .text	000000fc __sprint_r.part.0
00815068 l     O .rodata	00000010 blanks.4348
00815058 l     O .rodata	00000010 zeroes.4349
0080d038 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00810ad0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00810bdc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00810c08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00810e74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00810f54 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00811040 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
00811214 l     F .text	0000003c alt_get_errno
00811250 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
00811468 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00817118 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00811858 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081198c l     F .text	00000034 alt_dev_reg
00815ea0 l     O .rwdata	00001060 jtag_uart
00816f00 l     O .rwdata	00000120 lcd
00817020 l     O .rwdata	000000c4 uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00811cb8 l     F .text	0000020c altera_avalon_jtag_uart_irq
00811ec4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00817124 l     O .rwdata	00000004 colstart
008124fc l     F .text	000000b8 lcd_write_command
008125b4 l     F .text	000000d8 lcd_write_data
0081268c l     F .text	000000d0 lcd_clear_screen
0081275c l     F .text	000001ec lcd_repaint_screen
00812948 l     F .text	000000cc lcd_scroll_up
00812a14 l     F .text	000002ac lcd_handle_escape
00813198 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
008133d8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
00813688 l     F .text	0000009c altera_avalon_uart_irq
00813724 l     F .text	000000e4 altera_avalon_uart_rxirq
00813808 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
008139a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00813bbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00813f18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
008145c8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
008152bb l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00818fa8 g     O .bss	00000004 alt_instruction_exception_handler
008003d8 g     F .text	0000006c timeout_checker
00818e38 g     O .bss	00000001 g83
00818e39 g     O .bss	00000001 g40
0080b220 g     F .text	00000074 _mprec_log10
0080b30c g     F .text	0000008c __any_on
00809e84 g     F .text	00000054 _isatty_r
00814f40 g     O .rodata	00000028 __mprec_tinytens
00818e3a g     O .bss	00000001 g91
00811150 g     F .text	0000007c alt_main
00818e3b g     O .bss	00000001 PRE_g112
00804acc g     F .text	000000c0 _puts_r
00819034 g     O .bss	00000100 alt_irq
00809fb4 g     F .text	00000060 _lseek_r
00818e3c g     O .bss	00000001 g139
00818e3d g     O .bss	00000001 g4
0081712c g       *ABS*	00000000 __flash_rwdata_start
00818e3e g     O .bss	00000001 g108
00818e3f g     O .bss	00000001 g19
00818e40 g     O .bss	00000001 g152
00818e41 g     O .bss	00000001 g111
00809360 g     F .text	000000ac __sflags
0080f5fc g     F .text	00000088 .hidden __eqdf2
00818e42 g     O .bss	00000001 PRE_g38
00818e43 g     O .bss	00000001 PRE_g122
00818e44 g     O .bss	00000001 g148_fix0
00819134 g       *ABS*	00000000 __alt_heap_start
00818e28 g     O .bss	00000004 asense_flag_mode_2
00804a90 g     F .text	0000003c printf
00818e45 g     O .bss	00000001 PRE_g134
0080d61c g     F .text	0000009c _wcrtomb_r
00804ebc g     F .text	0000005c __sseek
00809310 g     F .text	00000010 __sinit
0080d4c4 g     F .text	00000140 __swbuf_r
00818e46 g     O .bss	00000001 g55
00818e47 g     O .bss	00000001 g117_e8
00818e48 g     O .bss	00000001 _cg59
00818e49 g     O .bss	00000001 g27
00818e30 g     O .bss	00000004 lcd
00809ed8 g     F .text	0000007c _setlocale_r
00809178 g     F .text	00000068 __sfmoreglue
008111f0 g     F .text	00000024 __malloc_unlock
00818e4a g     O .bss	00000001 g113b
00818e4b g     O .bss	00000001 g152_e2
00818e4c g     O .bss	00000001 g153
00818e4d g     O .bss	00000001 g112
00818e4e g     O .bss	00000001 g3
00818e4f g     O .bss	00000001 AEI_ex
0080a240 g     F .text	0000015c memmove
00818e50 g     O .bss	00000001 g146
00818e51 g     O .bss	00000001 g103
00818e52 g     O .bss	00000001 PRE_g27
00818e53 g     O .bss	00000001 g47
00818e54 g     O .bss	00000001 g85
00818e55 g     O .bss	00000001 g42
008092f8 g     F .text	00000018 _cleanup
00818e56 g     O .bss	00000001 PRE_g114
0080a39c g     F .text	000000a8 _Balloc
00818e57 g     O .bss	00000001 g9
00818e58 g     O .bss	00000001 g127
00818e5c g     O .bss	00000004 _PRE_GO
00818e60 g     O .bss	00000001 PRE_g142
00818e61 g     O .bss	00000001 PRE_g3
00818e62 g     O .bss	00000001 g145
00818e63 g     O .bss	00000001 g102
00818e64 g     O .bss	00000001 g140
0080f684 g     F .text	000000dc .hidden __gtdf2
00814738 g     F .text	00000024 altera_nios2_gen2_irq_init
00818e65 g     O .bss	00000001 _cg128
00818e66 g     O .bss	00000001 g115
00800000 g     F .entry	0000001c __reset
00818e67 g     O .bss	00000001 _cg15
0080047c g     F .text	000000b0 transmit_string
00818e68 g     O .bss	00000001 _cg123
00800290 g     F .text	00000094 get_heart_signals
00800020 g       *ABS*	00000000 __flash_exceptions_start
00803db4 g     F .text	0000005c _fstat_r
00818f74 g     O .bss	00000004 errno
00818e69 g     O .bss	00000001 _cg73
00818e6a g     O .bss	00000001 g87
00818e6b g     O .bss	00000001 g44
00804e38 g     F .text	00000008 __seofread
00818e6c g     O .bss	00000001 g150
00818e6d g     O .bss	00000001 _cg79
00818e6e g     O .bss	00000001 g123
00818f98 g     O .bss	00000004 alt_argv
0081f0e4 g       *ABS*	00000000 _gp
00814708 g     F .text	00000030 usleep
00818e6f g     O .bss	00000001 _cg45
00800ad0 g     F .text	000000b0 reset
00818e70 g     O .bss	00000001 PRE_g65
00818e71 g     O .bss	00000001 g92
00818e72 g     O .bss	00000001 Vpace
00818e73 g     O .bss	00000001 g1
00818e74 g     O .bss	00000001 g61
00815d20 g     O .rwdata	00000180 alt_fd_list
00818e75 g     O .bss	00000001 g135
00818e76 g     O .bss	00000001 g71
00818e77 g     O .bss	00000001 g131b
008140b8 g     F .text	00000090 alt_find_dev
0080a0f8 g     F .text	00000148 memcpy
00818e78 g     O .bss	00000001 g126
00808fc8 g     F .text	0000000c _cleanup_r
008108e8 g     F .text	000000dc .hidden __floatsidf
00818e79 g     O .bss	00000001 g82
0081468c g     F .text	0000007c alt_io_redirect
0080f760 g     F .text	000000f4 .hidden __ltdf2
00814d74 g       *ABS*	00000000 __DTOR_END__
00818e7a g     O .bss	00000001 _cg98
00800444 g     F .text	00000038 test_and_set
00818e7b g     O .bss	00000001 g12
00804b8c g     F .text	00000014 puts
00814944 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00818e7c g     O .bss	00000001 g97
00818e7d g     O .bss	00000001 g52
00818e7e g     O .bss	00000001 g140_e11
00818e7f g     O .bss	00000001 g148_e1_fix
0080b95c g     F .text	00000074 __fpclassifyd
0080b17c g     F .text	000000a4 __ratio
0080d01c g     F .text	0000001c __vfiprintf_internal
00818e80 g     O .bss	00000001 _cg85
008120bc g     F .text	0000021c altera_avalon_jtag_uart_read
00804a60 g     F .text	00000030 _printf_r
0080e3ac g     F .text	00000064 .hidden __udivsi3
00810eb0 g     F .text	000000a4 isatty
00818e81 g     O .bss	00000001 g17
00818e82 g     O .bss	00000001 g132_e10
00814f90 g     O .rodata	000000c8 __mprec_tens
00809f54 g     F .text	0000000c __locale_charset
00818e83 g     O .bss	00000001 g76
00818e84 g     O .bss	00000001 g31
008148b4 g     F .text	00000090 alt_icache_flush
00818e85 g     O .bss	00000001 g37
00818f80 g     O .bss	00000004 __malloc_top_pad
008170f4 g     O .rwdata	00000004 __mb_cur_max
00818e86 g     O .bss	00000001 g50_e3
00809f84 g     F .text	0000000c _localeconv_r
00818e87 g     O .bss	00000001 g62
0080a7a8 g     F .text	0000003c __i2b
00809840 g     F .text	000004bc __sfvwrite_r
00818e88 g     O .bss	00000001 reset_LRI
00804d90 g     F .text	00000054 _sbrk_r
00818e89 g     O .bss	00000001 g84
00818e8a g     O .bss	00000001 g41
00818e8b g     O .bss	00000001 _cg26
00818e8c g     O .bss	00000001 g118
00818e8d g     O .bss	00000001 PRE_g40
00818e8e g     O .bss	00000001 start_VRP
0080b398 g     F .text	00000060 _read_r
0081710c g     O .rwdata	00000004 alt_max_fd
00818e8f g     O .bss	00000001 PRE_g8
0080d1b8 g     F .text	000000f0 _fclose_r
00808f90 g     F .text	00000030 fflush
00818f7c g     O .bss	00000004 __malloc_max_sbrked_mem
00818fec g     O .bss	00000018 timer_expired_flags
00818e90 g     O .bss	00000001 g18
00810cf4 g     F .text	00000180 alt_irq_register
00818e91 g     O .bss	00000001 PRE_g81
00818e92 g     O .bss	00000001 g148_fix2
0080e468 g     F .text	000008ac .hidden __adddf3
00818e93 g     O .bss	00000001 PRE_g104
00818e94 g     O .bss	00000001 _cg101
00818e95 g     O .bss	00000001 g132
0080af24 g     F .text	0000010c __b2d
00818e96 g     O .bss	00000001 PVARP_counting
0080dd7c g     F .text	00000538 .hidden __umoddi3
0081107c g     F .text	000000d4 lseek
008170e4 g     O .rwdata	00000004 _global_impure_ptr
00818e97 g     O .bss	00000001 g48
00818e98 g     O .bss	00000001 PRE_g78
00818e99 g     O .bss	00000001 PRE_g35
0080b3f8 g     F .text	00000564 _realloc_r
00819134 g       *ABS*	00000000 __bss_end
008144d8 g     F .text	000000f0 alt_iic_isr_register
00818e9a g     O .bss	00000001 VR
00811750 g     F .text	00000108 alt_tick
00818e9b g     O .bss	00000001 _cg95
0080d804 g     F .text	00000578 .hidden __udivdi3
00818e9c g     O .bss	00000001 g33_e2
0080d420 g     F .text	00000024 _fputwc_r
00814f68 g     O .rodata	00000028 __mprec_bigtens
0080a58c g     F .text	00000104 __s2b
008109c4 g     F .text	000000a8 .hidden __floatunsidf
00818e9d g     O .bss	00000001 g38
00818e9e g     O .bss	00000001 g148
00818e9f g     O .bss	00000001 g105
0080ac64 g     F .text	00000060 __mcmp
008135dc g     F .text	000000ac altera_avalon_uart_init
00818ea0 g     O .bss	00000001 _cg97
00818ea1 g     O .bss	00000001 URI_counting
00809330 g     F .text	00000018 __fp_lock_all
0081448c g     F .text	0000004c alt_ic_irq_enabled
008116b4 g     F .text	0000009c alt_alarm_stop
00818ea2 g     O .bss	00000001 PRE_g144
00818f90 g     O .bss	00000004 alt_irq_active
00803954 g     F .text	00000444 _fseeko_r
00818ea3 g     O .bss	00000001 g117
01080000 g       *ABS*	00000000 __alt_mem_onchip_mem
008000fc g     F .exceptions	000000d4 alt_irq_handler
00815cf8 g     O .rwdata	00000028 alt_dev_null
00818ea4 g     O .bss	00000001 LRI_counting
00818ea5 g     O .bss	00000001 g85b
00818ea6 g     O .bss	00000001 _cg82
00818ea7 g     O .bss	00000001 _cg43
00818ea8 g     O .bss	00000001 start_AVI
00818ea9 g     O .bss	00000001 stop_AVI
00813ed0 g     F .text	00000048 alt_dcache_flush_all
0080a690 g     F .text	00000068 __hi0bits
00818eaa g     O .bss	00000001 _cg63
00818eab g     O .bss	00000001 _cg28
00810868 g     F .text	00000080 .hidden __fixdfsi
00818eac g     O .bss	00000001 g64
00818ead g     O .bss	00000001 g21
00818eae g     O .bss	00000001 g74b
00818eaf g     O .bss	00000001 _cg14
00818eb0 g     O .bss	00000001 PRE_g55
00818eb1 g     O .bss	00000001 PRE_g12
00818eb2 g     O .bss	00000001 _cg68
00818eb3 g     O .bss	00000001 g79
00818eb4 g     O .bss	00000001 g34
0081712c g       *ABS*	00000000 __ram_rwdata_end
00818eb5 g     O .bss	00000001 g5
00817104 g     O .rwdata	00000008 alt_dev_list
00818eb6 g     O .bss	00000001 g94
00818eb7 g     O .bss	00000001 g151
00818eb8 g     O .bss	00000001 g110
00818eb9 g     O .bss	00000001 g49
00811894 g     F .text	000000f8 write
00818eba g     O .bss	00000001 g2
00818ebb g     O .bss	00000001 g7
00818ebc g     O .bss	00000001 _cg90
00818ebd g     O .bss	00000001 _cg53
0081543c g       *ABS*	00000000 __ram_rodata_end
00810c44 g     F .text	000000b0 fstat
0080f760 g     F .text	000000f4 .hidden __ledf2
00818ebe g     O .bss	00000001 g60_e4
00818ebf g     O .bss	00000001 LRI_ex
00818ec0 g     O .bss	00000001 g80
00818ec1 g     O .bss	00000001 PRE_g25
0080a9dc g     F .text	00000140 __pow5mult
0080bbc0 g     F .text	0000145c ___vfiprintf_internal_r
00818f8c g     O .bss	00000004 __nlocale_changed
0080e410 g     F .text	00000058 .hidden __umodsi3
00818ec2 g     O .bss	00000001 g128
00818ec3 g     O .bss	00000001 g136
00819134 g       *ABS*	00000000 end
00818ec4 g     O .bss	00000001 stop_AEI
00818ec5 g     O .bss	00000001 g143
00818ec6 g     O .bss	00000001 g100
00812cc0 g     F .text	000004d8 altera_avalon_lcd_16207_write
00818ec7 g     O .bss	00000001 g120b
00803d98 g     F .text	0000001c fseeko
00818ec8 g     O .bss	00000001 Vsense
00818ec9 g     O .bss	00000001 g59
00818eca g     O .bss	00000001 g99
00818ecb g     O .bss	00000001 g54
00813bf8 g     F .text	000001ac altera_avalon_uart_write
00803938 g     F .text	0000001c fseek
00818ecc g     O .bss	00000001 g66
00818ecd g     O .bss	00000001 g23
00811bf8 g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00818ece g     O .bss	00000001 _cg83
00818ecf g     O .bss	00000001 _cg44
00814d74 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00818ed0 g     O .bss	00000001 _cg87
00818ed1 g     O .bss	00000001 g148_e1_fix_fix
00813450 g     F .text	0000007c alt_avalon_timer_sc_init
0081352c g     F .text	00000060 altera_avalon_uart_write_fd
00810a6c g     F .text	00000064 .hidden __clzsi2
0081358c g     F .text	00000050 altera_avalon_uart_close_fd
008122d8 g     F .text	00000224 altera_avalon_jtag_uart_write
00809320 g     F .text	00000004 __sfp_lock_acquire
0080a014 g     F .text	000000e4 memchr
00818ed2 g     O .bss	00000001 g14
00804fb8 g     F .text	000021f8 ___vfprintf_internal_r
00818ed3 g     O .bss	00000001 PRE_g84
00809530 g     F .text	00000310 _free_r
00818ed4 g     O .bss	00000001 AEI_counting
00809f60 g     F .text	00000010 __locale_mb_cur_max
00818ed5 g     O .bss	00000001 _cg6
00814bc0 g     F .text	00000180 __call_exitprocs
00818ed6 g     O .bss	00000001 Apace
00818ed7 g     O .bss	00000001 AVI_ex
00818ed8 g     O .bss	00000001 g144
00818ed9 g     O .bss	00000001 g101
00818eda g     O .bss	00000001 VRP_ex
00818f88 g     O .bss	00000004 __mlocale_changed
008170ec g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	0000004c _start
00818edb g     O .bss	00000001 _cg145
00818edc g     O .bss	00000001 g114
00818fa0 g     O .bss	00000004 _alt_tick_rate
00818edd g     O .bss	00000001 g56
00818ede g     O .bss	00000001 PRE_g52
00818edf g     O .bss	00000001 g129
00818ee0 g     O .bss	00000001 g131
0080ab1c g     F .text	00000148 __lshift
00818fa4 g     O .bss	00000004 _alt_nticks
008114a4 g     F .text	000000fc read
008119f8 g     F .text	0000009c alt_sys_init
00818ee1 g     O .bss	00000001 g78
00818ee2 g     O .bss	00000001 g33
00804a00 g     F .text	00000060 _open_r
00814aa8 g     F .text	00000118 __register_exitproc
00818ee3 g     O .bss	00000001 PRE_g119
00818ee4 g     O .bss	00000001 g122
0081543c g     O .rwdata	00000018 timer_timeout_values
00818ee5 g     O .bss	00000001 URI_ex
0080a7e4 g     F .text	000001f8 __multiply
00811f64 g     F .text	00000068 altera_avalon_jtag_uart_close
00818ee6 g     O .bss	00000001 PRE_g67
00818ee7 g     O .bss	00000001 PRE_g22
0081543c g       *ABS*	00000000 __ram_rwdata_start
00814d74 g       *ABS*	00000000 __ram_rodata_start
00818fc4 g     O .bss	00000028 __malloc_current_mallinfo
0080b030 g     F .text	0000014c __d2b
00818ee8 g     O .bss	00000001 VRP_counting
00818ee9 g     O .bss	00000001 stop_URI
00818eea g     O .bss	00000001 g134
00818eeb g     O .bss	00000001 _cg136
00811a94 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00818eec g     O .bss	00000001 g35
00814250 g     F .text	000000a4 alt_get_fd
00818eed g     O .bss	00000001 _cg71
0081475c g     F .text	00000158 alt_busy_sleep
00818eee g     O .bss	00000001 g15
0080743c g     F .text	00000054 _close_r
00818eef g     O .bss	00000001 g90
00818ef0 g     O .bss	00000001 _GO
00814a2c g     F .text	0000007c memcmp
00811b54 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00819134 g       *ABS*	00000000 __alt_stack_base
00811ba4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00803e10 g     F .text	000000cc _fwrite_r
00818ef1 g     O .bss	00000001 start_PVARP
008072e8 g     F .text	00000154 __swsetup_r
00818ef2 g     O .bss	00000001 g76_e5
00800b80 g     F .text	00002ca8 tick
0080ed14 g     F .text	000008e8 .hidden __divdf3
008091e0 g     F .text	00000118 __sfp
00818ef3 g     O .bss	00000001 g63
00818ef4 g     O .bss	00000001 g20
00818ef5 g     O .bss	00000001 URI_waiting
0080b294 g     F .text	00000078 __copybits
00818ef6 g     O .bss	00000001 g60
00818ef7 g     O .bss	00000001 PRE_g107
00818ef8 g     O .bss	00000001 _cg121
00815878 g     O .rwdata	00000408 __malloc_av_
0080932c g     F .text	00000004 __sinit_lock_release
00818ef9 g     O .bss	00000001 _cg10
0080f854 g     F .text	00000718 .hidden __muldf3
00804de4 g     F .text	00000054 __sread
00818efa g     O .bss	00000001 g23b
00814148 g     F .text	00000108 alt_find_file
00818efb g     O .bss	00000001 g93
00813f54 g     F .text	000000a4 alt_dev_llist_insert
008111cc g     F .text	00000024 __malloc_lock
00811604 g     F .text	000000b0 sbrk
00818efc g     O .bss	00000001 g119
00808f34 g     F .text	0000005c _fflush_r
0080d0f4 g     F .text	000000c4 _calloc_r
0080391c g     F .text	00000018 fopen
00818e1c g       *ABS*	00000000 __bss_start
00818efd g     O .bss	00000001 g86
00818efe g     O .bss	00000001 g43
008048d8 g     F .text	00000128 memset
0080052c g     F .text	000005a4 main
00818eff g     O .bss	00000001 g148_fix1
00818f9c g     O .bss	00000004 alt_envp
00818f78 g     O .bss	00000004 __malloc_max_total_mem
00811af4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080d604 g     F .text	00000018 __swbuf
00818f00 g     O .bss	00000001 PRE_g62
00818f01 g     O .bss	00000001 g36
00813244 g     F .text	00000134 altera_avalon_lcd_16207_init
00818f02 g     O .bss	00000001 g89
00818f03 g     O .bss	00000001 g46
00804f18 g     F .text	00000008 __sclose
00818f04 g     O .bss	00000001 g125_e9
01000000 g       *ABS*	00000000 __alt_heap_limit
0080d2a8 g     F .text	00000014 fclose
00818f05 g     O .bss	00000001 _cg106
00807690 g     F .text	00001688 _dtoa_r
008040cc g     F .text	0000080c _malloc_r
0080d778 g     F .text	00000030 __ascii_wctomb
00818f06 g     O .bss	00000001 start_AEI
00817110 g     O .rwdata	00000004 alt_errno
00809cfc g     F .text	000000c4 _fwalk
00818f07 g     O .bss	00000001 PRE_g137
00818f08 g     O .bss	00000001 g95
00818f09 g     O .bss	00000001 g50
00818f0a g     O .bss	00000001 g147_e12
00818f0b g     O .bss	00000001 g96
00818f0c g     O .bss	00000001 g51
0080e2b4 g     F .text	00000084 .hidden __divsi3
0080940c g     F .text	00000124 _malloc_trim_r
00818f0d g     O .bss	00000001 start_LRI
00814d74 g       *ABS*	00000000 __CTOR_END__
00818f0e g     O .bss	00000001 g138
0080b9d0 g     F .text	000000dc strcmp
00818f0f g     O .bss	00000001 _cg115
00818f10 g     O .bss	00000001 g107
00814d74 g       *ABS*	00000000 __flash_rodata_start
00818f11 g     O .bss	00000001 g113
00814d74 g       *ABS*	00000000 __DTOR_LIST__
0080f5fc g     F .text	00000088 .hidden __nedf2
00818f12 g     O .bss	00000001 _cg41
008119c0 g     F .text	00000038 alt_irq_init
008115a0 g     F .text	00000064 alt_release_fd
00818f13 g     O .bss	00000001 g147
00818f14 g     O .bss	00000001 g104
00818f15 g     O .bss	00000001 PRE_g130
00818f16 g     O .bss	00000001 g13
00815078 g     O .rodata	00000100 .hidden __clz_tab
00818f84 g     O .bss	00000004 _PathLocale
00818f17 g     O .bss	00000001 g98
00818f18 g     O .bss	00000001 g53
00818f19 g     O .bss	00000001 g8
00818f1a g     O .bss	00000001 g57
00818f1b g     O .bss	00000001 PRE_g89
008149e0 g     F .text	00000014 atexit
00807288 g     F .text	00000060 _write_r
00818e2c g     O .bss	00000004 occupied
00818f1c g     O .bss	00000001 start_URI
00818f1d g     O .bss	00000001 g70
00818f1e g     O .bss	00000001 AR
00818f1f g     O .bss	00000001 _cg66
00818f20 g     O .bss	00000001 _cg47
00809f90 g     F .text	00000018 setlocale
00800324 g     F .text	000000b4 get_uart_contents
00818f21 g     O .bss	00000001 g141
00818f22 g     O .bss	00000001 g116
008170e8 g     O .rwdata	00000004 _impure_ptr
00818f94 g     O .bss	00000004 alt_argc
00818f23 g     O .bss	00000001 g6
00808d18 g     F .text	0000021c __sflush_r
00818f24 g     O .bss	00000001 _cg56
00818f25 g     O .bss	00000001 _cg19
00818e20 g     O .bss	00000004 asense_flag
00814058 g     F .text	00000060 _do_dtors
00809f7c g     F .text	00000008 __locale_cjk_lang
00818f26 g     O .bss	00000001 g72
00803934 g     F .text	00000004 _fseek_r
00818f27 g     O .bss	00000001 g81
00804bbc g     F .text	000001d4 __srefill_r
00818f28 g     O .bss	00000001 PVARP_ex
00800020 g       .exceptions	00000000 alt_irq_entry
0080aec0 g     F .text	00000064 __ulp
00809348 g     F .text	00000018 __fp_unlock_all
00819004 g     O .bss	00000018 timer_state_flags
00818f29 g     O .bss	00000001 g124
00818f2a g     O .bss	00000001 _cg108
00813378 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00818f2b g     O .bss	00000001 PRE_g150
00818f2c g     O .bss	00000001 _cg13
00818f2d g     O .bss	00000001 _cg9
008170fc g     O .rwdata	00000008 alt_fs_list
00818f2e g     O .bss	00000001 g137
00818f2f g     O .bss	00000001 Asense
00818f30 g     O .bss	00000001 _cg129
00818e24 g     O .bss	00000004 vsense_flag_mode_2
00818f31 g     O .bss	00000001 g0
00818e1c g     O .bss	00000004 vsense_flag
00818f32 g     O .bss	00000001 g128b
00818f33 g     O .bss	00000001 _cg91
00818f34 g     O .bss	00000001 _cg17
00818f35 g     O .bss	00000001 g75
00818f36 g     O .bss	00000001 g30
00800020 g       *ABS*	00000000 __ram_exceptions_start
00809fa8 g     F .text	0000000c localeconv
00818f37 g     O .bss	00000001 stop_PVARP
00818f38 g     O .bss	00000001 _cg30
00818f39 g     O .bss	00000001 g16
00818f3a g     O .bss	00000001 g105b
00814328 g     F .text	00000050 alt_ic_isr_register
00818f3b g     O .bss	00000001 g58
00803edc g     F .text	00000034 fwrite
00818f3c g     O .bss	00000001 _cg57
00818f3d g     O .bss	00000001 g68
00818f3e g     O .bss	00000001 g25
0081712c g       *ABS*	00000000 _edata
008134cc g     F .text	00000060 altera_avalon_uart_read_fd
00818f3f g     O .bss	00000001 PRE_g93
00818f40 g     O .bss	00000001 g142
00819134 g       *ABS*	00000000 _end
00818f41 g     O .bss	00000001 g11
0080d2bc g     F .text	00000164 __fputwc
00800244 g       *ABS*	00000000 __ram_exceptions_end
00811fcc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00818f42 g     O .bss	00000001 g65
00818f43 g     O .bss	00000001 g22
00818f44 g     O .bss	00000001 g148_e1
00818f45 g     O .bss	00000001 g28
00818f46 g     O .bss	00000001 _cg138
00818f47 g     O .bss	00000001 g73
00818f48 g     O .bss	00000001 _cg113
00818f49 g     O .bss	00000001 g99b
00814400 g     F .text	0000008c alt_ic_irq_disable
00818f4a g     O .bss	00000001 stop_VRP
00804e40 g     F .text	0000007c __swrite
008170f0 g     O .rwdata	00000004 __malloc_trim_threshold
00809f70 g     F .text	0000000c __locale_msgcharset
008149f4 g     F .text	00000038 exit
00818f4b g     O .bss	00000001 g125
00809dc0 g     F .text	000000c4 _fwalk_reent
0080acc4 g     F .text	000001fc __mdiff
00818f4c g     O .bss	00000001 g77
00818f4d g     O .bss	00000001 g32
00818f4e g     O .bss	00000001 g135b
0080e338 g     F .text	00000074 .hidden __modsi3
00817128 g     O .rwdata	00000004 __ctype_ptr__
00818f4f g     O .bss	00000001 g88
00818f50 g     O .bss	00000001 g45
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
00818e34 g     O .bss	00000004 uart
00809324 g     F .text	00000004 __sfp_lock_release
00818f51 g     O .bss	00000001 g102_e6
00818f52 g     O .bss	00000001 _cg23
00818f53 g     O .bss	00000001 PRE_g127
00800000 g       *ABS*	00000000 __alt_mem_sdram
00818f54 g     O .bss	00000001 g130
008151ba g     O .rodata	00000101 _ctype_
00818f55 g     O .bss	00000001 _cg135
00818f56 g     O .bss	00000001 PRE_g5
00818f57 g     O .bss	00000001 stop_LRI
00813950 g     F .text	00000054 altera_avalon_uart_close
00803828 g     F .text	000000f4 _fopen_r
00814d40 g     F .text	00000034 _exit
00818f58 g     O .bss	00000001 g148_fix3
00813da4 g     F .text	0000012c alt_alarm_start
00818f59 g     O .bss	00000001 g121
00818f5a g     O .bss	00000001 g143b
00803f10 g     F .text	000001bc __smakebuf_r
00804f20 g     F .text	00000098 strlen
00818f5b g     O .bss	00000001 g39
0081901c g     O .bss	00000018 timer_start_flags
00811314 g     F .text	00000154 open
0080f684 g     F .text	000000dc .hidden __gedf2
00818f5c g     O .bss	00000001 _cg49
00818f5d g     O .bss	00000001 g120
008170f8 g     O .rwdata	00000004 __wctomb
00818f5e g     O .bss	00000001 _cg120
0080bba8 g     F .text	00000018 __sprint_r
008142f4 g     F .text	00000034 alt_icache_flush_all
00818f5f g     O .bss	00000001 g29
00818f60 g     O .bss	00000001 _cg4
00818f61 g     O .bss	00000001 g67
00818f62 g     O .bss	00000001 g24
00818f63 g     O .bss	00000001 g133
00818f64 g     O .bss	00000001 g20_e1
00817114 g     O .rwdata	00000004 alt_priority_mask
00818f65 g     O .bss	00000001 g109
00818f66 g     O .bss	00000001 _cg143
00818f67 g     O .bss	00000001 _cg32
00818fac g     O .bss	00000018 timer_fist_timeStamp_Value
00814378 g     F .text	00000088 alt_ic_irq_enable
008071b0 g     F .text	0000001c __vfprintf_internal
008139e0 g     F .text	000001dc altera_avalon_uart_read
0080d7a8 g     F .text	0000005c _wctomb_r
00818f68 g     O .bss	00000001 AVI_counting
0080ff6c g     F .text	000008fc .hidden __subdf3
00818f69 g     O .bss	00000001 g149
00818f6a g     O .bss	00000001 g106
00818f6b g     O .bss	00000001 _cg36
0080a6f8 g     F .text	000000b0 __lo0bits
00818f6c g     O .bss	00000001 g10
0081711c g     O .rwdata	00000008 alt_alarm_list
00813ff8 g     F .text	00000060 _do_ctors
0080d6b8 g     F .text	000000c0 wcrtomb
00818f6d g     O .bss	00000001 g69
00818f6e g     O .bss	00000001 g26
00810b0c g     F .text	000000d0 close
00818f6f g     O .bss	00000001 g110_e7
00818f70 g     O .bss	00000001 g13b
00810fbc g     F .text	00000084 alt_load
00818f71 g     O .bss	00000001 _cg39
0080d444 g     F .text	00000080 fputwc
00809328 g     F .text	00000004 __sinit_lock_acquire
00818f72 g     O .bss	00000001 _cg105
0080a46c g     F .text	00000120 __multadd
0080a444 g     F .text	00000028 _Bfree
00818f73 g     O .bss	00000001 g74



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_mem_onchip_mem+0xff780004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409114 	ori	at,at,580
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_sdram-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	008020b4 	movhi	r2,130
  800140:	10a40d04 	addi	r2,r2,-28620
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	008020b4 	movhi	r2,130
  800158:	10a40d04 	addi	r2,r2,-28620
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_onchip_mem+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_onchip_mem+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a7b117 	ldw	r2,-24892(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a7b117 	ldw	r2,-24892(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_onchip_mem+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6bc3914 	ori	gp,gp,61668
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	10a38714 	ori	r2,r2,36380

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18e44d14 	ori	r3,r3,37172

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_onchip_mem+0xff780278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800284:	0810fbc0 	call	810fbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800288:	08111500 	call	811150 <alt_main>

0080028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  80028c:	003fff06 	br	80028c <__alt_mem_onchip_mem+0xff78028c>

00800290 <get_heart_signals>:
 * This method sets a flag to set initiate setting the
 * Vsense or Asense variable if KEY0 and KEY1 are is pressed
 * respectively.
 */
void get_heart_signals(void* context, alt_u32 ID)
{
  800290:	defffc04 	addi	sp,sp,-16
  800294:	df000315 	stw	fp,12(sp)
  800298:	df000304 	addi	fp,sp,12
  80029c:	e13ffe15 	stw	r4,-8(fp)
  8002a0:	e17fff15 	stw	r5,-4(fp)
	// critical section "ticket" variable
	int code;

	// Read buttons value
	int buttonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);
  8002a4:	00804434 	movhi	r2,272
  8002a8:	10842804 	addi	r2,r2,4256
  8002ac:	10800037 	ldwio	r2,0(r2)
  8002b0:	e0bffd15 	stw	r2,-12(fp)

	// ensure mutual exclusion
	//test_and_set(&code);
	//while(code)test_and_set(&code);

	if(buttonsValue == 0b110) // Vsense occurred
  8002b4:	e0bffd17 	ldw	r2,-12(fp)
  8002b8:	10800198 	cmpnei	r2,r2,6
  8002bc:	1000031e 	bne	r2,zero,8002cc <get_heart_signals+0x3c>
	{
		vsense_flag = 1;
  8002c0:	00800044 	movi	r2,1
  8002c4:	d0a74e15 	stw	r2,-25288(gp)
  8002c8:	00000d06 	br	800300 <get_heart_signals+0x70>
	}
	else if(buttonsValue == 0b101) // Asense occured
  8002cc:	e0bffd17 	ldw	r2,-12(fp)
  8002d0:	10800158 	cmpnei	r2,r2,5
  8002d4:	1000031e 	bne	r2,zero,8002e4 <get_heart_signals+0x54>
	{
		asense_flag = 1;
  8002d8:	00800044 	movi	r2,1
  8002dc:	d0a74f15 	stw	r2,-25284(gp)
  8002e0:	00000706 	br	800300 <get_heart_signals+0x70>
	}
	else if(buttonsValue == 0b100) // Asense and Vsense occured
  8002e4:	e0bffd17 	ldw	r2,-12(fp)
  8002e8:	10800118 	cmpnei	r2,r2,4
  8002ec:	1000041e 	bne	r2,zero,800300 <get_heart_signals+0x70>
	{
		vsense_flag = 1;
  8002f0:	00800044 	movi	r2,1
  8002f4:	d0a74e15 	stw	r2,-25288(gp)
		asense_flag = 1;
  8002f8:	00800044 	movi	r2,1
  8002fc:	d0a74f15 	stw	r2,-25284(gp)

	// free the critical section
	//occupied = 0;

	// clear the edge capture register to enable next interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  800300:	0007883a 	mov	r3,zero
  800304:	00804434 	movhi	r2,272
  800308:	10842b04 	addi	r2,r2,4268
  80030c:	10c00035 	stwio	r3,0(r2)
}
  800310:	0001883a 	nop
  800314:	e037883a 	mov	sp,fp
  800318:	df000017 	ldw	fp,0(sp)
  80031c:	dec00104 	addi	sp,sp,4
  800320:	f800283a 	ret

00800324 <get_uart_contents>:


void get_uart_contents(void *context ,alt_u32 interrupt)
{
  800324:	defffb04 	addi	sp,sp,-20
  800328:	dfc00415 	stw	ra,16(sp)
  80032c:	df000315 	stw	fp,12(sp)
  800330:	df000304 	addi	fp,sp,12
  800334:	e13ffe15 	stw	r4,-8(fp)
  800338:	e17fff15 	stw	r5,-4(fp)
	unsigned short int data,status,code;
	// wait till a char is ready to read from uart
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
  80033c:	00804434 	movhi	r2,272
  800340:	10841204 	addi	r2,r2,4168
  800344:	10800037 	ldwio	r2,0(r2)
  800348:	e0bffd0d 	sth	r2,-12(fp)
	while (!(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK))
  80034c:	00000406 	br	800360 <get_uart_contents+0x3c>
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
  800350:	00804434 	movhi	r2,272
  800354:	10841204 	addi	r2,r2,4168
  800358:	10800037 	ldwio	r2,0(r2)
  80035c:	e0bffd0d 	sth	r2,-12(fp)
void get_uart_contents(void *context ,alt_u32 interrupt)
{
	unsigned short int data,status,code;
	// wait till a char is ready to read from uart
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
	while (!(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK))
  800360:	e0bffd0b 	ldhu	r2,-12(fp)
  800364:	1080200c 	andi	r2,r2,128
  800368:	103ff926 	beq	r2,zero,800350 <__alt_mem_onchip_mem+0xff780350>
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
	// read the buffer content
	data =IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
  80036c:	00804434 	movhi	r2,272
  800370:	10841004 	addi	r2,r2,4160
  800374:	10800037 	ldwio	r2,0(r2)
  800378:	e0bffd8d 	sth	r2,-10(fp)

	// ensure mutual exclusion
	//test_and_set(&code);
	//while(code)test_and_set(&code);
	if(data == _Asense)
  80037c:	e0bffd8b 	ldhu	r2,-10(fp)
  800380:	10801058 	cmpnei	r2,r2,65
  800384:	1000061e 	bne	r2,zero,8003a0 <get_uart_contents+0x7c>
	{
		asense_flag_mode_2 = 1;
  800388:	00800044 	movi	r2,1
  80038c:	d0a75115 	stw	r2,-25276(gp)
		printf("Asense received from heart emulator\n");
  800390:	01002074 	movhi	r4,129
  800394:	21135d04 	addi	r4,r4,19828
  800398:	0804b8c0 	call	804b8c <puts>
	}

	//free the critical section
	//occupied = 0;

}
  80039c:	00000806 	br	8003c0 <get_uart_contents+0x9c>
	if(data == _Asense)
	{
		asense_flag_mode_2 = 1;
		printf("Asense received from heart emulator\n");
	}
	else if(data == _Vsense)
  8003a0:	e0bffd8b 	ldhu	r2,-10(fp)
  8003a4:	10801598 	cmpnei	r2,r2,86
  8003a8:	1000051e 	bne	r2,zero,8003c0 <get_uart_contents+0x9c>
	{
		vsense_flag_mode_2 = 1;
  8003ac:	00800044 	movi	r2,1
  8003b0:	d0a75015 	stw	r2,-25280(gp)
		printf("Vsense received from heart emulator\n");
  8003b4:	01002074 	movhi	r4,129
  8003b8:	21136604 	addi	r4,r4,19864
  8003bc:	0804b8c0 	call	804b8c <puts>
	}

	//free the critical section
	//occupied = 0;

}
  8003c0:	0001883a 	nop
  8003c4:	e037883a 	mov	sp,fp
  8003c8:	dfc00117 	ldw	ra,4(sp)
  8003cc:	df000017 	ldw	fp,0(sp)
  8003d0:	dec00204 	addi	sp,sp,8
  8003d4:	f800283a 	ret

008003d8 <timeout_checker>:
 * 	timer_expired_flag - the address of the timer variable that represent an input on the sccharts
 * 			 will modify the value of the passed outputput to "1" for timer timeout
 * 			 and "0" for timer still counting.
 */
void timeout_checker(int first_timeStamp , int timeout ,char *timer_expired_flag)
{
  8003d8:	defffa04 	addi	sp,sp,-24
  8003dc:	dfc00515 	stw	ra,20(sp)
  8003e0:	df000415 	stw	fp,16(sp)
  8003e4:	df000404 	addi	fp,sp,16
  8003e8:	e13ffd15 	stw	r4,-12(fp)
  8003ec:	e17ffe15 	stw	r5,-8(fp)
  8003f0:	e1bfff15 	stw	r6,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  8003f4:	d0e7b017 	ldw	r3,-24896(gp)

	//calculates the elapsed time
	int time_diff = alt_nticks() - first_timeStamp;
  8003f8:	e0bffd17 	ldw	r2,-12(fp)
  8003fc:	1885c83a 	sub	r2,r3,r2
  800400:	e0bffc15 	stw	r2,-16(fp)

	if(time_diff >= timeout)
  800404:	e0fffc17 	ldw	r3,-16(fp)
  800408:	e0bffe17 	ldw	r2,-8(fp)
  80040c:	18800716 	blt	r3,r2,80042c <timeout_checker+0x54>
	{
		 printf("timeoutvalue %d \n",time_diff);
  800410:	e17ffc17 	ldw	r5,-16(fp)
  800414:	01002074 	movhi	r4,129
  800418:	21136f04 	addi	r4,r4,19900
  80041c:	0804a900 	call	804a90 <printf>
		(*timer_expired_flag) = 1; // timer expired
  800420:	e0bfff17 	ldw	r2,-4(fp)
  800424:	00c00044 	movi	r3,1
  800428:	10c00005 	stb	r3,0(r2)
	}
}
  80042c:	0001883a 	nop
  800430:	e037883a 	mov	sp,fp
  800434:	dfc00117 	ldw	ra,4(sp)
  800438:	df000017 	ldw	fp,0(sp)
  80043c:	dec00204 	addi	sp,sp,8
  800440:	f800283a 	ret

00800444 <test_and_set>:
/*
 * This method ensures that only one process (main or ISR) has access
 * to variables "vsense_flag" or "asense_flag" at a time
 */
void test_and_set(int* code)
{
  800444:	defffe04 	addi	sp,sp,-8
  800448:	df000115 	stw	fp,4(sp)
  80044c:	df000104 	addi	fp,sp,4
  800450:	e13fff15 	stw	r4,-4(fp)
	(*code) = occupied;
  800454:	d0e75217 	ldw	r3,-25272(gp)
  800458:	e0bfff17 	ldw	r2,-4(fp)
  80045c:	10c00015 	stw	r3,0(r2)
	occupied = 1;
  800460:	00800044 	movi	r2,1
  800464:	d0a75215 	stw	r2,-25272(gp)
}
  800468:	0001883a 	nop
  80046c:	e037883a 	mov	sp,fp
  800470:	df000017 	ldw	fp,0(sp)
  800474:	dec00104 	addi	sp,sp,4
  800478:	f800283a 	ret

0080047c <transmit_string>:

void transmit_string(char* txString){
  80047c:	defffe04 	addi	sp,sp,-8
  800480:	df000115 	stw	fp,4(sp)
  800484:	df000104 	addi	fp,sp,4
  800488:	e13fff15 	stw	r4,-4(fp)
	//Set RTS to true (logic 0 as inverted)
	IOWR(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG ,IORD(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG) & ~(0x0800));
  80048c:	00804434 	movhi	r2,272
  800490:	10841304 	addi	r2,r2,4172
  800494:	10c00037 	ldwio	r3,0(r2)
  800498:	00bdffc4 	movi	r2,-2049
  80049c:	1886703a 	and	r3,r3,r2
  8004a0:	00804434 	movhi	r2,272
  8004a4:	10841304 	addi	r2,r2,4172
  8004a8:	10c00035 	stwio	r3,0(r2)
	//Ensure that CTS is true (logic 0 as inverted)
	while((IORD(UART_BASE,ALTERA_AVALON_UART_STATUS_REG) & 0x0800) != 0){};
  8004ac:	0001883a 	nop
  8004b0:	00804434 	movhi	r2,272
  8004b4:	10841204 	addi	r2,r2,4168
  8004b8:	10800037 	ldwio	r2,0(r2)
  8004bc:	1082000c 	andi	r2,r2,2048
  8004c0:	103ffb1e 	bne	r2,zero,8004b0 <__alt_mem_onchip_mem+0xff7804b0>
	//Ensure that previous character sent
	while((IORD(UART_BASE,ALTERA_AVALON_UART_STATUS_REG) & 0x0040) == 0){};
  8004c4:	0001883a 	nop
  8004c8:	00804434 	movhi	r2,272
  8004cc:	10841204 	addi	r2,r2,4168
  8004d0:	10800037 	ldwio	r2,0(r2)
  8004d4:	1080100c 	andi	r2,r2,64
  8004d8:	103ffb26 	beq	r2,zero,8004c8 <__alt_mem_onchip_mem+0xff7804c8>
	//Write next character into txData register
	IOWR(UART_BASE,ALTERA_AVALON_UART_TXDATA_REG ,txString[0]);
  8004dc:	e0bfff17 	ldw	r2,-4(fp)
  8004e0:	10800003 	ldbu	r2,0(r2)
  8004e4:	10c03fcc 	andi	r3,r2,255
  8004e8:	18c0201c 	xori	r3,r3,128
  8004ec:	18ffe004 	addi	r3,r3,-128
  8004f0:	00804434 	movhi	r2,272
  8004f4:	10841104 	addi	r2,r2,4164
  8004f8:	10c00035 	stwio	r3,0(r2)

//Finished sending string so set RTS to false (logic 1 as inverted)
IOWR(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG ,IORD(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG) | 0x0800);
  8004fc:	00804434 	movhi	r2,272
  800500:	10841304 	addi	r2,r2,4172
  800504:	10800037 	ldwio	r2,0(r2)
  800508:	10c20014 	ori	r3,r2,2048
  80050c:	00804434 	movhi	r2,272
  800510:	10841304 	addi	r2,r2,4172
  800514:	10c00035 	stwio	r3,0(r2)
}
  800518:	0001883a 	nop
  80051c:	e037883a 	mov	sp,fp
  800520:	df000017 	ldw	fp,0(sp)
  800524:	dec00104 	addi	sp,sp,4
  800528:	f800283a 	ret

0080052c <main>:


int main()
{
  80052c:	defff604 	addi	sp,sp,-40
  800530:	dfc00915 	stw	ra,36(sp)
  800534:	df000815 	stw	fp,32(sp)
  800538:	df000804 	addi	fp,sp,32
	// Initialize the FSM
	reset();
  80053c:	0800ad00 	call	800ad0 <reset>

	// Store the timers "timer start" flags
	timer_start_flags[0] = &start_AVI;
  800540:	008020b4 	movhi	r2,130
  800544:	10a40704 	addi	r2,r2,-28644
  800548:	d0e77104 	addi	r3,gp,-25148
  80054c:	10c00015 	stw	r3,0(r2)
	timer_start_flags[1] = &start_PVARP;
  800550:	008020b4 	movhi	r2,130
  800554:	10a40704 	addi	r2,r2,-28644
  800558:	d0e78344 	addi	r3,gp,-25075
  80055c:	10c00115 	stw	r3,4(r2)
	timer_start_flags[2] = &start_VRP;
  800560:	008020b4 	movhi	r2,130
  800564:	10a40704 	addi	r2,r2,-28644
  800568:	d0e76a84 	addi	r3,gp,-25174
  80056c:	10c00215 	stw	r3,8(r2)
	timer_start_flags[3] = &start_AEI;
  800570:	008020b4 	movhi	r2,130
  800574:	10a40704 	addi	r2,r2,-28644
  800578:	d0e78884 	addi	r3,gp,-25054
  80057c:	10c00315 	stw	r3,12(r2)
	timer_start_flags[4] = &start_LRI;
  800580:	008020b4 	movhi	r2,130
  800584:	10a40704 	addi	r2,r2,-28644
  800588:	d0e78a44 	addi	r3,gp,-25047
  80058c:	10c00415 	stw	r3,16(r2)
	timer_start_flags[5] = &start_URI;
  800590:	008020b4 	movhi	r2,130
  800594:	10a40704 	addi	r2,r2,-28644
  800598:	d0e78e04 	addi	r3,gp,-25032
  80059c:	10c00515 	stw	r3,20(r2)

	// Store the timer state (counting = 1 idle = 0)
	timer_state_flags[0] = &AVI_counting;
  8005a0:	008020b4 	movhi	r2,130
  8005a4:	10a40104 	addi	r2,r2,-28668
  8005a8:	d0e7a104 	addi	r3,gp,-24956
  8005ac:	10c00015 	stw	r3,0(r2)
	timer_state_flags[1] = &PVARP_counting;
  8005b0:	008020b4 	movhi	r2,130
  8005b4:	10a40104 	addi	r2,r2,-28668
  8005b8:	d0e76c84 	addi	r3,gp,-25166
  8005bc:	10c00115 	stw	r3,4(r2)
	timer_state_flags[2] = &VRP_counting;
  8005c0:	008020b4 	movhi	r2,130
  8005c4:	10a40104 	addi	r2,r2,-28668
  8005c8:	d0e78104 	addi	r3,gp,-25084
  8005cc:	10c00215 	stw	r3,8(r2)
	timer_state_flags[3] = &AEI_counting;
  8005d0:	008020b4 	movhi	r2,130
  8005d4:	10a40104 	addi	r2,r2,-28668
  8005d8:	d0e77c04 	addi	r3,gp,-25104
  8005dc:	10c00315 	stw	r3,12(r2)
	timer_state_flags[4] = &LRI_counting;
  8005e0:	008020b4 	movhi	r2,130
  8005e4:	10a40104 	addi	r2,r2,-28668
  8005e8:	d0e77004 	addi	r3,gp,-25152
  8005ec:	10c00415 	stw	r3,16(r2)
	timer_state_flags[5] = &URI_counting;
  8005f0:	008020b4 	movhi	r2,130
  8005f4:	10a40104 	addi	r2,r2,-28668
  8005f8:	d0e76f44 	addi	r3,gp,-25155
  8005fc:	10c00515 	stw	r3,20(r2)

	// Store the SCCHARTS OUTPUT variables
	timer_expired_flags[0] = &AVI_ex;
  800600:	008020b4 	movhi	r2,130
  800604:	10a3fb04 	addi	r2,r2,-28692
  800608:	d0e77cc4 	addi	r3,gp,-25101
  80060c:	10c00015 	stw	r3,0(r2)
	timer_expired_flags[1] = &PVARP_ex;
  800610:	008020b4 	movhi	r2,130
  800614:	10a3fb04 	addi	r2,r2,-28692
  800618:	d0e79104 	addi	r3,gp,-25020
  80061c:	10c00115 	stw	r3,4(r2)
	timer_expired_flags[2] = &VRP_ex;
  800620:	008020b4 	movhi	r2,130
  800624:	10a3fb04 	addi	r2,r2,-28692
  800628:	d0e77d84 	addi	r3,gp,-25098
  80062c:	10c00215 	stw	r3,8(r2)
	timer_expired_flags[3] = &AEI_ex;
  800630:	008020b4 	movhi	r2,130
  800634:	10a3fb04 	addi	r2,r2,-28692
  800638:	d0e75ac4 	addi	r3,gp,-25237
  80063c:	10c00315 	stw	r3,12(r2)
	timer_expired_flags[4] = &LRI_ex;
  800640:	008020b4 	movhi	r2,130
  800644:	10a3fb04 	addi	r2,r2,-28692
  800648:	d0e776c4 	addi	r3,gp,-25125
  80064c:	10c00415 	stw	r3,16(r2)
	timer_expired_flags[5] = &URI_ex;
  800650:	008020b4 	movhi	r2,130
  800654:	10a3fb04 	addi	r2,r2,-28692
  800658:	d0e78044 	addi	r3,gp,-25087
  80065c:	10c00515 	stw	r3,20(r2)

	// stores the heart signals sent from the heart emulator
	char heart_signal[1];
	//  stores the switch values on the switch on DE-115 board
	int swicthValue = 0;
  800660:	e03ff815 	stw	zero,-32(fp)
	// stores the previous value of variable "swicthValue"
	int prevSwitchValue = -1;
  800664:	00bfffc4 	movi	r2,-1
  800668:	e0bff915 	stw	r2,-28(fp)
	// critical section "ticket" variable
	int code;
	// led delay counter for vpace
	int led_counter_vp = 0;
  80066c:	e03ffa15 	stw	zero,-24(fp)
	// led delay counter for apace
	int led_counter_ap = 0;
  800670:	e03ffb15 	stw	zero,-20(fp)

	//Open uart with read and write
	uart = fopen(UART_NAME , "w+");
  800674:	01402074 	movhi	r5,129
  800678:	29537404 	addi	r5,r5,19920
  80067c:	01002074 	movhi	r4,129
  800680:	21137504 	addi	r4,r4,19924
  800684:	080391c0 	call	80391c <fopen>
  800688:	d0a75415 	stw	r2,-25264(gp)
	//uart = open(UART_NAME,O_NONBLOCK | O_RDWR);
	if(uart == NULL)
  80068c:	d0a75417 	ldw	r2,-25264(gp)
  800690:	1000031e 	bne	r2,zero,8006a0 <main+0x174>
	{
		printf("error ---------------------->could not start uart\n");
  800694:	01002074 	movhi	r4,129
  800698:	21137804 	addi	r4,r4,19936
  80069c:	0804b8c0 	call	804b8c <puts>
	}

	//Open lcd module on the DE-115 board
	lcd = fopen(LCD_NAME, "w");
  8006a0:	01402074 	movhi	r5,129
  8006a4:	29538504 	addi	r5,r5,19988
  8006a8:	01002074 	movhi	r4,129
  8006ac:	21138604 	addi	r4,r4,19992
  8006b0:	080391c0 	call	80391c <fopen>
  8006b4:	d0a75315 	stw	r2,-25268(gp)
	if(lcd == NULL)
  8006b8:	d0a75317 	ldw	r2,-25268(gp)
  8006bc:	1000031e 	bne	r2,zero,8006cc <main+0x1a0>
	{
		printf("error ---------------------->could not start lcd\n");
  8006c0:	01002074 	movhi	r4,129
  8006c4:	21138904 	addi	r4,r4,20004
  8006c8:	0804b8c0 	call	804b8c <puts>
	}

	// initialize button isr - clear the buttons edge capture register
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
  8006cc:	0007883a 	mov	r3,zero
  8006d0:	00804434 	movhi	r2,272
  8006d4:	10842b04 	addi	r2,r2,4268
  8006d8:	10c00035 	stwio	r3,0(r2)
	// enable interrupt on button press (KEY0 or KEY1 only)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b011);
  8006dc:	00c000c4 	movi	r3,3
  8006e0:	00804434 	movhi	r2,272
  8006e4:	10842a04 	addi	r2,r2,4264
  8006e8:	10c00035 	stwio	r3,0(r2)
	// initialize button isr - register button ISR
	 alt_irq_register (BUTTONS_IRQ, NULL , get_heart_signals);
  8006ec:	01802034 	movhi	r6,128
  8006f0:	3180a404 	addi	r6,r6,656
  8006f4:	000b883a 	mov	r5,zero
  8006f8:	01000104 	movi	r4,4
  8006fc:	0810cf40 	call	810cf4 <alt_irq_register>
	 // enable ISR routine when uart has a char in buffer
	 IOWR(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG,ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
  800700:	00c02004 	movi	r3,128
  800704:	00804434 	movhi	r2,272
  800708:	10841304 	addi	r2,r2,4172
  80070c:	10c00035 	stwio	r3,0(r2)
	 // register uart ISR routine
	  alt_irq_register(UART_IRQ, NULL, get_uart_contents);
  800710:	01802034 	movhi	r6,128
  800714:	3180c904 	addi	r6,r6,804
  800718:	000b883a 	mov	r5,zero
  80071c:	0009883a 	mov	r4,zero
  800720:	0810cf40 	call	810cf4 <alt_irq_register>

  while(1)
  {


	  if(swicthValue) // Read Vsense and Asense inputs from the heart emulator ( SW0 = 1)
  800724:	e0bff817 	ldw	r2,-32(fp)
  800728:	10001926 	beq	r2,zero,800790 <main+0x264>
	  {
		  // Read heart inputs from the heart emulator
		  //fscanf(uart,"%c", &heart_signal);

		  // ensure mutual exclusion
		  test_and_set(&code);
  80072c:	e0bffe04 	addi	r2,fp,-8
  800730:	1009883a 	mov	r4,r2
  800734:	08004440 	call	800444 <test_and_set>
		  while(code) test_and_set(&code);
  800738:	00000306 	br	800748 <main+0x21c>
  80073c:	e0bffe04 	addi	r2,fp,-8
  800740:	1009883a 	mov	r4,r2
  800744:	08004440 	call	800444 <test_and_set>
  800748:	e0bffe17 	ldw	r2,-8(fp)
  80074c:	103ffb1e 	bne	r2,zero,80073c <__alt_mem_onchip_mem+0xff78073c>
		  if(asense_flag_mode_2)
  800750:	d0a75117 	ldw	r2,-25276(gp)
  800754:	10000426 	beq	r2,zero,800768 <main+0x23c>
		  {
			  Asense = 1; // Asense occured
  800758:	00800044 	movi	r2,1
  80075c:	d0a792c5 	stb	r2,-25013(gp)
			  asense_flag_mode_2 = 0;
  800760:	d0275115 	stw	zero,-25276(gp)
  800764:	00000106 	br	80076c <main+0x240>
		  }
		  else
		  {
			  Asense = 0; // no Asense occured
  800768:	d02792c5 	stb	zero,-25013(gp)
		  }

		  if(vsense_flag_mode_2)
  80076c:	d0a75017 	ldw	r2,-25280(gp)
  800770:	10000426 	beq	r2,zero,800784 <main+0x258>
		  {
			  Vsense = 1; // Vsense occured
  800774:	00800044 	movi	r2,1
  800778:	d0a77905 	stb	r2,-25116(gp)
			  vsense_flag_mode_2 = 0;
  80077c:	d0275015 	stw	zero,-25280(gp)
  800780:	00000106 	br	800788 <main+0x25c>

		  }
		  else
		  {
			  Vsense = 0; // no Vsense occured
  800784:	d0277905 	stb	zero,-25116(gp)
		  }

		  occupied = 0; // free critical section
  800788:	d0275215 	stw	zero,-25272(gp)
  80078c:	00000e06 	br	8007c8 <main+0x29c>
		  // ensure mutual exclusion
		  //test_and_set(&code);
		  //while(code) test_and_set(&code);

		  //Get Vsense or Asense inputs
		  if(vsense_flag)
  800790:	d0a74e17 	ldw	r2,-25288(gp)
  800794:	10000426 	beq	r2,zero,8007a8 <main+0x27c>
		  {
			  Vsense = 1; // Vsense occured
  800798:	00800044 	movi	r2,1
  80079c:	d0a77905 	stb	r2,-25116(gp)
			  vsense_flag = 0;
  8007a0:	d0274e15 	stw	zero,-25288(gp)
  8007a4:	00000106 	br	8007ac <main+0x280>
		  }
		  else
		  {
			  Vsense = 0; // no Vsense occured
  8007a8:	d0277905 	stb	zero,-25116(gp)
		  }

		  if(asense_flag)
  8007ac:	d0a74f17 	ldw	r2,-25284(gp)
  8007b0:	10000426 	beq	r2,zero,8007c4 <main+0x298>
		  {
			  Asense = 1; // Asense occured
  8007b4:	00800044 	movi	r2,1
  8007b8:	d0a792c5 	stb	r2,-25013(gp)
			  asense_flag = 0;
  8007bc:	d0274f15 	stw	zero,-25284(gp)
  8007c0:	00000106 	br	8007c8 <main+0x29c>
		  }
		  else
		  {
			  Asense = 0; // no Asense occured
  8007c4:	d02792c5 	stb	zero,-25013(gp)
		  //occupied = 0; // free critical section
	  }


	  // Get inputs (TIMER_ex inputs) e.g. "AVI_ex = 1" timer AVI expired
	  for(int i = 0; i < 6 ; i++)
  8007c8:	e03ffc15 	stw	zero,-16(fp)
  8007cc:	00004406 	br	8008e0 <main+0x3b4>
	  {
		  // check if a timer is started
		  if((*timer_start_flags[i]))
  8007d0:	008020b4 	movhi	r2,130
  8007d4:	10a40704 	addi	r2,r2,-28644
  8007d8:	e0fffc17 	ldw	r3,-16(fp)
  8007dc:	18c7883a 	add	r3,r3,r3
  8007e0:	18c7883a 	add	r3,r3,r3
  8007e4:	10c5883a 	add	r2,r2,r3
  8007e8:	10800017 	ldw	r2,0(r2)
  8007ec:	10800003 	ldbu	r2,0(r2)
  8007f0:	10803fcc 	andi	r2,r2,255
  8007f4:	1080201c 	xori	r2,r2,128
  8007f8:	10bfe004 	addi	r2,r2,-128
  8007fc:	10000926 	beq	r2,zero,800824 <main+0x2f8>
  800800:	d0a7b017 	ldw	r2,-24896(gp)
		  {
			  // get the time stamp when start timer flag is set
			  timer_fist_timeStamp_Value[i] = alt_nticks();
  800804:	1009883a 	mov	r4,r2
  800808:	008020b4 	movhi	r2,130
  80080c:	10a3eb04 	addi	r2,r2,-28756
  800810:	e0fffc17 	ldw	r3,-16(fp)
  800814:	18c7883a 	add	r3,r3,r3
  800818:	18c7883a 	add	r3,r3,r3
  80081c:	10c5883a 	add	r2,r2,r3
  800820:	11000015 	stw	r4,0(r2)
		  }

		  // check if a timer is still counting
		  if((*timer_state_flags[i]))
  800824:	008020b4 	movhi	r2,130
  800828:	10a40104 	addi	r2,r2,-28668
  80082c:	e0fffc17 	ldw	r3,-16(fp)
  800830:	18c7883a 	add	r3,r3,r3
  800834:	18c7883a 	add	r3,r3,r3
  800838:	10c5883a 	add	r2,r2,r3
  80083c:	10800017 	ldw	r2,0(r2)
  800840:	10800003 	ldbu	r2,0(r2)
  800844:	10803fcc 	andi	r2,r2,255
  800848:	1080201c 	xori	r2,r2,128
  80084c:	10bfe004 	addi	r2,r2,-128
  800850:	10001826 	beq	r2,zero,8008b4 <main+0x388>
		  {
			  /* check if a timer has timed out
			   * and outputs a timer expire flag to
			   * intput into sccharts
			   */
			  timeout_checker(timer_fist_timeStamp_Value[i],
  800854:	008020b4 	movhi	r2,130
  800858:	10a3eb04 	addi	r2,r2,-28756
  80085c:	e0fffc17 	ldw	r3,-16(fp)
  800860:	18c7883a 	add	r3,r3,r3
  800864:	18c7883a 	add	r3,r3,r3
  800868:	10c5883a 	add	r2,r2,r3
  80086c:	11000017 	ldw	r4,0(r2)
  800870:	00802074 	movhi	r2,129
  800874:	10950f04 	addi	r2,r2,21564
  800878:	e0fffc17 	ldw	r3,-16(fp)
  80087c:	18c7883a 	add	r3,r3,r3
  800880:	18c7883a 	add	r3,r3,r3
  800884:	10c5883a 	add	r2,r2,r3
  800888:	11400017 	ldw	r5,0(r2)
  80088c:	008020b4 	movhi	r2,130
  800890:	10a3fb04 	addi	r2,r2,-28692
  800894:	e0fffc17 	ldw	r3,-16(fp)
  800898:	18c7883a 	add	r3,r3,r3
  80089c:	18c7883a 	add	r3,r3,r3
  8008a0:	10c5883a 	add	r2,r2,r3
  8008a4:	10800017 	ldw	r2,0(r2)
  8008a8:	100d883a 	mov	r6,r2
  8008ac:	08003d80 	call	8003d8 <timeout_checker>
  8008b0:	00000806 	br	8008d4 <main+0x3a8>
			                  timer_timeout_values[i],
			                  timer_expired_flags[i]);
		  }
		  else
		  {
			  *timer_expired_flags[i] = 0; // timer is idle or counting
  8008b4:	008020b4 	movhi	r2,130
  8008b8:	10a3fb04 	addi	r2,r2,-28692
  8008bc:	e0fffc17 	ldw	r3,-16(fp)
  8008c0:	18c7883a 	add	r3,r3,r3
  8008c4:	18c7883a 	add	r3,r3,r3
  8008c8:	10c5883a 	add	r2,r2,r3
  8008cc:	10800017 	ldw	r2,0(r2)
  8008d0:	10000005 	stb	zero,0(r2)
		  //occupied = 0; // free critical section
	  }


	  // Get inputs (TIMER_ex inputs) e.g. "AVI_ex = 1" timer AVI expired
	  for(int i = 0; i < 6 ; i++)
  8008d4:	e0bffc17 	ldw	r2,-16(fp)
  8008d8:	10800044 	addi	r2,r2,1
  8008dc:	e0bffc15 	stw	r2,-16(fp)
  8008e0:	e0bffc17 	ldw	r2,-16(fp)
  8008e4:	10800190 	cmplti	r2,r2,6
  8008e8:	103fb91e 	bne	r2,zero,8007d0 <__alt_mem_onchip_mem+0xff7807d0>

	   }


	  // run one FSM tick
	  tick();
  8008ec:	0800b800 	call	800b80 <tick>


	  // emit FSM outputs
	  if(Apace)
  8008f0:	d0a77c83 	ldbu	r2,-25102(gp)
  8008f4:	10803fcc 	andi	r2,r2,255
  8008f8:	1080201c 	xori	r2,r2,128
  8008fc:	10bfe004 	addi	r2,r2,-128
  800900:	10001526 	beq	r2,zero,800958 <main+0x42c>
	  {

		  // set all green LED (high green led means atrium is paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE)| 192);
  800904:	00804434 	movhi	r2,272
  800908:	10841c04 	addi	r2,r2,4208
  80090c:	10800037 	ldwio	r2,0(r2)
  800910:	10c03014 	ori	r3,r2,192
  800914:	00804434 	movhi	r2,272
  800918:	10841c04 	addi	r2,r2,4208
  80091c:	10c00035 	stwio	r3,0(r2)
		  printf("Apace\n");
  800920:	01002074 	movhi	r4,129
  800924:	21139604 	addi	r4,r4,20056
  800928:	0804b8c0 	call	804b8c <puts>


		  if(swicthValue) // if mode is mode 2
  80092c:	e0bff817 	ldw	r2,-32(fp)
  800930:	10001426 	beq	r2,zero,800984 <main+0x458>
		  {
			  char AP[1] = "A";
  800934:	00801044 	movi	r2,65
  800938:	e0bfff05 	stb	r2,-4(fp)
			  transmit_string(&AP); // make a Vpace on the heart emulator
  80093c:	e0bfff04 	addi	r2,fp,-4
  800940:	1009883a 	mov	r4,r2
  800944:	080047c0 	call	80047c <transmit_string>
		 	 printf("---> send A\n");
  800948:	01002074 	movhi	r4,129
  80094c:	21139804 	addi	r4,r4,20064
  800950:	0804b8c0 	call	804b8c <puts>
  800954:	00000b06 	br	800984 <main+0x458>
		  }
	  }
	  else
	  {
		  if(led_counter_ap == 50)
  800958:	e0bffb17 	ldw	r2,-20(fp)
  80095c:	10800c98 	cmpnei	r2,r2,50
  800960:	1000051e 	bne	r2,zero,800978 <main+0x44c>
		  {
			  // clear all red LED (heart is not artificially paced)
			  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0);
  800964:	0007883a 	mov	r3,zero
  800968:	00804434 	movhi	r2,272
  80096c:	10842004 	addi	r2,r2,4224
  800970:	10c00035 	stwio	r3,0(r2)
			  led_counter_vp = 0;
  800974:	e03ffa15 	stw	zero,-24(fp)
		  }

		  led_counter_ap++;
  800978:	e0bffb17 	ldw	r2,-20(fp)
  80097c:	10800044 	addi	r2,r2,1
  800980:	e0bffb15 	stw	r2,-20(fp)
	  }

	  if(Vpace)
  800984:	d0a76383 	ldbu	r2,-25202(gp)
  800988:	10803fcc 	andi	r2,r2,255
  80098c:	1080201c 	xori	r2,r2,128
  800990:	10bfe004 	addi	r2,r2,-128
  800994:	10001526 	beq	r2,zero,8009ec <main+0x4c0>
	  {
		  // set all red LED (high red led means ventricle is paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE)| 3);
  800998:	00804434 	movhi	r2,272
  80099c:	10841c04 	addi	r2,r2,4208
  8009a0:	10800037 	ldwio	r2,0(r2)
  8009a4:	10c000d4 	ori	r3,r2,3
  8009a8:	00804434 	movhi	r2,272
  8009ac:	10841c04 	addi	r2,r2,4208
  8009b0:	10c00035 	stwio	r3,0(r2)
		  printf("Vpace\n");
  8009b4:	01002074 	movhi	r4,129
  8009b8:	21139b04 	addi	r4,r4,20076
  8009bc:	0804b8c0 	call	804b8c <puts>

		  if(swicthValue) // if mode is mode 2
  8009c0:	e0bff817 	ldw	r2,-32(fp)
  8009c4:	10001426 	beq	r2,zero,800a18 <main+0x4ec>
		  {
			  char VP[1] = "V";
  8009c8:	00801584 	movi	r2,86
  8009cc:	e0bfff45 	stb	r2,-3(fp)
			  transmit_string(&VP); // make a Vpace on the heart emulator // make a Vpace on the heart emulator
  8009d0:	e0bfff44 	addi	r2,fp,-3
  8009d4:	1009883a 	mov	r4,r2
  8009d8:	080047c0 	call	80047c <transmit_string>
			  printf("---> send V\n");
  8009dc:	01002074 	movhi	r4,129
  8009e0:	21139d04 	addi	r4,r4,20084
  8009e4:	0804b8c0 	call	804b8c <puts>
  8009e8:	00000b06 	br	800a18 <main+0x4ec>
		  }
	  }
	  else
	  {
		  if(led_counter_vp == 50)
  8009ec:	e0bffa17 	ldw	r2,-24(fp)
  8009f0:	10800c98 	cmpnei	r2,r2,50
  8009f4:	1000051e 	bne	r2,zero,800a0c <main+0x4e0>
		  {
			  // clear all green LED (heart is not artificially paced)
			  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
  8009f8:	0007883a 	mov	r3,zero
  8009fc:	00804434 	movhi	r2,272
  800a00:	10841c04 	addi	r2,r2,4208
  800a04:	10c00035 	stwio	r3,0(r2)
			  led_counter_vp = 0;
  800a08:	e03ffa15 	stw	zero,-24(fp)
		  }

		  led_counter_vp++;
  800a0c:	e0bffa17 	ldw	r2,-24(fp)
  800a10:	10800044 	addi	r2,r2,1
  800a14:	e0bffa15 	stw	r2,-24(fp)
	  }

	  // get current value of SW0 from DE-115 board
	  swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE)&1;
  800a18:	00804434 	movhi	r2,272
  800a1c:	10842404 	addi	r2,r2,4240
  800a20:	10800037 	ldwio	r2,0(r2)
  800a24:	1080004c 	andi	r2,r2,1
  800a28:	e0bff815 	stw	r2,-32(fp)
	  if(prevSwitchValue != swicthValue)
  800a2c:	e0fff917 	ldw	r3,-28(fp)
  800a30:	e0bff817 	ldw	r2,-32(fp)
  800a34:	18bf3b26 	beq	r3,r2,800724 <__alt_mem_onchip_mem+0xff780724>
	  {
		  if(swicthValue)
  800a38:	e0bff817 	ldw	r2,-32(fp)
  800a3c:	10000f26 	beq	r2,zero,800a7c <main+0x550>
		  {
			  fprintf(lcd,"Mode 2 \n");
  800a40:	d0a75317 	ldw	r2,-25268(gp)
  800a44:	100f883a 	mov	r7,r2
  800a48:	01800204 	movi	r6,8
  800a4c:	01400044 	movi	r5,1
  800a50:	01002074 	movhi	r4,129
  800a54:	2113a004 	addi	r4,r4,20096
  800a58:	0803edc0 	call	803edc <fwrite>
			  fprintf(lcd,"Uart\n");
  800a5c:	d0a75317 	ldw	r2,-25268(gp)
  800a60:	100f883a 	mov	r7,r2
  800a64:	01800144 	movi	r6,5
  800a68:	01400044 	movi	r5,1
  800a6c:	01002074 	movhi	r4,129
  800a70:	2113a304 	addi	r4,r4,20108
  800a74:	0803edc0 	call	803edc <fwrite>
  800a78:	00000e06 	br	800ab4 <main+0x588>
		  }
		  else
		  {
			  fprintf(lcd,"Mode 1 \n");
  800a7c:	d0a75317 	ldw	r2,-25268(gp)
  800a80:	100f883a 	mov	r7,r2
  800a84:	01800204 	movi	r6,8
  800a88:	01400044 	movi	r5,1
  800a8c:	01002074 	movhi	r4,129
  800a90:	2113a504 	addi	r4,r4,20116
  800a94:	0803edc0 	call	803edc <fwrite>
			  fprintf(lcd,"Buttons\n");
  800a98:	d0a75317 	ldw	r2,-25268(gp)
  800a9c:	100f883a 	mov	r7,r2
  800aa0:	01800204 	movi	r6,8
  800aa4:	01400044 	movi	r5,1
  800aa8:	01002074 	movhi	r4,129
  800aac:	2113a804 	addi	r4,r4,20128
  800ab0:	0803edc0 	call	803edc <fwrite>
		  }

		  prevSwitchValue = swicthValue;
  800ab4:	e0bff817 	ldw	r2,-32(fp)
  800ab8:	e0bff915 	stw	r2,-28(fp)
		  asense_flag = 0; // reset Vsense occured flag
  800abc:	d0274f15 	stw	zero,-25284(gp)
		  vsense_flag = 0; // reset Asense occured flag
  800ac0:	d0274e15 	stw	zero,-25288(gp)
		  asense_flag_mode_2 = 0; // reset Asense occured flag
  800ac4:	d0275115 	stw	zero,-25276(gp)
		  vsense_flag_mode_2 = 0; // reset Vsense occured flag
  800ac8:	d0275015 	stw	zero,-25280(gp)
	  }

  }
  800acc:	003f1506 	br	800724 <__alt_mem_onchip_mem+0xff780724>

00800ad0 <reset>:
char g148_e1_fix_fix;
char g148_e1_fix;
char g148_e1;
char g152_e2;
int _PRE_GO;
void reset(){
  800ad0:	deffff04 	addi	sp,sp,-4
  800ad4:	df000015 	stw	fp,0(sp)
  800ad8:	d839883a 	mov	fp,sp
   _GO = 1;
  800adc:	00800044 	movi	r2,1
  800ae0:	d0a78305 	stb	r2,-25076(gp)
   _PRE_GO = 0;
  800ae4:	d0275e15 	stw	zero,-25224(gp)
   PRE_g3 = 0;
  800ae8:	d0275f45 	stb	zero,-25219(gp)
   PRE_g5 = 0;
  800aec:	d0279c85 	stb	zero,-24974(gp)
   PRE_g8 = 0;
  800af0:	d0276ac5 	stb	zero,-25173(gp)
   PRE_g12 = 0;
  800af4:	d0277345 	stb	zero,-25139(gp)
   PRE_g22 = 0;
  800af8:	d02780c5 	stb	zero,-25085(gp)
   PRE_g25 = 0;
  800afc:	d0277745 	stb	zero,-25123(gp)
   PRE_g27 = 0;
  800b00:	d0275b85 	stb	zero,-25234(gp)
   PRE_g35 = 0;
  800b04:	d0276d45 	stb	zero,-25163(gp)
   PRE_g38 = 0;
  800b08:	d0275785 	stb	zero,-25250(gp)
   PRE_g40 = 0;
  800b0c:	d0276a45 	stb	zero,-25175(gp)
   PRE_g52 = 0;
  800b10:	d0277e85 	stb	zero,-25094(gp)
   PRE_g55 = 0;
  800b14:	d0277305 	stb	zero,-25140(gp)
   PRE_g62 = 0;
  800b18:	d0278705 	stb	zero,-25060(gp)
   PRE_g65 = 0;
  800b1c:	d0276305 	stb	zero,-25204(gp)
   PRE_g67 = 0;
  800b20:	d0278085 	stb	zero,-25086(gp)
   PRE_g78 = 0;
  800b24:	d0276d05 	stb	zero,-25164(gp)
   PRE_g81 = 0;
  800b28:	d0276b45 	stb	zero,-25171(gp)
   PRE_g84 = 0;
  800b2c:	d0277bc5 	stb	zero,-25105(gp)
   PRE_g89 = 0;
  800b30:	d0278dc5 	stb	zero,-25033(gp)
   PRE_g93 = 0;
  800b34:	d02796c5 	stb	zero,-24997(gp)
   PRE_g104 = 0;
  800b38:	d0276bc5 	stb	zero,-25169(gp)
   PRE_g107 = 0;
  800b3c:	d02784c5 	stb	zero,-25069(gp)
   PRE_g112 = 0;
  800b40:	d02755c5 	stb	zero,-25257(gp)
   PRE_g114 = 0;
  800b44:	d0275c85 	stb	zero,-25230(gp)
   PRE_g119 = 0;
  800b48:	d0277fc5 	stb	zero,-25089(gp)
   PRE_g122 = 0;
  800b4c:	d02757c5 	stb	zero,-25249(gp)
   PRE_g127 = 0;
  800b50:	d0279bc5 	stb	zero,-24977(gp)
   PRE_g130 = 0;
  800b54:	d0278c45 	stb	zero,-25039(gp)
   PRE_g134 = 0;
  800b58:	d0275845 	stb	zero,-25247(gp)
   PRE_g137 = 0;
  800b5c:	d02788c5 	stb	zero,-25053(gp)
   PRE_g142 = 0;
  800b60:	d0275f05 	stb	zero,-25220(gp)
   PRE_g144 = 0;
  800b64:	d0276f85 	stb	zero,-25154(gp)
   PRE_g150 = 0;
  800b68:	d02791c5 	stb	zero,-25017(gp)
   return;
  800b6c:	0001883a 	nop
}
  800b70:	e037883a 	mov	sp,fp
  800b74:	df000017 	ldw	fp,0(sp)
  800b78:	dec00104 	addi	sp,sp,4
  800b7c:	f800283a 	ret

00800b80 <tick>:
void tick(){
  800b80:	deffff04 	addi	sp,sp,-4
  800b84:	df000015 	stw	fp,0(sp)
  800b88:	d839883a 	mov	fp,sp
   if(_PRE_GO == 1){
  800b8c:	d0a75e17 	ldw	r2,-25224(gp)
  800b90:	10800058 	cmpnei	r2,r2,1
  800b94:	1000011e 	bne	r2,zero,800b9c <tick+0x1c>
      _GO = 0;
  800b98:	d0278305 	stb	zero,-25076(gp)
   }
   {
      g0 = _GO;
  800b9c:	d0a78303 	ldbu	r2,-25076(gp)
  800ba0:	d0a79345 	stb	r2,-25011(gp)
      g1 = g0;
  800ba4:	d0a79343 	ldbu	r2,-25011(gp)
  800ba8:	d0a763c5 	stb	r2,-25201(gp)
      g2 = g1;
  800bac:	d0a763c3 	ldbu	r2,-25201(gp)
  800bb0:	d0a77585 	stb	r2,-25130(gp)
      g151 =(PRE_g150);
  800bb4:	d0a791c3 	ldbu	r2,-25017(gp)
  800bb8:	d0a774c5 	stb	r2,-25133(gp)
      g149 = g0;
  800bbc:	d0a79343 	ldbu	r2,-25011(gp)
  800bc0:	d0a7a145 	stb	r2,-24955(gp)
      g150 =(g151||g149);
  800bc4:	d0a774c3 	ldbu	r2,-25133(gp)
  800bc8:	10803fcc 	andi	r2,r2,255
  800bcc:	1080201c 	xori	r2,r2,128
  800bd0:	10bfe004 	addi	r2,r2,-128
  800bd4:	1000051e 	bne	r2,zero,800bec <tick+0x6c>
  800bd8:	d0a7a143 	ldbu	r2,-24955(gp)
  800bdc:	10803fcc 	andi	r2,r2,255
  800be0:	1080201c 	xori	r2,r2,128
  800be4:	10bfe004 	addi	r2,r2,-128
  800be8:	10000226 	beq	r2,zero,800bf4 <tick+0x74>
  800bec:	00800044 	movi	r2,1
  800bf0:	00000106 	br	800bf8 <tick+0x78>
  800bf4:	0005883a 	mov	r2,zero
  800bf8:	d0a76205 	stb	r2,-25208(gp)
      if(g150){
  800bfc:	d0a76203 	ldbu	r2,-25208(gp)
  800c00:	10803fcc 	andi	r2,r2,255
  800c04:	1080201c 	xori	r2,r2,128
  800c08:	10bfe004 	addi	r2,r2,-128
  800c0c:	10001826 	beq	r2,zero,800c70 <tick+0xf0>
         stop_URI = 0;
  800c10:	d0278145 	stb	zero,-25083(gp)
         stop_VRP = 0;
  800c14:	d0279985 	stb	zero,-24986(gp)
         stop_PVARP = 0;
  800c18:	d02794c5 	stb	zero,-25005(gp)
         stop_AVI = 0;
  800c1c:	d0277145 	stb	zero,-25147(gp)
         start_AVI = 0;
  800c20:	d0277105 	stb	zero,-25148(gp)
         stop_LRI = 0;
  800c24:	d0279cc5 	stb	zero,-24973(gp)
         stop_AEI = 0;
  800c28:	d0277805 	stb	zero,-25120(gp)
         Vpace = 0;
  800c2c:	d0276385 	stb	zero,-25202(gp)
         start_PVARP = 0;
  800c30:	d0278345 	stb	zero,-25075(gp)
         start_AEI = 0;
  800c34:	d0278885 	stb	zero,-25054(gp)
         Apace = 0;
  800c38:	d0277c85 	stb	zero,-25102(gp)
         start_VRP = 0;
  800c3c:	d0276a85 	stb	zero,-25174(gp)
         start_LRI = 0;
  800c40:	d0278a45 	stb	zero,-25047(gp)
         start_URI = 0;
  800c44:	d0278e05 	stb	zero,-25032(gp)
         AVI_counting = 0;
  800c48:	d027a105 	stb	zero,-24956(gp)
         PVARP_counting = 0;
  800c4c:	d0276c85 	stb	zero,-25166(gp)
         VRP_counting = 0;
  800c50:	d0278105 	stb	zero,-25084(gp)
         AEI_counting = 0;
  800c54:	d0277c05 	stb	zero,-25104(gp)
         LRI_counting = 0;
  800c58:	d0277005 	stb	zero,-25152(gp)
         URI_counting = 0;
  800c5c:	d0276f45 	stb	zero,-25155(gp)
         AR = 0;
  800c60:	d0278e85 	stb	zero,-25030(gp)
         VR = 0;
  800c64:	d0276d85 	stb	zero,-25162(gp)
         URI_waiting = 0;
  800c68:	d0278445 	stb	zero,-25071(gp)
         reset_LRI = 0;
  800c6c:	d0276905 	stb	zero,-25180(gp)
      }
      g138 =(PRE_g137);
  800c70:	d0a788c3 	ldbu	r2,-25053(gp)
  800c74:	d0a78a85 	stb	r2,-25046(gp)
      _cg138 = URI_ex;
  800c78:	d0a78043 	ldbu	r2,-25087(gp)
  800c7c:	d0a79885 	stb	r2,-24990(gp)
      g139 =(g138&&(!(_cg138)));
  800c80:	d0a78a83 	ldbu	r2,-25046(gp)
  800c84:	10803fcc 	andi	r2,r2,255
  800c88:	1080201c 	xori	r2,r2,128
  800c8c:	10bfe004 	addi	r2,r2,-128
  800c90:	10000726 	beq	r2,zero,800cb0 <tick+0x130>
  800c94:	d0a79883 	ldbu	r2,-24990(gp)
  800c98:	10803fcc 	andi	r2,r2,255
  800c9c:	1080201c 	xori	r2,r2,128
  800ca0:	10bfe004 	addi	r2,r2,-128
  800ca4:	1000021e 	bne	r2,zero,800cb0 <tick+0x130>
  800ca8:	00800044 	movi	r2,1
  800cac:	00000106 	br	800cb4 <tick+0x134>
  800cb0:	0005883a 	mov	r2,zero
  800cb4:	d0a75605 	stb	r2,-25256(gp)
      if(g139){
  800cb8:	d0a75603 	ldbu	r2,-25256(gp)
  800cbc:	10803fcc 	andi	r2,r2,255
  800cc0:	1080201c 	xori	r2,r2,128
  800cc4:	10bfe004 	addi	r2,r2,-128
  800cc8:	10000226 	beq	r2,zero,800cd4 <tick+0x154>
         URI_counting =(URI_counting||1);
  800ccc:	00800044 	movi	r2,1
  800cd0:	d0a76f45 	stb	r2,-25155(gp)
      }
      g13 =(PRE_g12);
  800cd4:	d0a77343 	ldbu	r2,-25139(gp)
  800cd8:	d0a78c85 	stb	r2,-25038(gp)
      g13b = g13;
  800cdc:	d0a78c83 	ldbu	r2,-25038(gp)
  800ce0:	d0a7a305 	stb	r2,-24948(gp)
      _cg13 =(!(URI_counting));
  800ce4:	d0a76f43 	ldbu	r2,-25155(gp)
  800ce8:	10803fcc 	andi	r2,r2,255
  800cec:	1080201c 	xori	r2,r2,128
  800cf0:	10bfe004 	addi	r2,r2,-128
  800cf4:	1005003a 	cmpeq	r2,r2,zero
  800cf8:	d0a79205 	stb	r2,-25016(gp)
      g14 =(g13b&&(!(_cg13)));
  800cfc:	d0a7a303 	ldbu	r2,-24948(gp)
  800d00:	10803fcc 	andi	r2,r2,255
  800d04:	1080201c 	xori	r2,r2,128
  800d08:	10bfe004 	addi	r2,r2,-128
  800d0c:	10000726 	beq	r2,zero,800d2c <tick+0x1ac>
  800d10:	d0a79203 	ldbu	r2,-25016(gp)
  800d14:	10803fcc 	andi	r2,r2,255
  800d18:	1080201c 	xori	r2,r2,128
  800d1c:	10bfe004 	addi	r2,r2,-128
  800d20:	1000021e 	bne	r2,zero,800d2c <tick+0x1ac>
  800d24:	00800044 	movi	r2,1
  800d28:	00000106 	br	800d30 <tick+0x1b0>
  800d2c:	0005883a 	mov	r2,zero
  800d30:	d0a77b85 	stb	r2,-25106(gp)
      _cg14 = URI_counting;
  800d34:	d0a76f43 	ldbu	r2,-25155(gp)
  800d38:	d0a772c5 	stb	r2,-25141(gp)
      g9 =(PRE_g8);
  800d3c:	d0a76ac3 	ldbu	r2,-25173(gp)
  800d40:	d0a75cc5 	stb	r2,-25229(gp)
      _cg9 = AVI_ex;
  800d44:	d0a77cc3 	ldbu	r2,-25101(gp)
  800d48:	d0a79245 	stb	r2,-25015(gp)
      g10 =((g14&&_cg14)||(g9&&_cg9));
  800d4c:	d0a77b83 	ldbu	r2,-25106(gp)
  800d50:	10803fcc 	andi	r2,r2,255
  800d54:	1080201c 	xori	r2,r2,128
  800d58:	10bfe004 	addi	r2,r2,-128
  800d5c:	10000526 	beq	r2,zero,800d74 <tick+0x1f4>
  800d60:	d0a772c3 	ldbu	r2,-25141(gp)
  800d64:	10803fcc 	andi	r2,r2,255
  800d68:	1080201c 	xori	r2,r2,128
  800d6c:	10bfe004 	addi	r2,r2,-128
  800d70:	10000a1e 	bne	r2,zero,800d9c <tick+0x21c>
  800d74:	d0a75cc3 	ldbu	r2,-25229(gp)
  800d78:	10803fcc 	andi	r2,r2,255
  800d7c:	1080201c 	xori	r2,r2,128
  800d80:	10bfe004 	addi	r2,r2,-128
  800d84:	10000726 	beq	r2,zero,800da4 <tick+0x224>
  800d88:	d0a79243 	ldbu	r2,-25015(gp)
  800d8c:	10803fcc 	andi	r2,r2,255
  800d90:	1080201c 	xori	r2,r2,128
  800d94:	10bfe004 	addi	r2,r2,-128
  800d98:	10000226 	beq	r2,zero,800da4 <tick+0x224>
  800d9c:	00800044 	movi	r2,1
  800da0:	00000106 	br	800da8 <tick+0x228>
  800da4:	0005883a 	mov	r2,zero
  800da8:	d0a7a205 	stb	r2,-24952(gp)
      _cg10 =(!(URI_counting));
  800dac:	d0a76f43 	ldbu	r2,-25155(gp)
  800db0:	10803fcc 	andi	r2,r2,255
  800db4:	1080201c 	xori	r2,r2,128
  800db8:	10bfe004 	addi	r2,r2,-128
  800dbc:	1005003a 	cmpeq	r2,r2,zero
  800dc0:	d0a78545 	stb	r2,-25067(gp)
      g11 =((g13b&&_cg13)||(g10&&_cg10));
  800dc4:	d0a7a303 	ldbu	r2,-24948(gp)
  800dc8:	10803fcc 	andi	r2,r2,255
  800dcc:	1080201c 	xori	r2,r2,128
  800dd0:	10bfe004 	addi	r2,r2,-128
  800dd4:	10000526 	beq	r2,zero,800dec <tick+0x26c>
  800dd8:	d0a79203 	ldbu	r2,-25016(gp)
  800ddc:	10803fcc 	andi	r2,r2,255
  800de0:	1080201c 	xori	r2,r2,128
  800de4:	10bfe004 	addi	r2,r2,-128
  800de8:	10000a1e 	bne	r2,zero,800e14 <tick+0x294>
  800dec:	d0a7a203 	ldbu	r2,-24952(gp)
  800df0:	10803fcc 	andi	r2,r2,255
  800df4:	1080201c 	xori	r2,r2,128
  800df8:	10bfe004 	addi	r2,r2,-128
  800dfc:	10000726 	beq	r2,zero,800e1c <tick+0x29c>
  800e00:	d0a78543 	ldbu	r2,-25067(gp)
  800e04:	10803fcc 	andi	r2,r2,255
  800e08:	1080201c 	xori	r2,r2,128
  800e0c:	10bfe004 	addi	r2,r2,-128
  800e10:	10000226 	beq	r2,zero,800e1c <tick+0x29c>
  800e14:	00800044 	movi	r2,1
  800e18:	00000106 	br	800e20 <tick+0x2a0>
  800e1c:	0005883a 	mov	r2,zero
  800e20:	d0a79745 	stb	r2,-24995(gp)
      if(g11){
  800e24:	d0a79743 	ldbu	r2,-24995(gp)
  800e28:	10803fcc 	andi	r2,r2,255
  800e2c:	1080201c 	xori	r2,r2,128
  800e30:	10bfe004 	addi	r2,r2,-128
  800e34:	10000226 	beq	r2,zero,800e40 <tick+0x2c0>
         Vpace =(Vpace||1);
  800e38:	00800044 	movi	r2,1
  800e3c:	d0a76385 	stb	r2,-25202(gp)
      }
      g4 =(PRE_g3);
  800e40:	d0a75f43 	ldbu	r2,-25219(gp)
  800e44:	d0a75645 	stb	r2,-25255(gp)
      _cg4 = PVARP_ex;
  800e48:	d0a79103 	ldbu	r2,-25020(gp)
  800e4c:	d0a79f05 	stb	r2,-24964(gp)
      g90 =(PRE_g89);
  800e50:	d0a78dc3 	ldbu	r2,-25033(gp)
  800e54:	d0a782c5 	stb	r2,-25077(gp)
      _cg90 = AVI_ex;
  800e58:	d0a77cc3 	ldbu	r2,-25101(gp)
  800e5c:	d0a77605 	stb	r2,-25128(gp)
      g94 =(PRE_g93);
  800e60:	d0a796c3 	ldbu	r2,-24997(gp)
  800e64:	d0a77485 	stb	r2,-25134(gp)
      g91 =((g90&&_cg90)||g94);
  800e68:	d0a782c3 	ldbu	r2,-25077(gp)
  800e6c:	10803fcc 	andi	r2,r2,255
  800e70:	1080201c 	xori	r2,r2,128
  800e74:	10bfe004 	addi	r2,r2,-128
  800e78:	10000526 	beq	r2,zero,800e90 <tick+0x310>
  800e7c:	d0a77603 	ldbu	r2,-25128(gp)
  800e80:	10803fcc 	andi	r2,r2,255
  800e84:	1080201c 	xori	r2,r2,128
  800e88:	10bfe004 	addi	r2,r2,-128
  800e8c:	1000051e 	bne	r2,zero,800ea4 <tick+0x324>
  800e90:	d0a77483 	ldbu	r2,-25134(gp)
  800e94:	10803fcc 	andi	r2,r2,255
  800e98:	1080201c 	xori	r2,r2,128
  800e9c:	10bfe004 	addi	r2,r2,-128
  800ea0:	10000226 	beq	r2,zero,800eac <tick+0x32c>
  800ea4:	00800044 	movi	r2,1
  800ea8:	00000106 	br	800eb0 <tick+0x330>
  800eac:	0005883a 	mov	r2,zero
  800eb0:	d0a75585 	stb	r2,-25258(gp)
      _cg91 = URI_ex;
  800eb4:	d0a78043 	ldbu	r2,-25087(gp)
  800eb8:	d0a793c5 	stb	r2,-25009(gp)
      g92 =(g91&&_cg91);
  800ebc:	d0a75583 	ldbu	r2,-25258(gp)
  800ec0:	10803fcc 	andi	r2,r2,255
  800ec4:	1080201c 	xori	r2,r2,128
  800ec8:	10bfe004 	addi	r2,r2,-128
  800ecc:	10000726 	beq	r2,zero,800eec <tick+0x36c>
  800ed0:	d0a793c3 	ldbu	r2,-25009(gp)
  800ed4:	10803fcc 	andi	r2,r2,255
  800ed8:	1080201c 	xori	r2,r2,128
  800edc:	10bfe004 	addi	r2,r2,-128
  800ee0:	10000226 	beq	r2,zero,800eec <tick+0x36c>
  800ee4:	00800044 	movi	r2,1
  800ee8:	00000106 	br	800ef0 <tick+0x370>
  800eec:	0005883a 	mov	r2,zero
  800ef0:	d0a76345 	stb	r2,-25203(gp)
      if(g92){
  800ef4:	d0a76343 	ldbu	r2,-25203(gp)
  800ef8:	10803fcc 	andi	r2,r2,255
  800efc:	1080201c 	xori	r2,r2,128
  800f00:	10bfe004 	addi	r2,r2,-128
  800f04:	10000226 	beq	r2,zero,800f10 <tick+0x390>
         Vpace =(Vpace||1);
  800f08:	00800044 	movi	r2,1
  800f0c:	d0a76385 	stb	r2,-25202(gp)
      }
      g68 =(PRE_g67);
  800f10:	d0a78083 	ldbu	r2,-25086(gp)
  800f14:	d0a79645 	stb	r2,-24999(gp)
      _cg68 = Vsense;
  800f18:	d0a77903 	ldbu	r2,-25116(gp)
  800f1c:	d0a77385 	stb	r2,-25138(gp)
      g71 =(g68&&(!(_cg68)));
  800f20:	d0a79643 	ldbu	r2,-24999(gp)
  800f24:	10803fcc 	andi	r2,r2,255
  800f28:	1080201c 	xori	r2,r2,128
  800f2c:	10bfe004 	addi	r2,r2,-128
  800f30:	10000726 	beq	r2,zero,800f50 <tick+0x3d0>
  800f34:	d0a77383 	ldbu	r2,-25138(gp)
  800f38:	10803fcc 	andi	r2,r2,255
  800f3c:	1080201c 	xori	r2,r2,128
  800f40:	10bfe004 	addi	r2,r2,-128
  800f44:	1000021e 	bne	r2,zero,800f50 <tick+0x3d0>
  800f48:	00800044 	movi	r2,1
  800f4c:	00000106 	br	800f54 <tick+0x3d4>
  800f50:	0005883a 	mov	r2,zero
  800f54:	d0a76485 	stb	r2,-25198(gp)
      _cg71 = Vpace;
  800f58:	d0a76383 	ldbu	r2,-25202(gp)
  800f5c:	d0a78245 	stb	r2,-25079(gp)
      g73 =(g71&&(!(_cg71)));
  800f60:	d0a76483 	ldbu	r2,-25198(gp)
  800f64:	10803fcc 	andi	r2,r2,255
  800f68:	1080201c 	xori	r2,r2,128
  800f6c:	10bfe004 	addi	r2,r2,-128
  800f70:	10000726 	beq	r2,zero,800f90 <tick+0x410>
  800f74:	d0a78243 	ldbu	r2,-25079(gp)
  800f78:	10803fcc 	andi	r2,r2,255
  800f7c:	1080201c 	xori	r2,r2,128
  800f80:	10bfe004 	addi	r2,r2,-128
  800f84:	1000021e 	bne	r2,zero,800f90 <tick+0x410>
  800f88:	00800044 	movi	r2,1
  800f8c:	00000106 	br	800f94 <tick+0x414>
  800f90:	0005883a 	mov	r2,zero
  800f94:	d0a798c5 	stb	r2,-24989(gp)
      _cg73 = LRI_ex;
  800f98:	d0a776c3 	ldbu	r2,-25125(gp)
  800f9c:	d0a76145 	stb	r2,-25211(gp)
      g74 =(g73&&_cg73);
  800fa0:	d0a798c3 	ldbu	r2,-24989(gp)
  800fa4:	10803fcc 	andi	r2,r2,255
  800fa8:	1080201c 	xori	r2,r2,128
  800fac:	10bfe004 	addi	r2,r2,-128
  800fb0:	10000726 	beq	r2,zero,800fd0 <tick+0x450>
  800fb4:	d0a76143 	ldbu	r2,-25211(gp)
  800fb8:	10803fcc 	andi	r2,r2,255
  800fbc:	1080201c 	xori	r2,r2,128
  800fc0:	10bfe004 	addi	r2,r2,-128
  800fc4:	10000226 	beq	r2,zero,800fd0 <tick+0x450>
  800fc8:	00800044 	movi	r2,1
  800fcc:	00000106 	br	800fd4 <tick+0x454>
  800fd0:	0005883a 	mov	r2,zero
  800fd4:	d0a7a3c5 	stb	r2,-24945(gp)
      if(g74){
  800fd8:	d0a7a3c3 	ldbu	r2,-24945(gp)
  800fdc:	10803fcc 	andi	r2,r2,255
  800fe0:	1080201c 	xori	r2,r2,128
  800fe4:	10bfe004 	addi	r2,r2,-128
  800fe8:	10000226 	beq	r2,zero,800ff4 <tick+0x474>
         Vpace =(Vpace||1);
  800fec:	00800044 	movi	r2,1
  800ff0:	d0a76385 	stb	r2,-25202(gp)
      }
      g15 =(g9&&(!(_cg9)));
  800ff4:	d0a75cc3 	ldbu	r2,-25229(gp)
  800ff8:	10803fcc 	andi	r2,r2,255
  800ffc:	1080201c 	xori	r2,r2,128
  801000:	10bfe004 	addi	r2,r2,-128
  801004:	10000726 	beq	r2,zero,801024 <tick+0x4a4>
  801008:	d0a79243 	ldbu	r2,-25015(gp)
  80100c:	10803fcc 	andi	r2,r2,255
  801010:	1080201c 	xori	r2,r2,128
  801014:	10bfe004 	addi	r2,r2,-128
  801018:	1000021e 	bne	r2,zero,801024 <tick+0x4a4>
  80101c:	00800044 	movi	r2,1
  801020:	00000106 	br	801028 <tick+0x4a8>
  801024:	0005883a 	mov	r2,zero
  801028:	d0a78285 	stb	r2,-25078(gp)
      _cg15 = Vsense;
  80102c:	d0a77903 	ldbu	r2,-25116(gp)
  801030:	d0a760c5 	stb	r2,-25213(gp)
      g17 =(g15&&(!(_cg15)));
  801034:	d0a78283 	ldbu	r2,-25078(gp)
  801038:	10803fcc 	andi	r2,r2,255
  80103c:	1080201c 	xori	r2,r2,128
  801040:	10bfe004 	addi	r2,r2,-128
  801044:	10000726 	beq	r2,zero,801064 <tick+0x4e4>
  801048:	d0a760c3 	ldbu	r2,-25213(gp)
  80104c:	10803fcc 	andi	r2,r2,255
  801050:	1080201c 	xori	r2,r2,128
  801054:	10bfe004 	addi	r2,r2,-128
  801058:	1000021e 	bne	r2,zero,801064 <tick+0x4e4>
  80105c:	00800044 	movi	r2,1
  801060:	00000106 	br	801068 <tick+0x4e8>
  801064:	0005883a 	mov	r2,zero
  801068:	d0a76745 	stb	r2,-25187(gp)
      _cg17 = Vpace;
  80106c:	d0a76383 	ldbu	r2,-25202(gp)
  801070:	d0a79405 	stb	r2,-25008(gp)
      g18 =(g17&&_cg17);
  801074:	d0a76743 	ldbu	r2,-25187(gp)
  801078:	10803fcc 	andi	r2,r2,255
  80107c:	1080201c 	xori	r2,r2,128
  801080:	10bfe004 	addi	r2,r2,-128
  801084:	10000726 	beq	r2,zero,8010a4 <tick+0x524>
  801088:	d0a79403 	ldbu	r2,-25008(gp)
  80108c:	10803fcc 	andi	r2,r2,255
  801090:	1080201c 	xori	r2,r2,128
  801094:	10bfe004 	addi	r2,r2,-128
  801098:	10000226 	beq	r2,zero,8010a4 <tick+0x524>
  80109c:	00800044 	movi	r2,1
  8010a0:	00000106 	br	8010a8 <tick+0x528>
  8010a4:	0005883a 	mov	r2,zero
  8010a8:	d0a76b05 	stb	r2,-25172(gp)
      if(g18){
  8010ac:	d0a76b03 	ldbu	r2,-25172(gp)
  8010b0:	10803fcc 	andi	r2,r2,255
  8010b4:	1080201c 	xori	r2,r2,128
  8010b8:	10bfe004 	addi	r2,r2,-128
  8010bc:	10000226 	beq	r2,zero,8010c8 <tick+0x548>
         stop_AVI =(stop_AVI||1);
  8010c0:	00800044 	movi	r2,1
  8010c4:	d0a77145 	stb	r2,-25147(gp)
      }
      g16 =(g15&&_cg15);
  8010c8:	d0a78283 	ldbu	r2,-25078(gp)
  8010cc:	10803fcc 	andi	r2,r2,255
  8010d0:	1080201c 	xori	r2,r2,128
  8010d4:	10bfe004 	addi	r2,r2,-128
  8010d8:	10000726 	beq	r2,zero,8010f8 <tick+0x578>
  8010dc:	d0a760c3 	ldbu	r2,-25213(gp)
  8010e0:	10803fcc 	andi	r2,r2,255
  8010e4:	1080201c 	xori	r2,r2,128
  8010e8:	10bfe004 	addi	r2,r2,-128
  8010ec:	10000226 	beq	r2,zero,8010f8 <tick+0x578>
  8010f0:	00800044 	movi	r2,1
  8010f4:	00000106 	br	8010fc <tick+0x57c>
  8010f8:	0005883a 	mov	r2,zero
  8010fc:	d0a79545 	stb	r2,-25003(gp)
      if(g16){
  801100:	d0a79543 	ldbu	r2,-25003(gp)
  801104:	10803fcc 	andi	r2,r2,255
  801108:	1080201c 	xori	r2,r2,128
  80110c:	10bfe004 	addi	r2,r2,-128
  801110:	10000226 	beq	r2,zero,80111c <tick+0x59c>
         stop_AVI =(stop_AVI||1);
  801114:	00800044 	movi	r2,1
  801118:	d0a77145 	stb	r2,-25147(gp)
      }
      g3 =(g11||(g4&&(!(_cg4)))||g18||g2||g16);
  80111c:	d0a79743 	ldbu	r2,-24995(gp)
  801120:	10803fcc 	andi	r2,r2,255
  801124:	1080201c 	xori	r2,r2,128
  801128:	10bfe004 	addi	r2,r2,-128
  80112c:	1000191e 	bne	r2,zero,801194 <tick+0x614>
  801130:	d0a75643 	ldbu	r2,-25255(gp)
  801134:	10803fcc 	andi	r2,r2,255
  801138:	1080201c 	xori	r2,r2,128
  80113c:	10bfe004 	addi	r2,r2,-128
  801140:	10000526 	beq	r2,zero,801158 <tick+0x5d8>
  801144:	d0a79f03 	ldbu	r2,-24964(gp)
  801148:	10803fcc 	andi	r2,r2,255
  80114c:	1080201c 	xori	r2,r2,128
  801150:	10bfe004 	addi	r2,r2,-128
  801154:	10000f26 	beq	r2,zero,801194 <tick+0x614>
  801158:	d0a76b03 	ldbu	r2,-25172(gp)
  80115c:	10803fcc 	andi	r2,r2,255
  801160:	1080201c 	xori	r2,r2,128
  801164:	10bfe004 	addi	r2,r2,-128
  801168:	10000a1e 	bne	r2,zero,801194 <tick+0x614>
  80116c:	d0a77583 	ldbu	r2,-25130(gp)
  801170:	10803fcc 	andi	r2,r2,255
  801174:	1080201c 	xori	r2,r2,128
  801178:	10bfe004 	addi	r2,r2,-128
  80117c:	1000051e 	bne	r2,zero,801194 <tick+0x614>
  801180:	d0a79543 	ldbu	r2,-25003(gp)
  801184:	10803fcc 	andi	r2,r2,255
  801188:	1080201c 	xori	r2,r2,128
  80118c:	10bfe004 	addi	r2,r2,-128
  801190:	10000226 	beq	r2,zero,80119c <tick+0x61c>
  801194:	00800044 	movi	r2,1
  801198:	00000106 	br	8011a0 <tick+0x620>
  80119c:	0005883a 	mov	r2,zero
  8011a0:	d0a75a85 	stb	r2,-25238(gp)
      g28 =(PRE_g27);
  8011a4:	d0a75b83 	ldbu	r2,-25234(gp)
  8011a8:	d0a79845 	stb	r2,-24991(gp)
      _cg28 = Asense;
  8011ac:	d0a792c3 	ldbu	r2,-25013(gp)
  8011b0:	d0a771c5 	stb	r2,-25145(gp)
      g30 =(g28&&(!(_cg28)));
  8011b4:	d0a79843 	ldbu	r2,-24991(gp)
  8011b8:	10803fcc 	andi	r2,r2,255
  8011bc:	1080201c 	xori	r2,r2,128
  8011c0:	10bfe004 	addi	r2,r2,-128
  8011c4:	10000726 	beq	r2,zero,8011e4 <tick+0x664>
  8011c8:	d0a771c3 	ldbu	r2,-25145(gp)
  8011cc:	10803fcc 	andi	r2,r2,255
  8011d0:	1080201c 	xori	r2,r2,128
  8011d4:	10bfe004 	addi	r2,r2,-128
  8011d8:	1000021e 	bne	r2,zero,8011e4 <tick+0x664>
  8011dc:	00800044 	movi	r2,1
  8011e0:	00000106 	br	8011e8 <tick+0x668>
  8011e4:	0005883a 	mov	r2,zero
  8011e8:	d0a79485 	stb	r2,-25006(gp)
      _cg30 = AEI_ex;
  8011ec:	d0a75ac3 	ldbu	r2,-25237(gp)
  8011f0:	d0a79505 	stb	r2,-25004(gp)
      g31 =(g30&&_cg30);
  8011f4:	d0a79483 	ldbu	r2,-25006(gp)
  8011f8:	10803fcc 	andi	r2,r2,255
  8011fc:	1080201c 	xori	r2,r2,128
  801200:	10bfe004 	addi	r2,r2,-128
  801204:	10000726 	beq	r2,zero,801224 <tick+0x6a4>
  801208:	d0a79503 	ldbu	r2,-25004(gp)
  80120c:	10803fcc 	andi	r2,r2,255
  801210:	1080201c 	xori	r2,r2,128
  801214:	10bfe004 	addi	r2,r2,-128
  801218:	10000226 	beq	r2,zero,801224 <tick+0x6a4>
  80121c:	00800044 	movi	r2,1
  801220:	00000106 	br	801228 <tick+0x6a8>
  801224:	0005883a 	mov	r2,zero
  801228:	d0a76805 	stb	r2,-25184(gp)
      if(g31){
  80122c:	d0a76803 	ldbu	r2,-25184(gp)
  801230:	10803fcc 	andi	r2,r2,255
  801234:	1080201c 	xori	r2,r2,128
  801238:	10bfe004 	addi	r2,r2,-128
  80123c:	10000226 	beq	r2,zero,801248 <tick+0x6c8>
         Apace =(Apace||1);
  801240:	00800044 	movi	r2,1
  801244:	d0a77c85 	stb	r2,-25102(gp)
      }
      g6 =(PRE_g5);
  801248:	d0a79c83 	ldbu	r2,-24974(gp)
  80124c:	d0a78fc5 	stb	r2,-25025(gp)
      _cg6 = Asense;
  801250:	d0a792c3 	ldbu	r2,-25013(gp)
  801254:	d0a77c45 	stb	r2,-25103(gp)
      g19 =(g6&&(!(_cg6)));
  801258:	d0a78fc3 	ldbu	r2,-25025(gp)
  80125c:	10803fcc 	andi	r2,r2,255
  801260:	1080201c 	xori	r2,r2,128
  801264:	10bfe004 	addi	r2,r2,-128
  801268:	10000726 	beq	r2,zero,801288 <tick+0x708>
  80126c:	d0a77c43 	ldbu	r2,-25103(gp)
  801270:	10803fcc 	andi	r2,r2,255
  801274:	1080201c 	xori	r2,r2,128
  801278:	10bfe004 	addi	r2,r2,-128
  80127c:	1000021e 	bne	r2,zero,801288 <tick+0x708>
  801280:	00800044 	movi	r2,1
  801284:	00000106 	br	80128c <tick+0x70c>
  801288:	0005883a 	mov	r2,zero
  80128c:	d0a756c5 	stb	r2,-25253(gp)
      _cg19 = Apace;
  801290:	d0a77c83 	ldbu	r2,-25102(gp)
  801294:	d0a79045 	stb	r2,-25023(gp)
      g5 =((g4&&_cg4)||(g19&&(!(_cg19))));
  801298:	d0a75643 	ldbu	r2,-25255(gp)
  80129c:	10803fcc 	andi	r2,r2,255
  8012a0:	1080201c 	xori	r2,r2,128
  8012a4:	10bfe004 	addi	r2,r2,-128
  8012a8:	10000526 	beq	r2,zero,8012c0 <tick+0x740>
  8012ac:	d0a79f03 	ldbu	r2,-24964(gp)
  8012b0:	10803fcc 	andi	r2,r2,255
  8012b4:	1080201c 	xori	r2,r2,128
  8012b8:	10bfe004 	addi	r2,r2,-128
  8012bc:	10000a1e 	bne	r2,zero,8012e8 <tick+0x768>
  8012c0:	d0a756c3 	ldbu	r2,-25253(gp)
  8012c4:	10803fcc 	andi	r2,r2,255
  8012c8:	1080201c 	xori	r2,r2,128
  8012cc:	10bfe004 	addi	r2,r2,-128
  8012d0:	10000726 	beq	r2,zero,8012f0 <tick+0x770>
  8012d4:	d0a79043 	ldbu	r2,-25023(gp)
  8012d8:	10803fcc 	andi	r2,r2,255
  8012dc:	1080201c 	xori	r2,r2,128
  8012e0:	10bfe004 	addi	r2,r2,-128
  8012e4:	1000021e 	bne	r2,zero,8012f0 <tick+0x770>
  8012e8:	00800044 	movi	r2,1
  8012ec:	00000106 	br	8012f4 <tick+0x774>
  8012f0:	0005883a 	mov	r2,zero
  8012f4:	d0a77445 	stb	r2,-25135(gp)
      g7 =((g6&&_cg6)||(g19&&_cg19));
  8012f8:	d0a78fc3 	ldbu	r2,-25025(gp)
  8012fc:	10803fcc 	andi	r2,r2,255
  801300:	1080201c 	xori	r2,r2,128
  801304:	10bfe004 	addi	r2,r2,-128
  801308:	10000526 	beq	r2,zero,801320 <tick+0x7a0>
  80130c:	d0a77c43 	ldbu	r2,-25103(gp)
  801310:	10803fcc 	andi	r2,r2,255
  801314:	1080201c 	xori	r2,r2,128
  801318:	10bfe004 	addi	r2,r2,-128
  80131c:	10000a1e 	bne	r2,zero,801348 <tick+0x7c8>
  801320:	d0a756c3 	ldbu	r2,-25253(gp)
  801324:	10803fcc 	andi	r2,r2,255
  801328:	1080201c 	xori	r2,r2,128
  80132c:	10bfe004 	addi	r2,r2,-128
  801330:	10000726 	beq	r2,zero,801350 <tick+0x7d0>
  801334:	d0a79043 	ldbu	r2,-25023(gp)
  801338:	10803fcc 	andi	r2,r2,255
  80133c:	1080201c 	xori	r2,r2,128
  801340:	10bfe004 	addi	r2,r2,-128
  801344:	10000226 	beq	r2,zero,801350 <tick+0x7d0>
  801348:	00800044 	movi	r2,1
  80134c:	00000106 	br	801354 <tick+0x7d4>
  801350:	0005883a 	mov	r2,zero
  801354:	d0a775c5 	stb	r2,-25129(gp)
      if(g7){
  801358:	d0a775c3 	ldbu	r2,-25129(gp)
  80135c:	10803fcc 	andi	r2,r2,255
  801360:	1080201c 	xori	r2,r2,128
  801364:	10bfe004 	addi	r2,r2,-128
  801368:	10000226 	beq	r2,zero,801374 <tick+0x7f4>
         start_AVI =(start_AVI||1);
  80136c:	00800044 	movi	r2,1
  801370:	d0a77105 	stb	r2,-25148(gp)
      }
      g8 =((g17&&(!(_cg17)))||g7);
  801374:	d0a76743 	ldbu	r2,-25187(gp)
  801378:	10803fcc 	andi	r2,r2,255
  80137c:	1080201c 	xori	r2,r2,128
  801380:	10bfe004 	addi	r2,r2,-128
  801384:	10000526 	beq	r2,zero,80139c <tick+0x81c>
  801388:	d0a79403 	ldbu	r2,-25008(gp)
  80138c:	10803fcc 	andi	r2,r2,255
  801390:	1080201c 	xori	r2,r2,128
  801394:	10bfe004 	addi	r2,r2,-128
  801398:	10000526 	beq	r2,zero,8013b0 <tick+0x830>
  80139c:	d0a775c3 	ldbu	r2,-25129(gp)
  8013a0:	10803fcc 	andi	r2,r2,255
  8013a4:	1080201c 	xori	r2,r2,128
  8013a8:	10bfe004 	addi	r2,r2,-128
  8013ac:	10000226 	beq	r2,zero,8013b8 <tick+0x838>
  8013b0:	00800044 	movi	r2,1
  8013b4:	00000106 	br	8013bc <tick+0x83c>
  8013b8:	0005883a 	mov	r2,zero
  8013bc:	d0a78d45 	stb	r2,-25035(gp)
      g12 =((g14&&(!(_cg14)))||(g10&&(!(_cg10))));
  8013c0:	d0a77b83 	ldbu	r2,-25106(gp)
  8013c4:	10803fcc 	andi	r2,r2,255
  8013c8:	1080201c 	xori	r2,r2,128
  8013cc:	10bfe004 	addi	r2,r2,-128
  8013d0:	10000526 	beq	r2,zero,8013e8 <tick+0x868>
  8013d4:	d0a772c3 	ldbu	r2,-25141(gp)
  8013d8:	10803fcc 	andi	r2,r2,255
  8013dc:	1080201c 	xori	r2,r2,128
  8013e0:	10bfe004 	addi	r2,r2,-128
  8013e4:	10000a26 	beq	r2,zero,801410 <tick+0x890>
  8013e8:	d0a7a203 	ldbu	r2,-24952(gp)
  8013ec:	10803fcc 	andi	r2,r2,255
  8013f0:	1080201c 	xori	r2,r2,128
  8013f4:	10bfe004 	addi	r2,r2,-128
  8013f8:	10000726 	beq	r2,zero,801418 <tick+0x898>
  8013fc:	d0a78543 	ldbu	r2,-25067(gp)
  801400:	10803fcc 	andi	r2,r2,255
  801404:	1080201c 	xori	r2,r2,128
  801408:	10bfe004 	addi	r2,r2,-128
  80140c:	1000021e 	bne	r2,zero,801418 <tick+0x898>
  801410:	00800044 	movi	r2,1
  801414:	00000106 	br	80141c <tick+0x89c>
  801418:	0005883a 	mov	r2,zero
  80141c:	d0a765c5 	stb	r2,-25193(gp)
      g21 = g1;
  801420:	d0a763c3 	ldbu	r2,-25201(gp)
  801424:	d0a77245 	stb	r2,-25143(gp)
      g29 =(g28&&_cg28);
  801428:	d0a79843 	ldbu	r2,-24991(gp)
  80142c:	10803fcc 	andi	r2,r2,255
  801430:	1080201c 	xori	r2,r2,128
  801434:	10bfe004 	addi	r2,r2,-128
  801438:	10000726 	beq	r2,zero,801458 <tick+0x8d8>
  80143c:	d0a771c3 	ldbu	r2,-25145(gp)
  801440:	10803fcc 	andi	r2,r2,255
  801444:	1080201c 	xori	r2,r2,128
  801448:	10bfe004 	addi	r2,r2,-128
  80144c:	10000226 	beq	r2,zero,801458 <tick+0x8d8>
  801450:	00800044 	movi	r2,1
  801454:	00000106 	br	80145c <tick+0x8dc>
  801458:	0005883a 	mov	r2,zero
  80145c:	d0a79ec5 	stb	r2,-24965(gp)
      if(g29){
  801460:	d0a79ec3 	ldbu	r2,-24965(gp)
  801464:	10803fcc 	andi	r2,r2,255
  801468:	1080201c 	xori	r2,r2,128
  80146c:	10bfe004 	addi	r2,r2,-128
  801470:	10000226 	beq	r2,zero,80147c <tick+0x8fc>
         stop_AEI =(stop_AEI||1);
  801474:	00800044 	movi	r2,1
  801478:	d0a77805 	stb	r2,-25120(gp)
      }
      g23 =(PRE_g22);
  80147c:	d0a780c3 	ldbu	r2,-25085(gp)
  801480:	d0a77a45 	stb	r2,-25111(gp)
      g23b = g23;
  801484:	d0a77a43 	ldbu	r2,-25111(gp)
  801488:	d0a78585 	stb	r2,-25066(gp)
      _cg23 = Vpace;
  80148c:	d0a76383 	ldbu	r2,-25202(gp)
  801490:	d0a79b85 	stb	r2,-24978(gp)
      g32 =(g23b&&(!(_cg23)));
  801494:	d0a78583 	ldbu	r2,-25066(gp)
  801498:	10803fcc 	andi	r2,r2,255
  80149c:	1080201c 	xori	r2,r2,128
  8014a0:	10bfe004 	addi	r2,r2,-128
  8014a4:	10000726 	beq	r2,zero,8014c4 <tick+0x944>
  8014a8:	d0a79b83 	ldbu	r2,-24978(gp)
  8014ac:	10803fcc 	andi	r2,r2,255
  8014b0:	1080201c 	xori	r2,r2,128
  8014b4:	10bfe004 	addi	r2,r2,-128
  8014b8:	1000021e 	bne	r2,zero,8014c4 <tick+0x944>
  8014bc:	00800044 	movi	r2,1
  8014c0:	00000106 	br	8014c8 <tick+0x948>
  8014c4:	0005883a 	mov	r2,zero
  8014c8:	d0a79a45 	stb	r2,-24983(gp)
      _cg32 = Vsense;
  8014cc:	d0a77903 	ldbu	r2,-25116(gp)
  8014d0:	d0a7a0c5 	stb	r2,-24957(gp)
      g22 =(g29||g21||g31||(g32&&(!(_cg32))));
  8014d4:	d0a79ec3 	ldbu	r2,-24965(gp)
  8014d8:	10803fcc 	andi	r2,r2,255
  8014dc:	1080201c 	xori	r2,r2,128
  8014e0:	10bfe004 	addi	r2,r2,-128
  8014e4:	1000141e 	bne	r2,zero,801538 <tick+0x9b8>
  8014e8:	d0a77243 	ldbu	r2,-25143(gp)
  8014ec:	10803fcc 	andi	r2,r2,255
  8014f0:	1080201c 	xori	r2,r2,128
  8014f4:	10bfe004 	addi	r2,r2,-128
  8014f8:	10000f1e 	bne	r2,zero,801538 <tick+0x9b8>
  8014fc:	d0a76803 	ldbu	r2,-25184(gp)
  801500:	10803fcc 	andi	r2,r2,255
  801504:	1080201c 	xori	r2,r2,128
  801508:	10bfe004 	addi	r2,r2,-128
  80150c:	10000a1e 	bne	r2,zero,801538 <tick+0x9b8>
  801510:	d0a79a43 	ldbu	r2,-24983(gp)
  801514:	10803fcc 	andi	r2,r2,255
  801518:	1080201c 	xori	r2,r2,128
  80151c:	10bfe004 	addi	r2,r2,-128
  801520:	10000726 	beq	r2,zero,801540 <tick+0x9c0>
  801524:	d0a7a0c3 	ldbu	r2,-24957(gp)
  801528:	10803fcc 	andi	r2,r2,255
  80152c:	1080201c 	xori	r2,r2,128
  801530:	10bfe004 	addi	r2,r2,-128
  801534:	1000021e 	bne	r2,zero,801540 <tick+0x9c0>
  801538:	00800044 	movi	r2,1
  80153c:	00000106 	br	801544 <tick+0x9c4>
  801540:	0005883a 	mov	r2,zero
  801544:	d0a797c5 	stb	r2,-24993(gp)
      g24 =((g32&&_cg32)||(g23b&&_cg23));
  801548:	d0a79a43 	ldbu	r2,-24983(gp)
  80154c:	10803fcc 	andi	r2,r2,255
  801550:	1080201c 	xori	r2,r2,128
  801554:	10bfe004 	addi	r2,r2,-128
  801558:	10000526 	beq	r2,zero,801570 <tick+0x9f0>
  80155c:	d0a7a0c3 	ldbu	r2,-24957(gp)
  801560:	10803fcc 	andi	r2,r2,255
  801564:	1080201c 	xori	r2,r2,128
  801568:	10bfe004 	addi	r2,r2,-128
  80156c:	10000a1e 	bne	r2,zero,801598 <tick+0xa18>
  801570:	d0a78583 	ldbu	r2,-25066(gp)
  801574:	10803fcc 	andi	r2,r2,255
  801578:	1080201c 	xori	r2,r2,128
  80157c:	10bfe004 	addi	r2,r2,-128
  801580:	10000726 	beq	r2,zero,8015a0 <tick+0xa20>
  801584:	d0a79b83 	ldbu	r2,-24978(gp)
  801588:	10803fcc 	andi	r2,r2,255
  80158c:	1080201c 	xori	r2,r2,128
  801590:	10bfe004 	addi	r2,r2,-128
  801594:	10000226 	beq	r2,zero,8015a0 <tick+0xa20>
  801598:	00800044 	movi	r2,1
  80159c:	00000106 	br	8015a4 <tick+0xa24>
  8015a0:	0005883a 	mov	r2,zero
  8015a4:	d0a79f85 	stb	r2,-24962(gp)
      if(g24){
  8015a8:	d0a79f83 	ldbu	r2,-24962(gp)
  8015ac:	10803fcc 	andi	r2,r2,255
  8015b0:	1080201c 	xori	r2,r2,128
  8015b4:	10bfe004 	addi	r2,r2,-128
  8015b8:	10000226 	beq	r2,zero,8015c4 <tick+0xa44>
         start_AEI =(start_AEI||1);
  8015bc:	00800044 	movi	r2,1
  8015c0:	d0a78885 	stb	r2,-25054(gp)
      }
      g26 =(PRE_g25);
  8015c4:	d0a77743 	ldbu	r2,-25123(gp)
  8015c8:	d0a7a285 	stb	r2,-24950(gp)
      _cg26 = PVARP_ex;
  8015cc:	d0a79103 	ldbu	r2,-25020(gp)
  8015d0:	d0a769c5 	stb	r2,-25177(gp)
      g25 =((g26&&(!(_cg26)))||g24);
  8015d4:	d0a7a283 	ldbu	r2,-24950(gp)
  8015d8:	10803fcc 	andi	r2,r2,255
  8015dc:	1080201c 	xori	r2,r2,128
  8015e0:	10bfe004 	addi	r2,r2,-128
  8015e4:	10000526 	beq	r2,zero,8015fc <tick+0xa7c>
  8015e8:	d0a769c3 	ldbu	r2,-25177(gp)
  8015ec:	10803fcc 	andi	r2,r2,255
  8015f0:	1080201c 	xori	r2,r2,128
  8015f4:	10bfe004 	addi	r2,r2,-128
  8015f8:	10000526 	beq	r2,zero,801610 <tick+0xa90>
  8015fc:	d0a79f83 	ldbu	r2,-24962(gp)
  801600:	10803fcc 	andi	r2,r2,255
  801604:	1080201c 	xori	r2,r2,128
  801608:	10bfe004 	addi	r2,r2,-128
  80160c:	10000226 	beq	r2,zero,801618 <tick+0xa98>
  801610:	00800044 	movi	r2,1
  801614:	00000106 	br	80161c <tick+0xa9c>
  801618:	0005883a 	mov	r2,zero
  80161c:	d0a79685 	stb	r2,-24998(gp)
      g27 =((g26&&_cg26)||(g30&&(!(_cg30))));
  801620:	d0a7a283 	ldbu	r2,-24950(gp)
  801624:	10803fcc 	andi	r2,r2,255
  801628:	1080201c 	xori	r2,r2,128
  80162c:	10bfe004 	addi	r2,r2,-128
  801630:	10000526 	beq	r2,zero,801648 <tick+0xac8>
  801634:	d0a769c3 	ldbu	r2,-25177(gp)
  801638:	10803fcc 	andi	r2,r2,255
  80163c:	1080201c 	xori	r2,r2,128
  801640:	10bfe004 	addi	r2,r2,-128
  801644:	10000a1e 	bne	r2,zero,801670 <tick+0xaf0>
  801648:	d0a79483 	ldbu	r2,-25006(gp)
  80164c:	10803fcc 	andi	r2,r2,255
  801650:	1080201c 	xori	r2,r2,128
  801654:	10bfe004 	addi	r2,r2,-128
  801658:	10000726 	beq	r2,zero,801678 <tick+0xaf8>
  80165c:	d0a79503 	ldbu	r2,-25004(gp)
  801660:	10803fcc 	andi	r2,r2,255
  801664:	1080201c 	xori	r2,r2,128
  801668:	10bfe004 	addi	r2,r2,-128
  80166c:	1000021e 	bne	r2,zero,801678 <tick+0xaf8>
  801670:	00800044 	movi	r2,1
  801674:	00000106 	br	80167c <tick+0xafc>
  801678:	0005883a 	mov	r2,zero
  80167c:	d0a75945 	stb	r2,-25243(gp)
      g34 = g1;
  801680:	d0a763c3 	ldbu	r2,-25201(gp)
  801684:	d0a77405 	stb	r2,-25136(gp)
      g36 =(PRE_g35);
  801688:	d0a76d43 	ldbu	r2,-25163(gp)
  80168c:	d0a78745 	stb	r2,-25059(gp)
      _cg36 = Vsense;
  801690:	d0a77903 	ldbu	r2,-25116(gp)
  801694:	d0a7a1c5 	stb	r2,-24953(gp)
      g49 =(g36&&(!(_cg36)));
  801698:	d0a78743 	ldbu	r2,-25059(gp)
  80169c:	10803fcc 	andi	r2,r2,255
  8016a0:	1080201c 	xori	r2,r2,128
  8016a4:	10bfe004 	addi	r2,r2,-128
  8016a8:	10000726 	beq	r2,zero,8016c8 <tick+0xb48>
  8016ac:	d0a7a1c3 	ldbu	r2,-24953(gp)
  8016b0:	10803fcc 	andi	r2,r2,255
  8016b4:	1080201c 	xori	r2,r2,128
  8016b8:	10bfe004 	addi	r2,r2,-128
  8016bc:	1000021e 	bne	r2,zero,8016c8 <tick+0xb48>
  8016c0:	00800044 	movi	r2,1
  8016c4:	00000106 	br	8016cc <tick+0xb4c>
  8016c8:	0005883a 	mov	r2,zero
  8016cc:	d0a77545 	stb	r2,-25131(gp)
      _cg49 = Vpace;
  8016d0:	d0a76383 	ldbu	r2,-25202(gp)
  8016d4:	d0a79e05 	stb	r2,-24968(gp)
      g41 =(PRE_g40);
  8016d8:	d0a76a43 	ldbu	r2,-25175(gp)
  8016dc:	d0a76985 	stb	r2,-25178(gp)
      _cg41 = Vsense;
  8016e0:	d0a77903 	ldbu	r2,-25116(gp)
  8016e4:	d0a78b85 	stb	r2,-25042(gp)
      g43 =(g41&&(!(_cg41)));
  8016e8:	d0a76983 	ldbu	r2,-25178(gp)
  8016ec:	10803fcc 	andi	r2,r2,255
  8016f0:	1080201c 	xori	r2,r2,128
  8016f4:	10bfe004 	addi	r2,r2,-128
  8016f8:	10000726 	beq	r2,zero,801718 <tick+0xb98>
  8016fc:	d0a78b83 	ldbu	r2,-25042(gp)
  801700:	10803fcc 	andi	r2,r2,255
  801704:	1080201c 	xori	r2,r2,128
  801708:	10bfe004 	addi	r2,r2,-128
  80170c:	1000021e 	bne	r2,zero,801718 <tick+0xb98>
  801710:	00800044 	movi	r2,1
  801714:	00000106 	br	80171c <tick+0xb9c>
  801718:	0005883a 	mov	r2,zero
  80171c:	d0a78685 	stb	r2,-25062(gp)
      _cg43 = Vpace;
  801720:	d0a76383 	ldbu	r2,-25202(gp)
  801724:	d0a770c5 	stb	r2,-25149(gp)
      g44 =(g43&&(!(_cg43)));
  801728:	d0a78683 	ldbu	r2,-25062(gp)
  80172c:	10803fcc 	andi	r2,r2,255
  801730:	1080201c 	xori	r2,r2,128
  801734:	10bfe004 	addi	r2,r2,-128
  801738:	10000726 	beq	r2,zero,801758 <tick+0xbd8>
  80173c:	d0a770c3 	ldbu	r2,-25149(gp)
  801740:	10803fcc 	andi	r2,r2,255
  801744:	1080201c 	xori	r2,r2,128
  801748:	10bfe004 	addi	r2,r2,-128
  80174c:	1000021e 	bne	r2,zero,801758 <tick+0xbd8>
  801750:	00800044 	movi	r2,1
  801754:	00000106 	br	80175c <tick+0xbdc>
  801758:	0005883a 	mov	r2,zero
  80175c:	d0a761c5 	stb	r2,-25209(gp)
      _cg44 = PVARP_ex;
  801760:	d0a79103 	ldbu	r2,-25020(gp)
  801764:	d0a77ac5 	stb	r2,-25109(gp)
      g35 =((g49&&(!(_cg49)))||g34||(g44&&_cg44));
  801768:	d0a77543 	ldbu	r2,-25131(gp)
  80176c:	10803fcc 	andi	r2,r2,255
  801770:	1080201c 	xori	r2,r2,128
  801774:	10bfe004 	addi	r2,r2,-128
  801778:	10000526 	beq	r2,zero,801790 <tick+0xc10>
  80177c:	d0a79e03 	ldbu	r2,-24968(gp)
  801780:	10803fcc 	andi	r2,r2,255
  801784:	1080201c 	xori	r2,r2,128
  801788:	10bfe004 	addi	r2,r2,-128
  80178c:	10000f26 	beq	r2,zero,8017cc <tick+0xc4c>
  801790:	d0a77403 	ldbu	r2,-25136(gp)
  801794:	10803fcc 	andi	r2,r2,255
  801798:	1080201c 	xori	r2,r2,128
  80179c:	10bfe004 	addi	r2,r2,-128
  8017a0:	10000a1e 	bne	r2,zero,8017cc <tick+0xc4c>
  8017a4:	d0a761c3 	ldbu	r2,-25209(gp)
  8017a8:	10803fcc 	andi	r2,r2,255
  8017ac:	1080201c 	xori	r2,r2,128
  8017b0:	10bfe004 	addi	r2,r2,-128
  8017b4:	10000726 	beq	r2,zero,8017d4 <tick+0xc54>
  8017b8:	d0a77ac3 	ldbu	r2,-25109(gp)
  8017bc:	10803fcc 	andi	r2,r2,255
  8017c0:	1080201c 	xori	r2,r2,128
  8017c4:	10bfe004 	addi	r2,r2,-128
  8017c8:	10000226 	beq	r2,zero,8017d4 <tick+0xc54>
  8017cc:	00800044 	movi	r2,1
  8017d0:	00000106 	br	8017d8 <tick+0xc58>
  8017d4:	0005883a 	mov	r2,zero
  8017d8:	d0a78205 	stb	r2,-25080(gp)
      g42 =((g43&&_cg43)||(g41&&_cg41));
  8017dc:	d0a78683 	ldbu	r2,-25062(gp)
  8017e0:	10803fcc 	andi	r2,r2,255
  8017e4:	1080201c 	xori	r2,r2,128
  8017e8:	10bfe004 	addi	r2,r2,-128
  8017ec:	10000526 	beq	r2,zero,801804 <tick+0xc84>
  8017f0:	d0a770c3 	ldbu	r2,-25149(gp)
  8017f4:	10803fcc 	andi	r2,r2,255
  8017f8:	1080201c 	xori	r2,r2,128
  8017fc:	10bfe004 	addi	r2,r2,-128
  801800:	10000a1e 	bne	r2,zero,80182c <tick+0xcac>
  801804:	d0a76983 	ldbu	r2,-25178(gp)
  801808:	10803fcc 	andi	r2,r2,255
  80180c:	1080201c 	xori	r2,r2,128
  801810:	10bfe004 	addi	r2,r2,-128
  801814:	10000726 	beq	r2,zero,801834 <tick+0xcb4>
  801818:	d0a78b83 	ldbu	r2,-25042(gp)
  80181c:	10803fcc 	andi	r2,r2,255
  801820:	1080201c 	xori	r2,r2,128
  801824:	10bfe004 	addi	r2,r2,-128
  801828:	10000226 	beq	r2,zero,801834 <tick+0xcb4>
  80182c:	00800044 	movi	r2,1
  801830:	00000106 	br	801838 <tick+0xcb8>
  801834:	0005883a 	mov	r2,zero
  801838:	d0a75c45 	stb	r2,-25231(gp)
      if(g42){
  80183c:	d0a75c43 	ldbu	r2,-25231(gp)
  801840:	10803fcc 	andi	r2,r2,255
  801844:	1080201c 	xori	r2,r2,128
  801848:	10bfe004 	addi	r2,r2,-128
  80184c:	10000226 	beq	r2,zero,801858 <tick+0xcd8>
         stop_PVARP =(stop_PVARP||1);
  801850:	00800044 	movi	r2,1
  801854:	d0a794c5 	stb	r2,-25005(gp)
      }
      g37 =((g49&&_cg49)||(g36&&_cg36)||g42);
  801858:	d0a77543 	ldbu	r2,-25131(gp)
  80185c:	10803fcc 	andi	r2,r2,255
  801860:	1080201c 	xori	r2,r2,128
  801864:	10bfe004 	addi	r2,r2,-128
  801868:	10000526 	beq	r2,zero,801880 <tick+0xd00>
  80186c:	d0a79e03 	ldbu	r2,-24968(gp)
  801870:	10803fcc 	andi	r2,r2,255
  801874:	1080201c 	xori	r2,r2,128
  801878:	10bfe004 	addi	r2,r2,-128
  80187c:	10000f1e 	bne	r2,zero,8018bc <tick+0xd3c>
  801880:	d0a78743 	ldbu	r2,-25059(gp)
  801884:	10803fcc 	andi	r2,r2,255
  801888:	1080201c 	xori	r2,r2,128
  80188c:	10bfe004 	addi	r2,r2,-128
  801890:	10000526 	beq	r2,zero,8018a8 <tick+0xd28>
  801894:	d0a7a1c3 	ldbu	r2,-24953(gp)
  801898:	10803fcc 	andi	r2,r2,255
  80189c:	1080201c 	xori	r2,r2,128
  8018a0:	10bfe004 	addi	r2,r2,-128
  8018a4:	1000051e 	bne	r2,zero,8018bc <tick+0xd3c>
  8018a8:	d0a75c43 	ldbu	r2,-25231(gp)
  8018ac:	10803fcc 	andi	r2,r2,255
  8018b0:	1080201c 	xori	r2,r2,128
  8018b4:	10bfe004 	addi	r2,r2,-128
  8018b8:	10000226 	beq	r2,zero,8018c4 <tick+0xd44>
  8018bc:	00800044 	movi	r2,1
  8018c0:	00000106 	br	8018c8 <tick+0xd48>
  8018c4:	0005883a 	mov	r2,zero
  8018c8:	d0a76845 	stb	r2,-25183(gp)
      if(g37){
  8018cc:	d0a76843 	ldbu	r2,-25183(gp)
  8018d0:	10803fcc 	andi	r2,r2,255
  8018d4:	1080201c 	xori	r2,r2,128
  8018d8:	10bfe004 	addi	r2,r2,-128
  8018dc:	10000226 	beq	r2,zero,8018e8 <tick+0xd68>
         start_PVARP =(start_PVARP||1);
  8018e0:	00800044 	movi	r2,1
  8018e4:	d0a78345 	stb	r2,-25075(gp)
      }
      g39 =(PRE_g38);
  8018e8:	d0a75783 	ldbu	r2,-25250(gp)
  8018ec:	d0a79dc5 	stb	r2,-24969(gp)
      _cg39 = VRP_ex;
  8018f0:	d0a77d83 	ldbu	r2,-25098(gp)
  8018f4:	d0a7a345 	stb	r2,-24947(gp)
      g47 =(g39&&(!(_cg39)));
  8018f8:	d0a79dc3 	ldbu	r2,-24969(gp)
  8018fc:	10803fcc 	andi	r2,r2,255
  801900:	1080201c 	xori	r2,r2,128
  801904:	10bfe004 	addi	r2,r2,-128
  801908:	10000726 	beq	r2,zero,801928 <tick+0xda8>
  80190c:	d0a7a343 	ldbu	r2,-24947(gp)
  801910:	10803fcc 	andi	r2,r2,255
  801914:	1080201c 	xori	r2,r2,128
  801918:	10bfe004 	addi	r2,r2,-128
  80191c:	1000021e 	bne	r2,zero,801928 <tick+0xda8>
  801920:	00800044 	movi	r2,1
  801924:	00000106 	br	80192c <tick+0xdac>
  801928:	0005883a 	mov	r2,zero
  80192c:	d0a75bc5 	stb	r2,-25233(gp)
      _cg47 = Asense;
  801930:	d0a792c3 	ldbu	r2,-25013(gp)
  801934:	d0a78f05 	stb	r2,-25028(gp)
      g48 =(g47&&_cg47);
  801938:	d0a75bc3 	ldbu	r2,-25233(gp)
  80193c:	10803fcc 	andi	r2,r2,255
  801940:	1080201c 	xori	r2,r2,128
  801944:	10bfe004 	addi	r2,r2,-128
  801948:	10000726 	beq	r2,zero,801968 <tick+0xde8>
  80194c:	d0a78f03 	ldbu	r2,-25028(gp)
  801950:	10803fcc 	andi	r2,r2,255
  801954:	1080201c 	xori	r2,r2,128
  801958:	10bfe004 	addi	r2,r2,-128
  80195c:	10000226 	beq	r2,zero,801968 <tick+0xde8>
  801960:	00800044 	movi	r2,1
  801964:	00000106 	br	80196c <tick+0xdec>
  801968:	0005883a 	mov	r2,zero
  80196c:	d0a76cc5 	stb	r2,-25165(gp)
      if(g48){
  801970:	d0a76cc3 	ldbu	r2,-25165(gp)
  801974:	10803fcc 	andi	r2,r2,255
  801978:	1080201c 	xori	r2,r2,128
  80197c:	10bfe004 	addi	r2,r2,-128
  801980:	10000226 	beq	r2,zero,80198c <tick+0xe0c>
         AR =(AR||1);
  801984:	00800044 	movi	r2,1
  801988:	d0a78e85 	stb	r2,-25030(gp)
      }
      g38 =(g48||g37||(g47&&(!(_cg47))));
  80198c:	d0a76cc3 	ldbu	r2,-25165(gp)
  801990:	10803fcc 	andi	r2,r2,255
  801994:	1080201c 	xori	r2,r2,128
  801998:	10bfe004 	addi	r2,r2,-128
  80199c:	10000f1e 	bne	r2,zero,8019dc <tick+0xe5c>
  8019a0:	d0a76843 	ldbu	r2,-25183(gp)
  8019a4:	10803fcc 	andi	r2,r2,255
  8019a8:	1080201c 	xori	r2,r2,128
  8019ac:	10bfe004 	addi	r2,r2,-128
  8019b0:	10000a1e 	bne	r2,zero,8019dc <tick+0xe5c>
  8019b4:	d0a75bc3 	ldbu	r2,-25233(gp)
  8019b8:	10803fcc 	andi	r2,r2,255
  8019bc:	1080201c 	xori	r2,r2,128
  8019c0:	10bfe004 	addi	r2,r2,-128
  8019c4:	10000726 	beq	r2,zero,8019e4 <tick+0xe64>
  8019c8:	d0a78f03 	ldbu	r2,-25028(gp)
  8019cc:	10803fcc 	andi	r2,r2,255
  8019d0:	1080201c 	xori	r2,r2,128
  8019d4:	10bfe004 	addi	r2,r2,-128
  8019d8:	1000021e 	bne	r2,zero,8019e4 <tick+0xe64>
  8019dc:	00800044 	movi	r2,1
  8019e0:	00000106 	br	8019e8 <tick+0xe68>
  8019e4:	0005883a 	mov	r2,zero
  8019e8:	d0a76e45 	stb	r2,-25159(gp)
      g45 =(g44&&(!(_cg44)));
  8019ec:	d0a761c3 	ldbu	r2,-25209(gp)
  8019f0:	10803fcc 	andi	r2,r2,255
  8019f4:	1080201c 	xori	r2,r2,128
  8019f8:	10bfe004 	addi	r2,r2,-128
  8019fc:	10000726 	beq	r2,zero,801a1c <tick+0xe9c>
  801a00:	d0a77ac3 	ldbu	r2,-25109(gp)
  801a04:	10803fcc 	andi	r2,r2,255
  801a08:	1080201c 	xori	r2,r2,128
  801a0c:	10bfe004 	addi	r2,r2,-128
  801a10:	1000021e 	bne	r2,zero,801a1c <tick+0xe9c>
  801a14:	00800044 	movi	r2,1
  801a18:	00000106 	br	801a20 <tick+0xea0>
  801a1c:	0005883a 	mov	r2,zero
  801a20:	d0a79b05 	stb	r2,-24980(gp)
      _cg45 = Asense;
  801a24:	d0a792c3 	ldbu	r2,-25013(gp)
  801a28:	d0a762c5 	stb	r2,-25205(gp)
      g46 =(g45&&_cg45);
  801a2c:	d0a79b03 	ldbu	r2,-24980(gp)
  801a30:	10803fcc 	andi	r2,r2,255
  801a34:	1080201c 	xori	r2,r2,128
  801a38:	10bfe004 	addi	r2,r2,-128
  801a3c:	10000726 	beq	r2,zero,801a5c <tick+0xedc>
  801a40:	d0a762c3 	ldbu	r2,-25205(gp)
  801a44:	10803fcc 	andi	r2,r2,255
  801a48:	1080201c 	xori	r2,r2,128
  801a4c:	10bfe004 	addi	r2,r2,-128
  801a50:	10000226 	beq	r2,zero,801a5c <tick+0xedc>
  801a54:	00800044 	movi	r2,1
  801a58:	00000106 	br	801a60 <tick+0xee0>
  801a5c:	0005883a 	mov	r2,zero
  801a60:	d0a787c5 	stb	r2,-25057(gp)
      if(g46){
  801a64:	d0a787c3 	ldbu	r2,-25057(gp)
  801a68:	10803fcc 	andi	r2,r2,255
  801a6c:	1080201c 	xori	r2,r2,128
  801a70:	10bfe004 	addi	r2,r2,-128
  801a74:	10000226 	beq	r2,zero,801a80 <tick+0xf00>
         AR =(AR||1);
  801a78:	00800044 	movi	r2,1
  801a7c:	d0a78e85 	stb	r2,-25030(gp)
      }
      g40 =(g46||(g39&&_cg39)||(g45&&(!(_cg45))));
  801a80:	d0a787c3 	ldbu	r2,-25057(gp)
  801a84:	10803fcc 	andi	r2,r2,255
  801a88:	1080201c 	xori	r2,r2,128
  801a8c:	10bfe004 	addi	r2,r2,-128
  801a90:	1000141e 	bne	r2,zero,801ae4 <tick+0xf64>
  801a94:	d0a79dc3 	ldbu	r2,-24969(gp)
  801a98:	10803fcc 	andi	r2,r2,255
  801a9c:	1080201c 	xori	r2,r2,128
  801aa0:	10bfe004 	addi	r2,r2,-128
  801aa4:	10000526 	beq	r2,zero,801abc <tick+0xf3c>
  801aa8:	d0a7a343 	ldbu	r2,-24947(gp)
  801aac:	10803fcc 	andi	r2,r2,255
  801ab0:	1080201c 	xori	r2,r2,128
  801ab4:	10bfe004 	addi	r2,r2,-128
  801ab8:	10000a1e 	bne	r2,zero,801ae4 <tick+0xf64>
  801abc:	d0a79b03 	ldbu	r2,-24980(gp)
  801ac0:	10803fcc 	andi	r2,r2,255
  801ac4:	1080201c 	xori	r2,r2,128
  801ac8:	10bfe004 	addi	r2,r2,-128
  801acc:	10000726 	beq	r2,zero,801aec <tick+0xf6c>
  801ad0:	d0a762c3 	ldbu	r2,-25205(gp)
  801ad4:	10803fcc 	andi	r2,r2,255
  801ad8:	1080201c 	xori	r2,r2,128
  801adc:	10bfe004 	addi	r2,r2,-128
  801ae0:	1000021e 	bne	r2,zero,801aec <tick+0xf6c>
  801ae4:	00800044 	movi	r2,1
  801ae8:	00000106 	br	801af0 <tick+0xf70>
  801aec:	0005883a 	mov	r2,zero
  801af0:	d0a75545 	stb	r2,-25259(gp)
      g51 = g1;
  801af4:	d0a763c3 	ldbu	r2,-25201(gp)
  801af8:	d0a78a05 	stb	r2,-25048(gp)
      g53 =(PRE_g52);
  801afc:	d0a77e83 	ldbu	r2,-25094(gp)
  801b00:	d0a78d05 	stb	r2,-25036(gp)
      _cg53 = Vsense;
  801b04:	d0a77903 	ldbu	r2,-25116(gp)
  801b08:	d0a77645 	stb	r2,-25127(gp)
      g59 =(g53&&(!(_cg53)));
  801b0c:	d0a78d03 	ldbu	r2,-25036(gp)
  801b10:	10803fcc 	andi	r2,r2,255
  801b14:	1080201c 	xori	r2,r2,128
  801b18:	10bfe004 	addi	r2,r2,-128
  801b1c:	10000726 	beq	r2,zero,801b3c <tick+0xfbc>
  801b20:	d0a77643 	ldbu	r2,-25127(gp)
  801b24:	10803fcc 	andi	r2,r2,255
  801b28:	1080201c 	xori	r2,r2,128
  801b2c:	10bfe004 	addi	r2,r2,-128
  801b30:	1000021e 	bne	r2,zero,801b3c <tick+0xfbc>
  801b34:	00800044 	movi	r2,1
  801b38:	00000106 	br	801b40 <tick+0xfc0>
  801b3c:	0005883a 	mov	r2,zero
  801b40:	d0a77945 	stb	r2,-25115(gp)
      _cg59 = Vpace;
  801b44:	d0a76383 	ldbu	r2,-25202(gp)
  801b48:	d0a75905 	stb	r2,-25244(gp)
      g56 =(PRE_g55);
  801b4c:	d0a77303 	ldbu	r2,-25140(gp)
  801b50:	d0a77e45 	stb	r2,-25095(gp)
      _cg56 = VRP_ex;
  801b54:	d0a77d83 	ldbu	r2,-25098(gp)
  801b58:	d0a79005 	stb	r2,-25024(gp)
      g52 =((g59&&(!(_cg59)))||(g56&&_cg56)||g51);
  801b5c:	d0a77943 	ldbu	r2,-25115(gp)
  801b60:	10803fcc 	andi	r2,r2,255
  801b64:	1080201c 	xori	r2,r2,128
  801b68:	10bfe004 	addi	r2,r2,-128
  801b6c:	10000526 	beq	r2,zero,801b84 <tick+0x1004>
  801b70:	d0a75903 	ldbu	r2,-25244(gp)
  801b74:	10803fcc 	andi	r2,r2,255
  801b78:	1080201c 	xori	r2,r2,128
  801b7c:	10bfe004 	addi	r2,r2,-128
  801b80:	10000f26 	beq	r2,zero,801bc0 <tick+0x1040>
  801b84:	d0a77e43 	ldbu	r2,-25095(gp)
  801b88:	10803fcc 	andi	r2,r2,255
  801b8c:	1080201c 	xori	r2,r2,128
  801b90:	10bfe004 	addi	r2,r2,-128
  801b94:	10000526 	beq	r2,zero,801bac <tick+0x102c>
  801b98:	d0a79003 	ldbu	r2,-25024(gp)
  801b9c:	10803fcc 	andi	r2,r2,255
  801ba0:	1080201c 	xori	r2,r2,128
  801ba4:	10bfe004 	addi	r2,r2,-128
  801ba8:	1000051e 	bne	r2,zero,801bc0 <tick+0x1040>
  801bac:	d0a78a03 	ldbu	r2,-25048(gp)
  801bb0:	10803fcc 	andi	r2,r2,255
  801bb4:	1080201c 	xori	r2,r2,128
  801bb8:	10bfe004 	addi	r2,r2,-128
  801bbc:	10000226 	beq	r2,zero,801bc8 <tick+0x1048>
  801bc0:	00800044 	movi	r2,1
  801bc4:	00000106 	br	801bcc <tick+0x104c>
  801bc8:	0005883a 	mov	r2,zero
  801bcc:	d0a76645 	stb	r2,-25191(gp)
      g54 =((g53&&_cg53)||(g59&&_cg59));
  801bd0:	d0a78d03 	ldbu	r2,-25036(gp)
  801bd4:	10803fcc 	andi	r2,r2,255
  801bd8:	1080201c 	xori	r2,r2,128
  801bdc:	10bfe004 	addi	r2,r2,-128
  801be0:	10000526 	beq	r2,zero,801bf8 <tick+0x1078>
  801be4:	d0a77643 	ldbu	r2,-25127(gp)
  801be8:	10803fcc 	andi	r2,r2,255
  801bec:	1080201c 	xori	r2,r2,128
  801bf0:	10bfe004 	addi	r2,r2,-128
  801bf4:	10000a1e 	bne	r2,zero,801c20 <tick+0x10a0>
  801bf8:	d0a77943 	ldbu	r2,-25115(gp)
  801bfc:	10803fcc 	andi	r2,r2,255
  801c00:	1080201c 	xori	r2,r2,128
  801c04:	10bfe004 	addi	r2,r2,-128
  801c08:	10000726 	beq	r2,zero,801c28 <tick+0x10a8>
  801c0c:	d0a75903 	ldbu	r2,-25244(gp)
  801c10:	10803fcc 	andi	r2,r2,255
  801c14:	1080201c 	xori	r2,r2,128
  801c18:	10bfe004 	addi	r2,r2,-128
  801c1c:	10000226 	beq	r2,zero,801c28 <tick+0x10a8>
  801c20:	00800044 	movi	r2,1
  801c24:	00000106 	br	801c2c <tick+0x10ac>
  801c28:	0005883a 	mov	r2,zero
  801c2c:	d0a779c5 	stb	r2,-25113(gp)
      if(g54){
  801c30:	d0a779c3 	ldbu	r2,-25113(gp)
  801c34:	10803fcc 	andi	r2,r2,255
  801c38:	1080201c 	xori	r2,r2,128
  801c3c:	10bfe004 	addi	r2,r2,-128
  801c40:	10000226 	beq	r2,zero,801c4c <tick+0x10cc>
         start_VRP =(start_VRP||1);
  801c44:	00800044 	movi	r2,1
  801c48:	d0a76a85 	stb	r2,-25174(gp)
      }
      g57 =(g56&&(!(_cg56)));
  801c4c:	d0a77e43 	ldbu	r2,-25095(gp)
  801c50:	10803fcc 	andi	r2,r2,255
  801c54:	1080201c 	xori	r2,r2,128
  801c58:	10bfe004 	addi	r2,r2,-128
  801c5c:	10000726 	beq	r2,zero,801c7c <tick+0x10fc>
  801c60:	d0a79003 	ldbu	r2,-25024(gp)
  801c64:	10803fcc 	andi	r2,r2,255
  801c68:	1080201c 	xori	r2,r2,128
  801c6c:	10bfe004 	addi	r2,r2,-128
  801c70:	1000021e 	bne	r2,zero,801c7c <tick+0x10fc>
  801c74:	00800044 	movi	r2,1
  801c78:	00000106 	br	801c80 <tick+0x1100>
  801c7c:	0005883a 	mov	r2,zero
  801c80:	d0a78d85 	stb	r2,-25034(gp)
      _cg57 = Vsense;
  801c84:	d0a77903 	ldbu	r2,-25116(gp)
  801c88:	d0a79605 	stb	r2,-25000(gp)
      g58 =(g57&&_cg57);
  801c8c:	d0a78d83 	ldbu	r2,-25034(gp)
  801c90:	10803fcc 	andi	r2,r2,255
  801c94:	1080201c 	xori	r2,r2,128
  801c98:	10bfe004 	addi	r2,r2,-128
  801c9c:	10000726 	beq	r2,zero,801cbc <tick+0x113c>
  801ca0:	d0a79603 	ldbu	r2,-25000(gp)
  801ca4:	10803fcc 	andi	r2,r2,255
  801ca8:	1080201c 	xori	r2,r2,128
  801cac:	10bfe004 	addi	r2,r2,-128
  801cb0:	10000226 	beq	r2,zero,801cbc <tick+0x113c>
  801cb4:	00800044 	movi	r2,1
  801cb8:	00000106 	br	801cc0 <tick+0x1140>
  801cbc:	0005883a 	mov	r2,zero
  801cc0:	d0a795c5 	stb	r2,-25001(gp)
      if(g58){
  801cc4:	d0a795c3 	ldbu	r2,-25001(gp)
  801cc8:	10803fcc 	andi	r2,r2,255
  801ccc:	1080201c 	xori	r2,r2,128
  801cd0:	10bfe004 	addi	r2,r2,-128
  801cd4:	10000226 	beq	r2,zero,801ce0 <tick+0x1160>
         VR =(VR||1);
  801cd8:	00800044 	movi	r2,1
  801cdc:	d0a76d85 	stb	r2,-25162(gp)
      }
      g55 =(g58||(g57&&(!(_cg57)))||g54);
  801ce0:	d0a795c3 	ldbu	r2,-25001(gp)
  801ce4:	10803fcc 	andi	r2,r2,255
  801ce8:	1080201c 	xori	r2,r2,128
  801cec:	10bfe004 	addi	r2,r2,-128
  801cf0:	10000f1e 	bne	r2,zero,801d30 <tick+0x11b0>
  801cf4:	d0a78d83 	ldbu	r2,-25034(gp)
  801cf8:	10803fcc 	andi	r2,r2,255
  801cfc:	1080201c 	xori	r2,r2,128
  801d00:	10bfe004 	addi	r2,r2,-128
  801d04:	10000526 	beq	r2,zero,801d1c <tick+0x119c>
  801d08:	d0a79603 	ldbu	r2,-25000(gp)
  801d0c:	10803fcc 	andi	r2,r2,255
  801d10:	1080201c 	xori	r2,r2,128
  801d14:	10bfe004 	addi	r2,r2,-128
  801d18:	10000526 	beq	r2,zero,801d30 <tick+0x11b0>
  801d1c:	d0a779c3 	ldbu	r2,-25113(gp)
  801d20:	10803fcc 	andi	r2,r2,255
  801d24:	1080201c 	xori	r2,r2,128
  801d28:	10bfe004 	addi	r2,r2,-128
  801d2c:	10000226 	beq	r2,zero,801d38 <tick+0x11b8>
  801d30:	00800044 	movi	r2,1
  801d34:	00000106 	br	801d3c <tick+0x11bc>
  801d38:	0005883a 	mov	r2,zero
  801d3c:	d0a75885 	stb	r2,-25246(gp)
      g61 = g1;
  801d40:	d0a763c3 	ldbu	r2,-25201(gp)
  801d44:	d0a76405 	stb	r2,-25200(gp)
      g63 =(PRE_g62);
  801d48:	d0a78703 	ldbu	r2,-25060(gp)
  801d4c:	d0a783c5 	stb	r2,-25073(gp)
      _cg63 = Vsense;
  801d50:	d0a77903 	ldbu	r2,-25116(gp)
  801d54:	d0a77185 	stb	r2,-25146(gp)
      g62 =(g61||(g63&&(!(_cg63))));
  801d58:	d0a76403 	ldbu	r2,-25200(gp)
  801d5c:	10803fcc 	andi	r2,r2,255
  801d60:	1080201c 	xori	r2,r2,128
  801d64:	10bfe004 	addi	r2,r2,-128
  801d68:	10000a1e 	bne	r2,zero,801d94 <tick+0x1214>
  801d6c:	d0a783c3 	ldbu	r2,-25073(gp)
  801d70:	10803fcc 	andi	r2,r2,255
  801d74:	1080201c 	xori	r2,r2,128
  801d78:	10bfe004 	addi	r2,r2,-128
  801d7c:	10000726 	beq	r2,zero,801d9c <tick+0x121c>
  801d80:	d0a77183 	ldbu	r2,-25146(gp)
  801d84:	10803fcc 	andi	r2,r2,255
  801d88:	1080201c 	xori	r2,r2,128
  801d8c:	10bfe004 	addi	r2,r2,-128
  801d90:	1000021e 	bne	r2,zero,801d9c <tick+0x121c>
  801d94:	00800044 	movi	r2,1
  801d98:	00000106 	br	801da0 <tick+0x1220>
  801d9c:	0005883a 	mov	r2,zero
  801da0:	d0a768c5 	stb	r2,-25181(gp)
      g64 =(g63&&_cg63);
  801da4:	d0a783c3 	ldbu	r2,-25073(gp)
  801da8:	10803fcc 	andi	r2,r2,255
  801dac:	1080201c 	xori	r2,r2,128
  801db0:	10bfe004 	addi	r2,r2,-128
  801db4:	10000726 	beq	r2,zero,801dd4 <tick+0x1254>
  801db8:	d0a77183 	ldbu	r2,-25146(gp)
  801dbc:	10803fcc 	andi	r2,r2,255
  801dc0:	1080201c 	xori	r2,r2,128
  801dc4:	10bfe004 	addi	r2,r2,-128
  801dc8:	10000226 	beq	r2,zero,801dd4 <tick+0x1254>
  801dcc:	00800044 	movi	r2,1
  801dd0:	00000106 	br	801dd8 <tick+0x1258>
  801dd4:	0005883a 	mov	r2,zero
  801dd8:	d0a77205 	stb	r2,-25144(gp)
      if(g64){
  801ddc:	d0a77203 	ldbu	r2,-25144(gp)
  801de0:	10803fcc 	andi	r2,r2,255
  801de4:	1080201c 	xori	r2,r2,128
  801de8:	10bfe004 	addi	r2,r2,-128
  801dec:	10000226 	beq	r2,zero,801df8 <tick+0x1278>
         start_LRI =(start_LRI||1);
  801df0:	00800044 	movi	r2,1
  801df4:	d0a78a45 	stb	r2,-25047(gp)
      }
      g66 =(PRE_g65);
  801df8:	d0a76303 	ldbu	r2,-25204(gp)
  801dfc:	d0a77a05 	stb	r2,-25112(gp)
      _cg66 = VRP_ex;
  801e00:	d0a77d83 	ldbu	r2,-25098(gp)
  801e04:	d0a78ec5 	stb	r2,-25029(gp)
      g75 =(g66&&(!(_cg66)));
  801e08:	d0a77a03 	ldbu	r2,-25112(gp)
  801e0c:	10803fcc 	andi	r2,r2,255
  801e10:	1080201c 	xori	r2,r2,128
  801e14:	10bfe004 	addi	r2,r2,-128
  801e18:	10000726 	beq	r2,zero,801e38 <tick+0x12b8>
  801e1c:	d0a78ec3 	ldbu	r2,-25029(gp)
  801e20:	10803fcc 	andi	r2,r2,255
  801e24:	1080201c 	xori	r2,r2,128
  801e28:	10bfe004 	addi	r2,r2,-128
  801e2c:	1000021e 	bne	r2,zero,801e38 <tick+0x12b8>
  801e30:	00800044 	movi	r2,1
  801e34:	00000106 	br	801e3c <tick+0x12bc>
  801e38:	0005883a 	mov	r2,zero
  801e3c:	d0a79445 	stb	r2,-25007(gp)
      if(g75){
  801e40:	d0a79443 	ldbu	r2,-25007(gp)
  801e44:	10803fcc 	andi	r2,r2,255
  801e48:	1080201c 	xori	r2,r2,128
  801e4c:	10bfe004 	addi	r2,r2,-128
  801e50:	10000226 	beq	r2,zero,801e5c <tick+0x12dc>
         start_LRI =(start_LRI||1);
  801e54:	00800044 	movi	r2,1
  801e58:	d0a78a45 	stb	r2,-25047(gp)
      }
      g72 =(g71&&_cg71);
  801e5c:	d0a76483 	ldbu	r2,-25198(gp)
  801e60:	10803fcc 	andi	r2,r2,255
  801e64:	1080201c 	xori	r2,r2,128
  801e68:	10bfe004 	addi	r2,r2,-128
  801e6c:	10000726 	beq	r2,zero,801e8c <tick+0x130c>
  801e70:	d0a78243 	ldbu	r2,-25079(gp)
  801e74:	10803fcc 	andi	r2,r2,255
  801e78:	1080201c 	xori	r2,r2,128
  801e7c:	10bfe004 	addi	r2,r2,-128
  801e80:	10000226 	beq	r2,zero,801e8c <tick+0x130c>
  801e84:	00800044 	movi	r2,1
  801e88:	00000106 	br	801e90 <tick+0x1310>
  801e8c:	0005883a 	mov	r2,zero
  801e90:	d0a79085 	stb	r2,-25022(gp)
      if(g72){
  801e94:	d0a79083 	ldbu	r2,-25022(gp)
  801e98:	10803fcc 	andi	r2,r2,255
  801e9c:	1080201c 	xori	r2,r2,128
  801ea0:	10bfe004 	addi	r2,r2,-128
  801ea4:	10000226 	beq	r2,zero,801eb0 <tick+0x1330>
         stop_LRI =(stop_LRI||1);
  801ea8:	00800044 	movi	r2,1
  801eac:	d0a79cc5 	stb	r2,-24973(gp)
      }
      g69 =(g68&&_cg68);
  801eb0:	d0a79643 	ldbu	r2,-24999(gp)
  801eb4:	10803fcc 	andi	r2,r2,255
  801eb8:	1080201c 	xori	r2,r2,128
  801ebc:	10bfe004 	addi	r2,r2,-128
  801ec0:	10000726 	beq	r2,zero,801ee0 <tick+0x1360>
  801ec4:	d0a77383 	ldbu	r2,-25138(gp)
  801ec8:	10803fcc 	andi	r2,r2,255
  801ecc:	1080201c 	xori	r2,r2,128
  801ed0:	10bfe004 	addi	r2,r2,-128
  801ed4:	10000226 	beq	r2,zero,801ee0 <tick+0x1360>
  801ed8:	00800044 	movi	r2,1
  801edc:	00000106 	br	801ee4 <tick+0x1364>
  801ee0:	0005883a 	mov	r2,zero
  801ee4:	d0a7a245 	stb	r2,-24951(gp)
      if(g69){
  801ee8:	d0a7a243 	ldbu	r2,-24951(gp)
  801eec:	10803fcc 	andi	r2,r2,255
  801ef0:	1080201c 	xori	r2,r2,128
  801ef4:	10bfe004 	addi	r2,r2,-128
  801ef8:	10000226 	beq	r2,zero,801f04 <tick+0x1384>
         reset_LRI =(reset_LRI||1);
  801efc:	00800044 	movi	r2,1
  801f00:	d0a76905 	stb	r2,-25180(gp)
      }
      g74b = g74;
  801f04:	d0a7a3c3 	ldbu	r2,-24945(gp)
  801f08:	d0a77285 	stb	r2,-25142(gp)
      if(g74b){
  801f0c:	d0a77283 	ldbu	r2,-25142(gp)
  801f10:	10803fcc 	andi	r2,r2,255
  801f14:	1080201c 	xori	r2,r2,128
  801f18:	10bfe004 	addi	r2,r2,-128
  801f1c:	10000226 	beq	r2,zero,801f28 <tick+0x13a8>
         stop_LRI =(stop_LRI||1);
  801f20:	00800044 	movi	r2,1
  801f24:	d0a79cc5 	stb	r2,-24973(gp)
      }
      g70 =(g72||g69||g74b);
  801f28:	d0a79083 	ldbu	r2,-25022(gp)
  801f2c:	10803fcc 	andi	r2,r2,255
  801f30:	1080201c 	xori	r2,r2,128
  801f34:	10bfe004 	addi	r2,r2,-128
  801f38:	10000a1e 	bne	r2,zero,801f64 <tick+0x13e4>
  801f3c:	d0a7a243 	ldbu	r2,-24951(gp)
  801f40:	10803fcc 	andi	r2,r2,255
  801f44:	1080201c 	xori	r2,r2,128
  801f48:	10bfe004 	addi	r2,r2,-128
  801f4c:	1000051e 	bne	r2,zero,801f64 <tick+0x13e4>
  801f50:	d0a77283 	ldbu	r2,-25142(gp)
  801f54:	10803fcc 	andi	r2,r2,255
  801f58:	1080201c 	xori	r2,r2,128
  801f5c:	10bfe004 	addi	r2,r2,-128
  801f60:	10000226 	beq	r2,zero,801f6c <tick+0x13ec>
  801f64:	00800044 	movi	r2,1
  801f68:	00000106 	br	801f70 <tick+0x13f0>
  801f6c:	0005883a 	mov	r2,zero
  801f70:	d0a78e45 	stb	r2,-25031(gp)
      if(g70){
  801f74:	d0a78e43 	ldbu	r2,-25031(gp)
  801f78:	10803fcc 	andi	r2,r2,255
  801f7c:	1080201c 	xori	r2,r2,128
  801f80:	10bfe004 	addi	r2,r2,-128
  801f84:	10000226 	beq	r2,zero,801f90 <tick+0x1410>
         start_LRI =(start_LRI||1);
  801f88:	00800044 	movi	r2,1
  801f8c:	d0a78a45 	stb	r2,-25047(gp)
      }
      g65 =(g75||g64||g70);
  801f90:	d0a79443 	ldbu	r2,-25007(gp)
  801f94:	10803fcc 	andi	r2,r2,255
  801f98:	1080201c 	xori	r2,r2,128
  801f9c:	10bfe004 	addi	r2,r2,-128
  801fa0:	10000a1e 	bne	r2,zero,801fcc <tick+0x144c>
  801fa4:	d0a77203 	ldbu	r2,-25144(gp)
  801fa8:	10803fcc 	andi	r2,r2,255
  801fac:	1080201c 	xori	r2,r2,128
  801fb0:	10bfe004 	addi	r2,r2,-128
  801fb4:	1000051e 	bne	r2,zero,801fcc <tick+0x144c>
  801fb8:	d0a78e43 	ldbu	r2,-25031(gp)
  801fbc:	10803fcc 	andi	r2,r2,255
  801fc0:	1080201c 	xori	r2,r2,128
  801fc4:	10bfe004 	addi	r2,r2,-128
  801fc8:	10000226 	beq	r2,zero,801fd4 <tick+0x1454>
  801fcc:	00800044 	movi	r2,1
  801fd0:	00000106 	br	801fd8 <tick+0x1458>
  801fd4:	0005883a 	mov	r2,zero
  801fd8:	d0a79785 	stb	r2,-24994(gp)
      g67 =((g66&&_cg66)||(g73&&(!(_cg73))));
  801fdc:	d0a77a03 	ldbu	r2,-25112(gp)
  801fe0:	10803fcc 	andi	r2,r2,255
  801fe4:	1080201c 	xori	r2,r2,128
  801fe8:	10bfe004 	addi	r2,r2,-128
  801fec:	10000526 	beq	r2,zero,802004 <tick+0x1484>
  801ff0:	d0a78ec3 	ldbu	r2,-25029(gp)
  801ff4:	10803fcc 	andi	r2,r2,255
  801ff8:	1080201c 	xori	r2,r2,128
  801ffc:	10bfe004 	addi	r2,r2,-128
  802000:	10000a1e 	bne	r2,zero,80202c <tick+0x14ac>
  802004:	d0a798c3 	ldbu	r2,-24989(gp)
  802008:	10803fcc 	andi	r2,r2,255
  80200c:	1080201c 	xori	r2,r2,128
  802010:	10bfe004 	addi	r2,r2,-128
  802014:	10000726 	beq	r2,zero,802034 <tick+0x14b4>
  802018:	d0a76143 	ldbu	r2,-25211(gp)
  80201c:	10803fcc 	andi	r2,r2,255
  802020:	1080201c 	xori	r2,r2,128
  802024:	10bfe004 	addi	r2,r2,-128
  802028:	1000021e 	bne	r2,zero,802034 <tick+0x14b4>
  80202c:	00800044 	movi	r2,1
  802030:	00000106 	br	802038 <tick+0x14b8>
  802034:	0005883a 	mov	r2,zero
  802038:	d0a79f45 	stb	r2,-24963(gp)
      g77 = g1;
  80203c:	d0a763c3 	ldbu	r2,-25201(gp)
  802040:	d0a79a05 	stb	r2,-24984(gp)
      g79 =(PRE_g78);
  802044:	d0a76d03 	ldbu	r2,-25164(gp)
  802048:	d0a773c5 	stb	r2,-25137(gp)
      _cg79 = Vsense;
  80204c:	d0a77903 	ldbu	r2,-25116(gp)
  802050:	d0a76245 	stb	r2,-25207(gp)
      g101 =(g79&&(!(_cg79)));
  802054:	d0a773c3 	ldbu	r2,-25137(gp)
  802058:	10803fcc 	andi	r2,r2,255
  80205c:	1080201c 	xori	r2,r2,128
  802060:	10bfe004 	addi	r2,r2,-128
  802064:	10000726 	beq	r2,zero,802084 <tick+0x1504>
  802068:	d0a76243 	ldbu	r2,-25207(gp)
  80206c:	10803fcc 	andi	r2,r2,255
  802070:	1080201c 	xori	r2,r2,128
  802074:	10bfe004 	addi	r2,r2,-128
  802078:	1000021e 	bne	r2,zero,802084 <tick+0x1504>
  80207c:	00800044 	movi	r2,1
  802080:	00000106 	br	802088 <tick+0x1508>
  802084:	0005883a 	mov	r2,zero
  802088:	d0a77d45 	stb	r2,-25099(gp)
      _cg101 = Vpace;
  80208c:	d0a76383 	ldbu	r2,-25202(gp)
  802090:	d0a76c05 	stb	r2,-25168(gp)
      g78 =(g77||(g101&&(!(_cg101))));
  802094:	d0a79a03 	ldbu	r2,-24984(gp)
  802098:	10803fcc 	andi	r2,r2,255
  80209c:	1080201c 	xori	r2,r2,128
  8020a0:	10bfe004 	addi	r2,r2,-128
  8020a4:	10000a1e 	bne	r2,zero,8020d0 <tick+0x1550>
  8020a8:	d0a77d43 	ldbu	r2,-25099(gp)
  8020ac:	10803fcc 	andi	r2,r2,255
  8020b0:	1080201c 	xori	r2,r2,128
  8020b4:	10bfe004 	addi	r2,r2,-128
  8020b8:	10000726 	beq	r2,zero,8020d8 <tick+0x1558>
  8020bc:	d0a76c03 	ldbu	r2,-25168(gp)
  8020c0:	10803fcc 	andi	r2,r2,255
  8020c4:	1080201c 	xori	r2,r2,128
  8020c8:	10bfe004 	addi	r2,r2,-128
  8020cc:	1000021e 	bne	r2,zero,8020d8 <tick+0x1558>
  8020d0:	00800044 	movi	r2,1
  8020d4:	00000106 	br	8020dc <tick+0x155c>
  8020d8:	0005883a 	mov	r2,zero
  8020dc:	d0a77f45 	stb	r2,-25091(gp)
      g95 =(g90&&(!(_cg90)));
  8020e0:	d0a782c3 	ldbu	r2,-25077(gp)
  8020e4:	10803fcc 	andi	r2,r2,255
  8020e8:	1080201c 	xori	r2,r2,128
  8020ec:	10bfe004 	addi	r2,r2,-128
  8020f0:	10000726 	beq	r2,zero,802110 <tick+0x1590>
  8020f4:	d0a77603 	ldbu	r2,-25128(gp)
  8020f8:	10803fcc 	andi	r2,r2,255
  8020fc:	1080201c 	xori	r2,r2,128
  802100:	10bfe004 	addi	r2,r2,-128
  802104:	1000021e 	bne	r2,zero,802110 <tick+0x1590>
  802108:	00800044 	movi	r2,1
  80210c:	00000106 	br	802114 <tick+0x1594>
  802110:	0005883a 	mov	r2,zero
  802114:	d0a78905 	stb	r2,-25052(gp)
      _cg95 = Vsense;
  802118:	d0a77903 	ldbu	r2,-25116(gp)
  80211c:	d0a76dc5 	stb	r2,-25161(gp)
      g96 =(g95&&_cg95);
  802120:	d0a78903 	ldbu	r2,-25052(gp)
  802124:	10803fcc 	andi	r2,r2,255
  802128:	1080201c 	xori	r2,r2,128
  80212c:	10bfe004 	addi	r2,r2,-128
  802130:	10000726 	beq	r2,zero,802150 <tick+0x15d0>
  802134:	d0a76dc3 	ldbu	r2,-25161(gp)
  802138:	10803fcc 	andi	r2,r2,255
  80213c:	1080201c 	xori	r2,r2,128
  802140:	10bfe004 	addi	r2,r2,-128
  802144:	10000226 	beq	r2,zero,802150 <tick+0x15d0>
  802148:	00800044 	movi	r2,1
  80214c:	00000106 	br	802154 <tick+0x15d4>
  802150:	0005883a 	mov	r2,zero
  802154:	d0a789c5 	stb	r2,-25049(gp)
      if(g96){
  802158:	d0a789c3 	ldbu	r2,-25049(gp)
  80215c:	10803fcc 	andi	r2,r2,255
  802160:	1080201c 	xori	r2,r2,128
  802164:	10bfe004 	addi	r2,r2,-128
  802168:	10000226 	beq	r2,zero,802174 <tick+0x15f4>
         stop_URI =(stop_URI||1);
  80216c:	00800044 	movi	r2,1
  802170:	d0a78145 	stb	r2,-25083(gp)
      }
      g80 =((g79&&_cg79)||g96||(g101&&_cg101));
  802174:	d0a773c3 	ldbu	r2,-25137(gp)
  802178:	10803fcc 	andi	r2,r2,255
  80217c:	1080201c 	xori	r2,r2,128
  802180:	10bfe004 	addi	r2,r2,-128
  802184:	10000526 	beq	r2,zero,80219c <tick+0x161c>
  802188:	d0a76243 	ldbu	r2,-25207(gp)
  80218c:	10803fcc 	andi	r2,r2,255
  802190:	1080201c 	xori	r2,r2,128
  802194:	10bfe004 	addi	r2,r2,-128
  802198:	10000f1e 	bne	r2,zero,8021d8 <tick+0x1658>
  80219c:	d0a789c3 	ldbu	r2,-25049(gp)
  8021a0:	10803fcc 	andi	r2,r2,255
  8021a4:	1080201c 	xori	r2,r2,128
  8021a8:	10bfe004 	addi	r2,r2,-128
  8021ac:	10000a1e 	bne	r2,zero,8021d8 <tick+0x1658>
  8021b0:	d0a77d43 	ldbu	r2,-25099(gp)
  8021b4:	10803fcc 	andi	r2,r2,255
  8021b8:	1080201c 	xori	r2,r2,128
  8021bc:	10bfe004 	addi	r2,r2,-128
  8021c0:	10000726 	beq	r2,zero,8021e0 <tick+0x1660>
  8021c4:	d0a76c03 	ldbu	r2,-25168(gp)
  8021c8:	10803fcc 	andi	r2,r2,255
  8021cc:	1080201c 	xori	r2,r2,128
  8021d0:	10bfe004 	addi	r2,r2,-128
  8021d4:	10000226 	beq	r2,zero,8021e0 <tick+0x1660>
  8021d8:	00800044 	movi	r2,1
  8021dc:	00000106 	br	8021e4 <tick+0x1664>
  8021e0:	0005883a 	mov	r2,zero
  8021e4:	d0a77705 	stb	r2,-25124(gp)
      if(g80){
  8021e8:	d0a77703 	ldbu	r2,-25124(gp)
  8021ec:	10803fcc 	andi	r2,r2,255
  8021f0:	1080201c 	xori	r2,r2,128
  8021f4:	10bfe004 	addi	r2,r2,-128
  8021f8:	10000226 	beq	r2,zero,802204 <tick+0x1684>
         start_URI =(start_URI||1);
  8021fc:	00800044 	movi	r2,1
  802200:	d0a78e05 	stb	r2,-25032(gp)
      }
      g97 =(g95&&(!(_cg95)));
  802204:	d0a78903 	ldbu	r2,-25052(gp)
  802208:	10803fcc 	andi	r2,r2,255
  80220c:	1080201c 	xori	r2,r2,128
  802210:	10bfe004 	addi	r2,r2,-128
  802214:	10000726 	beq	r2,zero,802234 <tick+0x16b4>
  802218:	d0a76dc3 	ldbu	r2,-25161(gp)
  80221c:	10803fcc 	andi	r2,r2,255
  802220:	1080201c 	xori	r2,r2,128
  802224:	10bfe004 	addi	r2,r2,-128
  802228:	1000021e 	bne	r2,zero,802234 <tick+0x16b4>
  80222c:	00800044 	movi	r2,1
  802230:	00000106 	br	802238 <tick+0x16b8>
  802234:	0005883a 	mov	r2,zero
  802238:	d0a76605 	stb	r2,-25192(gp)
      _cg97 = URI_ex;
  80223c:	d0a78043 	ldbu	r2,-25087(gp)
  802240:	d0a76f05 	stb	r2,-25156(gp)
      g98 =(g97&&(!(_cg97)));
  802244:	d0a76603 	ldbu	r2,-25192(gp)
  802248:	10803fcc 	andi	r2,r2,255
  80224c:	1080201c 	xori	r2,r2,128
  802250:	10bfe004 	addi	r2,r2,-128
  802254:	10000726 	beq	r2,zero,802274 <tick+0x16f4>
  802258:	d0a76f03 	ldbu	r2,-25156(gp)
  80225c:	10803fcc 	andi	r2,r2,255
  802260:	1080201c 	xori	r2,r2,128
  802264:	10bfe004 	addi	r2,r2,-128
  802268:	1000021e 	bne	r2,zero,802274 <tick+0x16f4>
  80226c:	00800044 	movi	r2,1
  802270:	00000106 	br	802278 <tick+0x16f8>
  802274:	0005883a 	mov	r2,zero
  802278:	d0a78cc5 	stb	r2,-25037(gp)
      _cg98 = Vpace;
  80227c:	d0a76383 	ldbu	r2,-25202(gp)
  802280:	d0a76585 	stb	r2,-25194(gp)
      g99 =(g98&&_cg98);
  802284:	d0a78cc3 	ldbu	r2,-25037(gp)
  802288:	10803fcc 	andi	r2,r2,255
  80228c:	1080201c 	xori	r2,r2,128
  802290:	10bfe004 	addi	r2,r2,-128
  802294:	10000726 	beq	r2,zero,8022b4 <tick+0x1734>
  802298:	d0a76583 	ldbu	r2,-25194(gp)
  80229c:	10803fcc 	andi	r2,r2,255
  8022a0:	1080201c 	xori	r2,r2,128
  8022a4:	10bfe004 	addi	r2,r2,-128
  8022a8:	10000226 	beq	r2,zero,8022b4 <tick+0x1734>
  8022ac:	00800044 	movi	r2,1
  8022b0:	00000106 	br	8022b8 <tick+0x1738>
  8022b4:	0005883a 	mov	r2,zero
  8022b8:	d0a77985 	stb	r2,-25114(gp)
      if(g99){
  8022bc:	d0a77983 	ldbu	r2,-25114(gp)
  8022c0:	10803fcc 	andi	r2,r2,255
  8022c4:	1080201c 	xori	r2,r2,128
  8022c8:	10bfe004 	addi	r2,r2,-128
  8022cc:	10000226 	beq	r2,zero,8022d8 <tick+0x1758>
         stop_URI =(stop_URI||1);
  8022d0:	00800044 	movi	r2,1
  8022d4:	d0a78145 	stb	r2,-25083(gp)
      }
      g99b = g99;
  8022d8:	d0a77983 	ldbu	r2,-25114(gp)
  8022dc:	d0a79945 	stb	r2,-24987(gp)
      if(g99b){
  8022e0:	d0a79943 	ldbu	r2,-24987(gp)
  8022e4:	10803fcc 	andi	r2,r2,255
  8022e8:	1080201c 	xori	r2,r2,128
  8022ec:	10bfe004 	addi	r2,r2,-128
  8022f0:	10000226 	beq	r2,zero,8022fc <tick+0x177c>
         start_URI =(start_URI||1);
  8022f4:	00800044 	movi	r2,1
  8022f8:	d0a78e05 	stb	r2,-25032(gp)
      }
      g85 =(PRE_g84);
  8022fc:	d0a77bc3 	ldbu	r2,-25105(gp)
  802300:	d0a75c05 	stb	r2,-25232(gp)
      g85b = g85;
  802304:	d0a75c03 	ldbu	r2,-25232(gp)
  802308:	d0a77045 	stb	r2,-25151(gp)
      _cg85 = Vpace;
  80230c:	d0a76383 	ldbu	r2,-25202(gp)
  802310:	d0a76705 	stb	r2,-25188(gp)
      g86 =(g85b&&_cg85);
  802314:	d0a77043 	ldbu	r2,-25151(gp)
  802318:	10803fcc 	andi	r2,r2,255
  80231c:	1080201c 	xori	r2,r2,128
  802320:	10bfe004 	addi	r2,r2,-128
  802324:	10000726 	beq	r2,zero,802344 <tick+0x17c4>
  802328:	d0a76703 	ldbu	r2,-25188(gp)
  80232c:	10803fcc 	andi	r2,r2,255
  802330:	1080201c 	xori	r2,r2,128
  802334:	10bfe004 	addi	r2,r2,-128
  802338:	10000226 	beq	r2,zero,802344 <tick+0x17c4>
  80233c:	00800044 	movi	r2,1
  802340:	00000106 	br	802348 <tick+0x17c8>
  802344:	0005883a 	mov	r2,zero
  802348:	d0a78645 	stb	r2,-25063(gp)
      if(g86){
  80234c:	d0a78643 	ldbu	r2,-25063(gp)
  802350:	10803fcc 	andi	r2,r2,255
  802354:	1080201c 	xori	r2,r2,128
  802358:	10bfe004 	addi	r2,r2,-128
  80235c:	10000226 	beq	r2,zero,802368 <tick+0x17e8>
         start_URI =(start_URI||1);
  802360:	00800044 	movi	r2,1
  802364:	d0a78e05 	stb	r2,-25032(gp)
      }
      g87 =(g85b&&(!(_cg85)));
  802368:	d0a77043 	ldbu	r2,-25151(gp)
  80236c:	10803fcc 	andi	r2,r2,255
  802370:	1080201c 	xori	r2,r2,128
  802374:	10bfe004 	addi	r2,r2,-128
  802378:	10000726 	beq	r2,zero,802398 <tick+0x1818>
  80237c:	d0a76703 	ldbu	r2,-25188(gp)
  802380:	10803fcc 	andi	r2,r2,255
  802384:	1080201c 	xori	r2,r2,128
  802388:	10bfe004 	addi	r2,r2,-128
  80238c:	1000021e 	bne	r2,zero,802398 <tick+0x1818>
  802390:	00800044 	movi	r2,1
  802394:	00000106 	br	80239c <tick+0x181c>
  802398:	0005883a 	mov	r2,zero
  80239c:	d0a76185 	stb	r2,-25210(gp)
      _cg87 = Vsense;
  8023a0:	d0a77903 	ldbu	r2,-25116(gp)
  8023a4:	d0a77b05 	stb	r2,-25108(gp)
      g88 =(g87&&_cg87);
  8023a8:	d0a76183 	ldbu	r2,-25210(gp)
  8023ac:	10803fcc 	andi	r2,r2,255
  8023b0:	1080201c 	xori	r2,r2,128
  8023b4:	10bfe004 	addi	r2,r2,-128
  8023b8:	10000726 	beq	r2,zero,8023d8 <tick+0x1858>
  8023bc:	d0a77b03 	ldbu	r2,-25108(gp)
  8023c0:	10803fcc 	andi	r2,r2,255
  8023c4:	1080201c 	xori	r2,r2,128
  8023c8:	10bfe004 	addi	r2,r2,-128
  8023cc:	10000226 	beq	r2,zero,8023d8 <tick+0x1858>
  8023d0:	00800044 	movi	r2,1
  8023d4:	00000106 	br	8023dc <tick+0x185c>
  8023d8:	0005883a 	mov	r2,zero
  8023dc:	d0a79ac5 	stb	r2,-24981(gp)
      if(g88){
  8023e0:	d0a79ac3 	ldbu	r2,-24981(gp)
  8023e4:	10803fcc 	andi	r2,r2,255
  8023e8:	1080201c 	xori	r2,r2,128
  8023ec:	10bfe004 	addi	r2,r2,-128
  8023f0:	10000226 	beq	r2,zero,8023fc <tick+0x187c>
         start_URI =(start_URI||1);
  8023f4:	00800044 	movi	r2,1
  8023f8:	d0a78e05 	stb	r2,-25032(gp)
      }
      g82 =(PRE_g81);
  8023fc:	d0a76b43 	ldbu	r2,-25171(gp)
  802400:	d0a76545 	stb	r2,-25195(gp)
      _cg82 = VRP_ex;
  802404:	d0a77d83 	ldbu	r2,-25098(gp)
  802408:	d0a77085 	stb	r2,-25150(gp)
      g100 =(g82&&(!(_cg82)));
  80240c:	d0a76543 	ldbu	r2,-25195(gp)
  802410:	10803fcc 	andi	r2,r2,255
  802414:	1080201c 	xori	r2,r2,128
  802418:	10bfe004 	addi	r2,r2,-128
  80241c:	10000726 	beq	r2,zero,80243c <tick+0x18bc>
  802420:	d0a77083 	ldbu	r2,-25150(gp)
  802424:	10803fcc 	andi	r2,r2,255
  802428:	1080201c 	xori	r2,r2,128
  80242c:	10bfe004 	addi	r2,r2,-128
  802430:	1000021e 	bne	r2,zero,80243c <tick+0x18bc>
  802434:	00800044 	movi	r2,1
  802438:	00000106 	br	802440 <tick+0x18c0>
  80243c:	0005883a 	mov	r2,zero
  802440:	d0a77885 	stb	r2,-25118(gp)
      if(g100){
  802444:	d0a77883 	ldbu	r2,-25118(gp)
  802448:	10803fcc 	andi	r2,r2,255
  80244c:	1080201c 	xori	r2,r2,128
  802450:	10bfe004 	addi	r2,r2,-128
  802454:	10000226 	beq	r2,zero,802460 <tick+0x18e0>
         start_URI =(start_URI||1);
  802458:	00800044 	movi	r2,1
  80245c:	d0a78e05 	stb	r2,-25032(gp)
      }
      g81 =(g99b||g86||g88||g100||g92||g80);
  802460:	d0a79943 	ldbu	r2,-24987(gp)
  802464:	10803fcc 	andi	r2,r2,255
  802468:	1080201c 	xori	r2,r2,128
  80246c:	10bfe004 	addi	r2,r2,-128
  802470:	1000191e 	bne	r2,zero,8024d8 <tick+0x1958>
  802474:	d0a78643 	ldbu	r2,-25063(gp)
  802478:	10803fcc 	andi	r2,r2,255
  80247c:	1080201c 	xori	r2,r2,128
  802480:	10bfe004 	addi	r2,r2,-128
  802484:	1000141e 	bne	r2,zero,8024d8 <tick+0x1958>
  802488:	d0a79ac3 	ldbu	r2,-24981(gp)
  80248c:	10803fcc 	andi	r2,r2,255
  802490:	1080201c 	xori	r2,r2,128
  802494:	10bfe004 	addi	r2,r2,-128
  802498:	10000f1e 	bne	r2,zero,8024d8 <tick+0x1958>
  80249c:	d0a77883 	ldbu	r2,-25118(gp)
  8024a0:	10803fcc 	andi	r2,r2,255
  8024a4:	1080201c 	xori	r2,r2,128
  8024a8:	10bfe004 	addi	r2,r2,-128
  8024ac:	10000a1e 	bne	r2,zero,8024d8 <tick+0x1958>
  8024b0:	d0a76343 	ldbu	r2,-25203(gp)
  8024b4:	10803fcc 	andi	r2,r2,255
  8024b8:	1080201c 	xori	r2,r2,128
  8024bc:	10bfe004 	addi	r2,r2,-128
  8024c0:	1000051e 	bne	r2,zero,8024d8 <tick+0x1958>
  8024c4:	d0a77703 	ldbu	r2,-25124(gp)
  8024c8:	10803fcc 	andi	r2,r2,255
  8024cc:	1080201c 	xori	r2,r2,128
  8024d0:	10bfe004 	addi	r2,r2,-128
  8024d4:	10000226 	beq	r2,zero,8024e0 <tick+0x1960>
  8024d8:	00800044 	movi	r2,1
  8024dc:	00000106 	br	8024e4 <tick+0x1964>
  8024e0:	0005883a 	mov	r2,zero
  8024e4:	d0a790c5 	stb	r2,-25021(gp)
      g83 =(g82&&_cg82);
  8024e8:	d0a76543 	ldbu	r2,-25195(gp)
  8024ec:	10803fcc 	andi	r2,r2,255
  8024f0:	1080201c 	xori	r2,r2,128
  8024f4:	10bfe004 	addi	r2,r2,-128
  8024f8:	10000726 	beq	r2,zero,802518 <tick+0x1998>
  8024fc:	d0a77083 	ldbu	r2,-25150(gp)
  802500:	10803fcc 	andi	r2,r2,255
  802504:	1080201c 	xori	r2,r2,128
  802508:	10bfe004 	addi	r2,r2,-128
  80250c:	10000226 	beq	r2,zero,802518 <tick+0x1998>
  802510:	00800044 	movi	r2,1
  802514:	00000106 	br	80251c <tick+0x199c>
  802518:	0005883a 	mov	r2,zero
  80251c:	d0a75505 	stb	r2,-25260(gp)
      _cg83 = URI_ex;
  802520:	d0a78043 	ldbu	r2,-25087(gp)
  802524:	d0a77a85 	stb	r2,-25110(gp)
      g84 =((g97&&_cg97)||(g87&&(!(_cg87)))||(g83&&_cg83));
  802528:	d0a76603 	ldbu	r2,-25192(gp)
  80252c:	10803fcc 	andi	r2,r2,255
  802530:	1080201c 	xori	r2,r2,128
  802534:	10bfe004 	addi	r2,r2,-128
  802538:	10000526 	beq	r2,zero,802550 <tick+0x19d0>
  80253c:	d0a76f03 	ldbu	r2,-25156(gp)
  802540:	10803fcc 	andi	r2,r2,255
  802544:	1080201c 	xori	r2,r2,128
  802548:	10bfe004 	addi	r2,r2,-128
  80254c:	1000141e 	bne	r2,zero,8025a0 <tick+0x1a20>
  802550:	d0a76183 	ldbu	r2,-25210(gp)
  802554:	10803fcc 	andi	r2,r2,255
  802558:	1080201c 	xori	r2,r2,128
  80255c:	10bfe004 	addi	r2,r2,-128
  802560:	10000526 	beq	r2,zero,802578 <tick+0x19f8>
  802564:	d0a77b03 	ldbu	r2,-25108(gp)
  802568:	10803fcc 	andi	r2,r2,255
  80256c:	1080201c 	xori	r2,r2,128
  802570:	10bfe004 	addi	r2,r2,-128
  802574:	10000a26 	beq	r2,zero,8025a0 <tick+0x1a20>
  802578:	d0a75503 	ldbu	r2,-25260(gp)
  80257c:	10803fcc 	andi	r2,r2,255
  802580:	1080201c 	xori	r2,r2,128
  802584:	10bfe004 	addi	r2,r2,-128
  802588:	10000726 	beq	r2,zero,8025a8 <tick+0x1a28>
  80258c:	d0a77a83 	ldbu	r2,-25110(gp)
  802590:	10803fcc 	andi	r2,r2,255
  802594:	1080201c 	xori	r2,r2,128
  802598:	10bfe004 	addi	r2,r2,-128
  80259c:	10000226 	beq	r2,zero,8025a8 <tick+0x1a28>
  8025a0:	00800044 	movi	r2,1
  8025a4:	00000106 	br	8025ac <tick+0x1a2c>
  8025a8:	0005883a 	mov	r2,zero
  8025ac:	d0a76945 	stb	r2,-25179(gp)
      g89 =((g83&&(!(_cg83)))||(g98&&(!(_cg98))));
  8025b0:	d0a75503 	ldbu	r2,-25260(gp)
  8025b4:	10803fcc 	andi	r2,r2,255
  8025b8:	1080201c 	xori	r2,r2,128
  8025bc:	10bfe004 	addi	r2,r2,-128
  8025c0:	10000526 	beq	r2,zero,8025d8 <tick+0x1a58>
  8025c4:	d0a77a83 	ldbu	r2,-25110(gp)
  8025c8:	10803fcc 	andi	r2,r2,255
  8025cc:	1080201c 	xori	r2,r2,128
  8025d0:	10bfe004 	addi	r2,r2,-128
  8025d4:	10000a26 	beq	r2,zero,802600 <tick+0x1a80>
  8025d8:	d0a78cc3 	ldbu	r2,-25037(gp)
  8025dc:	10803fcc 	andi	r2,r2,255
  8025e0:	1080201c 	xori	r2,r2,128
  8025e4:	10bfe004 	addi	r2,r2,-128
  8025e8:	10000726 	beq	r2,zero,802608 <tick+0x1a88>
  8025ec:	d0a76583 	ldbu	r2,-25194(gp)
  8025f0:	10803fcc 	andi	r2,r2,255
  8025f4:	1080201c 	xori	r2,r2,128
  8025f8:	10bfe004 	addi	r2,r2,-128
  8025fc:	1000021e 	bne	r2,zero,802608 <tick+0x1a88>
  802600:	00800044 	movi	r2,1
  802604:	00000106 	br	80260c <tick+0x1a8c>
  802608:	0005883a 	mov	r2,zero
  80260c:	d0a78785 	stb	r2,-25058(gp)
      g93 =(g91&&(!(_cg91)));
  802610:	d0a75583 	ldbu	r2,-25258(gp)
  802614:	10803fcc 	andi	r2,r2,255
  802618:	1080201c 	xori	r2,r2,128
  80261c:	10bfe004 	addi	r2,r2,-128
  802620:	10000726 	beq	r2,zero,802640 <tick+0x1ac0>
  802624:	d0a793c3 	ldbu	r2,-25009(gp)
  802628:	10803fcc 	andi	r2,r2,255
  80262c:	1080201c 	xori	r2,r2,128
  802630:	10bfe004 	addi	r2,r2,-128
  802634:	1000021e 	bne	r2,zero,802640 <tick+0x1ac0>
  802638:	00800044 	movi	r2,1
  80263c:	00000106 	br	802644 <tick+0x1ac4>
  802640:	0005883a 	mov	r2,zero
  802644:	d0a785c5 	stb	r2,-25065(gp)
      g103 = g1;
  802648:	d0a763c3 	ldbu	r2,-25201(gp)
  80264c:	d0a75b45 	stb	r2,-25235(gp)
      g105 =(PRE_g104);
  802650:	d0a76bc3 	ldbu	r2,-25169(gp)
  802654:	d0a76ec5 	stb	r2,-25157(gp)
      g105b = g105;
  802658:	d0a76ec3 	ldbu	r2,-25157(gp)
  80265c:	d0a79585 	stb	r2,-25002(gp)
      _cg105 = start_AVI;
  802660:	d0a77103 	ldbu	r2,-25148(gp)
  802664:	d0a7a385 	stb	r2,-24946(gp)
      g108 =(PRE_g107);
  802668:	d0a784c3 	ldbu	r2,-25069(gp)
  80266c:	d0a75685 	stb	r2,-25254(gp)
      _cg108 = AVI_ex;
  802670:	d0a77cc3 	ldbu	r2,-25101(gp)
  802674:	d0a79185 	stb	r2,-25018(gp)
      g109 =(g108&&(!(_cg108)));
  802678:	d0a75683 	ldbu	r2,-25254(gp)
  80267c:	10803fcc 	andi	r2,r2,255
  802680:	1080201c 	xori	r2,r2,128
  802684:	10bfe004 	addi	r2,r2,-128
  802688:	10000726 	beq	r2,zero,8026a8 <tick+0x1b28>
  80268c:	d0a79183 	ldbu	r2,-25018(gp)
  802690:	10803fcc 	andi	r2,r2,255
  802694:	1080201c 	xori	r2,r2,128
  802698:	10bfe004 	addi	r2,r2,-128
  80269c:	1000021e 	bne	r2,zero,8026a8 <tick+0x1b28>
  8026a0:	00800044 	movi	r2,1
  8026a4:	00000106 	br	8026ac <tick+0x1b2c>
  8026a8:	0005883a 	mov	r2,zero
  8026ac:	d0a7a045 	stb	r2,-24959(gp)
      if(g109){
  8026b0:	d0a7a043 	ldbu	r2,-24959(gp)
  8026b4:	10803fcc 	andi	r2,r2,255
  8026b8:	1080201c 	xori	r2,r2,128
  8026bc:	10bfe004 	addi	r2,r2,-128
  8026c0:	10000226 	beq	r2,zero,8026cc <tick+0x1b4c>
         AVI_counting =(AVI_counting||1);
  8026c4:	00800044 	movi	r2,1
  8026c8:	d0a7a105 	stb	r2,-24956(gp)
      }
      g106 =((g105b&&_cg105)||g109);
  8026cc:	d0a79583 	ldbu	r2,-25002(gp)
  8026d0:	10803fcc 	andi	r2,r2,255
  8026d4:	1080201c 	xori	r2,r2,128
  8026d8:	10bfe004 	addi	r2,r2,-128
  8026dc:	10000526 	beq	r2,zero,8026f4 <tick+0x1b74>
  8026e0:	d0a7a383 	ldbu	r2,-24946(gp)
  8026e4:	10803fcc 	andi	r2,r2,255
  8026e8:	1080201c 	xori	r2,r2,128
  8026ec:	10bfe004 	addi	r2,r2,-128
  8026f0:	1000051e 	bne	r2,zero,802708 <tick+0x1b88>
  8026f4:	d0a7a043 	ldbu	r2,-24959(gp)
  8026f8:	10803fcc 	andi	r2,r2,255
  8026fc:	1080201c 	xori	r2,r2,128
  802700:	10bfe004 	addi	r2,r2,-128
  802704:	10000226 	beq	r2,zero,802710 <tick+0x1b90>
  802708:	00800044 	movi	r2,1
  80270c:	00000106 	br	802714 <tick+0x1b94>
  802710:	0005883a 	mov	r2,zero
  802714:	d0a7a185 	stb	r2,-24954(gp)
      _cg106 = stop_AVI;
  802718:	d0a77143 	ldbu	r2,-25147(gp)
  80271c:	d0a78845 	stb	r2,-25055(gp)
      g104 =((g106&&_cg106)||(g105b&&(!(_cg105)))||g103||(g108&&_cg108));
  802720:	d0a7a183 	ldbu	r2,-24954(gp)
  802724:	10803fcc 	andi	r2,r2,255
  802728:	1080201c 	xori	r2,r2,128
  80272c:	10bfe004 	addi	r2,r2,-128
  802730:	10000526 	beq	r2,zero,802748 <tick+0x1bc8>
  802734:	d0a78843 	ldbu	r2,-25055(gp)
  802738:	10803fcc 	andi	r2,r2,255
  80273c:	1080201c 	xori	r2,r2,128
  802740:	10bfe004 	addi	r2,r2,-128
  802744:	1000191e 	bne	r2,zero,8027ac <tick+0x1c2c>
  802748:	d0a79583 	ldbu	r2,-25002(gp)
  80274c:	10803fcc 	andi	r2,r2,255
  802750:	1080201c 	xori	r2,r2,128
  802754:	10bfe004 	addi	r2,r2,-128
  802758:	10000526 	beq	r2,zero,802770 <tick+0x1bf0>
  80275c:	d0a7a383 	ldbu	r2,-24946(gp)
  802760:	10803fcc 	andi	r2,r2,255
  802764:	1080201c 	xori	r2,r2,128
  802768:	10bfe004 	addi	r2,r2,-128
  80276c:	10000f26 	beq	r2,zero,8027ac <tick+0x1c2c>
  802770:	d0a75b43 	ldbu	r2,-25235(gp)
  802774:	10803fcc 	andi	r2,r2,255
  802778:	1080201c 	xori	r2,r2,128
  80277c:	10bfe004 	addi	r2,r2,-128
  802780:	10000a1e 	bne	r2,zero,8027ac <tick+0x1c2c>
  802784:	d0a75683 	ldbu	r2,-25254(gp)
  802788:	10803fcc 	andi	r2,r2,255
  80278c:	1080201c 	xori	r2,r2,128
  802790:	10bfe004 	addi	r2,r2,-128
  802794:	10000726 	beq	r2,zero,8027b4 <tick+0x1c34>
  802798:	d0a79183 	ldbu	r2,-25018(gp)
  80279c:	10803fcc 	andi	r2,r2,255
  8027a0:	1080201c 	xori	r2,r2,128
  8027a4:	10bfe004 	addi	r2,r2,-128
  8027a8:	10000226 	beq	r2,zero,8027b4 <tick+0x1c34>
  8027ac:	00800044 	movi	r2,1
  8027b0:	00000106 	br	8027b8 <tick+0x1c38>
  8027b4:	0005883a 	mov	r2,zero
  8027b8:	d0a78c05 	stb	r2,-25040(gp)
      g107 =(g106&&(!(_cg106)));
  8027bc:	d0a7a183 	ldbu	r2,-24954(gp)
  8027c0:	10803fcc 	andi	r2,r2,255
  8027c4:	1080201c 	xori	r2,r2,128
  8027c8:	10bfe004 	addi	r2,r2,-128
  8027cc:	10000726 	beq	r2,zero,8027ec <tick+0x1c6c>
  8027d0:	d0a78843 	ldbu	r2,-25055(gp)
  8027d4:	10803fcc 	andi	r2,r2,255
  8027d8:	1080201c 	xori	r2,r2,128
  8027dc:	10bfe004 	addi	r2,r2,-128
  8027e0:	1000021e 	bne	r2,zero,8027ec <tick+0x1c6c>
  8027e4:	00800044 	movi	r2,1
  8027e8:	00000106 	br	8027f0 <tick+0x1c70>
  8027ec:	0005883a 	mov	r2,zero
  8027f0:	d0a78b05 	stb	r2,-25044(gp)
      g111 = g1;
  8027f4:	d0a763c3 	ldbu	r2,-25201(gp)
  8027f8:	d0a75745 	stb	r2,-25251(gp)
      g115 =(PRE_g114);
  8027fc:	d0a75c83 	ldbu	r2,-25230(gp)
  802800:	d0a76085 	stb	r2,-25214(gp)
      _cg115 = PVARP_ex;
  802804:	d0a79103 	ldbu	r2,-25020(gp)
  802808:	d0a78ac5 	stb	r2,-25045(gp)
      g113 =(PRE_g112);
  80280c:	d0a755c3 	ldbu	r2,-25257(gp)
  802810:	d0a78b45 	stb	r2,-25043(gp)
      g113b = g113;
  802814:	d0a78b43 	ldbu	r2,-25043(gp)
  802818:	d0a75985 	stb	r2,-25242(gp)
      _cg113 = start_PVARP;
  80281c:	d0a78343 	ldbu	r2,-25075(gp)
  802820:	d0a79905 	stb	r2,-24988(gp)
      g112 =((g115&&_cg115)||(g113b&&(!(_cg113)))||g111);
  802824:	d0a76083 	ldbu	r2,-25214(gp)
  802828:	10803fcc 	andi	r2,r2,255
  80282c:	1080201c 	xori	r2,r2,128
  802830:	10bfe004 	addi	r2,r2,-128
  802834:	10000526 	beq	r2,zero,80284c <tick+0x1ccc>
  802838:	d0a78ac3 	ldbu	r2,-25045(gp)
  80283c:	10803fcc 	andi	r2,r2,255
  802840:	1080201c 	xori	r2,r2,128
  802844:	10bfe004 	addi	r2,r2,-128
  802848:	10000f1e 	bne	r2,zero,802888 <tick+0x1d08>
  80284c:	d0a75983 	ldbu	r2,-25242(gp)
  802850:	10803fcc 	andi	r2,r2,255
  802854:	1080201c 	xori	r2,r2,128
  802858:	10bfe004 	addi	r2,r2,-128
  80285c:	10000526 	beq	r2,zero,802874 <tick+0x1cf4>
  802860:	d0a79903 	ldbu	r2,-24988(gp)
  802864:	10803fcc 	andi	r2,r2,255
  802868:	1080201c 	xori	r2,r2,128
  80286c:	10bfe004 	addi	r2,r2,-128
  802870:	10000526 	beq	r2,zero,802888 <tick+0x1d08>
  802874:	d0a75743 	ldbu	r2,-25251(gp)
  802878:	10803fcc 	andi	r2,r2,255
  80287c:	1080201c 	xori	r2,r2,128
  802880:	10bfe004 	addi	r2,r2,-128
  802884:	10000226 	beq	r2,zero,802890 <tick+0x1d10>
  802888:	00800044 	movi	r2,1
  80288c:	00000106 	br	802894 <tick+0x1d14>
  802890:	0005883a 	mov	r2,zero
  802894:	d0a75a45 	stb	r2,-25239(gp)
      g116 =(g115&&(!(_cg115)));
  802898:	d0a76083 	ldbu	r2,-25214(gp)
  80289c:	10803fcc 	andi	r2,r2,255
  8028a0:	1080201c 	xori	r2,r2,128
  8028a4:	10bfe004 	addi	r2,r2,-128
  8028a8:	10000726 	beq	r2,zero,8028c8 <tick+0x1d48>
  8028ac:	d0a78ac3 	ldbu	r2,-25045(gp)
  8028b0:	10803fcc 	andi	r2,r2,255
  8028b4:	1080201c 	xori	r2,r2,128
  8028b8:	10bfe004 	addi	r2,r2,-128
  8028bc:	1000021e 	bne	r2,zero,8028c8 <tick+0x1d48>
  8028c0:	00800044 	movi	r2,1
  8028c4:	00000106 	br	8028cc <tick+0x1d4c>
  8028c8:	0005883a 	mov	r2,zero
  8028cc:	d0a78f85 	stb	r2,-25026(gp)
      if(g116){
  8028d0:	d0a78f83 	ldbu	r2,-25026(gp)
  8028d4:	10803fcc 	andi	r2,r2,255
  8028d8:	1080201c 	xori	r2,r2,128
  8028dc:	10bfe004 	addi	r2,r2,-128
  8028e0:	10000226 	beq	r2,zero,8028ec <tick+0x1d6c>
         PVARP_counting =(PVARP_counting||1);
  8028e4:	00800044 	movi	r2,1
  8028e8:	d0a76c85 	stb	r2,-25166(gp)
      }
      g114 =(g116||(g113b&&_cg113));
  8028ec:	d0a78f83 	ldbu	r2,-25026(gp)
  8028f0:	10803fcc 	andi	r2,r2,255
  8028f4:	1080201c 	xori	r2,r2,128
  8028f8:	10bfe004 	addi	r2,r2,-128
  8028fc:	10000a1e 	bne	r2,zero,802928 <tick+0x1da8>
  802900:	d0a75983 	ldbu	r2,-25242(gp)
  802904:	10803fcc 	andi	r2,r2,255
  802908:	1080201c 	xori	r2,r2,128
  80290c:	10bfe004 	addi	r2,r2,-128
  802910:	10000726 	beq	r2,zero,802930 <tick+0x1db0>
  802914:	d0a79903 	ldbu	r2,-24988(gp)
  802918:	10803fcc 	andi	r2,r2,255
  80291c:	1080201c 	xori	r2,r2,128
  802920:	10bfe004 	addi	r2,r2,-128
  802924:	10000226 	beq	r2,zero,802930 <tick+0x1db0>
  802928:	00800044 	movi	r2,1
  80292c:	00000106 	br	802934 <tick+0x1db4>
  802930:	0005883a 	mov	r2,zero
  802934:	d0a77e05 	stb	r2,-25096(gp)
      g118 = g1;
  802938:	d0a763c3 	ldbu	r2,-25201(gp)
  80293c:	d0a76a05 	stb	r2,-25176(gp)
      g123 =(PRE_g122);
  802940:	d0a757c3 	ldbu	r2,-25249(gp)
  802944:	d0a76285 	stb	r2,-25206(gp)
      _cg123 = AEI_ex;
  802948:	d0a75ac3 	ldbu	r2,-25237(gp)
  80294c:	d0a76105 	stb	r2,-25212(gp)
      g120 =(PRE_g119);
  802950:	d0a77fc3 	ldbu	r2,-25089(gp)
  802954:	d0a79e45 	stb	r2,-24967(gp)
      g120b = g120;
  802958:	d0a79e43 	ldbu	r2,-24967(gp)
  80295c:	d0a778c5 	stb	r2,-25117(gp)
      _cg120 = start_AEI;
  802960:	d0a78883 	ldbu	r2,-25054(gp)
  802964:	d0a79e85 	stb	r2,-24966(gp)
      g124 =(g123&&(!(_cg123)));
  802968:	d0a76283 	ldbu	r2,-25206(gp)
  80296c:	10803fcc 	andi	r2,r2,255
  802970:	1080201c 	xori	r2,r2,128
  802974:	10bfe004 	addi	r2,r2,-128
  802978:	10000726 	beq	r2,zero,802998 <tick+0x1e18>
  80297c:	d0a76103 	ldbu	r2,-25212(gp)
  802980:	10803fcc 	andi	r2,r2,255
  802984:	1080201c 	xori	r2,r2,128
  802988:	10bfe004 	addi	r2,r2,-128
  80298c:	1000021e 	bne	r2,zero,802998 <tick+0x1e18>
  802990:	00800044 	movi	r2,1
  802994:	00000106 	br	80299c <tick+0x1e1c>
  802998:	0005883a 	mov	r2,zero
  80299c:	d0a79145 	stb	r2,-25019(gp)
      if(g124){
  8029a0:	d0a79143 	ldbu	r2,-25019(gp)
  8029a4:	10803fcc 	andi	r2,r2,255
  8029a8:	1080201c 	xori	r2,r2,128
  8029ac:	10bfe004 	addi	r2,r2,-128
  8029b0:	10000226 	beq	r2,zero,8029bc <tick+0x1e3c>
         AEI_counting =(AEI_counting||1);
  8029b4:	00800044 	movi	r2,1
  8029b8:	d0a77c05 	stb	r2,-25104(gp)
      }
      g121 =(g124||(g120b&&_cg120));
  8029bc:	d0a79143 	ldbu	r2,-25019(gp)
  8029c0:	10803fcc 	andi	r2,r2,255
  8029c4:	1080201c 	xori	r2,r2,128
  8029c8:	10bfe004 	addi	r2,r2,-128
  8029cc:	10000a1e 	bne	r2,zero,8029f8 <tick+0x1e78>
  8029d0:	d0a778c3 	ldbu	r2,-25117(gp)
  8029d4:	10803fcc 	andi	r2,r2,255
  8029d8:	1080201c 	xori	r2,r2,128
  8029dc:	10bfe004 	addi	r2,r2,-128
  8029e0:	10000726 	beq	r2,zero,802a00 <tick+0x1e80>
  8029e4:	d0a79e83 	ldbu	r2,-24966(gp)
  8029e8:	10803fcc 	andi	r2,r2,255
  8029ec:	1080201c 	xori	r2,r2,128
  8029f0:	10bfe004 	addi	r2,r2,-128
  8029f4:	10000226 	beq	r2,zero,802a00 <tick+0x1e80>
  8029f8:	00800044 	movi	r2,1
  8029fc:	00000106 	br	802a04 <tick+0x1e84>
  802a00:	0005883a 	mov	r2,zero
  802a04:	d0a79d45 	stb	r2,-24971(gp)
      _cg121 = stop_AEI;
  802a08:	d0a77803 	ldbu	r2,-25120(gp)
  802a0c:	d0a78505 	stb	r2,-25068(gp)
      g119 =(g118||(g123&&_cg123)||(g120b&&(!(_cg120)))||(g121&&_cg121));
  802a10:	d0a76a03 	ldbu	r2,-25176(gp)
  802a14:	10803fcc 	andi	r2,r2,255
  802a18:	1080201c 	xori	r2,r2,128
  802a1c:	10bfe004 	addi	r2,r2,-128
  802a20:	10001e1e 	bne	r2,zero,802a9c <tick+0x1f1c>
  802a24:	d0a76283 	ldbu	r2,-25206(gp)
  802a28:	10803fcc 	andi	r2,r2,255
  802a2c:	1080201c 	xori	r2,r2,128
  802a30:	10bfe004 	addi	r2,r2,-128
  802a34:	10000526 	beq	r2,zero,802a4c <tick+0x1ecc>
  802a38:	d0a76103 	ldbu	r2,-25212(gp)
  802a3c:	10803fcc 	andi	r2,r2,255
  802a40:	1080201c 	xori	r2,r2,128
  802a44:	10bfe004 	addi	r2,r2,-128
  802a48:	1000141e 	bne	r2,zero,802a9c <tick+0x1f1c>
  802a4c:	d0a778c3 	ldbu	r2,-25117(gp)
  802a50:	10803fcc 	andi	r2,r2,255
  802a54:	1080201c 	xori	r2,r2,128
  802a58:	10bfe004 	addi	r2,r2,-128
  802a5c:	10000526 	beq	r2,zero,802a74 <tick+0x1ef4>
  802a60:	d0a79e83 	ldbu	r2,-24966(gp)
  802a64:	10803fcc 	andi	r2,r2,255
  802a68:	1080201c 	xori	r2,r2,128
  802a6c:	10bfe004 	addi	r2,r2,-128
  802a70:	10000a26 	beq	r2,zero,802a9c <tick+0x1f1c>
  802a74:	d0a79d43 	ldbu	r2,-24971(gp)
  802a78:	10803fcc 	andi	r2,r2,255
  802a7c:	1080201c 	xori	r2,r2,128
  802a80:	10bfe004 	addi	r2,r2,-128
  802a84:	10000726 	beq	r2,zero,802aa4 <tick+0x1f24>
  802a88:	d0a78503 	ldbu	r2,-25068(gp)
  802a8c:	10803fcc 	andi	r2,r2,255
  802a90:	1080201c 	xori	r2,r2,128
  802a94:	10bfe004 	addi	r2,r2,-128
  802a98:	10000226 	beq	r2,zero,802aa4 <tick+0x1f24>
  802a9c:	00800044 	movi	r2,1
  802aa0:	00000106 	br	802aa8 <tick+0x1f28>
  802aa4:	0005883a 	mov	r2,zero
  802aa8:	d0a78605 	stb	r2,-25064(gp)
      g122 =(g121&&(!(_cg121)));
  802aac:	d0a79d43 	ldbu	r2,-24971(gp)
  802ab0:	10803fcc 	andi	r2,r2,255
  802ab4:	1080201c 	xori	r2,r2,128
  802ab8:	10bfe004 	addi	r2,r2,-128
  802abc:	10000726 	beq	r2,zero,802adc <tick+0x1f5c>
  802ac0:	d0a78503 	ldbu	r2,-25068(gp)
  802ac4:	10803fcc 	andi	r2,r2,255
  802ac8:	1080201c 	xori	r2,r2,128
  802acc:	10bfe004 	addi	r2,r2,-128
  802ad0:	1000021e 	bne	r2,zero,802adc <tick+0x1f5c>
  802ad4:	00800044 	movi	r2,1
  802ad8:	00000106 	br	802ae0 <tick+0x1f60>
  802adc:	0005883a 	mov	r2,zero
  802ae0:	d0a78005 	stb	r2,-25088(gp)
      g126 = g1;
  802ae4:	d0a763c3 	ldbu	r2,-25201(gp)
  802ae8:	d0a76505 	stb	r2,-25196(gp)
      g131 =(PRE_g130);
  802aec:	d0a78c43 	ldbu	r2,-25039(gp)
  802af0:	d0a77f05 	stb	r2,-25092(gp)
      g131b = g131;
  802af4:	d0a77f03 	ldbu	r2,-25092(gp)
  802af8:	d0a764c5 	stb	r2,-25197(gp)
      if(g131b){
  802afc:	d0a764c3 	ldbu	r2,-25197(gp)
  802b00:	10803fcc 	andi	r2,r2,255
  802b04:	1080201c 	xori	r2,r2,128
  802b08:	10bfe004 	addi	r2,r2,-128
  802b0c:	10000226 	beq	r2,zero,802b18 <tick+0x1f98>
         LRI_counting =(LRI_counting||1);
  802b10:	00800044 	movi	r2,1
  802b14:	d0a77005 	stb	r2,-25152(gp)
      }
      g128 =(PRE_g127);
  802b18:	d0a79bc3 	ldbu	r2,-24977(gp)
  802b1c:	d0a77785 	stb	r2,-25122(gp)
      g128b = g128;
  802b20:	d0a77783 	ldbu	r2,-25122(gp)
  802b24:	d0a79385 	stb	r2,-25010(gp)
      _cg128 = start_LRI;
  802b28:	d0a78a43 	ldbu	r2,-25047(gp)
  802b2c:	d0a76045 	stb	r2,-25215(gp)
      g129 =(g131b||(g128b&&_cg128));
  802b30:	d0a764c3 	ldbu	r2,-25197(gp)
  802b34:	10803fcc 	andi	r2,r2,255
  802b38:	1080201c 	xori	r2,r2,128
  802b3c:	10bfe004 	addi	r2,r2,-128
  802b40:	10000a1e 	bne	r2,zero,802b6c <tick+0x1fec>
  802b44:	d0a79383 	ldbu	r2,-25010(gp)
  802b48:	10803fcc 	andi	r2,r2,255
  802b4c:	1080201c 	xori	r2,r2,128
  802b50:	10bfe004 	addi	r2,r2,-128
  802b54:	10000726 	beq	r2,zero,802b74 <tick+0x1ff4>
  802b58:	d0a76043 	ldbu	r2,-25215(gp)
  802b5c:	10803fcc 	andi	r2,r2,255
  802b60:	1080201c 	xori	r2,r2,128
  802b64:	10bfe004 	addi	r2,r2,-128
  802b68:	10000226 	beq	r2,zero,802b74 <tick+0x1ff4>
  802b6c:	00800044 	movi	r2,1
  802b70:	00000106 	br	802b78 <tick+0x1ff8>
  802b74:	0005883a 	mov	r2,zero
  802b78:	d0a77ec5 	stb	r2,-25093(gp)
      _cg129 = stop_LRI;
  802b7c:	d0a79cc3 	ldbu	r2,-24973(gp)
  802b80:	d0a79305 	stb	r2,-25012(gp)
      g127 =(g126||(g129&&_cg129)||(g128b&&(!(_cg128))));
  802b84:	d0a76503 	ldbu	r2,-25196(gp)
  802b88:	10803fcc 	andi	r2,r2,255
  802b8c:	1080201c 	xori	r2,r2,128
  802b90:	10bfe004 	addi	r2,r2,-128
  802b94:	1000141e 	bne	r2,zero,802be8 <tick+0x2068>
  802b98:	d0a77ec3 	ldbu	r2,-25093(gp)
  802b9c:	10803fcc 	andi	r2,r2,255
  802ba0:	1080201c 	xori	r2,r2,128
  802ba4:	10bfe004 	addi	r2,r2,-128
  802ba8:	10000526 	beq	r2,zero,802bc0 <tick+0x2040>
  802bac:	d0a79303 	ldbu	r2,-25012(gp)
  802bb0:	10803fcc 	andi	r2,r2,255
  802bb4:	1080201c 	xori	r2,r2,128
  802bb8:	10bfe004 	addi	r2,r2,-128
  802bbc:	10000a1e 	bne	r2,zero,802be8 <tick+0x2068>
  802bc0:	d0a79383 	ldbu	r2,-25010(gp)
  802bc4:	10803fcc 	andi	r2,r2,255
  802bc8:	1080201c 	xori	r2,r2,128
  802bcc:	10bfe004 	addi	r2,r2,-128
  802bd0:	10000726 	beq	r2,zero,802bf0 <tick+0x2070>
  802bd4:	d0a76043 	ldbu	r2,-25215(gp)
  802bd8:	10803fcc 	andi	r2,r2,255
  802bdc:	1080201c 	xori	r2,r2,128
  802be0:	10bfe004 	addi	r2,r2,-128
  802be4:	1000021e 	bne	r2,zero,802bf0 <tick+0x2070>
  802be8:	00800044 	movi	r2,1
  802bec:	00000106 	br	802bf4 <tick+0x2074>
  802bf0:	0005883a 	mov	r2,zero
  802bf4:	d0a75d05 	stb	r2,-25228(gp)
      g130 =(g129&&(!(_cg129)));
  802bf8:	d0a77ec3 	ldbu	r2,-25093(gp)
  802bfc:	10803fcc 	andi	r2,r2,255
  802c00:	1080201c 	xori	r2,r2,128
  802c04:	10bfe004 	addi	r2,r2,-128
  802c08:	10000726 	beq	r2,zero,802c28 <tick+0x20a8>
  802c0c:	d0a79303 	ldbu	r2,-25012(gp)
  802c10:	10803fcc 	andi	r2,r2,255
  802c14:	1080201c 	xori	r2,r2,128
  802c18:	10bfe004 	addi	r2,r2,-128
  802c1c:	1000021e 	bne	r2,zero,802c28 <tick+0x20a8>
  802c20:	00800044 	movi	r2,1
  802c24:	00000106 	br	802c2c <tick+0x20ac>
  802c28:	0005883a 	mov	r2,zero
  802c2c:	d0a79c05 	stb	r2,-24976(gp)
      g133 = g1;
  802c30:	d0a763c3 	ldbu	r2,-25201(gp)
  802c34:	d0a79fc5 	stb	r2,-24961(gp)
      g135 =(PRE_g134);
  802c38:	d0a75843 	ldbu	r2,-25247(gp)
  802c3c:	d0a76445 	stb	r2,-25199(gp)
      g135b = g135;
  802c40:	d0a76443 	ldbu	r2,-25199(gp)
  802c44:	d0a79a85 	stb	r2,-24982(gp)
      _cg135 = start_URI;
  802c48:	d0a78e03 	ldbu	r2,-25032(gp)
  802c4c:	d0a79c45 	stb	r2,-24975(gp)
      g136 =((g135b&&_cg135)||g139);
  802c50:	d0a79a83 	ldbu	r2,-24982(gp)
  802c54:	10803fcc 	andi	r2,r2,255
  802c58:	1080201c 	xori	r2,r2,128
  802c5c:	10bfe004 	addi	r2,r2,-128
  802c60:	10000526 	beq	r2,zero,802c78 <tick+0x20f8>
  802c64:	d0a79c43 	ldbu	r2,-24975(gp)
  802c68:	10803fcc 	andi	r2,r2,255
  802c6c:	1080201c 	xori	r2,r2,128
  802c70:	10bfe004 	addi	r2,r2,-128
  802c74:	1000051e 	bne	r2,zero,802c8c <tick+0x210c>
  802c78:	d0a75603 	ldbu	r2,-25256(gp)
  802c7c:	10803fcc 	andi	r2,r2,255
  802c80:	1080201c 	xori	r2,r2,128
  802c84:	10bfe004 	addi	r2,r2,-128
  802c88:	10000226 	beq	r2,zero,802c94 <tick+0x2114>
  802c8c:	00800044 	movi	r2,1
  802c90:	00000106 	br	802c98 <tick+0x2118>
  802c94:	0005883a 	mov	r2,zero
  802c98:	d0a777c5 	stb	r2,-25121(gp)
      _cg136 = stop_URI;
  802c9c:	d0a78143 	ldbu	r2,-25083(gp)
  802ca0:	d0a781c5 	stb	r2,-25081(gp)
      g134 =(g133||(g136&&_cg136)||(g135b&&(!(_cg135)))||(g138&&_cg138));
  802ca4:	d0a79fc3 	ldbu	r2,-24961(gp)
  802ca8:	10803fcc 	andi	r2,r2,255
  802cac:	1080201c 	xori	r2,r2,128
  802cb0:	10bfe004 	addi	r2,r2,-128
  802cb4:	10001e1e 	bne	r2,zero,802d30 <tick+0x21b0>
  802cb8:	d0a777c3 	ldbu	r2,-25121(gp)
  802cbc:	10803fcc 	andi	r2,r2,255
  802cc0:	1080201c 	xori	r2,r2,128
  802cc4:	10bfe004 	addi	r2,r2,-128
  802cc8:	10000526 	beq	r2,zero,802ce0 <tick+0x2160>
  802ccc:	d0a781c3 	ldbu	r2,-25081(gp)
  802cd0:	10803fcc 	andi	r2,r2,255
  802cd4:	1080201c 	xori	r2,r2,128
  802cd8:	10bfe004 	addi	r2,r2,-128
  802cdc:	1000141e 	bne	r2,zero,802d30 <tick+0x21b0>
  802ce0:	d0a79a83 	ldbu	r2,-24982(gp)
  802ce4:	10803fcc 	andi	r2,r2,255
  802ce8:	1080201c 	xori	r2,r2,128
  802cec:	10bfe004 	addi	r2,r2,-128
  802cf0:	10000526 	beq	r2,zero,802d08 <tick+0x2188>
  802cf4:	d0a79c43 	ldbu	r2,-24975(gp)
  802cf8:	10803fcc 	andi	r2,r2,255
  802cfc:	1080201c 	xori	r2,r2,128
  802d00:	10bfe004 	addi	r2,r2,-128
  802d04:	10000a26 	beq	r2,zero,802d30 <tick+0x21b0>
  802d08:	d0a78a83 	ldbu	r2,-25046(gp)
  802d0c:	10803fcc 	andi	r2,r2,255
  802d10:	1080201c 	xori	r2,r2,128
  802d14:	10bfe004 	addi	r2,r2,-128
  802d18:	10000726 	beq	r2,zero,802d38 <tick+0x21b8>
  802d1c:	d0a79883 	ldbu	r2,-24990(gp)
  802d20:	10803fcc 	andi	r2,r2,255
  802d24:	1080201c 	xori	r2,r2,128
  802d28:	10bfe004 	addi	r2,r2,-128
  802d2c:	10000226 	beq	r2,zero,802d38 <tick+0x21b8>
  802d30:	00800044 	movi	r2,1
  802d34:	00000106 	br	802d3c <tick+0x21bc>
  802d38:	0005883a 	mov	r2,zero
  802d3c:	d0a78185 	stb	r2,-25082(gp)
      g137 =(g136&&(!(_cg136)));
  802d40:	d0a777c3 	ldbu	r2,-25121(gp)
  802d44:	10803fcc 	andi	r2,r2,255
  802d48:	1080201c 	xori	r2,r2,128
  802d4c:	10bfe004 	addi	r2,r2,-128
  802d50:	10000726 	beq	r2,zero,802d70 <tick+0x21f0>
  802d54:	d0a781c3 	ldbu	r2,-25081(gp)
  802d58:	10803fcc 	andi	r2,r2,255
  802d5c:	1080201c 	xori	r2,r2,128
  802d60:	10bfe004 	addi	r2,r2,-128
  802d64:	1000021e 	bne	r2,zero,802d70 <tick+0x21f0>
  802d68:	00800044 	movi	r2,1
  802d6c:	00000106 	br	802d74 <tick+0x21f4>
  802d70:	0005883a 	mov	r2,zero
  802d74:	d0a79285 	stb	r2,-25014(gp)
      g141 = g1;
  802d78:	d0a763c3 	ldbu	r2,-25201(gp)
  802d7c:	d0a78f45 	stb	r2,-25027(gp)
      g143 =(PRE_g142);
  802d80:	d0a75f03 	ldbu	r2,-25220(gp)
  802d84:	d0a77845 	stb	r2,-25119(gp)
      g143b = g143;
  802d88:	d0a77843 	ldbu	r2,-25119(gp)
  802d8c:	d0a79d85 	stb	r2,-24970(gp)
      _cg143 = start_VRP;
  802d90:	d0a76a83 	ldbu	r2,-25174(gp)
  802d94:	d0a7a085 	stb	r2,-24958(gp)
      g145 =(PRE_g144);
  802d98:	d0a76f83 	ldbu	r2,-25154(gp)
  802d9c:	d0a75f85 	stb	r2,-25218(gp)
      _cg145 = VRP_ex;
  802da0:	d0a77d83 	ldbu	r2,-25098(gp)
  802da4:	d0a77dc5 	stb	r2,-25097(gp)
      g142 =((g143b&&(!(_cg143)))||g141||(g145&&_cg145));
  802da8:	d0a79d83 	ldbu	r2,-24970(gp)
  802dac:	10803fcc 	andi	r2,r2,255
  802db0:	1080201c 	xori	r2,r2,128
  802db4:	10bfe004 	addi	r2,r2,-128
  802db8:	10000526 	beq	r2,zero,802dd0 <tick+0x2250>
  802dbc:	d0a7a083 	ldbu	r2,-24958(gp)
  802dc0:	10803fcc 	andi	r2,r2,255
  802dc4:	1080201c 	xori	r2,r2,128
  802dc8:	10bfe004 	addi	r2,r2,-128
  802dcc:	10000f26 	beq	r2,zero,802e0c <tick+0x228c>
  802dd0:	d0a78f43 	ldbu	r2,-25027(gp)
  802dd4:	10803fcc 	andi	r2,r2,255
  802dd8:	1080201c 	xori	r2,r2,128
  802ddc:	10bfe004 	addi	r2,r2,-128
  802de0:	10000a1e 	bne	r2,zero,802e0c <tick+0x228c>
  802de4:	d0a75f83 	ldbu	r2,-25218(gp)
  802de8:	10803fcc 	andi	r2,r2,255
  802dec:	1080201c 	xori	r2,r2,128
  802df0:	10bfe004 	addi	r2,r2,-128
  802df4:	10000726 	beq	r2,zero,802e14 <tick+0x2294>
  802df8:	d0a77dc3 	ldbu	r2,-25097(gp)
  802dfc:	10803fcc 	andi	r2,r2,255
  802e00:	1080201c 	xori	r2,r2,128
  802e04:	10bfe004 	addi	r2,r2,-128
  802e08:	10000226 	beq	r2,zero,802e14 <tick+0x2294>
  802e0c:	00800044 	movi	r2,1
  802e10:	00000106 	br	802e18 <tick+0x2298>
  802e14:	0005883a 	mov	r2,zero
  802e18:	d0a79705 	stb	r2,-24996(gp)
      g146 =(g145&&(!(_cg145)));
  802e1c:	d0a75f83 	ldbu	r2,-25218(gp)
  802e20:	10803fcc 	andi	r2,r2,255
  802e24:	1080201c 	xori	r2,r2,128
  802e28:	10bfe004 	addi	r2,r2,-128
  802e2c:	10000726 	beq	r2,zero,802e4c <tick+0x22cc>
  802e30:	d0a77dc3 	ldbu	r2,-25097(gp)
  802e34:	10803fcc 	andi	r2,r2,255
  802e38:	1080201c 	xori	r2,r2,128
  802e3c:	10bfe004 	addi	r2,r2,-128
  802e40:	1000021e 	bne	r2,zero,802e4c <tick+0x22cc>
  802e44:	00800044 	movi	r2,1
  802e48:	00000106 	br	802e50 <tick+0x22d0>
  802e4c:	0005883a 	mov	r2,zero
  802e50:	d0a75b05 	stb	r2,-25236(gp)
      if(g146){
  802e54:	d0a75b03 	ldbu	r2,-25236(gp)
  802e58:	10803fcc 	andi	r2,r2,255
  802e5c:	1080201c 	xori	r2,r2,128
  802e60:	10bfe004 	addi	r2,r2,-128
  802e64:	10000226 	beq	r2,zero,802e70 <tick+0x22f0>
         VRP_counting =(VRP_counting||1);
  802e68:	00800044 	movi	r2,1
  802e6c:	d0a78105 	stb	r2,-25084(gp)
      }
      g144 =(g146||(g143b&&_cg143));
  802e70:	d0a75b03 	ldbu	r2,-25236(gp)
  802e74:	10803fcc 	andi	r2,r2,255
  802e78:	1080201c 	xori	r2,r2,128
  802e7c:	10bfe004 	addi	r2,r2,-128
  802e80:	10000a1e 	bne	r2,zero,802eac <tick+0x232c>
  802e84:	d0a79d83 	ldbu	r2,-24970(gp)
  802e88:	10803fcc 	andi	r2,r2,255
  802e8c:	1080201c 	xori	r2,r2,128
  802e90:	10bfe004 	addi	r2,r2,-128
  802e94:	10000726 	beq	r2,zero,802eb4 <tick+0x2334>
  802e98:	d0a7a083 	ldbu	r2,-24958(gp)
  802e9c:	10803fcc 	andi	r2,r2,255
  802ea0:	1080201c 	xori	r2,r2,128
  802ea4:	10bfe004 	addi	r2,r2,-128
  802ea8:	10000226 	beq	r2,zero,802eb4 <tick+0x2334>
  802eac:	00800044 	movi	r2,1
  802eb0:	00000106 	br	802eb8 <tick+0x2338>
  802eb4:	0005883a 	mov	r2,zero
  802eb8:	d0a77d05 	stb	r2,-25100(gp)
      g20_e1 =(!((g4||g6||g9||g13)));
  802ebc:	d0a75643 	ldbu	r2,-25255(gp)
  802ec0:	10803fcc 	andi	r2,r2,255
  802ec4:	1080201c 	xori	r2,r2,128
  802ec8:	10bfe004 	addi	r2,r2,-128
  802ecc:	1000111e 	bne	r2,zero,802f14 <tick+0x2394>
  802ed0:	d0a78fc3 	ldbu	r2,-25025(gp)
  802ed4:	10803fcc 	andi	r2,r2,255
  802ed8:	1080201c 	xori	r2,r2,128
  802edc:	10bfe004 	addi	r2,r2,-128
  802ee0:	10000c1e 	bne	r2,zero,802f14 <tick+0x2394>
  802ee4:	d0a75cc3 	ldbu	r2,-25229(gp)
  802ee8:	10803fcc 	andi	r2,r2,255
  802eec:	1080201c 	xori	r2,r2,128
  802ef0:	10bfe004 	addi	r2,r2,-128
  802ef4:	1000071e 	bne	r2,zero,802f14 <tick+0x2394>
  802ef8:	d0a78c83 	ldbu	r2,-25038(gp)
  802efc:	10803fcc 	andi	r2,r2,255
  802f00:	1080201c 	xori	r2,r2,128
  802f04:	10bfe004 	addi	r2,r2,-128
  802f08:	1000021e 	bne	r2,zero,802f14 <tick+0x2394>
  802f0c:	00800044 	movi	r2,1
  802f10:	00000106 	br	802f18 <tick+0x2398>
  802f14:	0005883a 	mov	r2,zero
  802f18:	d0a7a005 	stb	r2,-24960(gp)
      g33_e2 =(!((g23||g26||g28)));
  802f1c:	d0a77a43 	ldbu	r2,-25111(gp)
  802f20:	10803fcc 	andi	r2,r2,255
  802f24:	1080201c 	xori	r2,r2,128
  802f28:	10bfe004 	addi	r2,r2,-128
  802f2c:	10000c1e 	bne	r2,zero,802f60 <tick+0x23e0>
  802f30:	d0a7a283 	ldbu	r2,-24950(gp)
  802f34:	10803fcc 	andi	r2,r2,255
  802f38:	1080201c 	xori	r2,r2,128
  802f3c:	10bfe004 	addi	r2,r2,-128
  802f40:	1000071e 	bne	r2,zero,802f60 <tick+0x23e0>
  802f44:	d0a79843 	ldbu	r2,-24991(gp)
  802f48:	10803fcc 	andi	r2,r2,255
  802f4c:	1080201c 	xori	r2,r2,128
  802f50:	10bfe004 	addi	r2,r2,-128
  802f54:	1000021e 	bne	r2,zero,802f60 <tick+0x23e0>
  802f58:	00800044 	movi	r2,1
  802f5c:	00000106 	br	802f64 <tick+0x23e4>
  802f60:	0005883a 	mov	r2,zero
  802f64:	d0a76e05 	stb	r2,-25160(gp)
      g50_e3 =(!((g36||g39||g41)));
  802f68:	d0a78743 	ldbu	r2,-25059(gp)
  802f6c:	10803fcc 	andi	r2,r2,255
  802f70:	1080201c 	xori	r2,r2,128
  802f74:	10bfe004 	addi	r2,r2,-128
  802f78:	10000c1e 	bne	r2,zero,802fac <tick+0x242c>
  802f7c:	d0a79dc3 	ldbu	r2,-24969(gp)
  802f80:	10803fcc 	andi	r2,r2,255
  802f84:	1080201c 	xori	r2,r2,128
  802f88:	10bfe004 	addi	r2,r2,-128
  802f8c:	1000071e 	bne	r2,zero,802fac <tick+0x242c>
  802f90:	d0a76983 	ldbu	r2,-25178(gp)
  802f94:	10803fcc 	andi	r2,r2,255
  802f98:	1080201c 	xori	r2,r2,128
  802f9c:	10bfe004 	addi	r2,r2,-128
  802fa0:	1000021e 	bne	r2,zero,802fac <tick+0x242c>
  802fa4:	00800044 	movi	r2,1
  802fa8:	00000106 	br	802fb0 <tick+0x2430>
  802fac:	0005883a 	mov	r2,zero
  802fb0:	d0a76885 	stb	r2,-25182(gp)
      g60_e4 =(!((g53||g56)));
  802fb4:	d0a78d03 	ldbu	r2,-25036(gp)
  802fb8:	10803fcc 	andi	r2,r2,255
  802fbc:	1080201c 	xori	r2,r2,128
  802fc0:	10bfe004 	addi	r2,r2,-128
  802fc4:	1000071e 	bne	r2,zero,802fe4 <tick+0x2464>
  802fc8:	d0a77e43 	ldbu	r2,-25095(gp)
  802fcc:	10803fcc 	andi	r2,r2,255
  802fd0:	1080201c 	xori	r2,r2,128
  802fd4:	10bfe004 	addi	r2,r2,-128
  802fd8:	1000021e 	bne	r2,zero,802fe4 <tick+0x2464>
  802fdc:	00800044 	movi	r2,1
  802fe0:	00000106 	br	802fe8 <tick+0x2468>
  802fe4:	0005883a 	mov	r2,zero
  802fe8:	d0a77685 	stb	r2,-25126(gp)
      g76_e5 =(!((g63||g66||g68)));
  802fec:	d0a783c3 	ldbu	r2,-25073(gp)
  802ff0:	10803fcc 	andi	r2,r2,255
  802ff4:	1080201c 	xori	r2,r2,128
  802ff8:	10bfe004 	addi	r2,r2,-128
  802ffc:	10000c1e 	bne	r2,zero,803030 <tick+0x24b0>
  803000:	d0a77a03 	ldbu	r2,-25112(gp)
  803004:	10803fcc 	andi	r2,r2,255
  803008:	1080201c 	xori	r2,r2,128
  80300c:	10bfe004 	addi	r2,r2,-128
  803010:	1000071e 	bne	r2,zero,803030 <tick+0x24b0>
  803014:	d0a79643 	ldbu	r2,-24999(gp)
  803018:	10803fcc 	andi	r2,r2,255
  80301c:	1080201c 	xori	r2,r2,128
  803020:	10bfe004 	addi	r2,r2,-128
  803024:	1000021e 	bne	r2,zero,803030 <tick+0x24b0>
  803028:	00800044 	movi	r2,1
  80302c:	00000106 	br	803034 <tick+0x24b4>
  803030:	0005883a 	mov	r2,zero
  803034:	d0a78385 	stb	r2,-25074(gp)
      g102_e6 =(!((g79||g82||g85||g90||g94)));
  803038:	d0a773c3 	ldbu	r2,-25137(gp)
  80303c:	10803fcc 	andi	r2,r2,255
  803040:	1080201c 	xori	r2,r2,128
  803044:	10bfe004 	addi	r2,r2,-128
  803048:	1000161e 	bne	r2,zero,8030a4 <tick+0x2524>
  80304c:	d0a76543 	ldbu	r2,-25195(gp)
  803050:	10803fcc 	andi	r2,r2,255
  803054:	1080201c 	xori	r2,r2,128
  803058:	10bfe004 	addi	r2,r2,-128
  80305c:	1000111e 	bne	r2,zero,8030a4 <tick+0x2524>
  803060:	d0a75c03 	ldbu	r2,-25232(gp)
  803064:	10803fcc 	andi	r2,r2,255
  803068:	1080201c 	xori	r2,r2,128
  80306c:	10bfe004 	addi	r2,r2,-128
  803070:	10000c1e 	bne	r2,zero,8030a4 <tick+0x2524>
  803074:	d0a782c3 	ldbu	r2,-25077(gp)
  803078:	10803fcc 	andi	r2,r2,255
  80307c:	1080201c 	xori	r2,r2,128
  803080:	10bfe004 	addi	r2,r2,-128
  803084:	1000071e 	bne	r2,zero,8030a4 <tick+0x2524>
  803088:	d0a77483 	ldbu	r2,-25134(gp)
  80308c:	10803fcc 	andi	r2,r2,255
  803090:	1080201c 	xori	r2,r2,128
  803094:	10bfe004 	addi	r2,r2,-128
  803098:	1000021e 	bne	r2,zero,8030a4 <tick+0x2524>
  80309c:	00800044 	movi	r2,1
  8030a0:	00000106 	br	8030a8 <tick+0x2528>
  8030a4:	0005883a 	mov	r2,zero
  8030a8:	d0a79b45 	stb	r2,-24979(gp)
      g110_e7 =(!((g105||g108)));
  8030ac:	d0a76ec3 	ldbu	r2,-25157(gp)
  8030b0:	10803fcc 	andi	r2,r2,255
  8030b4:	1080201c 	xori	r2,r2,128
  8030b8:	10bfe004 	addi	r2,r2,-128
  8030bc:	1000071e 	bne	r2,zero,8030dc <tick+0x255c>
  8030c0:	d0a75683 	ldbu	r2,-25254(gp)
  8030c4:	10803fcc 	andi	r2,r2,255
  8030c8:	1080201c 	xori	r2,r2,128
  8030cc:	10bfe004 	addi	r2,r2,-128
  8030d0:	1000021e 	bne	r2,zero,8030dc <tick+0x255c>
  8030d4:	00800044 	movi	r2,1
  8030d8:	00000106 	br	8030e0 <tick+0x2560>
  8030dc:	0005883a 	mov	r2,zero
  8030e0:	d0a7a2c5 	stb	r2,-24949(gp)
      g117_e8 =(!((g113||g115)));
  8030e4:	d0a78b43 	ldbu	r2,-25043(gp)
  8030e8:	10803fcc 	andi	r2,r2,255
  8030ec:	1080201c 	xori	r2,r2,128
  8030f0:	10bfe004 	addi	r2,r2,-128
  8030f4:	1000071e 	bne	r2,zero,803114 <tick+0x2594>
  8030f8:	d0a76083 	ldbu	r2,-25214(gp)
  8030fc:	10803fcc 	andi	r2,r2,255
  803100:	1080201c 	xori	r2,r2,128
  803104:	10bfe004 	addi	r2,r2,-128
  803108:	1000021e 	bne	r2,zero,803114 <tick+0x2594>
  80310c:	00800044 	movi	r2,1
  803110:	00000106 	br	803118 <tick+0x2598>
  803114:	0005883a 	mov	r2,zero
  803118:	d0a758c5 	stb	r2,-25245(gp)
      g125_e9 =(!((g120||g123)));
  80311c:	d0a79e43 	ldbu	r2,-24967(gp)
  803120:	10803fcc 	andi	r2,r2,255
  803124:	1080201c 	xori	r2,r2,128
  803128:	10bfe004 	addi	r2,r2,-128
  80312c:	1000071e 	bne	r2,zero,80314c <tick+0x25cc>
  803130:	d0a76283 	ldbu	r2,-25206(gp)
  803134:	10803fcc 	andi	r2,r2,255
  803138:	1080201c 	xori	r2,r2,128
  80313c:	10bfe004 	addi	r2,r2,-128
  803140:	1000021e 	bne	r2,zero,80314c <tick+0x25cc>
  803144:	00800044 	movi	r2,1
  803148:	00000106 	br	803150 <tick+0x25d0>
  80314c:	0005883a 	mov	r2,zero
  803150:	d0a78805 	stb	r2,-25056(gp)
      g132_e10 =(!((g128||g131)));
  803154:	d0a77783 	ldbu	r2,-25122(gp)
  803158:	10803fcc 	andi	r2,r2,255
  80315c:	1080201c 	xori	r2,r2,128
  803160:	10bfe004 	addi	r2,r2,-128
  803164:	1000071e 	bne	r2,zero,803184 <tick+0x2604>
  803168:	d0a77f03 	ldbu	r2,-25092(gp)
  80316c:	10803fcc 	andi	r2,r2,255
  803170:	1080201c 	xori	r2,r2,128
  803174:	10bfe004 	addi	r2,r2,-128
  803178:	1000021e 	bne	r2,zero,803184 <tick+0x2604>
  80317c:	00800044 	movi	r2,1
  803180:	00000106 	br	803188 <tick+0x2608>
  803184:	0005883a 	mov	r2,zero
  803188:	d0a76785 	stb	r2,-25186(gp)
      g140_e11 =(!((g135||g138)));
  80318c:	d0a76443 	ldbu	r2,-25199(gp)
  803190:	10803fcc 	andi	r2,r2,255
  803194:	1080201c 	xori	r2,r2,128
  803198:	10bfe004 	addi	r2,r2,-128
  80319c:	1000071e 	bne	r2,zero,8031bc <tick+0x263c>
  8031a0:	d0a78a83 	ldbu	r2,-25046(gp)
  8031a4:	10803fcc 	andi	r2,r2,255
  8031a8:	1080201c 	xori	r2,r2,128
  8031ac:	10bfe004 	addi	r2,r2,-128
  8031b0:	1000021e 	bne	r2,zero,8031bc <tick+0x263c>
  8031b4:	00800044 	movi	r2,1
  8031b8:	00000106 	br	8031c0 <tick+0x2640>
  8031bc:	0005883a 	mov	r2,zero
  8031c0:	d0a76685 	stb	r2,-25190(gp)
      g147_e12 =(!((g143||g145)));
  8031c4:	d0a77843 	ldbu	r2,-25119(gp)
  8031c8:	10803fcc 	andi	r2,r2,255
  8031cc:	1080201c 	xori	r2,r2,128
  8031d0:	10bfe004 	addi	r2,r2,-128
  8031d4:	1000071e 	bne	r2,zero,8031f4 <tick+0x2674>
  8031d8:	d0a75f83 	ldbu	r2,-25218(gp)
  8031dc:	10803fcc 	andi	r2,r2,255
  8031e0:	1080201c 	xori	r2,r2,128
  8031e4:	10bfe004 	addi	r2,r2,-128
  8031e8:	1000021e 	bne	r2,zero,8031f4 <tick+0x2674>
  8031ec:	00800044 	movi	r2,1
  8031f0:	00000106 	br	8031f8 <tick+0x2678>
  8031f4:	0005883a 	mov	r2,zero
  8031f8:	d0a78985 	stb	r2,-25050(gp)
      g148_fix0 =((g20_e1||g20)&&(g33_e2||g33)&&(g50_e3||g50)&&(g60_e4||g60));
  8031fc:	d0a7a003 	ldbu	r2,-24960(gp)
  803200:	10803fcc 	andi	r2,r2,255
  803204:	1080201c 	xori	r2,r2,128
  803208:	10bfe004 	addi	r2,r2,-128
  80320c:	1000051e 	bne	r2,zero,803224 <tick+0x26a4>
  803210:	d0a78403 	ldbu	r2,-25072(gp)
  803214:	10803fcc 	andi	r2,r2,255
  803218:	1080201c 	xori	r2,r2,128
  80321c:	10bfe004 	addi	r2,r2,-128
  803220:	10002026 	beq	r2,zero,8032a4 <tick+0x2724>
  803224:	d0a76e03 	ldbu	r2,-25160(gp)
  803228:	10803fcc 	andi	r2,r2,255
  80322c:	1080201c 	xori	r2,r2,128
  803230:	10bfe004 	addi	r2,r2,-128
  803234:	1000051e 	bne	r2,zero,80324c <tick+0x26cc>
  803238:	d0a77f83 	ldbu	r2,-25090(gp)
  80323c:	10803fcc 	andi	r2,r2,255
  803240:	1080201c 	xori	r2,r2,128
  803244:	10bfe004 	addi	r2,r2,-128
  803248:	10001626 	beq	r2,zero,8032a4 <tick+0x2724>
  80324c:	d0a76883 	ldbu	r2,-25182(gp)
  803250:	10803fcc 	andi	r2,r2,255
  803254:	1080201c 	xori	r2,r2,128
  803258:	10bfe004 	addi	r2,r2,-128
  80325c:	1000051e 	bne	r2,zero,803274 <tick+0x26f4>
  803260:	d0a78943 	ldbu	r2,-25051(gp)
  803264:	10803fcc 	andi	r2,r2,255
  803268:	1080201c 	xori	r2,r2,128
  80326c:	10bfe004 	addi	r2,r2,-128
  803270:	10000c26 	beq	r2,zero,8032a4 <tick+0x2724>
  803274:	d0a77683 	ldbu	r2,-25126(gp)
  803278:	10803fcc 	andi	r2,r2,255
  80327c:	1080201c 	xori	r2,r2,128
  803280:	10bfe004 	addi	r2,r2,-128
  803284:	1000051e 	bne	r2,zero,80329c <tick+0x271c>
  803288:	d0a78483 	ldbu	r2,-25070(gp)
  80328c:	10803fcc 	andi	r2,r2,255
  803290:	1080201c 	xori	r2,r2,128
  803294:	10bfe004 	addi	r2,r2,-128
  803298:	10000226 	beq	r2,zero,8032a4 <tick+0x2724>
  80329c:	00800044 	movi	r2,1
  8032a0:	00000106 	br	8032a8 <tick+0x2728>
  8032a4:	0005883a 	mov	r2,zero
  8032a8:	d0a75805 	stb	r2,-25248(gp)
      g148_fix1 =(g148_fix0&&(g76_e5||g76)&&(g102_e6||g102)&&(g110_e7||g110));
  8032ac:	d0a75803 	ldbu	r2,-25248(gp)
  8032b0:	10803fcc 	andi	r2,r2,255
  8032b4:	1080201c 	xori	r2,r2,128
  8032b8:	10bfe004 	addi	r2,r2,-128
  8032bc:	10002026 	beq	r2,zero,803340 <tick+0x27c0>
  8032c0:	d0a78383 	ldbu	r2,-25074(gp)
  8032c4:	10803fcc 	andi	r2,r2,255
  8032c8:	1080201c 	xori	r2,r2,128
  8032cc:	10bfe004 	addi	r2,r2,-128
  8032d0:	1000051e 	bne	r2,zero,8032e8 <tick+0x2768>
  8032d4:	d0a767c3 	ldbu	r2,-25185(gp)
  8032d8:	10803fcc 	andi	r2,r2,255
  8032dc:	1080201c 	xori	r2,r2,128
  8032e0:	10bfe004 	addi	r2,r2,-128
  8032e4:	10001626 	beq	r2,zero,803340 <tick+0x27c0>
  8032e8:	d0a79b43 	ldbu	r2,-24979(gp)
  8032ec:	10803fcc 	andi	r2,r2,255
  8032f0:	1080201c 	xori	r2,r2,128
  8032f4:	10bfe004 	addi	r2,r2,-128
  8032f8:	1000051e 	bne	r2,zero,803310 <tick+0x2790>
  8032fc:	d0a75fc3 	ldbu	r2,-25217(gp)
  803300:	10803fcc 	andi	r2,r2,255
  803304:	1080201c 	xori	r2,r2,128
  803308:	10bfe004 	addi	r2,r2,-128
  80330c:	10000c26 	beq	r2,zero,803340 <tick+0x27c0>
  803310:	d0a7a2c3 	ldbu	r2,-24949(gp)
  803314:	10803fcc 	andi	r2,r2,255
  803318:	1080201c 	xori	r2,r2,128
  80331c:	10bfe004 	addi	r2,r2,-128
  803320:	1000051e 	bne	r2,zero,803338 <tick+0x27b8>
  803324:	d0a77503 	ldbu	r2,-25132(gp)
  803328:	10803fcc 	andi	r2,r2,255
  80332c:	1080201c 	xori	r2,r2,128
  803330:	10bfe004 	addi	r2,r2,-128
  803334:	10000226 	beq	r2,zero,803340 <tick+0x27c0>
  803338:	00800044 	movi	r2,1
  80333c:	00000106 	br	803344 <tick+0x27c4>
  803340:	0005883a 	mov	r2,zero
  803344:	d0a786c5 	stb	r2,-25061(gp)
      g148_fix2 =(g20||g33||g50||g60);
  803348:	d0a78403 	ldbu	r2,-25072(gp)
  80334c:	10803fcc 	andi	r2,r2,255
  803350:	1080201c 	xori	r2,r2,128
  803354:	10bfe004 	addi	r2,r2,-128
  803358:	10000f1e 	bne	r2,zero,803398 <tick+0x2818>
  80335c:	d0a77f83 	ldbu	r2,-25090(gp)
  803360:	10803fcc 	andi	r2,r2,255
  803364:	1080201c 	xori	r2,r2,128
  803368:	10bfe004 	addi	r2,r2,-128
  80336c:	10000a1e 	bne	r2,zero,803398 <tick+0x2818>
  803370:	d0a78943 	ldbu	r2,-25051(gp)
  803374:	10803fcc 	andi	r2,r2,255
  803378:	1080201c 	xori	r2,r2,128
  80337c:	10bfe004 	addi	r2,r2,-128
  803380:	1000051e 	bne	r2,zero,803398 <tick+0x2818>
  803384:	d0a78483 	ldbu	r2,-25070(gp)
  803388:	10803fcc 	andi	r2,r2,255
  80338c:	1080201c 	xori	r2,r2,128
  803390:	10bfe004 	addi	r2,r2,-128
  803394:	10000226 	beq	r2,zero,8033a0 <tick+0x2820>
  803398:	00800044 	movi	r2,1
  80339c:	00000106 	br	8033a4 <tick+0x2824>
  8033a0:	0005883a 	mov	r2,zero
  8033a4:	d0a76b85 	stb	r2,-25170(gp)
      g148_fix3 =(g148_fix2||g76||g102||g110);
  8033a8:	d0a76b83 	ldbu	r2,-25170(gp)
  8033ac:	10803fcc 	andi	r2,r2,255
  8033b0:	1080201c 	xori	r2,r2,128
  8033b4:	10bfe004 	addi	r2,r2,-128
  8033b8:	10000f1e 	bne	r2,zero,8033f8 <tick+0x2878>
  8033bc:	d0a767c3 	ldbu	r2,-25185(gp)
  8033c0:	10803fcc 	andi	r2,r2,255
  8033c4:	1080201c 	xori	r2,r2,128
  8033c8:	10bfe004 	addi	r2,r2,-128
  8033cc:	10000a1e 	bne	r2,zero,8033f8 <tick+0x2878>
  8033d0:	d0a75fc3 	ldbu	r2,-25217(gp)
  8033d4:	10803fcc 	andi	r2,r2,255
  8033d8:	1080201c 	xori	r2,r2,128
  8033dc:	10bfe004 	addi	r2,r2,-128
  8033e0:	1000051e 	bne	r2,zero,8033f8 <tick+0x2878>
  8033e4:	d0a77503 	ldbu	r2,-25132(gp)
  8033e8:	10803fcc 	andi	r2,r2,255
  8033ec:	1080201c 	xori	r2,r2,128
  8033f0:	10bfe004 	addi	r2,r2,-128
  8033f4:	10000226 	beq	r2,zero,803400 <tick+0x2880>
  8033f8:	00800044 	movi	r2,1
  8033fc:	00000106 	br	803404 <tick+0x2884>
  803400:	0005883a 	mov	r2,zero
  803404:	d0a79d05 	stb	r2,-24972(gp)
      g148_e1_fix_fix =(g39||g56||g66||g82||g108||g123||g131||g138||g9||g28||g41||g68||g85||g90);
  803408:	d0a79dc3 	ldbu	r2,-24969(gp)
  80340c:	10803fcc 	andi	r2,r2,255
  803410:	1080201c 	xori	r2,r2,128
  803414:	10bfe004 	addi	r2,r2,-128
  803418:	1000411e 	bne	r2,zero,803520 <tick+0x29a0>
  80341c:	d0a77e43 	ldbu	r2,-25095(gp)
  803420:	10803fcc 	andi	r2,r2,255
  803424:	1080201c 	xori	r2,r2,128
  803428:	10bfe004 	addi	r2,r2,-128
  80342c:	10003c1e 	bne	r2,zero,803520 <tick+0x29a0>
  803430:	d0a77a03 	ldbu	r2,-25112(gp)
  803434:	10803fcc 	andi	r2,r2,255
  803438:	1080201c 	xori	r2,r2,128
  80343c:	10bfe004 	addi	r2,r2,-128
  803440:	1000371e 	bne	r2,zero,803520 <tick+0x29a0>
  803444:	d0a76543 	ldbu	r2,-25195(gp)
  803448:	10803fcc 	andi	r2,r2,255
  80344c:	1080201c 	xori	r2,r2,128
  803450:	10bfe004 	addi	r2,r2,-128
  803454:	1000321e 	bne	r2,zero,803520 <tick+0x29a0>
  803458:	d0a75683 	ldbu	r2,-25254(gp)
  80345c:	10803fcc 	andi	r2,r2,255
  803460:	1080201c 	xori	r2,r2,128
  803464:	10bfe004 	addi	r2,r2,-128
  803468:	10002d1e 	bne	r2,zero,803520 <tick+0x29a0>
  80346c:	d0a76283 	ldbu	r2,-25206(gp)
  803470:	10803fcc 	andi	r2,r2,255
  803474:	1080201c 	xori	r2,r2,128
  803478:	10bfe004 	addi	r2,r2,-128
  80347c:	1000281e 	bne	r2,zero,803520 <tick+0x29a0>
  803480:	d0a77f03 	ldbu	r2,-25092(gp)
  803484:	10803fcc 	andi	r2,r2,255
  803488:	1080201c 	xori	r2,r2,128
  80348c:	10bfe004 	addi	r2,r2,-128
  803490:	1000231e 	bne	r2,zero,803520 <tick+0x29a0>
  803494:	d0a78a83 	ldbu	r2,-25046(gp)
  803498:	10803fcc 	andi	r2,r2,255
  80349c:	1080201c 	xori	r2,r2,128
  8034a0:	10bfe004 	addi	r2,r2,-128
  8034a4:	10001e1e 	bne	r2,zero,803520 <tick+0x29a0>
  8034a8:	d0a75cc3 	ldbu	r2,-25229(gp)
  8034ac:	10803fcc 	andi	r2,r2,255
  8034b0:	1080201c 	xori	r2,r2,128
  8034b4:	10bfe004 	addi	r2,r2,-128
  8034b8:	1000191e 	bne	r2,zero,803520 <tick+0x29a0>
  8034bc:	d0a79843 	ldbu	r2,-24991(gp)
  8034c0:	10803fcc 	andi	r2,r2,255
  8034c4:	1080201c 	xori	r2,r2,128
  8034c8:	10bfe004 	addi	r2,r2,-128
  8034cc:	1000141e 	bne	r2,zero,803520 <tick+0x29a0>
  8034d0:	d0a76983 	ldbu	r2,-25178(gp)
  8034d4:	10803fcc 	andi	r2,r2,255
  8034d8:	1080201c 	xori	r2,r2,128
  8034dc:	10bfe004 	addi	r2,r2,-128
  8034e0:	10000f1e 	bne	r2,zero,803520 <tick+0x29a0>
  8034e4:	d0a79643 	ldbu	r2,-24999(gp)
  8034e8:	10803fcc 	andi	r2,r2,255
  8034ec:	1080201c 	xori	r2,r2,128
  8034f0:	10bfe004 	addi	r2,r2,-128
  8034f4:	10000a1e 	bne	r2,zero,803520 <tick+0x29a0>
  8034f8:	d0a75c03 	ldbu	r2,-25232(gp)
  8034fc:	10803fcc 	andi	r2,r2,255
  803500:	1080201c 	xori	r2,r2,128
  803504:	10bfe004 	addi	r2,r2,-128
  803508:	1000051e 	bne	r2,zero,803520 <tick+0x29a0>
  80350c:	d0a782c3 	ldbu	r2,-25077(gp)
  803510:	10803fcc 	andi	r2,r2,255
  803514:	1080201c 	xori	r2,r2,128
  803518:	10bfe004 	addi	r2,r2,-128
  80351c:	10000226 	beq	r2,zero,803528 <tick+0x29a8>
  803520:	00800044 	movi	r2,1
  803524:	00000106 	br	80352c <tick+0x29ac>
  803528:	0005883a 	mov	r2,zero
  80352c:	d0a77b45 	stb	r2,-25107(gp)
      g148_e1_fix =(g120||g128||g135||g143||g6||g115||g145||g26||g13||g148_e1_fix_fix);
  803530:	d0a79e43 	ldbu	r2,-24967(gp)
  803534:	10803fcc 	andi	r2,r2,255
  803538:	1080201c 	xori	r2,r2,128
  80353c:	10bfe004 	addi	r2,r2,-128
  803540:	10002d1e 	bne	r2,zero,8035f8 <tick+0x2a78>
  803544:	d0a77783 	ldbu	r2,-25122(gp)
  803548:	10803fcc 	andi	r2,r2,255
  80354c:	1080201c 	xori	r2,r2,128
  803550:	10bfe004 	addi	r2,r2,-128
  803554:	1000281e 	bne	r2,zero,8035f8 <tick+0x2a78>
  803558:	d0a76443 	ldbu	r2,-25199(gp)
  80355c:	10803fcc 	andi	r2,r2,255
  803560:	1080201c 	xori	r2,r2,128
  803564:	10bfe004 	addi	r2,r2,-128
  803568:	1000231e 	bne	r2,zero,8035f8 <tick+0x2a78>
  80356c:	d0a77843 	ldbu	r2,-25119(gp)
  803570:	10803fcc 	andi	r2,r2,255
  803574:	1080201c 	xori	r2,r2,128
  803578:	10bfe004 	addi	r2,r2,-128
  80357c:	10001e1e 	bne	r2,zero,8035f8 <tick+0x2a78>
  803580:	d0a78fc3 	ldbu	r2,-25025(gp)
  803584:	10803fcc 	andi	r2,r2,255
  803588:	1080201c 	xori	r2,r2,128
  80358c:	10bfe004 	addi	r2,r2,-128
  803590:	1000191e 	bne	r2,zero,8035f8 <tick+0x2a78>
  803594:	d0a76083 	ldbu	r2,-25214(gp)
  803598:	10803fcc 	andi	r2,r2,255
  80359c:	1080201c 	xori	r2,r2,128
  8035a0:	10bfe004 	addi	r2,r2,-128
  8035a4:	1000141e 	bne	r2,zero,8035f8 <tick+0x2a78>
  8035a8:	d0a75f83 	ldbu	r2,-25218(gp)
  8035ac:	10803fcc 	andi	r2,r2,255
  8035b0:	1080201c 	xori	r2,r2,128
  8035b4:	10bfe004 	addi	r2,r2,-128
  8035b8:	10000f1e 	bne	r2,zero,8035f8 <tick+0x2a78>
  8035bc:	d0a7a283 	ldbu	r2,-24950(gp)
  8035c0:	10803fcc 	andi	r2,r2,255
  8035c4:	1080201c 	xori	r2,r2,128
  8035c8:	10bfe004 	addi	r2,r2,-128
  8035cc:	10000a1e 	bne	r2,zero,8035f8 <tick+0x2a78>
  8035d0:	d0a78c83 	ldbu	r2,-25038(gp)
  8035d4:	10803fcc 	andi	r2,r2,255
  8035d8:	1080201c 	xori	r2,r2,128
  8035dc:	10bfe004 	addi	r2,r2,-128
  8035e0:	1000051e 	bne	r2,zero,8035f8 <tick+0x2a78>
  8035e4:	d0a77b43 	ldbu	r2,-25107(gp)
  8035e8:	10803fcc 	andi	r2,r2,255
  8035ec:	1080201c 	xori	r2,r2,128
  8035f0:	10bfe004 	addi	r2,r2,-128
  8035f4:	10000226 	beq	r2,zero,803600 <tick+0x2a80>
  8035f8:	00800044 	movi	r2,1
  8035fc:	00000106 	br	803604 <tick+0x2a84>
  803600:	0005883a 	mov	r2,zero
  803604:	d0a766c5 	stb	r2,-25189(gp)
      g148_e1 =(!((g4||g23||g36||g53||g63||g79||g105||g113||g94||g148_e1_fix)));
  803608:	d0a75643 	ldbu	r2,-25255(gp)
  80360c:	10803fcc 	andi	r2,r2,255
  803610:	1080201c 	xori	r2,r2,128
  803614:	10bfe004 	addi	r2,r2,-128
  803618:	10002f1e 	bne	r2,zero,8036d8 <tick+0x2b58>
  80361c:	d0a77a43 	ldbu	r2,-25111(gp)
  803620:	10803fcc 	andi	r2,r2,255
  803624:	1080201c 	xori	r2,r2,128
  803628:	10bfe004 	addi	r2,r2,-128
  80362c:	10002a1e 	bne	r2,zero,8036d8 <tick+0x2b58>
  803630:	d0a78743 	ldbu	r2,-25059(gp)
  803634:	10803fcc 	andi	r2,r2,255
  803638:	1080201c 	xori	r2,r2,128
  80363c:	10bfe004 	addi	r2,r2,-128
  803640:	1000251e 	bne	r2,zero,8036d8 <tick+0x2b58>
  803644:	d0a78d03 	ldbu	r2,-25036(gp)
  803648:	10803fcc 	andi	r2,r2,255
  80364c:	1080201c 	xori	r2,r2,128
  803650:	10bfe004 	addi	r2,r2,-128
  803654:	1000201e 	bne	r2,zero,8036d8 <tick+0x2b58>
  803658:	d0a783c3 	ldbu	r2,-25073(gp)
  80365c:	10803fcc 	andi	r2,r2,255
  803660:	1080201c 	xori	r2,r2,128
  803664:	10bfe004 	addi	r2,r2,-128
  803668:	10001b1e 	bne	r2,zero,8036d8 <tick+0x2b58>
  80366c:	d0a773c3 	ldbu	r2,-25137(gp)
  803670:	10803fcc 	andi	r2,r2,255
  803674:	1080201c 	xori	r2,r2,128
  803678:	10bfe004 	addi	r2,r2,-128
  80367c:	1000161e 	bne	r2,zero,8036d8 <tick+0x2b58>
  803680:	d0a76ec3 	ldbu	r2,-25157(gp)
  803684:	10803fcc 	andi	r2,r2,255
  803688:	1080201c 	xori	r2,r2,128
  80368c:	10bfe004 	addi	r2,r2,-128
  803690:	1000111e 	bne	r2,zero,8036d8 <tick+0x2b58>
  803694:	d0a78b43 	ldbu	r2,-25043(gp)
  803698:	10803fcc 	andi	r2,r2,255
  80369c:	1080201c 	xori	r2,r2,128
  8036a0:	10bfe004 	addi	r2,r2,-128
  8036a4:	10000c1e 	bne	r2,zero,8036d8 <tick+0x2b58>
  8036a8:	d0a77483 	ldbu	r2,-25134(gp)
  8036ac:	10803fcc 	andi	r2,r2,255
  8036b0:	1080201c 	xori	r2,r2,128
  8036b4:	10bfe004 	addi	r2,r2,-128
  8036b8:	1000071e 	bne	r2,zero,8036d8 <tick+0x2b58>
  8036bc:	d0a766c3 	ldbu	r2,-25189(gp)
  8036c0:	10803fcc 	andi	r2,r2,255
  8036c4:	1080201c 	xori	r2,r2,128
  8036c8:	10bfe004 	addi	r2,r2,-128
  8036cc:	1000021e 	bne	r2,zero,8036d8 <tick+0x2b58>
  8036d0:	00800044 	movi	r2,1
  8036d4:	00000106 	br	8036dc <tick+0x2b5c>
  8036d8:	0005883a 	mov	r2,zero
  8036dc:	d0a79805 	stb	r2,-24992(gp)
      g152_e2 =(!(g151));
  8036e0:	d0a774c3 	ldbu	r2,-25133(gp)
  8036e4:	10803fcc 	andi	r2,r2,255
  8036e8:	1080201c 	xori	r2,r2,128
  8036ec:	10bfe004 	addi	r2,r2,-128
  8036f0:	1005003a 	cmpeq	r2,r2,zero
  8036f4:	d0a759c5 	stb	r2,-25241(gp)
   }
   PRE_g3 = g3;
  8036f8:	d0a75a83 	ldbu	r2,-25238(gp)
  8036fc:	d0a75f45 	stb	r2,-25219(gp)
   PRE_g5 = g5;
  803700:	d0a77443 	ldbu	r2,-25135(gp)
  803704:	d0a79c85 	stb	r2,-24974(gp)
   PRE_g8 = g8;
  803708:	d0a78d43 	ldbu	r2,-25035(gp)
  80370c:	d0a76ac5 	stb	r2,-25173(gp)
   PRE_g12 = g12;
  803710:	d0a765c3 	ldbu	r2,-25193(gp)
  803714:	d0a77345 	stb	r2,-25139(gp)
   PRE_g22 = g22;
  803718:	d0a797c3 	ldbu	r2,-24993(gp)
  80371c:	d0a780c5 	stb	r2,-25085(gp)
   PRE_g25 = g25;
  803720:	d0a79683 	ldbu	r2,-24998(gp)
  803724:	d0a77745 	stb	r2,-25123(gp)
   PRE_g27 = g27;
  803728:	d0a75943 	ldbu	r2,-25243(gp)
  80372c:	d0a75b85 	stb	r2,-25234(gp)
   PRE_g35 = g35;
  803730:	d0a78203 	ldbu	r2,-25080(gp)
  803734:	d0a76d45 	stb	r2,-25163(gp)
   PRE_g38 = g38;
  803738:	d0a76e43 	ldbu	r2,-25159(gp)
  80373c:	d0a75785 	stb	r2,-25250(gp)
   PRE_g40 = g40;
  803740:	d0a75543 	ldbu	r2,-25259(gp)
  803744:	d0a76a45 	stb	r2,-25175(gp)
   PRE_g52 = g52;
  803748:	d0a76643 	ldbu	r2,-25191(gp)
  80374c:	d0a77e85 	stb	r2,-25094(gp)
   PRE_g55 = g55;
  803750:	d0a75883 	ldbu	r2,-25246(gp)
  803754:	d0a77305 	stb	r2,-25140(gp)
   PRE_g62 = g62;
  803758:	d0a768c3 	ldbu	r2,-25181(gp)
  80375c:	d0a78705 	stb	r2,-25060(gp)
   PRE_g65 = g65;
  803760:	d0a79783 	ldbu	r2,-24994(gp)
  803764:	d0a76305 	stb	r2,-25204(gp)
   PRE_g67 = g67;
  803768:	d0a79f43 	ldbu	r2,-24963(gp)
  80376c:	d0a78085 	stb	r2,-25086(gp)
   PRE_g78 = g78;
  803770:	d0a77f43 	ldbu	r2,-25091(gp)
  803774:	d0a76d05 	stb	r2,-25164(gp)
   PRE_g81 = g81;
  803778:	d0a790c3 	ldbu	r2,-25021(gp)
  80377c:	d0a76b45 	stb	r2,-25171(gp)
   PRE_g84 = g84;
  803780:	d0a76943 	ldbu	r2,-25179(gp)
  803784:	d0a77bc5 	stb	r2,-25105(gp)
   PRE_g89 = g89;
  803788:	d0a78783 	ldbu	r2,-25058(gp)
  80378c:	d0a78dc5 	stb	r2,-25033(gp)
   PRE_g93 = g93;
  803790:	d0a785c3 	ldbu	r2,-25065(gp)
  803794:	d0a796c5 	stb	r2,-24997(gp)
   PRE_g104 = g104;
  803798:	d0a78c03 	ldbu	r2,-25040(gp)
  80379c:	d0a76bc5 	stb	r2,-25169(gp)
   PRE_g107 = g107;
  8037a0:	d0a78b03 	ldbu	r2,-25044(gp)
  8037a4:	d0a784c5 	stb	r2,-25069(gp)
   PRE_g112 = g112;
  8037a8:	d0a75a43 	ldbu	r2,-25239(gp)
  8037ac:	d0a755c5 	stb	r2,-25257(gp)
   PRE_g114 = g114;
  8037b0:	d0a77e03 	ldbu	r2,-25096(gp)
  8037b4:	d0a75c85 	stb	r2,-25230(gp)
   PRE_g119 = g119;
  8037b8:	d0a78603 	ldbu	r2,-25064(gp)
  8037bc:	d0a77fc5 	stb	r2,-25089(gp)
   PRE_g122 = g122;
  8037c0:	d0a78003 	ldbu	r2,-25088(gp)
  8037c4:	d0a757c5 	stb	r2,-25249(gp)
   PRE_g127 = g127;
  8037c8:	d0a75d03 	ldbu	r2,-25228(gp)
  8037cc:	d0a79bc5 	stb	r2,-24977(gp)
   PRE_g130 = g130;
  8037d0:	d0a79c03 	ldbu	r2,-24976(gp)
  8037d4:	d0a78c45 	stb	r2,-25039(gp)
   PRE_g134 = g134;
  8037d8:	d0a78183 	ldbu	r2,-25082(gp)
  8037dc:	d0a75845 	stb	r2,-25247(gp)
   PRE_g137 = g137;
  8037e0:	d0a79283 	ldbu	r2,-25014(gp)
  8037e4:	d0a788c5 	stb	r2,-25053(gp)
   PRE_g142 = g142;
  8037e8:	d0a79703 	ldbu	r2,-24996(gp)
  8037ec:	d0a75f05 	stb	r2,-25220(gp)
   PRE_g144 = g144;
  8037f0:	d0a77d03 	ldbu	r2,-25100(gp)
  8037f4:	d0a76f85 	stb	r2,-25154(gp)
   PRE_g150 = g150;
  8037f8:	d0a76203 	ldbu	r2,-25208(gp)
  8037fc:	d0a791c5 	stb	r2,-25017(gp)
   _PRE_GO = _GO;
  803800:	d0a78303 	ldbu	r2,-25076(gp)
  803804:	10803fcc 	andi	r2,r2,255
  803808:	1080201c 	xori	r2,r2,128
  80380c:	10bfe004 	addi	r2,r2,-128
  803810:	d0a75e15 	stw	r2,-25224(gp)
   return;
  803814:	0001883a 	nop
}
  803818:	e037883a 	mov	sp,fp
  80381c:	df000017 	ldw	fp,0(sp)
  803820:	dec00104 	addi	sp,sp,4
  803824:	f800283a 	ret

00803828 <_fopen_r>:
  803828:	defffa04 	addi	sp,sp,-24
  80382c:	3005883a 	mov	r2,r6
  803830:	dcc00415 	stw	r19,16(sp)
  803834:	d80d883a 	mov	r6,sp
  803838:	2827883a 	mov	r19,r5
  80383c:	100b883a 	mov	r5,r2
  803840:	dc800315 	stw	r18,12(sp)
  803844:	dfc00515 	stw	ra,20(sp)
  803848:	dc400215 	stw	r17,8(sp)
  80384c:	dc000115 	stw	r16,4(sp)
  803850:	2025883a 	mov	r18,r4
  803854:	08093600 	call	809360 <__sflags>
  803858:	10002726 	beq	r2,zero,8038f8 <_fopen_r+0xd0>
  80385c:	9009883a 	mov	r4,r18
  803860:	1023883a 	mov	r17,r2
  803864:	08091e00 	call	8091e0 <__sfp>
  803868:	1021883a 	mov	r16,r2
  80386c:	10002226 	beq	r2,zero,8038f8 <_fopen_r+0xd0>
  803870:	d9800017 	ldw	r6,0(sp)
  803874:	01c06d84 	movi	r7,438
  803878:	980b883a 	mov	r5,r19
  80387c:	9009883a 	mov	r4,r18
  803880:	0804a000 	call	804a00 <_open_r>
  803884:	10001916 	blt	r2,zero,8038ec <_fopen_r+0xc4>
  803888:	8080038d 	sth	r2,14(r16)
  80388c:	00802034 	movhi	r2,128
  803890:	10937904 	addi	r2,r2,19940
  803894:	80800815 	stw	r2,32(r16)
  803898:	00802034 	movhi	r2,128
  80389c:	10939004 	addi	r2,r2,20032
  8038a0:	80800915 	stw	r2,36(r16)
  8038a4:	00802034 	movhi	r2,128
  8038a8:	1093af04 	addi	r2,r2,20156
  8038ac:	80800a15 	stw	r2,40(r16)
  8038b0:	00802034 	movhi	r2,128
  8038b4:	1093c604 	addi	r2,r2,20248
  8038b8:	8440030d 	sth	r17,12(r16)
  8038bc:	84000715 	stw	r16,28(r16)
  8038c0:	80800b15 	stw	r2,44(r16)
  8038c4:	8c40400c 	andi	r17,r17,256
  8038c8:	88000d1e 	bne	r17,zero,803900 <_fopen_r+0xd8>
  8038cc:	8005883a 	mov	r2,r16
  8038d0:	dfc00517 	ldw	ra,20(sp)
  8038d4:	dcc00417 	ldw	r19,16(sp)
  8038d8:	dc800317 	ldw	r18,12(sp)
  8038dc:	dc400217 	ldw	r17,8(sp)
  8038e0:	dc000117 	ldw	r16,4(sp)
  8038e4:	dec00604 	addi	sp,sp,24
  8038e8:	f800283a 	ret
  8038ec:	08093200 	call	809320 <__sfp_lock_acquire>
  8038f0:	8000030d 	sth	zero,12(r16)
  8038f4:	08093240 	call	809324 <__sfp_lock_release>
  8038f8:	0005883a 	mov	r2,zero
  8038fc:	003ff406 	br	8038d0 <__alt_mem_onchip_mem+0xff7838d0>
  803900:	01c00084 	movi	r7,2
  803904:	000d883a 	mov	r6,zero
  803908:	800b883a 	mov	r5,r16
  80390c:	9009883a 	mov	r4,r18
  803910:	08039340 	call	803934 <_fseek_r>
  803914:	8005883a 	mov	r2,r16
  803918:	003fed06 	br	8038d0 <__alt_mem_onchip_mem+0xff7838d0>

0080391c <fopen>:
  80391c:	00802074 	movhi	r2,129
  803920:	109c3a04 	addi	r2,r2,28904
  803924:	280d883a 	mov	r6,r5
  803928:	200b883a 	mov	r5,r4
  80392c:	11000017 	ldw	r4,0(r2)
  803930:	08038281 	jmpi	803828 <_fopen_r>

00803934 <_fseek_r>:
  803934:	08039541 	jmpi	803954 <_fseeko_r>

00803938 <fseek>:
  803938:	00802074 	movhi	r2,129
  80393c:	109c3a04 	addi	r2,r2,28904
  803940:	300f883a 	mov	r7,r6
  803944:	280d883a 	mov	r6,r5
  803948:	200b883a 	mov	r5,r4
  80394c:	11000017 	ldw	r4,0(r2)
  803950:	08039541 	jmpi	803954 <_fseeko_r>

00803954 <_fseeko_r>:
  803954:	deffe804 	addi	sp,sp,-96
  803958:	dd401415 	stw	r21,80(sp)
  80395c:	dc801115 	stw	r18,68(sp)
  803960:	dc401015 	stw	r17,64(sp)
  803964:	dc000f15 	stw	r16,60(sp)
  803968:	dfc01715 	stw	ra,92(sp)
  80396c:	ddc01615 	stw	r23,88(sp)
  803970:	dd801515 	stw	r22,84(sp)
  803974:	dd001315 	stw	r20,76(sp)
  803978:	dcc01215 	stw	r19,72(sp)
  80397c:	2023883a 	mov	r17,r4
  803980:	2821883a 	mov	r16,r5
  803984:	302b883a 	mov	r21,r6
  803988:	3825883a 	mov	r18,r7
  80398c:	20000226 	beq	r4,zero,803998 <_fseeko_r+0x44>
  803990:	20800e17 	ldw	r2,56(r4)
  803994:	10005a26 	beq	r2,zero,803b00 <_fseeko_r+0x1ac>
  803998:	8080030b 	ldhu	r2,12(r16)
  80399c:	00c04204 	movi	r3,264
  8039a0:	1080420c 	andi	r2,r2,264
  8039a4:	10c05b26 	beq	r2,r3,803b14 <_fseeko_r+0x1c0>
  8039a8:	85000a17 	ldw	r20,40(r16)
  8039ac:	a000f626 	beq	r20,zero,803d88 <_fseeko_r+0x434>
  8039b0:	00800044 	movi	r2,1
  8039b4:	90803e26 	beq	r18,r2,803ab0 <_fseeko_r+0x15c>
  8039b8:	00800084 	movi	r2,2
  8039bc:	90801026 	beq	r18,r2,803a00 <_fseeko_r+0xac>
  8039c0:	90000f26 	beq	r18,zero,803a00 <_fseeko_r+0xac>
  8039c4:	00800584 	movi	r2,22
  8039c8:	88800015 	stw	r2,0(r17)
  8039cc:	04ffffc4 	movi	r19,-1
  8039d0:	9805883a 	mov	r2,r19
  8039d4:	dfc01717 	ldw	ra,92(sp)
  8039d8:	ddc01617 	ldw	r23,88(sp)
  8039dc:	dd801517 	ldw	r22,84(sp)
  8039e0:	dd401417 	ldw	r21,80(sp)
  8039e4:	dd001317 	ldw	r20,76(sp)
  8039e8:	dcc01217 	ldw	r19,72(sp)
  8039ec:	dc801117 	ldw	r18,68(sp)
  8039f0:	dc401017 	ldw	r17,64(sp)
  8039f4:	dc000f17 	ldw	r16,60(sp)
  8039f8:	dec01804 	addi	sp,sp,96
  8039fc:	f800283a 	ret
  803a00:	80800417 	ldw	r2,16(r16)
  803a04:	002f883a 	mov	r23,zero
  803a08:	0027883a 	mov	r19,zero
  803a0c:	1000cb26 	beq	r2,zero,803d3c <_fseeko_r+0x3e8>
  803a10:	8080030b 	ldhu	r2,12(r16)
  803a14:	10c2068c 	andi	r3,r2,2074
  803a18:	1800071e 	bne	r3,zero,803a38 <_fseeko_r+0xe4>
  803a1c:	10c1000c 	andi	r3,r2,1024
  803a20:	1800451e 	bne	r3,zero,803b38 <_fseeko_r+0x1e4>
  803a24:	00c02034 	movhi	r3,128
  803a28:	18d3af04 	addi	r3,r3,20156
  803a2c:	a0c0b726 	beq	r20,r3,803d0c <_fseeko_r+0x3b8>
  803a30:	10820014 	ori	r2,r2,2048
  803a34:	8080030d 	sth	r2,12(r16)
  803a38:	800b883a 	mov	r5,r16
  803a3c:	8809883a 	mov	r4,r17
  803a40:	0808f340 	call	808f34 <_fflush_r>
  803a44:	1027883a 	mov	r19,r2
  803a48:	103fe01e 	bne	r2,zero,8039cc <__alt_mem_onchip_mem+0xff7839cc>
  803a4c:	81400717 	ldw	r5,28(r16)
  803a50:	900f883a 	mov	r7,r18
  803a54:	a80d883a 	mov	r6,r21
  803a58:	8809883a 	mov	r4,r17
  803a5c:	a03ee83a 	callr	r20
  803a60:	00ffffc4 	movi	r3,-1
  803a64:	10ffd926 	beq	r2,r3,8039cc <__alt_mem_onchip_mem+0xff7839cc>
  803a68:	81400c17 	ldw	r5,48(r16)
  803a6c:	28000526 	beq	r5,zero,803a84 <_fseeko_r+0x130>
  803a70:	80801004 	addi	r2,r16,64
  803a74:	28800226 	beq	r5,r2,803a80 <_fseeko_r+0x12c>
  803a78:	8809883a 	mov	r4,r17
  803a7c:	08095300 	call	809530 <_free_r>
  803a80:	80000c15 	stw	zero,48(r16)
  803a84:	8080030b 	ldhu	r2,12(r16)
  803a88:	80c00417 	ldw	r3,16(r16)
  803a8c:	80000115 	stw	zero,4(r16)
  803a90:	10bdf7cc 	andi	r2,r2,63455
  803a94:	80c00015 	stw	r3,0(r16)
  803a98:	8080030d 	sth	r2,12(r16)
  803a9c:	01800204 	movi	r6,8
  803aa0:	000b883a 	mov	r5,zero
  803aa4:	81001704 	addi	r4,r16,92
  803aa8:	08048d80 	call	8048d8 <memset>
  803aac:	003fc806 	br	8039d0 <__alt_mem_onchip_mem+0xff7839d0>
  803ab0:	800b883a 	mov	r5,r16
  803ab4:	8809883a 	mov	r4,r17
  803ab8:	0808f340 	call	808f34 <_fflush_r>
  803abc:	8080030b 	ldhu	r2,12(r16)
  803ac0:	10c4000c 	andi	r3,r2,4096
  803ac4:	18008726 	beq	r3,zero,803ce4 <_fseeko_r+0x390>
  803ac8:	84c01417 	ldw	r19,80(r16)
  803acc:	10c0010c 	andi	r3,r2,4
  803ad0:	1800431e 	bne	r3,zero,803be0 <_fseeko_r+0x28c>
  803ad4:	1080020c 	andi	r2,r2,8
  803ad8:	10008026 	beq	r2,zero,803cdc <_fseeko_r+0x388>
  803adc:	80c00017 	ldw	r3,0(r16)
  803ae0:	80800417 	ldw	r2,16(r16)
  803ae4:	18000226 	beq	r3,zero,803af0 <_fseeko_r+0x19c>
  803ae8:	1887c83a 	sub	r3,r3,r2
  803aec:	98e7883a 	add	r19,r19,r3
  803af0:	aceb883a 	add	r21,r21,r19
  803af4:	05c00044 	movi	r23,1
  803af8:	0025883a 	mov	r18,zero
  803afc:	003fc306 	br	803a0c <__alt_mem_onchip_mem+0xff783a0c>
  803b00:	08093100 	call	809310 <__sinit>
  803b04:	8080030b 	ldhu	r2,12(r16)
  803b08:	00c04204 	movi	r3,264
  803b0c:	1080420c 	andi	r2,r2,264
  803b10:	10ffa51e 	bne	r2,r3,8039a8 <__alt_mem_onchip_mem+0xff7839a8>
  803b14:	800b883a 	mov	r5,r16
  803b18:	8809883a 	mov	r4,r17
  803b1c:	0808f340 	call	808f34 <_fflush_r>
  803b20:	003fa106 	br	8039a8 <__alt_mem_onchip_mem+0xff7839a8>
  803b24:	8080030b 	ldhu	r2,12(r16)
  803b28:	00c10004 	movi	r3,1024
  803b2c:	80c01315 	stw	r3,76(r16)
  803b30:	10c4b03a 	or	r2,r2,r3
  803b34:	8080030d 	sth	r2,12(r16)
  803b38:	9000311e 	bne	r18,zero,803c00 <_fseeko_r+0x2ac>
  803b3c:	a82d883a 	mov	r22,r21
  803b40:	b800371e 	bne	r23,zero,803c20 <_fseeko_r+0x2cc>
  803b44:	8080030b 	ldhu	r2,12(r16)
  803b48:	1084000c 	andi	r2,r2,4096
  803b4c:	10007f26 	beq	r2,zero,803d4c <_fseeko_r+0x3f8>
  803b50:	80801417 	ldw	r2,80(r16)
  803b54:	81800117 	ldw	r6,4(r16)
  803b58:	81400c17 	ldw	r5,48(r16)
  803b5c:	11a7c83a 	sub	r19,r2,r6
  803b60:	28008226 	beq	r5,zero,803d6c <_fseeko_r+0x418>
  803b64:	81c00f17 	ldw	r7,60(r16)
  803b68:	99e7c83a 	sub	r19,r19,r7
  803b6c:	81000e17 	ldw	r4,56(r16)
  803b70:	80800417 	ldw	r2,16(r16)
  803b74:	99a7883a 	add	r19,r19,r6
  803b78:	2087c83a 	sub	r3,r4,r2
  803b7c:	98e7c83a 	sub	r19,r19,r3
  803b80:	38c7883a 	add	r3,r7,r3
  803b84:	b4c02b16 	blt	r22,r19,803c34 <_fseeko_r+0x2e0>
  803b88:	98c9883a 	add	r4,r19,r3
  803b8c:	b100292e 	bgeu	r22,r4,803c34 <_fseeko_r+0x2e0>
  803b90:	b4e7c83a 	sub	r19,r22,r19
  803b94:	14c5883a 	add	r2,r2,r19
  803b98:	1ce7c83a 	sub	r19,r3,r19
  803b9c:	80800015 	stw	r2,0(r16)
  803ba0:	84c00115 	stw	r19,4(r16)
  803ba4:	28000526 	beq	r5,zero,803bbc <_fseeko_r+0x268>
  803ba8:	80801004 	addi	r2,r16,64
  803bac:	28800226 	beq	r5,r2,803bb8 <_fseeko_r+0x264>
  803bb0:	8809883a 	mov	r4,r17
  803bb4:	08095300 	call	809530 <_free_r>
  803bb8:	80000c15 	stw	zero,48(r16)
  803bbc:	8080030b 	ldhu	r2,12(r16)
  803bc0:	01800204 	movi	r6,8
  803bc4:	000b883a 	mov	r5,zero
  803bc8:	10bff7cc 	andi	r2,r2,65503
  803bcc:	8080030d 	sth	r2,12(r16)
  803bd0:	81001704 	addi	r4,r16,92
  803bd4:	08048d80 	call	8048d8 <memset>
  803bd8:	0027883a 	mov	r19,zero
  803bdc:	003f7c06 	br	8039d0 <__alt_mem_onchip_mem+0xff7839d0>
  803be0:	80c00117 	ldw	r3,4(r16)
  803be4:	80800c17 	ldw	r2,48(r16)
  803be8:	98e7c83a 	sub	r19,r19,r3
  803bec:	10003b26 	beq	r2,zero,803cdc <_fseeko_r+0x388>
  803bf0:	80c00f17 	ldw	r3,60(r16)
  803bf4:	80800417 	ldw	r2,16(r16)
  803bf8:	98e7c83a 	sub	r19,r19,r3
  803bfc:	003fbc06 	br	803af0 <__alt_mem_onchip_mem+0xff783af0>
  803c00:	8140038f 	ldh	r5,14(r16)
  803c04:	d80d883a 	mov	r6,sp
  803c08:	8809883a 	mov	r4,r17
  803c0c:	0803db40 	call	803db4 <_fstat_r>
  803c10:	103f891e 	bne	r2,zero,803a38 <__alt_mem_onchip_mem+0xff783a38>
  803c14:	dd800417 	ldw	r22,16(sp)
  803c18:	adad883a 	add	r22,r21,r22
  803c1c:	b83fc926 	beq	r23,zero,803b44 <__alt_mem_onchip_mem+0xff783b44>
  803c20:	81400c17 	ldw	r5,48(r16)
  803c24:	81800117 	ldw	r6,4(r16)
  803c28:	28005026 	beq	r5,zero,803d6c <_fseeko_r+0x418>
  803c2c:	81c00f17 	ldw	r7,60(r16)
  803c30:	003fce06 	br	803b6c <__alt_mem_onchip_mem+0xff783b6c>
  803c34:	84c01317 	ldw	r19,76(r16)
  803c38:	81400717 	ldw	r5,28(r16)
  803c3c:	000f883a 	mov	r7,zero
  803c40:	04e7c83a 	sub	r19,zero,r19
  803c44:	9da6703a 	and	r19,r19,r22
  803c48:	980d883a 	mov	r6,r19
  803c4c:	8809883a 	mov	r4,r17
  803c50:	a03ee83a 	callr	r20
  803c54:	00ffffc4 	movi	r3,-1
  803c58:	10ff7726 	beq	r2,r3,803a38 <__alt_mem_onchip_mem+0xff783a38>
  803c5c:	80800417 	ldw	r2,16(r16)
  803c60:	81400c17 	ldw	r5,48(r16)
  803c64:	80000115 	stw	zero,4(r16)
  803c68:	80800015 	stw	r2,0(r16)
  803c6c:	28000526 	beq	r5,zero,803c84 <_fseeko_r+0x330>
  803c70:	80801004 	addi	r2,r16,64
  803c74:	28800226 	beq	r5,r2,803c80 <_fseeko_r+0x32c>
  803c78:	8809883a 	mov	r4,r17
  803c7c:	08095300 	call	809530 <_free_r>
  803c80:	80000c15 	stw	zero,48(r16)
  803c84:	8080030b 	ldhu	r2,12(r16)
  803c88:	b4e7c83a 	sub	r19,r22,r19
  803c8c:	10bff7cc 	andi	r2,r2,65503
  803c90:	8080030d 	sth	r2,12(r16)
  803c94:	98000b26 	beq	r19,zero,803cc4 <_fseeko_r+0x370>
  803c98:	800b883a 	mov	r5,r16
  803c9c:	8809883a 	mov	r4,r17
  803ca0:	0804bbc0 	call	804bbc <__srefill_r>
  803ca4:	103f641e 	bne	r2,zero,803a38 <__alt_mem_onchip_mem+0xff783a38>
  803ca8:	80800117 	ldw	r2,4(r16)
  803cac:	14ff6236 	bltu	r2,r19,803a38 <__alt_mem_onchip_mem+0xff783a38>
  803cb0:	80c00017 	ldw	r3,0(r16)
  803cb4:	14c5c83a 	sub	r2,r2,r19
  803cb8:	80800115 	stw	r2,4(r16)
  803cbc:	1ce7883a 	add	r19,r3,r19
  803cc0:	84c00015 	stw	r19,0(r16)
  803cc4:	01800204 	movi	r6,8
  803cc8:	000b883a 	mov	r5,zero
  803ccc:	81001704 	addi	r4,r16,92
  803cd0:	08048d80 	call	8048d8 <memset>
  803cd4:	0027883a 	mov	r19,zero
  803cd8:	003f3d06 	br	8039d0 <__alt_mem_onchip_mem+0xff7839d0>
  803cdc:	80800417 	ldw	r2,16(r16)
  803ce0:	003f8306 	br	803af0 <__alt_mem_onchip_mem+0xff783af0>
  803ce4:	81400717 	ldw	r5,28(r16)
  803ce8:	900f883a 	mov	r7,r18
  803cec:	000d883a 	mov	r6,zero
  803cf0:	8809883a 	mov	r4,r17
  803cf4:	a03ee83a 	callr	r20
  803cf8:	1027883a 	mov	r19,r2
  803cfc:	00bfffc4 	movi	r2,-1
  803d00:	98bf3226 	beq	r19,r2,8039cc <__alt_mem_onchip_mem+0xff7839cc>
  803d04:	8080030b 	ldhu	r2,12(r16)
  803d08:	003f7006 	br	803acc <__alt_mem_onchip_mem+0xff783acc>
  803d0c:	8140038f 	ldh	r5,14(r16)
  803d10:	283f4716 	blt	r5,zero,803a30 <__alt_mem_onchip_mem+0xff783a30>
  803d14:	d80d883a 	mov	r6,sp
  803d18:	8809883a 	mov	r4,r17
  803d1c:	0803db40 	call	803db4 <_fstat_r>
  803d20:	1000041e 	bne	r2,zero,803d34 <_fseeko_r+0x3e0>
  803d24:	d8800117 	ldw	r2,4(sp)
  803d28:	00e00014 	movui	r3,32768
  803d2c:	10bc000c 	andi	r2,r2,61440
  803d30:	10ff7c26 	beq	r2,r3,803b24 <__alt_mem_onchip_mem+0xff783b24>
  803d34:	8080030b 	ldhu	r2,12(r16)
  803d38:	003f3d06 	br	803a30 <__alt_mem_onchip_mem+0xff783a30>
  803d3c:	800b883a 	mov	r5,r16
  803d40:	8809883a 	mov	r4,r17
  803d44:	0803f100 	call	803f10 <__smakebuf_r>
  803d48:	003f3106 	br	803a10 <__alt_mem_onchip_mem+0xff783a10>
  803d4c:	81400717 	ldw	r5,28(r16)
  803d50:	01c00044 	movi	r7,1
  803d54:	000d883a 	mov	r6,zero
  803d58:	8809883a 	mov	r4,r17
  803d5c:	a03ee83a 	callr	r20
  803d60:	00ffffc4 	movi	r3,-1
  803d64:	10ff7b1e 	bne	r2,r3,803b54 <__alt_mem_onchip_mem+0xff783b54>
  803d68:	003f3306 	br	803a38 <__alt_mem_onchip_mem+0xff783a38>
  803d6c:	80c00017 	ldw	r3,0(r16)
  803d70:	80800417 	ldw	r2,16(r16)
  803d74:	000b883a 	mov	r5,zero
  803d78:	1887c83a 	sub	r3,r3,r2
  803d7c:	98e7c83a 	sub	r19,r19,r3
  803d80:	30c7883a 	add	r3,r6,r3
  803d84:	003f7f06 	br	803b84 <__alt_mem_onchip_mem+0xff783b84>
  803d88:	00800744 	movi	r2,29
  803d8c:	88800015 	stw	r2,0(r17)
  803d90:	04ffffc4 	movi	r19,-1
  803d94:	003f0e06 	br	8039d0 <__alt_mem_onchip_mem+0xff7839d0>

00803d98 <fseeko>:
  803d98:	00802074 	movhi	r2,129
  803d9c:	109c3a04 	addi	r2,r2,28904
  803da0:	300f883a 	mov	r7,r6
  803da4:	280d883a 	mov	r6,r5
  803da8:	200b883a 	mov	r5,r4
  803dac:	11000017 	ldw	r4,0(r2)
  803db0:	08039541 	jmpi	803954 <_fseeko_r>

00803db4 <_fstat_r>:
  803db4:	defffd04 	addi	sp,sp,-12
  803db8:	2805883a 	mov	r2,r5
  803dbc:	dc000015 	stw	r16,0(sp)
  803dc0:	040020b4 	movhi	r16,130
  803dc4:	dc400115 	stw	r17,4(sp)
  803dc8:	8423dd04 	addi	r16,r16,-28812
  803dcc:	2023883a 	mov	r17,r4
  803dd0:	300b883a 	mov	r5,r6
  803dd4:	1009883a 	mov	r4,r2
  803dd8:	dfc00215 	stw	ra,8(sp)
  803ddc:	80000015 	stw	zero,0(r16)
  803de0:	0810c440 	call	810c44 <fstat>
  803de4:	00ffffc4 	movi	r3,-1
  803de8:	10c00526 	beq	r2,r3,803e00 <_fstat_r+0x4c>
  803dec:	dfc00217 	ldw	ra,8(sp)
  803df0:	dc400117 	ldw	r17,4(sp)
  803df4:	dc000017 	ldw	r16,0(sp)
  803df8:	dec00304 	addi	sp,sp,12
  803dfc:	f800283a 	ret
  803e00:	80c00017 	ldw	r3,0(r16)
  803e04:	183ff926 	beq	r3,zero,803dec <__alt_mem_onchip_mem+0xff783dec>
  803e08:	88c00015 	stw	r3,0(r17)
  803e0c:	003ff706 	br	803dec <__alt_mem_onchip_mem+0xff783dec>

00803e10 <_fwrite_r>:
  803e10:	defff504 	addi	sp,sp,-44
  803e14:	dc800815 	stw	r18,32(sp)
  803e18:	39a5383a 	mul	r18,r7,r6
  803e1c:	d8800304 	addi	r2,sp,12
  803e20:	d8800015 	stw	r2,0(sp)
  803e24:	00800044 	movi	r2,1
  803e28:	dcc00915 	stw	r19,36(sp)
  803e2c:	dc400715 	stw	r17,28(sp)
  803e30:	dc000615 	stw	r16,24(sp)
  803e34:	d9400315 	stw	r5,12(sp)
  803e38:	dfc00a15 	stw	ra,40(sp)
  803e3c:	dc800415 	stw	r18,16(sp)
  803e40:	dc800215 	stw	r18,8(sp)
  803e44:	d8800115 	stw	r2,4(sp)
  803e48:	3027883a 	mov	r19,r6
  803e4c:	3821883a 	mov	r16,r7
  803e50:	2023883a 	mov	r17,r4
  803e54:	d9400b17 	ldw	r5,44(sp)
  803e58:	20000226 	beq	r4,zero,803e64 <_fwrite_r+0x54>
  803e5c:	20800e17 	ldw	r2,56(r4)
  803e60:	10001a26 	beq	r2,zero,803ecc <_fwrite_r+0xbc>
  803e64:	2880030b 	ldhu	r2,12(r5)
  803e68:	10c8000c 	andi	r3,r2,8192
  803e6c:	1800061e 	bne	r3,zero,803e88 <_fwrite_r+0x78>
  803e70:	29001917 	ldw	r4,100(r5)
  803e74:	00f7ffc4 	movi	r3,-8193
  803e78:	10880014 	ori	r2,r2,8192
  803e7c:	20c6703a 	and	r3,r4,r3
  803e80:	2880030d 	sth	r2,12(r5)
  803e84:	28c01915 	stw	r3,100(r5)
  803e88:	d80d883a 	mov	r6,sp
  803e8c:	8809883a 	mov	r4,r17
  803e90:	08098400 	call	809840 <__sfvwrite_r>
  803e94:	10000b26 	beq	r2,zero,803ec4 <_fwrite_r+0xb4>
  803e98:	d9000217 	ldw	r4,8(sp)
  803e9c:	980b883a 	mov	r5,r19
  803ea0:	9109c83a 	sub	r4,r18,r4
  803ea4:	080e3ac0 	call	80e3ac <__udivsi3>
  803ea8:	dfc00a17 	ldw	ra,40(sp)
  803eac:	dcc00917 	ldw	r19,36(sp)
  803eb0:	dc800817 	ldw	r18,32(sp)
  803eb4:	dc400717 	ldw	r17,28(sp)
  803eb8:	dc000617 	ldw	r16,24(sp)
  803ebc:	dec00b04 	addi	sp,sp,44
  803ec0:	f800283a 	ret
  803ec4:	8005883a 	mov	r2,r16
  803ec8:	003ff706 	br	803ea8 <__alt_mem_onchip_mem+0xff783ea8>
  803ecc:	d9400515 	stw	r5,20(sp)
  803ed0:	08093100 	call	809310 <__sinit>
  803ed4:	d9400517 	ldw	r5,20(sp)
  803ed8:	003fe206 	br	803e64 <__alt_mem_onchip_mem+0xff783e64>

00803edc <fwrite>:
  803edc:	defffe04 	addi	sp,sp,-8
  803ee0:	00802074 	movhi	r2,129
  803ee4:	d9c00015 	stw	r7,0(sp)
  803ee8:	109c3a04 	addi	r2,r2,28904
  803eec:	300f883a 	mov	r7,r6
  803ef0:	280d883a 	mov	r6,r5
  803ef4:	200b883a 	mov	r5,r4
  803ef8:	11000017 	ldw	r4,0(r2)
  803efc:	dfc00115 	stw	ra,4(sp)
  803f00:	0803e100 	call	803e10 <_fwrite_r>
  803f04:	dfc00117 	ldw	ra,4(sp)
  803f08:	dec00204 	addi	sp,sp,8
  803f0c:	f800283a 	ret

00803f10 <__smakebuf_r>:
  803f10:	2880030b 	ldhu	r2,12(r5)
  803f14:	10c0008c 	andi	r3,r2,2
  803f18:	1800411e 	bne	r3,zero,804020 <__smakebuf_r+0x110>
  803f1c:	deffec04 	addi	sp,sp,-80
  803f20:	dc000f15 	stw	r16,60(sp)
  803f24:	2821883a 	mov	r16,r5
  803f28:	2940038f 	ldh	r5,14(r5)
  803f2c:	dc401015 	stw	r17,64(sp)
  803f30:	dfc01315 	stw	ra,76(sp)
  803f34:	dcc01215 	stw	r19,72(sp)
  803f38:	dc801115 	stw	r18,68(sp)
  803f3c:	2023883a 	mov	r17,r4
  803f40:	28001c16 	blt	r5,zero,803fb4 <__smakebuf_r+0xa4>
  803f44:	d80d883a 	mov	r6,sp
  803f48:	0803db40 	call	803db4 <_fstat_r>
  803f4c:	10001816 	blt	r2,zero,803fb0 <__smakebuf_r+0xa0>
  803f50:	d8800117 	ldw	r2,4(sp)
  803f54:	00e00014 	movui	r3,32768
  803f58:	10bc000c 	andi	r2,r2,61440
  803f5c:	14c80020 	cmpeqi	r19,r2,8192
  803f60:	10c03726 	beq	r2,r3,804040 <__smakebuf_r+0x130>
  803f64:	80c0030b 	ldhu	r3,12(r16)
  803f68:	18c20014 	ori	r3,r3,2048
  803f6c:	80c0030d 	sth	r3,12(r16)
  803f70:	00c80004 	movi	r3,8192
  803f74:	10c0521e 	bne	r2,r3,8040c0 <__smakebuf_r+0x1b0>
  803f78:	8140038f 	ldh	r5,14(r16)
  803f7c:	8809883a 	mov	r4,r17
  803f80:	0809e840 	call	809e84 <_isatty_r>
  803f84:	10004c26 	beq	r2,zero,8040b8 <__smakebuf_r+0x1a8>
  803f88:	8080030b 	ldhu	r2,12(r16)
  803f8c:	80c010c4 	addi	r3,r16,67
  803f90:	80c00015 	stw	r3,0(r16)
  803f94:	10800054 	ori	r2,r2,1
  803f98:	8080030d 	sth	r2,12(r16)
  803f9c:	00800044 	movi	r2,1
  803fa0:	80c00415 	stw	r3,16(r16)
  803fa4:	80800515 	stw	r2,20(r16)
  803fa8:	04810004 	movi	r18,1024
  803fac:	00000706 	br	803fcc <__smakebuf_r+0xbc>
  803fb0:	8080030b 	ldhu	r2,12(r16)
  803fb4:	10c0200c 	andi	r3,r2,128
  803fb8:	18001f1e 	bne	r3,zero,804038 <__smakebuf_r+0x128>
  803fbc:	04810004 	movi	r18,1024
  803fc0:	10820014 	ori	r2,r2,2048
  803fc4:	8080030d 	sth	r2,12(r16)
  803fc8:	0027883a 	mov	r19,zero
  803fcc:	900b883a 	mov	r5,r18
  803fd0:	8809883a 	mov	r4,r17
  803fd4:	08040cc0 	call	8040cc <_malloc_r>
  803fd8:	10002c26 	beq	r2,zero,80408c <__smakebuf_r+0x17c>
  803fdc:	80c0030b 	ldhu	r3,12(r16)
  803fe0:	01002074 	movhi	r4,129
  803fe4:	2123f204 	addi	r4,r4,-28728
  803fe8:	89000f15 	stw	r4,60(r17)
  803fec:	18c02014 	ori	r3,r3,128
  803ff0:	80c0030d 	sth	r3,12(r16)
  803ff4:	80800015 	stw	r2,0(r16)
  803ff8:	80800415 	stw	r2,16(r16)
  803ffc:	84800515 	stw	r18,20(r16)
  804000:	98001a1e 	bne	r19,zero,80406c <__smakebuf_r+0x15c>
  804004:	dfc01317 	ldw	ra,76(sp)
  804008:	dcc01217 	ldw	r19,72(sp)
  80400c:	dc801117 	ldw	r18,68(sp)
  804010:	dc401017 	ldw	r17,64(sp)
  804014:	dc000f17 	ldw	r16,60(sp)
  804018:	dec01404 	addi	sp,sp,80
  80401c:	f800283a 	ret
  804020:	288010c4 	addi	r2,r5,67
  804024:	28800015 	stw	r2,0(r5)
  804028:	28800415 	stw	r2,16(r5)
  80402c:	00800044 	movi	r2,1
  804030:	28800515 	stw	r2,20(r5)
  804034:	f800283a 	ret
  804038:	04801004 	movi	r18,64
  80403c:	003fe006 	br	803fc0 <__alt_mem_onchip_mem+0xff783fc0>
  804040:	81000a17 	ldw	r4,40(r16)
  804044:	00c02034 	movhi	r3,128
  804048:	18d3af04 	addi	r3,r3,20156
  80404c:	20ffc51e 	bne	r4,r3,803f64 <__alt_mem_onchip_mem+0xff783f64>
  804050:	8080030b 	ldhu	r2,12(r16)
  804054:	04810004 	movi	r18,1024
  804058:	84801315 	stw	r18,76(r16)
  80405c:	1484b03a 	or	r2,r2,r18
  804060:	8080030d 	sth	r2,12(r16)
  804064:	0027883a 	mov	r19,zero
  804068:	003fd806 	br	803fcc <__alt_mem_onchip_mem+0xff783fcc>
  80406c:	8140038f 	ldh	r5,14(r16)
  804070:	8809883a 	mov	r4,r17
  804074:	0809e840 	call	809e84 <_isatty_r>
  804078:	103fe226 	beq	r2,zero,804004 <__alt_mem_onchip_mem+0xff784004>
  80407c:	8080030b 	ldhu	r2,12(r16)
  804080:	10800054 	ori	r2,r2,1
  804084:	8080030d 	sth	r2,12(r16)
  804088:	003fde06 	br	804004 <__alt_mem_onchip_mem+0xff784004>
  80408c:	8080030b 	ldhu	r2,12(r16)
  804090:	10c0800c 	andi	r3,r2,512
  804094:	183fdb1e 	bne	r3,zero,804004 <__alt_mem_onchip_mem+0xff784004>
  804098:	10800094 	ori	r2,r2,2
  80409c:	80c010c4 	addi	r3,r16,67
  8040a0:	8080030d 	sth	r2,12(r16)
  8040a4:	00800044 	movi	r2,1
  8040a8:	80c00015 	stw	r3,0(r16)
  8040ac:	80c00415 	stw	r3,16(r16)
  8040b0:	80800515 	stw	r2,20(r16)
  8040b4:	003fd306 	br	804004 <__alt_mem_onchip_mem+0xff784004>
  8040b8:	04810004 	movi	r18,1024
  8040bc:	003fc306 	br	803fcc <__alt_mem_onchip_mem+0xff783fcc>
  8040c0:	0027883a 	mov	r19,zero
  8040c4:	04810004 	movi	r18,1024
  8040c8:	003fc006 	br	803fcc <__alt_mem_onchip_mem+0xff783fcc>

008040cc <_malloc_r>:
  8040cc:	defff504 	addi	sp,sp,-44
  8040d0:	dc800315 	stw	r18,12(sp)
  8040d4:	dfc00a15 	stw	ra,40(sp)
  8040d8:	df000915 	stw	fp,36(sp)
  8040dc:	ddc00815 	stw	r23,32(sp)
  8040e0:	dd800715 	stw	r22,28(sp)
  8040e4:	dd400615 	stw	r21,24(sp)
  8040e8:	dd000515 	stw	r20,20(sp)
  8040ec:	dcc00415 	stw	r19,16(sp)
  8040f0:	dc400215 	stw	r17,8(sp)
  8040f4:	dc000115 	stw	r16,4(sp)
  8040f8:	288002c4 	addi	r2,r5,11
  8040fc:	00c00584 	movi	r3,22
  804100:	2025883a 	mov	r18,r4
  804104:	18807f2e 	bgeu	r3,r2,804304 <_malloc_r+0x238>
  804108:	047ffe04 	movi	r17,-8
  80410c:	1462703a 	and	r17,r2,r17
  804110:	8800a316 	blt	r17,zero,8043a0 <_malloc_r+0x2d4>
  804114:	8940a236 	bltu	r17,r5,8043a0 <_malloc_r+0x2d4>
  804118:	08111cc0 	call	8111cc <__malloc_lock>
  80411c:	00807dc4 	movi	r2,503
  804120:	1441e92e 	bgeu	r2,r17,8048c8 <_malloc_r+0x7fc>
  804124:	8804d27a 	srli	r2,r17,9
  804128:	1000a126 	beq	r2,zero,8043b0 <_malloc_r+0x2e4>
  80412c:	00c00104 	movi	r3,4
  804130:	18811e36 	bltu	r3,r2,8045ac <_malloc_r+0x4e0>
  804134:	8804d1ba 	srli	r2,r17,6
  804138:	12000e44 	addi	r8,r2,57
  80413c:	11c00e04 	addi	r7,r2,56
  804140:	4209883a 	add	r4,r8,r8
  804144:	04c02074 	movhi	r19,129
  804148:	2109883a 	add	r4,r4,r4
  80414c:	9cd61e04 	addi	r19,r19,22648
  804150:	2109883a 	add	r4,r4,r4
  804154:	9909883a 	add	r4,r19,r4
  804158:	24000117 	ldw	r16,4(r4)
  80415c:	213ffe04 	addi	r4,r4,-8
  804160:	24009726 	beq	r4,r16,8043c0 <_malloc_r+0x2f4>
  804164:	80800117 	ldw	r2,4(r16)
  804168:	01bfff04 	movi	r6,-4
  80416c:	014003c4 	movi	r5,15
  804170:	1184703a 	and	r2,r2,r6
  804174:	1447c83a 	sub	r3,r2,r17
  804178:	28c00716 	blt	r5,r3,804198 <_malloc_r+0xcc>
  80417c:	1800920e 	bge	r3,zero,8043c8 <_malloc_r+0x2fc>
  804180:	84000317 	ldw	r16,12(r16)
  804184:	24008e26 	beq	r4,r16,8043c0 <_malloc_r+0x2f4>
  804188:	80800117 	ldw	r2,4(r16)
  80418c:	1184703a 	and	r2,r2,r6
  804190:	1447c83a 	sub	r3,r2,r17
  804194:	28fff90e 	bge	r5,r3,80417c <__alt_mem_onchip_mem+0xff78417c>
  804198:	3809883a 	mov	r4,r7
  80419c:	01802074 	movhi	r6,129
  8041a0:	9c000417 	ldw	r16,16(r19)
  8041a4:	31961e04 	addi	r6,r6,22648
  8041a8:	32000204 	addi	r8,r6,8
  8041ac:	82013426 	beq	r16,r8,804680 <_malloc_r+0x5b4>
  8041b0:	80c00117 	ldw	r3,4(r16)
  8041b4:	00bfff04 	movi	r2,-4
  8041b8:	188e703a 	and	r7,r3,r2
  8041bc:	3c45c83a 	sub	r2,r7,r17
  8041c0:	00c003c4 	movi	r3,15
  8041c4:	18811f16 	blt	r3,r2,804644 <_malloc_r+0x578>
  8041c8:	32000515 	stw	r8,20(r6)
  8041cc:	32000415 	stw	r8,16(r6)
  8041d0:	10007f0e 	bge	r2,zero,8043d0 <_malloc_r+0x304>
  8041d4:	00807fc4 	movi	r2,511
  8041d8:	11c0fd36 	bltu	r2,r7,8045d0 <_malloc_r+0x504>
  8041dc:	3806d0fa 	srli	r3,r7,3
  8041e0:	01c00044 	movi	r7,1
  8041e4:	30800117 	ldw	r2,4(r6)
  8041e8:	19400044 	addi	r5,r3,1
  8041ec:	294b883a 	add	r5,r5,r5
  8041f0:	1807d0ba 	srai	r3,r3,2
  8041f4:	294b883a 	add	r5,r5,r5
  8041f8:	294b883a 	add	r5,r5,r5
  8041fc:	298b883a 	add	r5,r5,r6
  804200:	38c6983a 	sll	r3,r7,r3
  804204:	29c00017 	ldw	r7,0(r5)
  804208:	2a7ffe04 	addi	r9,r5,-8
  80420c:	1886b03a 	or	r3,r3,r2
  804210:	82400315 	stw	r9,12(r16)
  804214:	81c00215 	stw	r7,8(r16)
  804218:	30c00115 	stw	r3,4(r6)
  80421c:	2c000015 	stw	r16,0(r5)
  804220:	3c000315 	stw	r16,12(r7)
  804224:	2005d0ba 	srai	r2,r4,2
  804228:	01400044 	movi	r5,1
  80422c:	288a983a 	sll	r5,r5,r2
  804230:	19406f36 	bltu	r3,r5,8043f0 <_malloc_r+0x324>
  804234:	28c4703a 	and	r2,r5,r3
  804238:	10000a1e 	bne	r2,zero,804264 <_malloc_r+0x198>
  80423c:	00bfff04 	movi	r2,-4
  804240:	294b883a 	add	r5,r5,r5
  804244:	2088703a 	and	r4,r4,r2
  804248:	28c4703a 	and	r2,r5,r3
  80424c:	21000104 	addi	r4,r4,4
  804250:	1000041e 	bne	r2,zero,804264 <_malloc_r+0x198>
  804254:	294b883a 	add	r5,r5,r5
  804258:	28c4703a 	and	r2,r5,r3
  80425c:	21000104 	addi	r4,r4,4
  804260:	103ffc26 	beq	r2,zero,804254 <__alt_mem_onchip_mem+0xff784254>
  804264:	02bfff04 	movi	r10,-4
  804268:	024003c4 	movi	r9,15
  80426c:	21800044 	addi	r6,r4,1
  804270:	318d883a 	add	r6,r6,r6
  804274:	318d883a 	add	r6,r6,r6
  804278:	318d883a 	add	r6,r6,r6
  80427c:	998d883a 	add	r6,r19,r6
  804280:	333ffe04 	addi	r12,r6,-8
  804284:	2017883a 	mov	r11,r4
  804288:	31800104 	addi	r6,r6,4
  80428c:	34000017 	ldw	r16,0(r6)
  804290:	31fffd04 	addi	r7,r6,-12
  804294:	81c0041e 	bne	r16,r7,8042a8 <_malloc_r+0x1dc>
  804298:	0000fb06 	br	804688 <_malloc_r+0x5bc>
  80429c:	1801030e 	bge	r3,zero,8046ac <_malloc_r+0x5e0>
  8042a0:	84000317 	ldw	r16,12(r16)
  8042a4:	81c0f826 	beq	r16,r7,804688 <_malloc_r+0x5bc>
  8042a8:	80800117 	ldw	r2,4(r16)
  8042ac:	1284703a 	and	r2,r2,r10
  8042b0:	1447c83a 	sub	r3,r2,r17
  8042b4:	48fff90e 	bge	r9,r3,80429c <__alt_mem_onchip_mem+0xff78429c>
  8042b8:	80800317 	ldw	r2,12(r16)
  8042bc:	81000217 	ldw	r4,8(r16)
  8042c0:	89400054 	ori	r5,r17,1
  8042c4:	81400115 	stw	r5,4(r16)
  8042c8:	20800315 	stw	r2,12(r4)
  8042cc:	11000215 	stw	r4,8(r2)
  8042d0:	8463883a 	add	r17,r16,r17
  8042d4:	9c400515 	stw	r17,20(r19)
  8042d8:	9c400415 	stw	r17,16(r19)
  8042dc:	18800054 	ori	r2,r3,1
  8042e0:	88800115 	stw	r2,4(r17)
  8042e4:	8a000315 	stw	r8,12(r17)
  8042e8:	8a000215 	stw	r8,8(r17)
  8042ec:	88e3883a 	add	r17,r17,r3
  8042f0:	88c00015 	stw	r3,0(r17)
  8042f4:	9009883a 	mov	r4,r18
  8042f8:	08111f00 	call	8111f0 <__malloc_unlock>
  8042fc:	80800204 	addi	r2,r16,8
  804300:	00001b06 	br	804370 <_malloc_r+0x2a4>
  804304:	04400404 	movi	r17,16
  804308:	89402536 	bltu	r17,r5,8043a0 <_malloc_r+0x2d4>
  80430c:	08111cc0 	call	8111cc <__malloc_lock>
  804310:	00800184 	movi	r2,6
  804314:	01000084 	movi	r4,2
  804318:	04c02074 	movhi	r19,129
  80431c:	1085883a 	add	r2,r2,r2
  804320:	9cd61e04 	addi	r19,r19,22648
  804324:	1085883a 	add	r2,r2,r2
  804328:	9885883a 	add	r2,r19,r2
  80432c:	14000117 	ldw	r16,4(r2)
  804330:	10fffe04 	addi	r3,r2,-8
  804334:	80c0d926 	beq	r16,r3,80469c <_malloc_r+0x5d0>
  804338:	80c00117 	ldw	r3,4(r16)
  80433c:	81000317 	ldw	r4,12(r16)
  804340:	00bfff04 	movi	r2,-4
  804344:	1884703a 	and	r2,r3,r2
  804348:	81400217 	ldw	r5,8(r16)
  80434c:	8085883a 	add	r2,r16,r2
  804350:	10c00117 	ldw	r3,4(r2)
  804354:	29000315 	stw	r4,12(r5)
  804358:	21400215 	stw	r5,8(r4)
  80435c:	18c00054 	ori	r3,r3,1
  804360:	10c00115 	stw	r3,4(r2)
  804364:	9009883a 	mov	r4,r18
  804368:	08111f00 	call	8111f0 <__malloc_unlock>
  80436c:	80800204 	addi	r2,r16,8
  804370:	dfc00a17 	ldw	ra,40(sp)
  804374:	df000917 	ldw	fp,36(sp)
  804378:	ddc00817 	ldw	r23,32(sp)
  80437c:	dd800717 	ldw	r22,28(sp)
  804380:	dd400617 	ldw	r21,24(sp)
  804384:	dd000517 	ldw	r20,20(sp)
  804388:	dcc00417 	ldw	r19,16(sp)
  80438c:	dc800317 	ldw	r18,12(sp)
  804390:	dc400217 	ldw	r17,8(sp)
  804394:	dc000117 	ldw	r16,4(sp)
  804398:	dec00b04 	addi	sp,sp,44
  80439c:	f800283a 	ret
  8043a0:	00800304 	movi	r2,12
  8043a4:	90800015 	stw	r2,0(r18)
  8043a8:	0005883a 	mov	r2,zero
  8043ac:	003ff006 	br	804370 <__alt_mem_onchip_mem+0xff784370>
  8043b0:	01002004 	movi	r4,128
  8043b4:	02001004 	movi	r8,64
  8043b8:	01c00fc4 	movi	r7,63
  8043bc:	003f6106 	br	804144 <__alt_mem_onchip_mem+0xff784144>
  8043c0:	4009883a 	mov	r4,r8
  8043c4:	003f7506 	br	80419c <__alt_mem_onchip_mem+0xff78419c>
  8043c8:	81000317 	ldw	r4,12(r16)
  8043cc:	003fde06 	br	804348 <__alt_mem_onchip_mem+0xff784348>
  8043d0:	81c5883a 	add	r2,r16,r7
  8043d4:	11400117 	ldw	r5,4(r2)
  8043d8:	9009883a 	mov	r4,r18
  8043dc:	29400054 	ori	r5,r5,1
  8043e0:	11400115 	stw	r5,4(r2)
  8043e4:	08111f00 	call	8111f0 <__malloc_unlock>
  8043e8:	80800204 	addi	r2,r16,8
  8043ec:	003fe006 	br	804370 <__alt_mem_onchip_mem+0xff784370>
  8043f0:	9c000217 	ldw	r16,8(r19)
  8043f4:	00bfff04 	movi	r2,-4
  8043f8:	85800117 	ldw	r22,4(r16)
  8043fc:	b0ac703a 	and	r22,r22,r2
  804400:	b4400336 	bltu	r22,r17,804410 <_malloc_r+0x344>
  804404:	b445c83a 	sub	r2,r22,r17
  804408:	00c003c4 	movi	r3,15
  80440c:	18805d16 	blt	r3,r2,804584 <_malloc_r+0x4b8>
  804410:	05c02074 	movhi	r23,129
  804414:	008020b4 	movhi	r2,130
  804418:	10a3e004 	addi	r2,r2,-28800
  80441c:	bddc3b04 	addi	r23,r23,28908
  804420:	15400017 	ldw	r21,0(r2)
  804424:	b8c00017 	ldw	r3,0(r23)
  804428:	00bfffc4 	movi	r2,-1
  80442c:	858d883a 	add	r6,r16,r22
  804430:	8d6b883a 	add	r21,r17,r21
  804434:	1880ea26 	beq	r3,r2,8047e0 <_malloc_r+0x714>
  804438:	ad4403c4 	addi	r21,r21,4111
  80443c:	00bc0004 	movi	r2,-4096
  804440:	a8aa703a 	and	r21,r21,r2
  804444:	a80b883a 	mov	r5,r21
  804448:	9009883a 	mov	r4,r18
  80444c:	d9800015 	stw	r6,0(sp)
  804450:	0804d900 	call	804d90 <_sbrk_r>
  804454:	1029883a 	mov	r20,r2
  804458:	00bfffc4 	movi	r2,-1
  80445c:	d9800017 	ldw	r6,0(sp)
  804460:	a080e826 	beq	r20,r2,804804 <_malloc_r+0x738>
  804464:	a180a636 	bltu	r20,r6,804700 <_malloc_r+0x634>
  804468:	070020b4 	movhi	fp,130
  80446c:	e723f104 	addi	fp,fp,-28732
  804470:	e0800017 	ldw	r2,0(fp)
  804474:	a887883a 	add	r3,r21,r2
  804478:	e0c00015 	stw	r3,0(fp)
  80447c:	3500e626 	beq	r6,r20,804818 <_malloc_r+0x74c>
  804480:	b9000017 	ldw	r4,0(r23)
  804484:	00bfffc4 	movi	r2,-1
  804488:	2080ee26 	beq	r4,r2,804844 <_malloc_r+0x778>
  80448c:	a185c83a 	sub	r2,r20,r6
  804490:	10c5883a 	add	r2,r2,r3
  804494:	e0800015 	stw	r2,0(fp)
  804498:	a0c001cc 	andi	r3,r20,7
  80449c:	1800bc26 	beq	r3,zero,804790 <_malloc_r+0x6c4>
  8044a0:	a0e9c83a 	sub	r20,r20,r3
  8044a4:	00840204 	movi	r2,4104
  8044a8:	a5000204 	addi	r20,r20,8
  8044ac:	10c7c83a 	sub	r3,r2,r3
  8044b0:	a545883a 	add	r2,r20,r21
  8044b4:	1083ffcc 	andi	r2,r2,4095
  8044b8:	18abc83a 	sub	r21,r3,r2
  8044bc:	a80b883a 	mov	r5,r21
  8044c0:	9009883a 	mov	r4,r18
  8044c4:	0804d900 	call	804d90 <_sbrk_r>
  8044c8:	00ffffc4 	movi	r3,-1
  8044cc:	10c0e126 	beq	r2,r3,804854 <_malloc_r+0x788>
  8044d0:	1505c83a 	sub	r2,r2,r20
  8044d4:	1545883a 	add	r2,r2,r21
  8044d8:	10800054 	ori	r2,r2,1
  8044dc:	e0c00017 	ldw	r3,0(fp)
  8044e0:	9d000215 	stw	r20,8(r19)
  8044e4:	a0800115 	stw	r2,4(r20)
  8044e8:	a8c7883a 	add	r3,r21,r3
  8044ec:	e0c00015 	stw	r3,0(fp)
  8044f0:	84c00e26 	beq	r16,r19,80452c <_malloc_r+0x460>
  8044f4:	018003c4 	movi	r6,15
  8044f8:	3580a72e 	bgeu	r6,r22,804798 <_malloc_r+0x6cc>
  8044fc:	81400117 	ldw	r5,4(r16)
  804500:	013ffe04 	movi	r4,-8
  804504:	b0bffd04 	addi	r2,r22,-12
  804508:	1104703a 	and	r2,r2,r4
  80450c:	2900004c 	andi	r4,r5,1
  804510:	2088b03a 	or	r4,r4,r2
  804514:	81000115 	stw	r4,4(r16)
  804518:	01400144 	movi	r5,5
  80451c:	8089883a 	add	r4,r16,r2
  804520:	21400115 	stw	r5,4(r4)
  804524:	21400215 	stw	r5,8(r4)
  804528:	3080cd36 	bltu	r6,r2,804860 <_malloc_r+0x794>
  80452c:	008020b4 	movhi	r2,130
  804530:	10a3df04 	addi	r2,r2,-28804
  804534:	11000017 	ldw	r4,0(r2)
  804538:	20c0012e 	bgeu	r4,r3,804540 <_malloc_r+0x474>
  80453c:	10c00015 	stw	r3,0(r2)
  804540:	008020b4 	movhi	r2,130
  804544:	10a3de04 	addi	r2,r2,-28808
  804548:	11000017 	ldw	r4,0(r2)
  80454c:	9c000217 	ldw	r16,8(r19)
  804550:	20c0012e 	bgeu	r4,r3,804558 <_malloc_r+0x48c>
  804554:	10c00015 	stw	r3,0(r2)
  804558:	80c00117 	ldw	r3,4(r16)
  80455c:	00bfff04 	movi	r2,-4
  804560:	1886703a 	and	r3,r3,r2
  804564:	1c45c83a 	sub	r2,r3,r17
  804568:	1c400236 	bltu	r3,r17,804574 <_malloc_r+0x4a8>
  80456c:	00c003c4 	movi	r3,15
  804570:	18800416 	blt	r3,r2,804584 <_malloc_r+0x4b8>
  804574:	9009883a 	mov	r4,r18
  804578:	08111f00 	call	8111f0 <__malloc_unlock>
  80457c:	0005883a 	mov	r2,zero
  804580:	003f7b06 	br	804370 <__alt_mem_onchip_mem+0xff784370>
  804584:	88c00054 	ori	r3,r17,1
  804588:	80c00115 	stw	r3,4(r16)
  80458c:	8463883a 	add	r17,r16,r17
  804590:	10800054 	ori	r2,r2,1
  804594:	9c400215 	stw	r17,8(r19)
  804598:	88800115 	stw	r2,4(r17)
  80459c:	9009883a 	mov	r4,r18
  8045a0:	08111f00 	call	8111f0 <__malloc_unlock>
  8045a4:	80800204 	addi	r2,r16,8
  8045a8:	003f7106 	br	804370 <__alt_mem_onchip_mem+0xff784370>
  8045ac:	00c00504 	movi	r3,20
  8045b0:	18804a2e 	bgeu	r3,r2,8046dc <_malloc_r+0x610>
  8045b4:	00c01504 	movi	r3,84
  8045b8:	18806e36 	bltu	r3,r2,804774 <_malloc_r+0x6a8>
  8045bc:	8804d33a 	srli	r2,r17,12
  8045c0:	12001bc4 	addi	r8,r2,111
  8045c4:	11c01b84 	addi	r7,r2,110
  8045c8:	4209883a 	add	r4,r8,r8
  8045cc:	003edd06 	br	804144 <__alt_mem_onchip_mem+0xff784144>
  8045d0:	3804d27a 	srli	r2,r7,9
  8045d4:	00c00104 	movi	r3,4
  8045d8:	1880442e 	bgeu	r3,r2,8046ec <_malloc_r+0x620>
  8045dc:	00c00504 	movi	r3,20
  8045e0:	18808136 	bltu	r3,r2,8047e8 <_malloc_r+0x71c>
  8045e4:	11401704 	addi	r5,r2,92
  8045e8:	10c016c4 	addi	r3,r2,91
  8045ec:	294b883a 	add	r5,r5,r5
  8045f0:	294b883a 	add	r5,r5,r5
  8045f4:	294b883a 	add	r5,r5,r5
  8045f8:	994b883a 	add	r5,r19,r5
  8045fc:	28800017 	ldw	r2,0(r5)
  804600:	01802074 	movhi	r6,129
  804604:	297ffe04 	addi	r5,r5,-8
  804608:	31961e04 	addi	r6,r6,22648
  80460c:	28806526 	beq	r5,r2,8047a4 <_malloc_r+0x6d8>
  804610:	01bfff04 	movi	r6,-4
  804614:	10c00117 	ldw	r3,4(r2)
  804618:	1986703a 	and	r3,r3,r6
  80461c:	38c0022e 	bgeu	r7,r3,804628 <_malloc_r+0x55c>
  804620:	10800217 	ldw	r2,8(r2)
  804624:	28bffb1e 	bne	r5,r2,804614 <__alt_mem_onchip_mem+0xff784614>
  804628:	11400317 	ldw	r5,12(r2)
  80462c:	98c00117 	ldw	r3,4(r19)
  804630:	81400315 	stw	r5,12(r16)
  804634:	80800215 	stw	r2,8(r16)
  804638:	2c000215 	stw	r16,8(r5)
  80463c:	14000315 	stw	r16,12(r2)
  804640:	003ef806 	br	804224 <__alt_mem_onchip_mem+0xff784224>
  804644:	88c00054 	ori	r3,r17,1
  804648:	80c00115 	stw	r3,4(r16)
  80464c:	8463883a 	add	r17,r16,r17
  804650:	34400515 	stw	r17,20(r6)
  804654:	34400415 	stw	r17,16(r6)
  804658:	10c00054 	ori	r3,r2,1
  80465c:	8a000315 	stw	r8,12(r17)
  804660:	8a000215 	stw	r8,8(r17)
  804664:	88c00115 	stw	r3,4(r17)
  804668:	88a3883a 	add	r17,r17,r2
  80466c:	88800015 	stw	r2,0(r17)
  804670:	9009883a 	mov	r4,r18
  804674:	08111f00 	call	8111f0 <__malloc_unlock>
  804678:	80800204 	addi	r2,r16,8
  80467c:	003f3c06 	br	804370 <__alt_mem_onchip_mem+0xff784370>
  804680:	30c00117 	ldw	r3,4(r6)
  804684:	003ee706 	br	804224 <__alt_mem_onchip_mem+0xff784224>
  804688:	5ac00044 	addi	r11,r11,1
  80468c:	588000cc 	andi	r2,r11,3
  804690:	31800204 	addi	r6,r6,8
  804694:	103efd1e 	bne	r2,zero,80428c <__alt_mem_onchip_mem+0xff78428c>
  804698:	00002406 	br	80472c <_malloc_r+0x660>
  80469c:	14000317 	ldw	r16,12(r2)
  8046a0:	143f251e 	bne	r2,r16,804338 <__alt_mem_onchip_mem+0xff784338>
  8046a4:	21000084 	addi	r4,r4,2
  8046a8:	003ebc06 	br	80419c <__alt_mem_onchip_mem+0xff78419c>
  8046ac:	8085883a 	add	r2,r16,r2
  8046b0:	10c00117 	ldw	r3,4(r2)
  8046b4:	81000317 	ldw	r4,12(r16)
  8046b8:	81400217 	ldw	r5,8(r16)
  8046bc:	18c00054 	ori	r3,r3,1
  8046c0:	10c00115 	stw	r3,4(r2)
  8046c4:	29000315 	stw	r4,12(r5)
  8046c8:	21400215 	stw	r5,8(r4)
  8046cc:	9009883a 	mov	r4,r18
  8046d0:	08111f00 	call	8111f0 <__malloc_unlock>
  8046d4:	80800204 	addi	r2,r16,8
  8046d8:	003f2506 	br	804370 <__alt_mem_onchip_mem+0xff784370>
  8046dc:	12001704 	addi	r8,r2,92
  8046e0:	11c016c4 	addi	r7,r2,91
  8046e4:	4209883a 	add	r4,r8,r8
  8046e8:	003e9606 	br	804144 <__alt_mem_onchip_mem+0xff784144>
  8046ec:	3804d1ba 	srli	r2,r7,6
  8046f0:	11400e44 	addi	r5,r2,57
  8046f4:	10c00e04 	addi	r3,r2,56
  8046f8:	294b883a 	add	r5,r5,r5
  8046fc:	003fbc06 	br	8045f0 <__alt_mem_onchip_mem+0xff7845f0>
  804700:	84ff5926 	beq	r16,r19,804468 <__alt_mem_onchip_mem+0xff784468>
  804704:	00802074 	movhi	r2,129
  804708:	10961e04 	addi	r2,r2,22648
  80470c:	14000217 	ldw	r16,8(r2)
  804710:	00bfff04 	movi	r2,-4
  804714:	80c00117 	ldw	r3,4(r16)
  804718:	1886703a 	and	r3,r3,r2
  80471c:	003f9106 	br	804564 <__alt_mem_onchip_mem+0xff784564>
  804720:	60800217 	ldw	r2,8(r12)
  804724:	213fffc4 	addi	r4,r4,-1
  804728:	1300651e 	bne	r2,r12,8048c0 <_malloc_r+0x7f4>
  80472c:	208000cc 	andi	r2,r4,3
  804730:	633ffe04 	addi	r12,r12,-8
  804734:	103ffa1e 	bne	r2,zero,804720 <__alt_mem_onchip_mem+0xff784720>
  804738:	98800117 	ldw	r2,4(r19)
  80473c:	0146303a 	nor	r3,zero,r5
  804740:	1884703a 	and	r2,r3,r2
  804744:	98800115 	stw	r2,4(r19)
  804748:	294b883a 	add	r5,r5,r5
  80474c:	117f2836 	bltu	r2,r5,8043f0 <__alt_mem_onchip_mem+0xff7843f0>
  804750:	283f2726 	beq	r5,zero,8043f0 <__alt_mem_onchip_mem+0xff7843f0>
  804754:	2886703a 	and	r3,r5,r2
  804758:	5809883a 	mov	r4,r11
  80475c:	183ec31e 	bne	r3,zero,80426c <__alt_mem_onchip_mem+0xff78426c>
  804760:	294b883a 	add	r5,r5,r5
  804764:	2886703a 	and	r3,r5,r2
  804768:	21000104 	addi	r4,r4,4
  80476c:	183ffc26 	beq	r3,zero,804760 <__alt_mem_onchip_mem+0xff784760>
  804770:	003ebe06 	br	80426c <__alt_mem_onchip_mem+0xff78426c>
  804774:	00c05504 	movi	r3,340
  804778:	18801236 	bltu	r3,r2,8047c4 <_malloc_r+0x6f8>
  80477c:	8804d3fa 	srli	r2,r17,15
  804780:	12001e04 	addi	r8,r2,120
  804784:	11c01dc4 	addi	r7,r2,119
  804788:	4209883a 	add	r4,r8,r8
  80478c:	003e6d06 	br	804144 <__alt_mem_onchip_mem+0xff784144>
  804790:	00c40004 	movi	r3,4096
  804794:	003f4606 	br	8044b0 <__alt_mem_onchip_mem+0xff7844b0>
  804798:	00800044 	movi	r2,1
  80479c:	a0800115 	stw	r2,4(r20)
  8047a0:	003f7406 	br	804574 <__alt_mem_onchip_mem+0xff784574>
  8047a4:	1805d0ba 	srai	r2,r3,2
  8047a8:	01c00044 	movi	r7,1
  8047ac:	30c00117 	ldw	r3,4(r6)
  8047b0:	388e983a 	sll	r7,r7,r2
  8047b4:	2805883a 	mov	r2,r5
  8047b8:	38c6b03a 	or	r3,r7,r3
  8047bc:	30c00115 	stw	r3,4(r6)
  8047c0:	003f9b06 	br	804630 <__alt_mem_onchip_mem+0xff784630>
  8047c4:	00c15504 	movi	r3,1364
  8047c8:	18801a36 	bltu	r3,r2,804834 <_malloc_r+0x768>
  8047cc:	8804d4ba 	srli	r2,r17,18
  8047d0:	12001f44 	addi	r8,r2,125
  8047d4:	11c01f04 	addi	r7,r2,124
  8047d8:	4209883a 	add	r4,r8,r8
  8047dc:	003e5906 	br	804144 <__alt_mem_onchip_mem+0xff784144>
  8047e0:	ad400404 	addi	r21,r21,16
  8047e4:	003f1706 	br	804444 <__alt_mem_onchip_mem+0xff784444>
  8047e8:	00c01504 	movi	r3,84
  8047ec:	18802336 	bltu	r3,r2,80487c <_malloc_r+0x7b0>
  8047f0:	3804d33a 	srli	r2,r7,12
  8047f4:	11401bc4 	addi	r5,r2,111
  8047f8:	10c01b84 	addi	r3,r2,110
  8047fc:	294b883a 	add	r5,r5,r5
  804800:	003f7b06 	br	8045f0 <__alt_mem_onchip_mem+0xff7845f0>
  804804:	9c000217 	ldw	r16,8(r19)
  804808:	00bfff04 	movi	r2,-4
  80480c:	80c00117 	ldw	r3,4(r16)
  804810:	1886703a 	and	r3,r3,r2
  804814:	003f5306 	br	804564 <__alt_mem_onchip_mem+0xff784564>
  804818:	3083ffcc 	andi	r2,r6,4095
  80481c:	103f181e 	bne	r2,zero,804480 <__alt_mem_onchip_mem+0xff784480>
  804820:	99000217 	ldw	r4,8(r19)
  804824:	b545883a 	add	r2,r22,r21
  804828:	10800054 	ori	r2,r2,1
  80482c:	20800115 	stw	r2,4(r4)
  804830:	003f3e06 	br	80452c <__alt_mem_onchip_mem+0xff78452c>
  804834:	01003f84 	movi	r4,254
  804838:	02001fc4 	movi	r8,127
  80483c:	01c01f84 	movi	r7,126
  804840:	003e4006 	br	804144 <__alt_mem_onchip_mem+0xff784144>
  804844:	00802074 	movhi	r2,129
  804848:	109c3b04 	addi	r2,r2,28908
  80484c:	15000015 	stw	r20,0(r2)
  804850:	003f1106 	br	804498 <__alt_mem_onchip_mem+0xff784498>
  804854:	00800044 	movi	r2,1
  804858:	002b883a 	mov	r21,zero
  80485c:	003f1f06 	br	8044dc <__alt_mem_onchip_mem+0xff7844dc>
  804860:	81400204 	addi	r5,r16,8
  804864:	9009883a 	mov	r4,r18
  804868:	08095300 	call	809530 <_free_r>
  80486c:	008020b4 	movhi	r2,130
  804870:	10a3f104 	addi	r2,r2,-28732
  804874:	10c00017 	ldw	r3,0(r2)
  804878:	003f2c06 	br	80452c <__alt_mem_onchip_mem+0xff78452c>
  80487c:	00c05504 	movi	r3,340
  804880:	18800536 	bltu	r3,r2,804898 <_malloc_r+0x7cc>
  804884:	3804d3fa 	srli	r2,r7,15
  804888:	11401e04 	addi	r5,r2,120
  80488c:	10c01dc4 	addi	r3,r2,119
  804890:	294b883a 	add	r5,r5,r5
  804894:	003f5606 	br	8045f0 <__alt_mem_onchip_mem+0xff7845f0>
  804898:	00c15504 	movi	r3,1364
  80489c:	18800536 	bltu	r3,r2,8048b4 <_malloc_r+0x7e8>
  8048a0:	3804d4ba 	srli	r2,r7,18
  8048a4:	11401f44 	addi	r5,r2,125
  8048a8:	10c01f04 	addi	r3,r2,124
  8048ac:	294b883a 	add	r5,r5,r5
  8048b0:	003f4f06 	br	8045f0 <__alt_mem_onchip_mem+0xff7845f0>
  8048b4:	01403f84 	movi	r5,254
  8048b8:	00c01f84 	movi	r3,126
  8048bc:	003f4c06 	br	8045f0 <__alt_mem_onchip_mem+0xff7845f0>
  8048c0:	98800117 	ldw	r2,4(r19)
  8048c4:	003fa006 	br	804748 <__alt_mem_onchip_mem+0xff784748>
  8048c8:	8808d0fa 	srli	r4,r17,3
  8048cc:	20800044 	addi	r2,r4,1
  8048d0:	1085883a 	add	r2,r2,r2
  8048d4:	003e9006 	br	804318 <__alt_mem_onchip_mem+0xff784318>

008048d8 <memset>:
  8048d8:	20c000cc 	andi	r3,r4,3
  8048dc:	2005883a 	mov	r2,r4
  8048e0:	18004426 	beq	r3,zero,8049f4 <memset+0x11c>
  8048e4:	31ffffc4 	addi	r7,r6,-1
  8048e8:	30004026 	beq	r6,zero,8049ec <memset+0x114>
  8048ec:	2813883a 	mov	r9,r5
  8048f0:	200d883a 	mov	r6,r4
  8048f4:	2007883a 	mov	r3,r4
  8048f8:	00000406 	br	80490c <memset+0x34>
  8048fc:	3a3fffc4 	addi	r8,r7,-1
  804900:	31800044 	addi	r6,r6,1
  804904:	38003926 	beq	r7,zero,8049ec <memset+0x114>
  804908:	400f883a 	mov	r7,r8
  80490c:	18c00044 	addi	r3,r3,1
  804910:	32400005 	stb	r9,0(r6)
  804914:	1a0000cc 	andi	r8,r3,3
  804918:	403ff81e 	bne	r8,zero,8048fc <__alt_mem_onchip_mem+0xff7848fc>
  80491c:	010000c4 	movi	r4,3
  804920:	21c02d2e 	bgeu	r4,r7,8049d8 <memset+0x100>
  804924:	29003fcc 	andi	r4,r5,255
  804928:	200c923a 	slli	r6,r4,8
  80492c:	3108b03a 	or	r4,r6,r4
  804930:	200c943a 	slli	r6,r4,16
  804934:	218cb03a 	or	r6,r4,r6
  804938:	010003c4 	movi	r4,15
  80493c:	21c0182e 	bgeu	r4,r7,8049a0 <memset+0xc8>
  804940:	3b3ffc04 	addi	r12,r7,-16
  804944:	6018d13a 	srli	r12,r12,4
  804948:	1a000104 	addi	r8,r3,4
  80494c:	1ac00204 	addi	r11,r3,8
  804950:	6008913a 	slli	r4,r12,4
  804954:	1a800304 	addi	r10,r3,12
  804958:	1813883a 	mov	r9,r3
  80495c:	21000504 	addi	r4,r4,20
  804960:	1909883a 	add	r4,r3,r4
  804964:	49800015 	stw	r6,0(r9)
  804968:	41800015 	stw	r6,0(r8)
  80496c:	59800015 	stw	r6,0(r11)
  804970:	51800015 	stw	r6,0(r10)
  804974:	42000404 	addi	r8,r8,16
  804978:	4a400404 	addi	r9,r9,16
  80497c:	5ac00404 	addi	r11,r11,16
  804980:	52800404 	addi	r10,r10,16
  804984:	413ff71e 	bne	r8,r4,804964 <__alt_mem_onchip_mem+0xff784964>
  804988:	63000044 	addi	r12,r12,1
  80498c:	6018913a 	slli	r12,r12,4
  804990:	39c003cc 	andi	r7,r7,15
  804994:	010000c4 	movi	r4,3
  804998:	1b07883a 	add	r3,r3,r12
  80499c:	21c00e2e 	bgeu	r4,r7,8049d8 <memset+0x100>
  8049a0:	1813883a 	mov	r9,r3
  8049a4:	3811883a 	mov	r8,r7
  8049a8:	010000c4 	movi	r4,3
  8049ac:	49800015 	stw	r6,0(r9)
  8049b0:	423fff04 	addi	r8,r8,-4
  8049b4:	4a400104 	addi	r9,r9,4
  8049b8:	223ffc36 	bltu	r4,r8,8049ac <__alt_mem_onchip_mem+0xff7849ac>
  8049bc:	393fff04 	addi	r4,r7,-4
  8049c0:	2008d0ba 	srli	r4,r4,2
  8049c4:	39c000cc 	andi	r7,r7,3
  8049c8:	21000044 	addi	r4,r4,1
  8049cc:	2109883a 	add	r4,r4,r4
  8049d0:	2109883a 	add	r4,r4,r4
  8049d4:	1907883a 	add	r3,r3,r4
  8049d8:	38000526 	beq	r7,zero,8049f0 <memset+0x118>
  8049dc:	19cf883a 	add	r7,r3,r7
  8049e0:	19400005 	stb	r5,0(r3)
  8049e4:	18c00044 	addi	r3,r3,1
  8049e8:	38fffd1e 	bne	r7,r3,8049e0 <__alt_mem_onchip_mem+0xff7849e0>
  8049ec:	f800283a 	ret
  8049f0:	f800283a 	ret
  8049f4:	2007883a 	mov	r3,r4
  8049f8:	300f883a 	mov	r7,r6
  8049fc:	003fc706 	br	80491c <__alt_mem_onchip_mem+0xff78491c>

00804a00 <_open_r>:
  804a00:	defffd04 	addi	sp,sp,-12
  804a04:	2805883a 	mov	r2,r5
  804a08:	dc000015 	stw	r16,0(sp)
  804a0c:	040020b4 	movhi	r16,130
  804a10:	dc400115 	stw	r17,4(sp)
  804a14:	300b883a 	mov	r5,r6
  804a18:	8423dd04 	addi	r16,r16,-28812
  804a1c:	2023883a 	mov	r17,r4
  804a20:	380d883a 	mov	r6,r7
  804a24:	1009883a 	mov	r4,r2
  804a28:	dfc00215 	stw	ra,8(sp)
  804a2c:	80000015 	stw	zero,0(r16)
  804a30:	08113140 	call	811314 <open>
  804a34:	00ffffc4 	movi	r3,-1
  804a38:	10c00526 	beq	r2,r3,804a50 <_open_r+0x50>
  804a3c:	dfc00217 	ldw	ra,8(sp)
  804a40:	dc400117 	ldw	r17,4(sp)
  804a44:	dc000017 	ldw	r16,0(sp)
  804a48:	dec00304 	addi	sp,sp,12
  804a4c:	f800283a 	ret
  804a50:	80c00017 	ldw	r3,0(r16)
  804a54:	183ff926 	beq	r3,zero,804a3c <__alt_mem_onchip_mem+0xff784a3c>
  804a58:	88c00015 	stw	r3,0(r17)
  804a5c:	003ff706 	br	804a3c <__alt_mem_onchip_mem+0xff784a3c>

00804a60 <_printf_r>:
  804a60:	defffd04 	addi	sp,sp,-12
  804a64:	2805883a 	mov	r2,r5
  804a68:	dfc00015 	stw	ra,0(sp)
  804a6c:	d9800115 	stw	r6,4(sp)
  804a70:	d9c00215 	stw	r7,8(sp)
  804a74:	21400217 	ldw	r5,8(r4)
  804a78:	d9c00104 	addi	r7,sp,4
  804a7c:	100d883a 	mov	r6,r2
  804a80:	0804fb80 	call	804fb8 <___vfprintf_internal_r>
  804a84:	dfc00017 	ldw	ra,0(sp)
  804a88:	dec00304 	addi	sp,sp,12
  804a8c:	f800283a 	ret

00804a90 <printf>:
  804a90:	defffc04 	addi	sp,sp,-16
  804a94:	dfc00015 	stw	ra,0(sp)
  804a98:	d9400115 	stw	r5,4(sp)
  804a9c:	d9800215 	stw	r6,8(sp)
  804aa0:	d9c00315 	stw	r7,12(sp)
  804aa4:	00802074 	movhi	r2,129
  804aa8:	109c3a04 	addi	r2,r2,28904
  804aac:	10800017 	ldw	r2,0(r2)
  804ab0:	200b883a 	mov	r5,r4
  804ab4:	d9800104 	addi	r6,sp,4
  804ab8:	11000217 	ldw	r4,8(r2)
  804abc:	08071b00 	call	8071b0 <__vfprintf_internal>
  804ac0:	dfc00017 	ldw	ra,0(sp)
  804ac4:	dec00404 	addi	sp,sp,16
  804ac8:	f800283a 	ret

00804acc <_puts_r>:
  804acc:	defff604 	addi	sp,sp,-40
  804ad0:	dc000715 	stw	r16,28(sp)
  804ad4:	2021883a 	mov	r16,r4
  804ad8:	2809883a 	mov	r4,r5
  804adc:	dc400815 	stw	r17,32(sp)
  804ae0:	dfc00915 	stw	ra,36(sp)
  804ae4:	2823883a 	mov	r17,r5
  804ae8:	0804f200 	call	804f20 <strlen>
  804aec:	10c00044 	addi	r3,r2,1
  804af0:	d8800115 	stw	r2,4(sp)
  804af4:	00802074 	movhi	r2,129
  804af8:	1093ac04 	addi	r2,r2,20144
  804afc:	d8800215 	stw	r2,8(sp)
  804b00:	00800044 	movi	r2,1
  804b04:	d8800315 	stw	r2,12(sp)
  804b08:	00800084 	movi	r2,2
  804b0c:	dc400015 	stw	r17,0(sp)
  804b10:	d8c00615 	stw	r3,24(sp)
  804b14:	dec00415 	stw	sp,16(sp)
  804b18:	d8800515 	stw	r2,20(sp)
  804b1c:	80000226 	beq	r16,zero,804b28 <_puts_r+0x5c>
  804b20:	80800e17 	ldw	r2,56(r16)
  804b24:	10001426 	beq	r2,zero,804b78 <_puts_r+0xac>
  804b28:	81400217 	ldw	r5,8(r16)
  804b2c:	2880030b 	ldhu	r2,12(r5)
  804b30:	10c8000c 	andi	r3,r2,8192
  804b34:	1800061e 	bne	r3,zero,804b50 <_puts_r+0x84>
  804b38:	29001917 	ldw	r4,100(r5)
  804b3c:	00f7ffc4 	movi	r3,-8193
  804b40:	10880014 	ori	r2,r2,8192
  804b44:	20c6703a 	and	r3,r4,r3
  804b48:	2880030d 	sth	r2,12(r5)
  804b4c:	28c01915 	stw	r3,100(r5)
  804b50:	d9800404 	addi	r6,sp,16
  804b54:	8009883a 	mov	r4,r16
  804b58:	08098400 	call	809840 <__sfvwrite_r>
  804b5c:	1000091e 	bne	r2,zero,804b84 <_puts_r+0xb8>
  804b60:	00800284 	movi	r2,10
  804b64:	dfc00917 	ldw	ra,36(sp)
  804b68:	dc400817 	ldw	r17,32(sp)
  804b6c:	dc000717 	ldw	r16,28(sp)
  804b70:	dec00a04 	addi	sp,sp,40
  804b74:	f800283a 	ret
  804b78:	8009883a 	mov	r4,r16
  804b7c:	08093100 	call	809310 <__sinit>
  804b80:	003fe906 	br	804b28 <__alt_mem_onchip_mem+0xff784b28>
  804b84:	00bfffc4 	movi	r2,-1
  804b88:	003ff606 	br	804b64 <__alt_mem_onchip_mem+0xff784b64>

00804b8c <puts>:
  804b8c:	00802074 	movhi	r2,129
  804b90:	109c3a04 	addi	r2,r2,28904
  804b94:	200b883a 	mov	r5,r4
  804b98:	11000017 	ldw	r4,0(r2)
  804b9c:	0804acc1 	jmpi	804acc <_puts_r>

00804ba0 <lflush>:
  804ba0:	2080030b 	ldhu	r2,12(r4)
  804ba4:	00c00244 	movi	r3,9
  804ba8:	1080024c 	andi	r2,r2,9
  804bac:	10c00226 	beq	r2,r3,804bb8 <lflush+0x18>
  804bb0:	0005883a 	mov	r2,zero
  804bb4:	f800283a 	ret
  804bb8:	0808f901 	jmpi	808f90 <fflush>

00804bbc <__srefill_r>:
  804bbc:	defffc04 	addi	sp,sp,-16
  804bc0:	dc400115 	stw	r17,4(sp)
  804bc4:	dc000015 	stw	r16,0(sp)
  804bc8:	dfc00315 	stw	ra,12(sp)
  804bcc:	dc800215 	stw	r18,8(sp)
  804bd0:	2023883a 	mov	r17,r4
  804bd4:	2821883a 	mov	r16,r5
  804bd8:	20000226 	beq	r4,zero,804be4 <__srefill_r+0x28>
  804bdc:	20800e17 	ldw	r2,56(r4)
  804be0:	10003c26 	beq	r2,zero,804cd4 <__srefill_r+0x118>
  804be4:	80c0030b 	ldhu	r3,12(r16)
  804be8:	1908000c 	andi	r4,r3,8192
  804bec:	1805883a 	mov	r2,r3
  804bf0:	2000071e 	bne	r4,zero,804c10 <__srefill_r+0x54>
  804bf4:	81001917 	ldw	r4,100(r16)
  804bf8:	18880014 	ori	r2,r3,8192
  804bfc:	00f7ffc4 	movi	r3,-8193
  804c00:	20c8703a 	and	r4,r4,r3
  804c04:	8080030d 	sth	r2,12(r16)
  804c08:	1007883a 	mov	r3,r2
  804c0c:	81001915 	stw	r4,100(r16)
  804c10:	80000115 	stw	zero,4(r16)
  804c14:	1100080c 	andi	r4,r2,32
  804c18:	2000571e 	bne	r4,zero,804d78 <__srefill_r+0x1bc>
  804c1c:	1100010c 	andi	r4,r2,4
  804c20:	20001f26 	beq	r4,zero,804ca0 <__srefill_r+0xe4>
  804c24:	81400c17 	ldw	r5,48(r16)
  804c28:	28000826 	beq	r5,zero,804c4c <__srefill_r+0x90>
  804c2c:	80801004 	addi	r2,r16,64
  804c30:	28800226 	beq	r5,r2,804c3c <__srefill_r+0x80>
  804c34:	8809883a 	mov	r4,r17
  804c38:	08095300 	call	809530 <_free_r>
  804c3c:	80800f17 	ldw	r2,60(r16)
  804c40:	80000c15 	stw	zero,48(r16)
  804c44:	80800115 	stw	r2,4(r16)
  804c48:	1000391e 	bne	r2,zero,804d30 <__srefill_r+0x174>
  804c4c:	80800417 	ldw	r2,16(r16)
  804c50:	10004b26 	beq	r2,zero,804d80 <__srefill_r+0x1c4>
  804c54:	8480030b 	ldhu	r18,12(r16)
  804c58:	908000cc 	andi	r2,r18,3
  804c5c:	10001f1e 	bne	r2,zero,804cdc <__srefill_r+0x120>
  804c60:	81800417 	ldw	r6,16(r16)
  804c64:	80800817 	ldw	r2,32(r16)
  804c68:	81c00517 	ldw	r7,20(r16)
  804c6c:	81400717 	ldw	r5,28(r16)
  804c70:	81800015 	stw	r6,0(r16)
  804c74:	8809883a 	mov	r4,r17
  804c78:	103ee83a 	callr	r2
  804c7c:	80800115 	stw	r2,4(r16)
  804c80:	00800e0e 	bge	zero,r2,804cbc <__srefill_r+0x100>
  804c84:	0005883a 	mov	r2,zero
  804c88:	dfc00317 	ldw	ra,12(sp)
  804c8c:	dc800217 	ldw	r18,8(sp)
  804c90:	dc400117 	ldw	r17,4(sp)
  804c94:	dc000017 	ldw	r16,0(sp)
  804c98:	dec00404 	addi	sp,sp,16
  804c9c:	f800283a 	ret
  804ca0:	1100040c 	andi	r4,r2,16
  804ca4:	20003026 	beq	r4,zero,804d68 <__srefill_r+0x1ac>
  804ca8:	1080020c 	andi	r2,r2,8
  804cac:	1000241e 	bne	r2,zero,804d40 <__srefill_r+0x184>
  804cb0:	18c00114 	ori	r3,r3,4
  804cb4:	80c0030d 	sth	r3,12(r16)
  804cb8:	003fe406 	br	804c4c <__alt_mem_onchip_mem+0xff784c4c>
  804cbc:	80c0030b 	ldhu	r3,12(r16)
  804cc0:	1000161e 	bne	r2,zero,804d1c <__srefill_r+0x160>
  804cc4:	18c00814 	ori	r3,r3,32
  804cc8:	00bfffc4 	movi	r2,-1
  804ccc:	80c0030d 	sth	r3,12(r16)
  804cd0:	003fed06 	br	804c88 <__alt_mem_onchip_mem+0xff784c88>
  804cd4:	08093100 	call	809310 <__sinit>
  804cd8:	003fc206 	br	804be4 <__alt_mem_onchip_mem+0xff784be4>
  804cdc:	00802074 	movhi	r2,129
  804ce0:	109c3904 	addi	r2,r2,28900
  804ce4:	11000017 	ldw	r4,0(r2)
  804ce8:	01402034 	movhi	r5,128
  804cec:	00800044 	movi	r2,1
  804cf0:	2952e804 	addi	r5,r5,19360
  804cf4:	8080030d 	sth	r2,12(r16)
  804cf8:	0809cfc0 	call	809cfc <_fwalk>
  804cfc:	00800244 	movi	r2,9
  804d00:	8480030d 	sth	r18,12(r16)
  804d04:	9480024c 	andi	r18,r18,9
  804d08:	90bfd51e 	bne	r18,r2,804c60 <__alt_mem_onchip_mem+0xff784c60>
  804d0c:	800b883a 	mov	r5,r16
  804d10:	8809883a 	mov	r4,r17
  804d14:	0808d180 	call	808d18 <__sflush_r>
  804d18:	003fd106 	br	804c60 <__alt_mem_onchip_mem+0xff784c60>
  804d1c:	18c01014 	ori	r3,r3,64
  804d20:	80000115 	stw	zero,4(r16)
  804d24:	00bfffc4 	movi	r2,-1
  804d28:	80c0030d 	sth	r3,12(r16)
  804d2c:	003fd606 	br	804c88 <__alt_mem_onchip_mem+0xff784c88>
  804d30:	80c00e17 	ldw	r3,56(r16)
  804d34:	0005883a 	mov	r2,zero
  804d38:	80c00015 	stw	r3,0(r16)
  804d3c:	003fd206 	br	804c88 <__alt_mem_onchip_mem+0xff784c88>
  804d40:	800b883a 	mov	r5,r16
  804d44:	8809883a 	mov	r4,r17
  804d48:	0808f340 	call	808f34 <_fflush_r>
  804d4c:	10000a1e 	bne	r2,zero,804d78 <__srefill_r+0x1bc>
  804d50:	8080030b 	ldhu	r2,12(r16)
  804d54:	00fffdc4 	movi	r3,-9
  804d58:	80000215 	stw	zero,8(r16)
  804d5c:	1886703a 	and	r3,r3,r2
  804d60:	80000615 	stw	zero,24(r16)
  804d64:	003fd206 	br	804cb0 <__alt_mem_onchip_mem+0xff784cb0>
  804d68:	00800244 	movi	r2,9
  804d6c:	88800015 	stw	r2,0(r17)
  804d70:	18c01014 	ori	r3,r3,64
  804d74:	80c0030d 	sth	r3,12(r16)
  804d78:	00bfffc4 	movi	r2,-1
  804d7c:	003fc206 	br	804c88 <__alt_mem_onchip_mem+0xff784c88>
  804d80:	800b883a 	mov	r5,r16
  804d84:	8809883a 	mov	r4,r17
  804d88:	0803f100 	call	803f10 <__smakebuf_r>
  804d8c:	003fb106 	br	804c54 <__alt_mem_onchip_mem+0xff784c54>

00804d90 <_sbrk_r>:
  804d90:	defffd04 	addi	sp,sp,-12
  804d94:	dc000015 	stw	r16,0(sp)
  804d98:	040020b4 	movhi	r16,130
  804d9c:	dc400115 	stw	r17,4(sp)
  804da0:	8423dd04 	addi	r16,r16,-28812
  804da4:	2023883a 	mov	r17,r4
  804da8:	2809883a 	mov	r4,r5
  804dac:	dfc00215 	stw	ra,8(sp)
  804db0:	80000015 	stw	zero,0(r16)
  804db4:	08116040 	call	811604 <sbrk>
  804db8:	00ffffc4 	movi	r3,-1
  804dbc:	10c00526 	beq	r2,r3,804dd4 <_sbrk_r+0x44>
  804dc0:	dfc00217 	ldw	ra,8(sp)
  804dc4:	dc400117 	ldw	r17,4(sp)
  804dc8:	dc000017 	ldw	r16,0(sp)
  804dcc:	dec00304 	addi	sp,sp,12
  804dd0:	f800283a 	ret
  804dd4:	80c00017 	ldw	r3,0(r16)
  804dd8:	183ff926 	beq	r3,zero,804dc0 <__alt_mem_onchip_mem+0xff784dc0>
  804ddc:	88c00015 	stw	r3,0(r17)
  804de0:	003ff706 	br	804dc0 <__alt_mem_onchip_mem+0xff784dc0>

00804de4 <__sread>:
  804de4:	defffe04 	addi	sp,sp,-8
  804de8:	dc000015 	stw	r16,0(sp)
  804dec:	2821883a 	mov	r16,r5
  804df0:	2940038f 	ldh	r5,14(r5)
  804df4:	dfc00115 	stw	ra,4(sp)
  804df8:	080b3980 	call	80b398 <_read_r>
  804dfc:	10000716 	blt	r2,zero,804e1c <__sread+0x38>
  804e00:	80c01417 	ldw	r3,80(r16)
  804e04:	1887883a 	add	r3,r3,r2
  804e08:	80c01415 	stw	r3,80(r16)
  804e0c:	dfc00117 	ldw	ra,4(sp)
  804e10:	dc000017 	ldw	r16,0(sp)
  804e14:	dec00204 	addi	sp,sp,8
  804e18:	f800283a 	ret
  804e1c:	80c0030b 	ldhu	r3,12(r16)
  804e20:	18fbffcc 	andi	r3,r3,61439
  804e24:	80c0030d 	sth	r3,12(r16)
  804e28:	dfc00117 	ldw	ra,4(sp)
  804e2c:	dc000017 	ldw	r16,0(sp)
  804e30:	dec00204 	addi	sp,sp,8
  804e34:	f800283a 	ret

00804e38 <__seofread>:
  804e38:	0005883a 	mov	r2,zero
  804e3c:	f800283a 	ret

00804e40 <__swrite>:
  804e40:	2880030b 	ldhu	r2,12(r5)
  804e44:	defffb04 	addi	sp,sp,-20
  804e48:	dcc00315 	stw	r19,12(sp)
  804e4c:	dc800215 	stw	r18,8(sp)
  804e50:	dc400115 	stw	r17,4(sp)
  804e54:	dc000015 	stw	r16,0(sp)
  804e58:	dfc00415 	stw	ra,16(sp)
  804e5c:	10c0400c 	andi	r3,r2,256
  804e60:	2821883a 	mov	r16,r5
  804e64:	2023883a 	mov	r17,r4
  804e68:	3025883a 	mov	r18,r6
  804e6c:	3827883a 	mov	r19,r7
  804e70:	18000526 	beq	r3,zero,804e88 <__swrite+0x48>
  804e74:	2940038f 	ldh	r5,14(r5)
  804e78:	01c00084 	movi	r7,2
  804e7c:	000d883a 	mov	r6,zero
  804e80:	0809fb40 	call	809fb4 <_lseek_r>
  804e84:	8080030b 	ldhu	r2,12(r16)
  804e88:	8140038f 	ldh	r5,14(r16)
  804e8c:	10bbffcc 	andi	r2,r2,61439
  804e90:	980f883a 	mov	r7,r19
  804e94:	900d883a 	mov	r6,r18
  804e98:	8809883a 	mov	r4,r17
  804e9c:	8080030d 	sth	r2,12(r16)
  804ea0:	dfc00417 	ldw	ra,16(sp)
  804ea4:	dcc00317 	ldw	r19,12(sp)
  804ea8:	dc800217 	ldw	r18,8(sp)
  804eac:	dc400117 	ldw	r17,4(sp)
  804eb0:	dc000017 	ldw	r16,0(sp)
  804eb4:	dec00504 	addi	sp,sp,20
  804eb8:	08072881 	jmpi	807288 <_write_r>

00804ebc <__sseek>:
  804ebc:	defffe04 	addi	sp,sp,-8
  804ec0:	dc000015 	stw	r16,0(sp)
  804ec4:	2821883a 	mov	r16,r5
  804ec8:	2940038f 	ldh	r5,14(r5)
  804ecc:	dfc00115 	stw	ra,4(sp)
  804ed0:	0809fb40 	call	809fb4 <_lseek_r>
  804ed4:	00ffffc4 	movi	r3,-1
  804ed8:	10c00826 	beq	r2,r3,804efc <__sseek+0x40>
  804edc:	80c0030b 	ldhu	r3,12(r16)
  804ee0:	80801415 	stw	r2,80(r16)
  804ee4:	18c40014 	ori	r3,r3,4096
  804ee8:	80c0030d 	sth	r3,12(r16)
  804eec:	dfc00117 	ldw	ra,4(sp)
  804ef0:	dc000017 	ldw	r16,0(sp)
  804ef4:	dec00204 	addi	sp,sp,8
  804ef8:	f800283a 	ret
  804efc:	80c0030b 	ldhu	r3,12(r16)
  804f00:	18fbffcc 	andi	r3,r3,61439
  804f04:	80c0030d 	sth	r3,12(r16)
  804f08:	dfc00117 	ldw	ra,4(sp)
  804f0c:	dc000017 	ldw	r16,0(sp)
  804f10:	dec00204 	addi	sp,sp,8
  804f14:	f800283a 	ret

00804f18 <__sclose>:
  804f18:	2940038f 	ldh	r5,14(r5)
  804f1c:	080743c1 	jmpi	80743c <_close_r>

00804f20 <strlen>:
  804f20:	208000cc 	andi	r2,r4,3
  804f24:	10002026 	beq	r2,zero,804fa8 <strlen+0x88>
  804f28:	20800007 	ldb	r2,0(r4)
  804f2c:	10002026 	beq	r2,zero,804fb0 <strlen+0x90>
  804f30:	2005883a 	mov	r2,r4
  804f34:	00000206 	br	804f40 <strlen+0x20>
  804f38:	10c00007 	ldb	r3,0(r2)
  804f3c:	18001826 	beq	r3,zero,804fa0 <strlen+0x80>
  804f40:	10800044 	addi	r2,r2,1
  804f44:	10c000cc 	andi	r3,r2,3
  804f48:	183ffb1e 	bne	r3,zero,804f38 <__alt_mem_onchip_mem+0xff784f38>
  804f4c:	10c00017 	ldw	r3,0(r2)
  804f50:	01ffbff4 	movhi	r7,65279
  804f54:	39ffbfc4 	addi	r7,r7,-257
  804f58:	00ca303a 	nor	r5,zero,r3
  804f5c:	01a02074 	movhi	r6,32897
  804f60:	19c7883a 	add	r3,r3,r7
  804f64:	31a02004 	addi	r6,r6,-32640
  804f68:	1946703a 	and	r3,r3,r5
  804f6c:	1986703a 	and	r3,r3,r6
  804f70:	1800091e 	bne	r3,zero,804f98 <strlen+0x78>
  804f74:	10800104 	addi	r2,r2,4
  804f78:	10c00017 	ldw	r3,0(r2)
  804f7c:	19cb883a 	add	r5,r3,r7
  804f80:	00c6303a 	nor	r3,zero,r3
  804f84:	28c6703a 	and	r3,r5,r3
  804f88:	1986703a 	and	r3,r3,r6
  804f8c:	183ff926 	beq	r3,zero,804f74 <__alt_mem_onchip_mem+0xff784f74>
  804f90:	00000106 	br	804f98 <strlen+0x78>
  804f94:	10800044 	addi	r2,r2,1
  804f98:	10c00007 	ldb	r3,0(r2)
  804f9c:	183ffd1e 	bne	r3,zero,804f94 <__alt_mem_onchip_mem+0xff784f94>
  804fa0:	1105c83a 	sub	r2,r2,r4
  804fa4:	f800283a 	ret
  804fa8:	2005883a 	mov	r2,r4
  804fac:	003fe706 	br	804f4c <__alt_mem_onchip_mem+0xff784f4c>
  804fb0:	0005883a 	mov	r2,zero
  804fb4:	f800283a 	ret

00804fb8 <___vfprintf_internal_r>:
  804fb8:	deffb804 	addi	sp,sp,-288
  804fbc:	dfc04715 	stw	ra,284(sp)
  804fc0:	ddc04515 	stw	r23,276(sp)
  804fc4:	dd404315 	stw	r21,268(sp)
  804fc8:	d9002c15 	stw	r4,176(sp)
  804fcc:	282f883a 	mov	r23,r5
  804fd0:	302b883a 	mov	r21,r6
  804fd4:	d9c02d15 	stw	r7,180(sp)
  804fd8:	df004615 	stw	fp,280(sp)
  804fdc:	dd804415 	stw	r22,272(sp)
  804fe0:	dd004215 	stw	r20,264(sp)
  804fe4:	dcc04115 	stw	r19,260(sp)
  804fe8:	dc804015 	stw	r18,256(sp)
  804fec:	dc403f15 	stw	r17,252(sp)
  804ff0:	dc003e15 	stw	r16,248(sp)
  804ff4:	0809f840 	call	809f84 <_localeconv_r>
  804ff8:	10800017 	ldw	r2,0(r2)
  804ffc:	1009883a 	mov	r4,r2
  805000:	d8803415 	stw	r2,208(sp)
  805004:	0804f200 	call	804f20 <strlen>
  805008:	d8803715 	stw	r2,220(sp)
  80500c:	d8802c17 	ldw	r2,176(sp)
  805010:	10000226 	beq	r2,zero,80501c <___vfprintf_internal_r+0x64>
  805014:	10800e17 	ldw	r2,56(r2)
  805018:	1000f926 	beq	r2,zero,805400 <___vfprintf_internal_r+0x448>
  80501c:	b880030b 	ldhu	r2,12(r23)
  805020:	10c8000c 	andi	r3,r2,8192
  805024:	1800061e 	bne	r3,zero,805040 <___vfprintf_internal_r+0x88>
  805028:	b9001917 	ldw	r4,100(r23)
  80502c:	00f7ffc4 	movi	r3,-8193
  805030:	10880014 	ori	r2,r2,8192
  805034:	20c6703a 	and	r3,r4,r3
  805038:	b880030d 	sth	r2,12(r23)
  80503c:	b8c01915 	stw	r3,100(r23)
  805040:	10c0020c 	andi	r3,r2,8
  805044:	1800c126 	beq	r3,zero,80534c <___vfprintf_internal_r+0x394>
  805048:	b8c00417 	ldw	r3,16(r23)
  80504c:	1800bf26 	beq	r3,zero,80534c <___vfprintf_internal_r+0x394>
  805050:	1080068c 	andi	r2,r2,26
  805054:	00c00284 	movi	r3,10
  805058:	10c0c426 	beq	r2,r3,80536c <___vfprintf_internal_r+0x3b4>
  80505c:	d8c00404 	addi	r3,sp,16
  805060:	05002074 	movhi	r20,129
  805064:	d9001e04 	addi	r4,sp,120
  805068:	a513bd84 	addi	r20,r20,20214
  80506c:	d8c01e15 	stw	r3,120(sp)
  805070:	d8002015 	stw	zero,128(sp)
  805074:	d8001f15 	stw	zero,124(sp)
  805078:	d8003315 	stw	zero,204(sp)
  80507c:	d8003615 	stw	zero,216(sp)
  805080:	d8003815 	stw	zero,224(sp)
  805084:	1811883a 	mov	r8,r3
  805088:	d8003915 	stw	zero,228(sp)
  80508c:	d8003a15 	stw	zero,232(sp)
  805090:	d8002f15 	stw	zero,188(sp)
  805094:	d9002815 	stw	r4,160(sp)
  805098:	a8800007 	ldb	r2,0(r21)
  80509c:	10027b26 	beq	r2,zero,805a8c <___vfprintf_internal_r+0xad4>
  8050a0:	00c00944 	movi	r3,37
  8050a4:	a821883a 	mov	r16,r21
  8050a8:	10c0021e 	bne	r2,r3,8050b4 <___vfprintf_internal_r+0xfc>
  8050ac:	00001406 	br	805100 <___vfprintf_internal_r+0x148>
  8050b0:	10c00326 	beq	r2,r3,8050c0 <___vfprintf_internal_r+0x108>
  8050b4:	84000044 	addi	r16,r16,1
  8050b8:	80800007 	ldb	r2,0(r16)
  8050bc:	103ffc1e 	bne	r2,zero,8050b0 <__alt_mem_onchip_mem+0xff7850b0>
  8050c0:	8563c83a 	sub	r17,r16,r21
  8050c4:	88000e26 	beq	r17,zero,805100 <___vfprintf_internal_r+0x148>
  8050c8:	d8c02017 	ldw	r3,128(sp)
  8050cc:	d8801f17 	ldw	r2,124(sp)
  8050d0:	45400015 	stw	r21,0(r8)
  8050d4:	1c47883a 	add	r3,r3,r17
  8050d8:	10800044 	addi	r2,r2,1
  8050dc:	d8c02015 	stw	r3,128(sp)
  8050e0:	44400115 	stw	r17,4(r8)
  8050e4:	d8801f15 	stw	r2,124(sp)
  8050e8:	00c001c4 	movi	r3,7
  8050ec:	1880a716 	blt	r3,r2,80538c <___vfprintf_internal_r+0x3d4>
  8050f0:	42000204 	addi	r8,r8,8
  8050f4:	d9402f17 	ldw	r5,188(sp)
  8050f8:	2c4b883a 	add	r5,r5,r17
  8050fc:	d9402f15 	stw	r5,188(sp)
  805100:	80800007 	ldb	r2,0(r16)
  805104:	1000a826 	beq	r2,zero,8053a8 <___vfprintf_internal_r+0x3f0>
  805108:	84400047 	ldb	r17,1(r16)
  80510c:	00bfffc4 	movi	r2,-1
  805110:	85400044 	addi	r21,r16,1
  805114:	d8002785 	stb	zero,158(sp)
  805118:	0007883a 	mov	r3,zero
  80511c:	000f883a 	mov	r7,zero
  805120:	d8802915 	stw	r2,164(sp)
  805124:	d8003115 	stw	zero,196(sp)
  805128:	0025883a 	mov	r18,zero
  80512c:	01401604 	movi	r5,88
  805130:	01800244 	movi	r6,9
  805134:	02800a84 	movi	r10,42
  805138:	02401b04 	movi	r9,108
  80513c:	ad400044 	addi	r21,r21,1
  805140:	88bff804 	addi	r2,r17,-32
  805144:	28830436 	bltu	r5,r2,805d58 <___vfprintf_internal_r+0xda0>
  805148:	100490ba 	slli	r2,r2,2
  80514c:	01002034 	movhi	r4,128
  805150:	21145804 	addi	r4,r4,20832
  805154:	1105883a 	add	r2,r2,r4
  805158:	10800017 	ldw	r2,0(r2)
  80515c:	1000683a 	jmp	r2
  805160:	00805c78 	rdprs	r2,zero,369
  805164:	00805d58 	cmpnei	r2,zero,373
  805168:	00805d58 	cmpnei	r2,zero,373
  80516c:	00805c98 	cmpnei	r2,zero,370
  805170:	00805d58 	cmpnei	r2,zero,373
  805174:	00805d58 	cmpnei	r2,zero,373
  805178:	00805d58 	cmpnei	r2,zero,373
  80517c:	00805d58 	cmpnei	r2,zero,373
  805180:	00805d58 	cmpnei	r2,zero,373
  805184:	00805d58 	cmpnei	r2,zero,373
  805188:	0080540c 	andi	r2,zero,336
  80518c:	00805bb4 	movhi	r2,366
  805190:	00805d58 	cmpnei	r2,zero,373
  805194:	008052d4 	movui	r2,331
  805198:	00805434 	movhi	r2,336
  80519c:	00805d58 	cmpnei	r2,zero,373
  8051a0:	00805474 	movhi	r2,337
  8051a4:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051a8:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051ac:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051b0:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051b4:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051b8:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051bc:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051c0:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051c4:	00805480 	call	80548 <__alt_mem_sdram-0x77fab8>
  8051c8:	00805d58 	cmpnei	r2,zero,373
  8051cc:	00805d58 	cmpnei	r2,zero,373
  8051d0:	00805d58 	cmpnei	r2,zero,373
  8051d4:	00805d58 	cmpnei	r2,zero,373
  8051d8:	00805d58 	cmpnei	r2,zero,373
  8051dc:	00805d58 	cmpnei	r2,zero,373
  8051e0:	00805d58 	cmpnei	r2,zero,373
  8051e4:	00805d58 	cmpnei	r2,zero,373
  8051e8:	00805d58 	cmpnei	r2,zero,373
  8051ec:	00805d58 	cmpnei	r2,zero,373
  8051f0:	008054b4 	movhi	r2,338
  8051f4:	00805570 	cmpltui	r2,zero,341
  8051f8:	00805d58 	cmpnei	r2,zero,373
  8051fc:	00805570 	cmpltui	r2,zero,341
  805200:	00805d58 	cmpnei	r2,zero,373
  805204:	00805d58 	cmpnei	r2,zero,373
  805208:	00805d58 	cmpnei	r2,zero,373
  80520c:	00805d58 	cmpnei	r2,zero,373
  805210:	00805610 	cmplti	r2,zero,344
  805214:	00805d58 	cmpnei	r2,zero,373
  805218:	00805d58 	cmpnei	r2,zero,373
  80521c:	0080561c 	xori	r2,zero,344
  805220:	00805d58 	cmpnei	r2,zero,373
  805224:	00805d58 	cmpnei	r2,zero,373
  805228:	00805d58 	cmpnei	r2,zero,373
  80522c:	00805d58 	cmpnei	r2,zero,373
  805230:	00805d58 	cmpnei	r2,zero,373
  805234:	00805a94 	movui	r2,362
  805238:	00805d58 	cmpnei	r2,zero,373
  80523c:	00805d58 	cmpnei	r2,zero,373
  805240:	00805af4 	movhi	r2,363
  805244:	00805d58 	cmpnei	r2,zero,373
  805248:	00805d58 	cmpnei	r2,zero,373
  80524c:	00805d58 	cmpnei	r2,zero,373
  805250:	00805d58 	cmpnei	r2,zero,373
  805254:	00805d58 	cmpnei	r2,zero,373
  805258:	00805d58 	cmpnei	r2,zero,373
  80525c:	00805d58 	cmpnei	r2,zero,373
  805260:	00805d58 	cmpnei	r2,zero,373
  805264:	00805d58 	cmpnei	r2,zero,373
  805268:	00805d58 	cmpnei	r2,zero,373
  80526c:	00805d04 	movi	r2,372
  805270:	00805ca4 	muli	r2,zero,370
  805274:	00805570 	cmpltui	r2,zero,341
  805278:	00805570 	cmpltui	r2,zero,341
  80527c:	00805570 	cmpltui	r2,zero,341
  805280:	00805cb4 	movhi	r2,370
  805284:	00805ca4 	muli	r2,zero,370
  805288:	00805d58 	cmpnei	r2,zero,373
  80528c:	00805d58 	cmpnei	r2,zero,373
  805290:	00805cc0 	call	805cc <__alt_mem_sdram-0x77fa34>
  805294:	00805d58 	cmpnei	r2,zero,373
  805298:	00805cd0 	cmplti	r2,zero,371
  80529c:	00805ba4 	muli	r2,zero,366
  8052a0:	008052e0 	cmpeqi	r2,zero,331
  8052a4:	00805bc4 	movi	r2,367
  8052a8:	00805d58 	cmpnei	r2,zero,373
  8052ac:	00805bd0 	cmplti	r2,zero,367
  8052b0:	00805d58 	cmpnei	r2,zero,373
  8052b4:	00805c2c 	andhi	r2,zero,368
  8052b8:	00805d58 	cmpnei	r2,zero,373
  8052bc:	00805d58 	cmpnei	r2,zero,373
  8052c0:	00805c3c 	xorhi	r2,zero,368
  8052c4:	d9003117 	ldw	r4,196(sp)
  8052c8:	d8802d15 	stw	r2,180(sp)
  8052cc:	0109c83a 	sub	r4,zero,r4
  8052d0:	d9003115 	stw	r4,196(sp)
  8052d4:	94800114 	ori	r18,r18,4
  8052d8:	ac400007 	ldb	r17,0(r21)
  8052dc:	003f9706 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  8052e0:	00800c04 	movi	r2,48
  8052e4:	d9002d17 	ldw	r4,180(sp)
  8052e8:	d9402917 	ldw	r5,164(sp)
  8052ec:	d8802705 	stb	r2,156(sp)
  8052f0:	00801e04 	movi	r2,120
  8052f4:	d8802745 	stb	r2,157(sp)
  8052f8:	d8002785 	stb	zero,158(sp)
  8052fc:	20c00104 	addi	r3,r4,4
  805300:	24c00017 	ldw	r19,0(r4)
  805304:	002d883a 	mov	r22,zero
  805308:	90800094 	ori	r2,r18,2
  80530c:	28029a16 	blt	r5,zero,805d78 <___vfprintf_internal_r+0xdc0>
  805310:	00bfdfc4 	movi	r2,-129
  805314:	90a4703a 	and	r18,r18,r2
  805318:	d8c02d15 	stw	r3,180(sp)
  80531c:	94800094 	ori	r18,r18,2
  805320:	9802871e 	bne	r19,zero,805d40 <___vfprintf_internal_r+0xd88>
  805324:	00802074 	movhi	r2,129
  805328:	1093b604 	addi	r2,r2,20184
  80532c:	d8803915 	stw	r2,228(sp)
  805330:	04401e04 	movi	r17,120
  805334:	d8802917 	ldw	r2,164(sp)
  805338:	0039883a 	mov	fp,zero
  80533c:	1001e926 	beq	r2,zero,805ae4 <___vfprintf_internal_r+0xb2c>
  805340:	0027883a 	mov	r19,zero
  805344:	002d883a 	mov	r22,zero
  805348:	00020506 	br	805b60 <___vfprintf_internal_r+0xba8>
  80534c:	d9002c17 	ldw	r4,176(sp)
  805350:	b80b883a 	mov	r5,r23
  805354:	08072e80 	call	8072e8 <__swsetup_r>
  805358:	1005ac1e 	bne	r2,zero,806a0c <___vfprintf_internal_r+0x1a54>
  80535c:	b880030b 	ldhu	r2,12(r23)
  805360:	00c00284 	movi	r3,10
  805364:	1080068c 	andi	r2,r2,26
  805368:	10ff3c1e 	bne	r2,r3,80505c <__alt_mem_onchip_mem+0xff78505c>
  80536c:	b880038f 	ldh	r2,14(r23)
  805370:	103f3a16 	blt	r2,zero,80505c <__alt_mem_onchip_mem+0xff78505c>
  805374:	d9c02d17 	ldw	r7,180(sp)
  805378:	d9002c17 	ldw	r4,176(sp)
  80537c:	a80d883a 	mov	r6,r21
  805380:	b80b883a 	mov	r5,r23
  805384:	08071cc0 	call	8071cc <__sbprintf>
  805388:	00001106 	br	8053d0 <___vfprintf_internal_r+0x418>
  80538c:	d9002c17 	ldw	r4,176(sp)
  805390:	d9801e04 	addi	r6,sp,120
  805394:	b80b883a 	mov	r5,r23
  805398:	080bba80 	call	80bba8 <__sprint_r>
  80539c:	1000081e 	bne	r2,zero,8053c0 <___vfprintf_internal_r+0x408>
  8053a0:	da000404 	addi	r8,sp,16
  8053a4:	003f5306 	br	8050f4 <__alt_mem_onchip_mem+0xff7850f4>
  8053a8:	d8802017 	ldw	r2,128(sp)
  8053ac:	10000426 	beq	r2,zero,8053c0 <___vfprintf_internal_r+0x408>
  8053b0:	d9002c17 	ldw	r4,176(sp)
  8053b4:	d9801e04 	addi	r6,sp,120
  8053b8:	b80b883a 	mov	r5,r23
  8053bc:	080bba80 	call	80bba8 <__sprint_r>
  8053c0:	b880030b 	ldhu	r2,12(r23)
  8053c4:	1080100c 	andi	r2,r2,64
  8053c8:	1005901e 	bne	r2,zero,806a0c <___vfprintf_internal_r+0x1a54>
  8053cc:	d8802f17 	ldw	r2,188(sp)
  8053d0:	dfc04717 	ldw	ra,284(sp)
  8053d4:	df004617 	ldw	fp,280(sp)
  8053d8:	ddc04517 	ldw	r23,276(sp)
  8053dc:	dd804417 	ldw	r22,272(sp)
  8053e0:	dd404317 	ldw	r21,268(sp)
  8053e4:	dd004217 	ldw	r20,264(sp)
  8053e8:	dcc04117 	ldw	r19,260(sp)
  8053ec:	dc804017 	ldw	r18,256(sp)
  8053f0:	dc403f17 	ldw	r17,252(sp)
  8053f4:	dc003e17 	ldw	r16,248(sp)
  8053f8:	dec04804 	addi	sp,sp,288
  8053fc:	f800283a 	ret
  805400:	d9002c17 	ldw	r4,176(sp)
  805404:	08093100 	call	809310 <__sinit>
  805408:	003f0406 	br	80501c <__alt_mem_onchip_mem+0xff78501c>
  80540c:	d8802d17 	ldw	r2,180(sp)
  805410:	d9002d17 	ldw	r4,180(sp)
  805414:	10800017 	ldw	r2,0(r2)
  805418:	d8803115 	stw	r2,196(sp)
  80541c:	20800104 	addi	r2,r4,4
  805420:	d9003117 	ldw	r4,196(sp)
  805424:	203fa716 	blt	r4,zero,8052c4 <__alt_mem_onchip_mem+0xff7852c4>
  805428:	d8802d15 	stw	r2,180(sp)
  80542c:	ac400007 	ldb	r17,0(r21)
  805430:	003f4206 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805434:	ac400007 	ldb	r17,0(r21)
  805438:	aac00044 	addi	r11,r21,1
  80543c:	8a872826 	beq	r17,r10,8070e0 <___vfprintf_internal_r+0x2128>
  805440:	88bff404 	addi	r2,r17,-48
  805444:	0009883a 	mov	r4,zero
  805448:	30867d36 	bltu	r6,r2,806e40 <___vfprintf_internal_r+0x1e88>
  80544c:	5c400007 	ldb	r17,0(r11)
  805450:	210002a4 	muli	r4,r4,10
  805454:	5d400044 	addi	r21,r11,1
  805458:	a817883a 	mov	r11,r21
  80545c:	2089883a 	add	r4,r4,r2
  805460:	88bff404 	addi	r2,r17,-48
  805464:	30bff92e 	bgeu	r6,r2,80544c <__alt_mem_onchip_mem+0xff78544c>
  805468:	2005c916 	blt	r4,zero,806b90 <___vfprintf_internal_r+0x1bd8>
  80546c:	d9002915 	stw	r4,164(sp)
  805470:	003f3306 	br	805140 <__alt_mem_onchip_mem+0xff785140>
  805474:	94802014 	ori	r18,r18,128
  805478:	ac400007 	ldb	r17,0(r21)
  80547c:	003f2f06 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805480:	a809883a 	mov	r4,r21
  805484:	d8003115 	stw	zero,196(sp)
  805488:	88bff404 	addi	r2,r17,-48
  80548c:	0017883a 	mov	r11,zero
  805490:	24400007 	ldb	r17,0(r4)
  805494:	5ac002a4 	muli	r11,r11,10
  805498:	ad400044 	addi	r21,r21,1
  80549c:	a809883a 	mov	r4,r21
  8054a0:	12d7883a 	add	r11,r2,r11
  8054a4:	88bff404 	addi	r2,r17,-48
  8054a8:	30bff92e 	bgeu	r6,r2,805490 <__alt_mem_onchip_mem+0xff785490>
  8054ac:	dac03115 	stw	r11,196(sp)
  8054b0:	003f2306 	br	805140 <__alt_mem_onchip_mem+0xff785140>
  8054b4:	18c03fcc 	andi	r3,r3,255
  8054b8:	18072b1e 	bne	r3,zero,807168 <___vfprintf_internal_r+0x21b0>
  8054bc:	94800414 	ori	r18,r18,16
  8054c0:	9080080c 	andi	r2,r18,32
  8054c4:	10037b26 	beq	r2,zero,8062b4 <___vfprintf_internal_r+0x12fc>
  8054c8:	d9402d17 	ldw	r5,180(sp)
  8054cc:	28800117 	ldw	r2,4(r5)
  8054d0:	2cc00017 	ldw	r19,0(r5)
  8054d4:	29400204 	addi	r5,r5,8
  8054d8:	d9402d15 	stw	r5,180(sp)
  8054dc:	102d883a 	mov	r22,r2
  8054e0:	10044b16 	blt	r2,zero,806610 <___vfprintf_internal_r+0x1658>
  8054e4:	d9402917 	ldw	r5,164(sp)
  8054e8:	df002783 	ldbu	fp,158(sp)
  8054ec:	2803bc16 	blt	r5,zero,8063e0 <___vfprintf_internal_r+0x1428>
  8054f0:	00ffdfc4 	movi	r3,-129
  8054f4:	9d84b03a 	or	r2,r19,r22
  8054f8:	90e4703a 	and	r18,r18,r3
  8054fc:	10017726 	beq	r2,zero,805adc <___vfprintf_internal_r+0xb24>
  805500:	b0038326 	beq	r22,zero,806310 <___vfprintf_internal_r+0x1358>
  805504:	dc402a15 	stw	r17,168(sp)
  805508:	dc001e04 	addi	r16,sp,120
  80550c:	b023883a 	mov	r17,r22
  805510:	402d883a 	mov	r22,r8
  805514:	9809883a 	mov	r4,r19
  805518:	880b883a 	mov	r5,r17
  80551c:	01800284 	movi	r6,10
  805520:	000f883a 	mov	r7,zero
  805524:	080dd7c0 	call	80dd7c <__umoddi3>
  805528:	10800c04 	addi	r2,r2,48
  80552c:	843fffc4 	addi	r16,r16,-1
  805530:	9809883a 	mov	r4,r19
  805534:	880b883a 	mov	r5,r17
  805538:	80800005 	stb	r2,0(r16)
  80553c:	01800284 	movi	r6,10
  805540:	000f883a 	mov	r7,zero
  805544:	080d8040 	call	80d804 <__udivdi3>
  805548:	1027883a 	mov	r19,r2
  80554c:	10c4b03a 	or	r2,r2,r3
  805550:	1823883a 	mov	r17,r3
  805554:	103fef1e 	bne	r2,zero,805514 <__alt_mem_onchip_mem+0xff785514>
  805558:	d8c02817 	ldw	r3,160(sp)
  80555c:	dc402a17 	ldw	r17,168(sp)
  805560:	b011883a 	mov	r8,r22
  805564:	1c07c83a 	sub	r3,r3,r16
  805568:	d8c02e15 	stw	r3,184(sp)
  80556c:	00005906 	br	8056d4 <___vfprintf_internal_r+0x71c>
  805570:	18c03fcc 	andi	r3,r3,255
  805574:	1806fa1e 	bne	r3,zero,807160 <___vfprintf_internal_r+0x21a8>
  805578:	9080020c 	andi	r2,r18,8
  80557c:	10048a26 	beq	r2,zero,8067a8 <___vfprintf_internal_r+0x17f0>
  805580:	d8c02d17 	ldw	r3,180(sp)
  805584:	d9002d17 	ldw	r4,180(sp)
  805588:	d9402d17 	ldw	r5,180(sp)
  80558c:	18c00017 	ldw	r3,0(r3)
  805590:	21000117 	ldw	r4,4(r4)
  805594:	29400204 	addi	r5,r5,8
  805598:	d8c03615 	stw	r3,216(sp)
  80559c:	d9003815 	stw	r4,224(sp)
  8055a0:	d9402d15 	stw	r5,180(sp)
  8055a4:	d9003617 	ldw	r4,216(sp)
  8055a8:	d9403817 	ldw	r5,224(sp)
  8055ac:	da003d15 	stw	r8,244(sp)
  8055b0:	04000044 	movi	r16,1
  8055b4:	080b95c0 	call	80b95c <__fpclassifyd>
  8055b8:	da003d17 	ldw	r8,244(sp)
  8055bc:	14041f1e 	bne	r2,r16,80663c <___vfprintf_internal_r+0x1684>
  8055c0:	d9003617 	ldw	r4,216(sp)
  8055c4:	d9403817 	ldw	r5,224(sp)
  8055c8:	000d883a 	mov	r6,zero
  8055cc:	000f883a 	mov	r7,zero
  8055d0:	080f7600 	call	80f760 <__ledf2>
  8055d4:	da003d17 	ldw	r8,244(sp)
  8055d8:	1005be16 	blt	r2,zero,806cd4 <___vfprintf_internal_r+0x1d1c>
  8055dc:	df002783 	ldbu	fp,158(sp)
  8055e0:	008011c4 	movi	r2,71
  8055e4:	1445330e 	bge	r2,r17,806ab4 <___vfprintf_internal_r+0x1afc>
  8055e8:	04002074 	movhi	r16,129
  8055ec:	8413ae04 	addi	r16,r16,20152
  8055f0:	00c000c4 	movi	r3,3
  8055f4:	00bfdfc4 	movi	r2,-129
  8055f8:	d8c02a15 	stw	r3,168(sp)
  8055fc:	90a4703a 	and	r18,r18,r2
  805600:	d8c02e15 	stw	r3,184(sp)
  805604:	d8002915 	stw	zero,164(sp)
  805608:	d8003215 	stw	zero,200(sp)
  80560c:	00003706 	br	8056ec <___vfprintf_internal_r+0x734>
  805610:	94800214 	ori	r18,r18,8
  805614:	ac400007 	ldb	r17,0(r21)
  805618:	003ec806 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  80561c:	18c03fcc 	andi	r3,r3,255
  805620:	1806db1e 	bne	r3,zero,807190 <___vfprintf_internal_r+0x21d8>
  805624:	94800414 	ori	r18,r18,16
  805628:	9080080c 	andi	r2,r18,32
  80562c:	1002d826 	beq	r2,zero,806190 <___vfprintf_internal_r+0x11d8>
  805630:	d9402d17 	ldw	r5,180(sp)
  805634:	d8c02917 	ldw	r3,164(sp)
  805638:	d8002785 	stb	zero,158(sp)
  80563c:	28800204 	addi	r2,r5,8
  805640:	2cc00017 	ldw	r19,0(r5)
  805644:	2d800117 	ldw	r22,4(r5)
  805648:	18048f16 	blt	r3,zero,806888 <___vfprintf_internal_r+0x18d0>
  80564c:	013fdfc4 	movi	r4,-129
  805650:	9d86b03a 	or	r3,r19,r22
  805654:	d8802d15 	stw	r2,180(sp)
  805658:	9124703a 	and	r18,r18,r4
  80565c:	1802d91e 	bne	r3,zero,8061c4 <___vfprintf_internal_r+0x120c>
  805660:	d8c02917 	ldw	r3,164(sp)
  805664:	0039883a 	mov	fp,zero
  805668:	1805c326 	beq	r3,zero,806d78 <___vfprintf_internal_r+0x1dc0>
  80566c:	0027883a 	mov	r19,zero
  805670:	002d883a 	mov	r22,zero
  805674:	dc001e04 	addi	r16,sp,120
  805678:	9806d0fa 	srli	r3,r19,3
  80567c:	b008977a 	slli	r4,r22,29
  805680:	b02cd0fa 	srli	r22,r22,3
  805684:	9cc001cc 	andi	r19,r19,7
  805688:	98800c04 	addi	r2,r19,48
  80568c:	843fffc4 	addi	r16,r16,-1
  805690:	20e6b03a 	or	r19,r4,r3
  805694:	80800005 	stb	r2,0(r16)
  805698:	9d86b03a 	or	r3,r19,r22
  80569c:	183ff61e 	bne	r3,zero,805678 <__alt_mem_onchip_mem+0xff785678>
  8056a0:	90c0004c 	andi	r3,r18,1
  8056a4:	18013b26 	beq	r3,zero,805b94 <___vfprintf_internal_r+0xbdc>
  8056a8:	10803fcc 	andi	r2,r2,255
  8056ac:	1080201c 	xori	r2,r2,128
  8056b0:	10bfe004 	addi	r2,r2,-128
  8056b4:	00c00c04 	movi	r3,48
  8056b8:	10c13626 	beq	r2,r3,805b94 <___vfprintf_internal_r+0xbdc>
  8056bc:	80ffffc5 	stb	r3,-1(r16)
  8056c0:	d8c02817 	ldw	r3,160(sp)
  8056c4:	80bfffc4 	addi	r2,r16,-1
  8056c8:	1021883a 	mov	r16,r2
  8056cc:	1887c83a 	sub	r3,r3,r2
  8056d0:	d8c02e15 	stw	r3,184(sp)
  8056d4:	d8802e17 	ldw	r2,184(sp)
  8056d8:	d9002917 	ldw	r4,164(sp)
  8056dc:	1100010e 	bge	r2,r4,8056e4 <___vfprintf_internal_r+0x72c>
  8056e0:	2005883a 	mov	r2,r4
  8056e4:	d8802a15 	stw	r2,168(sp)
  8056e8:	d8003215 	stw	zero,200(sp)
  8056ec:	e7003fcc 	andi	fp,fp,255
  8056f0:	e700201c 	xori	fp,fp,128
  8056f4:	e73fe004 	addi	fp,fp,-128
  8056f8:	e0000326 	beq	fp,zero,805708 <___vfprintf_internal_r+0x750>
  8056fc:	d8c02a17 	ldw	r3,168(sp)
  805700:	18c00044 	addi	r3,r3,1
  805704:	d8c02a15 	stw	r3,168(sp)
  805708:	90c0008c 	andi	r3,r18,2
  80570c:	d8c02b15 	stw	r3,172(sp)
  805710:	18000326 	beq	r3,zero,805720 <___vfprintf_internal_r+0x768>
  805714:	d8c02a17 	ldw	r3,168(sp)
  805718:	18c00084 	addi	r3,r3,2
  80571c:	d8c02a15 	stw	r3,168(sp)
  805720:	90c0210c 	andi	r3,r18,132
  805724:	d8c03015 	stw	r3,192(sp)
  805728:	1801a31e 	bne	r3,zero,805db8 <___vfprintf_internal_r+0xe00>
  80572c:	d9003117 	ldw	r4,196(sp)
  805730:	d8c02a17 	ldw	r3,168(sp)
  805734:	20e7c83a 	sub	r19,r4,r3
  805738:	04c19f0e 	bge	zero,r19,805db8 <___vfprintf_internal_r+0xe00>
  80573c:	02400404 	movi	r9,16
  805740:	d8c02017 	ldw	r3,128(sp)
  805744:	d8801f17 	ldw	r2,124(sp)
  805748:	4cc50d0e 	bge	r9,r19,806b80 <___vfprintf_internal_r+0x1bc8>
  80574c:	01402074 	movhi	r5,129
  805750:	2953c184 	addi	r5,r5,20230
  805754:	dc403b15 	stw	r17,236(sp)
  805758:	d9403515 	stw	r5,212(sp)
  80575c:	9823883a 	mov	r17,r19
  805760:	482d883a 	mov	r22,r9
  805764:	9027883a 	mov	r19,r18
  805768:	070001c4 	movi	fp,7
  80576c:	8025883a 	mov	r18,r16
  805770:	dc002c17 	ldw	r16,176(sp)
  805774:	00000306 	br	805784 <___vfprintf_internal_r+0x7cc>
  805778:	8c7ffc04 	addi	r17,r17,-16
  80577c:	42000204 	addi	r8,r8,8
  805780:	b440130e 	bge	r22,r17,8057d0 <___vfprintf_internal_r+0x818>
  805784:	01002074 	movhi	r4,129
  805788:	18c00404 	addi	r3,r3,16
  80578c:	10800044 	addi	r2,r2,1
  805790:	2113c184 	addi	r4,r4,20230
  805794:	41000015 	stw	r4,0(r8)
  805798:	45800115 	stw	r22,4(r8)
  80579c:	d8c02015 	stw	r3,128(sp)
  8057a0:	d8801f15 	stw	r2,124(sp)
  8057a4:	e0bff40e 	bge	fp,r2,805778 <__alt_mem_onchip_mem+0xff785778>
  8057a8:	d9801e04 	addi	r6,sp,120
  8057ac:	b80b883a 	mov	r5,r23
  8057b0:	8009883a 	mov	r4,r16
  8057b4:	080bba80 	call	80bba8 <__sprint_r>
  8057b8:	103f011e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8057bc:	8c7ffc04 	addi	r17,r17,-16
  8057c0:	d8c02017 	ldw	r3,128(sp)
  8057c4:	d8801f17 	ldw	r2,124(sp)
  8057c8:	da000404 	addi	r8,sp,16
  8057cc:	b47fed16 	blt	r22,r17,805784 <__alt_mem_onchip_mem+0xff785784>
  8057d0:	9021883a 	mov	r16,r18
  8057d4:	9825883a 	mov	r18,r19
  8057d8:	8827883a 	mov	r19,r17
  8057dc:	dc403b17 	ldw	r17,236(sp)
  8057e0:	d9403517 	ldw	r5,212(sp)
  8057e4:	98c7883a 	add	r3,r19,r3
  8057e8:	10800044 	addi	r2,r2,1
  8057ec:	41400015 	stw	r5,0(r8)
  8057f0:	44c00115 	stw	r19,4(r8)
  8057f4:	d8c02015 	stw	r3,128(sp)
  8057f8:	d8801f15 	stw	r2,124(sp)
  8057fc:	010001c4 	movi	r4,7
  805800:	2082a316 	blt	r4,r2,806290 <___vfprintf_internal_r+0x12d8>
  805804:	df002787 	ldb	fp,158(sp)
  805808:	42000204 	addi	r8,r8,8
  80580c:	e0000c26 	beq	fp,zero,805840 <___vfprintf_internal_r+0x888>
  805810:	d8801f17 	ldw	r2,124(sp)
  805814:	d9002784 	addi	r4,sp,158
  805818:	18c00044 	addi	r3,r3,1
  80581c:	10800044 	addi	r2,r2,1
  805820:	41000015 	stw	r4,0(r8)
  805824:	01000044 	movi	r4,1
  805828:	41000115 	stw	r4,4(r8)
  80582c:	d8c02015 	stw	r3,128(sp)
  805830:	d8801f15 	stw	r2,124(sp)
  805834:	010001c4 	movi	r4,7
  805838:	20823c16 	blt	r4,r2,80612c <___vfprintf_internal_r+0x1174>
  80583c:	42000204 	addi	r8,r8,8
  805840:	d8802b17 	ldw	r2,172(sp)
  805844:	10000c26 	beq	r2,zero,805878 <___vfprintf_internal_r+0x8c0>
  805848:	d8801f17 	ldw	r2,124(sp)
  80584c:	d9002704 	addi	r4,sp,156
  805850:	18c00084 	addi	r3,r3,2
  805854:	10800044 	addi	r2,r2,1
  805858:	41000015 	stw	r4,0(r8)
  80585c:	01000084 	movi	r4,2
  805860:	41000115 	stw	r4,4(r8)
  805864:	d8c02015 	stw	r3,128(sp)
  805868:	d8801f15 	stw	r2,124(sp)
  80586c:	010001c4 	movi	r4,7
  805870:	20823616 	blt	r4,r2,80614c <___vfprintf_internal_r+0x1194>
  805874:	42000204 	addi	r8,r8,8
  805878:	d9003017 	ldw	r4,192(sp)
  80587c:	00802004 	movi	r2,128
  805880:	20819926 	beq	r4,r2,805ee8 <___vfprintf_internal_r+0xf30>
  805884:	d9402917 	ldw	r5,164(sp)
  805888:	d8802e17 	ldw	r2,184(sp)
  80588c:	28adc83a 	sub	r22,r5,r2
  805890:	0580310e 	bge	zero,r22,805958 <___vfprintf_internal_r+0x9a0>
  805894:	07000404 	movi	fp,16
  805898:	d8801f17 	ldw	r2,124(sp)
  80589c:	e584140e 	bge	fp,r22,8068f0 <___vfprintf_internal_r+0x1938>
  8058a0:	01402074 	movhi	r5,129
  8058a4:	2953bd84 	addi	r5,r5,20214
  8058a8:	dc402915 	stw	r17,164(sp)
  8058ac:	d9402b15 	stw	r5,172(sp)
  8058b0:	b023883a 	mov	r17,r22
  8058b4:	04c001c4 	movi	r19,7
  8058b8:	a82d883a 	mov	r22,r21
  8058bc:	902b883a 	mov	r21,r18
  8058c0:	8025883a 	mov	r18,r16
  8058c4:	dc002c17 	ldw	r16,176(sp)
  8058c8:	00000306 	br	8058d8 <___vfprintf_internal_r+0x920>
  8058cc:	8c7ffc04 	addi	r17,r17,-16
  8058d0:	42000204 	addi	r8,r8,8
  8058d4:	e440110e 	bge	fp,r17,80591c <___vfprintf_internal_r+0x964>
  8058d8:	18c00404 	addi	r3,r3,16
  8058dc:	10800044 	addi	r2,r2,1
  8058e0:	45000015 	stw	r20,0(r8)
  8058e4:	47000115 	stw	fp,4(r8)
  8058e8:	d8c02015 	stw	r3,128(sp)
  8058ec:	d8801f15 	stw	r2,124(sp)
  8058f0:	98bff60e 	bge	r19,r2,8058cc <__alt_mem_onchip_mem+0xff7858cc>
  8058f4:	d9801e04 	addi	r6,sp,120
  8058f8:	b80b883a 	mov	r5,r23
  8058fc:	8009883a 	mov	r4,r16
  805900:	080bba80 	call	80bba8 <__sprint_r>
  805904:	103eae1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  805908:	8c7ffc04 	addi	r17,r17,-16
  80590c:	d8c02017 	ldw	r3,128(sp)
  805910:	d8801f17 	ldw	r2,124(sp)
  805914:	da000404 	addi	r8,sp,16
  805918:	e47fef16 	blt	fp,r17,8058d8 <__alt_mem_onchip_mem+0xff7858d8>
  80591c:	9021883a 	mov	r16,r18
  805920:	a825883a 	mov	r18,r21
  805924:	b02b883a 	mov	r21,r22
  805928:	882d883a 	mov	r22,r17
  80592c:	dc402917 	ldw	r17,164(sp)
  805930:	d9002b17 	ldw	r4,172(sp)
  805934:	1d87883a 	add	r3,r3,r22
  805938:	10800044 	addi	r2,r2,1
  80593c:	41000015 	stw	r4,0(r8)
  805940:	45800115 	stw	r22,4(r8)
  805944:	d8c02015 	stw	r3,128(sp)
  805948:	d8801f15 	stw	r2,124(sp)
  80594c:	010001c4 	movi	r4,7
  805950:	2081ee16 	blt	r4,r2,80610c <___vfprintf_internal_r+0x1154>
  805954:	42000204 	addi	r8,r8,8
  805958:	9080400c 	andi	r2,r18,256
  80595c:	1001181e 	bne	r2,zero,805dc0 <___vfprintf_internal_r+0xe08>
  805960:	d9402e17 	ldw	r5,184(sp)
  805964:	d8801f17 	ldw	r2,124(sp)
  805968:	44000015 	stw	r16,0(r8)
  80596c:	1947883a 	add	r3,r3,r5
  805970:	10800044 	addi	r2,r2,1
  805974:	41400115 	stw	r5,4(r8)
  805978:	d8c02015 	stw	r3,128(sp)
  80597c:	d8801f15 	stw	r2,124(sp)
  805980:	010001c4 	movi	r4,7
  805984:	2081d316 	blt	r4,r2,8060d4 <___vfprintf_internal_r+0x111c>
  805988:	42000204 	addi	r8,r8,8
  80598c:	9480010c 	andi	r18,r18,4
  805990:	90003226 	beq	r18,zero,805a5c <___vfprintf_internal_r+0xaa4>
  805994:	d9403117 	ldw	r5,196(sp)
  805998:	d8802a17 	ldw	r2,168(sp)
  80599c:	28a1c83a 	sub	r16,r5,r2
  8059a0:	04002e0e 	bge	zero,r16,805a5c <___vfprintf_internal_r+0xaa4>
  8059a4:	04400404 	movi	r17,16
  8059a8:	d8801f17 	ldw	r2,124(sp)
  8059ac:	8c04a20e 	bge	r17,r16,806c38 <___vfprintf_internal_r+0x1c80>
  8059b0:	01402074 	movhi	r5,129
  8059b4:	2953c184 	addi	r5,r5,20230
  8059b8:	d9403515 	stw	r5,212(sp)
  8059bc:	048001c4 	movi	r18,7
  8059c0:	dcc02c17 	ldw	r19,176(sp)
  8059c4:	00000306 	br	8059d4 <___vfprintf_internal_r+0xa1c>
  8059c8:	843ffc04 	addi	r16,r16,-16
  8059cc:	42000204 	addi	r8,r8,8
  8059d0:	8c00130e 	bge	r17,r16,805a20 <___vfprintf_internal_r+0xa68>
  8059d4:	01002074 	movhi	r4,129
  8059d8:	18c00404 	addi	r3,r3,16
  8059dc:	10800044 	addi	r2,r2,1
  8059e0:	2113c184 	addi	r4,r4,20230
  8059e4:	41000015 	stw	r4,0(r8)
  8059e8:	44400115 	stw	r17,4(r8)
  8059ec:	d8c02015 	stw	r3,128(sp)
  8059f0:	d8801f15 	stw	r2,124(sp)
  8059f4:	90bff40e 	bge	r18,r2,8059c8 <__alt_mem_onchip_mem+0xff7859c8>
  8059f8:	d9801e04 	addi	r6,sp,120
  8059fc:	b80b883a 	mov	r5,r23
  805a00:	9809883a 	mov	r4,r19
  805a04:	080bba80 	call	80bba8 <__sprint_r>
  805a08:	103e6d1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  805a0c:	843ffc04 	addi	r16,r16,-16
  805a10:	d8c02017 	ldw	r3,128(sp)
  805a14:	d8801f17 	ldw	r2,124(sp)
  805a18:	da000404 	addi	r8,sp,16
  805a1c:	8c3fed16 	blt	r17,r16,8059d4 <__alt_mem_onchip_mem+0xff7859d4>
  805a20:	d9403517 	ldw	r5,212(sp)
  805a24:	1c07883a 	add	r3,r3,r16
  805a28:	10800044 	addi	r2,r2,1
  805a2c:	41400015 	stw	r5,0(r8)
  805a30:	44000115 	stw	r16,4(r8)
  805a34:	d8c02015 	stw	r3,128(sp)
  805a38:	d8801f15 	stw	r2,124(sp)
  805a3c:	010001c4 	movi	r4,7
  805a40:	2080060e 	bge	r4,r2,805a5c <___vfprintf_internal_r+0xaa4>
  805a44:	d9002c17 	ldw	r4,176(sp)
  805a48:	d9801e04 	addi	r6,sp,120
  805a4c:	b80b883a 	mov	r5,r23
  805a50:	080bba80 	call	80bba8 <__sprint_r>
  805a54:	103e5a1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  805a58:	d8c02017 	ldw	r3,128(sp)
  805a5c:	d8803117 	ldw	r2,196(sp)
  805a60:	d9002a17 	ldw	r4,168(sp)
  805a64:	1100010e 	bge	r2,r4,805a6c <___vfprintf_internal_r+0xab4>
  805a68:	2005883a 	mov	r2,r4
  805a6c:	d9402f17 	ldw	r5,188(sp)
  805a70:	288b883a 	add	r5,r5,r2
  805a74:	d9402f15 	stw	r5,188(sp)
  805a78:	18019e1e 	bne	r3,zero,8060f4 <___vfprintf_internal_r+0x113c>
  805a7c:	a8800007 	ldb	r2,0(r21)
  805a80:	d8001f15 	stw	zero,124(sp)
  805a84:	da000404 	addi	r8,sp,16
  805a88:	103d851e 	bne	r2,zero,8050a0 <__alt_mem_onchip_mem+0xff7850a0>
  805a8c:	a821883a 	mov	r16,r21
  805a90:	003d9b06 	br	805100 <__alt_mem_onchip_mem+0xff785100>
  805a94:	18c03fcc 	andi	r3,r3,255
  805a98:	1805c11e 	bne	r3,zero,8071a0 <___vfprintf_internal_r+0x21e8>
  805a9c:	94800414 	ori	r18,r18,16
  805aa0:	9080080c 	andi	r2,r18,32
  805aa4:	10020c26 	beq	r2,zero,8062d8 <___vfprintf_internal_r+0x1320>
  805aa8:	d8802d17 	ldw	r2,180(sp)
  805aac:	d9002917 	ldw	r4,164(sp)
  805ab0:	d8002785 	stb	zero,158(sp)
  805ab4:	10c00204 	addi	r3,r2,8
  805ab8:	14c00017 	ldw	r19,0(r2)
  805abc:	15800117 	ldw	r22,4(r2)
  805ac0:	20040f16 	blt	r4,zero,806b00 <___vfprintf_internal_r+0x1b48>
  805ac4:	013fdfc4 	movi	r4,-129
  805ac8:	9d84b03a 	or	r2,r19,r22
  805acc:	d8c02d15 	stw	r3,180(sp)
  805ad0:	9124703a 	and	r18,r18,r4
  805ad4:	0039883a 	mov	fp,zero
  805ad8:	103e891e 	bne	r2,zero,805500 <__alt_mem_onchip_mem+0xff785500>
  805adc:	d9002917 	ldw	r4,164(sp)
  805ae0:	2002c11e 	bne	r4,zero,8065e8 <___vfprintf_internal_r+0x1630>
  805ae4:	d8002915 	stw	zero,164(sp)
  805ae8:	d8002e15 	stw	zero,184(sp)
  805aec:	dc001e04 	addi	r16,sp,120
  805af0:	003ef806 	br	8056d4 <__alt_mem_onchip_mem+0xff7856d4>
  805af4:	18c03fcc 	andi	r3,r3,255
  805af8:	18059d1e 	bne	r3,zero,807170 <___vfprintf_internal_r+0x21b8>
  805afc:	01402074 	movhi	r5,129
  805b00:	2953b104 	addi	r5,r5,20164
  805b04:	d9403915 	stw	r5,228(sp)
  805b08:	9080080c 	andi	r2,r18,32
  805b0c:	10005226 	beq	r2,zero,805c58 <___vfprintf_internal_r+0xca0>
  805b10:	d8802d17 	ldw	r2,180(sp)
  805b14:	14c00017 	ldw	r19,0(r2)
  805b18:	15800117 	ldw	r22,4(r2)
  805b1c:	10800204 	addi	r2,r2,8
  805b20:	d8802d15 	stw	r2,180(sp)
  805b24:	9080004c 	andi	r2,r18,1
  805b28:	10019026 	beq	r2,zero,80616c <___vfprintf_internal_r+0x11b4>
  805b2c:	9d84b03a 	or	r2,r19,r22
  805b30:	10036926 	beq	r2,zero,8068d8 <___vfprintf_internal_r+0x1920>
  805b34:	d8c02917 	ldw	r3,164(sp)
  805b38:	00800c04 	movi	r2,48
  805b3c:	d8802705 	stb	r2,156(sp)
  805b40:	dc402745 	stb	r17,157(sp)
  805b44:	d8002785 	stb	zero,158(sp)
  805b48:	90800094 	ori	r2,r18,2
  805b4c:	18045d16 	blt	r3,zero,806cc4 <___vfprintf_internal_r+0x1d0c>
  805b50:	00bfdfc4 	movi	r2,-129
  805b54:	90a4703a 	and	r18,r18,r2
  805b58:	94800094 	ori	r18,r18,2
  805b5c:	0039883a 	mov	fp,zero
  805b60:	d9003917 	ldw	r4,228(sp)
  805b64:	dc001e04 	addi	r16,sp,120
  805b68:	988003cc 	andi	r2,r19,15
  805b6c:	b006973a 	slli	r3,r22,28
  805b70:	2085883a 	add	r2,r4,r2
  805b74:	9826d13a 	srli	r19,r19,4
  805b78:	10800003 	ldbu	r2,0(r2)
  805b7c:	b02cd13a 	srli	r22,r22,4
  805b80:	843fffc4 	addi	r16,r16,-1
  805b84:	1ce6b03a 	or	r19,r3,r19
  805b88:	80800005 	stb	r2,0(r16)
  805b8c:	9d84b03a 	or	r2,r19,r22
  805b90:	103ff51e 	bne	r2,zero,805b68 <__alt_mem_onchip_mem+0xff785b68>
  805b94:	d8c02817 	ldw	r3,160(sp)
  805b98:	1c07c83a 	sub	r3,r3,r16
  805b9c:	d8c02e15 	stw	r3,184(sp)
  805ba0:	003ecc06 	br	8056d4 <__alt_mem_onchip_mem+0xff7856d4>
  805ba4:	18c03fcc 	andi	r3,r3,255
  805ba8:	183e9f26 	beq	r3,zero,805628 <__alt_mem_onchip_mem+0xff785628>
  805bac:	d9c02785 	stb	r7,158(sp)
  805bb0:	003e9d06 	br	805628 <__alt_mem_onchip_mem+0xff785628>
  805bb4:	00c00044 	movi	r3,1
  805bb8:	01c00ac4 	movi	r7,43
  805bbc:	ac400007 	ldb	r17,0(r21)
  805bc0:	003d5e06 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805bc4:	94800814 	ori	r18,r18,32
  805bc8:	ac400007 	ldb	r17,0(r21)
  805bcc:	003d5b06 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805bd0:	d8c02d17 	ldw	r3,180(sp)
  805bd4:	d8002785 	stb	zero,158(sp)
  805bd8:	1c000017 	ldw	r16,0(r3)
  805bdc:	1cc00104 	addi	r19,r3,4
  805be0:	80041926 	beq	r16,zero,806c48 <___vfprintf_internal_r+0x1c90>
  805be4:	d9002917 	ldw	r4,164(sp)
  805be8:	2003d016 	blt	r4,zero,806b2c <___vfprintf_internal_r+0x1b74>
  805bec:	200d883a 	mov	r6,r4
  805bf0:	000b883a 	mov	r5,zero
  805bf4:	8009883a 	mov	r4,r16
  805bf8:	da003d15 	stw	r8,244(sp)
  805bfc:	080a0140 	call	80a014 <memchr>
  805c00:	da003d17 	ldw	r8,244(sp)
  805c04:	10045426 	beq	r2,zero,806d58 <___vfprintf_internal_r+0x1da0>
  805c08:	1405c83a 	sub	r2,r2,r16
  805c0c:	d8802e15 	stw	r2,184(sp)
  805c10:	1003cc16 	blt	r2,zero,806b44 <___vfprintf_internal_r+0x1b8c>
  805c14:	df002783 	ldbu	fp,158(sp)
  805c18:	d8802a15 	stw	r2,168(sp)
  805c1c:	dcc02d15 	stw	r19,180(sp)
  805c20:	d8002915 	stw	zero,164(sp)
  805c24:	d8003215 	stw	zero,200(sp)
  805c28:	003eb006 	br	8056ec <__alt_mem_onchip_mem+0xff7856ec>
  805c2c:	18c03fcc 	andi	r3,r3,255
  805c30:	183f9b26 	beq	r3,zero,805aa0 <__alt_mem_onchip_mem+0xff785aa0>
  805c34:	d9c02785 	stb	r7,158(sp)
  805c38:	003f9906 	br	805aa0 <__alt_mem_onchip_mem+0xff785aa0>
  805c3c:	18c03fcc 	andi	r3,r3,255
  805c40:	1805551e 	bne	r3,zero,807198 <___vfprintf_internal_r+0x21e0>
  805c44:	01402074 	movhi	r5,129
  805c48:	2953b604 	addi	r5,r5,20184
  805c4c:	d9403915 	stw	r5,228(sp)
  805c50:	9080080c 	andi	r2,r18,32
  805c54:	103fae1e 	bne	r2,zero,805b10 <__alt_mem_onchip_mem+0xff785b10>
  805c58:	9080040c 	andi	r2,r18,16
  805c5c:	1002de26 	beq	r2,zero,8067d8 <___vfprintf_internal_r+0x1820>
  805c60:	d8c02d17 	ldw	r3,180(sp)
  805c64:	002d883a 	mov	r22,zero
  805c68:	1cc00017 	ldw	r19,0(r3)
  805c6c:	18c00104 	addi	r3,r3,4
  805c70:	d8c02d15 	stw	r3,180(sp)
  805c74:	003fab06 	br	805b24 <__alt_mem_onchip_mem+0xff785b24>
  805c78:	38803fcc 	andi	r2,r7,255
  805c7c:	1080201c 	xori	r2,r2,128
  805c80:	10bfe004 	addi	r2,r2,-128
  805c84:	1002d21e 	bne	r2,zero,8067d0 <___vfprintf_internal_r+0x1818>
  805c88:	00c00044 	movi	r3,1
  805c8c:	01c00804 	movi	r7,32
  805c90:	ac400007 	ldb	r17,0(r21)
  805c94:	003d2906 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805c98:	94800054 	ori	r18,r18,1
  805c9c:	ac400007 	ldb	r17,0(r21)
  805ca0:	003d2606 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805ca4:	18c03fcc 	andi	r3,r3,255
  805ca8:	183e0526 	beq	r3,zero,8054c0 <__alt_mem_onchip_mem+0xff7854c0>
  805cac:	d9c02785 	stb	r7,158(sp)
  805cb0:	003e0306 	br	8054c0 <__alt_mem_onchip_mem+0xff7854c0>
  805cb4:	94801014 	ori	r18,r18,64
  805cb8:	ac400007 	ldb	r17,0(r21)
  805cbc:	003d1f06 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805cc0:	ac400007 	ldb	r17,0(r21)
  805cc4:	8a438726 	beq	r17,r9,806ae4 <___vfprintf_internal_r+0x1b2c>
  805cc8:	94800414 	ori	r18,r18,16
  805ccc:	003d1b06 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  805cd0:	18c03fcc 	andi	r3,r3,255
  805cd4:	1805341e 	bne	r3,zero,8071a8 <___vfprintf_internal_r+0x21f0>
  805cd8:	9080080c 	andi	r2,r18,32
  805cdc:	1002cd26 	beq	r2,zero,806814 <___vfprintf_internal_r+0x185c>
  805ce0:	d9402d17 	ldw	r5,180(sp)
  805ce4:	d9002f17 	ldw	r4,188(sp)
  805ce8:	28800017 	ldw	r2,0(r5)
  805cec:	2007d7fa 	srai	r3,r4,31
  805cf0:	29400104 	addi	r5,r5,4
  805cf4:	d9402d15 	stw	r5,180(sp)
  805cf8:	11000015 	stw	r4,0(r2)
  805cfc:	10c00115 	stw	r3,4(r2)
  805d00:	003ce506 	br	805098 <__alt_mem_onchip_mem+0xff785098>
  805d04:	d8c02d17 	ldw	r3,180(sp)
  805d08:	d9002d17 	ldw	r4,180(sp)
  805d0c:	d8002785 	stb	zero,158(sp)
  805d10:	18800017 	ldw	r2,0(r3)
  805d14:	21000104 	addi	r4,r4,4
  805d18:	00c00044 	movi	r3,1
  805d1c:	d8c02a15 	stw	r3,168(sp)
  805d20:	d8801405 	stb	r2,80(sp)
  805d24:	d9002d15 	stw	r4,180(sp)
  805d28:	d8c02e15 	stw	r3,184(sp)
  805d2c:	d8002915 	stw	zero,164(sp)
  805d30:	d8003215 	stw	zero,200(sp)
  805d34:	dc001404 	addi	r16,sp,80
  805d38:	0039883a 	mov	fp,zero
  805d3c:	003e7206 	br	805708 <__alt_mem_onchip_mem+0xff785708>
  805d40:	01002074 	movhi	r4,129
  805d44:	2113b604 	addi	r4,r4,20184
  805d48:	0039883a 	mov	fp,zero
  805d4c:	d9003915 	stw	r4,228(sp)
  805d50:	04401e04 	movi	r17,120
  805d54:	003f8206 	br	805b60 <__alt_mem_onchip_mem+0xff785b60>
  805d58:	18c03fcc 	andi	r3,r3,255
  805d5c:	1805061e 	bne	r3,zero,807178 <___vfprintf_internal_r+0x21c0>
  805d60:	883d9126 	beq	r17,zero,8053a8 <__alt_mem_onchip_mem+0xff7853a8>
  805d64:	00c00044 	movi	r3,1
  805d68:	d8c02a15 	stw	r3,168(sp)
  805d6c:	dc401405 	stb	r17,80(sp)
  805d70:	d8002785 	stb	zero,158(sp)
  805d74:	003fec06 	br	805d28 <__alt_mem_onchip_mem+0xff785d28>
  805d78:	01402074 	movhi	r5,129
  805d7c:	2953b604 	addi	r5,r5,20184
  805d80:	d9403915 	stw	r5,228(sp)
  805d84:	d8c02d15 	stw	r3,180(sp)
  805d88:	1025883a 	mov	r18,r2
  805d8c:	04401e04 	movi	r17,120
  805d90:	9d84b03a 	or	r2,r19,r22
  805d94:	1000fc1e 	bne	r2,zero,806188 <___vfprintf_internal_r+0x11d0>
  805d98:	0039883a 	mov	fp,zero
  805d9c:	00800084 	movi	r2,2
  805da0:	10803fcc 	andi	r2,r2,255
  805da4:	00c00044 	movi	r3,1
  805da8:	10c20f26 	beq	r2,r3,8065e8 <___vfprintf_internal_r+0x1630>
  805dac:	00c00084 	movi	r3,2
  805db0:	10fd6326 	beq	r2,r3,805340 <__alt_mem_onchip_mem+0xff785340>
  805db4:	003e2d06 	br	80566c <__alt_mem_onchip_mem+0xff78566c>
  805db8:	d8c02017 	ldw	r3,128(sp)
  805dbc:	003e9306 	br	80580c <__alt_mem_onchip_mem+0xff78580c>
  805dc0:	00801944 	movi	r2,101
  805dc4:	14407e0e 	bge	r2,r17,805fc0 <___vfprintf_internal_r+0x1008>
  805dc8:	d9003617 	ldw	r4,216(sp)
  805dcc:	d9403817 	ldw	r5,224(sp)
  805dd0:	000d883a 	mov	r6,zero
  805dd4:	000f883a 	mov	r7,zero
  805dd8:	d8c03c15 	stw	r3,240(sp)
  805ddc:	da003d15 	stw	r8,244(sp)
  805de0:	080f5fc0 	call	80f5fc <__eqdf2>
  805de4:	d8c03c17 	ldw	r3,240(sp)
  805de8:	da003d17 	ldw	r8,244(sp)
  805dec:	1000f71e 	bne	r2,zero,8061cc <___vfprintf_internal_r+0x1214>
  805df0:	d8801f17 	ldw	r2,124(sp)
  805df4:	01002074 	movhi	r4,129
  805df8:	2113bd04 	addi	r4,r4,20212
  805dfc:	18c00044 	addi	r3,r3,1
  805e00:	10800044 	addi	r2,r2,1
  805e04:	41000015 	stw	r4,0(r8)
  805e08:	01000044 	movi	r4,1
  805e0c:	41000115 	stw	r4,4(r8)
  805e10:	d8c02015 	stw	r3,128(sp)
  805e14:	d8801f15 	stw	r2,124(sp)
  805e18:	010001c4 	movi	r4,7
  805e1c:	2082b816 	blt	r4,r2,806900 <___vfprintf_internal_r+0x1948>
  805e20:	42000204 	addi	r8,r8,8
  805e24:	d8802617 	ldw	r2,152(sp)
  805e28:	d9403317 	ldw	r5,204(sp)
  805e2c:	11400216 	blt	r2,r5,805e38 <___vfprintf_internal_r+0xe80>
  805e30:	9080004c 	andi	r2,r18,1
  805e34:	103ed526 	beq	r2,zero,80598c <__alt_mem_onchip_mem+0xff78598c>
  805e38:	d8803717 	ldw	r2,220(sp)
  805e3c:	d9003417 	ldw	r4,208(sp)
  805e40:	d9403717 	ldw	r5,220(sp)
  805e44:	1887883a 	add	r3,r3,r2
  805e48:	d8801f17 	ldw	r2,124(sp)
  805e4c:	41000015 	stw	r4,0(r8)
  805e50:	41400115 	stw	r5,4(r8)
  805e54:	10800044 	addi	r2,r2,1
  805e58:	d8c02015 	stw	r3,128(sp)
  805e5c:	d8801f15 	stw	r2,124(sp)
  805e60:	010001c4 	movi	r4,7
  805e64:	20832916 	blt	r4,r2,806b0c <___vfprintf_internal_r+0x1b54>
  805e68:	42000204 	addi	r8,r8,8
  805e6c:	d8803317 	ldw	r2,204(sp)
  805e70:	143fffc4 	addi	r16,r2,-1
  805e74:	043ec50e 	bge	zero,r16,80598c <__alt_mem_onchip_mem+0xff78598c>
  805e78:	04400404 	movi	r17,16
  805e7c:	d8801f17 	ldw	r2,124(sp)
  805e80:	8c00880e 	bge	r17,r16,8060a4 <___vfprintf_internal_r+0x10ec>
  805e84:	01402074 	movhi	r5,129
  805e88:	2953bd84 	addi	r5,r5,20214
  805e8c:	d9402b15 	stw	r5,172(sp)
  805e90:	058001c4 	movi	r22,7
  805e94:	dcc02c17 	ldw	r19,176(sp)
  805e98:	00000306 	br	805ea8 <___vfprintf_internal_r+0xef0>
  805e9c:	42000204 	addi	r8,r8,8
  805ea0:	843ffc04 	addi	r16,r16,-16
  805ea4:	8c00820e 	bge	r17,r16,8060b0 <___vfprintf_internal_r+0x10f8>
  805ea8:	18c00404 	addi	r3,r3,16
  805eac:	10800044 	addi	r2,r2,1
  805eb0:	45000015 	stw	r20,0(r8)
  805eb4:	44400115 	stw	r17,4(r8)
  805eb8:	d8c02015 	stw	r3,128(sp)
  805ebc:	d8801f15 	stw	r2,124(sp)
  805ec0:	b0bff60e 	bge	r22,r2,805e9c <__alt_mem_onchip_mem+0xff785e9c>
  805ec4:	d9801e04 	addi	r6,sp,120
  805ec8:	b80b883a 	mov	r5,r23
  805ecc:	9809883a 	mov	r4,r19
  805ed0:	080bba80 	call	80bba8 <__sprint_r>
  805ed4:	103d3a1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  805ed8:	d8c02017 	ldw	r3,128(sp)
  805edc:	d8801f17 	ldw	r2,124(sp)
  805ee0:	da000404 	addi	r8,sp,16
  805ee4:	003fee06 	br	805ea0 <__alt_mem_onchip_mem+0xff785ea0>
  805ee8:	d9403117 	ldw	r5,196(sp)
  805eec:	d8802a17 	ldw	r2,168(sp)
  805ef0:	28adc83a 	sub	r22,r5,r2
  805ef4:	05be630e 	bge	zero,r22,805884 <__alt_mem_onchip_mem+0xff785884>
  805ef8:	07000404 	movi	fp,16
  805efc:	d8801f17 	ldw	r2,124(sp)
  805f00:	e5838f0e 	bge	fp,r22,806d40 <___vfprintf_internal_r+0x1d88>
  805f04:	01402074 	movhi	r5,129
  805f08:	2953bd84 	addi	r5,r5,20214
  805f0c:	dc403015 	stw	r17,192(sp)
  805f10:	d9402b15 	stw	r5,172(sp)
  805f14:	b023883a 	mov	r17,r22
  805f18:	04c001c4 	movi	r19,7
  805f1c:	a82d883a 	mov	r22,r21
  805f20:	902b883a 	mov	r21,r18
  805f24:	8025883a 	mov	r18,r16
  805f28:	dc002c17 	ldw	r16,176(sp)
  805f2c:	00000306 	br	805f3c <___vfprintf_internal_r+0xf84>
  805f30:	8c7ffc04 	addi	r17,r17,-16
  805f34:	42000204 	addi	r8,r8,8
  805f38:	e440110e 	bge	fp,r17,805f80 <___vfprintf_internal_r+0xfc8>
  805f3c:	18c00404 	addi	r3,r3,16
  805f40:	10800044 	addi	r2,r2,1
  805f44:	45000015 	stw	r20,0(r8)
  805f48:	47000115 	stw	fp,4(r8)
  805f4c:	d8c02015 	stw	r3,128(sp)
  805f50:	d8801f15 	stw	r2,124(sp)
  805f54:	98bff60e 	bge	r19,r2,805f30 <__alt_mem_onchip_mem+0xff785f30>
  805f58:	d9801e04 	addi	r6,sp,120
  805f5c:	b80b883a 	mov	r5,r23
  805f60:	8009883a 	mov	r4,r16
  805f64:	080bba80 	call	80bba8 <__sprint_r>
  805f68:	103d151e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  805f6c:	8c7ffc04 	addi	r17,r17,-16
  805f70:	d8c02017 	ldw	r3,128(sp)
  805f74:	d8801f17 	ldw	r2,124(sp)
  805f78:	da000404 	addi	r8,sp,16
  805f7c:	e47fef16 	blt	fp,r17,805f3c <__alt_mem_onchip_mem+0xff785f3c>
  805f80:	9021883a 	mov	r16,r18
  805f84:	a825883a 	mov	r18,r21
  805f88:	b02b883a 	mov	r21,r22
  805f8c:	882d883a 	mov	r22,r17
  805f90:	dc403017 	ldw	r17,192(sp)
  805f94:	d9002b17 	ldw	r4,172(sp)
  805f98:	1d87883a 	add	r3,r3,r22
  805f9c:	10800044 	addi	r2,r2,1
  805fa0:	41000015 	stw	r4,0(r8)
  805fa4:	45800115 	stw	r22,4(r8)
  805fa8:	d8c02015 	stw	r3,128(sp)
  805fac:	d8801f15 	stw	r2,124(sp)
  805fb0:	010001c4 	movi	r4,7
  805fb4:	20818e16 	blt	r4,r2,8065f0 <___vfprintf_internal_r+0x1638>
  805fb8:	42000204 	addi	r8,r8,8
  805fbc:	003e3106 	br	805884 <__alt_mem_onchip_mem+0xff785884>
  805fc0:	d9403317 	ldw	r5,204(sp)
  805fc4:	00800044 	movi	r2,1
  805fc8:	18c00044 	addi	r3,r3,1
  805fcc:	1141530e 	bge	r2,r5,80651c <___vfprintf_internal_r+0x1564>
  805fd0:	dc401f17 	ldw	r17,124(sp)
  805fd4:	00800044 	movi	r2,1
  805fd8:	40800115 	stw	r2,4(r8)
  805fdc:	8c400044 	addi	r17,r17,1
  805fe0:	44000015 	stw	r16,0(r8)
  805fe4:	d8c02015 	stw	r3,128(sp)
  805fe8:	dc401f15 	stw	r17,124(sp)
  805fec:	008001c4 	movi	r2,7
  805ff0:	14416b16 	blt	r2,r17,8065a0 <___vfprintf_internal_r+0x15e8>
  805ff4:	42000204 	addi	r8,r8,8
  805ff8:	d8803717 	ldw	r2,220(sp)
  805ffc:	d9003417 	ldw	r4,208(sp)
  806000:	8c400044 	addi	r17,r17,1
  806004:	10c7883a 	add	r3,r2,r3
  806008:	40800115 	stw	r2,4(r8)
  80600c:	41000015 	stw	r4,0(r8)
  806010:	d8c02015 	stw	r3,128(sp)
  806014:	dc401f15 	stw	r17,124(sp)
  806018:	008001c4 	movi	r2,7
  80601c:	14416916 	blt	r2,r17,8065c4 <___vfprintf_internal_r+0x160c>
  806020:	45800204 	addi	r22,r8,8
  806024:	d9003617 	ldw	r4,216(sp)
  806028:	d9403817 	ldw	r5,224(sp)
  80602c:	000d883a 	mov	r6,zero
  806030:	000f883a 	mov	r7,zero
  806034:	d8c03c15 	stw	r3,240(sp)
  806038:	080f5fc0 	call	80f5fc <__eqdf2>
  80603c:	d8c03c17 	ldw	r3,240(sp)
  806040:	1000bc26 	beq	r2,zero,806334 <___vfprintf_internal_r+0x137c>
  806044:	d9403317 	ldw	r5,204(sp)
  806048:	84000044 	addi	r16,r16,1
  80604c:	8c400044 	addi	r17,r17,1
  806050:	28bfffc4 	addi	r2,r5,-1
  806054:	1887883a 	add	r3,r3,r2
  806058:	b0800115 	stw	r2,4(r22)
  80605c:	b4000015 	stw	r16,0(r22)
  806060:	d8c02015 	stw	r3,128(sp)
  806064:	dc401f15 	stw	r17,124(sp)
  806068:	008001c4 	movi	r2,7
  80606c:	14414316 	blt	r2,r17,80657c <___vfprintf_internal_r+0x15c4>
  806070:	b5800204 	addi	r22,r22,8
  806074:	d9003a17 	ldw	r4,232(sp)
  806078:	df0022c4 	addi	fp,sp,139
  80607c:	8c400044 	addi	r17,r17,1
  806080:	20c7883a 	add	r3,r4,r3
  806084:	b7000015 	stw	fp,0(r22)
  806088:	b1000115 	stw	r4,4(r22)
  80608c:	d8c02015 	stw	r3,128(sp)
  806090:	dc401f15 	stw	r17,124(sp)
  806094:	008001c4 	movi	r2,7
  806098:	14400e16 	blt	r2,r17,8060d4 <___vfprintf_internal_r+0x111c>
  80609c:	b2000204 	addi	r8,r22,8
  8060a0:	003e3a06 	br	80598c <__alt_mem_onchip_mem+0xff78598c>
  8060a4:	01002074 	movhi	r4,129
  8060a8:	2113bd84 	addi	r4,r4,20214
  8060ac:	d9002b15 	stw	r4,172(sp)
  8060b0:	d9002b17 	ldw	r4,172(sp)
  8060b4:	1c07883a 	add	r3,r3,r16
  8060b8:	44000115 	stw	r16,4(r8)
  8060bc:	41000015 	stw	r4,0(r8)
  8060c0:	10800044 	addi	r2,r2,1
  8060c4:	d8c02015 	stw	r3,128(sp)
  8060c8:	d8801f15 	stw	r2,124(sp)
  8060cc:	010001c4 	movi	r4,7
  8060d0:	20be2d0e 	bge	r4,r2,805988 <__alt_mem_onchip_mem+0xff785988>
  8060d4:	d9002c17 	ldw	r4,176(sp)
  8060d8:	d9801e04 	addi	r6,sp,120
  8060dc:	b80b883a 	mov	r5,r23
  8060e0:	080bba80 	call	80bba8 <__sprint_r>
  8060e4:	103cb61e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8060e8:	d8c02017 	ldw	r3,128(sp)
  8060ec:	da000404 	addi	r8,sp,16
  8060f0:	003e2606 	br	80598c <__alt_mem_onchip_mem+0xff78598c>
  8060f4:	d9002c17 	ldw	r4,176(sp)
  8060f8:	d9801e04 	addi	r6,sp,120
  8060fc:	b80b883a 	mov	r5,r23
  806100:	080bba80 	call	80bba8 <__sprint_r>
  806104:	103e5d26 	beq	r2,zero,805a7c <__alt_mem_onchip_mem+0xff785a7c>
  806108:	003cad06 	br	8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  80610c:	d9002c17 	ldw	r4,176(sp)
  806110:	d9801e04 	addi	r6,sp,120
  806114:	b80b883a 	mov	r5,r23
  806118:	080bba80 	call	80bba8 <__sprint_r>
  80611c:	103ca81e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806120:	d8c02017 	ldw	r3,128(sp)
  806124:	da000404 	addi	r8,sp,16
  806128:	003e0b06 	br	805958 <__alt_mem_onchip_mem+0xff785958>
  80612c:	d9002c17 	ldw	r4,176(sp)
  806130:	d9801e04 	addi	r6,sp,120
  806134:	b80b883a 	mov	r5,r23
  806138:	080bba80 	call	80bba8 <__sprint_r>
  80613c:	103ca01e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806140:	d8c02017 	ldw	r3,128(sp)
  806144:	da000404 	addi	r8,sp,16
  806148:	003dbd06 	br	805840 <__alt_mem_onchip_mem+0xff785840>
  80614c:	d9002c17 	ldw	r4,176(sp)
  806150:	d9801e04 	addi	r6,sp,120
  806154:	b80b883a 	mov	r5,r23
  806158:	080bba80 	call	80bba8 <__sprint_r>
  80615c:	103c981e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806160:	d8c02017 	ldw	r3,128(sp)
  806164:	da000404 	addi	r8,sp,16
  806168:	003dc306 	br	805878 <__alt_mem_onchip_mem+0xff785878>
  80616c:	d8802917 	ldw	r2,164(sp)
  806170:	d8002785 	stb	zero,158(sp)
  806174:	103f0616 	blt	r2,zero,805d90 <__alt_mem_onchip_mem+0xff785d90>
  806178:	00ffdfc4 	movi	r3,-129
  80617c:	9d84b03a 	or	r2,r19,r22
  806180:	90e4703a 	and	r18,r18,r3
  806184:	103c6b26 	beq	r2,zero,805334 <__alt_mem_onchip_mem+0xff785334>
  806188:	0039883a 	mov	fp,zero
  80618c:	003e7406 	br	805b60 <__alt_mem_onchip_mem+0xff785b60>
  806190:	9080040c 	andi	r2,r18,16
  806194:	1001b326 	beq	r2,zero,806864 <___vfprintf_internal_r+0x18ac>
  806198:	d9002d17 	ldw	r4,180(sp)
  80619c:	d9402917 	ldw	r5,164(sp)
  8061a0:	d8002785 	stb	zero,158(sp)
  8061a4:	20800104 	addi	r2,r4,4
  8061a8:	24c00017 	ldw	r19,0(r4)
  8061ac:	002d883a 	mov	r22,zero
  8061b0:	2801b516 	blt	r5,zero,806888 <___vfprintf_internal_r+0x18d0>
  8061b4:	00ffdfc4 	movi	r3,-129
  8061b8:	d8802d15 	stw	r2,180(sp)
  8061bc:	90e4703a 	and	r18,r18,r3
  8061c0:	983d2726 	beq	r19,zero,805660 <__alt_mem_onchip_mem+0xff785660>
  8061c4:	0039883a 	mov	fp,zero
  8061c8:	003d2a06 	br	805674 <__alt_mem_onchip_mem+0xff785674>
  8061cc:	dc402617 	ldw	r17,152(sp)
  8061d0:	0441d30e 	bge	zero,r17,806920 <___vfprintf_internal_r+0x1968>
  8061d4:	dc403217 	ldw	r17,200(sp)
  8061d8:	d8803317 	ldw	r2,204(sp)
  8061dc:	1440010e 	bge	r2,r17,8061e4 <___vfprintf_internal_r+0x122c>
  8061e0:	1023883a 	mov	r17,r2
  8061e4:	04400a0e 	bge	zero,r17,806210 <___vfprintf_internal_r+0x1258>
  8061e8:	d8801f17 	ldw	r2,124(sp)
  8061ec:	1c47883a 	add	r3,r3,r17
  8061f0:	44000015 	stw	r16,0(r8)
  8061f4:	10800044 	addi	r2,r2,1
  8061f8:	44400115 	stw	r17,4(r8)
  8061fc:	d8c02015 	stw	r3,128(sp)
  806200:	d8801f15 	stw	r2,124(sp)
  806204:	010001c4 	movi	r4,7
  806208:	20826516 	blt	r4,r2,806ba0 <___vfprintf_internal_r+0x1be8>
  80620c:	42000204 	addi	r8,r8,8
  806210:	88026116 	blt	r17,zero,806b98 <___vfprintf_internal_r+0x1be0>
  806214:	d9003217 	ldw	r4,200(sp)
  806218:	2463c83a 	sub	r17,r4,r17
  80621c:	04407b0e 	bge	zero,r17,80640c <___vfprintf_internal_r+0x1454>
  806220:	05800404 	movi	r22,16
  806224:	d8801f17 	ldw	r2,124(sp)
  806228:	b4419d0e 	bge	r22,r17,8068a0 <___vfprintf_internal_r+0x18e8>
  80622c:	01002074 	movhi	r4,129
  806230:	2113bd84 	addi	r4,r4,20214
  806234:	d9002b15 	stw	r4,172(sp)
  806238:	070001c4 	movi	fp,7
  80623c:	dcc02c17 	ldw	r19,176(sp)
  806240:	00000306 	br	806250 <___vfprintf_internal_r+0x1298>
  806244:	42000204 	addi	r8,r8,8
  806248:	8c7ffc04 	addi	r17,r17,-16
  80624c:	b441970e 	bge	r22,r17,8068ac <___vfprintf_internal_r+0x18f4>
  806250:	18c00404 	addi	r3,r3,16
  806254:	10800044 	addi	r2,r2,1
  806258:	45000015 	stw	r20,0(r8)
  80625c:	45800115 	stw	r22,4(r8)
  806260:	d8c02015 	stw	r3,128(sp)
  806264:	d8801f15 	stw	r2,124(sp)
  806268:	e0bff60e 	bge	fp,r2,806244 <__alt_mem_onchip_mem+0xff786244>
  80626c:	d9801e04 	addi	r6,sp,120
  806270:	b80b883a 	mov	r5,r23
  806274:	9809883a 	mov	r4,r19
  806278:	080bba80 	call	80bba8 <__sprint_r>
  80627c:	103c501e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806280:	d8c02017 	ldw	r3,128(sp)
  806284:	d8801f17 	ldw	r2,124(sp)
  806288:	da000404 	addi	r8,sp,16
  80628c:	003fee06 	br	806248 <__alt_mem_onchip_mem+0xff786248>
  806290:	d9002c17 	ldw	r4,176(sp)
  806294:	d9801e04 	addi	r6,sp,120
  806298:	b80b883a 	mov	r5,r23
  80629c:	080bba80 	call	80bba8 <__sprint_r>
  8062a0:	103c471e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8062a4:	d8c02017 	ldw	r3,128(sp)
  8062a8:	df002787 	ldb	fp,158(sp)
  8062ac:	da000404 	addi	r8,sp,16
  8062b0:	003d5606 	br	80580c <__alt_mem_onchip_mem+0xff78580c>
  8062b4:	9080040c 	andi	r2,r18,16
  8062b8:	10016126 	beq	r2,zero,806840 <___vfprintf_internal_r+0x1888>
  8062bc:	d8802d17 	ldw	r2,180(sp)
  8062c0:	14c00017 	ldw	r19,0(r2)
  8062c4:	10800104 	addi	r2,r2,4
  8062c8:	d8802d15 	stw	r2,180(sp)
  8062cc:	982dd7fa 	srai	r22,r19,31
  8062d0:	b005883a 	mov	r2,r22
  8062d4:	003c8206 	br	8054e0 <__alt_mem_onchip_mem+0xff7854e0>
  8062d8:	9080040c 	andi	r2,r18,16
  8062dc:	10003526 	beq	r2,zero,8063b4 <___vfprintf_internal_r+0x13fc>
  8062e0:	d9402d17 	ldw	r5,180(sp)
  8062e4:	d8c02917 	ldw	r3,164(sp)
  8062e8:	d8002785 	stb	zero,158(sp)
  8062ec:	28800104 	addi	r2,r5,4
  8062f0:	2cc00017 	ldw	r19,0(r5)
  8062f4:	002d883a 	mov	r22,zero
  8062f8:	18003716 	blt	r3,zero,8063d8 <___vfprintf_internal_r+0x1420>
  8062fc:	00ffdfc4 	movi	r3,-129
  806300:	d8802d15 	stw	r2,180(sp)
  806304:	90e4703a 	and	r18,r18,r3
  806308:	0039883a 	mov	fp,zero
  80630c:	983df326 	beq	r19,zero,805adc <__alt_mem_onchip_mem+0xff785adc>
  806310:	00800244 	movi	r2,9
  806314:	14fc7b36 	bltu	r2,r19,805504 <__alt_mem_onchip_mem+0xff785504>
  806318:	d8c02817 	ldw	r3,160(sp)
  80631c:	dc001dc4 	addi	r16,sp,119
  806320:	9cc00c04 	addi	r19,r19,48
  806324:	1c07c83a 	sub	r3,r3,r16
  806328:	dcc01dc5 	stb	r19,119(sp)
  80632c:	d8c02e15 	stw	r3,184(sp)
  806330:	003ce806 	br	8056d4 <__alt_mem_onchip_mem+0xff7856d4>
  806334:	d8803317 	ldw	r2,204(sp)
  806338:	143fffc4 	addi	r16,r2,-1
  80633c:	043f4d0e 	bge	zero,r16,806074 <__alt_mem_onchip_mem+0xff786074>
  806340:	07000404 	movi	fp,16
  806344:	e400810e 	bge	fp,r16,80654c <___vfprintf_internal_r+0x1594>
  806348:	01402074 	movhi	r5,129
  80634c:	2953bd84 	addi	r5,r5,20214
  806350:	d9402b15 	stw	r5,172(sp)
  806354:	01c001c4 	movi	r7,7
  806358:	dcc02c17 	ldw	r19,176(sp)
  80635c:	00000306 	br	80636c <___vfprintf_internal_r+0x13b4>
  806360:	b5800204 	addi	r22,r22,8
  806364:	843ffc04 	addi	r16,r16,-16
  806368:	e4007b0e 	bge	fp,r16,806558 <___vfprintf_internal_r+0x15a0>
  80636c:	18c00404 	addi	r3,r3,16
  806370:	8c400044 	addi	r17,r17,1
  806374:	b5000015 	stw	r20,0(r22)
  806378:	b7000115 	stw	fp,4(r22)
  80637c:	d8c02015 	stw	r3,128(sp)
  806380:	dc401f15 	stw	r17,124(sp)
  806384:	3c7ff60e 	bge	r7,r17,806360 <__alt_mem_onchip_mem+0xff786360>
  806388:	d9801e04 	addi	r6,sp,120
  80638c:	b80b883a 	mov	r5,r23
  806390:	9809883a 	mov	r4,r19
  806394:	d9c03c15 	stw	r7,240(sp)
  806398:	080bba80 	call	80bba8 <__sprint_r>
  80639c:	d9c03c17 	ldw	r7,240(sp)
  8063a0:	103c071e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8063a4:	d8c02017 	ldw	r3,128(sp)
  8063a8:	dc401f17 	ldw	r17,124(sp)
  8063ac:	dd800404 	addi	r22,sp,16
  8063b0:	003fec06 	br	806364 <__alt_mem_onchip_mem+0xff786364>
  8063b4:	9080100c 	andi	r2,r18,64
  8063b8:	d8002785 	stb	zero,158(sp)
  8063bc:	10010e26 	beq	r2,zero,8067f8 <___vfprintf_internal_r+0x1840>
  8063c0:	d9002d17 	ldw	r4,180(sp)
  8063c4:	d9402917 	ldw	r5,164(sp)
  8063c8:	002d883a 	mov	r22,zero
  8063cc:	20800104 	addi	r2,r4,4
  8063d0:	24c0000b 	ldhu	r19,0(r4)
  8063d4:	283fc90e 	bge	r5,zero,8062fc <__alt_mem_onchip_mem+0xff7862fc>
  8063d8:	d8802d15 	stw	r2,180(sp)
  8063dc:	0039883a 	mov	fp,zero
  8063e0:	9d84b03a 	or	r2,r19,r22
  8063e4:	103c461e 	bne	r2,zero,805500 <__alt_mem_onchip_mem+0xff785500>
  8063e8:	00800044 	movi	r2,1
  8063ec:	003e6c06 	br	805da0 <__alt_mem_onchip_mem+0xff785da0>
  8063f0:	d9002c17 	ldw	r4,176(sp)
  8063f4:	d9801e04 	addi	r6,sp,120
  8063f8:	b80b883a 	mov	r5,r23
  8063fc:	080bba80 	call	80bba8 <__sprint_r>
  806400:	103bef1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806404:	d8c02017 	ldw	r3,128(sp)
  806408:	da000404 	addi	r8,sp,16
  80640c:	d9003217 	ldw	r4,200(sp)
  806410:	d8802617 	ldw	r2,152(sp)
  806414:	d9403317 	ldw	r5,204(sp)
  806418:	8123883a 	add	r17,r16,r4
  80641c:	11400216 	blt	r2,r5,806428 <___vfprintf_internal_r+0x1470>
  806420:	9100004c 	andi	r4,r18,1
  806424:	20000d26 	beq	r4,zero,80645c <___vfprintf_internal_r+0x14a4>
  806428:	d9003717 	ldw	r4,220(sp)
  80642c:	d9403417 	ldw	r5,208(sp)
  806430:	1907883a 	add	r3,r3,r4
  806434:	d9001f17 	ldw	r4,124(sp)
  806438:	41400015 	stw	r5,0(r8)
  80643c:	d9403717 	ldw	r5,220(sp)
  806440:	21000044 	addi	r4,r4,1
  806444:	d8c02015 	stw	r3,128(sp)
  806448:	41400115 	stw	r5,4(r8)
  80644c:	d9001f15 	stw	r4,124(sp)
  806450:	014001c4 	movi	r5,7
  806454:	2901e816 	blt	r5,r4,806bf8 <___vfprintf_internal_r+0x1c40>
  806458:	42000204 	addi	r8,r8,8
  80645c:	d9003317 	ldw	r4,204(sp)
  806460:	8121883a 	add	r16,r16,r4
  806464:	2085c83a 	sub	r2,r4,r2
  806468:	8461c83a 	sub	r16,r16,r17
  80646c:	1400010e 	bge	r2,r16,806474 <___vfprintf_internal_r+0x14bc>
  806470:	1021883a 	mov	r16,r2
  806474:	04000a0e 	bge	zero,r16,8064a0 <___vfprintf_internal_r+0x14e8>
  806478:	d9001f17 	ldw	r4,124(sp)
  80647c:	1c07883a 	add	r3,r3,r16
  806480:	44400015 	stw	r17,0(r8)
  806484:	21000044 	addi	r4,r4,1
  806488:	44000115 	stw	r16,4(r8)
  80648c:	d8c02015 	stw	r3,128(sp)
  806490:	d9001f15 	stw	r4,124(sp)
  806494:	014001c4 	movi	r5,7
  806498:	2901fb16 	blt	r5,r4,806c88 <___vfprintf_internal_r+0x1cd0>
  80649c:	42000204 	addi	r8,r8,8
  8064a0:	8001f716 	blt	r16,zero,806c80 <___vfprintf_internal_r+0x1cc8>
  8064a4:	1421c83a 	sub	r16,r2,r16
  8064a8:	043d380e 	bge	zero,r16,80598c <__alt_mem_onchip_mem+0xff78598c>
  8064ac:	04400404 	movi	r17,16
  8064b0:	d8801f17 	ldw	r2,124(sp)
  8064b4:	8c3efb0e 	bge	r17,r16,8060a4 <__alt_mem_onchip_mem+0xff7860a4>
  8064b8:	01402074 	movhi	r5,129
  8064bc:	2953bd84 	addi	r5,r5,20214
  8064c0:	d9402b15 	stw	r5,172(sp)
  8064c4:	058001c4 	movi	r22,7
  8064c8:	dcc02c17 	ldw	r19,176(sp)
  8064cc:	00000306 	br	8064dc <___vfprintf_internal_r+0x1524>
  8064d0:	42000204 	addi	r8,r8,8
  8064d4:	843ffc04 	addi	r16,r16,-16
  8064d8:	8c3ef50e 	bge	r17,r16,8060b0 <__alt_mem_onchip_mem+0xff7860b0>
  8064dc:	18c00404 	addi	r3,r3,16
  8064e0:	10800044 	addi	r2,r2,1
  8064e4:	45000015 	stw	r20,0(r8)
  8064e8:	44400115 	stw	r17,4(r8)
  8064ec:	d8c02015 	stw	r3,128(sp)
  8064f0:	d8801f15 	stw	r2,124(sp)
  8064f4:	b0bff60e 	bge	r22,r2,8064d0 <__alt_mem_onchip_mem+0xff7864d0>
  8064f8:	d9801e04 	addi	r6,sp,120
  8064fc:	b80b883a 	mov	r5,r23
  806500:	9809883a 	mov	r4,r19
  806504:	080bba80 	call	80bba8 <__sprint_r>
  806508:	103bad1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  80650c:	d8c02017 	ldw	r3,128(sp)
  806510:	d8801f17 	ldw	r2,124(sp)
  806514:	da000404 	addi	r8,sp,16
  806518:	003fee06 	br	8064d4 <__alt_mem_onchip_mem+0xff7864d4>
  80651c:	9088703a 	and	r4,r18,r2
  806520:	203eab1e 	bne	r4,zero,805fd0 <__alt_mem_onchip_mem+0xff785fd0>
  806524:	dc401f17 	ldw	r17,124(sp)
  806528:	40800115 	stw	r2,4(r8)
  80652c:	44000015 	stw	r16,0(r8)
  806530:	8c400044 	addi	r17,r17,1
  806534:	d8c02015 	stw	r3,128(sp)
  806538:	dc401f15 	stw	r17,124(sp)
  80653c:	008001c4 	movi	r2,7
  806540:	14400e16 	blt	r2,r17,80657c <___vfprintf_internal_r+0x15c4>
  806544:	45800204 	addi	r22,r8,8
  806548:	003eca06 	br	806074 <__alt_mem_onchip_mem+0xff786074>
  80654c:	01002074 	movhi	r4,129
  806550:	2113bd84 	addi	r4,r4,20214
  806554:	d9002b15 	stw	r4,172(sp)
  806558:	d8802b17 	ldw	r2,172(sp)
  80655c:	1c07883a 	add	r3,r3,r16
  806560:	8c400044 	addi	r17,r17,1
  806564:	b0800015 	stw	r2,0(r22)
  806568:	b4000115 	stw	r16,4(r22)
  80656c:	d8c02015 	stw	r3,128(sp)
  806570:	dc401f15 	stw	r17,124(sp)
  806574:	008001c4 	movi	r2,7
  806578:	147ebd0e 	bge	r2,r17,806070 <__alt_mem_onchip_mem+0xff786070>
  80657c:	d9002c17 	ldw	r4,176(sp)
  806580:	d9801e04 	addi	r6,sp,120
  806584:	b80b883a 	mov	r5,r23
  806588:	080bba80 	call	80bba8 <__sprint_r>
  80658c:	103b8c1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806590:	d8c02017 	ldw	r3,128(sp)
  806594:	dc401f17 	ldw	r17,124(sp)
  806598:	dd800404 	addi	r22,sp,16
  80659c:	003eb506 	br	806074 <__alt_mem_onchip_mem+0xff786074>
  8065a0:	d9002c17 	ldw	r4,176(sp)
  8065a4:	d9801e04 	addi	r6,sp,120
  8065a8:	b80b883a 	mov	r5,r23
  8065ac:	080bba80 	call	80bba8 <__sprint_r>
  8065b0:	103b831e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8065b4:	d8c02017 	ldw	r3,128(sp)
  8065b8:	dc401f17 	ldw	r17,124(sp)
  8065bc:	da000404 	addi	r8,sp,16
  8065c0:	003e8d06 	br	805ff8 <__alt_mem_onchip_mem+0xff785ff8>
  8065c4:	d9002c17 	ldw	r4,176(sp)
  8065c8:	d9801e04 	addi	r6,sp,120
  8065cc:	b80b883a 	mov	r5,r23
  8065d0:	080bba80 	call	80bba8 <__sprint_r>
  8065d4:	103b7a1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8065d8:	d8c02017 	ldw	r3,128(sp)
  8065dc:	dc401f17 	ldw	r17,124(sp)
  8065e0:	dd800404 	addi	r22,sp,16
  8065e4:	003e8f06 	br	806024 <__alt_mem_onchip_mem+0xff786024>
  8065e8:	0027883a 	mov	r19,zero
  8065ec:	003f4a06 	br	806318 <__alt_mem_onchip_mem+0xff786318>
  8065f0:	d9002c17 	ldw	r4,176(sp)
  8065f4:	d9801e04 	addi	r6,sp,120
  8065f8:	b80b883a 	mov	r5,r23
  8065fc:	080bba80 	call	80bba8 <__sprint_r>
  806600:	103b6f1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806604:	d8c02017 	ldw	r3,128(sp)
  806608:	da000404 	addi	r8,sp,16
  80660c:	003c9d06 	br	805884 <__alt_mem_onchip_mem+0xff785884>
  806610:	04e7c83a 	sub	r19,zero,r19
  806614:	9804c03a 	cmpne	r2,r19,zero
  806618:	05adc83a 	sub	r22,zero,r22
  80661c:	b0adc83a 	sub	r22,r22,r2
  806620:	d8802917 	ldw	r2,164(sp)
  806624:	07000b44 	movi	fp,45
  806628:	df002785 	stb	fp,158(sp)
  80662c:	10017b16 	blt	r2,zero,806c1c <___vfprintf_internal_r+0x1c64>
  806630:	00bfdfc4 	movi	r2,-129
  806634:	90a4703a 	and	r18,r18,r2
  806638:	003bb106 	br	805500 <__alt_mem_onchip_mem+0xff785500>
  80663c:	d9003617 	ldw	r4,216(sp)
  806640:	d9403817 	ldw	r5,224(sp)
  806644:	da003d15 	stw	r8,244(sp)
  806648:	080b95c0 	call	80b95c <__fpclassifyd>
  80664c:	da003d17 	ldw	r8,244(sp)
  806650:	1000f026 	beq	r2,zero,806a14 <___vfprintf_internal_r+0x1a5c>
  806654:	d9002917 	ldw	r4,164(sp)
  806658:	05bff7c4 	movi	r22,-33
  80665c:	00bfffc4 	movi	r2,-1
  806660:	8dac703a 	and	r22,r17,r22
  806664:	20820026 	beq	r4,r2,806e68 <___vfprintf_internal_r+0x1eb0>
  806668:	008011c4 	movi	r2,71
  80666c:	b081f726 	beq	r22,r2,806e4c <___vfprintf_internal_r+0x1e94>
  806670:	d9003817 	ldw	r4,224(sp)
  806674:	90c04014 	ori	r3,r18,256
  806678:	d8c02b15 	stw	r3,172(sp)
  80667c:	20021516 	blt	r4,zero,806ed4 <___vfprintf_internal_r+0x1f1c>
  806680:	dcc03817 	ldw	r19,224(sp)
  806684:	d8002a05 	stb	zero,168(sp)
  806688:	00801984 	movi	r2,102
  80668c:	8881f926 	beq	r17,r2,806e74 <___vfprintf_internal_r+0x1ebc>
  806690:	00801184 	movi	r2,70
  806694:	88821c26 	beq	r17,r2,806f08 <___vfprintf_internal_r+0x1f50>
  806698:	00801144 	movi	r2,69
  80669c:	b081ef26 	beq	r22,r2,806e5c <___vfprintf_internal_r+0x1ea4>
  8066a0:	d8c02917 	ldw	r3,164(sp)
  8066a4:	d8802104 	addi	r2,sp,132
  8066a8:	d8800315 	stw	r2,12(sp)
  8066ac:	d9403617 	ldw	r5,216(sp)
  8066b0:	d8802504 	addi	r2,sp,148
  8066b4:	d9002c17 	ldw	r4,176(sp)
  8066b8:	d8800215 	stw	r2,8(sp)
  8066bc:	d8802604 	addi	r2,sp,152
  8066c0:	d8c00015 	stw	r3,0(sp)
  8066c4:	d8800115 	stw	r2,4(sp)
  8066c8:	01c00084 	movi	r7,2
  8066cc:	980d883a 	mov	r6,r19
  8066d0:	d8c03c15 	stw	r3,240(sp)
  8066d4:	da003d15 	stw	r8,244(sp)
  8066d8:	08076900 	call	807690 <_dtoa_r>
  8066dc:	1021883a 	mov	r16,r2
  8066e0:	008019c4 	movi	r2,103
  8066e4:	d8c03c17 	ldw	r3,240(sp)
  8066e8:	da003d17 	ldw	r8,244(sp)
  8066ec:	88817126 	beq	r17,r2,806cb4 <___vfprintf_internal_r+0x1cfc>
  8066f0:	008011c4 	movi	r2,71
  8066f4:	88829226 	beq	r17,r2,807140 <___vfprintf_internal_r+0x2188>
  8066f8:	80f9883a 	add	fp,r16,r3
  8066fc:	d9003617 	ldw	r4,216(sp)
  806700:	000d883a 	mov	r6,zero
  806704:	000f883a 	mov	r7,zero
  806708:	980b883a 	mov	r5,r19
  80670c:	da003d15 	stw	r8,244(sp)
  806710:	080f5fc0 	call	80f5fc <__eqdf2>
  806714:	da003d17 	ldw	r8,244(sp)
  806718:	10018d26 	beq	r2,zero,806d50 <___vfprintf_internal_r+0x1d98>
  80671c:	d8802117 	ldw	r2,132(sp)
  806720:	1700062e 	bgeu	r2,fp,80673c <___vfprintf_internal_r+0x1784>
  806724:	01000c04 	movi	r4,48
  806728:	10c00044 	addi	r3,r2,1
  80672c:	d8c02115 	stw	r3,132(sp)
  806730:	11000005 	stb	r4,0(r2)
  806734:	d8802117 	ldw	r2,132(sp)
  806738:	173ffb36 	bltu	r2,fp,806728 <__alt_mem_onchip_mem+0xff786728>
  80673c:	1405c83a 	sub	r2,r2,r16
  806740:	d8803315 	stw	r2,204(sp)
  806744:	008011c4 	movi	r2,71
  806748:	b0817626 	beq	r22,r2,806d24 <___vfprintf_internal_r+0x1d6c>
  80674c:	00801944 	movi	r2,101
  806750:	1442810e 	bge	r2,r17,807158 <___vfprintf_internal_r+0x21a0>
  806754:	d8c02617 	ldw	r3,152(sp)
  806758:	00801984 	movi	r2,102
  80675c:	d8c03215 	stw	r3,200(sp)
  806760:	8881fe26 	beq	r17,r2,806f5c <___vfprintf_internal_r+0x1fa4>
  806764:	d8c03217 	ldw	r3,200(sp)
  806768:	d9003317 	ldw	r4,204(sp)
  80676c:	1901dd16 	blt	r3,r4,806ee4 <___vfprintf_internal_r+0x1f2c>
  806770:	9480004c 	andi	r18,r18,1
  806774:	90022b1e 	bne	r18,zero,807024 <___vfprintf_internal_r+0x206c>
  806778:	1805883a 	mov	r2,r3
  80677c:	18028016 	blt	r3,zero,807180 <___vfprintf_internal_r+0x21c8>
  806780:	d8c03217 	ldw	r3,200(sp)
  806784:	044019c4 	movi	r17,103
  806788:	d8c02e15 	stw	r3,184(sp)
  80678c:	df002a07 	ldb	fp,168(sp)
  806790:	e001531e 	bne	fp,zero,806ce0 <___vfprintf_internal_r+0x1d28>
  806794:	df002783 	ldbu	fp,158(sp)
  806798:	d8802a15 	stw	r2,168(sp)
  80679c:	dc802b17 	ldw	r18,172(sp)
  8067a0:	d8002915 	stw	zero,164(sp)
  8067a4:	003bd106 	br	8056ec <__alt_mem_onchip_mem+0xff7856ec>
  8067a8:	d8802d17 	ldw	r2,180(sp)
  8067ac:	d8c02d17 	ldw	r3,180(sp)
  8067b0:	d9002d17 	ldw	r4,180(sp)
  8067b4:	10800017 	ldw	r2,0(r2)
  8067b8:	18c00117 	ldw	r3,4(r3)
  8067bc:	21000204 	addi	r4,r4,8
  8067c0:	d8803615 	stw	r2,216(sp)
  8067c4:	d8c03815 	stw	r3,224(sp)
  8067c8:	d9002d15 	stw	r4,180(sp)
  8067cc:	003b7506 	br	8055a4 <__alt_mem_onchip_mem+0xff7855a4>
  8067d0:	ac400007 	ldb	r17,0(r21)
  8067d4:	003a5906 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  8067d8:	9080100c 	andi	r2,r18,64
  8067dc:	1000a826 	beq	r2,zero,806a80 <___vfprintf_internal_r+0x1ac8>
  8067e0:	d9002d17 	ldw	r4,180(sp)
  8067e4:	002d883a 	mov	r22,zero
  8067e8:	24c0000b 	ldhu	r19,0(r4)
  8067ec:	21000104 	addi	r4,r4,4
  8067f0:	d9002d15 	stw	r4,180(sp)
  8067f4:	003ccb06 	br	805b24 <__alt_mem_onchip_mem+0xff785b24>
  8067f8:	d8c02d17 	ldw	r3,180(sp)
  8067fc:	d9002917 	ldw	r4,164(sp)
  806800:	002d883a 	mov	r22,zero
  806804:	18800104 	addi	r2,r3,4
  806808:	1cc00017 	ldw	r19,0(r3)
  80680c:	203ebb0e 	bge	r4,zero,8062fc <__alt_mem_onchip_mem+0xff7862fc>
  806810:	003ef106 	br	8063d8 <__alt_mem_onchip_mem+0xff7863d8>
  806814:	9080040c 	andi	r2,r18,16
  806818:	1000921e 	bne	r2,zero,806a64 <___vfprintf_internal_r+0x1aac>
  80681c:	9480100c 	andi	r18,r18,64
  806820:	90013926 	beq	r18,zero,806d08 <___vfprintf_internal_r+0x1d50>
  806824:	d9002d17 	ldw	r4,180(sp)
  806828:	d9402f17 	ldw	r5,188(sp)
  80682c:	20800017 	ldw	r2,0(r4)
  806830:	21000104 	addi	r4,r4,4
  806834:	d9002d15 	stw	r4,180(sp)
  806838:	1140000d 	sth	r5,0(r2)
  80683c:	003a1606 	br	805098 <__alt_mem_onchip_mem+0xff785098>
  806840:	9080100c 	andi	r2,r18,64
  806844:	10008026 	beq	r2,zero,806a48 <___vfprintf_internal_r+0x1a90>
  806848:	d8c02d17 	ldw	r3,180(sp)
  80684c:	1cc0000f 	ldh	r19,0(r3)
  806850:	18c00104 	addi	r3,r3,4
  806854:	d8c02d15 	stw	r3,180(sp)
  806858:	982dd7fa 	srai	r22,r19,31
  80685c:	b005883a 	mov	r2,r22
  806860:	003b1f06 	br	8054e0 <__alt_mem_onchip_mem+0xff7854e0>
  806864:	9080100c 	andi	r2,r18,64
  806868:	d8002785 	stb	zero,158(sp)
  80686c:	10008a1e 	bne	r2,zero,806a98 <___vfprintf_internal_r+0x1ae0>
  806870:	d9402d17 	ldw	r5,180(sp)
  806874:	d8c02917 	ldw	r3,164(sp)
  806878:	002d883a 	mov	r22,zero
  80687c:	28800104 	addi	r2,r5,4
  806880:	2cc00017 	ldw	r19,0(r5)
  806884:	183e4b0e 	bge	r3,zero,8061b4 <__alt_mem_onchip_mem+0xff7861b4>
  806888:	9d86b03a 	or	r3,r19,r22
  80688c:	d8802d15 	stw	r2,180(sp)
  806890:	183e4c1e 	bne	r3,zero,8061c4 <__alt_mem_onchip_mem+0xff7861c4>
  806894:	0039883a 	mov	fp,zero
  806898:	0005883a 	mov	r2,zero
  80689c:	003d4006 	br	805da0 <__alt_mem_onchip_mem+0xff785da0>
  8068a0:	01402074 	movhi	r5,129
  8068a4:	2953bd84 	addi	r5,r5,20214
  8068a8:	d9402b15 	stw	r5,172(sp)
  8068ac:	d9402b17 	ldw	r5,172(sp)
  8068b0:	1c47883a 	add	r3,r3,r17
  8068b4:	10800044 	addi	r2,r2,1
  8068b8:	41400015 	stw	r5,0(r8)
  8068bc:	44400115 	stw	r17,4(r8)
  8068c0:	d8c02015 	stw	r3,128(sp)
  8068c4:	d8801f15 	stw	r2,124(sp)
  8068c8:	010001c4 	movi	r4,7
  8068cc:	20bec816 	blt	r4,r2,8063f0 <__alt_mem_onchip_mem+0xff7863f0>
  8068d0:	42000204 	addi	r8,r8,8
  8068d4:	003ecd06 	br	80640c <__alt_mem_onchip_mem+0xff78640c>
  8068d8:	d9002917 	ldw	r4,164(sp)
  8068dc:	d8002785 	stb	zero,158(sp)
  8068e0:	203d2d16 	blt	r4,zero,805d98 <__alt_mem_onchip_mem+0xff785d98>
  8068e4:	00bfdfc4 	movi	r2,-129
  8068e8:	90a4703a 	and	r18,r18,r2
  8068ec:	003a9106 	br	805334 <__alt_mem_onchip_mem+0xff785334>
  8068f0:	01002074 	movhi	r4,129
  8068f4:	2113bd84 	addi	r4,r4,20214
  8068f8:	d9002b15 	stw	r4,172(sp)
  8068fc:	003c0c06 	br	805930 <__alt_mem_onchip_mem+0xff785930>
  806900:	d9002c17 	ldw	r4,176(sp)
  806904:	d9801e04 	addi	r6,sp,120
  806908:	b80b883a 	mov	r5,r23
  80690c:	080bba80 	call	80bba8 <__sprint_r>
  806910:	103aab1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806914:	d8c02017 	ldw	r3,128(sp)
  806918:	da000404 	addi	r8,sp,16
  80691c:	003d4106 	br	805e24 <__alt_mem_onchip_mem+0xff785e24>
  806920:	d8801f17 	ldw	r2,124(sp)
  806924:	01402074 	movhi	r5,129
  806928:	01000044 	movi	r4,1
  80692c:	18c00044 	addi	r3,r3,1
  806930:	10800044 	addi	r2,r2,1
  806934:	2953bd04 	addi	r5,r5,20212
  806938:	41000115 	stw	r4,4(r8)
  80693c:	41400015 	stw	r5,0(r8)
  806940:	d8c02015 	stw	r3,128(sp)
  806944:	d8801f15 	stw	r2,124(sp)
  806948:	010001c4 	movi	r4,7
  80694c:	20805c16 	blt	r4,r2,806ac0 <___vfprintf_internal_r+0x1b08>
  806950:	42000204 	addi	r8,r8,8
  806954:	8800041e 	bne	r17,zero,806968 <___vfprintf_internal_r+0x19b0>
  806958:	d8803317 	ldw	r2,204(sp)
  80695c:	1000021e 	bne	r2,zero,806968 <___vfprintf_internal_r+0x19b0>
  806960:	9080004c 	andi	r2,r18,1
  806964:	103c0926 	beq	r2,zero,80598c <__alt_mem_onchip_mem+0xff78598c>
  806968:	d9003717 	ldw	r4,220(sp)
  80696c:	d8801f17 	ldw	r2,124(sp)
  806970:	d9403417 	ldw	r5,208(sp)
  806974:	20c7883a 	add	r3,r4,r3
  806978:	10800044 	addi	r2,r2,1
  80697c:	41000115 	stw	r4,4(r8)
  806980:	41400015 	stw	r5,0(r8)
  806984:	d8c02015 	stw	r3,128(sp)
  806988:	d8801f15 	stw	r2,124(sp)
  80698c:	010001c4 	movi	r4,7
  806990:	20812116 	blt	r4,r2,806e18 <___vfprintf_internal_r+0x1e60>
  806994:	42000204 	addi	r8,r8,8
  806998:	0463c83a 	sub	r17,zero,r17
  80699c:	0440730e 	bge	zero,r17,806b6c <___vfprintf_internal_r+0x1bb4>
  8069a0:	05800404 	movi	r22,16
  8069a4:	b440860e 	bge	r22,r17,806bc0 <___vfprintf_internal_r+0x1c08>
  8069a8:	01402074 	movhi	r5,129
  8069ac:	2953bd84 	addi	r5,r5,20214
  8069b0:	d9402b15 	stw	r5,172(sp)
  8069b4:	070001c4 	movi	fp,7
  8069b8:	dcc02c17 	ldw	r19,176(sp)
  8069bc:	00000306 	br	8069cc <___vfprintf_internal_r+0x1a14>
  8069c0:	42000204 	addi	r8,r8,8
  8069c4:	8c7ffc04 	addi	r17,r17,-16
  8069c8:	b440800e 	bge	r22,r17,806bcc <___vfprintf_internal_r+0x1c14>
  8069cc:	18c00404 	addi	r3,r3,16
  8069d0:	10800044 	addi	r2,r2,1
  8069d4:	45000015 	stw	r20,0(r8)
  8069d8:	45800115 	stw	r22,4(r8)
  8069dc:	d8c02015 	stw	r3,128(sp)
  8069e0:	d8801f15 	stw	r2,124(sp)
  8069e4:	e0bff60e 	bge	fp,r2,8069c0 <__alt_mem_onchip_mem+0xff7869c0>
  8069e8:	d9801e04 	addi	r6,sp,120
  8069ec:	b80b883a 	mov	r5,r23
  8069f0:	9809883a 	mov	r4,r19
  8069f4:	080bba80 	call	80bba8 <__sprint_r>
  8069f8:	103a711e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  8069fc:	d8c02017 	ldw	r3,128(sp)
  806a00:	d8801f17 	ldw	r2,124(sp)
  806a04:	da000404 	addi	r8,sp,16
  806a08:	003fee06 	br	8069c4 <__alt_mem_onchip_mem+0xff7869c4>
  806a0c:	00bfffc4 	movi	r2,-1
  806a10:	003a6f06 	br	8053d0 <__alt_mem_onchip_mem+0xff7853d0>
  806a14:	008011c4 	movi	r2,71
  806a18:	1440b816 	blt	r2,r17,806cfc <___vfprintf_internal_r+0x1d44>
  806a1c:	04002074 	movhi	r16,129
  806a20:	8413af04 	addi	r16,r16,20156
  806a24:	00c000c4 	movi	r3,3
  806a28:	00bfdfc4 	movi	r2,-129
  806a2c:	d8c02a15 	stw	r3,168(sp)
  806a30:	90a4703a 	and	r18,r18,r2
  806a34:	df002783 	ldbu	fp,158(sp)
  806a38:	d8c02e15 	stw	r3,184(sp)
  806a3c:	d8002915 	stw	zero,164(sp)
  806a40:	d8003215 	stw	zero,200(sp)
  806a44:	003b2906 	br	8056ec <__alt_mem_onchip_mem+0xff7856ec>
  806a48:	d9002d17 	ldw	r4,180(sp)
  806a4c:	24c00017 	ldw	r19,0(r4)
  806a50:	21000104 	addi	r4,r4,4
  806a54:	d9002d15 	stw	r4,180(sp)
  806a58:	982dd7fa 	srai	r22,r19,31
  806a5c:	b005883a 	mov	r2,r22
  806a60:	003a9f06 	br	8054e0 <__alt_mem_onchip_mem+0xff7854e0>
  806a64:	d9402d17 	ldw	r5,180(sp)
  806a68:	d8c02f17 	ldw	r3,188(sp)
  806a6c:	28800017 	ldw	r2,0(r5)
  806a70:	29400104 	addi	r5,r5,4
  806a74:	d9402d15 	stw	r5,180(sp)
  806a78:	10c00015 	stw	r3,0(r2)
  806a7c:	00398606 	br	805098 <__alt_mem_onchip_mem+0xff785098>
  806a80:	d9402d17 	ldw	r5,180(sp)
  806a84:	002d883a 	mov	r22,zero
  806a88:	2cc00017 	ldw	r19,0(r5)
  806a8c:	29400104 	addi	r5,r5,4
  806a90:	d9402d15 	stw	r5,180(sp)
  806a94:	003c2306 	br	805b24 <__alt_mem_onchip_mem+0xff785b24>
  806a98:	d8c02d17 	ldw	r3,180(sp)
  806a9c:	d9002917 	ldw	r4,164(sp)
  806aa0:	002d883a 	mov	r22,zero
  806aa4:	18800104 	addi	r2,r3,4
  806aa8:	1cc0000b 	ldhu	r19,0(r3)
  806aac:	203dc10e 	bge	r4,zero,8061b4 <__alt_mem_onchip_mem+0xff7861b4>
  806ab0:	003f7506 	br	806888 <__alt_mem_onchip_mem+0xff786888>
  806ab4:	04002074 	movhi	r16,129
  806ab8:	8413ad04 	addi	r16,r16,20148
  806abc:	003acc06 	br	8055f0 <__alt_mem_onchip_mem+0xff7855f0>
  806ac0:	d9002c17 	ldw	r4,176(sp)
  806ac4:	d9801e04 	addi	r6,sp,120
  806ac8:	b80b883a 	mov	r5,r23
  806acc:	080bba80 	call	80bba8 <__sprint_r>
  806ad0:	103a3b1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806ad4:	dc402617 	ldw	r17,152(sp)
  806ad8:	d8c02017 	ldw	r3,128(sp)
  806adc:	da000404 	addi	r8,sp,16
  806ae0:	003f9c06 	br	806954 <__alt_mem_onchip_mem+0xff786954>
  806ae4:	ac400043 	ldbu	r17,1(r21)
  806ae8:	94800814 	ori	r18,r18,32
  806aec:	ad400044 	addi	r21,r21,1
  806af0:	8c403fcc 	andi	r17,r17,255
  806af4:	8c40201c 	xori	r17,r17,128
  806af8:	8c7fe004 	addi	r17,r17,-128
  806afc:	00398f06 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  806b00:	d8c02d15 	stw	r3,180(sp)
  806b04:	0039883a 	mov	fp,zero
  806b08:	003e3506 	br	8063e0 <__alt_mem_onchip_mem+0xff7863e0>
  806b0c:	d9002c17 	ldw	r4,176(sp)
  806b10:	d9801e04 	addi	r6,sp,120
  806b14:	b80b883a 	mov	r5,r23
  806b18:	080bba80 	call	80bba8 <__sprint_r>
  806b1c:	103a281e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806b20:	d8c02017 	ldw	r3,128(sp)
  806b24:	da000404 	addi	r8,sp,16
  806b28:	003cd006 	br	805e6c <__alt_mem_onchip_mem+0xff785e6c>
  806b2c:	8009883a 	mov	r4,r16
  806b30:	da003d15 	stw	r8,244(sp)
  806b34:	0804f200 	call	804f20 <strlen>
  806b38:	d8802e15 	stw	r2,184(sp)
  806b3c:	da003d17 	ldw	r8,244(sp)
  806b40:	103c340e 	bge	r2,zero,805c14 <__alt_mem_onchip_mem+0xff785c14>
  806b44:	0005883a 	mov	r2,zero
  806b48:	003c3206 	br	805c14 <__alt_mem_onchip_mem+0xff785c14>
  806b4c:	d9002c17 	ldw	r4,176(sp)
  806b50:	d9801e04 	addi	r6,sp,120
  806b54:	b80b883a 	mov	r5,r23
  806b58:	080bba80 	call	80bba8 <__sprint_r>
  806b5c:	103a181e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806b60:	d8c02017 	ldw	r3,128(sp)
  806b64:	d8801f17 	ldw	r2,124(sp)
  806b68:	da000404 	addi	r8,sp,16
  806b6c:	d9403317 	ldw	r5,204(sp)
  806b70:	10800044 	addi	r2,r2,1
  806b74:	44000015 	stw	r16,0(r8)
  806b78:	28c7883a 	add	r3,r5,r3
  806b7c:	003b7d06 	br	805974 <__alt_mem_onchip_mem+0xff785974>
  806b80:	01002074 	movhi	r4,129
  806b84:	2113c184 	addi	r4,r4,20230
  806b88:	d9003515 	stw	r4,212(sp)
  806b8c:	003b1406 	br	8057e0 <__alt_mem_onchip_mem+0xff7857e0>
  806b90:	013fffc4 	movi	r4,-1
  806b94:	003a3506 	br	80546c <__alt_mem_onchip_mem+0xff78546c>
  806b98:	0023883a 	mov	r17,zero
  806b9c:	003d9d06 	br	806214 <__alt_mem_onchip_mem+0xff786214>
  806ba0:	d9002c17 	ldw	r4,176(sp)
  806ba4:	d9801e04 	addi	r6,sp,120
  806ba8:	b80b883a 	mov	r5,r23
  806bac:	080bba80 	call	80bba8 <__sprint_r>
  806bb0:	103a031e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806bb4:	d8c02017 	ldw	r3,128(sp)
  806bb8:	da000404 	addi	r8,sp,16
  806bbc:	003d9406 	br	806210 <__alt_mem_onchip_mem+0xff786210>
  806bc0:	01002074 	movhi	r4,129
  806bc4:	2113bd84 	addi	r4,r4,20214
  806bc8:	d9002b15 	stw	r4,172(sp)
  806bcc:	d9002b17 	ldw	r4,172(sp)
  806bd0:	1c47883a 	add	r3,r3,r17
  806bd4:	10800044 	addi	r2,r2,1
  806bd8:	41000015 	stw	r4,0(r8)
  806bdc:	44400115 	stw	r17,4(r8)
  806be0:	d8c02015 	stw	r3,128(sp)
  806be4:	d8801f15 	stw	r2,124(sp)
  806be8:	010001c4 	movi	r4,7
  806bec:	20bfd716 	blt	r4,r2,806b4c <__alt_mem_onchip_mem+0xff786b4c>
  806bf0:	42000204 	addi	r8,r8,8
  806bf4:	003fdd06 	br	806b6c <__alt_mem_onchip_mem+0xff786b6c>
  806bf8:	d9002c17 	ldw	r4,176(sp)
  806bfc:	d9801e04 	addi	r6,sp,120
  806c00:	b80b883a 	mov	r5,r23
  806c04:	080bba80 	call	80bba8 <__sprint_r>
  806c08:	1039ed1e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806c0c:	d8802617 	ldw	r2,152(sp)
  806c10:	d8c02017 	ldw	r3,128(sp)
  806c14:	da000404 	addi	r8,sp,16
  806c18:	003e1006 	br	80645c <__alt_mem_onchip_mem+0xff78645c>
  806c1c:	00800044 	movi	r2,1
  806c20:	10803fcc 	andi	r2,r2,255
  806c24:	00c00044 	movi	r3,1
  806c28:	10fa3526 	beq	r2,r3,805500 <__alt_mem_onchip_mem+0xff785500>
  806c2c:	00c00084 	movi	r3,2
  806c30:	10fbcb26 	beq	r2,r3,805b60 <__alt_mem_onchip_mem+0xff785b60>
  806c34:	003a8f06 	br	805674 <__alt_mem_onchip_mem+0xff785674>
  806c38:	01002074 	movhi	r4,129
  806c3c:	2113c184 	addi	r4,r4,20230
  806c40:	d9003515 	stw	r4,212(sp)
  806c44:	003b7606 	br	805a20 <__alt_mem_onchip_mem+0xff785a20>
  806c48:	d8802917 	ldw	r2,164(sp)
  806c4c:	00c00184 	movi	r3,6
  806c50:	1880012e 	bgeu	r3,r2,806c58 <___vfprintf_internal_r+0x1ca0>
  806c54:	1805883a 	mov	r2,r3
  806c58:	d8802e15 	stw	r2,184(sp)
  806c5c:	1000ef16 	blt	r2,zero,80701c <___vfprintf_internal_r+0x2064>
  806c60:	04002074 	movhi	r16,129
  806c64:	d8802a15 	stw	r2,168(sp)
  806c68:	dcc02d15 	stw	r19,180(sp)
  806c6c:	d8002915 	stw	zero,164(sp)
  806c70:	d8003215 	stw	zero,200(sp)
  806c74:	8413bb04 	addi	r16,r16,20204
  806c78:	0039883a 	mov	fp,zero
  806c7c:	003aa206 	br	805708 <__alt_mem_onchip_mem+0xff785708>
  806c80:	0021883a 	mov	r16,zero
  806c84:	003e0706 	br	8064a4 <__alt_mem_onchip_mem+0xff7864a4>
  806c88:	d9002c17 	ldw	r4,176(sp)
  806c8c:	d9801e04 	addi	r6,sp,120
  806c90:	b80b883a 	mov	r5,r23
  806c94:	080bba80 	call	80bba8 <__sprint_r>
  806c98:	1039c91e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806c9c:	d8802617 	ldw	r2,152(sp)
  806ca0:	d9403317 	ldw	r5,204(sp)
  806ca4:	d8c02017 	ldw	r3,128(sp)
  806ca8:	da000404 	addi	r8,sp,16
  806cac:	2885c83a 	sub	r2,r5,r2
  806cb0:	003dfb06 	br	8064a0 <__alt_mem_onchip_mem+0xff7864a0>
  806cb4:	9080004c 	andi	r2,r18,1
  806cb8:	103e8f1e 	bne	r2,zero,8066f8 <__alt_mem_onchip_mem+0xff7866f8>
  806cbc:	d8802117 	ldw	r2,132(sp)
  806cc0:	003e9e06 	br	80673c <__alt_mem_onchip_mem+0xff78673c>
  806cc4:	1025883a 	mov	r18,r2
  806cc8:	0039883a 	mov	fp,zero
  806ccc:	00800084 	movi	r2,2
  806cd0:	003fd306 	br	806c20 <__alt_mem_onchip_mem+0xff786c20>
  806cd4:	07000b44 	movi	fp,45
  806cd8:	df002785 	stb	fp,158(sp)
  806cdc:	003a4006 	br	8055e0 <__alt_mem_onchip_mem+0xff7855e0>
  806ce0:	00c00b44 	movi	r3,45
  806ce4:	d8c02785 	stb	r3,158(sp)
  806ce8:	d8802a15 	stw	r2,168(sp)
  806cec:	dc802b17 	ldw	r18,172(sp)
  806cf0:	d8002915 	stw	zero,164(sp)
  806cf4:	07000b44 	movi	fp,45
  806cf8:	003a8006 	br	8056fc <__alt_mem_onchip_mem+0xff7856fc>
  806cfc:	04002074 	movhi	r16,129
  806d00:	8413b004 	addi	r16,r16,20160
  806d04:	003f4706 	br	806a24 <__alt_mem_onchip_mem+0xff786a24>
  806d08:	d8c02d17 	ldw	r3,180(sp)
  806d0c:	d9002f17 	ldw	r4,188(sp)
  806d10:	18800017 	ldw	r2,0(r3)
  806d14:	18c00104 	addi	r3,r3,4
  806d18:	d8c02d15 	stw	r3,180(sp)
  806d1c:	11000015 	stw	r4,0(r2)
  806d20:	0038dd06 	br	805098 <__alt_mem_onchip_mem+0xff785098>
  806d24:	dd802617 	ldw	r22,152(sp)
  806d28:	00bfff44 	movi	r2,-3
  806d2c:	b0801c16 	blt	r22,r2,806da0 <___vfprintf_internal_r+0x1de8>
  806d30:	d9402917 	ldw	r5,164(sp)
  806d34:	2d801a16 	blt	r5,r22,806da0 <___vfprintf_internal_r+0x1de8>
  806d38:	dd803215 	stw	r22,200(sp)
  806d3c:	003e8906 	br	806764 <__alt_mem_onchip_mem+0xff786764>
  806d40:	01002074 	movhi	r4,129
  806d44:	2113bd84 	addi	r4,r4,20214
  806d48:	d9002b15 	stw	r4,172(sp)
  806d4c:	003c9106 	br	805f94 <__alt_mem_onchip_mem+0xff785f94>
  806d50:	e005883a 	mov	r2,fp
  806d54:	003e7906 	br	80673c <__alt_mem_onchip_mem+0xff78673c>
  806d58:	d9402917 	ldw	r5,164(sp)
  806d5c:	df002783 	ldbu	fp,158(sp)
  806d60:	dcc02d15 	stw	r19,180(sp)
  806d64:	d9402a15 	stw	r5,168(sp)
  806d68:	d9402e15 	stw	r5,184(sp)
  806d6c:	d8002915 	stw	zero,164(sp)
  806d70:	d8003215 	stw	zero,200(sp)
  806d74:	003a5d06 	br	8056ec <__alt_mem_onchip_mem+0xff7856ec>
  806d78:	9080004c 	andi	r2,r18,1
  806d7c:	0039883a 	mov	fp,zero
  806d80:	10000426 	beq	r2,zero,806d94 <___vfprintf_internal_r+0x1ddc>
  806d84:	00800c04 	movi	r2,48
  806d88:	dc001dc4 	addi	r16,sp,119
  806d8c:	d8801dc5 	stb	r2,119(sp)
  806d90:	003b8006 	br	805b94 <__alt_mem_onchip_mem+0xff785b94>
  806d94:	d8002e15 	stw	zero,184(sp)
  806d98:	dc001e04 	addi	r16,sp,120
  806d9c:	003a4d06 	br	8056d4 <__alt_mem_onchip_mem+0xff7856d4>
  806da0:	8c7fff84 	addi	r17,r17,-2
  806da4:	b5bfffc4 	addi	r22,r22,-1
  806da8:	dd802615 	stw	r22,152(sp)
  806dac:	dc4022c5 	stb	r17,139(sp)
  806db0:	b000bf16 	blt	r22,zero,8070b0 <___vfprintf_internal_r+0x20f8>
  806db4:	00800ac4 	movi	r2,43
  806db8:	d8802305 	stb	r2,140(sp)
  806dbc:	00800244 	movi	r2,9
  806dc0:	15807016 	blt	r2,r22,806f84 <___vfprintf_internal_r+0x1fcc>
  806dc4:	00800c04 	movi	r2,48
  806dc8:	b5800c04 	addi	r22,r22,48
  806dcc:	d8802345 	stb	r2,141(sp)
  806dd0:	dd802385 	stb	r22,142(sp)
  806dd4:	d88023c4 	addi	r2,sp,143
  806dd8:	df0022c4 	addi	fp,sp,139
  806ddc:	d8c03317 	ldw	r3,204(sp)
  806de0:	1739c83a 	sub	fp,r2,fp
  806de4:	d9003317 	ldw	r4,204(sp)
  806de8:	e0c7883a 	add	r3,fp,r3
  806dec:	df003a15 	stw	fp,232(sp)
  806df0:	d8c02e15 	stw	r3,184(sp)
  806df4:	00800044 	movi	r2,1
  806df8:	1100b30e 	bge	r2,r4,8070c8 <___vfprintf_internal_r+0x2110>
  806dfc:	d8c02e17 	ldw	r3,184(sp)
  806e00:	18c00044 	addi	r3,r3,1
  806e04:	d8c02e15 	stw	r3,184(sp)
  806e08:	1805883a 	mov	r2,r3
  806e0c:	1800ac16 	blt	r3,zero,8070c0 <___vfprintf_internal_r+0x2108>
  806e10:	d8003215 	stw	zero,200(sp)
  806e14:	003e5d06 	br	80678c <__alt_mem_onchip_mem+0xff78678c>
  806e18:	d9002c17 	ldw	r4,176(sp)
  806e1c:	d9801e04 	addi	r6,sp,120
  806e20:	b80b883a 	mov	r5,r23
  806e24:	080bba80 	call	80bba8 <__sprint_r>
  806e28:	1039651e 	bne	r2,zero,8053c0 <__alt_mem_onchip_mem+0xff7853c0>
  806e2c:	dc402617 	ldw	r17,152(sp)
  806e30:	d8c02017 	ldw	r3,128(sp)
  806e34:	d8801f17 	ldw	r2,124(sp)
  806e38:	da000404 	addi	r8,sp,16
  806e3c:	003ed606 	br	806998 <__alt_mem_onchip_mem+0xff786998>
  806e40:	582b883a 	mov	r21,r11
  806e44:	d8002915 	stw	zero,164(sp)
  806e48:	0038bd06 	br	805140 <__alt_mem_onchip_mem+0xff785140>
  806e4c:	d8802917 	ldw	r2,164(sp)
  806e50:	103e071e 	bne	r2,zero,806670 <__alt_mem_onchip_mem+0xff786670>
  806e54:	dc002915 	stw	r16,164(sp)
  806e58:	003e0506 	br	806670 <__alt_mem_onchip_mem+0xff786670>
  806e5c:	d9002917 	ldw	r4,164(sp)
  806e60:	20c00044 	addi	r3,r4,1
  806e64:	003e0f06 	br	8066a4 <__alt_mem_onchip_mem+0xff7866a4>
  806e68:	01400184 	movi	r5,6
  806e6c:	d9402915 	stw	r5,164(sp)
  806e70:	003dff06 	br	806670 <__alt_mem_onchip_mem+0xff786670>
  806e74:	d8802104 	addi	r2,sp,132
  806e78:	d8800315 	stw	r2,12(sp)
  806e7c:	d8802504 	addi	r2,sp,148
  806e80:	d8800215 	stw	r2,8(sp)
  806e84:	d8802604 	addi	r2,sp,152
  806e88:	d8800115 	stw	r2,4(sp)
  806e8c:	d8802917 	ldw	r2,164(sp)
  806e90:	d9403617 	ldw	r5,216(sp)
  806e94:	d9002c17 	ldw	r4,176(sp)
  806e98:	d8800015 	stw	r2,0(sp)
  806e9c:	01c000c4 	movi	r7,3
  806ea0:	980d883a 	mov	r6,r19
  806ea4:	da003d15 	stw	r8,244(sp)
  806ea8:	08076900 	call	807690 <_dtoa_r>
  806eac:	d8c02917 	ldw	r3,164(sp)
  806eb0:	da003d17 	ldw	r8,244(sp)
  806eb4:	1021883a 	mov	r16,r2
  806eb8:	10f9883a 	add	fp,r2,r3
  806ebc:	81000007 	ldb	r4,0(r16)
  806ec0:	00800c04 	movi	r2,48
  806ec4:	20805e26 	beq	r4,r2,807040 <___vfprintf_internal_r+0x2088>
  806ec8:	d8c02617 	ldw	r3,152(sp)
  806ecc:	e0f9883a 	add	fp,fp,r3
  806ed0:	003e0a06 	br	8066fc <__alt_mem_onchip_mem+0xff7866fc>
  806ed4:	00c00b44 	movi	r3,45
  806ed8:	24e0003c 	xorhi	r19,r4,32768
  806edc:	d8c02a05 	stb	r3,168(sp)
  806ee0:	003de906 	br	806688 <__alt_mem_onchip_mem+0xff786688>
  806ee4:	d8c03217 	ldw	r3,200(sp)
  806ee8:	00c07a0e 	bge	zero,r3,8070d4 <___vfprintf_internal_r+0x211c>
  806eec:	00800044 	movi	r2,1
  806ef0:	d9003317 	ldw	r4,204(sp)
  806ef4:	1105883a 	add	r2,r2,r4
  806ef8:	d8802e15 	stw	r2,184(sp)
  806efc:	10004e16 	blt	r2,zero,807038 <___vfprintf_internal_r+0x2080>
  806f00:	044019c4 	movi	r17,103
  806f04:	003e2106 	br	80678c <__alt_mem_onchip_mem+0xff78678c>
  806f08:	d9002917 	ldw	r4,164(sp)
  806f0c:	d8802104 	addi	r2,sp,132
  806f10:	d8800315 	stw	r2,12(sp)
  806f14:	d9000015 	stw	r4,0(sp)
  806f18:	d8802504 	addi	r2,sp,148
  806f1c:	d9403617 	ldw	r5,216(sp)
  806f20:	d9002c17 	ldw	r4,176(sp)
  806f24:	d8800215 	stw	r2,8(sp)
  806f28:	d8802604 	addi	r2,sp,152
  806f2c:	d8800115 	stw	r2,4(sp)
  806f30:	01c000c4 	movi	r7,3
  806f34:	980d883a 	mov	r6,r19
  806f38:	da003d15 	stw	r8,244(sp)
  806f3c:	08076900 	call	807690 <_dtoa_r>
  806f40:	d8c02917 	ldw	r3,164(sp)
  806f44:	da003d17 	ldw	r8,244(sp)
  806f48:	1021883a 	mov	r16,r2
  806f4c:	00801184 	movi	r2,70
  806f50:	80f9883a 	add	fp,r16,r3
  806f54:	88bfd926 	beq	r17,r2,806ebc <__alt_mem_onchip_mem+0xff786ebc>
  806f58:	003de806 	br	8066fc <__alt_mem_onchip_mem+0xff7866fc>
  806f5c:	d9002917 	ldw	r4,164(sp)
  806f60:	00c04d0e 	bge	zero,r3,807098 <___vfprintf_internal_r+0x20e0>
  806f64:	2000441e 	bne	r4,zero,807078 <___vfprintf_internal_r+0x20c0>
  806f68:	9480004c 	andi	r18,r18,1
  806f6c:	9000421e 	bne	r18,zero,807078 <___vfprintf_internal_r+0x20c0>
  806f70:	1805883a 	mov	r2,r3
  806f74:	18007016 	blt	r3,zero,807138 <___vfprintf_internal_r+0x2180>
  806f78:	d8c03217 	ldw	r3,200(sp)
  806f7c:	d8c02e15 	stw	r3,184(sp)
  806f80:	003e0206 	br	80678c <__alt_mem_onchip_mem+0xff78678c>
  806f84:	df0022c4 	addi	fp,sp,139
  806f88:	dc002915 	stw	r16,164(sp)
  806f8c:	4027883a 	mov	r19,r8
  806f90:	e021883a 	mov	r16,fp
  806f94:	b009883a 	mov	r4,r22
  806f98:	01400284 	movi	r5,10
  806f9c:	080e3380 	call	80e338 <__modsi3>
  806fa0:	10800c04 	addi	r2,r2,48
  806fa4:	843fffc4 	addi	r16,r16,-1
  806fa8:	b009883a 	mov	r4,r22
  806fac:	01400284 	movi	r5,10
  806fb0:	80800005 	stb	r2,0(r16)
  806fb4:	080e2b40 	call	80e2b4 <__divsi3>
  806fb8:	102d883a 	mov	r22,r2
  806fbc:	00800244 	movi	r2,9
  806fc0:	15bff416 	blt	r2,r22,806f94 <__alt_mem_onchip_mem+0xff786f94>
  806fc4:	9811883a 	mov	r8,r19
  806fc8:	b0800c04 	addi	r2,r22,48
  806fcc:	8027883a 	mov	r19,r16
  806fd0:	997fffc4 	addi	r5,r19,-1
  806fd4:	98bfffc5 	stb	r2,-1(r19)
  806fd8:	dc002917 	ldw	r16,164(sp)
  806fdc:	2f006a2e 	bgeu	r5,fp,807188 <___vfprintf_internal_r+0x21d0>
  806fe0:	d9c02384 	addi	r7,sp,142
  806fe4:	3ccfc83a 	sub	r7,r7,r19
  806fe8:	d9002344 	addi	r4,sp,141
  806fec:	e1cf883a 	add	r7,fp,r7
  806ff0:	00000106 	br	806ff8 <___vfprintf_internal_r+0x2040>
  806ff4:	28800003 	ldbu	r2,0(r5)
  806ff8:	20800005 	stb	r2,0(r4)
  806ffc:	21000044 	addi	r4,r4,1
  807000:	29400044 	addi	r5,r5,1
  807004:	393ffb1e 	bne	r7,r4,806ff4 <__alt_mem_onchip_mem+0xff786ff4>
  807008:	d8802304 	addi	r2,sp,140
  80700c:	14c5c83a 	sub	r2,r2,r19
  807010:	d8c02344 	addi	r3,sp,141
  807014:	1885883a 	add	r2,r3,r2
  807018:	003f7006 	br	806ddc <__alt_mem_onchip_mem+0xff786ddc>
  80701c:	0005883a 	mov	r2,zero
  807020:	003f0f06 	br	806c60 <__alt_mem_onchip_mem+0xff786c60>
  807024:	d8c03217 	ldw	r3,200(sp)
  807028:	18c00044 	addi	r3,r3,1
  80702c:	d8c02e15 	stw	r3,184(sp)
  807030:	1805883a 	mov	r2,r3
  807034:	183fb20e 	bge	r3,zero,806f00 <__alt_mem_onchip_mem+0xff786f00>
  807038:	0005883a 	mov	r2,zero
  80703c:	003fb006 	br	806f00 <__alt_mem_onchip_mem+0xff786f00>
  807040:	d9003617 	ldw	r4,216(sp)
  807044:	000d883a 	mov	r6,zero
  807048:	000f883a 	mov	r7,zero
  80704c:	980b883a 	mov	r5,r19
  807050:	d8c03c15 	stw	r3,240(sp)
  807054:	da003d15 	stw	r8,244(sp)
  807058:	080f5fc0 	call	80f5fc <__eqdf2>
  80705c:	d8c03c17 	ldw	r3,240(sp)
  807060:	da003d17 	ldw	r8,244(sp)
  807064:	103f9826 	beq	r2,zero,806ec8 <__alt_mem_onchip_mem+0xff786ec8>
  807068:	00800044 	movi	r2,1
  80706c:	10c7c83a 	sub	r3,r2,r3
  807070:	d8c02615 	stw	r3,152(sp)
  807074:	003f9506 	br	806ecc <__alt_mem_onchip_mem+0xff786ecc>
  807078:	d9002917 	ldw	r4,164(sp)
  80707c:	d8c03217 	ldw	r3,200(sp)
  807080:	20800044 	addi	r2,r4,1
  807084:	1885883a 	add	r2,r3,r2
  807088:	d8802e15 	stw	r2,184(sp)
  80708c:	103dbf0e 	bge	r2,zero,80678c <__alt_mem_onchip_mem+0xff78678c>
  807090:	0005883a 	mov	r2,zero
  807094:	003dbd06 	br	80678c <__alt_mem_onchip_mem+0xff78678c>
  807098:	2000211e 	bne	r4,zero,807120 <___vfprintf_internal_r+0x2168>
  80709c:	9480004c 	andi	r18,r18,1
  8070a0:	90001f1e 	bne	r18,zero,807120 <___vfprintf_internal_r+0x2168>
  8070a4:	00800044 	movi	r2,1
  8070a8:	d8802e15 	stw	r2,184(sp)
  8070ac:	003db706 	br	80678c <__alt_mem_onchip_mem+0xff78678c>
  8070b0:	00800b44 	movi	r2,45
  8070b4:	05adc83a 	sub	r22,zero,r22
  8070b8:	d8802305 	stb	r2,140(sp)
  8070bc:	003f3f06 	br	806dbc <__alt_mem_onchip_mem+0xff786dbc>
  8070c0:	0005883a 	mov	r2,zero
  8070c4:	003f5206 	br	806e10 <__alt_mem_onchip_mem+0xff786e10>
  8070c8:	90a4703a 	and	r18,r18,r2
  8070cc:	903f4e26 	beq	r18,zero,806e08 <__alt_mem_onchip_mem+0xff786e08>
  8070d0:	003f4a06 	br	806dfc <__alt_mem_onchip_mem+0xff786dfc>
  8070d4:	00800084 	movi	r2,2
  8070d8:	10c5c83a 	sub	r2,r2,r3
  8070dc:	003f8406 	br	806ef0 <__alt_mem_onchip_mem+0xff786ef0>
  8070e0:	d8802d17 	ldw	r2,180(sp)
  8070e4:	d9002d17 	ldw	r4,180(sp)
  8070e8:	ac400043 	ldbu	r17,1(r21)
  8070ec:	10800017 	ldw	r2,0(r2)
  8070f0:	582b883a 	mov	r21,r11
  8070f4:	d8802915 	stw	r2,164(sp)
  8070f8:	20800104 	addi	r2,r4,4
  8070fc:	d9002917 	ldw	r4,164(sp)
  807100:	d8802d15 	stw	r2,180(sp)
  807104:	203e7a0e 	bge	r4,zero,806af0 <__alt_mem_onchip_mem+0xff786af0>
  807108:	8c403fcc 	andi	r17,r17,255
  80710c:	00bfffc4 	movi	r2,-1
  807110:	8c40201c 	xori	r17,r17,128
  807114:	d8802915 	stw	r2,164(sp)
  807118:	8c7fe004 	addi	r17,r17,-128
  80711c:	00380706 	br	80513c <__alt_mem_onchip_mem+0xff78513c>
  807120:	d8c02917 	ldw	r3,164(sp)
  807124:	18c00084 	addi	r3,r3,2
  807128:	d8c02e15 	stw	r3,184(sp)
  80712c:	1805883a 	mov	r2,r3
  807130:	183d960e 	bge	r3,zero,80678c <__alt_mem_onchip_mem+0xff78678c>
  807134:	003fd606 	br	807090 <__alt_mem_onchip_mem+0xff787090>
  807138:	0005883a 	mov	r2,zero
  80713c:	003f8e06 	br	806f78 <__alt_mem_onchip_mem+0xff786f78>
  807140:	9080004c 	andi	r2,r18,1
  807144:	103f811e 	bne	r2,zero,806f4c <__alt_mem_onchip_mem+0xff786f4c>
  807148:	d8802117 	ldw	r2,132(sp)
  80714c:	1405c83a 	sub	r2,r2,r16
  807150:	d8803315 	stw	r2,204(sp)
  807154:	b47ef326 	beq	r22,r17,806d24 <__alt_mem_onchip_mem+0xff786d24>
  807158:	dd802617 	ldw	r22,152(sp)
  80715c:	003f1106 	br	806da4 <__alt_mem_onchip_mem+0xff786da4>
  807160:	d9c02785 	stb	r7,158(sp)
  807164:	00390406 	br	805578 <__alt_mem_onchip_mem+0xff785578>
  807168:	d9c02785 	stb	r7,158(sp)
  80716c:	0038d306 	br	8054bc <__alt_mem_onchip_mem+0xff7854bc>
  807170:	d9c02785 	stb	r7,158(sp)
  807174:	003a6106 	br	805afc <__alt_mem_onchip_mem+0xff785afc>
  807178:	d9c02785 	stb	r7,158(sp)
  80717c:	003af806 	br	805d60 <__alt_mem_onchip_mem+0xff785d60>
  807180:	0005883a 	mov	r2,zero
  807184:	003d7e06 	br	806780 <__alt_mem_onchip_mem+0xff786780>
  807188:	d8802344 	addi	r2,sp,141
  80718c:	003f1306 	br	806ddc <__alt_mem_onchip_mem+0xff786ddc>
  807190:	d9c02785 	stb	r7,158(sp)
  807194:	00392306 	br	805624 <__alt_mem_onchip_mem+0xff785624>
  807198:	d9c02785 	stb	r7,158(sp)
  80719c:	003aa906 	br	805c44 <__alt_mem_onchip_mem+0xff785c44>
  8071a0:	d9c02785 	stb	r7,158(sp)
  8071a4:	003a3d06 	br	805a9c <__alt_mem_onchip_mem+0xff785a9c>
  8071a8:	d9c02785 	stb	r7,158(sp)
  8071ac:	003aca06 	br	805cd8 <__alt_mem_onchip_mem+0xff785cd8>

008071b0 <__vfprintf_internal>:
  8071b0:	00802074 	movhi	r2,129
  8071b4:	109c3a04 	addi	r2,r2,28904
  8071b8:	300f883a 	mov	r7,r6
  8071bc:	280d883a 	mov	r6,r5
  8071c0:	200b883a 	mov	r5,r4
  8071c4:	11000017 	ldw	r4,0(r2)
  8071c8:	0804fb81 	jmpi	804fb8 <___vfprintf_internal_r>

008071cc <__sbprintf>:
  8071cc:	2880030b 	ldhu	r2,12(r5)
  8071d0:	2ac01917 	ldw	r11,100(r5)
  8071d4:	2a80038b 	ldhu	r10,14(r5)
  8071d8:	2a400717 	ldw	r9,28(r5)
  8071dc:	2a000917 	ldw	r8,36(r5)
  8071e0:	defee204 	addi	sp,sp,-1144
  8071e4:	00c10004 	movi	r3,1024
  8071e8:	dc011a15 	stw	r16,1128(sp)
  8071ec:	10bfff4c 	andi	r2,r2,65533
  8071f0:	2821883a 	mov	r16,r5
  8071f4:	d8cb883a 	add	r5,sp,r3
  8071f8:	dc811c15 	stw	r18,1136(sp)
  8071fc:	dc411b15 	stw	r17,1132(sp)
  807200:	dfc11d15 	stw	ra,1140(sp)
  807204:	2025883a 	mov	r18,r4
  807208:	d881030d 	sth	r2,1036(sp)
  80720c:	dac11915 	stw	r11,1124(sp)
  807210:	da81038d 	sth	r10,1038(sp)
  807214:	da410715 	stw	r9,1052(sp)
  807218:	da010915 	stw	r8,1060(sp)
  80721c:	dec10015 	stw	sp,1024(sp)
  807220:	dec10415 	stw	sp,1040(sp)
  807224:	d8c10215 	stw	r3,1032(sp)
  807228:	d8c10515 	stw	r3,1044(sp)
  80722c:	d8010615 	stw	zero,1048(sp)
  807230:	0804fb80 	call	804fb8 <___vfprintf_internal_r>
  807234:	1023883a 	mov	r17,r2
  807238:	10000416 	blt	r2,zero,80724c <__sbprintf+0x80>
  80723c:	d9410004 	addi	r5,sp,1024
  807240:	9009883a 	mov	r4,r18
  807244:	0808f340 	call	808f34 <_fflush_r>
  807248:	10000d1e 	bne	r2,zero,807280 <__sbprintf+0xb4>
  80724c:	d881030b 	ldhu	r2,1036(sp)
  807250:	1080100c 	andi	r2,r2,64
  807254:	10000326 	beq	r2,zero,807264 <__sbprintf+0x98>
  807258:	8080030b 	ldhu	r2,12(r16)
  80725c:	10801014 	ori	r2,r2,64
  807260:	8080030d 	sth	r2,12(r16)
  807264:	8805883a 	mov	r2,r17
  807268:	dfc11d17 	ldw	ra,1140(sp)
  80726c:	dc811c17 	ldw	r18,1136(sp)
  807270:	dc411b17 	ldw	r17,1132(sp)
  807274:	dc011a17 	ldw	r16,1128(sp)
  807278:	dec11e04 	addi	sp,sp,1144
  80727c:	f800283a 	ret
  807280:	047fffc4 	movi	r17,-1
  807284:	003ff106 	br	80724c <__alt_mem_onchip_mem+0xff78724c>

00807288 <_write_r>:
  807288:	defffd04 	addi	sp,sp,-12
  80728c:	2805883a 	mov	r2,r5
  807290:	dc000015 	stw	r16,0(sp)
  807294:	040020b4 	movhi	r16,130
  807298:	dc400115 	stw	r17,4(sp)
  80729c:	300b883a 	mov	r5,r6
  8072a0:	8423dd04 	addi	r16,r16,-28812
  8072a4:	2023883a 	mov	r17,r4
  8072a8:	380d883a 	mov	r6,r7
  8072ac:	1009883a 	mov	r4,r2
  8072b0:	dfc00215 	stw	ra,8(sp)
  8072b4:	80000015 	stw	zero,0(r16)
  8072b8:	08118940 	call	811894 <write>
  8072bc:	00ffffc4 	movi	r3,-1
  8072c0:	10c00526 	beq	r2,r3,8072d8 <_write_r+0x50>
  8072c4:	dfc00217 	ldw	ra,8(sp)
  8072c8:	dc400117 	ldw	r17,4(sp)
  8072cc:	dc000017 	ldw	r16,0(sp)
  8072d0:	dec00304 	addi	sp,sp,12
  8072d4:	f800283a 	ret
  8072d8:	80c00017 	ldw	r3,0(r16)
  8072dc:	183ff926 	beq	r3,zero,8072c4 <__alt_mem_onchip_mem+0xff7872c4>
  8072e0:	88c00015 	stw	r3,0(r17)
  8072e4:	003ff706 	br	8072c4 <__alt_mem_onchip_mem+0xff7872c4>

008072e8 <__swsetup_r>:
  8072e8:	00802074 	movhi	r2,129
  8072ec:	defffd04 	addi	sp,sp,-12
  8072f0:	109c3a04 	addi	r2,r2,28904
  8072f4:	dc400115 	stw	r17,4(sp)
  8072f8:	2023883a 	mov	r17,r4
  8072fc:	11000017 	ldw	r4,0(r2)
  807300:	dc000015 	stw	r16,0(sp)
  807304:	dfc00215 	stw	ra,8(sp)
  807308:	2821883a 	mov	r16,r5
  80730c:	20000226 	beq	r4,zero,807318 <__swsetup_r+0x30>
  807310:	20800e17 	ldw	r2,56(r4)
  807314:	10003126 	beq	r2,zero,8073dc <__swsetup_r+0xf4>
  807318:	8080030b 	ldhu	r2,12(r16)
  80731c:	10c0020c 	andi	r3,r2,8
  807320:	1009883a 	mov	r4,r2
  807324:	18000f26 	beq	r3,zero,807364 <__swsetup_r+0x7c>
  807328:	80c00417 	ldw	r3,16(r16)
  80732c:	18001526 	beq	r3,zero,807384 <__swsetup_r+0x9c>
  807330:	1100004c 	andi	r4,r2,1
  807334:	20001c1e 	bne	r4,zero,8073a8 <__swsetup_r+0xc0>
  807338:	1080008c 	andi	r2,r2,2
  80733c:	1000291e 	bne	r2,zero,8073e4 <__swsetup_r+0xfc>
  807340:	80800517 	ldw	r2,20(r16)
  807344:	80800215 	stw	r2,8(r16)
  807348:	18001c26 	beq	r3,zero,8073bc <__swsetup_r+0xd4>
  80734c:	0005883a 	mov	r2,zero
  807350:	dfc00217 	ldw	ra,8(sp)
  807354:	dc400117 	ldw	r17,4(sp)
  807358:	dc000017 	ldw	r16,0(sp)
  80735c:	dec00304 	addi	sp,sp,12
  807360:	f800283a 	ret
  807364:	2080040c 	andi	r2,r4,16
  807368:	10002e26 	beq	r2,zero,807424 <__swsetup_r+0x13c>
  80736c:	2080010c 	andi	r2,r4,4
  807370:	10001e1e 	bne	r2,zero,8073ec <__swsetup_r+0x104>
  807374:	80c00417 	ldw	r3,16(r16)
  807378:	20800214 	ori	r2,r4,8
  80737c:	8080030d 	sth	r2,12(r16)
  807380:	183feb1e 	bne	r3,zero,807330 <__alt_mem_onchip_mem+0xff787330>
  807384:	1100a00c 	andi	r4,r2,640
  807388:	01408004 	movi	r5,512
  80738c:	217fe826 	beq	r4,r5,807330 <__alt_mem_onchip_mem+0xff787330>
  807390:	800b883a 	mov	r5,r16
  807394:	8809883a 	mov	r4,r17
  807398:	0803f100 	call	803f10 <__smakebuf_r>
  80739c:	8080030b 	ldhu	r2,12(r16)
  8073a0:	80c00417 	ldw	r3,16(r16)
  8073a4:	003fe206 	br	807330 <__alt_mem_onchip_mem+0xff787330>
  8073a8:	80800517 	ldw	r2,20(r16)
  8073ac:	80000215 	stw	zero,8(r16)
  8073b0:	0085c83a 	sub	r2,zero,r2
  8073b4:	80800615 	stw	r2,24(r16)
  8073b8:	183fe41e 	bne	r3,zero,80734c <__alt_mem_onchip_mem+0xff78734c>
  8073bc:	80c0030b 	ldhu	r3,12(r16)
  8073c0:	0005883a 	mov	r2,zero
  8073c4:	1900200c 	andi	r4,r3,128
  8073c8:	203fe126 	beq	r4,zero,807350 <__alt_mem_onchip_mem+0xff787350>
  8073cc:	18c01014 	ori	r3,r3,64
  8073d0:	80c0030d 	sth	r3,12(r16)
  8073d4:	00bfffc4 	movi	r2,-1
  8073d8:	003fdd06 	br	807350 <__alt_mem_onchip_mem+0xff787350>
  8073dc:	08093100 	call	809310 <__sinit>
  8073e0:	003fcd06 	br	807318 <__alt_mem_onchip_mem+0xff787318>
  8073e4:	0005883a 	mov	r2,zero
  8073e8:	003fd606 	br	807344 <__alt_mem_onchip_mem+0xff787344>
  8073ec:	81400c17 	ldw	r5,48(r16)
  8073f0:	28000626 	beq	r5,zero,80740c <__swsetup_r+0x124>
  8073f4:	80801004 	addi	r2,r16,64
  8073f8:	28800326 	beq	r5,r2,807408 <__swsetup_r+0x120>
  8073fc:	8809883a 	mov	r4,r17
  807400:	08095300 	call	809530 <_free_r>
  807404:	8100030b 	ldhu	r4,12(r16)
  807408:	80000c15 	stw	zero,48(r16)
  80740c:	80c00417 	ldw	r3,16(r16)
  807410:	00bff6c4 	movi	r2,-37
  807414:	1108703a 	and	r4,r2,r4
  807418:	80000115 	stw	zero,4(r16)
  80741c:	80c00015 	stw	r3,0(r16)
  807420:	003fd506 	br	807378 <__alt_mem_onchip_mem+0xff787378>
  807424:	00800244 	movi	r2,9
  807428:	88800015 	stw	r2,0(r17)
  80742c:	20801014 	ori	r2,r4,64
  807430:	8080030d 	sth	r2,12(r16)
  807434:	00bfffc4 	movi	r2,-1
  807438:	003fc506 	br	807350 <__alt_mem_onchip_mem+0xff787350>

0080743c <_close_r>:
  80743c:	defffd04 	addi	sp,sp,-12
  807440:	dc000015 	stw	r16,0(sp)
  807444:	040020b4 	movhi	r16,130
  807448:	dc400115 	stw	r17,4(sp)
  80744c:	8423dd04 	addi	r16,r16,-28812
  807450:	2023883a 	mov	r17,r4
  807454:	2809883a 	mov	r4,r5
  807458:	dfc00215 	stw	ra,8(sp)
  80745c:	80000015 	stw	zero,0(r16)
  807460:	0810b0c0 	call	810b0c <close>
  807464:	00ffffc4 	movi	r3,-1
  807468:	10c00526 	beq	r2,r3,807480 <_close_r+0x44>
  80746c:	dfc00217 	ldw	ra,8(sp)
  807470:	dc400117 	ldw	r17,4(sp)
  807474:	dc000017 	ldw	r16,0(sp)
  807478:	dec00304 	addi	sp,sp,12
  80747c:	f800283a 	ret
  807480:	80c00017 	ldw	r3,0(r16)
  807484:	183ff926 	beq	r3,zero,80746c <__alt_mem_onchip_mem+0xff78746c>
  807488:	88c00015 	stw	r3,0(r17)
  80748c:	003ff706 	br	80746c <__alt_mem_onchip_mem+0xff78746c>

00807490 <quorem>:
  807490:	defff704 	addi	sp,sp,-36
  807494:	dc800215 	stw	r18,8(sp)
  807498:	20800417 	ldw	r2,16(r4)
  80749c:	2c800417 	ldw	r18,16(r5)
  8074a0:	dfc00815 	stw	ra,32(sp)
  8074a4:	ddc00715 	stw	r23,28(sp)
  8074a8:	dd800615 	stw	r22,24(sp)
  8074ac:	dd400515 	stw	r21,20(sp)
  8074b0:	dd000415 	stw	r20,16(sp)
  8074b4:	dcc00315 	stw	r19,12(sp)
  8074b8:	dc400115 	stw	r17,4(sp)
  8074bc:	dc000015 	stw	r16,0(sp)
  8074c0:	14807116 	blt	r2,r18,807688 <quorem+0x1f8>
  8074c4:	94bfffc4 	addi	r18,r18,-1
  8074c8:	94ad883a 	add	r22,r18,r18
  8074cc:	b5ad883a 	add	r22,r22,r22
  8074d0:	2c400504 	addi	r17,r5,20
  8074d4:	8da9883a 	add	r20,r17,r22
  8074d8:	25400504 	addi	r21,r4,20
  8074dc:	282f883a 	mov	r23,r5
  8074e0:	adad883a 	add	r22,r21,r22
  8074e4:	a1400017 	ldw	r5,0(r20)
  8074e8:	2021883a 	mov	r16,r4
  8074ec:	b1000017 	ldw	r4,0(r22)
  8074f0:	29400044 	addi	r5,r5,1
  8074f4:	080e3ac0 	call	80e3ac <__udivsi3>
  8074f8:	1027883a 	mov	r19,r2
  8074fc:	10002c26 	beq	r2,zero,8075b0 <quorem+0x120>
  807500:	a813883a 	mov	r9,r21
  807504:	880b883a 	mov	r5,r17
  807508:	0009883a 	mov	r4,zero
  80750c:	000d883a 	mov	r6,zero
  807510:	2a000017 	ldw	r8,0(r5)
  807514:	49c00017 	ldw	r7,0(r9)
  807518:	29400104 	addi	r5,r5,4
  80751c:	40bfffcc 	andi	r2,r8,65535
  807520:	14c5383a 	mul	r2,r2,r19
  807524:	4010d43a 	srli	r8,r8,16
  807528:	38ffffcc 	andi	r3,r7,65535
  80752c:	1105883a 	add	r2,r2,r4
  807530:	1008d43a 	srli	r4,r2,16
  807534:	44d1383a 	mul	r8,r8,r19
  807538:	198d883a 	add	r6,r3,r6
  80753c:	10ffffcc 	andi	r3,r2,65535
  807540:	30c7c83a 	sub	r3,r6,r3
  807544:	380ed43a 	srli	r7,r7,16
  807548:	4105883a 	add	r2,r8,r4
  80754c:	180dd43a 	srai	r6,r3,16
  807550:	113fffcc 	andi	r4,r2,65535
  807554:	390fc83a 	sub	r7,r7,r4
  807558:	398d883a 	add	r6,r7,r6
  80755c:	300e943a 	slli	r7,r6,16
  807560:	18ffffcc 	andi	r3,r3,65535
  807564:	1008d43a 	srli	r4,r2,16
  807568:	38ceb03a 	or	r7,r7,r3
  80756c:	49c00015 	stw	r7,0(r9)
  807570:	300dd43a 	srai	r6,r6,16
  807574:	4a400104 	addi	r9,r9,4
  807578:	a17fe52e 	bgeu	r20,r5,807510 <__alt_mem_onchip_mem+0xff787510>
  80757c:	b0800017 	ldw	r2,0(r22)
  807580:	10000b1e 	bne	r2,zero,8075b0 <quorem+0x120>
  807584:	b0bfff04 	addi	r2,r22,-4
  807588:	a880082e 	bgeu	r21,r2,8075ac <quorem+0x11c>
  80758c:	b0ffff17 	ldw	r3,-4(r22)
  807590:	18000326 	beq	r3,zero,8075a0 <quorem+0x110>
  807594:	00000506 	br	8075ac <quorem+0x11c>
  807598:	10c00017 	ldw	r3,0(r2)
  80759c:	1800031e 	bne	r3,zero,8075ac <quorem+0x11c>
  8075a0:	10bfff04 	addi	r2,r2,-4
  8075a4:	94bfffc4 	addi	r18,r18,-1
  8075a8:	a8bffb36 	bltu	r21,r2,807598 <__alt_mem_onchip_mem+0xff787598>
  8075ac:	84800415 	stw	r18,16(r16)
  8075b0:	b80b883a 	mov	r5,r23
  8075b4:	8009883a 	mov	r4,r16
  8075b8:	080ac640 	call	80ac64 <__mcmp>
  8075bc:	10002616 	blt	r2,zero,807658 <quorem+0x1c8>
  8075c0:	9cc00044 	addi	r19,r19,1
  8075c4:	a805883a 	mov	r2,r21
  8075c8:	000b883a 	mov	r5,zero
  8075cc:	11000017 	ldw	r4,0(r2)
  8075d0:	89800017 	ldw	r6,0(r17)
  8075d4:	10800104 	addi	r2,r2,4
  8075d8:	20ffffcc 	andi	r3,r4,65535
  8075dc:	194b883a 	add	r5,r3,r5
  8075e0:	30ffffcc 	andi	r3,r6,65535
  8075e4:	28c7c83a 	sub	r3,r5,r3
  8075e8:	300cd43a 	srli	r6,r6,16
  8075ec:	2008d43a 	srli	r4,r4,16
  8075f0:	180bd43a 	srai	r5,r3,16
  8075f4:	18ffffcc 	andi	r3,r3,65535
  8075f8:	2189c83a 	sub	r4,r4,r6
  8075fc:	2149883a 	add	r4,r4,r5
  807600:	200c943a 	slli	r6,r4,16
  807604:	8c400104 	addi	r17,r17,4
  807608:	200bd43a 	srai	r5,r4,16
  80760c:	30c6b03a 	or	r3,r6,r3
  807610:	10ffff15 	stw	r3,-4(r2)
  807614:	a47fed2e 	bgeu	r20,r17,8075cc <__alt_mem_onchip_mem+0xff7875cc>
  807618:	9485883a 	add	r2,r18,r18
  80761c:	1085883a 	add	r2,r2,r2
  807620:	a887883a 	add	r3,r21,r2
  807624:	18800017 	ldw	r2,0(r3)
  807628:	10000b1e 	bne	r2,zero,807658 <quorem+0x1c8>
  80762c:	18bfff04 	addi	r2,r3,-4
  807630:	a880082e 	bgeu	r21,r2,807654 <quorem+0x1c4>
  807634:	18ffff17 	ldw	r3,-4(r3)
  807638:	18000326 	beq	r3,zero,807648 <quorem+0x1b8>
  80763c:	00000506 	br	807654 <quorem+0x1c4>
  807640:	10c00017 	ldw	r3,0(r2)
  807644:	1800031e 	bne	r3,zero,807654 <quorem+0x1c4>
  807648:	10bfff04 	addi	r2,r2,-4
  80764c:	94bfffc4 	addi	r18,r18,-1
  807650:	a8bffb36 	bltu	r21,r2,807640 <__alt_mem_onchip_mem+0xff787640>
  807654:	84800415 	stw	r18,16(r16)
  807658:	9805883a 	mov	r2,r19
  80765c:	dfc00817 	ldw	ra,32(sp)
  807660:	ddc00717 	ldw	r23,28(sp)
  807664:	dd800617 	ldw	r22,24(sp)
  807668:	dd400517 	ldw	r21,20(sp)
  80766c:	dd000417 	ldw	r20,16(sp)
  807670:	dcc00317 	ldw	r19,12(sp)
  807674:	dc800217 	ldw	r18,8(sp)
  807678:	dc400117 	ldw	r17,4(sp)
  80767c:	dc000017 	ldw	r16,0(sp)
  807680:	dec00904 	addi	sp,sp,36
  807684:	f800283a 	ret
  807688:	0005883a 	mov	r2,zero
  80768c:	003ff306 	br	80765c <__alt_mem_onchip_mem+0xff78765c>

00807690 <_dtoa_r>:
  807690:	20801017 	ldw	r2,64(r4)
  807694:	deffde04 	addi	sp,sp,-136
  807698:	df002015 	stw	fp,128(sp)
  80769c:	dcc01b15 	stw	r19,108(sp)
  8076a0:	dc801a15 	stw	r18,104(sp)
  8076a4:	dc401915 	stw	r17,100(sp)
  8076a8:	dc001815 	stw	r16,96(sp)
  8076ac:	dfc02115 	stw	ra,132(sp)
  8076b0:	ddc01f15 	stw	r23,124(sp)
  8076b4:	dd801e15 	stw	r22,120(sp)
  8076b8:	dd401d15 	stw	r21,116(sp)
  8076bc:	dd001c15 	stw	r20,112(sp)
  8076c0:	d9c00315 	stw	r7,12(sp)
  8076c4:	2039883a 	mov	fp,r4
  8076c8:	3023883a 	mov	r17,r6
  8076cc:	2825883a 	mov	r18,r5
  8076d0:	dc002417 	ldw	r16,144(sp)
  8076d4:	3027883a 	mov	r19,r6
  8076d8:	10000826 	beq	r2,zero,8076fc <_dtoa_r+0x6c>
  8076dc:	21801117 	ldw	r6,68(r4)
  8076e0:	00c00044 	movi	r3,1
  8076e4:	100b883a 	mov	r5,r2
  8076e8:	1986983a 	sll	r3,r3,r6
  8076ec:	11800115 	stw	r6,4(r2)
  8076f0:	10c00215 	stw	r3,8(r2)
  8076f4:	080a4440 	call	80a444 <_Bfree>
  8076f8:	e0001015 	stw	zero,64(fp)
  8076fc:	88002e16 	blt	r17,zero,8077b8 <_dtoa_r+0x128>
  807700:	80000015 	stw	zero,0(r16)
  807704:	889ffc2c 	andhi	r2,r17,32752
  807708:	00dffc34 	movhi	r3,32752
  80770c:	10c01c26 	beq	r2,r3,807780 <_dtoa_r+0xf0>
  807710:	000d883a 	mov	r6,zero
  807714:	000f883a 	mov	r7,zero
  807718:	9009883a 	mov	r4,r18
  80771c:	980b883a 	mov	r5,r19
  807720:	080f5fc0 	call	80f5fc <__eqdf2>
  807724:	10002b1e 	bne	r2,zero,8077d4 <_dtoa_r+0x144>
  807728:	d9c02317 	ldw	r7,140(sp)
  80772c:	00800044 	movi	r2,1
  807730:	38800015 	stw	r2,0(r7)
  807734:	d8802517 	ldw	r2,148(sp)
  807738:	10019e26 	beq	r2,zero,807db4 <_dtoa_r+0x724>
  80773c:	d8c02517 	ldw	r3,148(sp)
  807740:	00802074 	movhi	r2,129
  807744:	1093bd44 	addi	r2,r2,20213
  807748:	18800015 	stw	r2,0(r3)
  80774c:	10bfffc4 	addi	r2,r2,-1
  807750:	dfc02117 	ldw	ra,132(sp)
  807754:	df002017 	ldw	fp,128(sp)
  807758:	ddc01f17 	ldw	r23,124(sp)
  80775c:	dd801e17 	ldw	r22,120(sp)
  807760:	dd401d17 	ldw	r21,116(sp)
  807764:	dd001c17 	ldw	r20,112(sp)
  807768:	dcc01b17 	ldw	r19,108(sp)
  80776c:	dc801a17 	ldw	r18,104(sp)
  807770:	dc401917 	ldw	r17,100(sp)
  807774:	dc001817 	ldw	r16,96(sp)
  807778:	dec02204 	addi	sp,sp,136
  80777c:	f800283a 	ret
  807780:	d8c02317 	ldw	r3,140(sp)
  807784:	0089c3c4 	movi	r2,9999
  807788:	18800015 	stw	r2,0(r3)
  80778c:	90017726 	beq	r18,zero,807d6c <_dtoa_r+0x6dc>
  807790:	00802074 	movhi	r2,129
  807794:	1093c904 	addi	r2,r2,20260
  807798:	d9002517 	ldw	r4,148(sp)
  80779c:	203fec26 	beq	r4,zero,807750 <__alt_mem_onchip_mem+0xff787750>
  8077a0:	10c000c7 	ldb	r3,3(r2)
  8077a4:	1801781e 	bne	r3,zero,807d88 <_dtoa_r+0x6f8>
  8077a8:	10c000c4 	addi	r3,r2,3
  8077ac:	d9802517 	ldw	r6,148(sp)
  8077b0:	30c00015 	stw	r3,0(r6)
  8077b4:	003fe606 	br	807750 <__alt_mem_onchip_mem+0xff787750>
  8077b8:	04e00034 	movhi	r19,32768
  8077bc:	9cffffc4 	addi	r19,r19,-1
  8077c0:	00800044 	movi	r2,1
  8077c4:	8ce6703a 	and	r19,r17,r19
  8077c8:	80800015 	stw	r2,0(r16)
  8077cc:	9823883a 	mov	r17,r19
  8077d0:	003fcc06 	br	807704 <__alt_mem_onchip_mem+0xff787704>
  8077d4:	d8800204 	addi	r2,sp,8
  8077d8:	d8800015 	stw	r2,0(sp)
  8077dc:	d9c00104 	addi	r7,sp,4
  8077e0:	900b883a 	mov	r5,r18
  8077e4:	980d883a 	mov	r6,r19
  8077e8:	e009883a 	mov	r4,fp
  8077ec:	8820d53a 	srli	r16,r17,20
  8077f0:	080b0300 	call	80b030 <__d2b>
  8077f4:	d8800915 	stw	r2,36(sp)
  8077f8:	8001651e 	bne	r16,zero,807d90 <_dtoa_r+0x700>
  8077fc:	dd800217 	ldw	r22,8(sp)
  807800:	dc000117 	ldw	r16,4(sp)
  807804:	00800804 	movi	r2,32
  807808:	b421883a 	add	r16,r22,r16
  80780c:	80c10c84 	addi	r3,r16,1074
  807810:	10c2d10e 	bge	r2,r3,808358 <_dtoa_r+0xcc8>
  807814:	00801004 	movi	r2,64
  807818:	81010484 	addi	r4,r16,1042
  80781c:	10c7c83a 	sub	r3,r2,r3
  807820:	9108d83a 	srl	r4,r18,r4
  807824:	88e2983a 	sll	r17,r17,r3
  807828:	2448b03a 	or	r4,r4,r17
  80782c:	08109c40 	call	8109c4 <__floatunsidf>
  807830:	017f8434 	movhi	r5,65040
  807834:	01800044 	movi	r6,1
  807838:	1009883a 	mov	r4,r2
  80783c:	194b883a 	add	r5,r3,r5
  807840:	843fffc4 	addi	r16,r16,-1
  807844:	d9801115 	stw	r6,68(sp)
  807848:	000d883a 	mov	r6,zero
  80784c:	01cffe34 	movhi	r7,16376
  807850:	080ff6c0 	call	80ff6c <__subdf3>
  807854:	0198dbf4 	movhi	r6,25455
  807858:	01cff4f4 	movhi	r7,16339
  80785c:	3190d844 	addi	r6,r6,17249
  807860:	39e1e9c4 	addi	r7,r7,-30809
  807864:	1009883a 	mov	r4,r2
  807868:	180b883a 	mov	r5,r3
  80786c:	080f8540 	call	80f854 <__muldf3>
  807870:	01a2d874 	movhi	r6,35681
  807874:	01cff1f4 	movhi	r7,16327
  807878:	31b22cc4 	addi	r6,r6,-14157
  80787c:	39e28a04 	addi	r7,r7,-30168
  807880:	180b883a 	mov	r5,r3
  807884:	1009883a 	mov	r4,r2
  807888:	080e4680 	call	80e468 <__adddf3>
  80788c:	8009883a 	mov	r4,r16
  807890:	1029883a 	mov	r20,r2
  807894:	1823883a 	mov	r17,r3
  807898:	08108e80 	call	8108e8 <__floatsidf>
  80789c:	019427f4 	movhi	r6,20639
  8078a0:	01cff4f4 	movhi	r7,16339
  8078a4:	319e7ec4 	addi	r6,r6,31227
  8078a8:	39d104c4 	addi	r7,r7,17427
  8078ac:	1009883a 	mov	r4,r2
  8078b0:	180b883a 	mov	r5,r3
  8078b4:	080f8540 	call	80f854 <__muldf3>
  8078b8:	100d883a 	mov	r6,r2
  8078bc:	180f883a 	mov	r7,r3
  8078c0:	a009883a 	mov	r4,r20
  8078c4:	880b883a 	mov	r5,r17
  8078c8:	080e4680 	call	80e468 <__adddf3>
  8078cc:	1009883a 	mov	r4,r2
  8078d0:	180b883a 	mov	r5,r3
  8078d4:	1029883a 	mov	r20,r2
  8078d8:	1823883a 	mov	r17,r3
  8078dc:	08108680 	call	810868 <__fixdfsi>
  8078e0:	000d883a 	mov	r6,zero
  8078e4:	000f883a 	mov	r7,zero
  8078e8:	a009883a 	mov	r4,r20
  8078ec:	880b883a 	mov	r5,r17
  8078f0:	d8800515 	stw	r2,20(sp)
  8078f4:	080f7600 	call	80f760 <__ledf2>
  8078f8:	10028716 	blt	r2,zero,808318 <_dtoa_r+0xc88>
  8078fc:	d8c00517 	ldw	r3,20(sp)
  807900:	00800584 	movi	r2,22
  807904:	10c27536 	bltu	r2,r3,8082dc <_dtoa_r+0xc4c>
  807908:	180490fa 	slli	r2,r3,3
  80790c:	00c02074 	movhi	r3,129
  807910:	18d3e404 	addi	r3,r3,20368
  807914:	1885883a 	add	r2,r3,r2
  807918:	11000017 	ldw	r4,0(r2)
  80791c:	11400117 	ldw	r5,4(r2)
  807920:	900d883a 	mov	r6,r18
  807924:	980f883a 	mov	r7,r19
  807928:	080f6840 	call	80f684 <__gedf2>
  80792c:	00828d0e 	bge	zero,r2,808364 <_dtoa_r+0xcd4>
  807930:	d9000517 	ldw	r4,20(sp)
  807934:	d8000e15 	stw	zero,56(sp)
  807938:	213fffc4 	addi	r4,r4,-1
  80793c:	d9000515 	stw	r4,20(sp)
  807940:	b42dc83a 	sub	r22,r22,r16
  807944:	b5bfffc4 	addi	r22,r22,-1
  807948:	b0026f16 	blt	r22,zero,808308 <_dtoa_r+0xc78>
  80794c:	d8000815 	stw	zero,32(sp)
  807950:	d9c00517 	ldw	r7,20(sp)
  807954:	38026416 	blt	r7,zero,8082e8 <_dtoa_r+0xc58>
  807958:	b1ed883a 	add	r22,r22,r7
  80795c:	d9c00d15 	stw	r7,52(sp)
  807960:	d8000a15 	stw	zero,40(sp)
  807964:	d9800317 	ldw	r6,12(sp)
  807968:	00800244 	movi	r2,9
  80796c:	11811436 	bltu	r2,r6,807dc0 <_dtoa_r+0x730>
  807970:	00800144 	movi	r2,5
  807974:	1184e10e 	bge	r2,r6,808cfc <_dtoa_r+0x166c>
  807978:	31bfff04 	addi	r6,r6,-4
  80797c:	d9800315 	stw	r6,12(sp)
  807980:	0023883a 	mov	r17,zero
  807984:	d9800317 	ldw	r6,12(sp)
  807988:	008000c4 	movi	r2,3
  80798c:	30836726 	beq	r6,r2,80872c <_dtoa_r+0x109c>
  807990:	1183410e 	bge	r2,r6,808698 <_dtoa_r+0x1008>
  807994:	d9c00317 	ldw	r7,12(sp)
  807998:	00800104 	movi	r2,4
  80799c:	38827c26 	beq	r7,r2,808390 <_dtoa_r+0xd00>
  8079a0:	00800144 	movi	r2,5
  8079a4:	3884c41e 	bne	r7,r2,808cb8 <_dtoa_r+0x1628>
  8079a8:	00800044 	movi	r2,1
  8079ac:	d8800b15 	stw	r2,44(sp)
  8079b0:	d8c00517 	ldw	r3,20(sp)
  8079b4:	d9002217 	ldw	r4,136(sp)
  8079b8:	1907883a 	add	r3,r3,r4
  8079bc:	19800044 	addi	r6,r3,1
  8079c0:	d8c00c15 	stw	r3,48(sp)
  8079c4:	d9800615 	stw	r6,24(sp)
  8079c8:	0183a40e 	bge	zero,r6,80885c <_dtoa_r+0x11cc>
  8079cc:	d9800617 	ldw	r6,24(sp)
  8079d0:	3021883a 	mov	r16,r6
  8079d4:	e0001115 	stw	zero,68(fp)
  8079d8:	008005c4 	movi	r2,23
  8079dc:	1184c92e 	bgeu	r2,r6,808d04 <_dtoa_r+0x1674>
  8079e0:	00c00044 	movi	r3,1
  8079e4:	00800104 	movi	r2,4
  8079e8:	1085883a 	add	r2,r2,r2
  8079ec:	11000504 	addi	r4,r2,20
  8079f0:	180b883a 	mov	r5,r3
  8079f4:	18c00044 	addi	r3,r3,1
  8079f8:	313ffb2e 	bgeu	r6,r4,8079e8 <__alt_mem_onchip_mem+0xff7879e8>
  8079fc:	e1401115 	stw	r5,68(fp)
  807a00:	e009883a 	mov	r4,fp
  807a04:	080a39c0 	call	80a39c <_Balloc>
  807a08:	d8800715 	stw	r2,28(sp)
  807a0c:	e0801015 	stw	r2,64(fp)
  807a10:	00800384 	movi	r2,14
  807a14:	1400f736 	bltu	r2,r16,807df4 <_dtoa_r+0x764>
  807a18:	8800f626 	beq	r17,zero,807df4 <_dtoa_r+0x764>
  807a1c:	d9c00517 	ldw	r7,20(sp)
  807a20:	01c39a0e 	bge	zero,r7,80888c <_dtoa_r+0x11fc>
  807a24:	388003cc 	andi	r2,r7,15
  807a28:	100490fa 	slli	r2,r2,3
  807a2c:	382bd13a 	srai	r21,r7,4
  807a30:	00c02074 	movhi	r3,129
  807a34:	18d3e404 	addi	r3,r3,20368
  807a38:	1885883a 	add	r2,r3,r2
  807a3c:	a8c0040c 	andi	r3,r21,16
  807a40:	12400017 	ldw	r9,0(r2)
  807a44:	12000117 	ldw	r8,4(r2)
  807a48:	18037926 	beq	r3,zero,808830 <_dtoa_r+0x11a0>
  807a4c:	00802074 	movhi	r2,129
  807a50:	1093da04 	addi	r2,r2,20328
  807a54:	11800817 	ldw	r6,32(r2)
  807a58:	11c00917 	ldw	r7,36(r2)
  807a5c:	9009883a 	mov	r4,r18
  807a60:	980b883a 	mov	r5,r19
  807a64:	da001715 	stw	r8,92(sp)
  807a68:	da401615 	stw	r9,88(sp)
  807a6c:	080ed140 	call	80ed14 <__divdf3>
  807a70:	da001717 	ldw	r8,92(sp)
  807a74:	da401617 	ldw	r9,88(sp)
  807a78:	ad4003cc 	andi	r21,r21,15
  807a7c:	040000c4 	movi	r16,3
  807a80:	1023883a 	mov	r17,r2
  807a84:	1829883a 	mov	r20,r3
  807a88:	a8001126 	beq	r21,zero,807ad0 <_dtoa_r+0x440>
  807a8c:	05c02074 	movhi	r23,129
  807a90:	bdd3da04 	addi	r23,r23,20328
  807a94:	4805883a 	mov	r2,r9
  807a98:	4007883a 	mov	r3,r8
  807a9c:	a980004c 	andi	r6,r21,1
  807aa0:	1009883a 	mov	r4,r2
  807aa4:	a82bd07a 	srai	r21,r21,1
  807aa8:	180b883a 	mov	r5,r3
  807aac:	30000426 	beq	r6,zero,807ac0 <_dtoa_r+0x430>
  807ab0:	b9800017 	ldw	r6,0(r23)
  807ab4:	b9c00117 	ldw	r7,4(r23)
  807ab8:	84000044 	addi	r16,r16,1
  807abc:	080f8540 	call	80f854 <__muldf3>
  807ac0:	bdc00204 	addi	r23,r23,8
  807ac4:	a83ff51e 	bne	r21,zero,807a9c <__alt_mem_onchip_mem+0xff787a9c>
  807ac8:	1013883a 	mov	r9,r2
  807acc:	1811883a 	mov	r8,r3
  807ad0:	480d883a 	mov	r6,r9
  807ad4:	400f883a 	mov	r7,r8
  807ad8:	8809883a 	mov	r4,r17
  807adc:	a00b883a 	mov	r5,r20
  807ae0:	080ed140 	call	80ed14 <__divdf3>
  807ae4:	d8800f15 	stw	r2,60(sp)
  807ae8:	d8c01015 	stw	r3,64(sp)
  807aec:	d8c00e17 	ldw	r3,56(sp)
  807af0:	18000626 	beq	r3,zero,807b0c <_dtoa_r+0x47c>
  807af4:	d9000f17 	ldw	r4,60(sp)
  807af8:	d9401017 	ldw	r5,64(sp)
  807afc:	000d883a 	mov	r6,zero
  807b00:	01cffc34 	movhi	r7,16368
  807b04:	080f7600 	call	80f760 <__ledf2>
  807b08:	10040b16 	blt	r2,zero,808b38 <_dtoa_r+0x14a8>
  807b0c:	8009883a 	mov	r4,r16
  807b10:	08108e80 	call	8108e8 <__floatsidf>
  807b14:	d9800f17 	ldw	r6,60(sp)
  807b18:	d9c01017 	ldw	r7,64(sp)
  807b1c:	1009883a 	mov	r4,r2
  807b20:	180b883a 	mov	r5,r3
  807b24:	080f8540 	call	80f854 <__muldf3>
  807b28:	000d883a 	mov	r6,zero
  807b2c:	01d00734 	movhi	r7,16412
  807b30:	1009883a 	mov	r4,r2
  807b34:	180b883a 	mov	r5,r3
  807b38:	080e4680 	call	80e468 <__adddf3>
  807b3c:	1021883a 	mov	r16,r2
  807b40:	d8800617 	ldw	r2,24(sp)
  807b44:	047f3034 	movhi	r17,64704
  807b48:	1c63883a 	add	r17,r3,r17
  807b4c:	10031826 	beq	r2,zero,8087b0 <_dtoa_r+0x1120>
  807b50:	d8c00517 	ldw	r3,20(sp)
  807b54:	db000617 	ldw	r12,24(sp)
  807b58:	d8c01315 	stw	r3,76(sp)
  807b5c:	d9000b17 	ldw	r4,44(sp)
  807b60:	20038f26 	beq	r4,zero,8089a0 <_dtoa_r+0x1310>
  807b64:	60bfffc4 	addi	r2,r12,-1
  807b68:	100490fa 	slli	r2,r2,3
  807b6c:	00c02074 	movhi	r3,129
  807b70:	18d3e404 	addi	r3,r3,20368
  807b74:	1885883a 	add	r2,r3,r2
  807b78:	11800017 	ldw	r6,0(r2)
  807b7c:	11c00117 	ldw	r7,4(r2)
  807b80:	d8800717 	ldw	r2,28(sp)
  807b84:	0009883a 	mov	r4,zero
  807b88:	014ff834 	movhi	r5,16352
  807b8c:	db001615 	stw	r12,88(sp)
  807b90:	15c00044 	addi	r23,r2,1
  807b94:	080ed140 	call	80ed14 <__divdf3>
  807b98:	800d883a 	mov	r6,r16
  807b9c:	880f883a 	mov	r7,r17
  807ba0:	1009883a 	mov	r4,r2
  807ba4:	180b883a 	mov	r5,r3
  807ba8:	080ff6c0 	call	80ff6c <__subdf3>
  807bac:	d9401017 	ldw	r5,64(sp)
  807bb0:	d9000f17 	ldw	r4,60(sp)
  807bb4:	102b883a 	mov	r21,r2
  807bb8:	d8c01215 	stw	r3,72(sp)
  807bbc:	08108680 	call	810868 <__fixdfsi>
  807bc0:	1009883a 	mov	r4,r2
  807bc4:	1029883a 	mov	r20,r2
  807bc8:	08108e80 	call	8108e8 <__floatsidf>
  807bcc:	d9000f17 	ldw	r4,60(sp)
  807bd0:	d9401017 	ldw	r5,64(sp)
  807bd4:	100d883a 	mov	r6,r2
  807bd8:	180f883a 	mov	r7,r3
  807bdc:	080ff6c0 	call	80ff6c <__subdf3>
  807be0:	1823883a 	mov	r17,r3
  807be4:	d8c00717 	ldw	r3,28(sp)
  807be8:	d9401217 	ldw	r5,72(sp)
  807bec:	a2000c04 	addi	r8,r20,48
  807bf0:	1021883a 	mov	r16,r2
  807bf4:	1a000005 	stb	r8,0(r3)
  807bf8:	800d883a 	mov	r6,r16
  807bfc:	880f883a 	mov	r7,r17
  807c00:	a809883a 	mov	r4,r21
  807c04:	4029883a 	mov	r20,r8
  807c08:	080f6840 	call	80f684 <__gedf2>
  807c0c:	00841d16 	blt	zero,r2,808c84 <_dtoa_r+0x15f4>
  807c10:	800d883a 	mov	r6,r16
  807c14:	880f883a 	mov	r7,r17
  807c18:	0009883a 	mov	r4,zero
  807c1c:	014ffc34 	movhi	r5,16368
  807c20:	080ff6c0 	call	80ff6c <__subdf3>
  807c24:	d9401217 	ldw	r5,72(sp)
  807c28:	100d883a 	mov	r6,r2
  807c2c:	180f883a 	mov	r7,r3
  807c30:	a809883a 	mov	r4,r21
  807c34:	080f6840 	call	80f684 <__gedf2>
  807c38:	db001617 	ldw	r12,88(sp)
  807c3c:	00840e16 	blt	zero,r2,808c78 <_dtoa_r+0x15e8>
  807c40:	00800044 	movi	r2,1
  807c44:	13006b0e 	bge	r2,r12,807df4 <_dtoa_r+0x764>
  807c48:	d9000717 	ldw	r4,28(sp)
  807c4c:	dd800f15 	stw	r22,60(sp)
  807c50:	dcc01015 	stw	r19,64(sp)
  807c54:	2319883a 	add	r12,r4,r12
  807c58:	dcc01217 	ldw	r19,72(sp)
  807c5c:	602d883a 	mov	r22,r12
  807c60:	dc801215 	stw	r18,72(sp)
  807c64:	b825883a 	mov	r18,r23
  807c68:	00000906 	br	807c90 <_dtoa_r+0x600>
  807c6c:	080ff6c0 	call	80ff6c <__subdf3>
  807c70:	a80d883a 	mov	r6,r21
  807c74:	980f883a 	mov	r7,r19
  807c78:	1009883a 	mov	r4,r2
  807c7c:	180b883a 	mov	r5,r3
  807c80:	080f7600 	call	80f760 <__ledf2>
  807c84:	1003e816 	blt	r2,zero,808c28 <_dtoa_r+0x1598>
  807c88:	b825883a 	mov	r18,r23
  807c8c:	bd83e926 	beq	r23,r22,808c34 <_dtoa_r+0x15a4>
  807c90:	a809883a 	mov	r4,r21
  807c94:	980b883a 	mov	r5,r19
  807c98:	000d883a 	mov	r6,zero
  807c9c:	01d00934 	movhi	r7,16420
  807ca0:	080f8540 	call	80f854 <__muldf3>
  807ca4:	000d883a 	mov	r6,zero
  807ca8:	01d00934 	movhi	r7,16420
  807cac:	8009883a 	mov	r4,r16
  807cb0:	880b883a 	mov	r5,r17
  807cb4:	102b883a 	mov	r21,r2
  807cb8:	1827883a 	mov	r19,r3
  807cbc:	080f8540 	call	80f854 <__muldf3>
  807cc0:	180b883a 	mov	r5,r3
  807cc4:	1009883a 	mov	r4,r2
  807cc8:	1821883a 	mov	r16,r3
  807ccc:	1023883a 	mov	r17,r2
  807cd0:	08108680 	call	810868 <__fixdfsi>
  807cd4:	1009883a 	mov	r4,r2
  807cd8:	1029883a 	mov	r20,r2
  807cdc:	08108e80 	call	8108e8 <__floatsidf>
  807ce0:	8809883a 	mov	r4,r17
  807ce4:	800b883a 	mov	r5,r16
  807ce8:	100d883a 	mov	r6,r2
  807cec:	180f883a 	mov	r7,r3
  807cf0:	080ff6c0 	call	80ff6c <__subdf3>
  807cf4:	a5000c04 	addi	r20,r20,48
  807cf8:	a80d883a 	mov	r6,r21
  807cfc:	980f883a 	mov	r7,r19
  807d00:	1009883a 	mov	r4,r2
  807d04:	180b883a 	mov	r5,r3
  807d08:	95000005 	stb	r20,0(r18)
  807d0c:	1021883a 	mov	r16,r2
  807d10:	1823883a 	mov	r17,r3
  807d14:	080f7600 	call	80f760 <__ledf2>
  807d18:	bdc00044 	addi	r23,r23,1
  807d1c:	800d883a 	mov	r6,r16
  807d20:	880f883a 	mov	r7,r17
  807d24:	0009883a 	mov	r4,zero
  807d28:	014ffc34 	movhi	r5,16368
  807d2c:	103fcf0e 	bge	r2,zero,807c6c <__alt_mem_onchip_mem+0xff787c6c>
  807d30:	d8c01317 	ldw	r3,76(sp)
  807d34:	d8c00515 	stw	r3,20(sp)
  807d38:	d9400917 	ldw	r5,36(sp)
  807d3c:	e009883a 	mov	r4,fp
  807d40:	080a4440 	call	80a444 <_Bfree>
  807d44:	d9000517 	ldw	r4,20(sp)
  807d48:	d9802317 	ldw	r6,140(sp)
  807d4c:	d9c02517 	ldw	r7,148(sp)
  807d50:	b8000005 	stb	zero,0(r23)
  807d54:	20800044 	addi	r2,r4,1
  807d58:	30800015 	stw	r2,0(r6)
  807d5c:	3802aa26 	beq	r7,zero,808808 <_dtoa_r+0x1178>
  807d60:	3dc00015 	stw	r23,0(r7)
  807d64:	d8800717 	ldw	r2,28(sp)
  807d68:	003e7906 	br	807750 <__alt_mem_onchip_mem+0xff787750>
  807d6c:	00800434 	movhi	r2,16
  807d70:	10bfffc4 	addi	r2,r2,-1
  807d74:	88a2703a 	and	r17,r17,r2
  807d78:	883e851e 	bne	r17,zero,807790 <__alt_mem_onchip_mem+0xff787790>
  807d7c:	00802074 	movhi	r2,129
  807d80:	1093c604 	addi	r2,r2,20248
  807d84:	003e8406 	br	807798 <__alt_mem_onchip_mem+0xff787798>
  807d88:	10c00204 	addi	r3,r2,8
  807d8c:	003e8706 	br	8077ac <__alt_mem_onchip_mem+0xff7877ac>
  807d90:	01400434 	movhi	r5,16
  807d94:	297fffc4 	addi	r5,r5,-1
  807d98:	994a703a 	and	r5,r19,r5
  807d9c:	9009883a 	mov	r4,r18
  807da0:	843f0044 	addi	r16,r16,-1023
  807da4:	294ffc34 	orhi	r5,r5,16368
  807da8:	dd800217 	ldw	r22,8(sp)
  807dac:	d8001115 	stw	zero,68(sp)
  807db0:	003ea506 	br	807848 <__alt_mem_onchip_mem+0xff787848>
  807db4:	00802074 	movhi	r2,129
  807db8:	1093bd04 	addi	r2,r2,20212
  807dbc:	003e6406 	br	807750 <__alt_mem_onchip_mem+0xff787750>
  807dc0:	e0001115 	stw	zero,68(fp)
  807dc4:	000b883a 	mov	r5,zero
  807dc8:	e009883a 	mov	r4,fp
  807dcc:	080a39c0 	call	80a39c <_Balloc>
  807dd0:	01bfffc4 	movi	r6,-1
  807dd4:	01c00044 	movi	r7,1
  807dd8:	d8800715 	stw	r2,28(sp)
  807ddc:	d9800c15 	stw	r6,48(sp)
  807de0:	e0801015 	stw	r2,64(fp)
  807de4:	d8000315 	stw	zero,12(sp)
  807de8:	d9c00b15 	stw	r7,44(sp)
  807dec:	d9800615 	stw	r6,24(sp)
  807df0:	d8002215 	stw	zero,136(sp)
  807df4:	d8800117 	ldw	r2,4(sp)
  807df8:	10008916 	blt	r2,zero,808020 <_dtoa_r+0x990>
  807dfc:	d9000517 	ldw	r4,20(sp)
  807e00:	00c00384 	movi	r3,14
  807e04:	19008616 	blt	r3,r4,808020 <_dtoa_r+0x990>
  807e08:	200490fa 	slli	r2,r4,3
  807e0c:	00c02074 	movhi	r3,129
  807e10:	d9802217 	ldw	r6,136(sp)
  807e14:	18d3e404 	addi	r3,r3,20368
  807e18:	1885883a 	add	r2,r3,r2
  807e1c:	14000017 	ldw	r16,0(r2)
  807e20:	14400117 	ldw	r17,4(r2)
  807e24:	30016316 	blt	r6,zero,8083b4 <_dtoa_r+0xd24>
  807e28:	800d883a 	mov	r6,r16
  807e2c:	880f883a 	mov	r7,r17
  807e30:	9009883a 	mov	r4,r18
  807e34:	980b883a 	mov	r5,r19
  807e38:	080ed140 	call	80ed14 <__divdf3>
  807e3c:	180b883a 	mov	r5,r3
  807e40:	1009883a 	mov	r4,r2
  807e44:	08108680 	call	810868 <__fixdfsi>
  807e48:	1009883a 	mov	r4,r2
  807e4c:	102b883a 	mov	r21,r2
  807e50:	08108e80 	call	8108e8 <__floatsidf>
  807e54:	800d883a 	mov	r6,r16
  807e58:	880f883a 	mov	r7,r17
  807e5c:	1009883a 	mov	r4,r2
  807e60:	180b883a 	mov	r5,r3
  807e64:	080f8540 	call	80f854 <__muldf3>
  807e68:	100d883a 	mov	r6,r2
  807e6c:	180f883a 	mov	r7,r3
  807e70:	9009883a 	mov	r4,r18
  807e74:	980b883a 	mov	r5,r19
  807e78:	080ff6c0 	call	80ff6c <__subdf3>
  807e7c:	d9c00717 	ldw	r7,28(sp)
  807e80:	1009883a 	mov	r4,r2
  807e84:	a8800c04 	addi	r2,r21,48
  807e88:	38800005 	stb	r2,0(r7)
  807e8c:	3dc00044 	addi	r23,r7,1
  807e90:	d9c00617 	ldw	r7,24(sp)
  807e94:	01800044 	movi	r6,1
  807e98:	180b883a 	mov	r5,r3
  807e9c:	2005883a 	mov	r2,r4
  807ea0:	39803826 	beq	r7,r6,807f84 <_dtoa_r+0x8f4>
  807ea4:	000d883a 	mov	r6,zero
  807ea8:	01d00934 	movhi	r7,16420
  807eac:	080f8540 	call	80f854 <__muldf3>
  807eb0:	000d883a 	mov	r6,zero
  807eb4:	000f883a 	mov	r7,zero
  807eb8:	1009883a 	mov	r4,r2
  807ebc:	180b883a 	mov	r5,r3
  807ec0:	1025883a 	mov	r18,r2
  807ec4:	1827883a 	mov	r19,r3
  807ec8:	080f5fc0 	call	80f5fc <__eqdf2>
  807ecc:	103f9a26 	beq	r2,zero,807d38 <__alt_mem_onchip_mem+0xff787d38>
  807ed0:	d9c00617 	ldw	r7,24(sp)
  807ed4:	d8c00717 	ldw	r3,28(sp)
  807ed8:	b829883a 	mov	r20,r23
  807edc:	38bfffc4 	addi	r2,r7,-1
  807ee0:	18ad883a 	add	r22,r3,r2
  807ee4:	00000a06 	br	807f10 <_dtoa_r+0x880>
  807ee8:	080f8540 	call	80f854 <__muldf3>
  807eec:	000d883a 	mov	r6,zero
  807ef0:	000f883a 	mov	r7,zero
  807ef4:	1009883a 	mov	r4,r2
  807ef8:	180b883a 	mov	r5,r3
  807efc:	1025883a 	mov	r18,r2
  807f00:	1827883a 	mov	r19,r3
  807f04:	b829883a 	mov	r20,r23
  807f08:	080f5fc0 	call	80f5fc <__eqdf2>
  807f0c:	103f8a26 	beq	r2,zero,807d38 <__alt_mem_onchip_mem+0xff787d38>
  807f10:	800d883a 	mov	r6,r16
  807f14:	880f883a 	mov	r7,r17
  807f18:	9009883a 	mov	r4,r18
  807f1c:	980b883a 	mov	r5,r19
  807f20:	080ed140 	call	80ed14 <__divdf3>
  807f24:	180b883a 	mov	r5,r3
  807f28:	1009883a 	mov	r4,r2
  807f2c:	08108680 	call	810868 <__fixdfsi>
  807f30:	1009883a 	mov	r4,r2
  807f34:	102b883a 	mov	r21,r2
  807f38:	08108e80 	call	8108e8 <__floatsidf>
  807f3c:	800d883a 	mov	r6,r16
  807f40:	880f883a 	mov	r7,r17
  807f44:	1009883a 	mov	r4,r2
  807f48:	180b883a 	mov	r5,r3
  807f4c:	080f8540 	call	80f854 <__muldf3>
  807f50:	100d883a 	mov	r6,r2
  807f54:	180f883a 	mov	r7,r3
  807f58:	9009883a 	mov	r4,r18
  807f5c:	980b883a 	mov	r5,r19
  807f60:	080ff6c0 	call	80ff6c <__subdf3>
  807f64:	aa000c04 	addi	r8,r21,48
  807f68:	a2000005 	stb	r8,0(r20)
  807f6c:	000d883a 	mov	r6,zero
  807f70:	01d00934 	movhi	r7,16420
  807f74:	1009883a 	mov	r4,r2
  807f78:	180b883a 	mov	r5,r3
  807f7c:	a5c00044 	addi	r23,r20,1
  807f80:	b53fd91e 	bne	r22,r20,807ee8 <__alt_mem_onchip_mem+0xff787ee8>
  807f84:	100d883a 	mov	r6,r2
  807f88:	180f883a 	mov	r7,r3
  807f8c:	1009883a 	mov	r4,r2
  807f90:	180b883a 	mov	r5,r3
  807f94:	080e4680 	call	80e468 <__adddf3>
  807f98:	100d883a 	mov	r6,r2
  807f9c:	180f883a 	mov	r7,r3
  807fa0:	8009883a 	mov	r4,r16
  807fa4:	880b883a 	mov	r5,r17
  807fa8:	1027883a 	mov	r19,r2
  807fac:	1825883a 	mov	r18,r3
  807fb0:	080f7600 	call	80f760 <__ledf2>
  807fb4:	10000816 	blt	r2,zero,807fd8 <_dtoa_r+0x948>
  807fb8:	980d883a 	mov	r6,r19
  807fbc:	900f883a 	mov	r7,r18
  807fc0:	8009883a 	mov	r4,r16
  807fc4:	880b883a 	mov	r5,r17
  807fc8:	080f5fc0 	call	80f5fc <__eqdf2>
  807fcc:	103f5a1e 	bne	r2,zero,807d38 <__alt_mem_onchip_mem+0xff787d38>
  807fd0:	ad40004c 	andi	r21,r21,1
  807fd4:	a83f5826 	beq	r21,zero,807d38 <__alt_mem_onchip_mem+0xff787d38>
  807fd8:	bd3fffc3 	ldbu	r20,-1(r23)
  807fdc:	b8bfffc4 	addi	r2,r23,-1
  807fe0:	1007883a 	mov	r3,r2
  807fe4:	01400e44 	movi	r5,57
  807fe8:	d9800717 	ldw	r6,28(sp)
  807fec:	00000506 	br	808004 <_dtoa_r+0x974>
  807ff0:	18ffffc4 	addi	r3,r3,-1
  807ff4:	11824726 	beq	r2,r6,808914 <_dtoa_r+0x1284>
  807ff8:	1d000003 	ldbu	r20,0(r3)
  807ffc:	102f883a 	mov	r23,r2
  808000:	10bfffc4 	addi	r2,r2,-1
  808004:	a1003fcc 	andi	r4,r20,255
  808008:	2100201c 	xori	r4,r4,128
  80800c:	213fe004 	addi	r4,r4,-128
  808010:	217ff726 	beq	r4,r5,807ff0 <__alt_mem_onchip_mem+0xff787ff0>
  808014:	a2000044 	addi	r8,r20,1
  808018:	12000005 	stb	r8,0(r2)
  80801c:	003f4606 	br	807d38 <__alt_mem_onchip_mem+0xff787d38>
  808020:	d9000b17 	ldw	r4,44(sp)
  808024:	2000c826 	beq	r4,zero,808348 <_dtoa_r+0xcb8>
  808028:	d9800317 	ldw	r6,12(sp)
  80802c:	00c00044 	movi	r3,1
  808030:	1980f90e 	bge	r3,r6,808418 <_dtoa_r+0xd88>
  808034:	d8800617 	ldw	r2,24(sp)
  808038:	d8c00a17 	ldw	r3,40(sp)
  80803c:	157fffc4 	addi	r21,r2,-1
  808040:	1d41f316 	blt	r3,r21,808810 <_dtoa_r+0x1180>
  808044:	1d6bc83a 	sub	r21,r3,r21
  808048:	d9c00617 	ldw	r7,24(sp)
  80804c:	3802aa16 	blt	r7,zero,808af8 <_dtoa_r+0x1468>
  808050:	dd000817 	ldw	r20,32(sp)
  808054:	d8800617 	ldw	r2,24(sp)
  808058:	d8c00817 	ldw	r3,32(sp)
  80805c:	01400044 	movi	r5,1
  808060:	e009883a 	mov	r4,fp
  808064:	1887883a 	add	r3,r3,r2
  808068:	d8c00815 	stw	r3,32(sp)
  80806c:	b0ad883a 	add	r22,r22,r2
  808070:	080a7a80 	call	80a7a8 <__i2b>
  808074:	1023883a 	mov	r17,r2
  808078:	a0000826 	beq	r20,zero,80809c <_dtoa_r+0xa0c>
  80807c:	0580070e 	bge	zero,r22,80809c <_dtoa_r+0xa0c>
  808080:	a005883a 	mov	r2,r20
  808084:	b500b916 	blt	r22,r20,80836c <_dtoa_r+0xcdc>
  808088:	d9000817 	ldw	r4,32(sp)
  80808c:	a0a9c83a 	sub	r20,r20,r2
  808090:	b0adc83a 	sub	r22,r22,r2
  808094:	2089c83a 	sub	r4,r4,r2
  808098:	d9000815 	stw	r4,32(sp)
  80809c:	d9800a17 	ldw	r6,40(sp)
  8080a0:	0181810e 	bge	zero,r6,8086a8 <_dtoa_r+0x1018>
  8080a4:	d9c00b17 	ldw	r7,44(sp)
  8080a8:	3800b326 	beq	r7,zero,808378 <_dtoa_r+0xce8>
  8080ac:	a800b226 	beq	r21,zero,808378 <_dtoa_r+0xce8>
  8080b0:	880b883a 	mov	r5,r17
  8080b4:	a80d883a 	mov	r6,r21
  8080b8:	e009883a 	mov	r4,fp
  8080bc:	080a9dc0 	call	80a9dc <__pow5mult>
  8080c0:	d9800917 	ldw	r6,36(sp)
  8080c4:	100b883a 	mov	r5,r2
  8080c8:	e009883a 	mov	r4,fp
  8080cc:	1023883a 	mov	r17,r2
  8080d0:	080a7e40 	call	80a7e4 <__multiply>
  8080d4:	1021883a 	mov	r16,r2
  8080d8:	d8800a17 	ldw	r2,40(sp)
  8080dc:	d9400917 	ldw	r5,36(sp)
  8080e0:	e009883a 	mov	r4,fp
  8080e4:	1545c83a 	sub	r2,r2,r21
  8080e8:	d8800a15 	stw	r2,40(sp)
  8080ec:	080a4440 	call	80a444 <_Bfree>
  8080f0:	d8c00a17 	ldw	r3,40(sp)
  8080f4:	18009f1e 	bne	r3,zero,808374 <_dtoa_r+0xce4>
  8080f8:	05c00044 	movi	r23,1
  8080fc:	e009883a 	mov	r4,fp
  808100:	b80b883a 	mov	r5,r23
  808104:	080a7a80 	call	80a7a8 <__i2b>
  808108:	d9000d17 	ldw	r4,52(sp)
  80810c:	102b883a 	mov	r21,r2
  808110:	2000ce26 	beq	r4,zero,80844c <_dtoa_r+0xdbc>
  808114:	200d883a 	mov	r6,r4
  808118:	100b883a 	mov	r5,r2
  80811c:	e009883a 	mov	r4,fp
  808120:	080a9dc0 	call	80a9dc <__pow5mult>
  808124:	d9800317 	ldw	r6,12(sp)
  808128:	102b883a 	mov	r21,r2
  80812c:	b981810e 	bge	r23,r6,808734 <_dtoa_r+0x10a4>
  808130:	0027883a 	mov	r19,zero
  808134:	a8800417 	ldw	r2,16(r21)
  808138:	05c00804 	movi	r23,32
  80813c:	10800104 	addi	r2,r2,4
  808140:	1085883a 	add	r2,r2,r2
  808144:	1085883a 	add	r2,r2,r2
  808148:	a885883a 	add	r2,r21,r2
  80814c:	11000017 	ldw	r4,0(r2)
  808150:	080a6900 	call	80a690 <__hi0bits>
  808154:	b885c83a 	sub	r2,r23,r2
  808158:	1585883a 	add	r2,r2,r22
  80815c:	108007cc 	andi	r2,r2,31
  808160:	1000b326 	beq	r2,zero,808430 <_dtoa_r+0xda0>
  808164:	00c00804 	movi	r3,32
  808168:	1887c83a 	sub	r3,r3,r2
  80816c:	01000104 	movi	r4,4
  808170:	20c2cd0e 	bge	r4,r3,808ca8 <_dtoa_r+0x1618>
  808174:	00c00704 	movi	r3,28
  808178:	1885c83a 	sub	r2,r3,r2
  80817c:	d8c00817 	ldw	r3,32(sp)
  808180:	a0a9883a 	add	r20,r20,r2
  808184:	b0ad883a 	add	r22,r22,r2
  808188:	1887883a 	add	r3,r3,r2
  80818c:	d8c00815 	stw	r3,32(sp)
  808190:	d9800817 	ldw	r6,32(sp)
  808194:	0180040e 	bge	zero,r6,8081a8 <_dtoa_r+0xb18>
  808198:	800b883a 	mov	r5,r16
  80819c:	e009883a 	mov	r4,fp
  8081a0:	080ab1c0 	call	80ab1c <__lshift>
  8081a4:	1021883a 	mov	r16,r2
  8081a8:	0580050e 	bge	zero,r22,8081c0 <_dtoa_r+0xb30>
  8081ac:	a80b883a 	mov	r5,r21
  8081b0:	b00d883a 	mov	r6,r22
  8081b4:	e009883a 	mov	r4,fp
  8081b8:	080ab1c0 	call	80ab1c <__lshift>
  8081bc:	102b883a 	mov	r21,r2
  8081c0:	d9c00e17 	ldw	r7,56(sp)
  8081c4:	3801211e 	bne	r7,zero,80864c <_dtoa_r+0xfbc>
  8081c8:	d9800617 	ldw	r6,24(sp)
  8081cc:	0181380e 	bge	zero,r6,8086b0 <_dtoa_r+0x1020>
  8081d0:	d8c00b17 	ldw	r3,44(sp)
  8081d4:	1800ab1e 	bne	r3,zero,808484 <_dtoa_r+0xdf4>
  8081d8:	dc800717 	ldw	r18,28(sp)
  8081dc:	dcc00617 	ldw	r19,24(sp)
  8081e0:	9029883a 	mov	r20,r18
  8081e4:	00000206 	br	8081f0 <_dtoa_r+0xb60>
  8081e8:	080a46c0 	call	80a46c <__multadd>
  8081ec:	1021883a 	mov	r16,r2
  8081f0:	a80b883a 	mov	r5,r21
  8081f4:	8009883a 	mov	r4,r16
  8081f8:	08074900 	call	807490 <quorem>
  8081fc:	10800c04 	addi	r2,r2,48
  808200:	90800005 	stb	r2,0(r18)
  808204:	94800044 	addi	r18,r18,1
  808208:	9507c83a 	sub	r3,r18,r20
  80820c:	000f883a 	mov	r7,zero
  808210:	01800284 	movi	r6,10
  808214:	800b883a 	mov	r5,r16
  808218:	e009883a 	mov	r4,fp
  80821c:	1cfff216 	blt	r3,r19,8081e8 <__alt_mem_onchip_mem+0xff7881e8>
  808220:	1011883a 	mov	r8,r2
  808224:	d8800617 	ldw	r2,24(sp)
  808228:	0082370e 	bge	zero,r2,808b08 <_dtoa_r+0x1478>
  80822c:	d9000717 	ldw	r4,28(sp)
  808230:	0025883a 	mov	r18,zero
  808234:	20af883a 	add	r23,r4,r2
  808238:	01800044 	movi	r6,1
  80823c:	800b883a 	mov	r5,r16
  808240:	e009883a 	mov	r4,fp
  808244:	da001715 	stw	r8,92(sp)
  808248:	080ab1c0 	call	80ab1c <__lshift>
  80824c:	a80b883a 	mov	r5,r21
  808250:	1009883a 	mov	r4,r2
  808254:	d8800915 	stw	r2,36(sp)
  808258:	080ac640 	call	80ac64 <__mcmp>
  80825c:	da001717 	ldw	r8,92(sp)
  808260:	0081800e 	bge	zero,r2,808864 <_dtoa_r+0x11d4>
  808264:	b93fffc3 	ldbu	r4,-1(r23)
  808268:	b8bfffc4 	addi	r2,r23,-1
  80826c:	1007883a 	mov	r3,r2
  808270:	01800e44 	movi	r6,57
  808274:	d9c00717 	ldw	r7,28(sp)
  808278:	00000506 	br	808290 <_dtoa_r+0xc00>
  80827c:	18ffffc4 	addi	r3,r3,-1
  808280:	11c12326 	beq	r2,r7,808710 <_dtoa_r+0x1080>
  808284:	19000003 	ldbu	r4,0(r3)
  808288:	102f883a 	mov	r23,r2
  80828c:	10bfffc4 	addi	r2,r2,-1
  808290:	21403fcc 	andi	r5,r4,255
  808294:	2940201c 	xori	r5,r5,128
  808298:	297fe004 	addi	r5,r5,-128
  80829c:	29bff726 	beq	r5,r6,80827c <__alt_mem_onchip_mem+0xff78827c>
  8082a0:	21000044 	addi	r4,r4,1
  8082a4:	11000005 	stb	r4,0(r2)
  8082a8:	a80b883a 	mov	r5,r21
  8082ac:	e009883a 	mov	r4,fp
  8082b0:	080a4440 	call	80a444 <_Bfree>
  8082b4:	883ea026 	beq	r17,zero,807d38 <__alt_mem_onchip_mem+0xff787d38>
  8082b8:	90000426 	beq	r18,zero,8082cc <_dtoa_r+0xc3c>
  8082bc:	94400326 	beq	r18,r17,8082cc <_dtoa_r+0xc3c>
  8082c0:	900b883a 	mov	r5,r18
  8082c4:	e009883a 	mov	r4,fp
  8082c8:	080a4440 	call	80a444 <_Bfree>
  8082cc:	880b883a 	mov	r5,r17
  8082d0:	e009883a 	mov	r4,fp
  8082d4:	080a4440 	call	80a444 <_Bfree>
  8082d8:	003e9706 	br	807d38 <__alt_mem_onchip_mem+0xff787d38>
  8082dc:	01800044 	movi	r6,1
  8082e0:	d9800e15 	stw	r6,56(sp)
  8082e4:	003d9606 	br	807940 <__alt_mem_onchip_mem+0xff787940>
  8082e8:	d8800817 	ldw	r2,32(sp)
  8082ec:	d8c00517 	ldw	r3,20(sp)
  8082f0:	d8000d15 	stw	zero,52(sp)
  8082f4:	10c5c83a 	sub	r2,r2,r3
  8082f8:	00c9c83a 	sub	r4,zero,r3
  8082fc:	d8800815 	stw	r2,32(sp)
  808300:	d9000a15 	stw	r4,40(sp)
  808304:	003d9706 	br	807964 <__alt_mem_onchip_mem+0xff787964>
  808308:	05adc83a 	sub	r22,zero,r22
  80830c:	dd800815 	stw	r22,32(sp)
  808310:	002d883a 	mov	r22,zero
  808314:	003d8e06 	br	807950 <__alt_mem_onchip_mem+0xff787950>
  808318:	d9000517 	ldw	r4,20(sp)
  80831c:	08108e80 	call	8108e8 <__floatsidf>
  808320:	100d883a 	mov	r6,r2
  808324:	180f883a 	mov	r7,r3
  808328:	a009883a 	mov	r4,r20
  80832c:	880b883a 	mov	r5,r17
  808330:	080f5fc0 	call	80f5fc <__eqdf2>
  808334:	103d7126 	beq	r2,zero,8078fc <__alt_mem_onchip_mem+0xff7878fc>
  808338:	d9c00517 	ldw	r7,20(sp)
  80833c:	39ffffc4 	addi	r7,r7,-1
  808340:	d9c00515 	stw	r7,20(sp)
  808344:	003d6d06 	br	8078fc <__alt_mem_onchip_mem+0xff7878fc>
  808348:	dd400a17 	ldw	r21,40(sp)
  80834c:	dd000817 	ldw	r20,32(sp)
  808350:	0023883a 	mov	r17,zero
  808354:	003f4806 	br	808078 <__alt_mem_onchip_mem+0xff788078>
  808358:	10e3c83a 	sub	r17,r2,r3
  80835c:	9448983a 	sll	r4,r18,r17
  808360:	003d3206 	br	80782c <__alt_mem_onchip_mem+0xff78782c>
  808364:	d8000e15 	stw	zero,56(sp)
  808368:	003d7506 	br	807940 <__alt_mem_onchip_mem+0xff787940>
  80836c:	b005883a 	mov	r2,r22
  808370:	003f4506 	br	808088 <__alt_mem_onchip_mem+0xff788088>
  808374:	dc000915 	stw	r16,36(sp)
  808378:	d9800a17 	ldw	r6,40(sp)
  80837c:	d9400917 	ldw	r5,36(sp)
  808380:	e009883a 	mov	r4,fp
  808384:	080a9dc0 	call	80a9dc <__pow5mult>
  808388:	1021883a 	mov	r16,r2
  80838c:	003f5a06 	br	8080f8 <__alt_mem_onchip_mem+0xff7880f8>
  808390:	01c00044 	movi	r7,1
  808394:	d9c00b15 	stw	r7,44(sp)
  808398:	d8802217 	ldw	r2,136(sp)
  80839c:	0081280e 	bge	zero,r2,808840 <_dtoa_r+0x11b0>
  8083a0:	100d883a 	mov	r6,r2
  8083a4:	1021883a 	mov	r16,r2
  8083a8:	d8800c15 	stw	r2,48(sp)
  8083ac:	d8800615 	stw	r2,24(sp)
  8083b0:	003d8806 	br	8079d4 <__alt_mem_onchip_mem+0xff7879d4>
  8083b4:	d8800617 	ldw	r2,24(sp)
  8083b8:	00be9b16 	blt	zero,r2,807e28 <__alt_mem_onchip_mem+0xff787e28>
  8083bc:	10010f1e 	bne	r2,zero,8087fc <_dtoa_r+0x116c>
  8083c0:	880b883a 	mov	r5,r17
  8083c4:	000d883a 	mov	r6,zero
  8083c8:	01d00534 	movhi	r7,16404
  8083cc:	8009883a 	mov	r4,r16
  8083d0:	080f8540 	call	80f854 <__muldf3>
  8083d4:	900d883a 	mov	r6,r18
  8083d8:	980f883a 	mov	r7,r19
  8083dc:	1009883a 	mov	r4,r2
  8083e0:	180b883a 	mov	r5,r3
  8083e4:	080f6840 	call	80f684 <__gedf2>
  8083e8:	002b883a 	mov	r21,zero
  8083ec:	0023883a 	mov	r17,zero
  8083f0:	1000bf16 	blt	r2,zero,8086f0 <_dtoa_r+0x1060>
  8083f4:	d9802217 	ldw	r6,136(sp)
  8083f8:	ddc00717 	ldw	r23,28(sp)
  8083fc:	018c303a 	nor	r6,zero,r6
  808400:	d9800515 	stw	r6,20(sp)
  808404:	a80b883a 	mov	r5,r21
  808408:	e009883a 	mov	r4,fp
  80840c:	080a4440 	call	80a444 <_Bfree>
  808410:	883e4926 	beq	r17,zero,807d38 <__alt_mem_onchip_mem+0xff787d38>
  808414:	003fad06 	br	8082cc <__alt_mem_onchip_mem+0xff7882cc>
  808418:	d9c01117 	ldw	r7,68(sp)
  80841c:	3801bc26 	beq	r7,zero,808b10 <_dtoa_r+0x1480>
  808420:	10810cc4 	addi	r2,r2,1075
  808424:	dd400a17 	ldw	r21,40(sp)
  808428:	dd000817 	ldw	r20,32(sp)
  80842c:	003f0a06 	br	808058 <__alt_mem_onchip_mem+0xff788058>
  808430:	00800704 	movi	r2,28
  808434:	d9000817 	ldw	r4,32(sp)
  808438:	a0a9883a 	add	r20,r20,r2
  80843c:	b0ad883a 	add	r22,r22,r2
  808440:	2089883a 	add	r4,r4,r2
  808444:	d9000815 	stw	r4,32(sp)
  808448:	003f5106 	br	808190 <__alt_mem_onchip_mem+0xff788190>
  80844c:	d8c00317 	ldw	r3,12(sp)
  808450:	b8c1fc0e 	bge	r23,r3,808c44 <_dtoa_r+0x15b4>
  808454:	0027883a 	mov	r19,zero
  808458:	b805883a 	mov	r2,r23
  80845c:	003f3e06 	br	808158 <__alt_mem_onchip_mem+0xff788158>
  808460:	880b883a 	mov	r5,r17
  808464:	e009883a 	mov	r4,fp
  808468:	000f883a 	mov	r7,zero
  80846c:	01800284 	movi	r6,10
  808470:	080a46c0 	call	80a46c <__multadd>
  808474:	d9000c17 	ldw	r4,48(sp)
  808478:	1023883a 	mov	r17,r2
  80847c:	0102040e 	bge	zero,r4,808c90 <_dtoa_r+0x1600>
  808480:	d9000615 	stw	r4,24(sp)
  808484:	0500050e 	bge	zero,r20,80849c <_dtoa_r+0xe0c>
  808488:	880b883a 	mov	r5,r17
  80848c:	a00d883a 	mov	r6,r20
  808490:	e009883a 	mov	r4,fp
  808494:	080ab1c0 	call	80ab1c <__lshift>
  808498:	1023883a 	mov	r17,r2
  80849c:	9801241e 	bne	r19,zero,808930 <_dtoa_r+0x12a0>
  8084a0:	8829883a 	mov	r20,r17
  8084a4:	d9000617 	ldw	r4,24(sp)
  8084a8:	dcc00717 	ldw	r19,28(sp)
  8084ac:	9480004c 	andi	r18,r18,1
  8084b0:	20bfffc4 	addi	r2,r4,-1
  8084b4:	9885883a 	add	r2,r19,r2
  8084b8:	d8800415 	stw	r2,16(sp)
  8084bc:	dc800615 	stw	r18,24(sp)
  8084c0:	a80b883a 	mov	r5,r21
  8084c4:	8009883a 	mov	r4,r16
  8084c8:	08074900 	call	807490 <quorem>
  8084cc:	880b883a 	mov	r5,r17
  8084d0:	8009883a 	mov	r4,r16
  8084d4:	102f883a 	mov	r23,r2
  8084d8:	080ac640 	call	80ac64 <__mcmp>
  8084dc:	a80b883a 	mov	r5,r21
  8084e0:	a00d883a 	mov	r6,r20
  8084e4:	e009883a 	mov	r4,fp
  8084e8:	102d883a 	mov	r22,r2
  8084ec:	080acc40 	call	80acc4 <__mdiff>
  8084f0:	1007883a 	mov	r3,r2
  8084f4:	10800317 	ldw	r2,12(r2)
  8084f8:	bc800c04 	addi	r18,r23,48
  8084fc:	180b883a 	mov	r5,r3
  808500:	10004e1e 	bne	r2,zero,80863c <_dtoa_r+0xfac>
  808504:	8009883a 	mov	r4,r16
  808508:	d8c01615 	stw	r3,88(sp)
  80850c:	080ac640 	call	80ac64 <__mcmp>
  808510:	d8c01617 	ldw	r3,88(sp)
  808514:	e009883a 	mov	r4,fp
  808518:	d8801615 	stw	r2,88(sp)
  80851c:	180b883a 	mov	r5,r3
  808520:	080a4440 	call	80a444 <_Bfree>
  808524:	d8801617 	ldw	r2,88(sp)
  808528:	1000041e 	bne	r2,zero,80853c <_dtoa_r+0xeac>
  80852c:	d9800317 	ldw	r6,12(sp)
  808530:	3000021e 	bne	r6,zero,80853c <_dtoa_r+0xeac>
  808534:	d8c00617 	ldw	r3,24(sp)
  808538:	18003726 	beq	r3,zero,808618 <_dtoa_r+0xf88>
  80853c:	b0002016 	blt	r22,zero,8085c0 <_dtoa_r+0xf30>
  808540:	b000041e 	bne	r22,zero,808554 <_dtoa_r+0xec4>
  808544:	d9000317 	ldw	r4,12(sp)
  808548:	2000021e 	bne	r4,zero,808554 <_dtoa_r+0xec4>
  80854c:	d8c00617 	ldw	r3,24(sp)
  808550:	18001b26 	beq	r3,zero,8085c0 <_dtoa_r+0xf30>
  808554:	00810716 	blt	zero,r2,808974 <_dtoa_r+0x12e4>
  808558:	d8c00417 	ldw	r3,16(sp)
  80855c:	9d800044 	addi	r22,r19,1
  808560:	9c800005 	stb	r18,0(r19)
  808564:	b02f883a 	mov	r23,r22
  808568:	98c10626 	beq	r19,r3,808984 <_dtoa_r+0x12f4>
  80856c:	800b883a 	mov	r5,r16
  808570:	000f883a 	mov	r7,zero
  808574:	01800284 	movi	r6,10
  808578:	e009883a 	mov	r4,fp
  80857c:	080a46c0 	call	80a46c <__multadd>
  808580:	1021883a 	mov	r16,r2
  808584:	000f883a 	mov	r7,zero
  808588:	01800284 	movi	r6,10
  80858c:	880b883a 	mov	r5,r17
  808590:	e009883a 	mov	r4,fp
  808594:	8d002526 	beq	r17,r20,80862c <_dtoa_r+0xf9c>
  808598:	080a46c0 	call	80a46c <__multadd>
  80859c:	a00b883a 	mov	r5,r20
  8085a0:	000f883a 	mov	r7,zero
  8085a4:	01800284 	movi	r6,10
  8085a8:	e009883a 	mov	r4,fp
  8085ac:	1023883a 	mov	r17,r2
  8085b0:	080a46c0 	call	80a46c <__multadd>
  8085b4:	1029883a 	mov	r20,r2
  8085b8:	b027883a 	mov	r19,r22
  8085bc:	003fc006 	br	8084c0 <__alt_mem_onchip_mem+0xff7884c0>
  8085c0:	9011883a 	mov	r8,r18
  8085c4:	00800e0e 	bge	zero,r2,808600 <_dtoa_r+0xf70>
  8085c8:	800b883a 	mov	r5,r16
  8085cc:	01800044 	movi	r6,1
  8085d0:	e009883a 	mov	r4,fp
  8085d4:	da001715 	stw	r8,92(sp)
  8085d8:	080ab1c0 	call	80ab1c <__lshift>
  8085dc:	a80b883a 	mov	r5,r21
  8085e0:	1009883a 	mov	r4,r2
  8085e4:	1021883a 	mov	r16,r2
  8085e8:	080ac640 	call	80ac64 <__mcmp>
  8085ec:	da001717 	ldw	r8,92(sp)
  8085f0:	0081960e 	bge	zero,r2,808c4c <_dtoa_r+0x15bc>
  8085f4:	00800e44 	movi	r2,57
  8085f8:	40817026 	beq	r8,r2,808bbc <_dtoa_r+0x152c>
  8085fc:	ba000c44 	addi	r8,r23,49
  808600:	8825883a 	mov	r18,r17
  808604:	9dc00044 	addi	r23,r19,1
  808608:	9a000005 	stb	r8,0(r19)
  80860c:	a023883a 	mov	r17,r20
  808610:	dc000915 	stw	r16,36(sp)
  808614:	003f2406 	br	8082a8 <__alt_mem_onchip_mem+0xff7882a8>
  808618:	00800e44 	movi	r2,57
  80861c:	9011883a 	mov	r8,r18
  808620:	90816626 	beq	r18,r2,808bbc <_dtoa_r+0x152c>
  808624:	05bff516 	blt	zero,r22,8085fc <__alt_mem_onchip_mem+0xff7885fc>
  808628:	003ff506 	br	808600 <__alt_mem_onchip_mem+0xff788600>
  80862c:	080a46c0 	call	80a46c <__multadd>
  808630:	1023883a 	mov	r17,r2
  808634:	1029883a 	mov	r20,r2
  808638:	003fdf06 	br	8085b8 <__alt_mem_onchip_mem+0xff7885b8>
  80863c:	e009883a 	mov	r4,fp
  808640:	080a4440 	call	80a444 <_Bfree>
  808644:	00800044 	movi	r2,1
  808648:	003fbc06 	br	80853c <__alt_mem_onchip_mem+0xff78853c>
  80864c:	a80b883a 	mov	r5,r21
  808650:	8009883a 	mov	r4,r16
  808654:	080ac640 	call	80ac64 <__mcmp>
  808658:	103edb0e 	bge	r2,zero,8081c8 <__alt_mem_onchip_mem+0xff7881c8>
  80865c:	800b883a 	mov	r5,r16
  808660:	000f883a 	mov	r7,zero
  808664:	01800284 	movi	r6,10
  808668:	e009883a 	mov	r4,fp
  80866c:	080a46c0 	call	80a46c <__multadd>
  808670:	1021883a 	mov	r16,r2
  808674:	d8800517 	ldw	r2,20(sp)
  808678:	d8c00b17 	ldw	r3,44(sp)
  80867c:	10bfffc4 	addi	r2,r2,-1
  808680:	d8800515 	stw	r2,20(sp)
  808684:	183f761e 	bne	r3,zero,808460 <__alt_mem_onchip_mem+0xff788460>
  808688:	d9000c17 	ldw	r4,48(sp)
  80868c:	0101730e 	bge	zero,r4,808c5c <_dtoa_r+0x15cc>
  808690:	d9000615 	stw	r4,24(sp)
  808694:	003ed006 	br	8081d8 <__alt_mem_onchip_mem+0xff7881d8>
  808698:	00800084 	movi	r2,2
  80869c:	3081861e 	bne	r6,r2,808cb8 <_dtoa_r+0x1628>
  8086a0:	d8000b15 	stw	zero,44(sp)
  8086a4:	003f3c06 	br	808398 <__alt_mem_onchip_mem+0xff788398>
  8086a8:	dc000917 	ldw	r16,36(sp)
  8086ac:	003e9206 	br	8080f8 <__alt_mem_onchip_mem+0xff7880f8>
  8086b0:	d9c00317 	ldw	r7,12(sp)
  8086b4:	00800084 	movi	r2,2
  8086b8:	11fec50e 	bge	r2,r7,8081d0 <__alt_mem_onchip_mem+0xff7881d0>
  8086bc:	d9000617 	ldw	r4,24(sp)
  8086c0:	20013c1e 	bne	r4,zero,808bb4 <_dtoa_r+0x1524>
  8086c4:	a80b883a 	mov	r5,r21
  8086c8:	000f883a 	mov	r7,zero
  8086cc:	01800144 	movi	r6,5
  8086d0:	e009883a 	mov	r4,fp
  8086d4:	080a46c0 	call	80a46c <__multadd>
  8086d8:	100b883a 	mov	r5,r2
  8086dc:	8009883a 	mov	r4,r16
  8086e0:	102b883a 	mov	r21,r2
  8086e4:	080ac640 	call	80ac64 <__mcmp>
  8086e8:	dc000915 	stw	r16,36(sp)
  8086ec:	00bf410e 	bge	zero,r2,8083f4 <__alt_mem_onchip_mem+0xff7883f4>
  8086f0:	d9c00717 	ldw	r7,28(sp)
  8086f4:	00800c44 	movi	r2,49
  8086f8:	38800005 	stb	r2,0(r7)
  8086fc:	d8800517 	ldw	r2,20(sp)
  808700:	3dc00044 	addi	r23,r7,1
  808704:	10800044 	addi	r2,r2,1
  808708:	d8800515 	stw	r2,20(sp)
  80870c:	003f3d06 	br	808404 <__alt_mem_onchip_mem+0xff788404>
  808710:	d9800517 	ldw	r6,20(sp)
  808714:	d9c00717 	ldw	r7,28(sp)
  808718:	00800c44 	movi	r2,49
  80871c:	31800044 	addi	r6,r6,1
  808720:	d9800515 	stw	r6,20(sp)
  808724:	38800005 	stb	r2,0(r7)
  808728:	003edf06 	br	8082a8 <__alt_mem_onchip_mem+0xff7882a8>
  80872c:	d8000b15 	stw	zero,44(sp)
  808730:	003c9f06 	br	8079b0 <__alt_mem_onchip_mem+0xff7879b0>
  808734:	903e7e1e 	bne	r18,zero,808130 <__alt_mem_onchip_mem+0xff788130>
  808738:	00800434 	movhi	r2,16
  80873c:	10bfffc4 	addi	r2,r2,-1
  808740:	9884703a 	and	r2,r19,r2
  808744:	1000ea1e 	bne	r2,zero,808af0 <_dtoa_r+0x1460>
  808748:	9cdffc2c 	andhi	r19,r19,32752
  80874c:	9800e826 	beq	r19,zero,808af0 <_dtoa_r+0x1460>
  808750:	d9c00817 	ldw	r7,32(sp)
  808754:	b5800044 	addi	r22,r22,1
  808758:	04c00044 	movi	r19,1
  80875c:	39c00044 	addi	r7,r7,1
  808760:	d9c00815 	stw	r7,32(sp)
  808764:	d8800d17 	ldw	r2,52(sp)
  808768:	103e721e 	bne	r2,zero,808134 <__alt_mem_onchip_mem+0xff788134>
  80876c:	00800044 	movi	r2,1
  808770:	003e7906 	br	808158 <__alt_mem_onchip_mem+0xff788158>
  808774:	8009883a 	mov	r4,r16
  808778:	08108e80 	call	8108e8 <__floatsidf>
  80877c:	d9800f17 	ldw	r6,60(sp)
  808780:	d9c01017 	ldw	r7,64(sp)
  808784:	1009883a 	mov	r4,r2
  808788:	180b883a 	mov	r5,r3
  80878c:	080f8540 	call	80f854 <__muldf3>
  808790:	000d883a 	mov	r6,zero
  808794:	01d00734 	movhi	r7,16412
  808798:	1009883a 	mov	r4,r2
  80879c:	180b883a 	mov	r5,r3
  8087a0:	080e4680 	call	80e468 <__adddf3>
  8087a4:	047f3034 	movhi	r17,64704
  8087a8:	1021883a 	mov	r16,r2
  8087ac:	1c63883a 	add	r17,r3,r17
  8087b0:	d9000f17 	ldw	r4,60(sp)
  8087b4:	d9401017 	ldw	r5,64(sp)
  8087b8:	000d883a 	mov	r6,zero
  8087bc:	01d00534 	movhi	r7,16404
  8087c0:	080ff6c0 	call	80ff6c <__subdf3>
  8087c4:	800d883a 	mov	r6,r16
  8087c8:	880f883a 	mov	r7,r17
  8087cc:	1009883a 	mov	r4,r2
  8087d0:	180b883a 	mov	r5,r3
  8087d4:	102b883a 	mov	r21,r2
  8087d8:	1829883a 	mov	r20,r3
  8087dc:	080f6840 	call	80f684 <__gedf2>
  8087e0:	00806c16 	blt	zero,r2,808994 <_dtoa_r+0x1304>
  8087e4:	89e0003c 	xorhi	r7,r17,32768
  8087e8:	800d883a 	mov	r6,r16
  8087ec:	a809883a 	mov	r4,r21
  8087f0:	a00b883a 	mov	r5,r20
  8087f4:	080f7600 	call	80f760 <__ledf2>
  8087f8:	103d7e0e 	bge	r2,zero,807df4 <__alt_mem_onchip_mem+0xff787df4>
  8087fc:	002b883a 	mov	r21,zero
  808800:	0023883a 	mov	r17,zero
  808804:	003efb06 	br	8083f4 <__alt_mem_onchip_mem+0xff7883f4>
  808808:	d8800717 	ldw	r2,28(sp)
  80880c:	003bd006 	br	807750 <__alt_mem_onchip_mem+0xff787750>
  808810:	d9000a17 	ldw	r4,40(sp)
  808814:	d9800d17 	ldw	r6,52(sp)
  808818:	dd400a15 	stw	r21,40(sp)
  80881c:	a905c83a 	sub	r2,r21,r4
  808820:	308d883a 	add	r6,r6,r2
  808824:	d9800d15 	stw	r6,52(sp)
  808828:	002b883a 	mov	r21,zero
  80882c:	003e0606 	br	808048 <__alt_mem_onchip_mem+0xff788048>
  808830:	9023883a 	mov	r17,r18
  808834:	9829883a 	mov	r20,r19
  808838:	04000084 	movi	r16,2
  80883c:	003c9206 	br	807a88 <__alt_mem_onchip_mem+0xff787a88>
  808840:	04000044 	movi	r16,1
  808844:	dc000c15 	stw	r16,48(sp)
  808848:	dc000615 	stw	r16,24(sp)
  80884c:	dc002215 	stw	r16,136(sp)
  808850:	e0001115 	stw	zero,68(fp)
  808854:	000b883a 	mov	r5,zero
  808858:	003c6906 	br	807a00 <__alt_mem_onchip_mem+0xff787a00>
  80885c:	3021883a 	mov	r16,r6
  808860:	003ffb06 	br	808850 <__alt_mem_onchip_mem+0xff788850>
  808864:	1000021e 	bne	r2,zero,808870 <_dtoa_r+0x11e0>
  808868:	4200004c 	andi	r8,r8,1
  80886c:	403e7d1e 	bne	r8,zero,808264 <__alt_mem_onchip_mem+0xff788264>
  808870:	01000c04 	movi	r4,48
  808874:	00000106 	br	80887c <_dtoa_r+0x11ec>
  808878:	102f883a 	mov	r23,r2
  80887c:	b8bfffc4 	addi	r2,r23,-1
  808880:	10c00007 	ldb	r3,0(r2)
  808884:	193ffc26 	beq	r3,r4,808878 <__alt_mem_onchip_mem+0xff788878>
  808888:	003e8706 	br	8082a8 <__alt_mem_onchip_mem+0xff7882a8>
  80888c:	d8800517 	ldw	r2,20(sp)
  808890:	00a3c83a 	sub	r17,zero,r2
  808894:	8800a426 	beq	r17,zero,808b28 <_dtoa_r+0x1498>
  808898:	888003cc 	andi	r2,r17,15
  80889c:	100490fa 	slli	r2,r2,3
  8088a0:	00c02074 	movhi	r3,129
  8088a4:	18d3e404 	addi	r3,r3,20368
  8088a8:	1885883a 	add	r2,r3,r2
  8088ac:	11800017 	ldw	r6,0(r2)
  8088b0:	11c00117 	ldw	r7,4(r2)
  8088b4:	9009883a 	mov	r4,r18
  8088b8:	980b883a 	mov	r5,r19
  8088bc:	8823d13a 	srai	r17,r17,4
  8088c0:	080f8540 	call	80f854 <__muldf3>
  8088c4:	d8800f15 	stw	r2,60(sp)
  8088c8:	d8c01015 	stw	r3,64(sp)
  8088cc:	8800e826 	beq	r17,zero,808c70 <_dtoa_r+0x15e0>
  8088d0:	05002074 	movhi	r20,129
  8088d4:	a513da04 	addi	r20,r20,20328
  8088d8:	04000084 	movi	r16,2
  8088dc:	8980004c 	andi	r6,r17,1
  8088e0:	1009883a 	mov	r4,r2
  8088e4:	8823d07a 	srai	r17,r17,1
  8088e8:	180b883a 	mov	r5,r3
  8088ec:	30000426 	beq	r6,zero,808900 <_dtoa_r+0x1270>
  8088f0:	a1800017 	ldw	r6,0(r20)
  8088f4:	a1c00117 	ldw	r7,4(r20)
  8088f8:	84000044 	addi	r16,r16,1
  8088fc:	080f8540 	call	80f854 <__muldf3>
  808900:	a5000204 	addi	r20,r20,8
  808904:	883ff51e 	bne	r17,zero,8088dc <__alt_mem_onchip_mem+0xff7888dc>
  808908:	d8800f15 	stw	r2,60(sp)
  80890c:	d8c01015 	stw	r3,64(sp)
  808910:	003c7606 	br	807aec <__alt_mem_onchip_mem+0xff787aec>
  808914:	00c00c04 	movi	r3,48
  808918:	10c00005 	stb	r3,0(r2)
  80891c:	d8c00517 	ldw	r3,20(sp)
  808920:	bd3fffc3 	ldbu	r20,-1(r23)
  808924:	18c00044 	addi	r3,r3,1
  808928:	d8c00515 	stw	r3,20(sp)
  80892c:	003db906 	br	808014 <__alt_mem_onchip_mem+0xff788014>
  808930:	89400117 	ldw	r5,4(r17)
  808934:	e009883a 	mov	r4,fp
  808938:	080a39c0 	call	80a39c <_Balloc>
  80893c:	89800417 	ldw	r6,16(r17)
  808940:	89400304 	addi	r5,r17,12
  808944:	11000304 	addi	r4,r2,12
  808948:	31800084 	addi	r6,r6,2
  80894c:	318d883a 	add	r6,r6,r6
  808950:	318d883a 	add	r6,r6,r6
  808954:	1027883a 	mov	r19,r2
  808958:	080a0f80 	call	80a0f8 <memcpy>
  80895c:	01800044 	movi	r6,1
  808960:	980b883a 	mov	r5,r19
  808964:	e009883a 	mov	r4,fp
  808968:	080ab1c0 	call	80ab1c <__lshift>
  80896c:	1029883a 	mov	r20,r2
  808970:	003ecc06 	br	8084a4 <__alt_mem_onchip_mem+0xff7884a4>
  808974:	00800e44 	movi	r2,57
  808978:	90809026 	beq	r18,r2,808bbc <_dtoa_r+0x152c>
  80897c:	92000044 	addi	r8,r18,1
  808980:	003f1f06 	br	808600 <__alt_mem_onchip_mem+0xff788600>
  808984:	9011883a 	mov	r8,r18
  808988:	8825883a 	mov	r18,r17
  80898c:	a023883a 	mov	r17,r20
  808990:	003e2906 	br	808238 <__alt_mem_onchip_mem+0xff788238>
  808994:	002b883a 	mov	r21,zero
  808998:	0023883a 	mov	r17,zero
  80899c:	003f5406 	br	8086f0 <__alt_mem_onchip_mem+0xff7886f0>
  8089a0:	61bfffc4 	addi	r6,r12,-1
  8089a4:	300490fa 	slli	r2,r6,3
  8089a8:	00c02074 	movhi	r3,129
  8089ac:	18d3e404 	addi	r3,r3,20368
  8089b0:	1885883a 	add	r2,r3,r2
  8089b4:	11000017 	ldw	r4,0(r2)
  8089b8:	11400117 	ldw	r5,4(r2)
  8089bc:	d8800717 	ldw	r2,28(sp)
  8089c0:	880f883a 	mov	r7,r17
  8089c4:	d9801215 	stw	r6,72(sp)
  8089c8:	800d883a 	mov	r6,r16
  8089cc:	db001615 	stw	r12,88(sp)
  8089d0:	15c00044 	addi	r23,r2,1
  8089d4:	080f8540 	call	80f854 <__muldf3>
  8089d8:	d9401017 	ldw	r5,64(sp)
  8089dc:	d9000f17 	ldw	r4,60(sp)
  8089e0:	d8c01515 	stw	r3,84(sp)
  8089e4:	d8801415 	stw	r2,80(sp)
  8089e8:	08108680 	call	810868 <__fixdfsi>
  8089ec:	1009883a 	mov	r4,r2
  8089f0:	1021883a 	mov	r16,r2
  8089f4:	08108e80 	call	8108e8 <__floatsidf>
  8089f8:	d9000f17 	ldw	r4,60(sp)
  8089fc:	d9401017 	ldw	r5,64(sp)
  808a00:	100d883a 	mov	r6,r2
  808a04:	180f883a 	mov	r7,r3
  808a08:	080ff6c0 	call	80ff6c <__subdf3>
  808a0c:	1829883a 	mov	r20,r3
  808a10:	d8c00717 	ldw	r3,28(sp)
  808a14:	84000c04 	addi	r16,r16,48
  808a18:	1023883a 	mov	r17,r2
  808a1c:	1c000005 	stb	r16,0(r3)
  808a20:	db001617 	ldw	r12,88(sp)
  808a24:	00800044 	movi	r2,1
  808a28:	60802226 	beq	r12,r2,808ab4 <_dtoa_r+0x1424>
  808a2c:	d9c00717 	ldw	r7,28(sp)
  808a30:	8805883a 	mov	r2,r17
  808a34:	b82b883a 	mov	r21,r23
  808a38:	3b19883a 	add	r12,r7,r12
  808a3c:	6023883a 	mov	r17,r12
  808a40:	a007883a 	mov	r3,r20
  808a44:	dc800f15 	stw	r18,60(sp)
  808a48:	000d883a 	mov	r6,zero
  808a4c:	01d00934 	movhi	r7,16420
  808a50:	1009883a 	mov	r4,r2
  808a54:	180b883a 	mov	r5,r3
  808a58:	080f8540 	call	80f854 <__muldf3>
  808a5c:	180b883a 	mov	r5,r3
  808a60:	1009883a 	mov	r4,r2
  808a64:	1829883a 	mov	r20,r3
  808a68:	1025883a 	mov	r18,r2
  808a6c:	08108680 	call	810868 <__fixdfsi>
  808a70:	1009883a 	mov	r4,r2
  808a74:	1021883a 	mov	r16,r2
  808a78:	08108e80 	call	8108e8 <__floatsidf>
  808a7c:	100d883a 	mov	r6,r2
  808a80:	180f883a 	mov	r7,r3
  808a84:	9009883a 	mov	r4,r18
  808a88:	a00b883a 	mov	r5,r20
  808a8c:	84000c04 	addi	r16,r16,48
  808a90:	080ff6c0 	call	80ff6c <__subdf3>
  808a94:	ad400044 	addi	r21,r21,1
  808a98:	ac3fffc5 	stb	r16,-1(r21)
  808a9c:	ac7fea1e 	bne	r21,r17,808a48 <__alt_mem_onchip_mem+0xff788a48>
  808aa0:	1023883a 	mov	r17,r2
  808aa4:	d8801217 	ldw	r2,72(sp)
  808aa8:	dc800f17 	ldw	r18,60(sp)
  808aac:	1829883a 	mov	r20,r3
  808ab0:	b8af883a 	add	r23,r23,r2
  808ab4:	d9001417 	ldw	r4,80(sp)
  808ab8:	d9401517 	ldw	r5,84(sp)
  808abc:	000d883a 	mov	r6,zero
  808ac0:	01cff834 	movhi	r7,16352
  808ac4:	080e4680 	call	80e468 <__adddf3>
  808ac8:	880d883a 	mov	r6,r17
  808acc:	a00f883a 	mov	r7,r20
  808ad0:	1009883a 	mov	r4,r2
  808ad4:	180b883a 	mov	r5,r3
  808ad8:	080f7600 	call	80f760 <__ledf2>
  808adc:	10003e0e 	bge	r2,zero,808bd8 <_dtoa_r+0x1548>
  808ae0:	d9001317 	ldw	r4,76(sp)
  808ae4:	bd3fffc3 	ldbu	r20,-1(r23)
  808ae8:	d9000515 	stw	r4,20(sp)
  808aec:	003d3b06 	br	807fdc <__alt_mem_onchip_mem+0xff787fdc>
  808af0:	0027883a 	mov	r19,zero
  808af4:	003f1b06 	br	808764 <__alt_mem_onchip_mem+0xff788764>
  808af8:	d8800817 	ldw	r2,32(sp)
  808afc:	11e9c83a 	sub	r20,r2,r7
  808b00:	0005883a 	mov	r2,zero
  808b04:	003d5406 	br	808058 <__alt_mem_onchip_mem+0xff788058>
  808b08:	00800044 	movi	r2,1
  808b0c:	003dc706 	br	80822c <__alt_mem_onchip_mem+0xff78822c>
  808b10:	d8c00217 	ldw	r3,8(sp)
  808b14:	00800d84 	movi	r2,54
  808b18:	dd400a17 	ldw	r21,40(sp)
  808b1c:	10c5c83a 	sub	r2,r2,r3
  808b20:	dd000817 	ldw	r20,32(sp)
  808b24:	003d4c06 	br	808058 <__alt_mem_onchip_mem+0xff788058>
  808b28:	dc800f15 	stw	r18,60(sp)
  808b2c:	dcc01015 	stw	r19,64(sp)
  808b30:	04000084 	movi	r16,2
  808b34:	003bed06 	br	807aec <__alt_mem_onchip_mem+0xff787aec>
  808b38:	d9000617 	ldw	r4,24(sp)
  808b3c:	203f0d26 	beq	r4,zero,808774 <__alt_mem_onchip_mem+0xff788774>
  808b40:	d9800c17 	ldw	r6,48(sp)
  808b44:	01bcab0e 	bge	zero,r6,807df4 <__alt_mem_onchip_mem+0xff787df4>
  808b48:	d9401017 	ldw	r5,64(sp)
  808b4c:	d9000f17 	ldw	r4,60(sp)
  808b50:	000d883a 	mov	r6,zero
  808b54:	01d00934 	movhi	r7,16420
  808b58:	080f8540 	call	80f854 <__muldf3>
  808b5c:	81000044 	addi	r4,r16,1
  808b60:	d8800f15 	stw	r2,60(sp)
  808b64:	d8c01015 	stw	r3,64(sp)
  808b68:	08108e80 	call	8108e8 <__floatsidf>
  808b6c:	d9800f17 	ldw	r6,60(sp)
  808b70:	d9c01017 	ldw	r7,64(sp)
  808b74:	1009883a 	mov	r4,r2
  808b78:	180b883a 	mov	r5,r3
  808b7c:	080f8540 	call	80f854 <__muldf3>
  808b80:	01d00734 	movhi	r7,16412
  808b84:	000d883a 	mov	r6,zero
  808b88:	1009883a 	mov	r4,r2
  808b8c:	180b883a 	mov	r5,r3
  808b90:	080e4680 	call	80e468 <__adddf3>
  808b94:	d9c00517 	ldw	r7,20(sp)
  808b98:	047f3034 	movhi	r17,64704
  808b9c:	1021883a 	mov	r16,r2
  808ba0:	39ffffc4 	addi	r7,r7,-1
  808ba4:	d9c01315 	stw	r7,76(sp)
  808ba8:	1c63883a 	add	r17,r3,r17
  808bac:	db000c17 	ldw	r12,48(sp)
  808bb0:	003bea06 	br	807b5c <__alt_mem_onchip_mem+0xff787b5c>
  808bb4:	dc000915 	stw	r16,36(sp)
  808bb8:	003e0e06 	br	8083f4 <__alt_mem_onchip_mem+0xff7883f4>
  808bbc:	01000e44 	movi	r4,57
  808bc0:	8825883a 	mov	r18,r17
  808bc4:	9dc00044 	addi	r23,r19,1
  808bc8:	99000005 	stb	r4,0(r19)
  808bcc:	a023883a 	mov	r17,r20
  808bd0:	dc000915 	stw	r16,36(sp)
  808bd4:	003da406 	br	808268 <__alt_mem_onchip_mem+0xff788268>
  808bd8:	d9801417 	ldw	r6,80(sp)
  808bdc:	d9c01517 	ldw	r7,84(sp)
  808be0:	0009883a 	mov	r4,zero
  808be4:	014ff834 	movhi	r5,16352
  808be8:	080ff6c0 	call	80ff6c <__subdf3>
  808bec:	880d883a 	mov	r6,r17
  808bf0:	a00f883a 	mov	r7,r20
  808bf4:	1009883a 	mov	r4,r2
  808bf8:	180b883a 	mov	r5,r3
  808bfc:	080f6840 	call	80f684 <__gedf2>
  808c00:	00bc7c0e 	bge	zero,r2,807df4 <__alt_mem_onchip_mem+0xff787df4>
  808c04:	01000c04 	movi	r4,48
  808c08:	00000106 	br	808c10 <_dtoa_r+0x1580>
  808c0c:	102f883a 	mov	r23,r2
  808c10:	b8bfffc4 	addi	r2,r23,-1
  808c14:	10c00007 	ldb	r3,0(r2)
  808c18:	193ffc26 	beq	r3,r4,808c0c <__alt_mem_onchip_mem+0xff788c0c>
  808c1c:	d9801317 	ldw	r6,76(sp)
  808c20:	d9800515 	stw	r6,20(sp)
  808c24:	003c4406 	br	807d38 <__alt_mem_onchip_mem+0xff787d38>
  808c28:	d9801317 	ldw	r6,76(sp)
  808c2c:	d9800515 	stw	r6,20(sp)
  808c30:	003cea06 	br	807fdc <__alt_mem_onchip_mem+0xff787fdc>
  808c34:	dd800f17 	ldw	r22,60(sp)
  808c38:	dcc01017 	ldw	r19,64(sp)
  808c3c:	dc801217 	ldw	r18,72(sp)
  808c40:	003c6c06 	br	807df4 <__alt_mem_onchip_mem+0xff787df4>
  808c44:	903e031e 	bne	r18,zero,808454 <__alt_mem_onchip_mem+0xff788454>
  808c48:	003ebb06 	br	808738 <__alt_mem_onchip_mem+0xff788738>
  808c4c:	103e6c1e 	bne	r2,zero,808600 <__alt_mem_onchip_mem+0xff788600>
  808c50:	4080004c 	andi	r2,r8,1
  808c54:	103e6a26 	beq	r2,zero,808600 <__alt_mem_onchip_mem+0xff788600>
  808c58:	003e6606 	br	8085f4 <__alt_mem_onchip_mem+0xff7885f4>
  808c5c:	d8c00317 	ldw	r3,12(sp)
  808c60:	00800084 	movi	r2,2
  808c64:	10c02916 	blt	r2,r3,808d0c <_dtoa_r+0x167c>
  808c68:	d9000c17 	ldw	r4,48(sp)
  808c6c:	003e8806 	br	808690 <__alt_mem_onchip_mem+0xff788690>
  808c70:	04000084 	movi	r16,2
  808c74:	003b9d06 	br	807aec <__alt_mem_onchip_mem+0xff787aec>
  808c78:	d9001317 	ldw	r4,76(sp)
  808c7c:	d9000515 	stw	r4,20(sp)
  808c80:	003cd606 	br	807fdc <__alt_mem_onchip_mem+0xff787fdc>
  808c84:	d8801317 	ldw	r2,76(sp)
  808c88:	d8800515 	stw	r2,20(sp)
  808c8c:	003c2a06 	br	807d38 <__alt_mem_onchip_mem+0xff787d38>
  808c90:	d9800317 	ldw	r6,12(sp)
  808c94:	00800084 	movi	r2,2
  808c98:	11801516 	blt	r2,r6,808cf0 <_dtoa_r+0x1660>
  808c9c:	d9c00c17 	ldw	r7,48(sp)
  808ca0:	d9c00615 	stw	r7,24(sp)
  808ca4:	003df706 	br	808484 <__alt_mem_onchip_mem+0xff788484>
  808ca8:	193d3926 	beq	r3,r4,808190 <__alt_mem_onchip_mem+0xff788190>
  808cac:	00c00f04 	movi	r3,60
  808cb0:	1885c83a 	sub	r2,r3,r2
  808cb4:	003ddf06 	br	808434 <__alt_mem_onchip_mem+0xff788434>
  808cb8:	e009883a 	mov	r4,fp
  808cbc:	e0001115 	stw	zero,68(fp)
  808cc0:	000b883a 	mov	r5,zero
  808cc4:	080a39c0 	call	80a39c <_Balloc>
  808cc8:	d8800715 	stw	r2,28(sp)
  808ccc:	d8c00717 	ldw	r3,28(sp)
  808cd0:	00bfffc4 	movi	r2,-1
  808cd4:	01000044 	movi	r4,1
  808cd8:	d8800c15 	stw	r2,48(sp)
  808cdc:	e0c01015 	stw	r3,64(fp)
  808ce0:	d9000b15 	stw	r4,44(sp)
  808ce4:	d8800615 	stw	r2,24(sp)
  808ce8:	d8002215 	stw	zero,136(sp)
  808cec:	003c4106 	br	807df4 <__alt_mem_onchip_mem+0xff787df4>
  808cf0:	d8c00c17 	ldw	r3,48(sp)
  808cf4:	d8c00615 	stw	r3,24(sp)
  808cf8:	003e7006 	br	8086bc <__alt_mem_onchip_mem+0xff7886bc>
  808cfc:	04400044 	movi	r17,1
  808d00:	003b2006 	br	807984 <__alt_mem_onchip_mem+0xff787984>
  808d04:	000b883a 	mov	r5,zero
  808d08:	003b3d06 	br	807a00 <__alt_mem_onchip_mem+0xff787a00>
  808d0c:	d8800c17 	ldw	r2,48(sp)
  808d10:	d8800615 	stw	r2,24(sp)
  808d14:	003e6906 	br	8086bc <__alt_mem_onchip_mem+0xff7886bc>

00808d18 <__sflush_r>:
  808d18:	2880030b 	ldhu	r2,12(r5)
  808d1c:	defffb04 	addi	sp,sp,-20
  808d20:	dcc00315 	stw	r19,12(sp)
  808d24:	dc400115 	stw	r17,4(sp)
  808d28:	dfc00415 	stw	ra,16(sp)
  808d2c:	dc800215 	stw	r18,8(sp)
  808d30:	dc000015 	stw	r16,0(sp)
  808d34:	10c0020c 	andi	r3,r2,8
  808d38:	2823883a 	mov	r17,r5
  808d3c:	2027883a 	mov	r19,r4
  808d40:	1800311e 	bne	r3,zero,808e08 <__sflush_r+0xf0>
  808d44:	28c00117 	ldw	r3,4(r5)
  808d48:	10820014 	ori	r2,r2,2048
  808d4c:	2880030d 	sth	r2,12(r5)
  808d50:	00c04b0e 	bge	zero,r3,808e80 <__sflush_r+0x168>
  808d54:	8a000a17 	ldw	r8,40(r17)
  808d58:	40002326 	beq	r8,zero,808de8 <__sflush_r+0xd0>
  808d5c:	9c000017 	ldw	r16,0(r19)
  808d60:	10c4000c 	andi	r3,r2,4096
  808d64:	98000015 	stw	zero,0(r19)
  808d68:	18004826 	beq	r3,zero,808e8c <__sflush_r+0x174>
  808d6c:	89801417 	ldw	r6,80(r17)
  808d70:	10c0010c 	andi	r3,r2,4
  808d74:	18000626 	beq	r3,zero,808d90 <__sflush_r+0x78>
  808d78:	88c00117 	ldw	r3,4(r17)
  808d7c:	88800c17 	ldw	r2,48(r17)
  808d80:	30cdc83a 	sub	r6,r6,r3
  808d84:	10000226 	beq	r2,zero,808d90 <__sflush_r+0x78>
  808d88:	88800f17 	ldw	r2,60(r17)
  808d8c:	308dc83a 	sub	r6,r6,r2
  808d90:	89400717 	ldw	r5,28(r17)
  808d94:	000f883a 	mov	r7,zero
  808d98:	9809883a 	mov	r4,r19
  808d9c:	403ee83a 	callr	r8
  808da0:	00ffffc4 	movi	r3,-1
  808da4:	10c04426 	beq	r2,r3,808eb8 <__sflush_r+0x1a0>
  808da8:	88c0030b 	ldhu	r3,12(r17)
  808dac:	89000417 	ldw	r4,16(r17)
  808db0:	88000115 	stw	zero,4(r17)
  808db4:	197dffcc 	andi	r5,r3,63487
  808db8:	8940030d 	sth	r5,12(r17)
  808dbc:	89000015 	stw	r4,0(r17)
  808dc0:	18c4000c 	andi	r3,r3,4096
  808dc4:	18002c1e 	bne	r3,zero,808e78 <__sflush_r+0x160>
  808dc8:	89400c17 	ldw	r5,48(r17)
  808dcc:	9c000015 	stw	r16,0(r19)
  808dd0:	28000526 	beq	r5,zero,808de8 <__sflush_r+0xd0>
  808dd4:	88801004 	addi	r2,r17,64
  808dd8:	28800226 	beq	r5,r2,808de4 <__sflush_r+0xcc>
  808ddc:	9809883a 	mov	r4,r19
  808de0:	08095300 	call	809530 <_free_r>
  808de4:	88000c15 	stw	zero,48(r17)
  808de8:	0005883a 	mov	r2,zero
  808dec:	dfc00417 	ldw	ra,16(sp)
  808df0:	dcc00317 	ldw	r19,12(sp)
  808df4:	dc800217 	ldw	r18,8(sp)
  808df8:	dc400117 	ldw	r17,4(sp)
  808dfc:	dc000017 	ldw	r16,0(sp)
  808e00:	dec00504 	addi	sp,sp,20
  808e04:	f800283a 	ret
  808e08:	2c800417 	ldw	r18,16(r5)
  808e0c:	903ff626 	beq	r18,zero,808de8 <__alt_mem_onchip_mem+0xff788de8>
  808e10:	2c000017 	ldw	r16,0(r5)
  808e14:	108000cc 	andi	r2,r2,3
  808e18:	2c800015 	stw	r18,0(r5)
  808e1c:	84a1c83a 	sub	r16,r16,r18
  808e20:	1000131e 	bne	r2,zero,808e70 <__sflush_r+0x158>
  808e24:	28800517 	ldw	r2,20(r5)
  808e28:	88800215 	stw	r2,8(r17)
  808e2c:	04000316 	blt	zero,r16,808e3c <__sflush_r+0x124>
  808e30:	003fed06 	br	808de8 <__alt_mem_onchip_mem+0xff788de8>
  808e34:	90a5883a 	add	r18,r18,r2
  808e38:	043feb0e 	bge	zero,r16,808de8 <__alt_mem_onchip_mem+0xff788de8>
  808e3c:	88800917 	ldw	r2,36(r17)
  808e40:	89400717 	ldw	r5,28(r17)
  808e44:	800f883a 	mov	r7,r16
  808e48:	900d883a 	mov	r6,r18
  808e4c:	9809883a 	mov	r4,r19
  808e50:	103ee83a 	callr	r2
  808e54:	80a1c83a 	sub	r16,r16,r2
  808e58:	00bff616 	blt	zero,r2,808e34 <__alt_mem_onchip_mem+0xff788e34>
  808e5c:	88c0030b 	ldhu	r3,12(r17)
  808e60:	00bfffc4 	movi	r2,-1
  808e64:	18c01014 	ori	r3,r3,64
  808e68:	88c0030d 	sth	r3,12(r17)
  808e6c:	003fdf06 	br	808dec <__alt_mem_onchip_mem+0xff788dec>
  808e70:	0005883a 	mov	r2,zero
  808e74:	003fec06 	br	808e28 <__alt_mem_onchip_mem+0xff788e28>
  808e78:	88801415 	stw	r2,80(r17)
  808e7c:	003fd206 	br	808dc8 <__alt_mem_onchip_mem+0xff788dc8>
  808e80:	28c00f17 	ldw	r3,60(r5)
  808e84:	00ffb316 	blt	zero,r3,808d54 <__alt_mem_onchip_mem+0xff788d54>
  808e88:	003fd706 	br	808de8 <__alt_mem_onchip_mem+0xff788de8>
  808e8c:	89400717 	ldw	r5,28(r17)
  808e90:	000d883a 	mov	r6,zero
  808e94:	01c00044 	movi	r7,1
  808e98:	9809883a 	mov	r4,r19
  808e9c:	403ee83a 	callr	r8
  808ea0:	100d883a 	mov	r6,r2
  808ea4:	00bfffc4 	movi	r2,-1
  808ea8:	30801426 	beq	r6,r2,808efc <__sflush_r+0x1e4>
  808eac:	8880030b 	ldhu	r2,12(r17)
  808eb0:	8a000a17 	ldw	r8,40(r17)
  808eb4:	003fae06 	br	808d70 <__alt_mem_onchip_mem+0xff788d70>
  808eb8:	98c00017 	ldw	r3,0(r19)
  808ebc:	183fba26 	beq	r3,zero,808da8 <__alt_mem_onchip_mem+0xff788da8>
  808ec0:	01000744 	movi	r4,29
  808ec4:	19000626 	beq	r3,r4,808ee0 <__sflush_r+0x1c8>
  808ec8:	01000584 	movi	r4,22
  808ecc:	19000426 	beq	r3,r4,808ee0 <__sflush_r+0x1c8>
  808ed0:	88c0030b 	ldhu	r3,12(r17)
  808ed4:	18c01014 	ori	r3,r3,64
  808ed8:	88c0030d 	sth	r3,12(r17)
  808edc:	003fc306 	br	808dec <__alt_mem_onchip_mem+0xff788dec>
  808ee0:	8880030b 	ldhu	r2,12(r17)
  808ee4:	88c00417 	ldw	r3,16(r17)
  808ee8:	88000115 	stw	zero,4(r17)
  808eec:	10bdffcc 	andi	r2,r2,63487
  808ef0:	8880030d 	sth	r2,12(r17)
  808ef4:	88c00015 	stw	r3,0(r17)
  808ef8:	003fb306 	br	808dc8 <__alt_mem_onchip_mem+0xff788dc8>
  808efc:	98800017 	ldw	r2,0(r19)
  808f00:	103fea26 	beq	r2,zero,808eac <__alt_mem_onchip_mem+0xff788eac>
  808f04:	00c00744 	movi	r3,29
  808f08:	10c00226 	beq	r2,r3,808f14 <__sflush_r+0x1fc>
  808f0c:	00c00584 	movi	r3,22
  808f10:	10c0031e 	bne	r2,r3,808f20 <__sflush_r+0x208>
  808f14:	9c000015 	stw	r16,0(r19)
  808f18:	0005883a 	mov	r2,zero
  808f1c:	003fb306 	br	808dec <__alt_mem_onchip_mem+0xff788dec>
  808f20:	88c0030b 	ldhu	r3,12(r17)
  808f24:	3005883a 	mov	r2,r6
  808f28:	18c01014 	ori	r3,r3,64
  808f2c:	88c0030d 	sth	r3,12(r17)
  808f30:	003fae06 	br	808dec <__alt_mem_onchip_mem+0xff788dec>

00808f34 <_fflush_r>:
  808f34:	defffd04 	addi	sp,sp,-12
  808f38:	dc000115 	stw	r16,4(sp)
  808f3c:	dfc00215 	stw	ra,8(sp)
  808f40:	2021883a 	mov	r16,r4
  808f44:	20000226 	beq	r4,zero,808f50 <_fflush_r+0x1c>
  808f48:	20800e17 	ldw	r2,56(r4)
  808f4c:	10000c26 	beq	r2,zero,808f80 <_fflush_r+0x4c>
  808f50:	2880030f 	ldh	r2,12(r5)
  808f54:	1000051e 	bne	r2,zero,808f6c <_fflush_r+0x38>
  808f58:	0005883a 	mov	r2,zero
  808f5c:	dfc00217 	ldw	ra,8(sp)
  808f60:	dc000117 	ldw	r16,4(sp)
  808f64:	dec00304 	addi	sp,sp,12
  808f68:	f800283a 	ret
  808f6c:	8009883a 	mov	r4,r16
  808f70:	dfc00217 	ldw	ra,8(sp)
  808f74:	dc000117 	ldw	r16,4(sp)
  808f78:	dec00304 	addi	sp,sp,12
  808f7c:	0808d181 	jmpi	808d18 <__sflush_r>
  808f80:	d9400015 	stw	r5,0(sp)
  808f84:	08093100 	call	809310 <__sinit>
  808f88:	d9400017 	ldw	r5,0(sp)
  808f8c:	003ff006 	br	808f50 <__alt_mem_onchip_mem+0xff788f50>

00808f90 <fflush>:
  808f90:	20000526 	beq	r4,zero,808fa8 <fflush+0x18>
  808f94:	00802074 	movhi	r2,129
  808f98:	109c3a04 	addi	r2,r2,28904
  808f9c:	200b883a 	mov	r5,r4
  808fa0:	11000017 	ldw	r4,0(r2)
  808fa4:	0808f341 	jmpi	808f34 <_fflush_r>
  808fa8:	00802074 	movhi	r2,129
  808fac:	109c3904 	addi	r2,r2,28900
  808fb0:	11000017 	ldw	r4,0(r2)
  808fb4:	01402074 	movhi	r5,129
  808fb8:	2963cd04 	addi	r5,r5,-28876
  808fbc:	0809dc01 	jmpi	809dc0 <_fwalk_reent>

00808fc0 <__fp_unlock>:
  808fc0:	0005883a 	mov	r2,zero
  808fc4:	f800283a 	ret

00808fc8 <_cleanup_r>:
  808fc8:	01402074 	movhi	r5,129
  808fcc:	29746e04 	addi	r5,r5,-11848
  808fd0:	0809dc01 	jmpi	809dc0 <_fwalk_reent>

00808fd4 <__sinit.part.1>:
  808fd4:	defff704 	addi	sp,sp,-36
  808fd8:	00c02074 	movhi	r3,129
  808fdc:	dfc00815 	stw	ra,32(sp)
  808fe0:	ddc00715 	stw	r23,28(sp)
  808fe4:	dd800615 	stw	r22,24(sp)
  808fe8:	dd400515 	stw	r21,20(sp)
  808fec:	dd000415 	stw	r20,16(sp)
  808ff0:	dcc00315 	stw	r19,12(sp)
  808ff4:	dc800215 	stw	r18,8(sp)
  808ff8:	dc400115 	stw	r17,4(sp)
  808ffc:	dc000015 	stw	r16,0(sp)
  809000:	18e3f204 	addi	r3,r3,-28728
  809004:	24000117 	ldw	r16,4(r4)
  809008:	20c00f15 	stw	r3,60(r4)
  80900c:	2080bb04 	addi	r2,r4,748
  809010:	00c000c4 	movi	r3,3
  809014:	20c0b915 	stw	r3,740(r4)
  809018:	2080ba15 	stw	r2,744(r4)
  80901c:	2000b815 	stw	zero,736(r4)
  809020:	05c00204 	movi	r23,8
  809024:	00800104 	movi	r2,4
  809028:	2025883a 	mov	r18,r4
  80902c:	b80d883a 	mov	r6,r23
  809030:	81001704 	addi	r4,r16,92
  809034:	000b883a 	mov	r5,zero
  809038:	80000015 	stw	zero,0(r16)
  80903c:	80000115 	stw	zero,4(r16)
  809040:	80000215 	stw	zero,8(r16)
  809044:	8080030d 	sth	r2,12(r16)
  809048:	80001915 	stw	zero,100(r16)
  80904c:	8000038d 	sth	zero,14(r16)
  809050:	80000415 	stw	zero,16(r16)
  809054:	80000515 	stw	zero,20(r16)
  809058:	80000615 	stw	zero,24(r16)
  80905c:	08048d80 	call	8048d8 <memset>
  809060:	05802034 	movhi	r22,128
  809064:	94400217 	ldw	r17,8(r18)
  809068:	05402034 	movhi	r21,128
  80906c:	05002034 	movhi	r20,128
  809070:	04c02034 	movhi	r19,128
  809074:	b5937904 	addi	r22,r22,19940
  809078:	ad539004 	addi	r21,r21,20032
  80907c:	a513af04 	addi	r20,r20,20156
  809080:	9cd3c604 	addi	r19,r19,20248
  809084:	85800815 	stw	r22,32(r16)
  809088:	85400915 	stw	r21,36(r16)
  80908c:	85000a15 	stw	r20,40(r16)
  809090:	84c00b15 	stw	r19,44(r16)
  809094:	84000715 	stw	r16,28(r16)
  809098:	00800284 	movi	r2,10
  80909c:	8880030d 	sth	r2,12(r17)
  8090a0:	00800044 	movi	r2,1
  8090a4:	b80d883a 	mov	r6,r23
  8090a8:	89001704 	addi	r4,r17,92
  8090ac:	000b883a 	mov	r5,zero
  8090b0:	88000015 	stw	zero,0(r17)
  8090b4:	88000115 	stw	zero,4(r17)
  8090b8:	88000215 	stw	zero,8(r17)
  8090bc:	88001915 	stw	zero,100(r17)
  8090c0:	8880038d 	sth	r2,14(r17)
  8090c4:	88000415 	stw	zero,16(r17)
  8090c8:	88000515 	stw	zero,20(r17)
  8090cc:	88000615 	stw	zero,24(r17)
  8090d0:	08048d80 	call	8048d8 <memset>
  8090d4:	94000317 	ldw	r16,12(r18)
  8090d8:	00800484 	movi	r2,18
  8090dc:	8c400715 	stw	r17,28(r17)
  8090e0:	8d800815 	stw	r22,32(r17)
  8090e4:	8d400915 	stw	r21,36(r17)
  8090e8:	8d000a15 	stw	r20,40(r17)
  8090ec:	8cc00b15 	stw	r19,44(r17)
  8090f0:	8080030d 	sth	r2,12(r16)
  8090f4:	00800084 	movi	r2,2
  8090f8:	80000015 	stw	zero,0(r16)
  8090fc:	80000115 	stw	zero,4(r16)
  809100:	80000215 	stw	zero,8(r16)
  809104:	80001915 	stw	zero,100(r16)
  809108:	8080038d 	sth	r2,14(r16)
  80910c:	80000415 	stw	zero,16(r16)
  809110:	80000515 	stw	zero,20(r16)
  809114:	80000615 	stw	zero,24(r16)
  809118:	b80d883a 	mov	r6,r23
  80911c:	000b883a 	mov	r5,zero
  809120:	81001704 	addi	r4,r16,92
  809124:	08048d80 	call	8048d8 <memset>
  809128:	00800044 	movi	r2,1
  80912c:	84000715 	stw	r16,28(r16)
  809130:	85800815 	stw	r22,32(r16)
  809134:	85400915 	stw	r21,36(r16)
  809138:	85000a15 	stw	r20,40(r16)
  80913c:	84c00b15 	stw	r19,44(r16)
  809140:	90800e15 	stw	r2,56(r18)
  809144:	dfc00817 	ldw	ra,32(sp)
  809148:	ddc00717 	ldw	r23,28(sp)
  80914c:	dd800617 	ldw	r22,24(sp)
  809150:	dd400517 	ldw	r21,20(sp)
  809154:	dd000417 	ldw	r20,16(sp)
  809158:	dcc00317 	ldw	r19,12(sp)
  80915c:	dc800217 	ldw	r18,8(sp)
  809160:	dc400117 	ldw	r17,4(sp)
  809164:	dc000017 	ldw	r16,0(sp)
  809168:	dec00904 	addi	sp,sp,36
  80916c:	f800283a 	ret

00809170 <__fp_lock>:
  809170:	0005883a 	mov	r2,zero
  809174:	f800283a 	ret

00809178 <__sfmoreglue>:
  809178:	defffc04 	addi	sp,sp,-16
  80917c:	dc400115 	stw	r17,4(sp)
  809180:	2c7fffc4 	addi	r17,r5,-1
  809184:	8c401a24 	muli	r17,r17,104
  809188:	dc800215 	stw	r18,8(sp)
  80918c:	2825883a 	mov	r18,r5
  809190:	89401d04 	addi	r5,r17,116
  809194:	dc000015 	stw	r16,0(sp)
  809198:	dfc00315 	stw	ra,12(sp)
  80919c:	08040cc0 	call	8040cc <_malloc_r>
  8091a0:	1021883a 	mov	r16,r2
  8091a4:	10000726 	beq	r2,zero,8091c4 <__sfmoreglue+0x4c>
  8091a8:	11000304 	addi	r4,r2,12
  8091ac:	10000015 	stw	zero,0(r2)
  8091b0:	14800115 	stw	r18,4(r2)
  8091b4:	11000215 	stw	r4,8(r2)
  8091b8:	89801a04 	addi	r6,r17,104
  8091bc:	000b883a 	mov	r5,zero
  8091c0:	08048d80 	call	8048d8 <memset>
  8091c4:	8005883a 	mov	r2,r16
  8091c8:	dfc00317 	ldw	ra,12(sp)
  8091cc:	dc800217 	ldw	r18,8(sp)
  8091d0:	dc400117 	ldw	r17,4(sp)
  8091d4:	dc000017 	ldw	r16,0(sp)
  8091d8:	dec00404 	addi	sp,sp,16
  8091dc:	f800283a 	ret

008091e0 <__sfp>:
  8091e0:	defffb04 	addi	sp,sp,-20
  8091e4:	dc000015 	stw	r16,0(sp)
  8091e8:	04002074 	movhi	r16,129
  8091ec:	841c3904 	addi	r16,r16,28900
  8091f0:	dcc00315 	stw	r19,12(sp)
  8091f4:	2027883a 	mov	r19,r4
  8091f8:	81000017 	ldw	r4,0(r16)
  8091fc:	dfc00415 	stw	ra,16(sp)
  809200:	dc800215 	stw	r18,8(sp)
  809204:	20800e17 	ldw	r2,56(r4)
  809208:	dc400115 	stw	r17,4(sp)
  80920c:	1000021e 	bne	r2,zero,809218 <__sfp+0x38>
  809210:	0808fd40 	call	808fd4 <__sinit.part.1>
  809214:	81000017 	ldw	r4,0(r16)
  809218:	2480b804 	addi	r18,r4,736
  80921c:	047fffc4 	movi	r17,-1
  809220:	91000117 	ldw	r4,4(r18)
  809224:	94000217 	ldw	r16,8(r18)
  809228:	213fffc4 	addi	r4,r4,-1
  80922c:	20000a16 	blt	r4,zero,809258 <__sfp+0x78>
  809230:	8080030f 	ldh	r2,12(r16)
  809234:	10000c26 	beq	r2,zero,809268 <__sfp+0x88>
  809238:	80c01d04 	addi	r3,r16,116
  80923c:	00000206 	br	809248 <__sfp+0x68>
  809240:	18bfe60f 	ldh	r2,-104(r3)
  809244:	10000826 	beq	r2,zero,809268 <__sfp+0x88>
  809248:	213fffc4 	addi	r4,r4,-1
  80924c:	1c3ffd04 	addi	r16,r3,-12
  809250:	18c01a04 	addi	r3,r3,104
  809254:	247ffa1e 	bne	r4,r17,809240 <__alt_mem_onchip_mem+0xff789240>
  809258:	90800017 	ldw	r2,0(r18)
  80925c:	10001d26 	beq	r2,zero,8092d4 <__sfp+0xf4>
  809260:	1025883a 	mov	r18,r2
  809264:	003fee06 	br	809220 <__alt_mem_onchip_mem+0xff789220>
  809268:	00bfffc4 	movi	r2,-1
  80926c:	8080038d 	sth	r2,14(r16)
  809270:	00800044 	movi	r2,1
  809274:	8080030d 	sth	r2,12(r16)
  809278:	80001915 	stw	zero,100(r16)
  80927c:	80000015 	stw	zero,0(r16)
  809280:	80000215 	stw	zero,8(r16)
  809284:	80000115 	stw	zero,4(r16)
  809288:	80000415 	stw	zero,16(r16)
  80928c:	80000515 	stw	zero,20(r16)
  809290:	80000615 	stw	zero,24(r16)
  809294:	01800204 	movi	r6,8
  809298:	000b883a 	mov	r5,zero
  80929c:	81001704 	addi	r4,r16,92
  8092a0:	08048d80 	call	8048d8 <memset>
  8092a4:	8005883a 	mov	r2,r16
  8092a8:	80000c15 	stw	zero,48(r16)
  8092ac:	80000d15 	stw	zero,52(r16)
  8092b0:	80001115 	stw	zero,68(r16)
  8092b4:	80001215 	stw	zero,72(r16)
  8092b8:	dfc00417 	ldw	ra,16(sp)
  8092bc:	dcc00317 	ldw	r19,12(sp)
  8092c0:	dc800217 	ldw	r18,8(sp)
  8092c4:	dc400117 	ldw	r17,4(sp)
  8092c8:	dc000017 	ldw	r16,0(sp)
  8092cc:	dec00504 	addi	sp,sp,20
  8092d0:	f800283a 	ret
  8092d4:	01400104 	movi	r5,4
  8092d8:	9809883a 	mov	r4,r19
  8092dc:	08091780 	call	809178 <__sfmoreglue>
  8092e0:	90800015 	stw	r2,0(r18)
  8092e4:	103fde1e 	bne	r2,zero,809260 <__alt_mem_onchip_mem+0xff789260>
  8092e8:	00800304 	movi	r2,12
  8092ec:	98800015 	stw	r2,0(r19)
  8092f0:	0005883a 	mov	r2,zero
  8092f4:	003ff006 	br	8092b8 <__alt_mem_onchip_mem+0xff7892b8>

008092f8 <_cleanup>:
  8092f8:	00802074 	movhi	r2,129
  8092fc:	109c3904 	addi	r2,r2,28900
  809300:	11000017 	ldw	r4,0(r2)
  809304:	01402074 	movhi	r5,129
  809308:	29746e04 	addi	r5,r5,-11848
  80930c:	0809dc01 	jmpi	809dc0 <_fwalk_reent>

00809310 <__sinit>:
  809310:	20800e17 	ldw	r2,56(r4)
  809314:	10000126 	beq	r2,zero,80931c <__sinit+0xc>
  809318:	f800283a 	ret
  80931c:	0808fd41 	jmpi	808fd4 <__sinit.part.1>

00809320 <__sfp_lock_acquire>:
  809320:	f800283a 	ret

00809324 <__sfp_lock_release>:
  809324:	f800283a 	ret

00809328 <__sinit_lock_acquire>:
  809328:	f800283a 	ret

0080932c <__sinit_lock_release>:
  80932c:	f800283a 	ret

00809330 <__fp_lock_all>:
  809330:	00802074 	movhi	r2,129
  809334:	109c3a04 	addi	r2,r2,28904
  809338:	11000017 	ldw	r4,0(r2)
  80933c:	01402074 	movhi	r5,129
  809340:	29645c04 	addi	r5,r5,-28304
  809344:	0809cfc1 	jmpi	809cfc <_fwalk>

00809348 <__fp_unlock_all>:
  809348:	00802074 	movhi	r2,129
  80934c:	109c3a04 	addi	r2,r2,28904
  809350:	11000017 	ldw	r4,0(r2)
  809354:	01402074 	movhi	r5,129
  809358:	2963f004 	addi	r5,r5,-28736
  80935c:	0809cfc1 	jmpi	809cfc <_fwalk>

00809360 <__sflags>:
  809360:	28800007 	ldb	r2,0(r5)
  809364:	00c01c84 	movi	r3,114
  809368:	10c02426 	beq	r2,r3,8093fc <__sflags+0x9c>
  80936c:	00c01dc4 	movi	r3,119
  809370:	10c01e26 	beq	r2,r3,8093ec <__sflags+0x8c>
  809374:	00c01844 	movi	r3,97
  809378:	10c00426 	beq	r2,r3,80938c <__sflags+0x2c>
  80937c:	00800584 	movi	r2,22
  809380:	20800015 	stw	r2,0(r4)
  809384:	0005883a 	mov	r2,zero
  809388:	f800283a 	ret
  80938c:	02c08204 	movi	r11,520
  809390:	01000044 	movi	r4,1
  809394:	00804204 	movi	r2,264
  809398:	01c00ac4 	movi	r7,43
  80939c:	02bff8c4 	movi	r10,-29
  8093a0:	027fff04 	movi	r9,-4
  8093a4:	02001e04 	movi	r8,120
  8093a8:	29400044 	addi	r5,r5,1
  8093ac:	28c00007 	ldb	r3,0(r5)
  8093b0:	18000626 	beq	r3,zero,8093cc <__sflags+0x6c>
  8093b4:	19c00826 	beq	r3,r7,8093d8 <__sflags+0x78>
  8093b8:	1a3ffb1e 	bne	r3,r8,8093a8 <__alt_mem_onchip_mem+0xff7893a8>
  8093bc:	29400044 	addi	r5,r5,1
  8093c0:	28c00007 	ldb	r3,0(r5)
  8093c4:	21020014 	ori	r4,r4,2048
  8093c8:	183ffa1e 	bne	r3,zero,8093b4 <__alt_mem_onchip_mem+0xff7893b4>
  8093cc:	22c8b03a 	or	r4,r4,r11
  8093d0:	31000015 	stw	r4,0(r6)
  8093d4:	f800283a 	ret
  8093d8:	1284703a 	and	r2,r2,r10
  8093dc:	2248703a 	and	r4,r4,r9
  8093e0:	10800414 	ori	r2,r2,16
  8093e4:	21000094 	ori	r4,r4,2
  8093e8:	003fef06 	br	8093a8 <__alt_mem_onchip_mem+0xff7893a8>
  8093ec:	02c18004 	movi	r11,1536
  8093f0:	01000044 	movi	r4,1
  8093f4:	00800204 	movi	r2,8
  8093f8:	003fe706 	br	809398 <__alt_mem_onchip_mem+0xff789398>
  8093fc:	0017883a 	mov	r11,zero
  809400:	0009883a 	mov	r4,zero
  809404:	00800104 	movi	r2,4
  809408:	003fe306 	br	809398 <__alt_mem_onchip_mem+0xff789398>

0080940c <_malloc_trim_r>:
  80940c:	defffb04 	addi	sp,sp,-20
  809410:	dcc00315 	stw	r19,12(sp)
  809414:	04c02074 	movhi	r19,129
  809418:	dc800215 	stw	r18,8(sp)
  80941c:	dc400115 	stw	r17,4(sp)
  809420:	dc000015 	stw	r16,0(sp)
  809424:	dfc00415 	stw	ra,16(sp)
  809428:	2821883a 	mov	r16,r5
  80942c:	9cd61e04 	addi	r19,r19,22648
  809430:	2025883a 	mov	r18,r4
  809434:	08111cc0 	call	8111cc <__malloc_lock>
  809438:	98800217 	ldw	r2,8(r19)
  80943c:	14400117 	ldw	r17,4(r2)
  809440:	00bfff04 	movi	r2,-4
  809444:	88a2703a 	and	r17,r17,r2
  809448:	8c21c83a 	sub	r16,r17,r16
  80944c:	8403fbc4 	addi	r16,r16,4079
  809450:	8020d33a 	srli	r16,r16,12
  809454:	0083ffc4 	movi	r2,4095
  809458:	843fffc4 	addi	r16,r16,-1
  80945c:	8020933a 	slli	r16,r16,12
  809460:	1400060e 	bge	r2,r16,80947c <_malloc_trim_r+0x70>
  809464:	000b883a 	mov	r5,zero
  809468:	9009883a 	mov	r4,r18
  80946c:	0804d900 	call	804d90 <_sbrk_r>
  809470:	98c00217 	ldw	r3,8(r19)
  809474:	1c47883a 	add	r3,r3,r17
  809478:	10c00a26 	beq	r2,r3,8094a4 <_malloc_trim_r+0x98>
  80947c:	9009883a 	mov	r4,r18
  809480:	08111f00 	call	8111f0 <__malloc_unlock>
  809484:	0005883a 	mov	r2,zero
  809488:	dfc00417 	ldw	ra,16(sp)
  80948c:	dcc00317 	ldw	r19,12(sp)
  809490:	dc800217 	ldw	r18,8(sp)
  809494:	dc400117 	ldw	r17,4(sp)
  809498:	dc000017 	ldw	r16,0(sp)
  80949c:	dec00504 	addi	sp,sp,20
  8094a0:	f800283a 	ret
  8094a4:	040bc83a 	sub	r5,zero,r16
  8094a8:	9009883a 	mov	r4,r18
  8094ac:	0804d900 	call	804d90 <_sbrk_r>
  8094b0:	00ffffc4 	movi	r3,-1
  8094b4:	10c00d26 	beq	r2,r3,8094ec <_malloc_trim_r+0xe0>
  8094b8:	00c020b4 	movhi	r3,130
  8094bc:	18e3f104 	addi	r3,r3,-28732
  8094c0:	18800017 	ldw	r2,0(r3)
  8094c4:	99000217 	ldw	r4,8(r19)
  8094c8:	8c23c83a 	sub	r17,r17,r16
  8094cc:	8c400054 	ori	r17,r17,1
  8094d0:	1421c83a 	sub	r16,r2,r16
  8094d4:	24400115 	stw	r17,4(r4)
  8094d8:	9009883a 	mov	r4,r18
  8094dc:	1c000015 	stw	r16,0(r3)
  8094e0:	08111f00 	call	8111f0 <__malloc_unlock>
  8094e4:	00800044 	movi	r2,1
  8094e8:	003fe706 	br	809488 <__alt_mem_onchip_mem+0xff789488>
  8094ec:	000b883a 	mov	r5,zero
  8094f0:	9009883a 	mov	r4,r18
  8094f4:	0804d900 	call	804d90 <_sbrk_r>
  8094f8:	99000217 	ldw	r4,8(r19)
  8094fc:	014003c4 	movi	r5,15
  809500:	1107c83a 	sub	r3,r2,r4
  809504:	28ffdd0e 	bge	r5,r3,80947c <__alt_mem_onchip_mem+0xff78947c>
  809508:	01402074 	movhi	r5,129
  80950c:	295c3b04 	addi	r5,r5,28908
  809510:	29400017 	ldw	r5,0(r5)
  809514:	18c00054 	ori	r3,r3,1
  809518:	20c00115 	stw	r3,4(r4)
  80951c:	00c020b4 	movhi	r3,130
  809520:	1145c83a 	sub	r2,r2,r5
  809524:	18e3f104 	addi	r3,r3,-28732
  809528:	18800015 	stw	r2,0(r3)
  80952c:	003fd306 	br	80947c <__alt_mem_onchip_mem+0xff78947c>

00809530 <_free_r>:
  809530:	28004126 	beq	r5,zero,809638 <_free_r+0x108>
  809534:	defffd04 	addi	sp,sp,-12
  809538:	dc400115 	stw	r17,4(sp)
  80953c:	dc000015 	stw	r16,0(sp)
  809540:	2023883a 	mov	r17,r4
  809544:	2821883a 	mov	r16,r5
  809548:	dfc00215 	stw	ra,8(sp)
  80954c:	08111cc0 	call	8111cc <__malloc_lock>
  809550:	81ffff17 	ldw	r7,-4(r16)
  809554:	00bfff84 	movi	r2,-2
  809558:	01002074 	movhi	r4,129
  80955c:	81bffe04 	addi	r6,r16,-8
  809560:	3884703a 	and	r2,r7,r2
  809564:	21161e04 	addi	r4,r4,22648
  809568:	308b883a 	add	r5,r6,r2
  80956c:	2a400117 	ldw	r9,4(r5)
  809570:	22000217 	ldw	r8,8(r4)
  809574:	00ffff04 	movi	r3,-4
  809578:	48c6703a 	and	r3,r9,r3
  80957c:	2a005726 	beq	r5,r8,8096dc <_free_r+0x1ac>
  809580:	28c00115 	stw	r3,4(r5)
  809584:	39c0004c 	andi	r7,r7,1
  809588:	3800091e 	bne	r7,zero,8095b0 <_free_r+0x80>
  80958c:	823ffe17 	ldw	r8,-8(r16)
  809590:	22400204 	addi	r9,r4,8
  809594:	320dc83a 	sub	r6,r6,r8
  809598:	31c00217 	ldw	r7,8(r6)
  80959c:	1205883a 	add	r2,r2,r8
  8095a0:	3a406526 	beq	r7,r9,809738 <_free_r+0x208>
  8095a4:	32000317 	ldw	r8,12(r6)
  8095a8:	3a000315 	stw	r8,12(r7)
  8095ac:	41c00215 	stw	r7,8(r8)
  8095b0:	28cf883a 	add	r7,r5,r3
  8095b4:	39c00117 	ldw	r7,4(r7)
  8095b8:	39c0004c 	andi	r7,r7,1
  8095bc:	38003a26 	beq	r7,zero,8096a8 <_free_r+0x178>
  8095c0:	10c00054 	ori	r3,r2,1
  8095c4:	30c00115 	stw	r3,4(r6)
  8095c8:	3087883a 	add	r3,r6,r2
  8095cc:	18800015 	stw	r2,0(r3)
  8095d0:	00c07fc4 	movi	r3,511
  8095d4:	18801936 	bltu	r3,r2,80963c <_free_r+0x10c>
  8095d8:	1004d0fa 	srli	r2,r2,3
  8095dc:	01c00044 	movi	r7,1
  8095e0:	21400117 	ldw	r5,4(r4)
  8095e4:	10c00044 	addi	r3,r2,1
  8095e8:	18c7883a 	add	r3,r3,r3
  8095ec:	1005d0ba 	srai	r2,r2,2
  8095f0:	18c7883a 	add	r3,r3,r3
  8095f4:	18c7883a 	add	r3,r3,r3
  8095f8:	1907883a 	add	r3,r3,r4
  8095fc:	3884983a 	sll	r2,r7,r2
  809600:	19c00017 	ldw	r7,0(r3)
  809604:	1a3ffe04 	addi	r8,r3,-8
  809608:	1144b03a 	or	r2,r2,r5
  80960c:	32000315 	stw	r8,12(r6)
  809610:	31c00215 	stw	r7,8(r6)
  809614:	20800115 	stw	r2,4(r4)
  809618:	19800015 	stw	r6,0(r3)
  80961c:	39800315 	stw	r6,12(r7)
  809620:	8809883a 	mov	r4,r17
  809624:	dfc00217 	ldw	ra,8(sp)
  809628:	dc400117 	ldw	r17,4(sp)
  80962c:	dc000017 	ldw	r16,0(sp)
  809630:	dec00304 	addi	sp,sp,12
  809634:	08111f01 	jmpi	8111f0 <__malloc_unlock>
  809638:	f800283a 	ret
  80963c:	100ad27a 	srli	r5,r2,9
  809640:	00c00104 	movi	r3,4
  809644:	19404a36 	bltu	r3,r5,809770 <_free_r+0x240>
  809648:	100ad1ba 	srli	r5,r2,6
  80964c:	28c00e44 	addi	r3,r5,57
  809650:	18c7883a 	add	r3,r3,r3
  809654:	29400e04 	addi	r5,r5,56
  809658:	18c7883a 	add	r3,r3,r3
  80965c:	18c7883a 	add	r3,r3,r3
  809660:	1909883a 	add	r4,r3,r4
  809664:	20c00017 	ldw	r3,0(r4)
  809668:	01c02074 	movhi	r7,129
  80966c:	213ffe04 	addi	r4,r4,-8
  809670:	39d61e04 	addi	r7,r7,22648
  809674:	20c04426 	beq	r4,r3,809788 <_free_r+0x258>
  809678:	01ffff04 	movi	r7,-4
  80967c:	19400117 	ldw	r5,4(r3)
  809680:	29ca703a 	and	r5,r5,r7
  809684:	1140022e 	bgeu	r2,r5,809690 <_free_r+0x160>
  809688:	18c00217 	ldw	r3,8(r3)
  80968c:	20fffb1e 	bne	r4,r3,80967c <__alt_mem_onchip_mem+0xff78967c>
  809690:	19000317 	ldw	r4,12(r3)
  809694:	31000315 	stw	r4,12(r6)
  809698:	30c00215 	stw	r3,8(r6)
  80969c:	21800215 	stw	r6,8(r4)
  8096a0:	19800315 	stw	r6,12(r3)
  8096a4:	003fde06 	br	809620 <__alt_mem_onchip_mem+0xff789620>
  8096a8:	29c00217 	ldw	r7,8(r5)
  8096ac:	10c5883a 	add	r2,r2,r3
  8096b0:	00c02074 	movhi	r3,129
  8096b4:	18d62004 	addi	r3,r3,22656
  8096b8:	38c03b26 	beq	r7,r3,8097a8 <_free_r+0x278>
  8096bc:	2a000317 	ldw	r8,12(r5)
  8096c0:	11400054 	ori	r5,r2,1
  8096c4:	3087883a 	add	r3,r6,r2
  8096c8:	3a000315 	stw	r8,12(r7)
  8096cc:	41c00215 	stw	r7,8(r8)
  8096d0:	31400115 	stw	r5,4(r6)
  8096d4:	18800015 	stw	r2,0(r3)
  8096d8:	003fbd06 	br	8095d0 <__alt_mem_onchip_mem+0xff7895d0>
  8096dc:	39c0004c 	andi	r7,r7,1
  8096e0:	10c5883a 	add	r2,r2,r3
  8096e4:	3800071e 	bne	r7,zero,809704 <_free_r+0x1d4>
  8096e8:	81fffe17 	ldw	r7,-8(r16)
  8096ec:	31cdc83a 	sub	r6,r6,r7
  8096f0:	30c00317 	ldw	r3,12(r6)
  8096f4:	31400217 	ldw	r5,8(r6)
  8096f8:	11c5883a 	add	r2,r2,r7
  8096fc:	28c00315 	stw	r3,12(r5)
  809700:	19400215 	stw	r5,8(r3)
  809704:	10c00054 	ori	r3,r2,1
  809708:	30c00115 	stw	r3,4(r6)
  80970c:	00c02074 	movhi	r3,129
  809710:	18dc3c04 	addi	r3,r3,28912
  809714:	18c00017 	ldw	r3,0(r3)
  809718:	21800215 	stw	r6,8(r4)
  80971c:	10ffc036 	bltu	r2,r3,809620 <__alt_mem_onchip_mem+0xff789620>
  809720:	008020b4 	movhi	r2,130
  809724:	10a3e004 	addi	r2,r2,-28800
  809728:	11400017 	ldw	r5,0(r2)
  80972c:	8809883a 	mov	r4,r17
  809730:	080940c0 	call	80940c <_malloc_trim_r>
  809734:	003fba06 	br	809620 <__alt_mem_onchip_mem+0xff789620>
  809738:	28c9883a 	add	r4,r5,r3
  80973c:	21000117 	ldw	r4,4(r4)
  809740:	2100004c 	andi	r4,r4,1
  809744:	2000391e 	bne	r4,zero,80982c <_free_r+0x2fc>
  809748:	29c00217 	ldw	r7,8(r5)
  80974c:	29000317 	ldw	r4,12(r5)
  809750:	1885883a 	add	r2,r3,r2
  809754:	10c00054 	ori	r3,r2,1
  809758:	39000315 	stw	r4,12(r7)
  80975c:	21c00215 	stw	r7,8(r4)
  809760:	30c00115 	stw	r3,4(r6)
  809764:	308d883a 	add	r6,r6,r2
  809768:	30800015 	stw	r2,0(r6)
  80976c:	003fac06 	br	809620 <__alt_mem_onchip_mem+0xff789620>
  809770:	00c00504 	movi	r3,20
  809774:	19401536 	bltu	r3,r5,8097cc <_free_r+0x29c>
  809778:	28c01704 	addi	r3,r5,92
  80977c:	18c7883a 	add	r3,r3,r3
  809780:	294016c4 	addi	r5,r5,91
  809784:	003fb406 	br	809658 <__alt_mem_onchip_mem+0xff789658>
  809788:	280bd0ba 	srai	r5,r5,2
  80978c:	00c00044 	movi	r3,1
  809790:	38800117 	ldw	r2,4(r7)
  809794:	194a983a 	sll	r5,r3,r5
  809798:	2007883a 	mov	r3,r4
  80979c:	2884b03a 	or	r2,r5,r2
  8097a0:	38800115 	stw	r2,4(r7)
  8097a4:	003fbb06 	br	809694 <__alt_mem_onchip_mem+0xff789694>
  8097a8:	21800515 	stw	r6,20(r4)
  8097ac:	21800415 	stw	r6,16(r4)
  8097b0:	10c00054 	ori	r3,r2,1
  8097b4:	31c00315 	stw	r7,12(r6)
  8097b8:	31c00215 	stw	r7,8(r6)
  8097bc:	30c00115 	stw	r3,4(r6)
  8097c0:	308d883a 	add	r6,r6,r2
  8097c4:	30800015 	stw	r2,0(r6)
  8097c8:	003f9506 	br	809620 <__alt_mem_onchip_mem+0xff789620>
  8097cc:	00c01504 	movi	r3,84
  8097d0:	19400536 	bltu	r3,r5,8097e8 <_free_r+0x2b8>
  8097d4:	100ad33a 	srli	r5,r2,12
  8097d8:	28c01bc4 	addi	r3,r5,111
  8097dc:	18c7883a 	add	r3,r3,r3
  8097e0:	29401b84 	addi	r5,r5,110
  8097e4:	003f9c06 	br	809658 <__alt_mem_onchip_mem+0xff789658>
  8097e8:	00c05504 	movi	r3,340
  8097ec:	19400536 	bltu	r3,r5,809804 <_free_r+0x2d4>
  8097f0:	100ad3fa 	srli	r5,r2,15
  8097f4:	28c01e04 	addi	r3,r5,120
  8097f8:	18c7883a 	add	r3,r3,r3
  8097fc:	29401dc4 	addi	r5,r5,119
  809800:	003f9506 	br	809658 <__alt_mem_onchip_mem+0xff789658>
  809804:	00c15504 	movi	r3,1364
  809808:	19400536 	bltu	r3,r5,809820 <_free_r+0x2f0>
  80980c:	100ad4ba 	srli	r5,r2,18
  809810:	28c01f44 	addi	r3,r5,125
  809814:	18c7883a 	add	r3,r3,r3
  809818:	29401f04 	addi	r5,r5,124
  80981c:	003f8e06 	br	809658 <__alt_mem_onchip_mem+0xff789658>
  809820:	00c03f84 	movi	r3,254
  809824:	01401f84 	movi	r5,126
  809828:	003f8b06 	br	809658 <__alt_mem_onchip_mem+0xff789658>
  80982c:	10c00054 	ori	r3,r2,1
  809830:	30c00115 	stw	r3,4(r6)
  809834:	308d883a 	add	r6,r6,r2
  809838:	30800015 	stw	r2,0(r6)
  80983c:	003f7806 	br	809620 <__alt_mem_onchip_mem+0xff789620>

00809840 <__sfvwrite_r>:
  809840:	30800217 	ldw	r2,8(r6)
  809844:	10006726 	beq	r2,zero,8099e4 <__sfvwrite_r+0x1a4>
  809848:	28c0030b 	ldhu	r3,12(r5)
  80984c:	defff404 	addi	sp,sp,-48
  809850:	dd400715 	stw	r21,28(sp)
  809854:	dd000615 	stw	r20,24(sp)
  809858:	dc000215 	stw	r16,8(sp)
  80985c:	dfc00b15 	stw	ra,44(sp)
  809860:	df000a15 	stw	fp,40(sp)
  809864:	ddc00915 	stw	r23,36(sp)
  809868:	dd800815 	stw	r22,32(sp)
  80986c:	dcc00515 	stw	r19,20(sp)
  809870:	dc800415 	stw	r18,16(sp)
  809874:	dc400315 	stw	r17,12(sp)
  809878:	1880020c 	andi	r2,r3,8
  80987c:	2821883a 	mov	r16,r5
  809880:	202b883a 	mov	r21,r4
  809884:	3029883a 	mov	r20,r6
  809888:	10002726 	beq	r2,zero,809928 <__sfvwrite_r+0xe8>
  80988c:	28800417 	ldw	r2,16(r5)
  809890:	10002526 	beq	r2,zero,809928 <__sfvwrite_r+0xe8>
  809894:	1880008c 	andi	r2,r3,2
  809898:	a4400017 	ldw	r17,0(r20)
  80989c:	10002a26 	beq	r2,zero,809948 <__sfvwrite_r+0x108>
  8098a0:	05a00034 	movhi	r22,32768
  8098a4:	0027883a 	mov	r19,zero
  8098a8:	0025883a 	mov	r18,zero
  8098ac:	b5bf0004 	addi	r22,r22,-1024
  8098b0:	980d883a 	mov	r6,r19
  8098b4:	a809883a 	mov	r4,r21
  8098b8:	90004626 	beq	r18,zero,8099d4 <__sfvwrite_r+0x194>
  8098bc:	900f883a 	mov	r7,r18
  8098c0:	b480022e 	bgeu	r22,r18,8098cc <__sfvwrite_r+0x8c>
  8098c4:	01e00034 	movhi	r7,32768
  8098c8:	39ff0004 	addi	r7,r7,-1024
  8098cc:	80800917 	ldw	r2,36(r16)
  8098d0:	81400717 	ldw	r5,28(r16)
  8098d4:	103ee83a 	callr	r2
  8098d8:	0080570e 	bge	zero,r2,809a38 <__sfvwrite_r+0x1f8>
  8098dc:	a0c00217 	ldw	r3,8(r20)
  8098e0:	98a7883a 	add	r19,r19,r2
  8098e4:	90a5c83a 	sub	r18,r18,r2
  8098e8:	1885c83a 	sub	r2,r3,r2
  8098ec:	a0800215 	stw	r2,8(r20)
  8098f0:	103fef1e 	bne	r2,zero,8098b0 <__alt_mem_onchip_mem+0xff7898b0>
  8098f4:	0005883a 	mov	r2,zero
  8098f8:	dfc00b17 	ldw	ra,44(sp)
  8098fc:	df000a17 	ldw	fp,40(sp)
  809900:	ddc00917 	ldw	r23,36(sp)
  809904:	dd800817 	ldw	r22,32(sp)
  809908:	dd400717 	ldw	r21,28(sp)
  80990c:	dd000617 	ldw	r20,24(sp)
  809910:	dcc00517 	ldw	r19,20(sp)
  809914:	dc800417 	ldw	r18,16(sp)
  809918:	dc400317 	ldw	r17,12(sp)
  80991c:	dc000217 	ldw	r16,8(sp)
  809920:	dec00c04 	addi	sp,sp,48
  809924:	f800283a 	ret
  809928:	800b883a 	mov	r5,r16
  80992c:	a809883a 	mov	r4,r21
  809930:	08072e80 	call	8072e8 <__swsetup_r>
  809934:	1000eb1e 	bne	r2,zero,809ce4 <__sfvwrite_r+0x4a4>
  809938:	80c0030b 	ldhu	r3,12(r16)
  80993c:	a4400017 	ldw	r17,0(r20)
  809940:	1880008c 	andi	r2,r3,2
  809944:	103fd61e 	bne	r2,zero,8098a0 <__alt_mem_onchip_mem+0xff7898a0>
  809948:	1880004c 	andi	r2,r3,1
  80994c:	10003f1e 	bne	r2,zero,809a4c <__sfvwrite_r+0x20c>
  809950:	0039883a 	mov	fp,zero
  809954:	0025883a 	mov	r18,zero
  809958:	90001a26 	beq	r18,zero,8099c4 <__sfvwrite_r+0x184>
  80995c:	1880800c 	andi	r2,r3,512
  809960:	84c00217 	ldw	r19,8(r16)
  809964:	10002126 	beq	r2,zero,8099ec <__sfvwrite_r+0x1ac>
  809968:	982f883a 	mov	r23,r19
  80996c:	94c09336 	bltu	r18,r19,809bbc <__sfvwrite_r+0x37c>
  809970:	1881200c 	andi	r2,r3,1152
  809974:	10009e1e 	bne	r2,zero,809bf0 <__sfvwrite_r+0x3b0>
  809978:	81000017 	ldw	r4,0(r16)
  80997c:	b80d883a 	mov	r6,r23
  809980:	e00b883a 	mov	r5,fp
  809984:	080a2400 	call	80a240 <memmove>
  809988:	80c00217 	ldw	r3,8(r16)
  80998c:	81000017 	ldw	r4,0(r16)
  809990:	9005883a 	mov	r2,r18
  809994:	1ce7c83a 	sub	r19,r3,r19
  809998:	25cf883a 	add	r7,r4,r23
  80999c:	84c00215 	stw	r19,8(r16)
  8099a0:	81c00015 	stw	r7,0(r16)
  8099a4:	a0c00217 	ldw	r3,8(r20)
  8099a8:	e0b9883a 	add	fp,fp,r2
  8099ac:	90a5c83a 	sub	r18,r18,r2
  8099b0:	18a7c83a 	sub	r19,r3,r2
  8099b4:	a4c00215 	stw	r19,8(r20)
  8099b8:	983fce26 	beq	r19,zero,8098f4 <__alt_mem_onchip_mem+0xff7898f4>
  8099bc:	80c0030b 	ldhu	r3,12(r16)
  8099c0:	903fe61e 	bne	r18,zero,80995c <__alt_mem_onchip_mem+0xff78995c>
  8099c4:	8f000017 	ldw	fp,0(r17)
  8099c8:	8c800117 	ldw	r18,4(r17)
  8099cc:	8c400204 	addi	r17,r17,8
  8099d0:	003fe106 	br	809958 <__alt_mem_onchip_mem+0xff789958>
  8099d4:	8cc00017 	ldw	r19,0(r17)
  8099d8:	8c800117 	ldw	r18,4(r17)
  8099dc:	8c400204 	addi	r17,r17,8
  8099e0:	003fb306 	br	8098b0 <__alt_mem_onchip_mem+0xff7898b0>
  8099e4:	0005883a 	mov	r2,zero
  8099e8:	f800283a 	ret
  8099ec:	81000017 	ldw	r4,0(r16)
  8099f0:	80800417 	ldw	r2,16(r16)
  8099f4:	11005736 	bltu	r2,r4,809b54 <__sfvwrite_r+0x314>
  8099f8:	85c00517 	ldw	r23,20(r16)
  8099fc:	95c05536 	bltu	r18,r23,809b54 <__sfvwrite_r+0x314>
  809a00:	00a00034 	movhi	r2,32768
  809a04:	10bfffc4 	addi	r2,r2,-1
  809a08:	9009883a 	mov	r4,r18
  809a0c:	1480012e 	bgeu	r2,r18,809a14 <__sfvwrite_r+0x1d4>
  809a10:	1009883a 	mov	r4,r2
  809a14:	b80b883a 	mov	r5,r23
  809a18:	080e2b40 	call	80e2b4 <__divsi3>
  809a1c:	15cf383a 	mul	r7,r2,r23
  809a20:	81400717 	ldw	r5,28(r16)
  809a24:	80800917 	ldw	r2,36(r16)
  809a28:	e00d883a 	mov	r6,fp
  809a2c:	a809883a 	mov	r4,r21
  809a30:	103ee83a 	callr	r2
  809a34:	00bfdb16 	blt	zero,r2,8099a4 <__alt_mem_onchip_mem+0xff7899a4>
  809a38:	8080030b 	ldhu	r2,12(r16)
  809a3c:	10801014 	ori	r2,r2,64
  809a40:	8080030d 	sth	r2,12(r16)
  809a44:	00bfffc4 	movi	r2,-1
  809a48:	003fab06 	br	8098f8 <__alt_mem_onchip_mem+0xff7898f8>
  809a4c:	0027883a 	mov	r19,zero
  809a50:	0011883a 	mov	r8,zero
  809a54:	0039883a 	mov	fp,zero
  809a58:	0025883a 	mov	r18,zero
  809a5c:	90001f26 	beq	r18,zero,809adc <__sfvwrite_r+0x29c>
  809a60:	40005a26 	beq	r8,zero,809bcc <__sfvwrite_r+0x38c>
  809a64:	982d883a 	mov	r22,r19
  809a68:	94c0012e 	bgeu	r18,r19,809a70 <__sfvwrite_r+0x230>
  809a6c:	902d883a 	mov	r22,r18
  809a70:	81000017 	ldw	r4,0(r16)
  809a74:	80800417 	ldw	r2,16(r16)
  809a78:	b02f883a 	mov	r23,r22
  809a7c:	81c00517 	ldw	r7,20(r16)
  809a80:	1100032e 	bgeu	r2,r4,809a90 <__sfvwrite_r+0x250>
  809a84:	80c00217 	ldw	r3,8(r16)
  809a88:	38c7883a 	add	r3,r7,r3
  809a8c:	1d801816 	blt	r3,r22,809af0 <__sfvwrite_r+0x2b0>
  809a90:	b1c03e16 	blt	r22,r7,809b8c <__sfvwrite_r+0x34c>
  809a94:	80800917 	ldw	r2,36(r16)
  809a98:	81400717 	ldw	r5,28(r16)
  809a9c:	e00d883a 	mov	r6,fp
  809aa0:	da000115 	stw	r8,4(sp)
  809aa4:	a809883a 	mov	r4,r21
  809aa8:	103ee83a 	callr	r2
  809aac:	102f883a 	mov	r23,r2
  809ab0:	da000117 	ldw	r8,4(sp)
  809ab4:	00bfe00e 	bge	zero,r2,809a38 <__alt_mem_onchip_mem+0xff789a38>
  809ab8:	9de7c83a 	sub	r19,r19,r23
  809abc:	98001f26 	beq	r19,zero,809b3c <__sfvwrite_r+0x2fc>
  809ac0:	a0800217 	ldw	r2,8(r20)
  809ac4:	e5f9883a 	add	fp,fp,r23
  809ac8:	95e5c83a 	sub	r18,r18,r23
  809acc:	15efc83a 	sub	r23,r2,r23
  809ad0:	a5c00215 	stw	r23,8(r20)
  809ad4:	b83f8726 	beq	r23,zero,8098f4 <__alt_mem_onchip_mem+0xff7898f4>
  809ad8:	903fe11e 	bne	r18,zero,809a60 <__alt_mem_onchip_mem+0xff789a60>
  809adc:	8f000017 	ldw	fp,0(r17)
  809ae0:	8c800117 	ldw	r18,4(r17)
  809ae4:	0011883a 	mov	r8,zero
  809ae8:	8c400204 	addi	r17,r17,8
  809aec:	003fdb06 	br	809a5c <__alt_mem_onchip_mem+0xff789a5c>
  809af0:	180d883a 	mov	r6,r3
  809af4:	e00b883a 	mov	r5,fp
  809af8:	da000115 	stw	r8,4(sp)
  809afc:	d8c00015 	stw	r3,0(sp)
  809b00:	080a2400 	call	80a240 <memmove>
  809b04:	d8c00017 	ldw	r3,0(sp)
  809b08:	80800017 	ldw	r2,0(r16)
  809b0c:	800b883a 	mov	r5,r16
  809b10:	a809883a 	mov	r4,r21
  809b14:	10c5883a 	add	r2,r2,r3
  809b18:	80800015 	stw	r2,0(r16)
  809b1c:	d8c00015 	stw	r3,0(sp)
  809b20:	0808f340 	call	808f34 <_fflush_r>
  809b24:	d8c00017 	ldw	r3,0(sp)
  809b28:	da000117 	ldw	r8,4(sp)
  809b2c:	103fc21e 	bne	r2,zero,809a38 <__alt_mem_onchip_mem+0xff789a38>
  809b30:	182f883a 	mov	r23,r3
  809b34:	9de7c83a 	sub	r19,r19,r23
  809b38:	983fe11e 	bne	r19,zero,809ac0 <__alt_mem_onchip_mem+0xff789ac0>
  809b3c:	800b883a 	mov	r5,r16
  809b40:	a809883a 	mov	r4,r21
  809b44:	0808f340 	call	808f34 <_fflush_r>
  809b48:	103fbb1e 	bne	r2,zero,809a38 <__alt_mem_onchip_mem+0xff789a38>
  809b4c:	0011883a 	mov	r8,zero
  809b50:	003fdb06 	br	809ac0 <__alt_mem_onchip_mem+0xff789ac0>
  809b54:	94c0012e 	bgeu	r18,r19,809b5c <__sfvwrite_r+0x31c>
  809b58:	9027883a 	mov	r19,r18
  809b5c:	980d883a 	mov	r6,r19
  809b60:	e00b883a 	mov	r5,fp
  809b64:	080a2400 	call	80a240 <memmove>
  809b68:	80800217 	ldw	r2,8(r16)
  809b6c:	80c00017 	ldw	r3,0(r16)
  809b70:	14c5c83a 	sub	r2,r2,r19
  809b74:	1cc7883a 	add	r3,r3,r19
  809b78:	80800215 	stw	r2,8(r16)
  809b7c:	80c00015 	stw	r3,0(r16)
  809b80:	10004326 	beq	r2,zero,809c90 <__sfvwrite_r+0x450>
  809b84:	9805883a 	mov	r2,r19
  809b88:	003f8606 	br	8099a4 <__alt_mem_onchip_mem+0xff7899a4>
  809b8c:	b00d883a 	mov	r6,r22
  809b90:	e00b883a 	mov	r5,fp
  809b94:	da000115 	stw	r8,4(sp)
  809b98:	080a2400 	call	80a240 <memmove>
  809b9c:	80800217 	ldw	r2,8(r16)
  809ba0:	80c00017 	ldw	r3,0(r16)
  809ba4:	da000117 	ldw	r8,4(sp)
  809ba8:	1585c83a 	sub	r2,r2,r22
  809bac:	1dad883a 	add	r22,r3,r22
  809bb0:	80800215 	stw	r2,8(r16)
  809bb4:	85800015 	stw	r22,0(r16)
  809bb8:	003fbf06 	br	809ab8 <__alt_mem_onchip_mem+0xff789ab8>
  809bbc:	81000017 	ldw	r4,0(r16)
  809bc0:	9027883a 	mov	r19,r18
  809bc4:	902f883a 	mov	r23,r18
  809bc8:	003f6c06 	br	80997c <__alt_mem_onchip_mem+0xff78997c>
  809bcc:	900d883a 	mov	r6,r18
  809bd0:	01400284 	movi	r5,10
  809bd4:	e009883a 	mov	r4,fp
  809bd8:	080a0140 	call	80a014 <memchr>
  809bdc:	10003e26 	beq	r2,zero,809cd8 <__sfvwrite_r+0x498>
  809be0:	10800044 	addi	r2,r2,1
  809be4:	1727c83a 	sub	r19,r2,fp
  809be8:	02000044 	movi	r8,1
  809bec:	003f9d06 	br	809a64 <__alt_mem_onchip_mem+0xff789a64>
  809bf0:	80800517 	ldw	r2,20(r16)
  809bf4:	81400417 	ldw	r5,16(r16)
  809bf8:	81c00017 	ldw	r7,0(r16)
  809bfc:	10a7883a 	add	r19,r2,r2
  809c00:	9885883a 	add	r2,r19,r2
  809c04:	1026d7fa 	srli	r19,r2,31
  809c08:	396dc83a 	sub	r22,r7,r5
  809c0c:	b1000044 	addi	r4,r22,1
  809c10:	9885883a 	add	r2,r19,r2
  809c14:	1027d07a 	srai	r19,r2,1
  809c18:	2485883a 	add	r2,r4,r18
  809c1c:	980d883a 	mov	r6,r19
  809c20:	9880022e 	bgeu	r19,r2,809c2c <__sfvwrite_r+0x3ec>
  809c24:	1027883a 	mov	r19,r2
  809c28:	100d883a 	mov	r6,r2
  809c2c:	18c1000c 	andi	r3,r3,1024
  809c30:	18001c26 	beq	r3,zero,809ca4 <__sfvwrite_r+0x464>
  809c34:	300b883a 	mov	r5,r6
  809c38:	a809883a 	mov	r4,r21
  809c3c:	08040cc0 	call	8040cc <_malloc_r>
  809c40:	102f883a 	mov	r23,r2
  809c44:	10002926 	beq	r2,zero,809cec <__sfvwrite_r+0x4ac>
  809c48:	81400417 	ldw	r5,16(r16)
  809c4c:	b00d883a 	mov	r6,r22
  809c50:	1009883a 	mov	r4,r2
  809c54:	080a0f80 	call	80a0f8 <memcpy>
  809c58:	8080030b 	ldhu	r2,12(r16)
  809c5c:	00fedfc4 	movi	r3,-1153
  809c60:	10c4703a 	and	r2,r2,r3
  809c64:	10802014 	ori	r2,r2,128
  809c68:	8080030d 	sth	r2,12(r16)
  809c6c:	bd89883a 	add	r4,r23,r22
  809c70:	9d8fc83a 	sub	r7,r19,r22
  809c74:	85c00415 	stw	r23,16(r16)
  809c78:	84c00515 	stw	r19,20(r16)
  809c7c:	81000015 	stw	r4,0(r16)
  809c80:	9027883a 	mov	r19,r18
  809c84:	81c00215 	stw	r7,8(r16)
  809c88:	902f883a 	mov	r23,r18
  809c8c:	003f3b06 	br	80997c <__alt_mem_onchip_mem+0xff78997c>
  809c90:	800b883a 	mov	r5,r16
  809c94:	a809883a 	mov	r4,r21
  809c98:	0808f340 	call	808f34 <_fflush_r>
  809c9c:	103fb926 	beq	r2,zero,809b84 <__alt_mem_onchip_mem+0xff789b84>
  809ca0:	003f6506 	br	809a38 <__alt_mem_onchip_mem+0xff789a38>
  809ca4:	a809883a 	mov	r4,r21
  809ca8:	080b3f80 	call	80b3f8 <_realloc_r>
  809cac:	102f883a 	mov	r23,r2
  809cb0:	103fee1e 	bne	r2,zero,809c6c <__alt_mem_onchip_mem+0xff789c6c>
  809cb4:	81400417 	ldw	r5,16(r16)
  809cb8:	a809883a 	mov	r4,r21
  809cbc:	08095300 	call	809530 <_free_r>
  809cc0:	8080030b 	ldhu	r2,12(r16)
  809cc4:	00ffdfc4 	movi	r3,-129
  809cc8:	1884703a 	and	r2,r3,r2
  809ccc:	00c00304 	movi	r3,12
  809cd0:	a8c00015 	stw	r3,0(r21)
  809cd4:	003f5906 	br	809a3c <__alt_mem_onchip_mem+0xff789a3c>
  809cd8:	94c00044 	addi	r19,r18,1
  809cdc:	02000044 	movi	r8,1
  809ce0:	003f6006 	br	809a64 <__alt_mem_onchip_mem+0xff789a64>
  809ce4:	00bfffc4 	movi	r2,-1
  809ce8:	003f0306 	br	8098f8 <__alt_mem_onchip_mem+0xff7898f8>
  809cec:	00800304 	movi	r2,12
  809cf0:	a8800015 	stw	r2,0(r21)
  809cf4:	8080030b 	ldhu	r2,12(r16)
  809cf8:	003f5006 	br	809a3c <__alt_mem_onchip_mem+0xff789a3c>

00809cfc <_fwalk>:
  809cfc:	defff704 	addi	sp,sp,-36
  809d00:	dd000415 	stw	r20,16(sp)
  809d04:	dfc00815 	stw	ra,32(sp)
  809d08:	ddc00715 	stw	r23,28(sp)
  809d0c:	dd800615 	stw	r22,24(sp)
  809d10:	dd400515 	stw	r21,20(sp)
  809d14:	dcc00315 	stw	r19,12(sp)
  809d18:	dc800215 	stw	r18,8(sp)
  809d1c:	dc400115 	stw	r17,4(sp)
  809d20:	dc000015 	stw	r16,0(sp)
  809d24:	2500b804 	addi	r20,r4,736
  809d28:	a0002326 	beq	r20,zero,809db8 <_fwalk+0xbc>
  809d2c:	282b883a 	mov	r21,r5
  809d30:	002f883a 	mov	r23,zero
  809d34:	05800044 	movi	r22,1
  809d38:	04ffffc4 	movi	r19,-1
  809d3c:	a4400117 	ldw	r17,4(r20)
  809d40:	a4800217 	ldw	r18,8(r20)
  809d44:	8c7fffc4 	addi	r17,r17,-1
  809d48:	88000d16 	blt	r17,zero,809d80 <_fwalk+0x84>
  809d4c:	94000304 	addi	r16,r18,12
  809d50:	94800384 	addi	r18,r18,14
  809d54:	8080000b 	ldhu	r2,0(r16)
  809d58:	8c7fffc4 	addi	r17,r17,-1
  809d5c:	813ffd04 	addi	r4,r16,-12
  809d60:	b080042e 	bgeu	r22,r2,809d74 <_fwalk+0x78>
  809d64:	9080000f 	ldh	r2,0(r18)
  809d68:	14c00226 	beq	r2,r19,809d74 <_fwalk+0x78>
  809d6c:	a83ee83a 	callr	r21
  809d70:	b8aeb03a 	or	r23,r23,r2
  809d74:	84001a04 	addi	r16,r16,104
  809d78:	94801a04 	addi	r18,r18,104
  809d7c:	8cfff51e 	bne	r17,r19,809d54 <__alt_mem_onchip_mem+0xff789d54>
  809d80:	a5000017 	ldw	r20,0(r20)
  809d84:	a03fed1e 	bne	r20,zero,809d3c <__alt_mem_onchip_mem+0xff789d3c>
  809d88:	b805883a 	mov	r2,r23
  809d8c:	dfc00817 	ldw	ra,32(sp)
  809d90:	ddc00717 	ldw	r23,28(sp)
  809d94:	dd800617 	ldw	r22,24(sp)
  809d98:	dd400517 	ldw	r21,20(sp)
  809d9c:	dd000417 	ldw	r20,16(sp)
  809da0:	dcc00317 	ldw	r19,12(sp)
  809da4:	dc800217 	ldw	r18,8(sp)
  809da8:	dc400117 	ldw	r17,4(sp)
  809dac:	dc000017 	ldw	r16,0(sp)
  809db0:	dec00904 	addi	sp,sp,36
  809db4:	f800283a 	ret
  809db8:	002f883a 	mov	r23,zero
  809dbc:	003ff206 	br	809d88 <__alt_mem_onchip_mem+0xff789d88>

00809dc0 <_fwalk_reent>:
  809dc0:	defff704 	addi	sp,sp,-36
  809dc4:	dd000415 	stw	r20,16(sp)
  809dc8:	dfc00815 	stw	ra,32(sp)
  809dcc:	ddc00715 	stw	r23,28(sp)
  809dd0:	dd800615 	stw	r22,24(sp)
  809dd4:	dd400515 	stw	r21,20(sp)
  809dd8:	dcc00315 	stw	r19,12(sp)
  809ddc:	dc800215 	stw	r18,8(sp)
  809de0:	dc400115 	stw	r17,4(sp)
  809de4:	dc000015 	stw	r16,0(sp)
  809de8:	2500b804 	addi	r20,r4,736
  809dec:	a0002326 	beq	r20,zero,809e7c <_fwalk_reent+0xbc>
  809df0:	282b883a 	mov	r21,r5
  809df4:	2027883a 	mov	r19,r4
  809df8:	002f883a 	mov	r23,zero
  809dfc:	05800044 	movi	r22,1
  809e00:	04bfffc4 	movi	r18,-1
  809e04:	a4400117 	ldw	r17,4(r20)
  809e08:	a4000217 	ldw	r16,8(r20)
  809e0c:	8c7fffc4 	addi	r17,r17,-1
  809e10:	88000c16 	blt	r17,zero,809e44 <_fwalk_reent+0x84>
  809e14:	84000304 	addi	r16,r16,12
  809e18:	8080000b 	ldhu	r2,0(r16)
  809e1c:	8c7fffc4 	addi	r17,r17,-1
  809e20:	817ffd04 	addi	r5,r16,-12
  809e24:	b080052e 	bgeu	r22,r2,809e3c <_fwalk_reent+0x7c>
  809e28:	8080008f 	ldh	r2,2(r16)
  809e2c:	9809883a 	mov	r4,r19
  809e30:	14800226 	beq	r2,r18,809e3c <_fwalk_reent+0x7c>
  809e34:	a83ee83a 	callr	r21
  809e38:	b8aeb03a 	or	r23,r23,r2
  809e3c:	84001a04 	addi	r16,r16,104
  809e40:	8cbff51e 	bne	r17,r18,809e18 <__alt_mem_onchip_mem+0xff789e18>
  809e44:	a5000017 	ldw	r20,0(r20)
  809e48:	a03fee1e 	bne	r20,zero,809e04 <__alt_mem_onchip_mem+0xff789e04>
  809e4c:	b805883a 	mov	r2,r23
  809e50:	dfc00817 	ldw	ra,32(sp)
  809e54:	ddc00717 	ldw	r23,28(sp)
  809e58:	dd800617 	ldw	r22,24(sp)
  809e5c:	dd400517 	ldw	r21,20(sp)
  809e60:	dd000417 	ldw	r20,16(sp)
  809e64:	dcc00317 	ldw	r19,12(sp)
  809e68:	dc800217 	ldw	r18,8(sp)
  809e6c:	dc400117 	ldw	r17,4(sp)
  809e70:	dc000017 	ldw	r16,0(sp)
  809e74:	dec00904 	addi	sp,sp,36
  809e78:	f800283a 	ret
  809e7c:	002f883a 	mov	r23,zero
  809e80:	003ff206 	br	809e4c <__alt_mem_onchip_mem+0xff789e4c>

00809e84 <_isatty_r>:
  809e84:	defffd04 	addi	sp,sp,-12
  809e88:	dc000015 	stw	r16,0(sp)
  809e8c:	040020b4 	movhi	r16,130
  809e90:	dc400115 	stw	r17,4(sp)
  809e94:	8423dd04 	addi	r16,r16,-28812
  809e98:	2023883a 	mov	r17,r4
  809e9c:	2809883a 	mov	r4,r5
  809ea0:	dfc00215 	stw	ra,8(sp)
  809ea4:	80000015 	stw	zero,0(r16)
  809ea8:	0810eb00 	call	810eb0 <isatty>
  809eac:	00ffffc4 	movi	r3,-1
  809eb0:	10c00526 	beq	r2,r3,809ec8 <_isatty_r+0x44>
  809eb4:	dfc00217 	ldw	ra,8(sp)
  809eb8:	dc400117 	ldw	r17,4(sp)
  809ebc:	dc000017 	ldw	r16,0(sp)
  809ec0:	dec00304 	addi	sp,sp,12
  809ec4:	f800283a 	ret
  809ec8:	80c00017 	ldw	r3,0(r16)
  809ecc:	183ff926 	beq	r3,zero,809eb4 <__alt_mem_onchip_mem+0xff789eb4>
  809ed0:	88c00015 	stw	r3,0(r17)
  809ed4:	003ff706 	br	809eb4 <__alt_mem_onchip_mem+0xff789eb4>

00809ed8 <_setlocale_r>:
  809ed8:	30001b26 	beq	r6,zero,809f48 <_setlocale_r+0x70>
  809edc:	01402074 	movhi	r5,129
  809ee0:	defffe04 	addi	sp,sp,-8
  809ee4:	2953ca04 	addi	r5,r5,20264
  809ee8:	3009883a 	mov	r4,r6
  809eec:	dc000015 	stw	r16,0(sp)
  809ef0:	dfc00115 	stw	ra,4(sp)
  809ef4:	3021883a 	mov	r16,r6
  809ef8:	080b9d00 	call	80b9d0 <strcmp>
  809efc:	1000061e 	bne	r2,zero,809f18 <_setlocale_r+0x40>
  809f00:	00802074 	movhi	r2,129
  809f04:	1093ab04 	addi	r2,r2,20140
  809f08:	dfc00117 	ldw	ra,4(sp)
  809f0c:	dc000017 	ldw	r16,0(sp)
  809f10:	dec00204 	addi	sp,sp,8
  809f14:	f800283a 	ret
  809f18:	01402074 	movhi	r5,129
  809f1c:	2953ab04 	addi	r5,r5,20140
  809f20:	8009883a 	mov	r4,r16
  809f24:	080b9d00 	call	80b9d0 <strcmp>
  809f28:	103ff526 	beq	r2,zero,809f00 <__alt_mem_onchip_mem+0xff789f00>
  809f2c:	01402074 	movhi	r5,129
  809f30:	2953b504 	addi	r5,r5,20180
  809f34:	8009883a 	mov	r4,r16
  809f38:	080b9d00 	call	80b9d0 <strcmp>
  809f3c:	103ff026 	beq	r2,zero,809f00 <__alt_mem_onchip_mem+0xff789f00>
  809f40:	0005883a 	mov	r2,zero
  809f44:	003ff006 	br	809f08 <__alt_mem_onchip_mem+0xff789f08>
  809f48:	00802074 	movhi	r2,129
  809f4c:	1093ab04 	addi	r2,r2,20140
  809f50:	f800283a 	ret

00809f54 <__locale_charset>:
  809f54:	00802074 	movhi	r2,129
  809f58:	10972804 	addi	r2,r2,23712
  809f5c:	f800283a 	ret

00809f60 <__locale_mb_cur_max>:
  809f60:	00802074 	movhi	r2,129
  809f64:	109c3d04 	addi	r2,r2,28916
  809f68:	10800017 	ldw	r2,0(r2)
  809f6c:	f800283a 	ret

00809f70 <__locale_msgcharset>:
  809f70:	00802074 	movhi	r2,129
  809f74:	10972004 	addi	r2,r2,23680
  809f78:	f800283a 	ret

00809f7c <__locale_cjk_lang>:
  809f7c:	0005883a 	mov	r2,zero
  809f80:	f800283a 	ret

00809f84 <_localeconv_r>:
  809f84:	00802074 	movhi	r2,129
  809f88:	10973004 	addi	r2,r2,23744
  809f8c:	f800283a 	ret

00809f90 <setlocale>:
  809f90:	00802074 	movhi	r2,129
  809f94:	109c3a04 	addi	r2,r2,28904
  809f98:	280d883a 	mov	r6,r5
  809f9c:	200b883a 	mov	r5,r4
  809fa0:	11000017 	ldw	r4,0(r2)
  809fa4:	0809ed81 	jmpi	809ed8 <_setlocale_r>

00809fa8 <localeconv>:
  809fa8:	00802074 	movhi	r2,129
  809fac:	10973004 	addi	r2,r2,23744
  809fb0:	f800283a 	ret

00809fb4 <_lseek_r>:
  809fb4:	defffd04 	addi	sp,sp,-12
  809fb8:	2805883a 	mov	r2,r5
  809fbc:	dc000015 	stw	r16,0(sp)
  809fc0:	040020b4 	movhi	r16,130
  809fc4:	dc400115 	stw	r17,4(sp)
  809fc8:	300b883a 	mov	r5,r6
  809fcc:	8423dd04 	addi	r16,r16,-28812
  809fd0:	2023883a 	mov	r17,r4
  809fd4:	380d883a 	mov	r6,r7
  809fd8:	1009883a 	mov	r4,r2
  809fdc:	dfc00215 	stw	ra,8(sp)
  809fe0:	80000015 	stw	zero,0(r16)
  809fe4:	081107c0 	call	81107c <lseek>
  809fe8:	00ffffc4 	movi	r3,-1
  809fec:	10c00526 	beq	r2,r3,80a004 <_lseek_r+0x50>
  809ff0:	dfc00217 	ldw	ra,8(sp)
  809ff4:	dc400117 	ldw	r17,4(sp)
  809ff8:	dc000017 	ldw	r16,0(sp)
  809ffc:	dec00304 	addi	sp,sp,12
  80a000:	f800283a 	ret
  80a004:	80c00017 	ldw	r3,0(r16)
  80a008:	183ff926 	beq	r3,zero,809ff0 <__alt_mem_onchip_mem+0xff789ff0>
  80a00c:	88c00015 	stw	r3,0(r17)
  80a010:	003ff706 	br	809ff0 <__alt_mem_onchip_mem+0xff789ff0>

0080a014 <memchr>:
  80a014:	208000cc 	andi	r2,r4,3
  80a018:	280f883a 	mov	r7,r5
  80a01c:	10003426 	beq	r2,zero,80a0f0 <memchr+0xdc>
  80a020:	30bfffc4 	addi	r2,r6,-1
  80a024:	30001a26 	beq	r6,zero,80a090 <memchr+0x7c>
  80a028:	20c00003 	ldbu	r3,0(r4)
  80a02c:	29803fcc 	andi	r6,r5,255
  80a030:	30c0051e 	bne	r6,r3,80a048 <memchr+0x34>
  80a034:	00001806 	br	80a098 <memchr+0x84>
  80a038:	10001526 	beq	r2,zero,80a090 <memchr+0x7c>
  80a03c:	20c00003 	ldbu	r3,0(r4)
  80a040:	10bfffc4 	addi	r2,r2,-1
  80a044:	30c01426 	beq	r6,r3,80a098 <memchr+0x84>
  80a048:	21000044 	addi	r4,r4,1
  80a04c:	20c000cc 	andi	r3,r4,3
  80a050:	183ff91e 	bne	r3,zero,80a038 <__alt_mem_onchip_mem+0xff78a038>
  80a054:	020000c4 	movi	r8,3
  80a058:	40801136 	bltu	r8,r2,80a0a0 <memchr+0x8c>
  80a05c:	10000c26 	beq	r2,zero,80a090 <memchr+0x7c>
  80a060:	20c00003 	ldbu	r3,0(r4)
  80a064:	29403fcc 	andi	r5,r5,255
  80a068:	28c00b26 	beq	r5,r3,80a098 <memchr+0x84>
  80a06c:	20c00044 	addi	r3,r4,1
  80a070:	39803fcc 	andi	r6,r7,255
  80a074:	2089883a 	add	r4,r4,r2
  80a078:	00000306 	br	80a088 <memchr+0x74>
  80a07c:	18c00044 	addi	r3,r3,1
  80a080:	197fffc3 	ldbu	r5,-1(r3)
  80a084:	31400526 	beq	r6,r5,80a09c <memchr+0x88>
  80a088:	1805883a 	mov	r2,r3
  80a08c:	20fffb1e 	bne	r4,r3,80a07c <__alt_mem_onchip_mem+0xff78a07c>
  80a090:	0005883a 	mov	r2,zero
  80a094:	f800283a 	ret
  80a098:	2005883a 	mov	r2,r4
  80a09c:	f800283a 	ret
  80a0a0:	28c03fcc 	andi	r3,r5,255
  80a0a4:	1812923a 	slli	r9,r3,8
  80a0a8:	02ffbff4 	movhi	r11,65279
  80a0ac:	02a02074 	movhi	r10,32897
  80a0b0:	48d2b03a 	or	r9,r9,r3
  80a0b4:	4806943a 	slli	r3,r9,16
  80a0b8:	5affbfc4 	addi	r11,r11,-257
  80a0bc:	52a02004 	addi	r10,r10,-32640
  80a0c0:	48d2b03a 	or	r9,r9,r3
  80a0c4:	20c00017 	ldw	r3,0(r4)
  80a0c8:	48c6f03a 	xor	r3,r9,r3
  80a0cc:	1acd883a 	add	r6,r3,r11
  80a0d0:	00c6303a 	nor	r3,zero,r3
  80a0d4:	30c6703a 	and	r3,r6,r3
  80a0d8:	1a86703a 	and	r3,r3,r10
  80a0dc:	183fe01e 	bne	r3,zero,80a060 <__alt_mem_onchip_mem+0xff78a060>
  80a0e0:	10bfff04 	addi	r2,r2,-4
  80a0e4:	21000104 	addi	r4,r4,4
  80a0e8:	40bff636 	bltu	r8,r2,80a0c4 <__alt_mem_onchip_mem+0xff78a0c4>
  80a0ec:	003fdb06 	br	80a05c <__alt_mem_onchip_mem+0xff78a05c>
  80a0f0:	3005883a 	mov	r2,r6
  80a0f4:	003fd706 	br	80a054 <__alt_mem_onchip_mem+0xff78a054>

0080a0f8 <memcpy>:
  80a0f8:	defffd04 	addi	sp,sp,-12
  80a0fc:	dfc00215 	stw	ra,8(sp)
  80a100:	dc400115 	stw	r17,4(sp)
  80a104:	dc000015 	stw	r16,0(sp)
  80a108:	00c003c4 	movi	r3,15
  80a10c:	2005883a 	mov	r2,r4
  80a110:	1980452e 	bgeu	r3,r6,80a228 <memcpy+0x130>
  80a114:	2906b03a 	or	r3,r5,r4
  80a118:	18c000cc 	andi	r3,r3,3
  80a11c:	1800441e 	bne	r3,zero,80a230 <memcpy+0x138>
  80a120:	347ffc04 	addi	r17,r6,-16
  80a124:	8822d13a 	srli	r17,r17,4
  80a128:	28c00104 	addi	r3,r5,4
  80a12c:	23400104 	addi	r13,r4,4
  80a130:	8820913a 	slli	r16,r17,4
  80a134:	2b000204 	addi	r12,r5,8
  80a138:	22c00204 	addi	r11,r4,8
  80a13c:	84000504 	addi	r16,r16,20
  80a140:	2a800304 	addi	r10,r5,12
  80a144:	22400304 	addi	r9,r4,12
  80a148:	2c21883a 	add	r16,r5,r16
  80a14c:	2811883a 	mov	r8,r5
  80a150:	200f883a 	mov	r7,r4
  80a154:	41000017 	ldw	r4,0(r8)
  80a158:	1fc00017 	ldw	ra,0(r3)
  80a15c:	63c00017 	ldw	r15,0(r12)
  80a160:	39000015 	stw	r4,0(r7)
  80a164:	53800017 	ldw	r14,0(r10)
  80a168:	6fc00015 	stw	ra,0(r13)
  80a16c:	5bc00015 	stw	r15,0(r11)
  80a170:	4b800015 	stw	r14,0(r9)
  80a174:	18c00404 	addi	r3,r3,16
  80a178:	39c00404 	addi	r7,r7,16
  80a17c:	42000404 	addi	r8,r8,16
  80a180:	6b400404 	addi	r13,r13,16
  80a184:	63000404 	addi	r12,r12,16
  80a188:	5ac00404 	addi	r11,r11,16
  80a18c:	52800404 	addi	r10,r10,16
  80a190:	4a400404 	addi	r9,r9,16
  80a194:	1c3fef1e 	bne	r3,r16,80a154 <__alt_mem_onchip_mem+0xff78a154>
  80a198:	89c00044 	addi	r7,r17,1
  80a19c:	380e913a 	slli	r7,r7,4
  80a1a0:	310003cc 	andi	r4,r6,15
  80a1a4:	02c000c4 	movi	r11,3
  80a1a8:	11c7883a 	add	r3,r2,r7
  80a1ac:	29cb883a 	add	r5,r5,r7
  80a1b0:	5900212e 	bgeu	r11,r4,80a238 <memcpy+0x140>
  80a1b4:	1813883a 	mov	r9,r3
  80a1b8:	2811883a 	mov	r8,r5
  80a1bc:	200f883a 	mov	r7,r4
  80a1c0:	42800017 	ldw	r10,0(r8)
  80a1c4:	4a400104 	addi	r9,r9,4
  80a1c8:	39ffff04 	addi	r7,r7,-4
  80a1cc:	4abfff15 	stw	r10,-4(r9)
  80a1d0:	42000104 	addi	r8,r8,4
  80a1d4:	59fffa36 	bltu	r11,r7,80a1c0 <__alt_mem_onchip_mem+0xff78a1c0>
  80a1d8:	213fff04 	addi	r4,r4,-4
  80a1dc:	2008d0ba 	srli	r4,r4,2
  80a1e0:	318000cc 	andi	r6,r6,3
  80a1e4:	21000044 	addi	r4,r4,1
  80a1e8:	2109883a 	add	r4,r4,r4
  80a1ec:	2109883a 	add	r4,r4,r4
  80a1f0:	1907883a 	add	r3,r3,r4
  80a1f4:	290b883a 	add	r5,r5,r4
  80a1f8:	30000626 	beq	r6,zero,80a214 <memcpy+0x11c>
  80a1fc:	198d883a 	add	r6,r3,r6
  80a200:	29c00003 	ldbu	r7,0(r5)
  80a204:	18c00044 	addi	r3,r3,1
  80a208:	29400044 	addi	r5,r5,1
  80a20c:	19ffffc5 	stb	r7,-1(r3)
  80a210:	19bffb1e 	bne	r3,r6,80a200 <__alt_mem_onchip_mem+0xff78a200>
  80a214:	dfc00217 	ldw	ra,8(sp)
  80a218:	dc400117 	ldw	r17,4(sp)
  80a21c:	dc000017 	ldw	r16,0(sp)
  80a220:	dec00304 	addi	sp,sp,12
  80a224:	f800283a 	ret
  80a228:	2007883a 	mov	r3,r4
  80a22c:	003ff206 	br	80a1f8 <__alt_mem_onchip_mem+0xff78a1f8>
  80a230:	2007883a 	mov	r3,r4
  80a234:	003ff106 	br	80a1fc <__alt_mem_onchip_mem+0xff78a1fc>
  80a238:	200d883a 	mov	r6,r4
  80a23c:	003fee06 	br	80a1f8 <__alt_mem_onchip_mem+0xff78a1f8>

0080a240 <memmove>:
  80a240:	2005883a 	mov	r2,r4
  80a244:	29000b2e 	bgeu	r5,r4,80a274 <memmove+0x34>
  80a248:	298f883a 	add	r7,r5,r6
  80a24c:	21c0092e 	bgeu	r4,r7,80a274 <memmove+0x34>
  80a250:	2187883a 	add	r3,r4,r6
  80a254:	198bc83a 	sub	r5,r3,r6
  80a258:	30004826 	beq	r6,zero,80a37c <memmove+0x13c>
  80a25c:	39ffffc4 	addi	r7,r7,-1
  80a260:	39000003 	ldbu	r4,0(r7)
  80a264:	18ffffc4 	addi	r3,r3,-1
  80a268:	19000005 	stb	r4,0(r3)
  80a26c:	28fffb1e 	bne	r5,r3,80a25c <__alt_mem_onchip_mem+0xff78a25c>
  80a270:	f800283a 	ret
  80a274:	00c003c4 	movi	r3,15
  80a278:	1980412e 	bgeu	r3,r6,80a380 <memmove+0x140>
  80a27c:	2886b03a 	or	r3,r5,r2
  80a280:	18c000cc 	andi	r3,r3,3
  80a284:	1800401e 	bne	r3,zero,80a388 <memmove+0x148>
  80a288:	33fffc04 	addi	r15,r6,-16
  80a28c:	781ed13a 	srli	r15,r15,4
  80a290:	28c00104 	addi	r3,r5,4
  80a294:	13400104 	addi	r13,r2,4
  80a298:	781c913a 	slli	r14,r15,4
  80a29c:	2b000204 	addi	r12,r5,8
  80a2a0:	12c00204 	addi	r11,r2,8
  80a2a4:	73800504 	addi	r14,r14,20
  80a2a8:	2a800304 	addi	r10,r5,12
  80a2ac:	12400304 	addi	r9,r2,12
  80a2b0:	2b9d883a 	add	r14,r5,r14
  80a2b4:	2811883a 	mov	r8,r5
  80a2b8:	100f883a 	mov	r7,r2
  80a2bc:	41000017 	ldw	r4,0(r8)
  80a2c0:	39c00404 	addi	r7,r7,16
  80a2c4:	18c00404 	addi	r3,r3,16
  80a2c8:	393ffc15 	stw	r4,-16(r7)
  80a2cc:	193ffc17 	ldw	r4,-16(r3)
  80a2d0:	6b400404 	addi	r13,r13,16
  80a2d4:	5ac00404 	addi	r11,r11,16
  80a2d8:	693ffc15 	stw	r4,-16(r13)
  80a2dc:	61000017 	ldw	r4,0(r12)
  80a2e0:	4a400404 	addi	r9,r9,16
  80a2e4:	42000404 	addi	r8,r8,16
  80a2e8:	593ffc15 	stw	r4,-16(r11)
  80a2ec:	51000017 	ldw	r4,0(r10)
  80a2f0:	63000404 	addi	r12,r12,16
  80a2f4:	52800404 	addi	r10,r10,16
  80a2f8:	493ffc15 	stw	r4,-16(r9)
  80a2fc:	1bbfef1e 	bne	r3,r14,80a2bc <__alt_mem_onchip_mem+0xff78a2bc>
  80a300:	79000044 	addi	r4,r15,1
  80a304:	2008913a 	slli	r4,r4,4
  80a308:	328003cc 	andi	r10,r6,15
  80a30c:	02c000c4 	movi	r11,3
  80a310:	1107883a 	add	r3,r2,r4
  80a314:	290b883a 	add	r5,r5,r4
  80a318:	5a801e2e 	bgeu	r11,r10,80a394 <memmove+0x154>
  80a31c:	1813883a 	mov	r9,r3
  80a320:	2811883a 	mov	r8,r5
  80a324:	500f883a 	mov	r7,r10
  80a328:	41000017 	ldw	r4,0(r8)
  80a32c:	4a400104 	addi	r9,r9,4
  80a330:	39ffff04 	addi	r7,r7,-4
  80a334:	493fff15 	stw	r4,-4(r9)
  80a338:	42000104 	addi	r8,r8,4
  80a33c:	59fffa36 	bltu	r11,r7,80a328 <__alt_mem_onchip_mem+0xff78a328>
  80a340:	513fff04 	addi	r4,r10,-4
  80a344:	2008d0ba 	srli	r4,r4,2
  80a348:	318000cc 	andi	r6,r6,3
  80a34c:	21000044 	addi	r4,r4,1
  80a350:	2109883a 	add	r4,r4,r4
  80a354:	2109883a 	add	r4,r4,r4
  80a358:	1907883a 	add	r3,r3,r4
  80a35c:	290b883a 	add	r5,r5,r4
  80a360:	30000b26 	beq	r6,zero,80a390 <memmove+0x150>
  80a364:	198d883a 	add	r6,r3,r6
  80a368:	29c00003 	ldbu	r7,0(r5)
  80a36c:	18c00044 	addi	r3,r3,1
  80a370:	29400044 	addi	r5,r5,1
  80a374:	19ffffc5 	stb	r7,-1(r3)
  80a378:	19bffb1e 	bne	r3,r6,80a368 <__alt_mem_onchip_mem+0xff78a368>
  80a37c:	f800283a 	ret
  80a380:	1007883a 	mov	r3,r2
  80a384:	003ff606 	br	80a360 <__alt_mem_onchip_mem+0xff78a360>
  80a388:	1007883a 	mov	r3,r2
  80a38c:	003ff506 	br	80a364 <__alt_mem_onchip_mem+0xff78a364>
  80a390:	f800283a 	ret
  80a394:	500d883a 	mov	r6,r10
  80a398:	003ff106 	br	80a360 <__alt_mem_onchip_mem+0xff78a360>

0080a39c <_Balloc>:
  80a39c:	20801317 	ldw	r2,76(r4)
  80a3a0:	defffc04 	addi	sp,sp,-16
  80a3a4:	dc400115 	stw	r17,4(sp)
  80a3a8:	dc000015 	stw	r16,0(sp)
  80a3ac:	dfc00315 	stw	ra,12(sp)
  80a3b0:	dc800215 	stw	r18,8(sp)
  80a3b4:	2023883a 	mov	r17,r4
  80a3b8:	2821883a 	mov	r16,r5
  80a3bc:	10000f26 	beq	r2,zero,80a3fc <_Balloc+0x60>
  80a3c0:	8407883a 	add	r3,r16,r16
  80a3c4:	18c7883a 	add	r3,r3,r3
  80a3c8:	10c7883a 	add	r3,r2,r3
  80a3cc:	18800017 	ldw	r2,0(r3)
  80a3d0:	10001126 	beq	r2,zero,80a418 <_Balloc+0x7c>
  80a3d4:	11000017 	ldw	r4,0(r2)
  80a3d8:	19000015 	stw	r4,0(r3)
  80a3dc:	10000415 	stw	zero,16(r2)
  80a3e0:	10000315 	stw	zero,12(r2)
  80a3e4:	dfc00317 	ldw	ra,12(sp)
  80a3e8:	dc800217 	ldw	r18,8(sp)
  80a3ec:	dc400117 	ldw	r17,4(sp)
  80a3f0:	dc000017 	ldw	r16,0(sp)
  80a3f4:	dec00404 	addi	sp,sp,16
  80a3f8:	f800283a 	ret
  80a3fc:	01800844 	movi	r6,33
  80a400:	01400104 	movi	r5,4
  80a404:	080d0f40 	call	80d0f4 <_calloc_r>
  80a408:	88801315 	stw	r2,76(r17)
  80a40c:	103fec1e 	bne	r2,zero,80a3c0 <__alt_mem_onchip_mem+0xff78a3c0>
  80a410:	0005883a 	mov	r2,zero
  80a414:	003ff306 	br	80a3e4 <__alt_mem_onchip_mem+0xff78a3e4>
  80a418:	01400044 	movi	r5,1
  80a41c:	2c24983a 	sll	r18,r5,r16
  80a420:	8809883a 	mov	r4,r17
  80a424:	91800144 	addi	r6,r18,5
  80a428:	318d883a 	add	r6,r6,r6
  80a42c:	318d883a 	add	r6,r6,r6
  80a430:	080d0f40 	call	80d0f4 <_calloc_r>
  80a434:	103ff626 	beq	r2,zero,80a410 <__alt_mem_onchip_mem+0xff78a410>
  80a438:	14000115 	stw	r16,4(r2)
  80a43c:	14800215 	stw	r18,8(r2)
  80a440:	003fe606 	br	80a3dc <__alt_mem_onchip_mem+0xff78a3dc>

0080a444 <_Bfree>:
  80a444:	28000826 	beq	r5,zero,80a468 <_Bfree+0x24>
  80a448:	28c00117 	ldw	r3,4(r5)
  80a44c:	20801317 	ldw	r2,76(r4)
  80a450:	18c7883a 	add	r3,r3,r3
  80a454:	18c7883a 	add	r3,r3,r3
  80a458:	10c5883a 	add	r2,r2,r3
  80a45c:	10c00017 	ldw	r3,0(r2)
  80a460:	28c00015 	stw	r3,0(r5)
  80a464:	11400015 	stw	r5,0(r2)
  80a468:	f800283a 	ret

0080a46c <__multadd>:
  80a46c:	defffa04 	addi	sp,sp,-24
  80a470:	dc800315 	stw	r18,12(sp)
  80a474:	dc400215 	stw	r17,8(sp)
  80a478:	dc000115 	stw	r16,4(sp)
  80a47c:	2823883a 	mov	r17,r5
  80a480:	2c000417 	ldw	r16,16(r5)
  80a484:	dfc00515 	stw	ra,20(sp)
  80a488:	dcc00415 	stw	r19,16(sp)
  80a48c:	2025883a 	mov	r18,r4
  80a490:	29400504 	addi	r5,r5,20
  80a494:	0011883a 	mov	r8,zero
  80a498:	28c00017 	ldw	r3,0(r5)
  80a49c:	29400104 	addi	r5,r5,4
  80a4a0:	42000044 	addi	r8,r8,1
  80a4a4:	18bfffcc 	andi	r2,r3,65535
  80a4a8:	1185383a 	mul	r2,r2,r6
  80a4ac:	1806d43a 	srli	r3,r3,16
  80a4b0:	11cf883a 	add	r7,r2,r7
  80a4b4:	3808d43a 	srli	r4,r7,16
  80a4b8:	1987383a 	mul	r3,r3,r6
  80a4bc:	38bfffcc 	andi	r2,r7,65535
  80a4c0:	1907883a 	add	r3,r3,r4
  80a4c4:	1808943a 	slli	r4,r3,16
  80a4c8:	180ed43a 	srli	r7,r3,16
  80a4cc:	2085883a 	add	r2,r4,r2
  80a4d0:	28bfff15 	stw	r2,-4(r5)
  80a4d4:	443ff016 	blt	r8,r16,80a498 <__alt_mem_onchip_mem+0xff78a498>
  80a4d8:	38000926 	beq	r7,zero,80a500 <__multadd+0x94>
  80a4dc:	88800217 	ldw	r2,8(r17)
  80a4e0:	80800f0e 	bge	r16,r2,80a520 <__multadd+0xb4>
  80a4e4:	80800144 	addi	r2,r16,5
  80a4e8:	1085883a 	add	r2,r2,r2
  80a4ec:	1085883a 	add	r2,r2,r2
  80a4f0:	8885883a 	add	r2,r17,r2
  80a4f4:	11c00015 	stw	r7,0(r2)
  80a4f8:	84000044 	addi	r16,r16,1
  80a4fc:	8c000415 	stw	r16,16(r17)
  80a500:	8805883a 	mov	r2,r17
  80a504:	dfc00517 	ldw	ra,20(sp)
  80a508:	dcc00417 	ldw	r19,16(sp)
  80a50c:	dc800317 	ldw	r18,12(sp)
  80a510:	dc400217 	ldw	r17,8(sp)
  80a514:	dc000117 	ldw	r16,4(sp)
  80a518:	dec00604 	addi	sp,sp,24
  80a51c:	f800283a 	ret
  80a520:	89400117 	ldw	r5,4(r17)
  80a524:	9009883a 	mov	r4,r18
  80a528:	d9c00015 	stw	r7,0(sp)
  80a52c:	29400044 	addi	r5,r5,1
  80a530:	080a39c0 	call	80a39c <_Balloc>
  80a534:	89800417 	ldw	r6,16(r17)
  80a538:	89400304 	addi	r5,r17,12
  80a53c:	11000304 	addi	r4,r2,12
  80a540:	31800084 	addi	r6,r6,2
  80a544:	318d883a 	add	r6,r6,r6
  80a548:	318d883a 	add	r6,r6,r6
  80a54c:	1027883a 	mov	r19,r2
  80a550:	080a0f80 	call	80a0f8 <memcpy>
  80a554:	d9c00017 	ldw	r7,0(sp)
  80a558:	88000a26 	beq	r17,zero,80a584 <__multadd+0x118>
  80a55c:	88c00117 	ldw	r3,4(r17)
  80a560:	90801317 	ldw	r2,76(r18)
  80a564:	18c7883a 	add	r3,r3,r3
  80a568:	18c7883a 	add	r3,r3,r3
  80a56c:	10c5883a 	add	r2,r2,r3
  80a570:	10c00017 	ldw	r3,0(r2)
  80a574:	88c00015 	stw	r3,0(r17)
  80a578:	14400015 	stw	r17,0(r2)
  80a57c:	9823883a 	mov	r17,r19
  80a580:	003fd806 	br	80a4e4 <__alt_mem_onchip_mem+0xff78a4e4>
  80a584:	9823883a 	mov	r17,r19
  80a588:	003fd606 	br	80a4e4 <__alt_mem_onchip_mem+0xff78a4e4>

0080a58c <__s2b>:
  80a58c:	defff904 	addi	sp,sp,-28
  80a590:	dc400115 	stw	r17,4(sp)
  80a594:	dc000015 	stw	r16,0(sp)
  80a598:	2023883a 	mov	r17,r4
  80a59c:	2821883a 	mov	r16,r5
  80a5a0:	39000204 	addi	r4,r7,8
  80a5a4:	01400244 	movi	r5,9
  80a5a8:	dcc00315 	stw	r19,12(sp)
  80a5ac:	dc800215 	stw	r18,8(sp)
  80a5b0:	dfc00615 	stw	ra,24(sp)
  80a5b4:	dd400515 	stw	r21,20(sp)
  80a5b8:	dd000415 	stw	r20,16(sp)
  80a5bc:	3825883a 	mov	r18,r7
  80a5c0:	3027883a 	mov	r19,r6
  80a5c4:	080e2b40 	call	80e2b4 <__divsi3>
  80a5c8:	00c00044 	movi	r3,1
  80a5cc:	000b883a 	mov	r5,zero
  80a5d0:	1880030e 	bge	r3,r2,80a5e0 <__s2b+0x54>
  80a5d4:	18c7883a 	add	r3,r3,r3
  80a5d8:	29400044 	addi	r5,r5,1
  80a5dc:	18bffd16 	blt	r3,r2,80a5d4 <__alt_mem_onchip_mem+0xff78a5d4>
  80a5e0:	8809883a 	mov	r4,r17
  80a5e4:	080a39c0 	call	80a39c <_Balloc>
  80a5e8:	d8c00717 	ldw	r3,28(sp)
  80a5ec:	10c00515 	stw	r3,20(r2)
  80a5f0:	00c00044 	movi	r3,1
  80a5f4:	10c00415 	stw	r3,16(r2)
  80a5f8:	00c00244 	movi	r3,9
  80a5fc:	1cc0210e 	bge	r3,r19,80a684 <__s2b+0xf8>
  80a600:	80eb883a 	add	r21,r16,r3
  80a604:	a829883a 	mov	r20,r21
  80a608:	84e1883a 	add	r16,r16,r19
  80a60c:	a1c00007 	ldb	r7,0(r20)
  80a610:	01800284 	movi	r6,10
  80a614:	a5000044 	addi	r20,r20,1
  80a618:	100b883a 	mov	r5,r2
  80a61c:	39fff404 	addi	r7,r7,-48
  80a620:	8809883a 	mov	r4,r17
  80a624:	080a46c0 	call	80a46c <__multadd>
  80a628:	a43ff81e 	bne	r20,r16,80a60c <__alt_mem_onchip_mem+0xff78a60c>
  80a62c:	ace1883a 	add	r16,r21,r19
  80a630:	843ffe04 	addi	r16,r16,-8
  80a634:	9c800a0e 	bge	r19,r18,80a660 <__s2b+0xd4>
  80a638:	94e5c83a 	sub	r18,r18,r19
  80a63c:	84a5883a 	add	r18,r16,r18
  80a640:	81c00007 	ldb	r7,0(r16)
  80a644:	01800284 	movi	r6,10
  80a648:	84000044 	addi	r16,r16,1
  80a64c:	100b883a 	mov	r5,r2
  80a650:	39fff404 	addi	r7,r7,-48
  80a654:	8809883a 	mov	r4,r17
  80a658:	080a46c0 	call	80a46c <__multadd>
  80a65c:	84bff81e 	bne	r16,r18,80a640 <__alt_mem_onchip_mem+0xff78a640>
  80a660:	dfc00617 	ldw	ra,24(sp)
  80a664:	dd400517 	ldw	r21,20(sp)
  80a668:	dd000417 	ldw	r20,16(sp)
  80a66c:	dcc00317 	ldw	r19,12(sp)
  80a670:	dc800217 	ldw	r18,8(sp)
  80a674:	dc400117 	ldw	r17,4(sp)
  80a678:	dc000017 	ldw	r16,0(sp)
  80a67c:	dec00704 	addi	sp,sp,28
  80a680:	f800283a 	ret
  80a684:	84000284 	addi	r16,r16,10
  80a688:	1827883a 	mov	r19,r3
  80a68c:	003fe906 	br	80a634 <__alt_mem_onchip_mem+0xff78a634>

0080a690 <__hi0bits>:
  80a690:	20bfffec 	andhi	r2,r4,65535
  80a694:	1000141e 	bne	r2,zero,80a6e8 <__hi0bits+0x58>
  80a698:	2008943a 	slli	r4,r4,16
  80a69c:	00800404 	movi	r2,16
  80a6a0:	20ffc02c 	andhi	r3,r4,65280
  80a6a4:	1800021e 	bne	r3,zero,80a6b0 <__hi0bits+0x20>
  80a6a8:	2008923a 	slli	r4,r4,8
  80a6ac:	10800204 	addi	r2,r2,8
  80a6b0:	20fc002c 	andhi	r3,r4,61440
  80a6b4:	1800021e 	bne	r3,zero,80a6c0 <__hi0bits+0x30>
  80a6b8:	2008913a 	slli	r4,r4,4
  80a6bc:	10800104 	addi	r2,r2,4
  80a6c0:	20f0002c 	andhi	r3,r4,49152
  80a6c4:	1800031e 	bne	r3,zero,80a6d4 <__hi0bits+0x44>
  80a6c8:	2109883a 	add	r4,r4,r4
  80a6cc:	10800084 	addi	r2,r2,2
  80a6d0:	2109883a 	add	r4,r4,r4
  80a6d4:	20000316 	blt	r4,zero,80a6e4 <__hi0bits+0x54>
  80a6d8:	2110002c 	andhi	r4,r4,16384
  80a6dc:	2000041e 	bne	r4,zero,80a6f0 <__hi0bits+0x60>
  80a6e0:	00800804 	movi	r2,32
  80a6e4:	f800283a 	ret
  80a6e8:	0005883a 	mov	r2,zero
  80a6ec:	003fec06 	br	80a6a0 <__alt_mem_onchip_mem+0xff78a6a0>
  80a6f0:	10800044 	addi	r2,r2,1
  80a6f4:	f800283a 	ret

0080a6f8 <__lo0bits>:
  80a6f8:	20c00017 	ldw	r3,0(r4)
  80a6fc:	188001cc 	andi	r2,r3,7
  80a700:	10000826 	beq	r2,zero,80a724 <__lo0bits+0x2c>
  80a704:	1880004c 	andi	r2,r3,1
  80a708:	1000211e 	bne	r2,zero,80a790 <__lo0bits+0x98>
  80a70c:	1880008c 	andi	r2,r3,2
  80a710:	1000211e 	bne	r2,zero,80a798 <__lo0bits+0xa0>
  80a714:	1806d0ba 	srli	r3,r3,2
  80a718:	00800084 	movi	r2,2
  80a71c:	20c00015 	stw	r3,0(r4)
  80a720:	f800283a 	ret
  80a724:	18bfffcc 	andi	r2,r3,65535
  80a728:	10001326 	beq	r2,zero,80a778 <__lo0bits+0x80>
  80a72c:	0005883a 	mov	r2,zero
  80a730:	19403fcc 	andi	r5,r3,255
  80a734:	2800021e 	bne	r5,zero,80a740 <__lo0bits+0x48>
  80a738:	1806d23a 	srli	r3,r3,8
  80a73c:	10800204 	addi	r2,r2,8
  80a740:	194003cc 	andi	r5,r3,15
  80a744:	2800021e 	bne	r5,zero,80a750 <__lo0bits+0x58>
  80a748:	1806d13a 	srli	r3,r3,4
  80a74c:	10800104 	addi	r2,r2,4
  80a750:	194000cc 	andi	r5,r3,3
  80a754:	2800021e 	bne	r5,zero,80a760 <__lo0bits+0x68>
  80a758:	1806d0ba 	srli	r3,r3,2
  80a75c:	10800084 	addi	r2,r2,2
  80a760:	1940004c 	andi	r5,r3,1
  80a764:	2800081e 	bne	r5,zero,80a788 <__lo0bits+0x90>
  80a768:	1806d07a 	srli	r3,r3,1
  80a76c:	1800051e 	bne	r3,zero,80a784 <__lo0bits+0x8c>
  80a770:	00800804 	movi	r2,32
  80a774:	f800283a 	ret
  80a778:	1806d43a 	srli	r3,r3,16
  80a77c:	00800404 	movi	r2,16
  80a780:	003feb06 	br	80a730 <__alt_mem_onchip_mem+0xff78a730>
  80a784:	10800044 	addi	r2,r2,1
  80a788:	20c00015 	stw	r3,0(r4)
  80a78c:	f800283a 	ret
  80a790:	0005883a 	mov	r2,zero
  80a794:	f800283a 	ret
  80a798:	1806d07a 	srli	r3,r3,1
  80a79c:	00800044 	movi	r2,1
  80a7a0:	20c00015 	stw	r3,0(r4)
  80a7a4:	f800283a 	ret

0080a7a8 <__i2b>:
  80a7a8:	defffd04 	addi	sp,sp,-12
  80a7ac:	dc000015 	stw	r16,0(sp)
  80a7b0:	04000044 	movi	r16,1
  80a7b4:	dc400115 	stw	r17,4(sp)
  80a7b8:	2823883a 	mov	r17,r5
  80a7bc:	800b883a 	mov	r5,r16
  80a7c0:	dfc00215 	stw	ra,8(sp)
  80a7c4:	080a39c0 	call	80a39c <_Balloc>
  80a7c8:	14400515 	stw	r17,20(r2)
  80a7cc:	14000415 	stw	r16,16(r2)
  80a7d0:	dfc00217 	ldw	ra,8(sp)
  80a7d4:	dc400117 	ldw	r17,4(sp)
  80a7d8:	dc000017 	ldw	r16,0(sp)
  80a7dc:	dec00304 	addi	sp,sp,12
  80a7e0:	f800283a 	ret

0080a7e4 <__multiply>:
  80a7e4:	defffa04 	addi	sp,sp,-24
  80a7e8:	dcc00315 	stw	r19,12(sp)
  80a7ec:	dc800215 	stw	r18,8(sp)
  80a7f0:	34c00417 	ldw	r19,16(r6)
  80a7f4:	2c800417 	ldw	r18,16(r5)
  80a7f8:	dd000415 	stw	r20,16(sp)
  80a7fc:	dc400115 	stw	r17,4(sp)
  80a800:	dfc00515 	stw	ra,20(sp)
  80a804:	dc000015 	stw	r16,0(sp)
  80a808:	2829883a 	mov	r20,r5
  80a80c:	3023883a 	mov	r17,r6
  80a810:	94c0050e 	bge	r18,r19,80a828 <__multiply+0x44>
  80a814:	9007883a 	mov	r3,r18
  80a818:	3029883a 	mov	r20,r6
  80a81c:	9825883a 	mov	r18,r19
  80a820:	2823883a 	mov	r17,r5
  80a824:	1827883a 	mov	r19,r3
  80a828:	a0800217 	ldw	r2,8(r20)
  80a82c:	94e1883a 	add	r16,r18,r19
  80a830:	a1400117 	ldw	r5,4(r20)
  80a834:	1400010e 	bge	r2,r16,80a83c <__multiply+0x58>
  80a838:	29400044 	addi	r5,r5,1
  80a83c:	080a39c0 	call	80a39c <_Balloc>
  80a840:	8415883a 	add	r10,r16,r16
  80a844:	12c00504 	addi	r11,r2,20
  80a848:	5295883a 	add	r10,r10,r10
  80a84c:	5a95883a 	add	r10,r11,r10
  80a850:	5807883a 	mov	r3,r11
  80a854:	5a80032e 	bgeu	r11,r10,80a864 <__multiply+0x80>
  80a858:	18000015 	stw	zero,0(r3)
  80a85c:	18c00104 	addi	r3,r3,4
  80a860:	1abffd36 	bltu	r3,r10,80a858 <__alt_mem_onchip_mem+0xff78a858>
  80a864:	9ce7883a 	add	r19,r19,r19
  80a868:	94a5883a 	add	r18,r18,r18
  80a86c:	89800504 	addi	r6,r17,20
  80a870:	9ce7883a 	add	r19,r19,r19
  80a874:	a3400504 	addi	r13,r20,20
  80a878:	94a5883a 	add	r18,r18,r18
  80a87c:	34d9883a 	add	r12,r6,r19
  80a880:	6c93883a 	add	r9,r13,r18
  80a884:	3300422e 	bgeu	r6,r12,80a990 <__multiply+0x1ac>
  80a888:	37c00017 	ldw	ra,0(r6)
  80a88c:	fbffffcc 	andi	r15,ra,65535
  80a890:	78001b26 	beq	r15,zero,80a900 <__multiply+0x11c>
  80a894:	5811883a 	mov	r8,r11
  80a898:	681d883a 	mov	r14,r13
  80a89c:	000f883a 	mov	r7,zero
  80a8a0:	71000017 	ldw	r4,0(r14)
  80a8a4:	40c00017 	ldw	r3,0(r8)
  80a8a8:	73800104 	addi	r14,r14,4
  80a8ac:	217fffcc 	andi	r5,r4,65535
  80a8b0:	2bcb383a 	mul	r5,r5,r15
  80a8b4:	2008d43a 	srli	r4,r4,16
  80a8b8:	1c7fffcc 	andi	r17,r3,65535
  80a8bc:	2c4b883a 	add	r5,r5,r17
  80a8c0:	29cb883a 	add	r5,r5,r7
  80a8c4:	23c9383a 	mul	r4,r4,r15
  80a8c8:	1806d43a 	srli	r3,r3,16
  80a8cc:	280ed43a 	srli	r7,r5,16
  80a8d0:	297fffcc 	andi	r5,r5,65535
  80a8d4:	20c7883a 	add	r3,r4,r3
  80a8d8:	19c7883a 	add	r3,r3,r7
  80a8dc:	1808943a 	slli	r4,r3,16
  80a8e0:	4023883a 	mov	r17,r8
  80a8e4:	180ed43a 	srli	r7,r3,16
  80a8e8:	214ab03a 	or	r5,r4,r5
  80a8ec:	41400015 	stw	r5,0(r8)
  80a8f0:	42000104 	addi	r8,r8,4
  80a8f4:	727fea36 	bltu	r14,r9,80a8a0 <__alt_mem_onchip_mem+0xff78a8a0>
  80a8f8:	89c00115 	stw	r7,4(r17)
  80a8fc:	37c00017 	ldw	ra,0(r6)
  80a900:	f83ed43a 	srli	ra,ra,16
  80a904:	f8001f26 	beq	ra,zero,80a984 <__multiply+0x1a0>
  80a908:	58c00017 	ldw	r3,0(r11)
  80a90c:	681d883a 	mov	r14,r13
  80a910:	581f883a 	mov	r15,r11
  80a914:	1811883a 	mov	r8,r3
  80a918:	5825883a 	mov	r18,r11
  80a91c:	000f883a 	mov	r7,zero
  80a920:	00000106 	br	80a928 <__multiply+0x144>
  80a924:	8825883a 	mov	r18,r17
  80a928:	7140000b 	ldhu	r5,0(r14)
  80a92c:	4010d43a 	srli	r8,r8,16
  80a930:	193fffcc 	andi	r4,r3,65535
  80a934:	2fcb383a 	mul	r5,r5,ra
  80a938:	7bc00104 	addi	r15,r15,4
  80a93c:	73800104 	addi	r14,r14,4
  80a940:	2a0b883a 	add	r5,r5,r8
  80a944:	29cb883a 	add	r5,r5,r7
  80a948:	2806943a 	slli	r3,r5,16
  80a94c:	94400104 	addi	r17,r18,4
  80a950:	280ad43a 	srli	r5,r5,16
  80a954:	1908b03a 	or	r4,r3,r4
  80a958:	793fff15 	stw	r4,-4(r15)
  80a95c:	70ffff17 	ldw	r3,-4(r14)
  80a960:	8a000017 	ldw	r8,0(r17)
  80a964:	1806d43a 	srli	r3,r3,16
  80a968:	413fffcc 	andi	r4,r8,65535
  80a96c:	1fc7383a 	mul	r3,r3,ra
  80a970:	1907883a 	add	r3,r3,r4
  80a974:	1947883a 	add	r3,r3,r5
  80a978:	180ed43a 	srli	r7,r3,16
  80a97c:	727fe936 	bltu	r14,r9,80a924 <__alt_mem_onchip_mem+0xff78a924>
  80a980:	90c00115 	stw	r3,4(r18)
  80a984:	31800104 	addi	r6,r6,4
  80a988:	5ac00104 	addi	r11,r11,4
  80a98c:	333fbe36 	bltu	r6,r12,80a888 <__alt_mem_onchip_mem+0xff78a888>
  80a990:	0400090e 	bge	zero,r16,80a9b8 <__multiply+0x1d4>
  80a994:	50ffff17 	ldw	r3,-4(r10)
  80a998:	52bfff04 	addi	r10,r10,-4
  80a99c:	18000326 	beq	r3,zero,80a9ac <__multiply+0x1c8>
  80a9a0:	00000506 	br	80a9b8 <__multiply+0x1d4>
  80a9a4:	50c00017 	ldw	r3,0(r10)
  80a9a8:	1800031e 	bne	r3,zero,80a9b8 <__multiply+0x1d4>
  80a9ac:	843fffc4 	addi	r16,r16,-1
  80a9b0:	52bfff04 	addi	r10,r10,-4
  80a9b4:	803ffb1e 	bne	r16,zero,80a9a4 <__alt_mem_onchip_mem+0xff78a9a4>
  80a9b8:	14000415 	stw	r16,16(r2)
  80a9bc:	dfc00517 	ldw	ra,20(sp)
  80a9c0:	dd000417 	ldw	r20,16(sp)
  80a9c4:	dcc00317 	ldw	r19,12(sp)
  80a9c8:	dc800217 	ldw	r18,8(sp)
  80a9cc:	dc400117 	ldw	r17,4(sp)
  80a9d0:	dc000017 	ldw	r16,0(sp)
  80a9d4:	dec00604 	addi	sp,sp,24
  80a9d8:	f800283a 	ret

0080a9dc <__pow5mult>:
  80a9dc:	defffa04 	addi	sp,sp,-24
  80a9e0:	dcc00315 	stw	r19,12(sp)
  80a9e4:	dc000015 	stw	r16,0(sp)
  80a9e8:	dfc00515 	stw	ra,20(sp)
  80a9ec:	dd000415 	stw	r20,16(sp)
  80a9f0:	dc800215 	stw	r18,8(sp)
  80a9f4:	dc400115 	stw	r17,4(sp)
  80a9f8:	308000cc 	andi	r2,r6,3
  80a9fc:	3021883a 	mov	r16,r6
  80aa00:	2027883a 	mov	r19,r4
  80aa04:	10002f1e 	bne	r2,zero,80aac4 <__pow5mult+0xe8>
  80aa08:	2825883a 	mov	r18,r5
  80aa0c:	8021d0ba 	srai	r16,r16,2
  80aa10:	80001a26 	beq	r16,zero,80aa7c <__pow5mult+0xa0>
  80aa14:	9c401217 	ldw	r17,72(r19)
  80aa18:	8800061e 	bne	r17,zero,80aa34 <__pow5mult+0x58>
  80aa1c:	00003406 	br	80aaf0 <__pow5mult+0x114>
  80aa20:	8021d07a 	srai	r16,r16,1
  80aa24:	80001526 	beq	r16,zero,80aa7c <__pow5mult+0xa0>
  80aa28:	88800017 	ldw	r2,0(r17)
  80aa2c:	10001c26 	beq	r2,zero,80aaa0 <__pow5mult+0xc4>
  80aa30:	1023883a 	mov	r17,r2
  80aa34:	8080004c 	andi	r2,r16,1
  80aa38:	103ff926 	beq	r2,zero,80aa20 <__alt_mem_onchip_mem+0xff78aa20>
  80aa3c:	880d883a 	mov	r6,r17
  80aa40:	900b883a 	mov	r5,r18
  80aa44:	9809883a 	mov	r4,r19
  80aa48:	080a7e40 	call	80a7e4 <__multiply>
  80aa4c:	90001b26 	beq	r18,zero,80aabc <__pow5mult+0xe0>
  80aa50:	91000117 	ldw	r4,4(r18)
  80aa54:	98c01317 	ldw	r3,76(r19)
  80aa58:	8021d07a 	srai	r16,r16,1
  80aa5c:	2109883a 	add	r4,r4,r4
  80aa60:	2109883a 	add	r4,r4,r4
  80aa64:	1907883a 	add	r3,r3,r4
  80aa68:	19000017 	ldw	r4,0(r3)
  80aa6c:	91000015 	stw	r4,0(r18)
  80aa70:	1c800015 	stw	r18,0(r3)
  80aa74:	1025883a 	mov	r18,r2
  80aa78:	803feb1e 	bne	r16,zero,80aa28 <__alt_mem_onchip_mem+0xff78aa28>
  80aa7c:	9005883a 	mov	r2,r18
  80aa80:	dfc00517 	ldw	ra,20(sp)
  80aa84:	dd000417 	ldw	r20,16(sp)
  80aa88:	dcc00317 	ldw	r19,12(sp)
  80aa8c:	dc800217 	ldw	r18,8(sp)
  80aa90:	dc400117 	ldw	r17,4(sp)
  80aa94:	dc000017 	ldw	r16,0(sp)
  80aa98:	dec00604 	addi	sp,sp,24
  80aa9c:	f800283a 	ret
  80aaa0:	880d883a 	mov	r6,r17
  80aaa4:	880b883a 	mov	r5,r17
  80aaa8:	9809883a 	mov	r4,r19
  80aaac:	080a7e40 	call	80a7e4 <__multiply>
  80aab0:	88800015 	stw	r2,0(r17)
  80aab4:	10000015 	stw	zero,0(r2)
  80aab8:	003fdd06 	br	80aa30 <__alt_mem_onchip_mem+0xff78aa30>
  80aabc:	1025883a 	mov	r18,r2
  80aac0:	003fd706 	br	80aa20 <__alt_mem_onchip_mem+0xff78aa20>
  80aac4:	10bfffc4 	addi	r2,r2,-1
  80aac8:	1085883a 	add	r2,r2,r2
  80aacc:	00c02074 	movhi	r3,129
  80aad0:	18d3cd04 	addi	r3,r3,20276
  80aad4:	1085883a 	add	r2,r2,r2
  80aad8:	1885883a 	add	r2,r3,r2
  80aadc:	11800017 	ldw	r6,0(r2)
  80aae0:	000f883a 	mov	r7,zero
  80aae4:	080a46c0 	call	80a46c <__multadd>
  80aae8:	1025883a 	mov	r18,r2
  80aaec:	003fc706 	br	80aa0c <__alt_mem_onchip_mem+0xff78aa0c>
  80aaf0:	05000044 	movi	r20,1
  80aaf4:	a00b883a 	mov	r5,r20
  80aaf8:	9809883a 	mov	r4,r19
  80aafc:	080a39c0 	call	80a39c <_Balloc>
  80ab00:	1023883a 	mov	r17,r2
  80ab04:	00809c44 	movi	r2,625
  80ab08:	88800515 	stw	r2,20(r17)
  80ab0c:	8d000415 	stw	r20,16(r17)
  80ab10:	9c401215 	stw	r17,72(r19)
  80ab14:	88000015 	stw	zero,0(r17)
  80ab18:	003fc606 	br	80aa34 <__alt_mem_onchip_mem+0xff78aa34>

0080ab1c <__lshift>:
  80ab1c:	defff904 	addi	sp,sp,-28
  80ab20:	dd400515 	stw	r21,20(sp)
  80ab24:	dcc00315 	stw	r19,12(sp)
  80ab28:	302bd17a 	srai	r21,r6,5
  80ab2c:	2cc00417 	ldw	r19,16(r5)
  80ab30:	28800217 	ldw	r2,8(r5)
  80ab34:	dd000415 	stw	r20,16(sp)
  80ab38:	ace7883a 	add	r19,r21,r19
  80ab3c:	dc800215 	stw	r18,8(sp)
  80ab40:	dc400115 	stw	r17,4(sp)
  80ab44:	dc000015 	stw	r16,0(sp)
  80ab48:	dfc00615 	stw	ra,24(sp)
  80ab4c:	9c000044 	addi	r16,r19,1
  80ab50:	2823883a 	mov	r17,r5
  80ab54:	3029883a 	mov	r20,r6
  80ab58:	2025883a 	mov	r18,r4
  80ab5c:	29400117 	ldw	r5,4(r5)
  80ab60:	1400030e 	bge	r2,r16,80ab70 <__lshift+0x54>
  80ab64:	1085883a 	add	r2,r2,r2
  80ab68:	29400044 	addi	r5,r5,1
  80ab6c:	143ffd16 	blt	r2,r16,80ab64 <__alt_mem_onchip_mem+0xff78ab64>
  80ab70:	9009883a 	mov	r4,r18
  80ab74:	080a39c0 	call	80a39c <_Balloc>
  80ab78:	10c00504 	addi	r3,r2,20
  80ab7c:	0540070e 	bge	zero,r21,80ab9c <__lshift+0x80>
  80ab80:	ad6b883a 	add	r21,r21,r21
  80ab84:	ad6b883a 	add	r21,r21,r21
  80ab88:	1809883a 	mov	r4,r3
  80ab8c:	1d47883a 	add	r3,r3,r21
  80ab90:	20000015 	stw	zero,0(r4)
  80ab94:	21000104 	addi	r4,r4,4
  80ab98:	193ffd1e 	bne	r3,r4,80ab90 <__alt_mem_onchip_mem+0xff78ab90>
  80ab9c:	8a000417 	ldw	r8,16(r17)
  80aba0:	89000504 	addi	r4,r17,20
  80aba4:	a18007cc 	andi	r6,r20,31
  80aba8:	4211883a 	add	r8,r8,r8
  80abac:	4211883a 	add	r8,r8,r8
  80abb0:	2211883a 	add	r8,r4,r8
  80abb4:	30002326 	beq	r6,zero,80ac44 <__lshift+0x128>
  80abb8:	02400804 	movi	r9,32
  80abbc:	4993c83a 	sub	r9,r9,r6
  80abc0:	000b883a 	mov	r5,zero
  80abc4:	21c00017 	ldw	r7,0(r4)
  80abc8:	1815883a 	mov	r10,r3
  80abcc:	18c00104 	addi	r3,r3,4
  80abd0:	398e983a 	sll	r7,r7,r6
  80abd4:	21000104 	addi	r4,r4,4
  80abd8:	394ab03a 	or	r5,r7,r5
  80abdc:	197fff15 	stw	r5,-4(r3)
  80abe0:	217fff17 	ldw	r5,-4(r4)
  80abe4:	2a4ad83a 	srl	r5,r5,r9
  80abe8:	223ff636 	bltu	r4,r8,80abc4 <__alt_mem_onchip_mem+0xff78abc4>
  80abec:	51400115 	stw	r5,4(r10)
  80abf0:	28001a1e 	bne	r5,zero,80ac5c <__lshift+0x140>
  80abf4:	843fffc4 	addi	r16,r16,-1
  80abf8:	14000415 	stw	r16,16(r2)
  80abfc:	88000826 	beq	r17,zero,80ac20 <__lshift+0x104>
  80ac00:	89000117 	ldw	r4,4(r17)
  80ac04:	90c01317 	ldw	r3,76(r18)
  80ac08:	2109883a 	add	r4,r4,r4
  80ac0c:	2109883a 	add	r4,r4,r4
  80ac10:	1907883a 	add	r3,r3,r4
  80ac14:	19000017 	ldw	r4,0(r3)
  80ac18:	89000015 	stw	r4,0(r17)
  80ac1c:	1c400015 	stw	r17,0(r3)
  80ac20:	dfc00617 	ldw	ra,24(sp)
  80ac24:	dd400517 	ldw	r21,20(sp)
  80ac28:	dd000417 	ldw	r20,16(sp)
  80ac2c:	dcc00317 	ldw	r19,12(sp)
  80ac30:	dc800217 	ldw	r18,8(sp)
  80ac34:	dc400117 	ldw	r17,4(sp)
  80ac38:	dc000017 	ldw	r16,0(sp)
  80ac3c:	dec00704 	addi	sp,sp,28
  80ac40:	f800283a 	ret
  80ac44:	21400017 	ldw	r5,0(r4)
  80ac48:	18c00104 	addi	r3,r3,4
  80ac4c:	21000104 	addi	r4,r4,4
  80ac50:	197fff15 	stw	r5,-4(r3)
  80ac54:	223ffb36 	bltu	r4,r8,80ac44 <__alt_mem_onchip_mem+0xff78ac44>
  80ac58:	003fe606 	br	80abf4 <__alt_mem_onchip_mem+0xff78abf4>
  80ac5c:	9c000084 	addi	r16,r19,2
  80ac60:	003fe406 	br	80abf4 <__alt_mem_onchip_mem+0xff78abf4>

0080ac64 <__mcmp>:
  80ac64:	20800417 	ldw	r2,16(r4)
  80ac68:	28c00417 	ldw	r3,16(r5)
  80ac6c:	10c5c83a 	sub	r2,r2,r3
  80ac70:	1000111e 	bne	r2,zero,80acb8 <__mcmp+0x54>
  80ac74:	18c7883a 	add	r3,r3,r3
  80ac78:	18c7883a 	add	r3,r3,r3
  80ac7c:	21000504 	addi	r4,r4,20
  80ac80:	29400504 	addi	r5,r5,20
  80ac84:	20c5883a 	add	r2,r4,r3
  80ac88:	28cb883a 	add	r5,r5,r3
  80ac8c:	00000106 	br	80ac94 <__mcmp+0x30>
  80ac90:	20800a2e 	bgeu	r4,r2,80acbc <__mcmp+0x58>
  80ac94:	10bfff04 	addi	r2,r2,-4
  80ac98:	297fff04 	addi	r5,r5,-4
  80ac9c:	11800017 	ldw	r6,0(r2)
  80aca0:	28c00017 	ldw	r3,0(r5)
  80aca4:	30fffa26 	beq	r6,r3,80ac90 <__alt_mem_onchip_mem+0xff78ac90>
  80aca8:	30c00236 	bltu	r6,r3,80acb4 <__mcmp+0x50>
  80acac:	00800044 	movi	r2,1
  80acb0:	f800283a 	ret
  80acb4:	00bfffc4 	movi	r2,-1
  80acb8:	f800283a 	ret
  80acbc:	0005883a 	mov	r2,zero
  80acc0:	f800283a 	ret

0080acc4 <__mdiff>:
  80acc4:	28c00417 	ldw	r3,16(r5)
  80acc8:	30800417 	ldw	r2,16(r6)
  80accc:	defffa04 	addi	sp,sp,-24
  80acd0:	dcc00315 	stw	r19,12(sp)
  80acd4:	dc800215 	stw	r18,8(sp)
  80acd8:	dfc00515 	stw	ra,20(sp)
  80acdc:	dd000415 	stw	r20,16(sp)
  80ace0:	dc400115 	stw	r17,4(sp)
  80ace4:	dc000015 	stw	r16,0(sp)
  80ace8:	1887c83a 	sub	r3,r3,r2
  80acec:	2825883a 	mov	r18,r5
  80acf0:	3027883a 	mov	r19,r6
  80acf4:	1800141e 	bne	r3,zero,80ad48 <__mdiff+0x84>
  80acf8:	1085883a 	add	r2,r2,r2
  80acfc:	1085883a 	add	r2,r2,r2
  80ad00:	2a000504 	addi	r8,r5,20
  80ad04:	34000504 	addi	r16,r6,20
  80ad08:	4087883a 	add	r3,r8,r2
  80ad0c:	8085883a 	add	r2,r16,r2
  80ad10:	00000106 	br	80ad18 <__mdiff+0x54>
  80ad14:	40c0592e 	bgeu	r8,r3,80ae7c <__mdiff+0x1b8>
  80ad18:	18ffff04 	addi	r3,r3,-4
  80ad1c:	10bfff04 	addi	r2,r2,-4
  80ad20:	19c00017 	ldw	r7,0(r3)
  80ad24:	11400017 	ldw	r5,0(r2)
  80ad28:	397ffa26 	beq	r7,r5,80ad14 <__alt_mem_onchip_mem+0xff78ad14>
  80ad2c:	3940592e 	bgeu	r7,r5,80ae94 <__mdiff+0x1d0>
  80ad30:	9005883a 	mov	r2,r18
  80ad34:	4023883a 	mov	r17,r8
  80ad38:	9825883a 	mov	r18,r19
  80ad3c:	05000044 	movi	r20,1
  80ad40:	1027883a 	mov	r19,r2
  80ad44:	00000406 	br	80ad58 <__mdiff+0x94>
  80ad48:	18005616 	blt	r3,zero,80aea4 <__mdiff+0x1e0>
  80ad4c:	34400504 	addi	r17,r6,20
  80ad50:	2c000504 	addi	r16,r5,20
  80ad54:	0029883a 	mov	r20,zero
  80ad58:	91400117 	ldw	r5,4(r18)
  80ad5c:	080a39c0 	call	80a39c <_Balloc>
  80ad60:	92400417 	ldw	r9,16(r18)
  80ad64:	9b000417 	ldw	r12,16(r19)
  80ad68:	12c00504 	addi	r11,r2,20
  80ad6c:	4a51883a 	add	r8,r9,r9
  80ad70:	6319883a 	add	r12,r12,r12
  80ad74:	4211883a 	add	r8,r8,r8
  80ad78:	6319883a 	add	r12,r12,r12
  80ad7c:	15000315 	stw	r20,12(r2)
  80ad80:	8211883a 	add	r8,r16,r8
  80ad84:	8b19883a 	add	r12,r17,r12
  80ad88:	0007883a 	mov	r3,zero
  80ad8c:	81400017 	ldw	r5,0(r16)
  80ad90:	89c00017 	ldw	r7,0(r17)
  80ad94:	59800104 	addi	r6,r11,4
  80ad98:	293fffcc 	andi	r4,r5,65535
  80ad9c:	20c7883a 	add	r3,r4,r3
  80ada0:	393fffcc 	andi	r4,r7,65535
  80ada4:	1909c83a 	sub	r4,r3,r4
  80ada8:	280ad43a 	srli	r5,r5,16
  80adac:	380ed43a 	srli	r7,r7,16
  80adb0:	2007d43a 	srai	r3,r4,16
  80adb4:	213fffcc 	andi	r4,r4,65535
  80adb8:	29cbc83a 	sub	r5,r5,r7
  80adbc:	28c7883a 	add	r3,r5,r3
  80adc0:	180a943a 	slli	r5,r3,16
  80adc4:	8c400104 	addi	r17,r17,4
  80adc8:	84000104 	addi	r16,r16,4
  80adcc:	2908b03a 	or	r4,r5,r4
  80add0:	59000015 	stw	r4,0(r11)
  80add4:	1807d43a 	srai	r3,r3,16
  80add8:	3015883a 	mov	r10,r6
  80addc:	3017883a 	mov	r11,r6
  80ade0:	8b3fea36 	bltu	r17,r12,80ad8c <__alt_mem_onchip_mem+0xff78ad8c>
  80ade4:	8200162e 	bgeu	r16,r8,80ae40 <__mdiff+0x17c>
  80ade8:	8017883a 	mov	r11,r16
  80adec:	59400017 	ldw	r5,0(r11)
  80adf0:	31800104 	addi	r6,r6,4
  80adf4:	5ac00104 	addi	r11,r11,4
  80adf8:	293fffcc 	andi	r4,r5,65535
  80adfc:	20c7883a 	add	r3,r4,r3
  80ae00:	280ed43a 	srli	r7,r5,16
  80ae04:	180bd43a 	srai	r5,r3,16
  80ae08:	193fffcc 	andi	r4,r3,65535
  80ae0c:	3947883a 	add	r3,r7,r5
  80ae10:	180a943a 	slli	r5,r3,16
  80ae14:	1807d43a 	srai	r3,r3,16
  80ae18:	2908b03a 	or	r4,r5,r4
  80ae1c:	313fff15 	stw	r4,-4(r6)
  80ae20:	5a3ff236 	bltu	r11,r8,80adec <__alt_mem_onchip_mem+0xff78adec>
  80ae24:	0406303a 	nor	r3,zero,r16
  80ae28:	1a07883a 	add	r3,r3,r8
  80ae2c:	1806d0ba 	srli	r3,r3,2
  80ae30:	18c00044 	addi	r3,r3,1
  80ae34:	18c7883a 	add	r3,r3,r3
  80ae38:	18c7883a 	add	r3,r3,r3
  80ae3c:	50d5883a 	add	r10,r10,r3
  80ae40:	50ffff04 	addi	r3,r10,-4
  80ae44:	2000041e 	bne	r4,zero,80ae58 <__mdiff+0x194>
  80ae48:	18ffff04 	addi	r3,r3,-4
  80ae4c:	19000017 	ldw	r4,0(r3)
  80ae50:	4a7fffc4 	addi	r9,r9,-1
  80ae54:	203ffc26 	beq	r4,zero,80ae48 <__alt_mem_onchip_mem+0xff78ae48>
  80ae58:	12400415 	stw	r9,16(r2)
  80ae5c:	dfc00517 	ldw	ra,20(sp)
  80ae60:	dd000417 	ldw	r20,16(sp)
  80ae64:	dcc00317 	ldw	r19,12(sp)
  80ae68:	dc800217 	ldw	r18,8(sp)
  80ae6c:	dc400117 	ldw	r17,4(sp)
  80ae70:	dc000017 	ldw	r16,0(sp)
  80ae74:	dec00604 	addi	sp,sp,24
  80ae78:	f800283a 	ret
  80ae7c:	000b883a 	mov	r5,zero
  80ae80:	080a39c0 	call	80a39c <_Balloc>
  80ae84:	00c00044 	movi	r3,1
  80ae88:	10c00415 	stw	r3,16(r2)
  80ae8c:	10000515 	stw	zero,20(r2)
  80ae90:	003ff206 	br	80ae5c <__alt_mem_onchip_mem+0xff78ae5c>
  80ae94:	8023883a 	mov	r17,r16
  80ae98:	0029883a 	mov	r20,zero
  80ae9c:	4021883a 	mov	r16,r8
  80aea0:	003fad06 	br	80ad58 <__alt_mem_onchip_mem+0xff78ad58>
  80aea4:	9005883a 	mov	r2,r18
  80aea8:	94400504 	addi	r17,r18,20
  80aeac:	9c000504 	addi	r16,r19,20
  80aeb0:	9825883a 	mov	r18,r19
  80aeb4:	05000044 	movi	r20,1
  80aeb8:	1027883a 	mov	r19,r2
  80aebc:	003fa606 	br	80ad58 <__alt_mem_onchip_mem+0xff78ad58>

0080aec0 <__ulp>:
  80aec0:	295ffc2c 	andhi	r5,r5,32752
  80aec4:	00bf3034 	movhi	r2,64704
  80aec8:	2887883a 	add	r3,r5,r2
  80aecc:	00c0020e 	bge	zero,r3,80aed8 <__ulp+0x18>
  80aed0:	0005883a 	mov	r2,zero
  80aed4:	f800283a 	ret
  80aed8:	00c7c83a 	sub	r3,zero,r3
  80aedc:	1807d53a 	srai	r3,r3,20
  80aee0:	008004c4 	movi	r2,19
  80aee4:	10c00b0e 	bge	r2,r3,80af14 <__ulp+0x54>
  80aee8:	18bffb04 	addi	r2,r3,-20
  80aeec:	01000784 	movi	r4,30
  80aef0:	0007883a 	mov	r3,zero
  80aef4:	20800516 	blt	r4,r2,80af0c <__ulp+0x4c>
  80aef8:	010007c4 	movi	r4,31
  80aefc:	2089c83a 	sub	r4,r4,r2
  80af00:	00800044 	movi	r2,1
  80af04:	1104983a 	sll	r2,r2,r4
  80af08:	f800283a 	ret
  80af0c:	00800044 	movi	r2,1
  80af10:	f800283a 	ret
  80af14:	01400234 	movhi	r5,8
  80af18:	28c7d83a 	sra	r3,r5,r3
  80af1c:	0005883a 	mov	r2,zero
  80af20:	f800283a 	ret

0080af24 <__b2d>:
  80af24:	defffa04 	addi	sp,sp,-24
  80af28:	dc000015 	stw	r16,0(sp)
  80af2c:	24000417 	ldw	r16,16(r4)
  80af30:	dc400115 	stw	r17,4(sp)
  80af34:	24400504 	addi	r17,r4,20
  80af38:	8421883a 	add	r16,r16,r16
  80af3c:	8421883a 	add	r16,r16,r16
  80af40:	8c21883a 	add	r16,r17,r16
  80af44:	dc800215 	stw	r18,8(sp)
  80af48:	84bfff17 	ldw	r18,-4(r16)
  80af4c:	dd000415 	stw	r20,16(sp)
  80af50:	dcc00315 	stw	r19,12(sp)
  80af54:	9009883a 	mov	r4,r18
  80af58:	2829883a 	mov	r20,r5
  80af5c:	dfc00515 	stw	ra,20(sp)
  80af60:	080a6900 	call	80a690 <__hi0bits>
  80af64:	00c00804 	movi	r3,32
  80af68:	1889c83a 	sub	r4,r3,r2
  80af6c:	a1000015 	stw	r4,0(r20)
  80af70:	01000284 	movi	r4,10
  80af74:	84ffff04 	addi	r19,r16,-4
  80af78:	20801216 	blt	r4,r2,80afc4 <__b2d+0xa0>
  80af7c:	018002c4 	movi	r6,11
  80af80:	308dc83a 	sub	r6,r6,r2
  80af84:	9186d83a 	srl	r3,r18,r6
  80af88:	18cffc34 	orhi	r3,r3,16368
  80af8c:	8cc0212e 	bgeu	r17,r19,80b014 <__b2d+0xf0>
  80af90:	813ffe17 	ldw	r4,-8(r16)
  80af94:	218cd83a 	srl	r6,r4,r6
  80af98:	10800544 	addi	r2,r2,21
  80af9c:	9084983a 	sll	r2,r18,r2
  80afa0:	1184b03a 	or	r2,r2,r6
  80afa4:	dfc00517 	ldw	ra,20(sp)
  80afa8:	dd000417 	ldw	r20,16(sp)
  80afac:	dcc00317 	ldw	r19,12(sp)
  80afb0:	dc800217 	ldw	r18,8(sp)
  80afb4:	dc400117 	ldw	r17,4(sp)
  80afb8:	dc000017 	ldw	r16,0(sp)
  80afbc:	dec00604 	addi	sp,sp,24
  80afc0:	f800283a 	ret
  80afc4:	8cc00f2e 	bgeu	r17,r19,80b004 <__b2d+0xe0>
  80afc8:	117ffd44 	addi	r5,r2,-11
  80afcc:	80bffe17 	ldw	r2,-8(r16)
  80afd0:	28000e26 	beq	r5,zero,80b00c <__b2d+0xe8>
  80afd4:	1949c83a 	sub	r4,r3,r5
  80afd8:	9164983a 	sll	r18,r18,r5
  80afdc:	1106d83a 	srl	r3,r2,r4
  80afe0:	81bffe04 	addi	r6,r16,-8
  80afe4:	948ffc34 	orhi	r18,r18,16368
  80afe8:	90c6b03a 	or	r3,r18,r3
  80afec:	89800e2e 	bgeu	r17,r6,80b028 <__b2d+0x104>
  80aff0:	81bffd17 	ldw	r6,-12(r16)
  80aff4:	1144983a 	sll	r2,r2,r5
  80aff8:	310ad83a 	srl	r5,r6,r4
  80affc:	2884b03a 	or	r2,r5,r2
  80b000:	003fe806 	br	80afa4 <__alt_mem_onchip_mem+0xff78afa4>
  80b004:	10bffd44 	addi	r2,r2,-11
  80b008:	1000041e 	bne	r2,zero,80b01c <__b2d+0xf8>
  80b00c:	90cffc34 	orhi	r3,r18,16368
  80b010:	003fe406 	br	80afa4 <__alt_mem_onchip_mem+0xff78afa4>
  80b014:	000d883a 	mov	r6,zero
  80b018:	003fdf06 	br	80af98 <__alt_mem_onchip_mem+0xff78af98>
  80b01c:	90a4983a 	sll	r18,r18,r2
  80b020:	0005883a 	mov	r2,zero
  80b024:	003ff906 	br	80b00c <__alt_mem_onchip_mem+0xff78b00c>
  80b028:	1144983a 	sll	r2,r2,r5
  80b02c:	003fdd06 	br	80afa4 <__alt_mem_onchip_mem+0xff78afa4>

0080b030 <__d2b>:
  80b030:	defff804 	addi	sp,sp,-32
  80b034:	dc000215 	stw	r16,8(sp)
  80b038:	3021883a 	mov	r16,r6
  80b03c:	dc400315 	stw	r17,12(sp)
  80b040:	8022907a 	slli	r17,r16,1
  80b044:	dd000615 	stw	r20,24(sp)
  80b048:	2829883a 	mov	r20,r5
  80b04c:	01400044 	movi	r5,1
  80b050:	dcc00515 	stw	r19,20(sp)
  80b054:	dc800415 	stw	r18,16(sp)
  80b058:	dfc00715 	stw	ra,28(sp)
  80b05c:	3825883a 	mov	r18,r7
  80b060:	8822d57a 	srli	r17,r17,21
  80b064:	080a39c0 	call	80a39c <_Balloc>
  80b068:	1027883a 	mov	r19,r2
  80b06c:	00800434 	movhi	r2,16
  80b070:	10bfffc4 	addi	r2,r2,-1
  80b074:	808c703a 	and	r6,r16,r2
  80b078:	88000126 	beq	r17,zero,80b080 <__d2b+0x50>
  80b07c:	31800434 	orhi	r6,r6,16
  80b080:	d9800015 	stw	r6,0(sp)
  80b084:	a0002426 	beq	r20,zero,80b118 <__d2b+0xe8>
  80b088:	d9000104 	addi	r4,sp,4
  80b08c:	dd000115 	stw	r20,4(sp)
  80b090:	080a6f80 	call	80a6f8 <__lo0bits>
  80b094:	d8c00017 	ldw	r3,0(sp)
  80b098:	10002f1e 	bne	r2,zero,80b158 <__d2b+0x128>
  80b09c:	d9000117 	ldw	r4,4(sp)
  80b0a0:	99000515 	stw	r4,20(r19)
  80b0a4:	1821003a 	cmpeq	r16,r3,zero
  80b0a8:	01000084 	movi	r4,2
  80b0ac:	2421c83a 	sub	r16,r4,r16
  80b0b0:	98c00615 	stw	r3,24(r19)
  80b0b4:	9c000415 	stw	r16,16(r19)
  80b0b8:	88001f1e 	bne	r17,zero,80b138 <__d2b+0x108>
  80b0bc:	10bef384 	addi	r2,r2,-1074
  80b0c0:	90800015 	stw	r2,0(r18)
  80b0c4:	00900034 	movhi	r2,16384
  80b0c8:	10bfffc4 	addi	r2,r2,-1
  80b0cc:	8085883a 	add	r2,r16,r2
  80b0d0:	1085883a 	add	r2,r2,r2
  80b0d4:	1085883a 	add	r2,r2,r2
  80b0d8:	9885883a 	add	r2,r19,r2
  80b0dc:	11000517 	ldw	r4,20(r2)
  80b0e0:	8020917a 	slli	r16,r16,5
  80b0e4:	080a6900 	call	80a690 <__hi0bits>
  80b0e8:	d8c00817 	ldw	r3,32(sp)
  80b0ec:	8085c83a 	sub	r2,r16,r2
  80b0f0:	18800015 	stw	r2,0(r3)
  80b0f4:	9805883a 	mov	r2,r19
  80b0f8:	dfc00717 	ldw	ra,28(sp)
  80b0fc:	dd000617 	ldw	r20,24(sp)
  80b100:	dcc00517 	ldw	r19,20(sp)
  80b104:	dc800417 	ldw	r18,16(sp)
  80b108:	dc400317 	ldw	r17,12(sp)
  80b10c:	dc000217 	ldw	r16,8(sp)
  80b110:	dec00804 	addi	sp,sp,32
  80b114:	f800283a 	ret
  80b118:	d809883a 	mov	r4,sp
  80b11c:	080a6f80 	call	80a6f8 <__lo0bits>
  80b120:	d8c00017 	ldw	r3,0(sp)
  80b124:	04000044 	movi	r16,1
  80b128:	9c000415 	stw	r16,16(r19)
  80b12c:	98c00515 	stw	r3,20(r19)
  80b130:	10800804 	addi	r2,r2,32
  80b134:	883fe126 	beq	r17,zero,80b0bc <__alt_mem_onchip_mem+0xff78b0bc>
  80b138:	00c00d44 	movi	r3,53
  80b13c:	8c7ef344 	addi	r17,r17,-1075
  80b140:	88a3883a 	add	r17,r17,r2
  80b144:	1885c83a 	sub	r2,r3,r2
  80b148:	d8c00817 	ldw	r3,32(sp)
  80b14c:	94400015 	stw	r17,0(r18)
  80b150:	18800015 	stw	r2,0(r3)
  80b154:	003fe706 	br	80b0f4 <__alt_mem_onchip_mem+0xff78b0f4>
  80b158:	01000804 	movi	r4,32
  80b15c:	2089c83a 	sub	r4,r4,r2
  80b160:	1908983a 	sll	r4,r3,r4
  80b164:	d9400117 	ldw	r5,4(sp)
  80b168:	1886d83a 	srl	r3,r3,r2
  80b16c:	2148b03a 	or	r4,r4,r5
  80b170:	99000515 	stw	r4,20(r19)
  80b174:	d8c00015 	stw	r3,0(sp)
  80b178:	003fca06 	br	80b0a4 <__alt_mem_onchip_mem+0xff78b0a4>

0080b17c <__ratio>:
  80b17c:	defff904 	addi	sp,sp,-28
  80b180:	dc400315 	stw	r17,12(sp)
  80b184:	2823883a 	mov	r17,r5
  80b188:	d9400104 	addi	r5,sp,4
  80b18c:	dfc00615 	stw	ra,24(sp)
  80b190:	dcc00515 	stw	r19,20(sp)
  80b194:	dc800415 	stw	r18,16(sp)
  80b198:	2027883a 	mov	r19,r4
  80b19c:	dc000215 	stw	r16,8(sp)
  80b1a0:	080af240 	call	80af24 <__b2d>
  80b1a4:	d80b883a 	mov	r5,sp
  80b1a8:	8809883a 	mov	r4,r17
  80b1ac:	1025883a 	mov	r18,r2
  80b1b0:	1821883a 	mov	r16,r3
  80b1b4:	080af240 	call	80af24 <__b2d>
  80b1b8:	8a000417 	ldw	r8,16(r17)
  80b1bc:	99000417 	ldw	r4,16(r19)
  80b1c0:	d9400117 	ldw	r5,4(sp)
  80b1c4:	2209c83a 	sub	r4,r4,r8
  80b1c8:	2010917a 	slli	r8,r4,5
  80b1cc:	d9000017 	ldw	r4,0(sp)
  80b1d0:	2909c83a 	sub	r4,r5,r4
  80b1d4:	4109883a 	add	r4,r8,r4
  80b1d8:	01000e0e 	bge	zero,r4,80b214 <__ratio+0x98>
  80b1dc:	2008953a 	slli	r4,r4,20
  80b1e0:	2421883a 	add	r16,r4,r16
  80b1e4:	100d883a 	mov	r6,r2
  80b1e8:	180f883a 	mov	r7,r3
  80b1ec:	9009883a 	mov	r4,r18
  80b1f0:	800b883a 	mov	r5,r16
  80b1f4:	080ed140 	call	80ed14 <__divdf3>
  80b1f8:	dfc00617 	ldw	ra,24(sp)
  80b1fc:	dcc00517 	ldw	r19,20(sp)
  80b200:	dc800417 	ldw	r18,16(sp)
  80b204:	dc400317 	ldw	r17,12(sp)
  80b208:	dc000217 	ldw	r16,8(sp)
  80b20c:	dec00704 	addi	sp,sp,28
  80b210:	f800283a 	ret
  80b214:	2008953a 	slli	r4,r4,20
  80b218:	1907c83a 	sub	r3,r3,r4
  80b21c:	003ff106 	br	80b1e4 <__alt_mem_onchip_mem+0xff78b1e4>

0080b220 <_mprec_log10>:
  80b220:	defffe04 	addi	sp,sp,-8
  80b224:	dc000015 	stw	r16,0(sp)
  80b228:	dfc00115 	stw	ra,4(sp)
  80b22c:	008005c4 	movi	r2,23
  80b230:	2021883a 	mov	r16,r4
  80b234:	11000d0e 	bge	r2,r4,80b26c <_mprec_log10+0x4c>
  80b238:	0005883a 	mov	r2,zero
  80b23c:	00cffc34 	movhi	r3,16368
  80b240:	843fffc4 	addi	r16,r16,-1
  80b244:	000d883a 	mov	r6,zero
  80b248:	01d00934 	movhi	r7,16420
  80b24c:	1009883a 	mov	r4,r2
  80b250:	180b883a 	mov	r5,r3
  80b254:	080f8540 	call	80f854 <__muldf3>
  80b258:	803ff91e 	bne	r16,zero,80b240 <__alt_mem_onchip_mem+0xff78b240>
  80b25c:	dfc00117 	ldw	ra,4(sp)
  80b260:	dc000017 	ldw	r16,0(sp)
  80b264:	dec00204 	addi	sp,sp,8
  80b268:	f800283a 	ret
  80b26c:	202090fa 	slli	r16,r4,3
  80b270:	00802074 	movhi	r2,129
  80b274:	1093e404 	addi	r2,r2,20368
  80b278:	1421883a 	add	r16,r2,r16
  80b27c:	80800017 	ldw	r2,0(r16)
  80b280:	80c00117 	ldw	r3,4(r16)
  80b284:	dfc00117 	ldw	ra,4(sp)
  80b288:	dc000017 	ldw	r16,0(sp)
  80b28c:	dec00204 	addi	sp,sp,8
  80b290:	f800283a 	ret

0080b294 <__copybits>:
  80b294:	297fffc4 	addi	r5,r5,-1
  80b298:	280fd17a 	srai	r7,r5,5
  80b29c:	30c00417 	ldw	r3,16(r6)
  80b2a0:	30800504 	addi	r2,r6,20
  80b2a4:	39c00044 	addi	r7,r7,1
  80b2a8:	18c7883a 	add	r3,r3,r3
  80b2ac:	39cf883a 	add	r7,r7,r7
  80b2b0:	18c7883a 	add	r3,r3,r3
  80b2b4:	39cf883a 	add	r7,r7,r7
  80b2b8:	10c7883a 	add	r3,r2,r3
  80b2bc:	21cf883a 	add	r7,r4,r7
  80b2c0:	10c00d2e 	bgeu	r2,r3,80b2f8 <__copybits+0x64>
  80b2c4:	200b883a 	mov	r5,r4
  80b2c8:	12000017 	ldw	r8,0(r2)
  80b2cc:	29400104 	addi	r5,r5,4
  80b2d0:	10800104 	addi	r2,r2,4
  80b2d4:	2a3fff15 	stw	r8,-4(r5)
  80b2d8:	10fffb36 	bltu	r2,r3,80b2c8 <__alt_mem_onchip_mem+0xff78b2c8>
  80b2dc:	1985c83a 	sub	r2,r3,r6
  80b2e0:	10bffac4 	addi	r2,r2,-21
  80b2e4:	1004d0ba 	srli	r2,r2,2
  80b2e8:	10800044 	addi	r2,r2,1
  80b2ec:	1085883a 	add	r2,r2,r2
  80b2f0:	1085883a 	add	r2,r2,r2
  80b2f4:	2089883a 	add	r4,r4,r2
  80b2f8:	21c0032e 	bgeu	r4,r7,80b308 <__copybits+0x74>
  80b2fc:	20000015 	stw	zero,0(r4)
  80b300:	21000104 	addi	r4,r4,4
  80b304:	21fffd36 	bltu	r4,r7,80b2fc <__alt_mem_onchip_mem+0xff78b2fc>
  80b308:	f800283a 	ret

0080b30c <__any_on>:
  80b30c:	20c00417 	ldw	r3,16(r4)
  80b310:	2805d17a 	srai	r2,r5,5
  80b314:	21000504 	addi	r4,r4,20
  80b318:	18800d0e 	bge	r3,r2,80b350 <__any_on+0x44>
  80b31c:	18c7883a 	add	r3,r3,r3
  80b320:	18c7883a 	add	r3,r3,r3
  80b324:	20c7883a 	add	r3,r4,r3
  80b328:	20c0192e 	bgeu	r4,r3,80b390 <__any_on+0x84>
  80b32c:	18bfff17 	ldw	r2,-4(r3)
  80b330:	18ffff04 	addi	r3,r3,-4
  80b334:	1000041e 	bne	r2,zero,80b348 <__any_on+0x3c>
  80b338:	20c0142e 	bgeu	r4,r3,80b38c <__any_on+0x80>
  80b33c:	18ffff04 	addi	r3,r3,-4
  80b340:	19400017 	ldw	r5,0(r3)
  80b344:	283ffc26 	beq	r5,zero,80b338 <__alt_mem_onchip_mem+0xff78b338>
  80b348:	00800044 	movi	r2,1
  80b34c:	f800283a 	ret
  80b350:	10c00a0e 	bge	r2,r3,80b37c <__any_on+0x70>
  80b354:	1085883a 	add	r2,r2,r2
  80b358:	1085883a 	add	r2,r2,r2
  80b35c:	294007cc 	andi	r5,r5,31
  80b360:	2087883a 	add	r3,r4,r2
  80b364:	283ff026 	beq	r5,zero,80b328 <__alt_mem_onchip_mem+0xff78b328>
  80b368:	19800017 	ldw	r6,0(r3)
  80b36c:	3144d83a 	srl	r2,r6,r5
  80b370:	114a983a 	sll	r5,r2,r5
  80b374:	317ff41e 	bne	r6,r5,80b348 <__alt_mem_onchip_mem+0xff78b348>
  80b378:	003feb06 	br	80b328 <__alt_mem_onchip_mem+0xff78b328>
  80b37c:	1085883a 	add	r2,r2,r2
  80b380:	1085883a 	add	r2,r2,r2
  80b384:	2087883a 	add	r3,r4,r2
  80b388:	003fe706 	br	80b328 <__alt_mem_onchip_mem+0xff78b328>
  80b38c:	f800283a 	ret
  80b390:	0005883a 	mov	r2,zero
  80b394:	f800283a 	ret

0080b398 <_read_r>:
  80b398:	defffd04 	addi	sp,sp,-12
  80b39c:	2805883a 	mov	r2,r5
  80b3a0:	dc000015 	stw	r16,0(sp)
  80b3a4:	040020b4 	movhi	r16,130
  80b3a8:	dc400115 	stw	r17,4(sp)
  80b3ac:	300b883a 	mov	r5,r6
  80b3b0:	8423dd04 	addi	r16,r16,-28812
  80b3b4:	2023883a 	mov	r17,r4
  80b3b8:	380d883a 	mov	r6,r7
  80b3bc:	1009883a 	mov	r4,r2
  80b3c0:	dfc00215 	stw	ra,8(sp)
  80b3c4:	80000015 	stw	zero,0(r16)
  80b3c8:	08114a40 	call	8114a4 <read>
  80b3cc:	00ffffc4 	movi	r3,-1
  80b3d0:	10c00526 	beq	r2,r3,80b3e8 <_read_r+0x50>
  80b3d4:	dfc00217 	ldw	ra,8(sp)
  80b3d8:	dc400117 	ldw	r17,4(sp)
  80b3dc:	dc000017 	ldw	r16,0(sp)
  80b3e0:	dec00304 	addi	sp,sp,12
  80b3e4:	f800283a 	ret
  80b3e8:	80c00017 	ldw	r3,0(r16)
  80b3ec:	183ff926 	beq	r3,zero,80b3d4 <__alt_mem_onchip_mem+0xff78b3d4>
  80b3f0:	88c00015 	stw	r3,0(r17)
  80b3f4:	003ff706 	br	80b3d4 <__alt_mem_onchip_mem+0xff78b3d4>

0080b3f8 <_realloc_r>:
  80b3f8:	defff604 	addi	sp,sp,-40
  80b3fc:	dc800215 	stw	r18,8(sp)
  80b400:	dfc00915 	stw	ra,36(sp)
  80b404:	df000815 	stw	fp,32(sp)
  80b408:	ddc00715 	stw	r23,28(sp)
  80b40c:	dd800615 	stw	r22,24(sp)
  80b410:	dd400515 	stw	r21,20(sp)
  80b414:	dd000415 	stw	r20,16(sp)
  80b418:	dcc00315 	stw	r19,12(sp)
  80b41c:	dc400115 	stw	r17,4(sp)
  80b420:	dc000015 	stw	r16,0(sp)
  80b424:	3025883a 	mov	r18,r6
  80b428:	2800b726 	beq	r5,zero,80b708 <_realloc_r+0x310>
  80b42c:	282b883a 	mov	r21,r5
  80b430:	2029883a 	mov	r20,r4
  80b434:	08111cc0 	call	8111cc <__malloc_lock>
  80b438:	a8bfff17 	ldw	r2,-4(r21)
  80b43c:	043fff04 	movi	r16,-4
  80b440:	90c002c4 	addi	r3,r18,11
  80b444:	01000584 	movi	r4,22
  80b448:	acfffe04 	addi	r19,r21,-8
  80b44c:	1420703a 	and	r16,r2,r16
  80b450:	20c0332e 	bgeu	r4,r3,80b520 <_realloc_r+0x128>
  80b454:	047ffe04 	movi	r17,-8
  80b458:	1c62703a 	and	r17,r3,r17
  80b45c:	8807883a 	mov	r3,r17
  80b460:	88005816 	blt	r17,zero,80b5c4 <_realloc_r+0x1cc>
  80b464:	8c805736 	bltu	r17,r18,80b5c4 <_realloc_r+0x1cc>
  80b468:	80c0300e 	bge	r16,r3,80b52c <_realloc_r+0x134>
  80b46c:	07002074 	movhi	fp,129
  80b470:	e7161e04 	addi	fp,fp,22648
  80b474:	e1c00217 	ldw	r7,8(fp)
  80b478:	9c09883a 	add	r4,r19,r16
  80b47c:	22000117 	ldw	r8,4(r4)
  80b480:	21c06326 	beq	r4,r7,80b610 <_realloc_r+0x218>
  80b484:	017fff84 	movi	r5,-2
  80b488:	414a703a 	and	r5,r8,r5
  80b48c:	214b883a 	add	r5,r4,r5
  80b490:	29800117 	ldw	r6,4(r5)
  80b494:	3180004c 	andi	r6,r6,1
  80b498:	30003f26 	beq	r6,zero,80b598 <_realloc_r+0x1a0>
  80b49c:	1080004c 	andi	r2,r2,1
  80b4a0:	10008326 	beq	r2,zero,80b6b0 <_realloc_r+0x2b8>
  80b4a4:	900b883a 	mov	r5,r18
  80b4a8:	a009883a 	mov	r4,r20
  80b4ac:	08040cc0 	call	8040cc <_malloc_r>
  80b4b0:	1025883a 	mov	r18,r2
  80b4b4:	10011e26 	beq	r2,zero,80b930 <_realloc_r+0x538>
  80b4b8:	a93fff17 	ldw	r4,-4(r21)
  80b4bc:	10fffe04 	addi	r3,r2,-8
  80b4c0:	00bfff84 	movi	r2,-2
  80b4c4:	2084703a 	and	r2,r4,r2
  80b4c8:	9885883a 	add	r2,r19,r2
  80b4cc:	1880ee26 	beq	r3,r2,80b888 <_realloc_r+0x490>
  80b4d0:	81bfff04 	addi	r6,r16,-4
  80b4d4:	00800904 	movi	r2,36
  80b4d8:	1180b836 	bltu	r2,r6,80b7bc <_realloc_r+0x3c4>
  80b4dc:	00c004c4 	movi	r3,19
  80b4e0:	19809636 	bltu	r3,r6,80b73c <_realloc_r+0x344>
  80b4e4:	9005883a 	mov	r2,r18
  80b4e8:	a807883a 	mov	r3,r21
  80b4ec:	19000017 	ldw	r4,0(r3)
  80b4f0:	11000015 	stw	r4,0(r2)
  80b4f4:	19000117 	ldw	r4,4(r3)
  80b4f8:	11000115 	stw	r4,4(r2)
  80b4fc:	18c00217 	ldw	r3,8(r3)
  80b500:	10c00215 	stw	r3,8(r2)
  80b504:	a80b883a 	mov	r5,r21
  80b508:	a009883a 	mov	r4,r20
  80b50c:	08095300 	call	809530 <_free_r>
  80b510:	a009883a 	mov	r4,r20
  80b514:	08111f00 	call	8111f0 <__malloc_unlock>
  80b518:	9005883a 	mov	r2,r18
  80b51c:	00001206 	br	80b568 <_realloc_r+0x170>
  80b520:	00c00404 	movi	r3,16
  80b524:	1823883a 	mov	r17,r3
  80b528:	003fce06 	br	80b464 <__alt_mem_onchip_mem+0xff78b464>
  80b52c:	a825883a 	mov	r18,r21
  80b530:	8445c83a 	sub	r2,r16,r17
  80b534:	00c003c4 	movi	r3,15
  80b538:	18802636 	bltu	r3,r2,80b5d4 <_realloc_r+0x1dc>
  80b53c:	99800117 	ldw	r6,4(r19)
  80b540:	9c07883a 	add	r3,r19,r16
  80b544:	3180004c 	andi	r6,r6,1
  80b548:	3420b03a 	or	r16,r6,r16
  80b54c:	9c000115 	stw	r16,4(r19)
  80b550:	18800117 	ldw	r2,4(r3)
  80b554:	10800054 	ori	r2,r2,1
  80b558:	18800115 	stw	r2,4(r3)
  80b55c:	a009883a 	mov	r4,r20
  80b560:	08111f00 	call	8111f0 <__malloc_unlock>
  80b564:	9005883a 	mov	r2,r18
  80b568:	dfc00917 	ldw	ra,36(sp)
  80b56c:	df000817 	ldw	fp,32(sp)
  80b570:	ddc00717 	ldw	r23,28(sp)
  80b574:	dd800617 	ldw	r22,24(sp)
  80b578:	dd400517 	ldw	r21,20(sp)
  80b57c:	dd000417 	ldw	r20,16(sp)
  80b580:	dcc00317 	ldw	r19,12(sp)
  80b584:	dc800217 	ldw	r18,8(sp)
  80b588:	dc400117 	ldw	r17,4(sp)
  80b58c:	dc000017 	ldw	r16,0(sp)
  80b590:	dec00a04 	addi	sp,sp,40
  80b594:	f800283a 	ret
  80b598:	017fff04 	movi	r5,-4
  80b59c:	414a703a 	and	r5,r8,r5
  80b5a0:	814d883a 	add	r6,r16,r5
  80b5a4:	30c01f16 	blt	r6,r3,80b624 <_realloc_r+0x22c>
  80b5a8:	20800317 	ldw	r2,12(r4)
  80b5ac:	20c00217 	ldw	r3,8(r4)
  80b5b0:	a825883a 	mov	r18,r21
  80b5b4:	3021883a 	mov	r16,r6
  80b5b8:	18800315 	stw	r2,12(r3)
  80b5bc:	10c00215 	stw	r3,8(r2)
  80b5c0:	003fdb06 	br	80b530 <__alt_mem_onchip_mem+0xff78b530>
  80b5c4:	00800304 	movi	r2,12
  80b5c8:	a0800015 	stw	r2,0(r20)
  80b5cc:	0005883a 	mov	r2,zero
  80b5d0:	003fe506 	br	80b568 <__alt_mem_onchip_mem+0xff78b568>
  80b5d4:	98c00117 	ldw	r3,4(r19)
  80b5d8:	9c4b883a 	add	r5,r19,r17
  80b5dc:	11000054 	ori	r4,r2,1
  80b5e0:	18c0004c 	andi	r3,r3,1
  80b5e4:	1c62b03a 	or	r17,r3,r17
  80b5e8:	9c400115 	stw	r17,4(r19)
  80b5ec:	29000115 	stw	r4,4(r5)
  80b5f0:	2885883a 	add	r2,r5,r2
  80b5f4:	10c00117 	ldw	r3,4(r2)
  80b5f8:	29400204 	addi	r5,r5,8
  80b5fc:	a009883a 	mov	r4,r20
  80b600:	18c00054 	ori	r3,r3,1
  80b604:	10c00115 	stw	r3,4(r2)
  80b608:	08095300 	call	809530 <_free_r>
  80b60c:	003fd306 	br	80b55c <__alt_mem_onchip_mem+0xff78b55c>
  80b610:	017fff04 	movi	r5,-4
  80b614:	414a703a 	and	r5,r8,r5
  80b618:	89800404 	addi	r6,r17,16
  80b61c:	8151883a 	add	r8,r16,r5
  80b620:	4180590e 	bge	r8,r6,80b788 <_realloc_r+0x390>
  80b624:	1080004c 	andi	r2,r2,1
  80b628:	103f9e1e 	bne	r2,zero,80b4a4 <__alt_mem_onchip_mem+0xff78b4a4>
  80b62c:	adbffe17 	ldw	r22,-8(r21)
  80b630:	00bfff04 	movi	r2,-4
  80b634:	9dadc83a 	sub	r22,r19,r22
  80b638:	b1800117 	ldw	r6,4(r22)
  80b63c:	3084703a 	and	r2,r6,r2
  80b640:	20002026 	beq	r4,zero,80b6c4 <_realloc_r+0x2cc>
  80b644:	80af883a 	add	r23,r16,r2
  80b648:	b96f883a 	add	r23,r23,r5
  80b64c:	21c05f26 	beq	r4,r7,80b7cc <_realloc_r+0x3d4>
  80b650:	b8c01c16 	blt	r23,r3,80b6c4 <_realloc_r+0x2cc>
  80b654:	20800317 	ldw	r2,12(r4)
  80b658:	20c00217 	ldw	r3,8(r4)
  80b65c:	81bfff04 	addi	r6,r16,-4
  80b660:	01000904 	movi	r4,36
  80b664:	18800315 	stw	r2,12(r3)
  80b668:	10c00215 	stw	r3,8(r2)
  80b66c:	b0c00217 	ldw	r3,8(r22)
  80b670:	b0800317 	ldw	r2,12(r22)
  80b674:	b4800204 	addi	r18,r22,8
  80b678:	18800315 	stw	r2,12(r3)
  80b67c:	10c00215 	stw	r3,8(r2)
  80b680:	21801b36 	bltu	r4,r6,80b6f0 <_realloc_r+0x2f8>
  80b684:	008004c4 	movi	r2,19
  80b688:	1180352e 	bgeu	r2,r6,80b760 <_realloc_r+0x368>
  80b68c:	a8800017 	ldw	r2,0(r21)
  80b690:	b0800215 	stw	r2,8(r22)
  80b694:	a8800117 	ldw	r2,4(r21)
  80b698:	b0800315 	stw	r2,12(r22)
  80b69c:	008006c4 	movi	r2,27
  80b6a0:	11807f36 	bltu	r2,r6,80b8a0 <_realloc_r+0x4a8>
  80b6a4:	b0800404 	addi	r2,r22,16
  80b6a8:	ad400204 	addi	r21,r21,8
  80b6ac:	00002d06 	br	80b764 <_realloc_r+0x36c>
  80b6b0:	adbffe17 	ldw	r22,-8(r21)
  80b6b4:	00bfff04 	movi	r2,-4
  80b6b8:	9dadc83a 	sub	r22,r19,r22
  80b6bc:	b1000117 	ldw	r4,4(r22)
  80b6c0:	2084703a 	and	r2,r4,r2
  80b6c4:	b03f7726 	beq	r22,zero,80b4a4 <__alt_mem_onchip_mem+0xff78b4a4>
  80b6c8:	80af883a 	add	r23,r16,r2
  80b6cc:	b8ff7516 	blt	r23,r3,80b4a4 <__alt_mem_onchip_mem+0xff78b4a4>
  80b6d0:	b0800317 	ldw	r2,12(r22)
  80b6d4:	b0c00217 	ldw	r3,8(r22)
  80b6d8:	81bfff04 	addi	r6,r16,-4
  80b6dc:	01000904 	movi	r4,36
  80b6e0:	18800315 	stw	r2,12(r3)
  80b6e4:	10c00215 	stw	r3,8(r2)
  80b6e8:	b4800204 	addi	r18,r22,8
  80b6ec:	21bfe52e 	bgeu	r4,r6,80b684 <__alt_mem_onchip_mem+0xff78b684>
  80b6f0:	a80b883a 	mov	r5,r21
  80b6f4:	9009883a 	mov	r4,r18
  80b6f8:	080a2400 	call	80a240 <memmove>
  80b6fc:	b821883a 	mov	r16,r23
  80b700:	b027883a 	mov	r19,r22
  80b704:	003f8a06 	br	80b530 <__alt_mem_onchip_mem+0xff78b530>
  80b708:	300b883a 	mov	r5,r6
  80b70c:	dfc00917 	ldw	ra,36(sp)
  80b710:	df000817 	ldw	fp,32(sp)
  80b714:	ddc00717 	ldw	r23,28(sp)
  80b718:	dd800617 	ldw	r22,24(sp)
  80b71c:	dd400517 	ldw	r21,20(sp)
  80b720:	dd000417 	ldw	r20,16(sp)
  80b724:	dcc00317 	ldw	r19,12(sp)
  80b728:	dc800217 	ldw	r18,8(sp)
  80b72c:	dc400117 	ldw	r17,4(sp)
  80b730:	dc000017 	ldw	r16,0(sp)
  80b734:	dec00a04 	addi	sp,sp,40
  80b738:	08040cc1 	jmpi	8040cc <_malloc_r>
  80b73c:	a8c00017 	ldw	r3,0(r21)
  80b740:	90c00015 	stw	r3,0(r18)
  80b744:	a8c00117 	ldw	r3,4(r21)
  80b748:	90c00115 	stw	r3,4(r18)
  80b74c:	00c006c4 	movi	r3,27
  80b750:	19804536 	bltu	r3,r6,80b868 <_realloc_r+0x470>
  80b754:	90800204 	addi	r2,r18,8
  80b758:	a8c00204 	addi	r3,r21,8
  80b75c:	003f6306 	br	80b4ec <__alt_mem_onchip_mem+0xff78b4ec>
  80b760:	9005883a 	mov	r2,r18
  80b764:	a8c00017 	ldw	r3,0(r21)
  80b768:	b821883a 	mov	r16,r23
  80b76c:	b027883a 	mov	r19,r22
  80b770:	10c00015 	stw	r3,0(r2)
  80b774:	a8c00117 	ldw	r3,4(r21)
  80b778:	10c00115 	stw	r3,4(r2)
  80b77c:	a8c00217 	ldw	r3,8(r21)
  80b780:	10c00215 	stw	r3,8(r2)
  80b784:	003f6a06 	br	80b530 <__alt_mem_onchip_mem+0xff78b530>
  80b788:	9c67883a 	add	r19,r19,r17
  80b78c:	4445c83a 	sub	r2,r8,r17
  80b790:	e4c00215 	stw	r19,8(fp)
  80b794:	10800054 	ori	r2,r2,1
  80b798:	98800115 	stw	r2,4(r19)
  80b79c:	a8bfff17 	ldw	r2,-4(r21)
  80b7a0:	a009883a 	mov	r4,r20
  80b7a4:	1080004c 	andi	r2,r2,1
  80b7a8:	1462b03a 	or	r17,r2,r17
  80b7ac:	ac7fff15 	stw	r17,-4(r21)
  80b7b0:	08111f00 	call	8111f0 <__malloc_unlock>
  80b7b4:	a805883a 	mov	r2,r21
  80b7b8:	003f6b06 	br	80b568 <__alt_mem_onchip_mem+0xff78b568>
  80b7bc:	a80b883a 	mov	r5,r21
  80b7c0:	9009883a 	mov	r4,r18
  80b7c4:	080a2400 	call	80a240 <memmove>
  80b7c8:	003f4e06 	br	80b504 <__alt_mem_onchip_mem+0xff78b504>
  80b7cc:	89000404 	addi	r4,r17,16
  80b7d0:	b93fbc16 	blt	r23,r4,80b6c4 <__alt_mem_onchip_mem+0xff78b6c4>
  80b7d4:	b0800317 	ldw	r2,12(r22)
  80b7d8:	b0c00217 	ldw	r3,8(r22)
  80b7dc:	81bfff04 	addi	r6,r16,-4
  80b7e0:	01000904 	movi	r4,36
  80b7e4:	18800315 	stw	r2,12(r3)
  80b7e8:	10c00215 	stw	r3,8(r2)
  80b7ec:	b4800204 	addi	r18,r22,8
  80b7f0:	21804336 	bltu	r4,r6,80b900 <_realloc_r+0x508>
  80b7f4:	008004c4 	movi	r2,19
  80b7f8:	11803f2e 	bgeu	r2,r6,80b8f8 <_realloc_r+0x500>
  80b7fc:	a8800017 	ldw	r2,0(r21)
  80b800:	b0800215 	stw	r2,8(r22)
  80b804:	a8800117 	ldw	r2,4(r21)
  80b808:	b0800315 	stw	r2,12(r22)
  80b80c:	008006c4 	movi	r2,27
  80b810:	11803f36 	bltu	r2,r6,80b910 <_realloc_r+0x518>
  80b814:	b0800404 	addi	r2,r22,16
  80b818:	ad400204 	addi	r21,r21,8
  80b81c:	a8c00017 	ldw	r3,0(r21)
  80b820:	10c00015 	stw	r3,0(r2)
  80b824:	a8c00117 	ldw	r3,4(r21)
  80b828:	10c00115 	stw	r3,4(r2)
  80b82c:	a8c00217 	ldw	r3,8(r21)
  80b830:	10c00215 	stw	r3,8(r2)
  80b834:	b447883a 	add	r3,r22,r17
  80b838:	bc45c83a 	sub	r2,r23,r17
  80b83c:	e0c00215 	stw	r3,8(fp)
  80b840:	10800054 	ori	r2,r2,1
  80b844:	18800115 	stw	r2,4(r3)
  80b848:	b0800117 	ldw	r2,4(r22)
  80b84c:	a009883a 	mov	r4,r20
  80b850:	1080004c 	andi	r2,r2,1
  80b854:	1462b03a 	or	r17,r2,r17
  80b858:	b4400115 	stw	r17,4(r22)
  80b85c:	08111f00 	call	8111f0 <__malloc_unlock>
  80b860:	9005883a 	mov	r2,r18
  80b864:	003f4006 	br	80b568 <__alt_mem_onchip_mem+0xff78b568>
  80b868:	a8c00217 	ldw	r3,8(r21)
  80b86c:	90c00215 	stw	r3,8(r18)
  80b870:	a8c00317 	ldw	r3,12(r21)
  80b874:	90c00315 	stw	r3,12(r18)
  80b878:	30801126 	beq	r6,r2,80b8c0 <_realloc_r+0x4c8>
  80b87c:	90800404 	addi	r2,r18,16
  80b880:	a8c00404 	addi	r3,r21,16
  80b884:	003f1906 	br	80b4ec <__alt_mem_onchip_mem+0xff78b4ec>
  80b888:	90ffff17 	ldw	r3,-4(r18)
  80b88c:	00bfff04 	movi	r2,-4
  80b890:	a825883a 	mov	r18,r21
  80b894:	1884703a 	and	r2,r3,r2
  80b898:	80a1883a 	add	r16,r16,r2
  80b89c:	003f2406 	br	80b530 <__alt_mem_onchip_mem+0xff78b530>
  80b8a0:	a8800217 	ldw	r2,8(r21)
  80b8a4:	b0800415 	stw	r2,16(r22)
  80b8a8:	a8800317 	ldw	r2,12(r21)
  80b8ac:	b0800515 	stw	r2,20(r22)
  80b8b0:	31000a26 	beq	r6,r4,80b8dc <_realloc_r+0x4e4>
  80b8b4:	b0800604 	addi	r2,r22,24
  80b8b8:	ad400404 	addi	r21,r21,16
  80b8bc:	003fa906 	br	80b764 <__alt_mem_onchip_mem+0xff78b764>
  80b8c0:	a9000417 	ldw	r4,16(r21)
  80b8c4:	90800604 	addi	r2,r18,24
  80b8c8:	a8c00604 	addi	r3,r21,24
  80b8cc:	91000415 	stw	r4,16(r18)
  80b8d0:	a9000517 	ldw	r4,20(r21)
  80b8d4:	91000515 	stw	r4,20(r18)
  80b8d8:	003f0406 	br	80b4ec <__alt_mem_onchip_mem+0xff78b4ec>
  80b8dc:	a8c00417 	ldw	r3,16(r21)
  80b8e0:	ad400604 	addi	r21,r21,24
  80b8e4:	b0800804 	addi	r2,r22,32
  80b8e8:	b0c00615 	stw	r3,24(r22)
  80b8ec:	a8ffff17 	ldw	r3,-4(r21)
  80b8f0:	b0c00715 	stw	r3,28(r22)
  80b8f4:	003f9b06 	br	80b764 <__alt_mem_onchip_mem+0xff78b764>
  80b8f8:	9005883a 	mov	r2,r18
  80b8fc:	003fc706 	br	80b81c <__alt_mem_onchip_mem+0xff78b81c>
  80b900:	a80b883a 	mov	r5,r21
  80b904:	9009883a 	mov	r4,r18
  80b908:	080a2400 	call	80a240 <memmove>
  80b90c:	003fc906 	br	80b834 <__alt_mem_onchip_mem+0xff78b834>
  80b910:	a8800217 	ldw	r2,8(r21)
  80b914:	b0800415 	stw	r2,16(r22)
  80b918:	a8800317 	ldw	r2,12(r21)
  80b91c:	b0800515 	stw	r2,20(r22)
  80b920:	31000726 	beq	r6,r4,80b940 <_realloc_r+0x548>
  80b924:	b0800604 	addi	r2,r22,24
  80b928:	ad400404 	addi	r21,r21,16
  80b92c:	003fbb06 	br	80b81c <__alt_mem_onchip_mem+0xff78b81c>
  80b930:	a009883a 	mov	r4,r20
  80b934:	08111f00 	call	8111f0 <__malloc_unlock>
  80b938:	0005883a 	mov	r2,zero
  80b93c:	003f0a06 	br	80b568 <__alt_mem_onchip_mem+0xff78b568>
  80b940:	a8c00417 	ldw	r3,16(r21)
  80b944:	ad400604 	addi	r21,r21,24
  80b948:	b0800804 	addi	r2,r22,32
  80b94c:	b0c00615 	stw	r3,24(r22)
  80b950:	a8ffff17 	ldw	r3,-4(r21)
  80b954:	b0c00715 	stw	r3,28(r22)
  80b958:	003fb006 	br	80b81c <__alt_mem_onchip_mem+0xff78b81c>

0080b95c <__fpclassifyd>:
  80b95c:	00a00034 	movhi	r2,32768
  80b960:	10bfffc4 	addi	r2,r2,-1
  80b964:	2884703a 	and	r2,r5,r2
  80b968:	10000726 	beq	r2,zero,80b988 <__fpclassifyd+0x2c>
  80b96c:	00fffc34 	movhi	r3,65520
  80b970:	019ff834 	movhi	r6,32736
  80b974:	28c7883a 	add	r3,r5,r3
  80b978:	31bfffc4 	addi	r6,r6,-1
  80b97c:	30c00536 	bltu	r6,r3,80b994 <__fpclassifyd+0x38>
  80b980:	00800104 	movi	r2,4
  80b984:	f800283a 	ret
  80b988:	2000021e 	bne	r4,zero,80b994 <__fpclassifyd+0x38>
  80b98c:	00800084 	movi	r2,2
  80b990:	f800283a 	ret
  80b994:	00dffc34 	movhi	r3,32752
  80b998:	019ff834 	movhi	r6,32736
  80b99c:	28cb883a 	add	r5,r5,r3
  80b9a0:	31bfffc4 	addi	r6,r6,-1
  80b9a4:	317ff62e 	bgeu	r6,r5,80b980 <__alt_mem_onchip_mem+0xff78b980>
  80b9a8:	01400434 	movhi	r5,16
  80b9ac:	297fffc4 	addi	r5,r5,-1
  80b9b0:	28800236 	bltu	r5,r2,80b9bc <__fpclassifyd+0x60>
  80b9b4:	008000c4 	movi	r2,3
  80b9b8:	f800283a 	ret
  80b9bc:	10c00226 	beq	r2,r3,80b9c8 <__fpclassifyd+0x6c>
  80b9c0:	0005883a 	mov	r2,zero
  80b9c4:	f800283a 	ret
  80b9c8:	2005003a 	cmpeq	r2,r4,zero
  80b9cc:	f800283a 	ret

0080b9d0 <strcmp>:
  80b9d0:	2144b03a 	or	r2,r4,r5
  80b9d4:	108000cc 	andi	r2,r2,3
  80b9d8:	1000171e 	bne	r2,zero,80ba38 <strcmp+0x68>
  80b9dc:	20800017 	ldw	r2,0(r4)
  80b9e0:	28c00017 	ldw	r3,0(r5)
  80b9e4:	10c0141e 	bne	r2,r3,80ba38 <strcmp+0x68>
  80b9e8:	027fbff4 	movhi	r9,65279
  80b9ec:	4a7fbfc4 	addi	r9,r9,-257
  80b9f0:	0086303a 	nor	r3,zero,r2
  80b9f4:	02202074 	movhi	r8,32897
  80b9f8:	1245883a 	add	r2,r2,r9
  80b9fc:	42202004 	addi	r8,r8,-32640
  80ba00:	10c4703a 	and	r2,r2,r3
  80ba04:	1204703a 	and	r2,r2,r8
  80ba08:	10000226 	beq	r2,zero,80ba14 <strcmp+0x44>
  80ba0c:	00002306 	br	80ba9c <strcmp+0xcc>
  80ba10:	1000221e 	bne	r2,zero,80ba9c <strcmp+0xcc>
  80ba14:	21000104 	addi	r4,r4,4
  80ba18:	20c00017 	ldw	r3,0(r4)
  80ba1c:	29400104 	addi	r5,r5,4
  80ba20:	29800017 	ldw	r6,0(r5)
  80ba24:	1a4f883a 	add	r7,r3,r9
  80ba28:	00c4303a 	nor	r2,zero,r3
  80ba2c:	3884703a 	and	r2,r7,r2
  80ba30:	1204703a 	and	r2,r2,r8
  80ba34:	19bff626 	beq	r3,r6,80ba10 <__alt_mem_onchip_mem+0xff78ba10>
  80ba38:	20800003 	ldbu	r2,0(r4)
  80ba3c:	10c03fcc 	andi	r3,r2,255
  80ba40:	18c0201c 	xori	r3,r3,128
  80ba44:	18ffe004 	addi	r3,r3,-128
  80ba48:	18000c26 	beq	r3,zero,80ba7c <strcmp+0xac>
  80ba4c:	29800007 	ldb	r6,0(r5)
  80ba50:	19800326 	beq	r3,r6,80ba60 <strcmp+0x90>
  80ba54:	00001306 	br	80baa4 <strcmp+0xd4>
  80ba58:	29800007 	ldb	r6,0(r5)
  80ba5c:	11800b1e 	bne	r2,r6,80ba8c <strcmp+0xbc>
  80ba60:	21000044 	addi	r4,r4,1
  80ba64:	20c00003 	ldbu	r3,0(r4)
  80ba68:	29400044 	addi	r5,r5,1
  80ba6c:	18803fcc 	andi	r2,r3,255
  80ba70:	1080201c 	xori	r2,r2,128
  80ba74:	10bfe004 	addi	r2,r2,-128
  80ba78:	103ff71e 	bne	r2,zero,80ba58 <__alt_mem_onchip_mem+0xff78ba58>
  80ba7c:	0007883a 	mov	r3,zero
  80ba80:	28800003 	ldbu	r2,0(r5)
  80ba84:	1885c83a 	sub	r2,r3,r2
  80ba88:	f800283a 	ret
  80ba8c:	28800003 	ldbu	r2,0(r5)
  80ba90:	18c03fcc 	andi	r3,r3,255
  80ba94:	1885c83a 	sub	r2,r3,r2
  80ba98:	f800283a 	ret
  80ba9c:	0005883a 	mov	r2,zero
  80baa0:	f800283a 	ret
  80baa4:	10c03fcc 	andi	r3,r2,255
  80baa8:	003ff506 	br	80ba80 <__alt_mem_onchip_mem+0xff78ba80>

0080baac <__sprint_r.part.0>:
  80baac:	28801917 	ldw	r2,100(r5)
  80bab0:	defff604 	addi	sp,sp,-40
  80bab4:	dd400515 	stw	r21,20(sp)
  80bab8:	dfc00915 	stw	ra,36(sp)
  80babc:	df000815 	stw	fp,32(sp)
  80bac0:	ddc00715 	stw	r23,28(sp)
  80bac4:	dd800615 	stw	r22,24(sp)
  80bac8:	dd000415 	stw	r20,16(sp)
  80bacc:	dcc00315 	stw	r19,12(sp)
  80bad0:	dc800215 	stw	r18,8(sp)
  80bad4:	dc400115 	stw	r17,4(sp)
  80bad8:	dc000015 	stw	r16,0(sp)
  80badc:	1088000c 	andi	r2,r2,8192
  80bae0:	302b883a 	mov	r21,r6
  80bae4:	10002e26 	beq	r2,zero,80bba0 <__sprint_r.part.0+0xf4>
  80bae8:	30800217 	ldw	r2,8(r6)
  80baec:	35800017 	ldw	r22,0(r6)
  80baf0:	10002926 	beq	r2,zero,80bb98 <__sprint_r.part.0+0xec>
  80baf4:	2827883a 	mov	r19,r5
  80baf8:	2029883a 	mov	r20,r4
  80bafc:	b5c00104 	addi	r23,r22,4
  80bb00:	04bfffc4 	movi	r18,-1
  80bb04:	bc400017 	ldw	r17,0(r23)
  80bb08:	b4000017 	ldw	r16,0(r22)
  80bb0c:	0039883a 	mov	fp,zero
  80bb10:	8822d0ba 	srli	r17,r17,2
  80bb14:	8800031e 	bne	r17,zero,80bb24 <__sprint_r.part.0+0x78>
  80bb18:	00001806 	br	80bb7c <__sprint_r.part.0+0xd0>
  80bb1c:	84000104 	addi	r16,r16,4
  80bb20:	8f001526 	beq	r17,fp,80bb78 <__sprint_r.part.0+0xcc>
  80bb24:	81400017 	ldw	r5,0(r16)
  80bb28:	980d883a 	mov	r6,r19
  80bb2c:	a009883a 	mov	r4,r20
  80bb30:	080d4200 	call	80d420 <_fputwc_r>
  80bb34:	e7000044 	addi	fp,fp,1
  80bb38:	14bff81e 	bne	r2,r18,80bb1c <__alt_mem_onchip_mem+0xff78bb1c>
  80bb3c:	9005883a 	mov	r2,r18
  80bb40:	a8000215 	stw	zero,8(r21)
  80bb44:	a8000115 	stw	zero,4(r21)
  80bb48:	dfc00917 	ldw	ra,36(sp)
  80bb4c:	df000817 	ldw	fp,32(sp)
  80bb50:	ddc00717 	ldw	r23,28(sp)
  80bb54:	dd800617 	ldw	r22,24(sp)
  80bb58:	dd400517 	ldw	r21,20(sp)
  80bb5c:	dd000417 	ldw	r20,16(sp)
  80bb60:	dcc00317 	ldw	r19,12(sp)
  80bb64:	dc800217 	ldw	r18,8(sp)
  80bb68:	dc400117 	ldw	r17,4(sp)
  80bb6c:	dc000017 	ldw	r16,0(sp)
  80bb70:	dec00a04 	addi	sp,sp,40
  80bb74:	f800283a 	ret
  80bb78:	a8800217 	ldw	r2,8(r21)
  80bb7c:	8c63883a 	add	r17,r17,r17
  80bb80:	8c63883a 	add	r17,r17,r17
  80bb84:	1445c83a 	sub	r2,r2,r17
  80bb88:	a8800215 	stw	r2,8(r21)
  80bb8c:	b5800204 	addi	r22,r22,8
  80bb90:	bdc00204 	addi	r23,r23,8
  80bb94:	103fdb1e 	bne	r2,zero,80bb04 <__alt_mem_onchip_mem+0xff78bb04>
  80bb98:	0005883a 	mov	r2,zero
  80bb9c:	003fe806 	br	80bb40 <__alt_mem_onchip_mem+0xff78bb40>
  80bba0:	08098400 	call	809840 <__sfvwrite_r>
  80bba4:	003fe606 	br	80bb40 <__alt_mem_onchip_mem+0xff78bb40>

0080bba8 <__sprint_r>:
  80bba8:	30c00217 	ldw	r3,8(r6)
  80bbac:	18000126 	beq	r3,zero,80bbb4 <__sprint_r+0xc>
  80bbb0:	080baac1 	jmpi	80baac <__sprint_r.part.0>
  80bbb4:	30000115 	stw	zero,4(r6)
  80bbb8:	0005883a 	mov	r2,zero
  80bbbc:	f800283a 	ret

0080bbc0 <___vfiprintf_internal_r>:
  80bbc0:	deffc904 	addi	sp,sp,-220
  80bbc4:	df003515 	stw	fp,212(sp)
  80bbc8:	dd003115 	stw	r20,196(sp)
  80bbcc:	dfc03615 	stw	ra,216(sp)
  80bbd0:	ddc03415 	stw	r23,208(sp)
  80bbd4:	dd803315 	stw	r22,204(sp)
  80bbd8:	dd403215 	stw	r21,200(sp)
  80bbdc:	dcc03015 	stw	r19,192(sp)
  80bbe0:	dc802f15 	stw	r18,188(sp)
  80bbe4:	dc402e15 	stw	r17,184(sp)
  80bbe8:	dc002d15 	stw	r16,180(sp)
  80bbec:	d9002015 	stw	r4,128(sp)
  80bbf0:	d9c02215 	stw	r7,136(sp)
  80bbf4:	2829883a 	mov	r20,r5
  80bbf8:	3039883a 	mov	fp,r6
  80bbfc:	20000226 	beq	r4,zero,80bc08 <___vfiprintf_internal_r+0x48>
  80bc00:	20800e17 	ldw	r2,56(r4)
  80bc04:	1000cf26 	beq	r2,zero,80bf44 <___vfiprintf_internal_r+0x384>
  80bc08:	a080030b 	ldhu	r2,12(r20)
  80bc0c:	10c8000c 	andi	r3,r2,8192
  80bc10:	1800061e 	bne	r3,zero,80bc2c <___vfiprintf_internal_r+0x6c>
  80bc14:	a1001917 	ldw	r4,100(r20)
  80bc18:	00f7ffc4 	movi	r3,-8193
  80bc1c:	10880014 	ori	r2,r2,8192
  80bc20:	20c6703a 	and	r3,r4,r3
  80bc24:	a080030d 	sth	r2,12(r20)
  80bc28:	a0c01915 	stw	r3,100(r20)
  80bc2c:	10c0020c 	andi	r3,r2,8
  80bc30:	1800a926 	beq	r3,zero,80bed8 <___vfiprintf_internal_r+0x318>
  80bc34:	a0c00417 	ldw	r3,16(r20)
  80bc38:	1800a726 	beq	r3,zero,80bed8 <___vfiprintf_internal_r+0x318>
  80bc3c:	1080068c 	andi	r2,r2,26
  80bc40:	00c00284 	movi	r3,10
  80bc44:	10c0ac26 	beq	r2,r3,80bef8 <___vfiprintf_internal_r+0x338>
  80bc48:	da801a04 	addi	r10,sp,104
  80bc4c:	da801e15 	stw	r10,120(sp)
  80bc50:	d8801e17 	ldw	r2,120(sp)
  80bc54:	da8019c4 	addi	r10,sp,103
  80bc58:	05802074 	movhi	r22,129
  80bc5c:	05c02074 	movhi	r23,129
  80bc60:	da801f15 	stw	r10,124(sp)
  80bc64:	1295c83a 	sub	r10,r2,r10
  80bc68:	b5941a04 	addi	r22,r22,20584
  80bc6c:	bdd41604 	addi	r23,r23,20568
  80bc70:	dec01a15 	stw	sp,104(sp)
  80bc74:	d8001c15 	stw	zero,112(sp)
  80bc78:	d8001b15 	stw	zero,108(sp)
  80bc7c:	d8002615 	stw	zero,152(sp)
  80bc80:	d8002315 	stw	zero,140(sp)
  80bc84:	da802715 	stw	r10,156(sp)
  80bc88:	d811883a 	mov	r8,sp
  80bc8c:	dd002115 	stw	r20,132(sp)
  80bc90:	e021883a 	mov	r16,fp
  80bc94:	80800007 	ldb	r2,0(r16)
  80bc98:	1003ea26 	beq	r2,zero,80cc44 <___vfiprintf_internal_r+0x1084>
  80bc9c:	00c00944 	movi	r3,37
  80bca0:	8025883a 	mov	r18,r16
  80bca4:	10c0021e 	bne	r2,r3,80bcb0 <___vfiprintf_internal_r+0xf0>
  80bca8:	00001606 	br	80bd04 <___vfiprintf_internal_r+0x144>
  80bcac:	10c00326 	beq	r2,r3,80bcbc <___vfiprintf_internal_r+0xfc>
  80bcb0:	94800044 	addi	r18,r18,1
  80bcb4:	90800007 	ldb	r2,0(r18)
  80bcb8:	103ffc1e 	bne	r2,zero,80bcac <__alt_mem_onchip_mem+0xff78bcac>
  80bcbc:	9423c83a 	sub	r17,r18,r16
  80bcc0:	88001026 	beq	r17,zero,80bd04 <___vfiprintf_internal_r+0x144>
  80bcc4:	d8c01c17 	ldw	r3,112(sp)
  80bcc8:	d8801b17 	ldw	r2,108(sp)
  80bccc:	44000015 	stw	r16,0(r8)
  80bcd0:	88c7883a 	add	r3,r17,r3
  80bcd4:	10800044 	addi	r2,r2,1
  80bcd8:	44400115 	stw	r17,4(r8)
  80bcdc:	d8c01c15 	stw	r3,112(sp)
  80bce0:	d8801b15 	stw	r2,108(sp)
  80bce4:	010001c4 	movi	r4,7
  80bce8:	2080760e 	bge	r4,r2,80bec4 <___vfiprintf_internal_r+0x304>
  80bcec:	1803821e 	bne	r3,zero,80caf8 <___vfiprintf_internal_r+0xf38>
  80bcf0:	da802317 	ldw	r10,140(sp)
  80bcf4:	d8001b15 	stw	zero,108(sp)
  80bcf8:	d811883a 	mov	r8,sp
  80bcfc:	5455883a 	add	r10,r10,r17
  80bd00:	da802315 	stw	r10,140(sp)
  80bd04:	90800007 	ldb	r2,0(r18)
  80bd08:	10044626 	beq	r2,zero,80ce24 <___vfiprintf_internal_r+0x1264>
  80bd0c:	90c00047 	ldb	r3,1(r18)
  80bd10:	94000044 	addi	r16,r18,1
  80bd14:	d8001d85 	stb	zero,118(sp)
  80bd18:	0009883a 	mov	r4,zero
  80bd1c:	000f883a 	mov	r7,zero
  80bd20:	027fffc4 	movi	r9,-1
  80bd24:	0023883a 	mov	r17,zero
  80bd28:	0029883a 	mov	r20,zero
  80bd2c:	01401604 	movi	r5,88
  80bd30:	01800244 	movi	r6,9
  80bd34:	03400a84 	movi	r13,42
  80bd38:	03001b04 	movi	r12,108
  80bd3c:	84000044 	addi	r16,r16,1
  80bd40:	18bff804 	addi	r2,r3,-32
  80bd44:	28827336 	bltu	r5,r2,80c714 <___vfiprintf_internal_r+0xb54>
  80bd48:	100490ba 	slli	r2,r2,2
  80bd4c:	02802074 	movhi	r10,129
  80bd50:	52af5804 	addi	r10,r10,-17056
  80bd54:	1285883a 	add	r2,r2,r10
  80bd58:	10800017 	ldw	r2,0(r2)
  80bd5c:	1000683a 	jmp	r2
  80bd60:	0080c448 	cmpgei	r2,zero,785
  80bd64:	0080c714 	movui	r2,796
  80bd68:	0080c714 	movui	r2,796
  80bd6c:	0080c468 	cmpgeui	r2,zero,785
  80bd70:	0080c714 	movui	r2,796
  80bd74:	0080c714 	movui	r2,796
  80bd78:	0080c714 	movui	r2,796
  80bd7c:	0080c714 	movui	r2,796
  80bd80:	0080c714 	movui	r2,796
  80bd84:	0080c714 	movui	r2,796
  80bd88:	0080c650 	cmplti	r2,zero,793
  80bd8c:	0080c66c 	andhi	r2,zero,793
  80bd90:	0080c714 	movui	r2,796
  80bd94:	0080bf54 	movui	r2,765
  80bd98:	0080c67c 	xorhi	r2,zero,793
  80bd9c:	0080c714 	movui	r2,796
  80bda0:	0080c474 	movhi	r2,785
  80bda4:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bda8:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdac:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdb0:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdb4:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdb8:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdbc:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdc0:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdc4:	0080c480 	call	80c48 <__alt_mem_sdram-0x77f3b8>
  80bdc8:	0080c714 	movui	r2,796
  80bdcc:	0080c714 	movui	r2,796
  80bdd0:	0080c714 	movui	r2,796
  80bdd4:	0080c714 	movui	r2,796
  80bdd8:	0080c714 	movui	r2,796
  80bddc:	0080c714 	movui	r2,796
  80bde0:	0080c714 	movui	r2,796
  80bde4:	0080c714 	movui	r2,796
  80bde8:	0080c714 	movui	r2,796
  80bdec:	0080c714 	movui	r2,796
  80bdf0:	0080c4ac 	andhi	r2,zero,786
  80bdf4:	0080c714 	movui	r2,796
  80bdf8:	0080c714 	movui	r2,796
  80bdfc:	0080c714 	movui	r2,796
  80be00:	0080c714 	movui	r2,796
  80be04:	0080c714 	movui	r2,796
  80be08:	0080c714 	movui	r2,796
  80be0c:	0080c714 	movui	r2,796
  80be10:	0080c714 	movui	r2,796
  80be14:	0080c714 	movui	r2,796
  80be18:	0080c714 	movui	r2,796
  80be1c:	0080c4e4 	muli	r2,zero,787
  80be20:	0080c714 	movui	r2,796
  80be24:	0080c714 	movui	r2,796
  80be28:	0080c714 	movui	r2,796
  80be2c:	0080c714 	movui	r2,796
  80be30:	0080c714 	movui	r2,796
  80be34:	0080c53c 	xorhi	r2,zero,788
  80be38:	0080c714 	movui	r2,796
  80be3c:	0080c714 	movui	r2,796
  80be40:	0080c5ac 	andhi	r2,zero,790
  80be44:	0080c714 	movui	r2,796
  80be48:	0080c714 	movui	r2,796
  80be4c:	0080c714 	movui	r2,796
  80be50:	0080c714 	movui	r2,796
  80be54:	0080c714 	movui	r2,796
  80be58:	0080c714 	movui	r2,796
  80be5c:	0080c714 	movui	r2,796
  80be60:	0080c714 	movui	r2,796
  80be64:	0080c714 	movui	r2,796
  80be68:	0080c714 	movui	r2,796
  80be6c:	0080c358 	cmpnei	r2,zero,781
  80be70:	0080c384 	movi	r2,782
  80be74:	0080c714 	movui	r2,796
  80be78:	0080c714 	movui	r2,796
  80be7c:	0080c714 	movui	r2,796
  80be80:	0080c6bc 	xorhi	r2,zero,794
  80be84:	0080c384 	movi	r2,782
  80be88:	0080c714 	movui	r2,796
  80be8c:	0080c714 	movui	r2,796
  80be90:	0080c218 	cmpnei	r2,zero,776
  80be94:	0080c714 	movui	r2,796
  80be98:	0080c228 	cmpgeui	r2,zero,776
  80be9c:	0080c264 	muli	r2,zero,777
  80bea0:	0080bf60 	cmpeqi	r2,zero,765
  80bea4:	0080c20c 	andi	r2,zero,776
  80bea8:	0080c714 	movui	r2,796
  80beac:	0080c5e8 	cmpgeui	r2,zero,791
  80beb0:	0080c714 	movui	r2,796
  80beb4:	0080c640 	call	80c64 <__alt_mem_sdram-0x77f39c>
  80beb8:	0080c714 	movui	r2,796
  80bebc:	0080c714 	movui	r2,796
  80bec0:	0080c304 	movi	r2,780
  80bec4:	42000204 	addi	r8,r8,8
  80bec8:	da802317 	ldw	r10,140(sp)
  80becc:	5455883a 	add	r10,r10,r17
  80bed0:	da802315 	stw	r10,140(sp)
  80bed4:	003f8b06 	br	80bd04 <__alt_mem_onchip_mem+0xff78bd04>
  80bed8:	d9002017 	ldw	r4,128(sp)
  80bedc:	a00b883a 	mov	r5,r20
  80bee0:	08072e80 	call	8072e8 <__swsetup_r>
  80bee4:	1003b11e 	bne	r2,zero,80cdac <___vfiprintf_internal_r+0x11ec>
  80bee8:	a080030b 	ldhu	r2,12(r20)
  80beec:	00c00284 	movi	r3,10
  80bef0:	1080068c 	andi	r2,r2,26
  80bef4:	10ff541e 	bne	r2,r3,80bc48 <__alt_mem_onchip_mem+0xff78bc48>
  80bef8:	a080038f 	ldh	r2,14(r20)
  80befc:	103f5216 	blt	r2,zero,80bc48 <__alt_mem_onchip_mem+0xff78bc48>
  80bf00:	d9c02217 	ldw	r7,136(sp)
  80bf04:	d9002017 	ldw	r4,128(sp)
  80bf08:	e00d883a 	mov	r6,fp
  80bf0c:	a00b883a 	mov	r5,r20
  80bf10:	080d0380 	call	80d038 <__sbprintf>
  80bf14:	dfc03617 	ldw	ra,216(sp)
  80bf18:	df003517 	ldw	fp,212(sp)
  80bf1c:	ddc03417 	ldw	r23,208(sp)
  80bf20:	dd803317 	ldw	r22,204(sp)
  80bf24:	dd403217 	ldw	r21,200(sp)
  80bf28:	dd003117 	ldw	r20,196(sp)
  80bf2c:	dcc03017 	ldw	r19,192(sp)
  80bf30:	dc802f17 	ldw	r18,188(sp)
  80bf34:	dc402e17 	ldw	r17,184(sp)
  80bf38:	dc002d17 	ldw	r16,180(sp)
  80bf3c:	dec03704 	addi	sp,sp,220
  80bf40:	f800283a 	ret
  80bf44:	08093100 	call	809310 <__sinit>
  80bf48:	003f2f06 	br	80bc08 <__alt_mem_onchip_mem+0xff78bc08>
  80bf4c:	0463c83a 	sub	r17,zero,r17
  80bf50:	d8802215 	stw	r2,136(sp)
  80bf54:	a5000114 	ori	r20,r20,4
  80bf58:	80c00007 	ldb	r3,0(r16)
  80bf5c:	003f7706 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80bf60:	00800c04 	movi	r2,48
  80bf64:	da802217 	ldw	r10,136(sp)
  80bf68:	d8801d05 	stb	r2,116(sp)
  80bf6c:	00801e04 	movi	r2,120
  80bf70:	d8801d45 	stb	r2,117(sp)
  80bf74:	d8001d85 	stb	zero,118(sp)
  80bf78:	50c00104 	addi	r3,r10,4
  80bf7c:	54800017 	ldw	r18,0(r10)
  80bf80:	0027883a 	mov	r19,zero
  80bf84:	a0800094 	ori	r2,r20,2
  80bf88:	48030b16 	blt	r9,zero,80cbb8 <___vfiprintf_internal_r+0xff8>
  80bf8c:	00bfdfc4 	movi	r2,-129
  80bf90:	a096703a 	and	r11,r20,r2
  80bf94:	d8c02215 	stw	r3,136(sp)
  80bf98:	5d000094 	ori	r20,r11,2
  80bf9c:	90032b1e 	bne	r18,zero,80cc4c <___vfiprintf_internal_r+0x108c>
  80bfa0:	00802074 	movhi	r2,129
  80bfa4:	1093b604 	addi	r2,r2,20184
  80bfa8:	d8802615 	stw	r2,152(sp)
  80bfac:	0039883a 	mov	fp,zero
  80bfb0:	48017b1e 	bne	r9,zero,80c5a0 <___vfiprintf_internal_r+0x9e0>
  80bfb4:	0013883a 	mov	r9,zero
  80bfb8:	0027883a 	mov	r19,zero
  80bfbc:	dd401a04 	addi	r21,sp,104
  80bfc0:	4825883a 	mov	r18,r9
  80bfc4:	4cc0010e 	bge	r9,r19,80bfcc <___vfiprintf_internal_r+0x40c>
  80bfc8:	9825883a 	mov	r18,r19
  80bfcc:	e7003fcc 	andi	fp,fp,255
  80bfd0:	e700201c 	xori	fp,fp,128
  80bfd4:	e73fe004 	addi	fp,fp,-128
  80bfd8:	e0000126 	beq	fp,zero,80bfe0 <___vfiprintf_internal_r+0x420>
  80bfdc:	94800044 	addi	r18,r18,1
  80bfe0:	a380008c 	andi	r14,r20,2
  80bfe4:	70000126 	beq	r14,zero,80bfec <___vfiprintf_internal_r+0x42c>
  80bfe8:	94800084 	addi	r18,r18,2
  80bfec:	a700210c 	andi	fp,r20,132
  80bff0:	e001df1e 	bne	fp,zero,80c770 <___vfiprintf_internal_r+0xbb0>
  80bff4:	8c87c83a 	sub	r3,r17,r18
  80bff8:	00c1dd0e 	bge	zero,r3,80c770 <___vfiprintf_internal_r+0xbb0>
  80bffc:	01c00404 	movi	r7,16
  80c000:	d8801c17 	ldw	r2,112(sp)
  80c004:	38c3ad0e 	bge	r7,r3,80cebc <___vfiprintf_internal_r+0x12fc>
  80c008:	02802074 	movhi	r10,129
  80c00c:	52941a04 	addi	r10,r10,20584
  80c010:	dc002915 	stw	r16,164(sp)
  80c014:	d9801b17 	ldw	r6,108(sp)
  80c018:	da802415 	stw	r10,144(sp)
  80c01c:	03c001c4 	movi	r15,7
  80c020:	da402515 	stw	r9,148(sp)
  80c024:	db802815 	stw	r14,160(sp)
  80c028:	1821883a 	mov	r16,r3
  80c02c:	00000506 	br	80c044 <___vfiprintf_internal_r+0x484>
  80c030:	31400084 	addi	r5,r6,2
  80c034:	42000204 	addi	r8,r8,8
  80c038:	200d883a 	mov	r6,r4
  80c03c:	843ffc04 	addi	r16,r16,-16
  80c040:	3c000d0e 	bge	r7,r16,80c078 <___vfiprintf_internal_r+0x4b8>
  80c044:	10800404 	addi	r2,r2,16
  80c048:	31000044 	addi	r4,r6,1
  80c04c:	45800015 	stw	r22,0(r8)
  80c050:	41c00115 	stw	r7,4(r8)
  80c054:	d8801c15 	stw	r2,112(sp)
  80c058:	d9001b15 	stw	r4,108(sp)
  80c05c:	793ff40e 	bge	r15,r4,80c030 <__alt_mem_onchip_mem+0xff78c030>
  80c060:	1001b51e 	bne	r2,zero,80c738 <___vfiprintf_internal_r+0xb78>
  80c064:	843ffc04 	addi	r16,r16,-16
  80c068:	000d883a 	mov	r6,zero
  80c06c:	01400044 	movi	r5,1
  80c070:	d811883a 	mov	r8,sp
  80c074:	3c3ff316 	blt	r7,r16,80c044 <__alt_mem_onchip_mem+0xff78c044>
  80c078:	8007883a 	mov	r3,r16
  80c07c:	da402517 	ldw	r9,148(sp)
  80c080:	db802817 	ldw	r14,160(sp)
  80c084:	dc002917 	ldw	r16,164(sp)
  80c088:	da802417 	ldw	r10,144(sp)
  80c08c:	1885883a 	add	r2,r3,r2
  80c090:	40c00115 	stw	r3,4(r8)
  80c094:	42800015 	stw	r10,0(r8)
  80c098:	d8801c15 	stw	r2,112(sp)
  80c09c:	d9401b15 	stw	r5,108(sp)
  80c0a0:	00c001c4 	movi	r3,7
  80c0a4:	19426016 	blt	r3,r5,80ca28 <___vfiprintf_internal_r+0xe68>
  80c0a8:	d8c01d87 	ldb	r3,118(sp)
  80c0ac:	42000204 	addi	r8,r8,8
  80c0b0:	29000044 	addi	r4,r5,1
  80c0b4:	1801b31e 	bne	r3,zero,80c784 <___vfiprintf_internal_r+0xbc4>
  80c0b8:	7001c026 	beq	r14,zero,80c7bc <___vfiprintf_internal_r+0xbfc>
  80c0bc:	d8c01d04 	addi	r3,sp,116
  80c0c0:	10800084 	addi	r2,r2,2
  80c0c4:	40c00015 	stw	r3,0(r8)
  80c0c8:	00c00084 	movi	r3,2
  80c0cc:	40c00115 	stw	r3,4(r8)
  80c0d0:	d8801c15 	stw	r2,112(sp)
  80c0d4:	d9001b15 	stw	r4,108(sp)
  80c0d8:	00c001c4 	movi	r3,7
  80c0dc:	1902650e 	bge	r3,r4,80ca74 <___vfiprintf_internal_r+0xeb4>
  80c0e0:	10029a1e 	bne	r2,zero,80cb4c <___vfiprintf_internal_r+0xf8c>
  80c0e4:	00c02004 	movi	r3,128
  80c0e8:	01000044 	movi	r4,1
  80c0ec:	000b883a 	mov	r5,zero
  80c0f0:	d811883a 	mov	r8,sp
  80c0f4:	e0c1b31e 	bne	fp,r3,80c7c4 <___vfiprintf_internal_r+0xc04>
  80c0f8:	8cb9c83a 	sub	fp,r17,r18
  80c0fc:	0701b10e 	bge	zero,fp,80c7c4 <___vfiprintf_internal_r+0xc04>
  80c100:	01c00404 	movi	r7,16
  80c104:	3f03890e 	bge	r7,fp,80cf2c <___vfiprintf_internal_r+0x136c>
  80c108:	00c02074 	movhi	r3,129
  80c10c:	18d41604 	addi	r3,r3,20568
  80c110:	d8c02415 	stw	r3,144(sp)
  80c114:	8007883a 	mov	r3,r16
  80c118:	034001c4 	movi	r13,7
  80c11c:	e021883a 	mov	r16,fp
  80c120:	da402515 	stw	r9,148(sp)
  80c124:	1839883a 	mov	fp,r3
  80c128:	00000506 	br	80c140 <___vfiprintf_internal_r+0x580>
  80c12c:	29800084 	addi	r6,r5,2
  80c130:	42000204 	addi	r8,r8,8
  80c134:	180b883a 	mov	r5,r3
  80c138:	843ffc04 	addi	r16,r16,-16
  80c13c:	3c000d0e 	bge	r7,r16,80c174 <___vfiprintf_internal_r+0x5b4>
  80c140:	10800404 	addi	r2,r2,16
  80c144:	28c00044 	addi	r3,r5,1
  80c148:	45c00015 	stw	r23,0(r8)
  80c14c:	41c00115 	stw	r7,4(r8)
  80c150:	d8801c15 	stw	r2,112(sp)
  80c154:	d8c01b15 	stw	r3,108(sp)
  80c158:	68fff40e 	bge	r13,r3,80c12c <__alt_mem_onchip_mem+0xff78c12c>
  80c15c:	1002241e 	bne	r2,zero,80c9f0 <___vfiprintf_internal_r+0xe30>
  80c160:	843ffc04 	addi	r16,r16,-16
  80c164:	01800044 	movi	r6,1
  80c168:	000b883a 	mov	r5,zero
  80c16c:	d811883a 	mov	r8,sp
  80c170:	3c3ff316 	blt	r7,r16,80c140 <__alt_mem_onchip_mem+0xff78c140>
  80c174:	da402517 	ldw	r9,148(sp)
  80c178:	e007883a 	mov	r3,fp
  80c17c:	8039883a 	mov	fp,r16
  80c180:	1821883a 	mov	r16,r3
  80c184:	d8c02417 	ldw	r3,144(sp)
  80c188:	1705883a 	add	r2,r2,fp
  80c18c:	47000115 	stw	fp,4(r8)
  80c190:	40c00015 	stw	r3,0(r8)
  80c194:	d8801c15 	stw	r2,112(sp)
  80c198:	d9801b15 	stw	r6,108(sp)
  80c19c:	00c001c4 	movi	r3,7
  80c1a0:	19827616 	blt	r3,r6,80cb7c <___vfiprintf_internal_r+0xfbc>
  80c1a4:	4cf9c83a 	sub	fp,r9,r19
  80c1a8:	42000204 	addi	r8,r8,8
  80c1ac:	31000044 	addi	r4,r6,1
  80c1b0:	300b883a 	mov	r5,r6
  80c1b4:	07018516 	blt	zero,fp,80c7cc <___vfiprintf_internal_r+0xc0c>
  80c1b8:	9885883a 	add	r2,r19,r2
  80c1bc:	45400015 	stw	r21,0(r8)
  80c1c0:	44c00115 	stw	r19,4(r8)
  80c1c4:	d8801c15 	stw	r2,112(sp)
  80c1c8:	d9001b15 	stw	r4,108(sp)
  80c1cc:	00c001c4 	movi	r3,7
  80c1d0:	1901dd0e 	bge	r3,r4,80c948 <___vfiprintf_internal_r+0xd88>
  80c1d4:	1002401e 	bne	r2,zero,80cad8 <___vfiprintf_internal_r+0xf18>
  80c1d8:	d8001b15 	stw	zero,108(sp)
  80c1dc:	a2c0010c 	andi	r11,r20,4
  80c1e0:	58000226 	beq	r11,zero,80c1ec <___vfiprintf_internal_r+0x62c>
  80c1e4:	8ca7c83a 	sub	r19,r17,r18
  80c1e8:	04c2f216 	blt	zero,r19,80cdb4 <___vfiprintf_internal_r+0x11f4>
  80c1ec:	8c80010e 	bge	r17,r18,80c1f4 <___vfiprintf_internal_r+0x634>
  80c1f0:	9023883a 	mov	r17,r18
  80c1f4:	da802317 	ldw	r10,140(sp)
  80c1f8:	5455883a 	add	r10,r10,r17
  80c1fc:	da802315 	stw	r10,140(sp)
  80c200:	d8001b15 	stw	zero,108(sp)
  80c204:	d811883a 	mov	r8,sp
  80c208:	003ea206 	br	80bc94 <__alt_mem_onchip_mem+0xff78bc94>
  80c20c:	a5000814 	ori	r20,r20,32
  80c210:	80c00007 	ldb	r3,0(r16)
  80c214:	003ec906 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c218:	80c00007 	ldb	r3,0(r16)
  80c21c:	1b030926 	beq	r3,r12,80ce44 <___vfiprintf_internal_r+0x1284>
  80c220:	a5000414 	ori	r20,r20,16
  80c224:	003ec506 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c228:	21003fcc 	andi	r4,r4,255
  80c22c:	20035e1e 	bne	r4,zero,80cfa8 <___vfiprintf_internal_r+0x13e8>
  80c230:	a080080c 	andi	r2,r20,32
  80c234:	1002a526 	beq	r2,zero,80cccc <___vfiprintf_internal_r+0x110c>
  80c238:	da802217 	ldw	r10,136(sp)
  80c23c:	50800017 	ldw	r2,0(r10)
  80c240:	da802317 	ldw	r10,140(sp)
  80c244:	5007d7fa 	srai	r3,r10,31
  80c248:	da802217 	ldw	r10,136(sp)
  80c24c:	10c00115 	stw	r3,4(r2)
  80c250:	52800104 	addi	r10,r10,4
  80c254:	da802215 	stw	r10,136(sp)
  80c258:	da802317 	ldw	r10,140(sp)
  80c25c:	12800015 	stw	r10,0(r2)
  80c260:	003e8c06 	br	80bc94 <__alt_mem_onchip_mem+0xff78bc94>
  80c264:	21003fcc 	andi	r4,r4,255
  80c268:	2003511e 	bne	r4,zero,80cfb0 <___vfiprintf_internal_r+0x13f0>
  80c26c:	a080080c 	andi	r2,r20,32
  80c270:	1000a126 	beq	r2,zero,80c4f8 <___vfiprintf_internal_r+0x938>
  80c274:	da802217 	ldw	r10,136(sp)
  80c278:	d8001d85 	stb	zero,118(sp)
  80c27c:	50800204 	addi	r2,r10,8
  80c280:	54800017 	ldw	r18,0(r10)
  80c284:	54c00117 	ldw	r19,4(r10)
  80c288:	4802b416 	blt	r9,zero,80cd5c <___vfiprintf_internal_r+0x119c>
  80c28c:	013fdfc4 	movi	r4,-129
  80c290:	94c6b03a 	or	r3,r18,r19
  80c294:	d8802215 	stw	r2,136(sp)
  80c298:	a128703a 	and	r20,r20,r4
  80c29c:	1800a226 	beq	r3,zero,80c528 <___vfiprintf_internal_r+0x968>
  80c2a0:	0039883a 	mov	fp,zero
  80c2a4:	dd401a04 	addi	r21,sp,104
  80c2a8:	9006d0fa 	srli	r3,r18,3
  80c2ac:	9808977a 	slli	r4,r19,29
  80c2b0:	9826d0fa 	srli	r19,r19,3
  80c2b4:	948001cc 	andi	r18,r18,7
  80c2b8:	90800c04 	addi	r2,r18,48
  80c2bc:	ad7fffc4 	addi	r21,r21,-1
  80c2c0:	20e4b03a 	or	r18,r4,r3
  80c2c4:	a8800005 	stb	r2,0(r21)
  80c2c8:	94c6b03a 	or	r3,r18,r19
  80c2cc:	183ff61e 	bne	r3,zero,80c2a8 <__alt_mem_onchip_mem+0xff78c2a8>
  80c2d0:	a0c0004c 	andi	r3,r20,1
  80c2d4:	18005926 	beq	r3,zero,80c43c <___vfiprintf_internal_r+0x87c>
  80c2d8:	10803fcc 	andi	r2,r2,255
  80c2dc:	1080201c 	xori	r2,r2,128
  80c2e0:	10bfe004 	addi	r2,r2,-128
  80c2e4:	00c00c04 	movi	r3,48
  80c2e8:	10c05426 	beq	r2,r3,80c43c <___vfiprintf_internal_r+0x87c>
  80c2ec:	da801e17 	ldw	r10,120(sp)
  80c2f0:	a8bfffc4 	addi	r2,r21,-1
  80c2f4:	a8ffffc5 	stb	r3,-1(r21)
  80c2f8:	50a7c83a 	sub	r19,r10,r2
  80c2fc:	102b883a 	mov	r21,r2
  80c300:	003f2f06 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80c304:	21003fcc 	andi	r4,r4,255
  80c308:	2003421e 	bne	r4,zero,80d014 <___vfiprintf_internal_r+0x1454>
  80c30c:	00802074 	movhi	r2,129
  80c310:	1093b604 	addi	r2,r2,20184
  80c314:	d8802615 	stw	r2,152(sp)
  80c318:	a080080c 	andi	r2,r20,32
  80c31c:	1000aa26 	beq	r2,zero,80c5c8 <___vfiprintf_internal_r+0xa08>
  80c320:	da802217 	ldw	r10,136(sp)
  80c324:	54800017 	ldw	r18,0(r10)
  80c328:	54c00117 	ldw	r19,4(r10)
  80c32c:	52800204 	addi	r10,r10,8
  80c330:	da802215 	stw	r10,136(sp)
  80c334:	a080004c 	andi	r2,r20,1
  80c338:	1001d226 	beq	r2,zero,80ca84 <___vfiprintf_internal_r+0xec4>
  80c33c:	94c4b03a 	or	r2,r18,r19
  80c340:	1002351e 	bne	r2,zero,80cc18 <___vfiprintf_internal_r+0x1058>
  80c344:	d8001d85 	stb	zero,118(sp)
  80c348:	48022216 	blt	r9,zero,80cbd4 <___vfiprintf_internal_r+0x1014>
  80c34c:	00bfdfc4 	movi	r2,-129
  80c350:	a0a8703a 	and	r20,r20,r2
  80c354:	003f1506 	br	80bfac <__alt_mem_onchip_mem+0xff78bfac>
  80c358:	da802217 	ldw	r10,136(sp)
  80c35c:	04800044 	movi	r18,1
  80c360:	d8001d85 	stb	zero,118(sp)
  80c364:	50800017 	ldw	r2,0(r10)
  80c368:	52800104 	addi	r10,r10,4
  80c36c:	da802215 	stw	r10,136(sp)
  80c370:	d8801005 	stb	r2,64(sp)
  80c374:	9027883a 	mov	r19,r18
  80c378:	dd401004 	addi	r21,sp,64
  80c37c:	0013883a 	mov	r9,zero
  80c380:	003f1706 	br	80bfe0 <__alt_mem_onchip_mem+0xff78bfe0>
  80c384:	21003fcc 	andi	r4,r4,255
  80c388:	2003201e 	bne	r4,zero,80d00c <___vfiprintf_internal_r+0x144c>
  80c38c:	a080080c 	andi	r2,r20,32
  80c390:	10004b26 	beq	r2,zero,80c4c0 <___vfiprintf_internal_r+0x900>
  80c394:	da802217 	ldw	r10,136(sp)
  80c398:	50800117 	ldw	r2,4(r10)
  80c39c:	54800017 	ldw	r18,0(r10)
  80c3a0:	52800204 	addi	r10,r10,8
  80c3a4:	da802215 	stw	r10,136(sp)
  80c3a8:	1027883a 	mov	r19,r2
  80c3ac:	10022c16 	blt	r2,zero,80cc60 <___vfiprintf_internal_r+0x10a0>
  80c3b0:	df001d83 	ldbu	fp,118(sp)
  80c3b4:	48007216 	blt	r9,zero,80c580 <___vfiprintf_internal_r+0x9c0>
  80c3b8:	00ffdfc4 	movi	r3,-129
  80c3bc:	94c4b03a 	or	r2,r18,r19
  80c3c0:	a0e8703a 	and	r20,r20,r3
  80c3c4:	1000cc26 	beq	r2,zero,80c6f8 <___vfiprintf_internal_r+0xb38>
  80c3c8:	98021026 	beq	r19,zero,80cc0c <___vfiprintf_internal_r+0x104c>
  80c3cc:	dc402415 	stw	r17,144(sp)
  80c3d0:	dc002515 	stw	r16,148(sp)
  80c3d4:	9823883a 	mov	r17,r19
  80c3d8:	9021883a 	mov	r16,r18
  80c3dc:	dd401a04 	addi	r21,sp,104
  80c3e0:	4825883a 	mov	r18,r9
  80c3e4:	4027883a 	mov	r19,r8
  80c3e8:	8009883a 	mov	r4,r16
  80c3ec:	880b883a 	mov	r5,r17
  80c3f0:	01800284 	movi	r6,10
  80c3f4:	000f883a 	mov	r7,zero
  80c3f8:	080dd7c0 	call	80dd7c <__umoddi3>
  80c3fc:	10800c04 	addi	r2,r2,48
  80c400:	ad7fffc4 	addi	r21,r21,-1
  80c404:	8009883a 	mov	r4,r16
  80c408:	880b883a 	mov	r5,r17
  80c40c:	a8800005 	stb	r2,0(r21)
  80c410:	01800284 	movi	r6,10
  80c414:	000f883a 	mov	r7,zero
  80c418:	080d8040 	call	80d804 <__udivdi3>
  80c41c:	1021883a 	mov	r16,r2
  80c420:	10c4b03a 	or	r2,r2,r3
  80c424:	1823883a 	mov	r17,r3
  80c428:	103fef1e 	bne	r2,zero,80c3e8 <__alt_mem_onchip_mem+0xff78c3e8>
  80c42c:	dc402417 	ldw	r17,144(sp)
  80c430:	dc002517 	ldw	r16,148(sp)
  80c434:	9013883a 	mov	r9,r18
  80c438:	9811883a 	mov	r8,r19
  80c43c:	da801e17 	ldw	r10,120(sp)
  80c440:	5567c83a 	sub	r19,r10,r21
  80c444:	003ede06 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80c448:	38803fcc 	andi	r2,r7,255
  80c44c:	1080201c 	xori	r2,r2,128
  80c450:	10bfe004 	addi	r2,r2,-128
  80c454:	1002371e 	bne	r2,zero,80cd34 <___vfiprintf_internal_r+0x1174>
  80c458:	01000044 	movi	r4,1
  80c45c:	01c00804 	movi	r7,32
  80c460:	80c00007 	ldb	r3,0(r16)
  80c464:	003e3506 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c468:	a5000054 	ori	r20,r20,1
  80c46c:	80c00007 	ldb	r3,0(r16)
  80c470:	003e3206 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c474:	a5002014 	ori	r20,r20,128
  80c478:	80c00007 	ldb	r3,0(r16)
  80c47c:	003e2f06 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c480:	8015883a 	mov	r10,r16
  80c484:	0023883a 	mov	r17,zero
  80c488:	18bff404 	addi	r2,r3,-48
  80c48c:	50c00007 	ldb	r3,0(r10)
  80c490:	8c4002a4 	muli	r17,r17,10
  80c494:	84000044 	addi	r16,r16,1
  80c498:	8015883a 	mov	r10,r16
  80c49c:	1463883a 	add	r17,r2,r17
  80c4a0:	18bff404 	addi	r2,r3,-48
  80c4a4:	30bff92e 	bgeu	r6,r2,80c48c <__alt_mem_onchip_mem+0xff78c48c>
  80c4a8:	003e2506 	br	80bd40 <__alt_mem_onchip_mem+0xff78bd40>
  80c4ac:	21003fcc 	andi	r4,r4,255
  80c4b0:	2002d41e 	bne	r4,zero,80d004 <___vfiprintf_internal_r+0x1444>
  80c4b4:	a5000414 	ori	r20,r20,16
  80c4b8:	a080080c 	andi	r2,r20,32
  80c4bc:	103fb51e 	bne	r2,zero,80c394 <__alt_mem_onchip_mem+0xff78c394>
  80c4c0:	a080040c 	andi	r2,r20,16
  80c4c4:	1001f826 	beq	r2,zero,80cca8 <___vfiprintf_internal_r+0x10e8>
  80c4c8:	da802217 	ldw	r10,136(sp)
  80c4cc:	54800017 	ldw	r18,0(r10)
  80c4d0:	52800104 	addi	r10,r10,4
  80c4d4:	da802215 	stw	r10,136(sp)
  80c4d8:	9027d7fa 	srai	r19,r18,31
  80c4dc:	9805883a 	mov	r2,r19
  80c4e0:	003fb206 	br	80c3ac <__alt_mem_onchip_mem+0xff78c3ac>
  80c4e4:	21003fcc 	andi	r4,r4,255
  80c4e8:	2002c41e 	bne	r4,zero,80cffc <___vfiprintf_internal_r+0x143c>
  80c4ec:	a5000414 	ori	r20,r20,16
  80c4f0:	a080080c 	andi	r2,r20,32
  80c4f4:	103f5f1e 	bne	r2,zero,80c274 <__alt_mem_onchip_mem+0xff78c274>
  80c4f8:	a080040c 	andi	r2,r20,16
  80c4fc:	10020f26 	beq	r2,zero,80cd3c <___vfiprintf_internal_r+0x117c>
  80c500:	da802217 	ldw	r10,136(sp)
  80c504:	d8001d85 	stb	zero,118(sp)
  80c508:	0027883a 	mov	r19,zero
  80c50c:	50800104 	addi	r2,r10,4
  80c510:	54800017 	ldw	r18,0(r10)
  80c514:	48021116 	blt	r9,zero,80cd5c <___vfiprintf_internal_r+0x119c>
  80c518:	00ffdfc4 	movi	r3,-129
  80c51c:	d8802215 	stw	r2,136(sp)
  80c520:	a0e8703a 	and	r20,r20,r3
  80c524:	903f5e1e 	bne	r18,zero,80c2a0 <__alt_mem_onchip_mem+0xff78c2a0>
  80c528:	0039883a 	mov	fp,zero
  80c52c:	4802a626 	beq	r9,zero,80cfc8 <___vfiprintf_internal_r+0x1408>
  80c530:	0025883a 	mov	r18,zero
  80c534:	0027883a 	mov	r19,zero
  80c538:	003f5a06 	br	80c2a4 <__alt_mem_onchip_mem+0xff78c2a4>
  80c53c:	21003fcc 	andi	r4,r4,255
  80c540:	20029f1e 	bne	r4,zero,80cfc0 <___vfiprintf_internal_r+0x1400>
  80c544:	a5000414 	ori	r20,r20,16
  80c548:	a080080c 	andi	r2,r20,32
  80c54c:	10005e1e 	bne	r2,zero,80c6c8 <___vfiprintf_internal_r+0xb08>
  80c550:	a080040c 	andi	r2,r20,16
  80c554:	1001a21e 	bne	r2,zero,80cbe0 <___vfiprintf_internal_r+0x1020>
  80c558:	a080100c 	andi	r2,r20,64
  80c55c:	d8001d85 	stb	zero,118(sp)
  80c560:	da802217 	ldw	r10,136(sp)
  80c564:	1002231e 	bne	r2,zero,80cdf4 <___vfiprintf_internal_r+0x1234>
  80c568:	50800104 	addi	r2,r10,4
  80c56c:	54800017 	ldw	r18,0(r10)
  80c570:	0027883a 	mov	r19,zero
  80c574:	4801a00e 	bge	r9,zero,80cbf8 <___vfiprintf_internal_r+0x1038>
  80c578:	d8802215 	stw	r2,136(sp)
  80c57c:	0039883a 	mov	fp,zero
  80c580:	94c4b03a 	or	r2,r18,r19
  80c584:	103f901e 	bne	r2,zero,80c3c8 <__alt_mem_onchip_mem+0xff78c3c8>
  80c588:	00800044 	movi	r2,1
  80c58c:	10803fcc 	andi	r2,r2,255
  80c590:	00c00044 	movi	r3,1
  80c594:	10c05926 	beq	r2,r3,80c6fc <___vfiprintf_internal_r+0xb3c>
  80c598:	00c00084 	movi	r3,2
  80c59c:	10ffe41e 	bne	r2,r3,80c530 <__alt_mem_onchip_mem+0xff78c530>
  80c5a0:	0025883a 	mov	r18,zero
  80c5a4:	0027883a 	mov	r19,zero
  80c5a8:	00013d06 	br	80caa0 <___vfiprintf_internal_r+0xee0>
  80c5ac:	21003fcc 	andi	r4,r4,255
  80c5b0:	2002811e 	bne	r4,zero,80cfb8 <___vfiprintf_internal_r+0x13f8>
  80c5b4:	00802074 	movhi	r2,129
  80c5b8:	1093b104 	addi	r2,r2,20164
  80c5bc:	d8802615 	stw	r2,152(sp)
  80c5c0:	a080080c 	andi	r2,r20,32
  80c5c4:	103f561e 	bne	r2,zero,80c320 <__alt_mem_onchip_mem+0xff78c320>
  80c5c8:	a080040c 	andi	r2,r20,16
  80c5cc:	1001d126 	beq	r2,zero,80cd14 <___vfiprintf_internal_r+0x1154>
  80c5d0:	da802217 	ldw	r10,136(sp)
  80c5d4:	0027883a 	mov	r19,zero
  80c5d8:	54800017 	ldw	r18,0(r10)
  80c5dc:	52800104 	addi	r10,r10,4
  80c5e0:	da802215 	stw	r10,136(sp)
  80c5e4:	003f5306 	br	80c334 <__alt_mem_onchip_mem+0xff78c334>
  80c5e8:	da802217 	ldw	r10,136(sp)
  80c5ec:	d8001d85 	stb	zero,118(sp)
  80c5f0:	55400017 	ldw	r21,0(r10)
  80c5f4:	50c00104 	addi	r3,r10,4
  80c5f8:	a8024226 	beq	r21,zero,80cf04 <___vfiprintf_internal_r+0x1344>
  80c5fc:	48021816 	blt	r9,zero,80ce60 <___vfiprintf_internal_r+0x12a0>
  80c600:	480d883a 	mov	r6,r9
  80c604:	000b883a 	mov	r5,zero
  80c608:	a809883a 	mov	r4,r21
  80c60c:	d8c02a15 	stw	r3,168(sp)
  80c610:	da002b15 	stw	r8,172(sp)
  80c614:	da402c15 	stw	r9,176(sp)
  80c618:	080a0140 	call	80a014 <memchr>
  80c61c:	d8c02a17 	ldw	r3,168(sp)
  80c620:	da002b17 	ldw	r8,172(sp)
  80c624:	da402c17 	ldw	r9,176(sp)
  80c628:	10024826 	beq	r2,zero,80cf4c <___vfiprintf_internal_r+0x138c>
  80c62c:	1567c83a 	sub	r19,r2,r21
  80c630:	df001d83 	ldbu	fp,118(sp)
  80c634:	d8c02215 	stw	r3,136(sp)
  80c638:	0013883a 	mov	r9,zero
  80c63c:	003e6006 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80c640:	21003fcc 	andi	r4,r4,255
  80c644:	203fc026 	beq	r4,zero,80c548 <__alt_mem_onchip_mem+0xff78c548>
  80c648:	d9c01d85 	stb	r7,118(sp)
  80c64c:	003fbe06 	br	80c548 <__alt_mem_onchip_mem+0xff78c548>
  80c650:	da802217 	ldw	r10,136(sp)
  80c654:	54400017 	ldw	r17,0(r10)
  80c658:	50800104 	addi	r2,r10,4
  80c65c:	883e3b16 	blt	r17,zero,80bf4c <__alt_mem_onchip_mem+0xff78bf4c>
  80c660:	d8802215 	stw	r2,136(sp)
  80c664:	80c00007 	ldb	r3,0(r16)
  80c668:	003db406 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c66c:	01000044 	movi	r4,1
  80c670:	01c00ac4 	movi	r7,43
  80c674:	80c00007 	ldb	r3,0(r16)
  80c678:	003db006 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c67c:	80c00007 	ldb	r3,0(r16)
  80c680:	82800044 	addi	r10,r16,1
  80c684:	1b423c26 	beq	r3,r13,80cf78 <___vfiprintf_internal_r+0x13b8>
  80c688:	18bff404 	addi	r2,r3,-48
  80c68c:	0013883a 	mov	r9,zero
  80c690:	30822b36 	bltu	r6,r2,80cf40 <___vfiprintf_internal_r+0x1380>
  80c694:	50c00007 	ldb	r3,0(r10)
  80c698:	4a4002a4 	muli	r9,r9,10
  80c69c:	54000044 	addi	r16,r10,1
  80c6a0:	8015883a 	mov	r10,r16
  80c6a4:	4893883a 	add	r9,r9,r2
  80c6a8:	18bff404 	addi	r2,r3,-48
  80c6ac:	30bff92e 	bgeu	r6,r2,80c694 <__alt_mem_onchip_mem+0xff78c694>
  80c6b0:	483da30e 	bge	r9,zero,80bd40 <__alt_mem_onchip_mem+0xff78bd40>
  80c6b4:	027fffc4 	movi	r9,-1
  80c6b8:	003da106 	br	80bd40 <__alt_mem_onchip_mem+0xff78bd40>
  80c6bc:	a5001014 	ori	r20,r20,64
  80c6c0:	80c00007 	ldb	r3,0(r16)
  80c6c4:	003d9d06 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80c6c8:	da802217 	ldw	r10,136(sp)
  80c6cc:	d8001d85 	stb	zero,118(sp)
  80c6d0:	50c00204 	addi	r3,r10,8
  80c6d4:	54800017 	ldw	r18,0(r10)
  80c6d8:	54c00117 	ldw	r19,4(r10)
  80c6dc:	4801ca16 	blt	r9,zero,80ce08 <___vfiprintf_internal_r+0x1248>
  80c6e0:	013fdfc4 	movi	r4,-129
  80c6e4:	94c4b03a 	or	r2,r18,r19
  80c6e8:	d8c02215 	stw	r3,136(sp)
  80c6ec:	a128703a 	and	r20,r20,r4
  80c6f0:	0039883a 	mov	fp,zero
  80c6f4:	103f341e 	bne	r2,zero,80c3c8 <__alt_mem_onchip_mem+0xff78c3c8>
  80c6f8:	483e2e26 	beq	r9,zero,80bfb4 <__alt_mem_onchip_mem+0xff78bfb4>
  80c6fc:	0025883a 	mov	r18,zero
  80c700:	94800c04 	addi	r18,r18,48
  80c704:	dc8019c5 	stb	r18,103(sp)
  80c708:	dcc02717 	ldw	r19,156(sp)
  80c70c:	dd4019c4 	addi	r21,sp,103
  80c710:	003e2b06 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80c714:	21003fcc 	andi	r4,r4,255
  80c718:	2002361e 	bne	r4,zero,80cff4 <___vfiprintf_internal_r+0x1434>
  80c71c:	1801c126 	beq	r3,zero,80ce24 <___vfiprintf_internal_r+0x1264>
  80c720:	04800044 	movi	r18,1
  80c724:	d8c01005 	stb	r3,64(sp)
  80c728:	d8001d85 	stb	zero,118(sp)
  80c72c:	9027883a 	mov	r19,r18
  80c730:	dd401004 	addi	r21,sp,64
  80c734:	003f1106 	br	80c37c <__alt_mem_onchip_mem+0xff78c37c>
  80c738:	d9402117 	ldw	r5,132(sp)
  80c73c:	d9002017 	ldw	r4,128(sp)
  80c740:	d9801a04 	addi	r6,sp,104
  80c744:	d9c02b15 	stw	r7,172(sp)
  80c748:	dbc02a15 	stw	r15,168(sp)
  80c74c:	080baac0 	call	80baac <__sprint_r.part.0>
  80c750:	d9c02b17 	ldw	r7,172(sp)
  80c754:	dbc02a17 	ldw	r15,168(sp)
  80c758:	10006d1e 	bne	r2,zero,80c910 <___vfiprintf_internal_r+0xd50>
  80c75c:	d9801b17 	ldw	r6,108(sp)
  80c760:	d8801c17 	ldw	r2,112(sp)
  80c764:	d811883a 	mov	r8,sp
  80c768:	31400044 	addi	r5,r6,1
  80c76c:	003e3306 	br	80c03c <__alt_mem_onchip_mem+0xff78c03c>
  80c770:	d9401b17 	ldw	r5,108(sp)
  80c774:	d8801c17 	ldw	r2,112(sp)
  80c778:	29000044 	addi	r4,r5,1
  80c77c:	d8c01d87 	ldb	r3,118(sp)
  80c780:	183e4d26 	beq	r3,zero,80c0b8 <__alt_mem_onchip_mem+0xff78c0b8>
  80c784:	00c00044 	movi	r3,1
  80c788:	d9401d84 	addi	r5,sp,118
  80c78c:	10c5883a 	add	r2,r2,r3
  80c790:	41400015 	stw	r5,0(r8)
  80c794:	40c00115 	stw	r3,4(r8)
  80c798:	d8801c15 	stw	r2,112(sp)
  80c79c:	d9001b15 	stw	r4,108(sp)
  80c7a0:	014001c4 	movi	r5,7
  80c7a4:	2900a90e 	bge	r5,r4,80ca4c <___vfiprintf_internal_r+0xe8c>
  80c7a8:	1000da1e 	bne	r2,zero,80cb14 <___vfiprintf_internal_r+0xf54>
  80c7ac:	7000ab1e 	bne	r14,zero,80ca5c <___vfiprintf_internal_r+0xe9c>
  80c7b0:	000b883a 	mov	r5,zero
  80c7b4:	1809883a 	mov	r4,r3
  80c7b8:	d811883a 	mov	r8,sp
  80c7bc:	00c02004 	movi	r3,128
  80c7c0:	e0fe4d26 	beq	fp,r3,80c0f8 <__alt_mem_onchip_mem+0xff78c0f8>
  80c7c4:	4cf9c83a 	sub	fp,r9,r19
  80c7c8:	073e7b0e 	bge	zero,fp,80c1b8 <__alt_mem_onchip_mem+0xff78c1b8>
  80c7cc:	01c00404 	movi	r7,16
  80c7d0:	3f01900e 	bge	r7,fp,80ce14 <___vfiprintf_internal_r+0x1254>
  80c7d4:	00c02074 	movhi	r3,129
  80c7d8:	18d41604 	addi	r3,r3,20568
  80c7dc:	d8c02415 	stw	r3,144(sp)
  80c7e0:	034001c4 	movi	r13,7
  80c7e4:	00000506 	br	80c7fc <___vfiprintf_internal_r+0xc3c>
  80c7e8:	29000084 	addi	r4,r5,2
  80c7ec:	42000204 	addi	r8,r8,8
  80c7f0:	180b883a 	mov	r5,r3
  80c7f4:	e73ffc04 	addi	fp,fp,-16
  80c7f8:	3f000d0e 	bge	r7,fp,80c830 <___vfiprintf_internal_r+0xc70>
  80c7fc:	10800404 	addi	r2,r2,16
  80c800:	28c00044 	addi	r3,r5,1
  80c804:	45c00015 	stw	r23,0(r8)
  80c808:	41c00115 	stw	r7,4(r8)
  80c80c:	d8801c15 	stw	r2,112(sp)
  80c810:	d8c01b15 	stw	r3,108(sp)
  80c814:	68fff40e 	bge	r13,r3,80c7e8 <__alt_mem_onchip_mem+0xff78c7e8>
  80c818:	1000101e 	bne	r2,zero,80c85c <___vfiprintf_internal_r+0xc9c>
  80c81c:	e73ffc04 	addi	fp,fp,-16
  80c820:	01000044 	movi	r4,1
  80c824:	000b883a 	mov	r5,zero
  80c828:	d811883a 	mov	r8,sp
  80c82c:	3f3ff316 	blt	r7,fp,80c7fc <__alt_mem_onchip_mem+0xff78c7fc>
  80c830:	da802417 	ldw	r10,144(sp)
  80c834:	1705883a 	add	r2,r2,fp
  80c838:	47000115 	stw	fp,4(r8)
  80c83c:	42800015 	stw	r10,0(r8)
  80c840:	d8801c15 	stw	r2,112(sp)
  80c844:	d9001b15 	stw	r4,108(sp)
  80c848:	00c001c4 	movi	r3,7
  80c84c:	19003616 	blt	r3,r4,80c928 <___vfiprintf_internal_r+0xd68>
  80c850:	42000204 	addi	r8,r8,8
  80c854:	21000044 	addi	r4,r4,1
  80c858:	003e5706 	br	80c1b8 <__alt_mem_onchip_mem+0xff78c1b8>
  80c85c:	d9402117 	ldw	r5,132(sp)
  80c860:	d9002017 	ldw	r4,128(sp)
  80c864:	d9801a04 	addi	r6,sp,104
  80c868:	d9c02b15 	stw	r7,172(sp)
  80c86c:	db402a15 	stw	r13,168(sp)
  80c870:	080baac0 	call	80baac <__sprint_r.part.0>
  80c874:	d9c02b17 	ldw	r7,172(sp)
  80c878:	db402a17 	ldw	r13,168(sp)
  80c87c:	1000241e 	bne	r2,zero,80c910 <___vfiprintf_internal_r+0xd50>
  80c880:	d9401b17 	ldw	r5,108(sp)
  80c884:	d8801c17 	ldw	r2,112(sp)
  80c888:	d811883a 	mov	r8,sp
  80c88c:	29000044 	addi	r4,r5,1
  80c890:	003fd806 	br	80c7f4 <__alt_mem_onchip_mem+0xff78c7f4>
  80c894:	d9401b17 	ldw	r5,108(sp)
  80c898:	00c02074 	movhi	r3,129
  80c89c:	18d41a04 	addi	r3,r3,20584
  80c8a0:	d8c02415 	stw	r3,144(sp)
  80c8a4:	29400044 	addi	r5,r5,1
  80c8a8:	d8c02417 	ldw	r3,144(sp)
  80c8ac:	14c5883a 	add	r2,r2,r19
  80c8b0:	44c00115 	stw	r19,4(r8)
  80c8b4:	40c00015 	stw	r3,0(r8)
  80c8b8:	d8801c15 	stw	r2,112(sp)
  80c8bc:	d9401b15 	stw	r5,108(sp)
  80c8c0:	00c001c4 	movi	r3,7
  80c8c4:	1940070e 	bge	r3,r5,80c8e4 <___vfiprintf_internal_r+0xd24>
  80c8c8:	103e4826 	beq	r2,zero,80c1ec <__alt_mem_onchip_mem+0xff78c1ec>
  80c8cc:	d9402117 	ldw	r5,132(sp)
  80c8d0:	d9002017 	ldw	r4,128(sp)
  80c8d4:	d9801a04 	addi	r6,sp,104
  80c8d8:	080baac0 	call	80baac <__sprint_r.part.0>
  80c8dc:	10000c1e 	bne	r2,zero,80c910 <___vfiprintf_internal_r+0xd50>
  80c8e0:	d8801c17 	ldw	r2,112(sp)
  80c8e4:	8c80010e 	bge	r17,r18,80c8ec <___vfiprintf_internal_r+0xd2c>
  80c8e8:	9023883a 	mov	r17,r18
  80c8ec:	da802317 	ldw	r10,140(sp)
  80c8f0:	5455883a 	add	r10,r10,r17
  80c8f4:	da802315 	stw	r10,140(sp)
  80c8f8:	103e4126 	beq	r2,zero,80c200 <__alt_mem_onchip_mem+0xff78c200>
  80c8fc:	d9402117 	ldw	r5,132(sp)
  80c900:	d9002017 	ldw	r4,128(sp)
  80c904:	d9801a04 	addi	r6,sp,104
  80c908:	080baac0 	call	80baac <__sprint_r.part.0>
  80c90c:	103e3c26 	beq	r2,zero,80c200 <__alt_mem_onchip_mem+0xff78c200>
  80c910:	dd002117 	ldw	r20,132(sp)
  80c914:	a080030b 	ldhu	r2,12(r20)
  80c918:	1080100c 	andi	r2,r2,64
  80c91c:	1001231e 	bne	r2,zero,80cdac <___vfiprintf_internal_r+0x11ec>
  80c920:	d8802317 	ldw	r2,140(sp)
  80c924:	003d7b06 	br	80bf14 <__alt_mem_onchip_mem+0xff78bf14>
  80c928:	1000991e 	bne	r2,zero,80cb90 <___vfiprintf_internal_r+0xfd0>
  80c92c:	00c00044 	movi	r3,1
  80c930:	9805883a 	mov	r2,r19
  80c934:	dd400015 	stw	r21,0(sp)
  80c938:	dcc00115 	stw	r19,4(sp)
  80c93c:	dcc01c15 	stw	r19,112(sp)
  80c940:	d8c01b15 	stw	r3,108(sp)
  80c944:	d811883a 	mov	r8,sp
  80c948:	42000204 	addi	r8,r8,8
  80c94c:	a2c0010c 	andi	r11,r20,4
  80c950:	583fe426 	beq	r11,zero,80c8e4 <__alt_mem_onchip_mem+0xff78c8e4>
  80c954:	8ca7c83a 	sub	r19,r17,r18
  80c958:	04ffe20e 	bge	zero,r19,80c8e4 <__alt_mem_onchip_mem+0xff78c8e4>
  80c95c:	01c00404 	movi	r7,16
  80c960:	3cffcc0e 	bge	r7,r19,80c894 <__alt_mem_onchip_mem+0xff78c894>
  80c964:	02802074 	movhi	r10,129
  80c968:	52941a04 	addi	r10,r10,20584
  80c96c:	d9001b17 	ldw	r4,108(sp)
  80c970:	da802415 	stw	r10,144(sp)
  80c974:	382b883a 	mov	r21,r7
  80c978:	050001c4 	movi	r20,7
  80c97c:	df002017 	ldw	fp,128(sp)
  80c980:	00000506 	br	80c998 <___vfiprintf_internal_r+0xdd8>
  80c984:	21400084 	addi	r5,r4,2
  80c988:	42000204 	addi	r8,r8,8
  80c98c:	1809883a 	mov	r4,r3
  80c990:	9cfffc04 	addi	r19,r19,-16
  80c994:	acffc40e 	bge	r21,r19,80c8a8 <__alt_mem_onchip_mem+0xff78c8a8>
  80c998:	10800404 	addi	r2,r2,16
  80c99c:	20c00044 	addi	r3,r4,1
  80c9a0:	45800015 	stw	r22,0(r8)
  80c9a4:	45400115 	stw	r21,4(r8)
  80c9a8:	d8801c15 	stw	r2,112(sp)
  80c9ac:	d8c01b15 	stw	r3,108(sp)
  80c9b0:	a0fff40e 	bge	r20,r3,80c984 <__alt_mem_onchip_mem+0xff78c984>
  80c9b4:	1000041e 	bne	r2,zero,80c9c8 <___vfiprintf_internal_r+0xe08>
  80c9b8:	01400044 	movi	r5,1
  80c9bc:	0009883a 	mov	r4,zero
  80c9c0:	d811883a 	mov	r8,sp
  80c9c4:	003ff206 	br	80c990 <__alt_mem_onchip_mem+0xff78c990>
  80c9c8:	d9402117 	ldw	r5,132(sp)
  80c9cc:	d9801a04 	addi	r6,sp,104
  80c9d0:	e009883a 	mov	r4,fp
  80c9d4:	080baac0 	call	80baac <__sprint_r.part.0>
  80c9d8:	103fcd1e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80c9dc:	d9001b17 	ldw	r4,108(sp)
  80c9e0:	d8801c17 	ldw	r2,112(sp)
  80c9e4:	d811883a 	mov	r8,sp
  80c9e8:	21400044 	addi	r5,r4,1
  80c9ec:	003fe806 	br	80c990 <__alt_mem_onchip_mem+0xff78c990>
  80c9f0:	d9402117 	ldw	r5,132(sp)
  80c9f4:	d9002017 	ldw	r4,128(sp)
  80c9f8:	d9801a04 	addi	r6,sp,104
  80c9fc:	d9c02b15 	stw	r7,172(sp)
  80ca00:	db402a15 	stw	r13,168(sp)
  80ca04:	080baac0 	call	80baac <__sprint_r.part.0>
  80ca08:	d9c02b17 	ldw	r7,172(sp)
  80ca0c:	db402a17 	ldw	r13,168(sp)
  80ca10:	103fbf1e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80ca14:	d9401b17 	ldw	r5,108(sp)
  80ca18:	d8801c17 	ldw	r2,112(sp)
  80ca1c:	d811883a 	mov	r8,sp
  80ca20:	29800044 	addi	r6,r5,1
  80ca24:	003dc406 	br	80c138 <__alt_mem_onchip_mem+0xff78c138>
  80ca28:	1000d21e 	bne	r2,zero,80cd74 <___vfiprintf_internal_r+0x11b4>
  80ca2c:	d8c01d87 	ldb	r3,118(sp)
  80ca30:	18009526 	beq	r3,zero,80cc88 <___vfiprintf_internal_r+0x10c8>
  80ca34:	00800044 	movi	r2,1
  80ca38:	d8c01d84 	addi	r3,sp,118
  80ca3c:	1009883a 	mov	r4,r2
  80ca40:	d8c00015 	stw	r3,0(sp)
  80ca44:	d8800115 	stw	r2,4(sp)
  80ca48:	d811883a 	mov	r8,sp
  80ca4c:	200b883a 	mov	r5,r4
  80ca50:	42000204 	addi	r8,r8,8
  80ca54:	21000044 	addi	r4,r4,1
  80ca58:	003d9706 	br	80c0b8 <__alt_mem_onchip_mem+0xff78c0b8>
  80ca5c:	d9001d04 	addi	r4,sp,116
  80ca60:	00800084 	movi	r2,2
  80ca64:	d9000015 	stw	r4,0(sp)
  80ca68:	d8800115 	stw	r2,4(sp)
  80ca6c:	1809883a 	mov	r4,r3
  80ca70:	d811883a 	mov	r8,sp
  80ca74:	200b883a 	mov	r5,r4
  80ca78:	42000204 	addi	r8,r8,8
  80ca7c:	21000044 	addi	r4,r4,1
  80ca80:	003f4e06 	br	80c7bc <__alt_mem_onchip_mem+0xff78c7bc>
  80ca84:	d8001d85 	stb	zero,118(sp)
  80ca88:	48005016 	blt	r9,zero,80cbcc <___vfiprintf_internal_r+0x100c>
  80ca8c:	00ffdfc4 	movi	r3,-129
  80ca90:	94c4b03a 	or	r2,r18,r19
  80ca94:	a0e8703a 	and	r20,r20,r3
  80ca98:	103d4426 	beq	r2,zero,80bfac <__alt_mem_onchip_mem+0xff78bfac>
  80ca9c:	0039883a 	mov	fp,zero
  80caa0:	d9002617 	ldw	r4,152(sp)
  80caa4:	dd401a04 	addi	r21,sp,104
  80caa8:	908003cc 	andi	r2,r18,15
  80caac:	9806973a 	slli	r3,r19,28
  80cab0:	2085883a 	add	r2,r4,r2
  80cab4:	9024d13a 	srli	r18,r18,4
  80cab8:	10800003 	ldbu	r2,0(r2)
  80cabc:	9826d13a 	srli	r19,r19,4
  80cac0:	ad7fffc4 	addi	r21,r21,-1
  80cac4:	1ca4b03a 	or	r18,r3,r18
  80cac8:	a8800005 	stb	r2,0(r21)
  80cacc:	94c4b03a 	or	r2,r18,r19
  80cad0:	103ff51e 	bne	r2,zero,80caa8 <__alt_mem_onchip_mem+0xff78caa8>
  80cad4:	003e5906 	br	80c43c <__alt_mem_onchip_mem+0xff78c43c>
  80cad8:	d9402117 	ldw	r5,132(sp)
  80cadc:	d9002017 	ldw	r4,128(sp)
  80cae0:	d9801a04 	addi	r6,sp,104
  80cae4:	080baac0 	call	80baac <__sprint_r.part.0>
  80cae8:	103f891e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80caec:	d8801c17 	ldw	r2,112(sp)
  80caf0:	d811883a 	mov	r8,sp
  80caf4:	003f9506 	br	80c94c <__alt_mem_onchip_mem+0xff78c94c>
  80caf8:	d9402117 	ldw	r5,132(sp)
  80cafc:	d9002017 	ldw	r4,128(sp)
  80cb00:	d9801a04 	addi	r6,sp,104
  80cb04:	080baac0 	call	80baac <__sprint_r.part.0>
  80cb08:	103f811e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80cb0c:	d811883a 	mov	r8,sp
  80cb10:	003ced06 	br	80bec8 <__alt_mem_onchip_mem+0xff78bec8>
  80cb14:	d9402117 	ldw	r5,132(sp)
  80cb18:	d9002017 	ldw	r4,128(sp)
  80cb1c:	d9801a04 	addi	r6,sp,104
  80cb20:	da402c15 	stw	r9,176(sp)
  80cb24:	db802a15 	stw	r14,168(sp)
  80cb28:	080baac0 	call	80baac <__sprint_r.part.0>
  80cb2c:	da402c17 	ldw	r9,176(sp)
  80cb30:	db802a17 	ldw	r14,168(sp)
  80cb34:	103f761e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80cb38:	d9401b17 	ldw	r5,108(sp)
  80cb3c:	d8801c17 	ldw	r2,112(sp)
  80cb40:	d811883a 	mov	r8,sp
  80cb44:	29000044 	addi	r4,r5,1
  80cb48:	003d5b06 	br	80c0b8 <__alt_mem_onchip_mem+0xff78c0b8>
  80cb4c:	d9402117 	ldw	r5,132(sp)
  80cb50:	d9002017 	ldw	r4,128(sp)
  80cb54:	d9801a04 	addi	r6,sp,104
  80cb58:	da402c15 	stw	r9,176(sp)
  80cb5c:	080baac0 	call	80baac <__sprint_r.part.0>
  80cb60:	da402c17 	ldw	r9,176(sp)
  80cb64:	103f6a1e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80cb68:	d9401b17 	ldw	r5,108(sp)
  80cb6c:	d8801c17 	ldw	r2,112(sp)
  80cb70:	d811883a 	mov	r8,sp
  80cb74:	29000044 	addi	r4,r5,1
  80cb78:	003f1006 	br	80c7bc <__alt_mem_onchip_mem+0xff78c7bc>
  80cb7c:	1000c31e 	bne	r2,zero,80ce8c <___vfiprintf_internal_r+0x12cc>
  80cb80:	01000044 	movi	r4,1
  80cb84:	000b883a 	mov	r5,zero
  80cb88:	d811883a 	mov	r8,sp
  80cb8c:	003f0d06 	br	80c7c4 <__alt_mem_onchip_mem+0xff78c7c4>
  80cb90:	d9402117 	ldw	r5,132(sp)
  80cb94:	d9002017 	ldw	r4,128(sp)
  80cb98:	d9801a04 	addi	r6,sp,104
  80cb9c:	080baac0 	call	80baac <__sprint_r.part.0>
  80cba0:	103f5b1e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80cba4:	d9001b17 	ldw	r4,108(sp)
  80cba8:	d8801c17 	ldw	r2,112(sp)
  80cbac:	d811883a 	mov	r8,sp
  80cbb0:	21000044 	addi	r4,r4,1
  80cbb4:	003d8006 	br	80c1b8 <__alt_mem_onchip_mem+0xff78c1b8>
  80cbb8:	01002074 	movhi	r4,129
  80cbbc:	2113b604 	addi	r4,r4,20184
  80cbc0:	d9002615 	stw	r4,152(sp)
  80cbc4:	d8c02215 	stw	r3,136(sp)
  80cbc8:	1029883a 	mov	r20,r2
  80cbcc:	94c4b03a 	or	r2,r18,r19
  80cbd0:	103fb21e 	bne	r2,zero,80ca9c <__alt_mem_onchip_mem+0xff78ca9c>
  80cbd4:	0039883a 	mov	fp,zero
  80cbd8:	00800084 	movi	r2,2
  80cbdc:	003e6b06 	br	80c58c <__alt_mem_onchip_mem+0xff78c58c>
  80cbe0:	da802217 	ldw	r10,136(sp)
  80cbe4:	d8001d85 	stb	zero,118(sp)
  80cbe8:	0027883a 	mov	r19,zero
  80cbec:	50800104 	addi	r2,r10,4
  80cbf0:	54800017 	ldw	r18,0(r10)
  80cbf4:	483e6016 	blt	r9,zero,80c578 <__alt_mem_onchip_mem+0xff78c578>
  80cbf8:	00ffdfc4 	movi	r3,-129
  80cbfc:	d8802215 	stw	r2,136(sp)
  80cc00:	a0e8703a 	and	r20,r20,r3
  80cc04:	0039883a 	mov	fp,zero
  80cc08:	903ebb26 	beq	r18,zero,80c6f8 <__alt_mem_onchip_mem+0xff78c6f8>
  80cc0c:	00800244 	movi	r2,9
  80cc10:	14bdee36 	bltu	r2,r18,80c3cc <__alt_mem_onchip_mem+0xff78c3cc>
  80cc14:	003eba06 	br	80c700 <__alt_mem_onchip_mem+0xff78c700>
  80cc18:	00800c04 	movi	r2,48
  80cc1c:	d8c01d45 	stb	r3,117(sp)
  80cc20:	d8801d05 	stb	r2,116(sp)
  80cc24:	d8001d85 	stb	zero,118(sp)
  80cc28:	a0c00094 	ori	r3,r20,2
  80cc2c:	4800a916 	blt	r9,zero,80ced4 <___vfiprintf_internal_r+0x1314>
  80cc30:	00bfdfc4 	movi	r2,-129
  80cc34:	a096703a 	and	r11,r20,r2
  80cc38:	5d000094 	ori	r20,r11,2
  80cc3c:	0039883a 	mov	fp,zero
  80cc40:	003f9706 	br	80caa0 <__alt_mem_onchip_mem+0xff78caa0>
  80cc44:	8025883a 	mov	r18,r16
  80cc48:	003c2e06 	br	80bd04 <__alt_mem_onchip_mem+0xff78bd04>
  80cc4c:	00802074 	movhi	r2,129
  80cc50:	1093b604 	addi	r2,r2,20184
  80cc54:	0039883a 	mov	fp,zero
  80cc58:	d8802615 	stw	r2,152(sp)
  80cc5c:	003f9006 	br	80caa0 <__alt_mem_onchip_mem+0xff78caa0>
  80cc60:	04a5c83a 	sub	r18,zero,r18
  80cc64:	07000b44 	movi	fp,45
  80cc68:	9004c03a 	cmpne	r2,r18,zero
  80cc6c:	04e7c83a 	sub	r19,zero,r19
  80cc70:	df001d85 	stb	fp,118(sp)
  80cc74:	98a7c83a 	sub	r19,r19,r2
  80cc78:	48009f16 	blt	r9,zero,80cef8 <___vfiprintf_internal_r+0x1338>
  80cc7c:	00bfdfc4 	movi	r2,-129
  80cc80:	a0a8703a 	and	r20,r20,r2
  80cc84:	003dd006 	br	80c3c8 <__alt_mem_onchip_mem+0xff78c3c8>
  80cc88:	70004c26 	beq	r14,zero,80cdbc <___vfiprintf_internal_r+0x11fc>
  80cc8c:	00800084 	movi	r2,2
  80cc90:	d8c01d04 	addi	r3,sp,116
  80cc94:	d8c00015 	stw	r3,0(sp)
  80cc98:	d8800115 	stw	r2,4(sp)
  80cc9c:	01000044 	movi	r4,1
  80cca0:	d811883a 	mov	r8,sp
  80cca4:	003f7306 	br	80ca74 <__alt_mem_onchip_mem+0xff78ca74>
  80cca8:	a080100c 	andi	r2,r20,64
  80ccac:	da802217 	ldw	r10,136(sp)
  80ccb0:	103e0626 	beq	r2,zero,80c4cc <__alt_mem_onchip_mem+0xff78c4cc>
  80ccb4:	5480000f 	ldh	r18,0(r10)
  80ccb8:	52800104 	addi	r10,r10,4
  80ccbc:	da802215 	stw	r10,136(sp)
  80ccc0:	9027d7fa 	srai	r19,r18,31
  80ccc4:	9805883a 	mov	r2,r19
  80ccc8:	003db806 	br	80c3ac <__alt_mem_onchip_mem+0xff78c3ac>
  80cccc:	a080040c 	andi	r2,r20,16
  80ccd0:	1000091e 	bne	r2,zero,80ccf8 <___vfiprintf_internal_r+0x1138>
  80ccd4:	a2c0100c 	andi	r11,r20,64
  80ccd8:	58000726 	beq	r11,zero,80ccf8 <___vfiprintf_internal_r+0x1138>
  80ccdc:	da802217 	ldw	r10,136(sp)
  80cce0:	50800017 	ldw	r2,0(r10)
  80cce4:	52800104 	addi	r10,r10,4
  80cce8:	da802215 	stw	r10,136(sp)
  80ccec:	da802317 	ldw	r10,140(sp)
  80ccf0:	1280000d 	sth	r10,0(r2)
  80ccf4:	003be706 	br	80bc94 <__alt_mem_onchip_mem+0xff78bc94>
  80ccf8:	da802217 	ldw	r10,136(sp)
  80ccfc:	50800017 	ldw	r2,0(r10)
  80cd00:	52800104 	addi	r10,r10,4
  80cd04:	da802215 	stw	r10,136(sp)
  80cd08:	da802317 	ldw	r10,140(sp)
  80cd0c:	12800015 	stw	r10,0(r2)
  80cd10:	003be006 	br	80bc94 <__alt_mem_onchip_mem+0xff78bc94>
  80cd14:	a080100c 	andi	r2,r20,64
  80cd18:	da802217 	ldw	r10,136(sp)
  80cd1c:	10003026 	beq	r2,zero,80cde0 <___vfiprintf_internal_r+0x1220>
  80cd20:	5480000b 	ldhu	r18,0(r10)
  80cd24:	52800104 	addi	r10,r10,4
  80cd28:	0027883a 	mov	r19,zero
  80cd2c:	da802215 	stw	r10,136(sp)
  80cd30:	003d8006 	br	80c334 <__alt_mem_onchip_mem+0xff78c334>
  80cd34:	80c00007 	ldb	r3,0(r16)
  80cd38:	003c0006 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80cd3c:	a080100c 	andi	r2,r20,64
  80cd40:	d8001d85 	stb	zero,118(sp)
  80cd44:	da802217 	ldw	r10,136(sp)
  80cd48:	1000201e 	bne	r2,zero,80cdcc <___vfiprintf_internal_r+0x120c>
  80cd4c:	50800104 	addi	r2,r10,4
  80cd50:	54800017 	ldw	r18,0(r10)
  80cd54:	0027883a 	mov	r19,zero
  80cd58:	483def0e 	bge	r9,zero,80c518 <__alt_mem_onchip_mem+0xff78c518>
  80cd5c:	94c6b03a 	or	r3,r18,r19
  80cd60:	d8802215 	stw	r2,136(sp)
  80cd64:	183d4e1e 	bne	r3,zero,80c2a0 <__alt_mem_onchip_mem+0xff78c2a0>
  80cd68:	0039883a 	mov	fp,zero
  80cd6c:	0005883a 	mov	r2,zero
  80cd70:	003e0606 	br	80c58c <__alt_mem_onchip_mem+0xff78c58c>
  80cd74:	d9402117 	ldw	r5,132(sp)
  80cd78:	d9002017 	ldw	r4,128(sp)
  80cd7c:	d9801a04 	addi	r6,sp,104
  80cd80:	da402c15 	stw	r9,176(sp)
  80cd84:	db802a15 	stw	r14,168(sp)
  80cd88:	080baac0 	call	80baac <__sprint_r.part.0>
  80cd8c:	da402c17 	ldw	r9,176(sp)
  80cd90:	db802a17 	ldw	r14,168(sp)
  80cd94:	103ede1e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80cd98:	d9401b17 	ldw	r5,108(sp)
  80cd9c:	d8801c17 	ldw	r2,112(sp)
  80cda0:	d811883a 	mov	r8,sp
  80cda4:	29000044 	addi	r4,r5,1
  80cda8:	003e7406 	br	80c77c <__alt_mem_onchip_mem+0xff78c77c>
  80cdac:	00bfffc4 	movi	r2,-1
  80cdb0:	003c5806 	br	80bf14 <__alt_mem_onchip_mem+0xff78bf14>
  80cdb4:	d811883a 	mov	r8,sp
  80cdb8:	003ee806 	br	80c95c <__alt_mem_onchip_mem+0xff78c95c>
  80cdbc:	000b883a 	mov	r5,zero
  80cdc0:	01000044 	movi	r4,1
  80cdc4:	d811883a 	mov	r8,sp
  80cdc8:	003e7c06 	br	80c7bc <__alt_mem_onchip_mem+0xff78c7bc>
  80cdcc:	50800104 	addi	r2,r10,4
  80cdd0:	5480000b 	ldhu	r18,0(r10)
  80cdd4:	0027883a 	mov	r19,zero
  80cdd8:	483dcf0e 	bge	r9,zero,80c518 <__alt_mem_onchip_mem+0xff78c518>
  80cddc:	003fdf06 	br	80cd5c <__alt_mem_onchip_mem+0xff78cd5c>
  80cde0:	54800017 	ldw	r18,0(r10)
  80cde4:	52800104 	addi	r10,r10,4
  80cde8:	0027883a 	mov	r19,zero
  80cdec:	da802215 	stw	r10,136(sp)
  80cdf0:	003d5006 	br	80c334 <__alt_mem_onchip_mem+0xff78c334>
  80cdf4:	50800104 	addi	r2,r10,4
  80cdf8:	5480000b 	ldhu	r18,0(r10)
  80cdfc:	0027883a 	mov	r19,zero
  80ce00:	483f7d0e 	bge	r9,zero,80cbf8 <__alt_mem_onchip_mem+0xff78cbf8>
  80ce04:	003ddc06 	br	80c578 <__alt_mem_onchip_mem+0xff78c578>
  80ce08:	d8c02215 	stw	r3,136(sp)
  80ce0c:	0039883a 	mov	fp,zero
  80ce10:	003ddb06 	br	80c580 <__alt_mem_onchip_mem+0xff78c580>
  80ce14:	02802074 	movhi	r10,129
  80ce18:	52941604 	addi	r10,r10,20568
  80ce1c:	da802415 	stw	r10,144(sp)
  80ce20:	003e8306 	br	80c830 <__alt_mem_onchip_mem+0xff78c830>
  80ce24:	d8801c17 	ldw	r2,112(sp)
  80ce28:	dd002117 	ldw	r20,132(sp)
  80ce2c:	103eb926 	beq	r2,zero,80c914 <__alt_mem_onchip_mem+0xff78c914>
  80ce30:	d9002017 	ldw	r4,128(sp)
  80ce34:	d9801a04 	addi	r6,sp,104
  80ce38:	a00b883a 	mov	r5,r20
  80ce3c:	080baac0 	call	80baac <__sprint_r.part.0>
  80ce40:	003eb406 	br	80c914 <__alt_mem_onchip_mem+0xff78c914>
  80ce44:	80c00043 	ldbu	r3,1(r16)
  80ce48:	a5000814 	ori	r20,r20,32
  80ce4c:	84000044 	addi	r16,r16,1
  80ce50:	18c03fcc 	andi	r3,r3,255
  80ce54:	18c0201c 	xori	r3,r3,128
  80ce58:	18ffe004 	addi	r3,r3,-128
  80ce5c:	003bb706 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80ce60:	a809883a 	mov	r4,r21
  80ce64:	d8c02a15 	stw	r3,168(sp)
  80ce68:	da002b15 	stw	r8,172(sp)
  80ce6c:	0804f200 	call	804f20 <strlen>
  80ce70:	d8c02a17 	ldw	r3,168(sp)
  80ce74:	1027883a 	mov	r19,r2
  80ce78:	df001d83 	ldbu	fp,118(sp)
  80ce7c:	d8c02215 	stw	r3,136(sp)
  80ce80:	0013883a 	mov	r9,zero
  80ce84:	da002b17 	ldw	r8,172(sp)
  80ce88:	003c4d06 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80ce8c:	d9402117 	ldw	r5,132(sp)
  80ce90:	d9002017 	ldw	r4,128(sp)
  80ce94:	d9801a04 	addi	r6,sp,104
  80ce98:	da402c15 	stw	r9,176(sp)
  80ce9c:	080baac0 	call	80baac <__sprint_r.part.0>
  80cea0:	da402c17 	ldw	r9,176(sp)
  80cea4:	103e9a1e 	bne	r2,zero,80c910 <__alt_mem_onchip_mem+0xff78c910>
  80cea8:	d9401b17 	ldw	r5,108(sp)
  80ceac:	d8801c17 	ldw	r2,112(sp)
  80ceb0:	d811883a 	mov	r8,sp
  80ceb4:	29000044 	addi	r4,r5,1
  80ceb8:	003e4206 	br	80c7c4 <__alt_mem_onchip_mem+0xff78c7c4>
  80cebc:	d9401b17 	ldw	r5,108(sp)
  80cec0:	01002074 	movhi	r4,129
  80cec4:	21141a04 	addi	r4,r4,20584
  80cec8:	d9002415 	stw	r4,144(sp)
  80cecc:	29400044 	addi	r5,r5,1
  80ced0:	003c6d06 	br	80c088 <__alt_mem_onchip_mem+0xff78c088>
  80ced4:	0039883a 	mov	fp,zero
  80ced8:	00800084 	movi	r2,2
  80cedc:	10803fcc 	andi	r2,r2,255
  80cee0:	01000044 	movi	r4,1
  80cee4:	11001e26 	beq	r2,r4,80cf60 <___vfiprintf_internal_r+0x13a0>
  80cee8:	01000084 	movi	r4,2
  80ceec:	11001e1e 	bne	r2,r4,80cf68 <___vfiprintf_internal_r+0x13a8>
  80cef0:	1829883a 	mov	r20,r3
  80cef4:	003eea06 	br	80caa0 <__alt_mem_onchip_mem+0xff78caa0>
  80cef8:	a007883a 	mov	r3,r20
  80cefc:	00800044 	movi	r2,1
  80cf00:	003ff606 	br	80cedc <__alt_mem_onchip_mem+0xff78cedc>
  80cf04:	00800184 	movi	r2,6
  80cf08:	1240012e 	bgeu	r2,r9,80cf10 <___vfiprintf_internal_r+0x1350>
  80cf0c:	1013883a 	mov	r9,r2
  80cf10:	4827883a 	mov	r19,r9
  80cf14:	4825883a 	mov	r18,r9
  80cf18:	48001516 	blt	r9,zero,80cf70 <___vfiprintf_internal_r+0x13b0>
  80cf1c:	05402074 	movhi	r21,129
  80cf20:	d8c02215 	stw	r3,136(sp)
  80cf24:	ad53bb04 	addi	r21,r21,20204
  80cf28:	003d1406 	br	80c37c <__alt_mem_onchip_mem+0xff78c37c>
  80cf2c:	02802074 	movhi	r10,129
  80cf30:	52941604 	addi	r10,r10,20568
  80cf34:	da802415 	stw	r10,144(sp)
  80cf38:	200d883a 	mov	r6,r4
  80cf3c:	003c9106 	br	80c184 <__alt_mem_onchip_mem+0xff78c184>
  80cf40:	5021883a 	mov	r16,r10
  80cf44:	0013883a 	mov	r9,zero
  80cf48:	003b7d06 	br	80bd40 <__alt_mem_onchip_mem+0xff78bd40>
  80cf4c:	4827883a 	mov	r19,r9
  80cf50:	df001d83 	ldbu	fp,118(sp)
  80cf54:	d8c02215 	stw	r3,136(sp)
  80cf58:	0013883a 	mov	r9,zero
  80cf5c:	003c1806 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80cf60:	1829883a 	mov	r20,r3
  80cf64:	003d1806 	br	80c3c8 <__alt_mem_onchip_mem+0xff78c3c8>
  80cf68:	1829883a 	mov	r20,r3
  80cf6c:	003ccd06 	br	80c2a4 <__alt_mem_onchip_mem+0xff78c2a4>
  80cf70:	0025883a 	mov	r18,zero
  80cf74:	003fe906 	br	80cf1c <__alt_mem_onchip_mem+0xff78cf1c>
  80cf78:	d8802217 	ldw	r2,136(sp)
  80cf7c:	80c00043 	ldbu	r3,1(r16)
  80cf80:	5021883a 	mov	r16,r10
  80cf84:	12400017 	ldw	r9,0(r2)
  80cf88:	10800104 	addi	r2,r2,4
  80cf8c:	d8802215 	stw	r2,136(sp)
  80cf90:	483faf0e 	bge	r9,zero,80ce50 <__alt_mem_onchip_mem+0xff78ce50>
  80cf94:	18c03fcc 	andi	r3,r3,255
  80cf98:	18c0201c 	xori	r3,r3,128
  80cf9c:	027fffc4 	movi	r9,-1
  80cfa0:	18ffe004 	addi	r3,r3,-128
  80cfa4:	003b6506 	br	80bd3c <__alt_mem_onchip_mem+0xff78bd3c>
  80cfa8:	d9c01d85 	stb	r7,118(sp)
  80cfac:	003ca006 	br	80c230 <__alt_mem_onchip_mem+0xff78c230>
  80cfb0:	d9c01d85 	stb	r7,118(sp)
  80cfb4:	003cad06 	br	80c26c <__alt_mem_onchip_mem+0xff78c26c>
  80cfb8:	d9c01d85 	stb	r7,118(sp)
  80cfbc:	003d7d06 	br	80c5b4 <__alt_mem_onchip_mem+0xff78c5b4>
  80cfc0:	d9c01d85 	stb	r7,118(sp)
  80cfc4:	003d5f06 	br	80c544 <__alt_mem_onchip_mem+0xff78c544>
  80cfc8:	a080004c 	andi	r2,r20,1
  80cfcc:	0039883a 	mov	fp,zero
  80cfd0:	10000526 	beq	r2,zero,80cfe8 <___vfiprintf_internal_r+0x1428>
  80cfd4:	00800c04 	movi	r2,48
  80cfd8:	d88019c5 	stb	r2,103(sp)
  80cfdc:	dcc02717 	ldw	r19,156(sp)
  80cfe0:	dd4019c4 	addi	r21,sp,103
  80cfe4:	003bf606 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80cfe8:	0027883a 	mov	r19,zero
  80cfec:	dd401a04 	addi	r21,sp,104
  80cff0:	003bf306 	br	80bfc0 <__alt_mem_onchip_mem+0xff78bfc0>
  80cff4:	d9c01d85 	stb	r7,118(sp)
  80cff8:	003dc806 	br	80c71c <__alt_mem_onchip_mem+0xff78c71c>
  80cffc:	d9c01d85 	stb	r7,118(sp)
  80d000:	003d3a06 	br	80c4ec <__alt_mem_onchip_mem+0xff78c4ec>
  80d004:	d9c01d85 	stb	r7,118(sp)
  80d008:	003d2a06 	br	80c4b4 <__alt_mem_onchip_mem+0xff78c4b4>
  80d00c:	d9c01d85 	stb	r7,118(sp)
  80d010:	003cde06 	br	80c38c <__alt_mem_onchip_mem+0xff78c38c>
  80d014:	d9c01d85 	stb	r7,118(sp)
  80d018:	003cbc06 	br	80c30c <__alt_mem_onchip_mem+0xff78c30c>

0080d01c <__vfiprintf_internal>:
  80d01c:	00802074 	movhi	r2,129
  80d020:	109c3a04 	addi	r2,r2,28904
  80d024:	300f883a 	mov	r7,r6
  80d028:	280d883a 	mov	r6,r5
  80d02c:	200b883a 	mov	r5,r4
  80d030:	11000017 	ldw	r4,0(r2)
  80d034:	080bbc01 	jmpi	80bbc0 <___vfiprintf_internal_r>

0080d038 <__sbprintf>:
  80d038:	2880030b 	ldhu	r2,12(r5)
  80d03c:	2ac01917 	ldw	r11,100(r5)
  80d040:	2a80038b 	ldhu	r10,14(r5)
  80d044:	2a400717 	ldw	r9,28(r5)
  80d048:	2a000917 	ldw	r8,36(r5)
  80d04c:	defee204 	addi	sp,sp,-1144
  80d050:	00c10004 	movi	r3,1024
  80d054:	dc011a15 	stw	r16,1128(sp)
  80d058:	10bfff4c 	andi	r2,r2,65533
  80d05c:	2821883a 	mov	r16,r5
  80d060:	d8cb883a 	add	r5,sp,r3
  80d064:	dc811c15 	stw	r18,1136(sp)
  80d068:	dc411b15 	stw	r17,1132(sp)
  80d06c:	dfc11d15 	stw	ra,1140(sp)
  80d070:	2025883a 	mov	r18,r4
  80d074:	d881030d 	sth	r2,1036(sp)
  80d078:	dac11915 	stw	r11,1124(sp)
  80d07c:	da81038d 	sth	r10,1038(sp)
  80d080:	da410715 	stw	r9,1052(sp)
  80d084:	da010915 	stw	r8,1060(sp)
  80d088:	dec10015 	stw	sp,1024(sp)
  80d08c:	dec10415 	stw	sp,1040(sp)
  80d090:	d8c10215 	stw	r3,1032(sp)
  80d094:	d8c10515 	stw	r3,1044(sp)
  80d098:	d8010615 	stw	zero,1048(sp)
  80d09c:	080bbc00 	call	80bbc0 <___vfiprintf_internal_r>
  80d0a0:	1023883a 	mov	r17,r2
  80d0a4:	10000416 	blt	r2,zero,80d0b8 <__sbprintf+0x80>
  80d0a8:	d9410004 	addi	r5,sp,1024
  80d0ac:	9009883a 	mov	r4,r18
  80d0b0:	0808f340 	call	808f34 <_fflush_r>
  80d0b4:	10000d1e 	bne	r2,zero,80d0ec <__sbprintf+0xb4>
  80d0b8:	d881030b 	ldhu	r2,1036(sp)
  80d0bc:	1080100c 	andi	r2,r2,64
  80d0c0:	10000326 	beq	r2,zero,80d0d0 <__sbprintf+0x98>
  80d0c4:	8080030b 	ldhu	r2,12(r16)
  80d0c8:	10801014 	ori	r2,r2,64
  80d0cc:	8080030d 	sth	r2,12(r16)
  80d0d0:	8805883a 	mov	r2,r17
  80d0d4:	dfc11d17 	ldw	ra,1140(sp)
  80d0d8:	dc811c17 	ldw	r18,1136(sp)
  80d0dc:	dc411b17 	ldw	r17,1132(sp)
  80d0e0:	dc011a17 	ldw	r16,1128(sp)
  80d0e4:	dec11e04 	addi	sp,sp,1144
  80d0e8:	f800283a 	ret
  80d0ec:	047fffc4 	movi	r17,-1
  80d0f0:	003ff106 	br	80d0b8 <__alt_mem_onchip_mem+0xff78d0b8>

0080d0f4 <_calloc_r>:
  80d0f4:	298b383a 	mul	r5,r5,r6
  80d0f8:	defffe04 	addi	sp,sp,-8
  80d0fc:	dfc00115 	stw	ra,4(sp)
  80d100:	dc000015 	stw	r16,0(sp)
  80d104:	08040cc0 	call	8040cc <_malloc_r>
  80d108:	10002926 	beq	r2,zero,80d1b0 <_calloc_r+0xbc>
  80d10c:	11bfff17 	ldw	r6,-4(r2)
  80d110:	1021883a 	mov	r16,r2
  80d114:	00bfff04 	movi	r2,-4
  80d118:	308c703a 	and	r6,r6,r2
  80d11c:	00c00904 	movi	r3,36
  80d120:	308d883a 	add	r6,r6,r2
  80d124:	19801636 	bltu	r3,r6,80d180 <_calloc_r+0x8c>
  80d128:	008004c4 	movi	r2,19
  80d12c:	11800b2e 	bgeu	r2,r6,80d15c <_calloc_r+0x68>
  80d130:	80000015 	stw	zero,0(r16)
  80d134:	80000115 	stw	zero,4(r16)
  80d138:	008006c4 	movi	r2,27
  80d13c:	11801a2e 	bgeu	r2,r6,80d1a8 <_calloc_r+0xb4>
  80d140:	80000215 	stw	zero,8(r16)
  80d144:	80000315 	stw	zero,12(r16)
  80d148:	30c0151e 	bne	r6,r3,80d1a0 <_calloc_r+0xac>
  80d14c:	80000415 	stw	zero,16(r16)
  80d150:	80800604 	addi	r2,r16,24
  80d154:	80000515 	stw	zero,20(r16)
  80d158:	00000106 	br	80d160 <_calloc_r+0x6c>
  80d15c:	8005883a 	mov	r2,r16
  80d160:	10000015 	stw	zero,0(r2)
  80d164:	10000115 	stw	zero,4(r2)
  80d168:	10000215 	stw	zero,8(r2)
  80d16c:	8005883a 	mov	r2,r16
  80d170:	dfc00117 	ldw	ra,4(sp)
  80d174:	dc000017 	ldw	r16,0(sp)
  80d178:	dec00204 	addi	sp,sp,8
  80d17c:	f800283a 	ret
  80d180:	000b883a 	mov	r5,zero
  80d184:	8009883a 	mov	r4,r16
  80d188:	08048d80 	call	8048d8 <memset>
  80d18c:	8005883a 	mov	r2,r16
  80d190:	dfc00117 	ldw	ra,4(sp)
  80d194:	dc000017 	ldw	r16,0(sp)
  80d198:	dec00204 	addi	sp,sp,8
  80d19c:	f800283a 	ret
  80d1a0:	80800404 	addi	r2,r16,16
  80d1a4:	003fee06 	br	80d160 <__alt_mem_onchip_mem+0xff78d160>
  80d1a8:	80800204 	addi	r2,r16,8
  80d1ac:	003fec06 	br	80d160 <__alt_mem_onchip_mem+0xff78d160>
  80d1b0:	0005883a 	mov	r2,zero
  80d1b4:	003fee06 	br	80d170 <__alt_mem_onchip_mem+0xff78d170>

0080d1b8 <_fclose_r>:
  80d1b8:	28003926 	beq	r5,zero,80d2a0 <_fclose_r+0xe8>
  80d1bc:	defffc04 	addi	sp,sp,-16
  80d1c0:	dc400115 	stw	r17,4(sp)
  80d1c4:	dc000015 	stw	r16,0(sp)
  80d1c8:	dfc00315 	stw	ra,12(sp)
  80d1cc:	dc800215 	stw	r18,8(sp)
  80d1d0:	2023883a 	mov	r17,r4
  80d1d4:	2821883a 	mov	r16,r5
  80d1d8:	20000226 	beq	r4,zero,80d1e4 <_fclose_r+0x2c>
  80d1dc:	20800e17 	ldw	r2,56(r4)
  80d1e0:	10002726 	beq	r2,zero,80d280 <_fclose_r+0xc8>
  80d1e4:	8080030f 	ldh	r2,12(r16)
  80d1e8:	1000071e 	bne	r2,zero,80d208 <_fclose_r+0x50>
  80d1ec:	0005883a 	mov	r2,zero
  80d1f0:	dfc00317 	ldw	ra,12(sp)
  80d1f4:	dc800217 	ldw	r18,8(sp)
  80d1f8:	dc400117 	ldw	r17,4(sp)
  80d1fc:	dc000017 	ldw	r16,0(sp)
  80d200:	dec00404 	addi	sp,sp,16
  80d204:	f800283a 	ret
  80d208:	800b883a 	mov	r5,r16
  80d20c:	8809883a 	mov	r4,r17
  80d210:	0808d180 	call	808d18 <__sflush_r>
  80d214:	1025883a 	mov	r18,r2
  80d218:	80800b17 	ldw	r2,44(r16)
  80d21c:	10000426 	beq	r2,zero,80d230 <_fclose_r+0x78>
  80d220:	81400717 	ldw	r5,28(r16)
  80d224:	8809883a 	mov	r4,r17
  80d228:	103ee83a 	callr	r2
  80d22c:	10001616 	blt	r2,zero,80d288 <_fclose_r+0xd0>
  80d230:	8080030b 	ldhu	r2,12(r16)
  80d234:	1080200c 	andi	r2,r2,128
  80d238:	1000151e 	bne	r2,zero,80d290 <_fclose_r+0xd8>
  80d23c:	81400c17 	ldw	r5,48(r16)
  80d240:	28000526 	beq	r5,zero,80d258 <_fclose_r+0xa0>
  80d244:	80801004 	addi	r2,r16,64
  80d248:	28800226 	beq	r5,r2,80d254 <_fclose_r+0x9c>
  80d24c:	8809883a 	mov	r4,r17
  80d250:	08095300 	call	809530 <_free_r>
  80d254:	80000c15 	stw	zero,48(r16)
  80d258:	81401117 	ldw	r5,68(r16)
  80d25c:	28000326 	beq	r5,zero,80d26c <_fclose_r+0xb4>
  80d260:	8809883a 	mov	r4,r17
  80d264:	08095300 	call	809530 <_free_r>
  80d268:	80001115 	stw	zero,68(r16)
  80d26c:	08093200 	call	809320 <__sfp_lock_acquire>
  80d270:	8000030d 	sth	zero,12(r16)
  80d274:	08093240 	call	809324 <__sfp_lock_release>
  80d278:	9005883a 	mov	r2,r18
  80d27c:	003fdc06 	br	80d1f0 <__alt_mem_onchip_mem+0xff78d1f0>
  80d280:	08093100 	call	809310 <__sinit>
  80d284:	003fd706 	br	80d1e4 <__alt_mem_onchip_mem+0xff78d1e4>
  80d288:	04bfffc4 	movi	r18,-1
  80d28c:	003fe806 	br	80d230 <__alt_mem_onchip_mem+0xff78d230>
  80d290:	81400417 	ldw	r5,16(r16)
  80d294:	8809883a 	mov	r4,r17
  80d298:	08095300 	call	809530 <_free_r>
  80d29c:	003fe706 	br	80d23c <__alt_mem_onchip_mem+0xff78d23c>
  80d2a0:	0005883a 	mov	r2,zero
  80d2a4:	f800283a 	ret

0080d2a8 <fclose>:
  80d2a8:	00802074 	movhi	r2,129
  80d2ac:	109c3a04 	addi	r2,r2,28904
  80d2b0:	200b883a 	mov	r5,r4
  80d2b4:	11000017 	ldw	r4,0(r2)
  80d2b8:	080d1b81 	jmpi	80d1b8 <_fclose_r>

0080d2bc <__fputwc>:
  80d2bc:	defff804 	addi	sp,sp,-32
  80d2c0:	dcc00415 	stw	r19,16(sp)
  80d2c4:	dc800315 	stw	r18,12(sp)
  80d2c8:	dc000115 	stw	r16,4(sp)
  80d2cc:	dfc00715 	stw	ra,28(sp)
  80d2d0:	dd400615 	stw	r21,24(sp)
  80d2d4:	dd000515 	stw	r20,20(sp)
  80d2d8:	dc400215 	stw	r17,8(sp)
  80d2dc:	2027883a 	mov	r19,r4
  80d2e0:	2825883a 	mov	r18,r5
  80d2e4:	3021883a 	mov	r16,r6
  80d2e8:	0809f600 	call	809f60 <__locale_mb_cur_max>
  80d2ec:	00c00044 	movi	r3,1
  80d2f0:	10c03e26 	beq	r2,r3,80d3ec <__fputwc+0x130>
  80d2f4:	81c01704 	addi	r7,r16,92
  80d2f8:	900d883a 	mov	r6,r18
  80d2fc:	d80b883a 	mov	r5,sp
  80d300:	9809883a 	mov	r4,r19
  80d304:	080d61c0 	call	80d61c <_wcrtomb_r>
  80d308:	1029883a 	mov	r20,r2
  80d30c:	00bfffc4 	movi	r2,-1
  80d310:	a0802026 	beq	r20,r2,80d394 <__fputwc+0xd8>
  80d314:	d9400003 	ldbu	r5,0(sp)
  80d318:	a0001c26 	beq	r20,zero,80d38c <__fputwc+0xd0>
  80d31c:	0023883a 	mov	r17,zero
  80d320:	05400284 	movi	r21,10
  80d324:	00000906 	br	80d34c <__fputwc+0x90>
  80d328:	80800017 	ldw	r2,0(r16)
  80d32c:	11400005 	stb	r5,0(r2)
  80d330:	80c00017 	ldw	r3,0(r16)
  80d334:	18c00044 	addi	r3,r3,1
  80d338:	80c00015 	stw	r3,0(r16)
  80d33c:	8c400044 	addi	r17,r17,1
  80d340:	dc45883a 	add	r2,sp,r17
  80d344:	8d00112e 	bgeu	r17,r20,80d38c <__fputwc+0xd0>
  80d348:	11400003 	ldbu	r5,0(r2)
  80d34c:	80c00217 	ldw	r3,8(r16)
  80d350:	18ffffc4 	addi	r3,r3,-1
  80d354:	80c00215 	stw	r3,8(r16)
  80d358:	183ff30e 	bge	r3,zero,80d328 <__alt_mem_onchip_mem+0xff78d328>
  80d35c:	80800617 	ldw	r2,24(r16)
  80d360:	18801916 	blt	r3,r2,80d3c8 <__fputwc+0x10c>
  80d364:	80800017 	ldw	r2,0(r16)
  80d368:	11400005 	stb	r5,0(r2)
  80d36c:	80800017 	ldw	r2,0(r16)
  80d370:	10c00003 	ldbu	r3,0(r2)
  80d374:	10800044 	addi	r2,r2,1
  80d378:	1d402326 	beq	r3,r21,80d408 <__fputwc+0x14c>
  80d37c:	80800015 	stw	r2,0(r16)
  80d380:	8c400044 	addi	r17,r17,1
  80d384:	dc45883a 	add	r2,sp,r17
  80d388:	8d3fef36 	bltu	r17,r20,80d348 <__alt_mem_onchip_mem+0xff78d348>
  80d38c:	9005883a 	mov	r2,r18
  80d390:	00000406 	br	80d3a4 <__fputwc+0xe8>
  80d394:	80c0030b 	ldhu	r3,12(r16)
  80d398:	a005883a 	mov	r2,r20
  80d39c:	18c01014 	ori	r3,r3,64
  80d3a0:	80c0030d 	sth	r3,12(r16)
  80d3a4:	dfc00717 	ldw	ra,28(sp)
  80d3a8:	dd400617 	ldw	r21,24(sp)
  80d3ac:	dd000517 	ldw	r20,20(sp)
  80d3b0:	dcc00417 	ldw	r19,16(sp)
  80d3b4:	dc800317 	ldw	r18,12(sp)
  80d3b8:	dc400217 	ldw	r17,8(sp)
  80d3bc:	dc000117 	ldw	r16,4(sp)
  80d3c0:	dec00804 	addi	sp,sp,32
  80d3c4:	f800283a 	ret
  80d3c8:	800d883a 	mov	r6,r16
  80d3cc:	29403fcc 	andi	r5,r5,255
  80d3d0:	9809883a 	mov	r4,r19
  80d3d4:	080d4c40 	call	80d4c4 <__swbuf_r>
  80d3d8:	10bfffe0 	cmpeqi	r2,r2,-1
  80d3dc:	10803fcc 	andi	r2,r2,255
  80d3e0:	103fd626 	beq	r2,zero,80d33c <__alt_mem_onchip_mem+0xff78d33c>
  80d3e4:	00bfffc4 	movi	r2,-1
  80d3e8:	003fee06 	br	80d3a4 <__alt_mem_onchip_mem+0xff78d3a4>
  80d3ec:	90ffffc4 	addi	r3,r18,-1
  80d3f0:	01003f84 	movi	r4,254
  80d3f4:	20ffbf36 	bltu	r4,r3,80d2f4 <__alt_mem_onchip_mem+0xff78d2f4>
  80d3f8:	900b883a 	mov	r5,r18
  80d3fc:	dc800005 	stb	r18,0(sp)
  80d400:	1029883a 	mov	r20,r2
  80d404:	003fc506 	br	80d31c <__alt_mem_onchip_mem+0xff78d31c>
  80d408:	800d883a 	mov	r6,r16
  80d40c:	a80b883a 	mov	r5,r21
  80d410:	9809883a 	mov	r4,r19
  80d414:	080d4c40 	call	80d4c4 <__swbuf_r>
  80d418:	10bfffe0 	cmpeqi	r2,r2,-1
  80d41c:	003fef06 	br	80d3dc <__alt_mem_onchip_mem+0xff78d3dc>

0080d420 <_fputwc_r>:
  80d420:	3080030b 	ldhu	r2,12(r6)
  80d424:	10c8000c 	andi	r3,r2,8192
  80d428:	1800051e 	bne	r3,zero,80d440 <_fputwc_r+0x20>
  80d42c:	30c01917 	ldw	r3,100(r6)
  80d430:	10880014 	ori	r2,r2,8192
  80d434:	3080030d 	sth	r2,12(r6)
  80d438:	18880014 	ori	r2,r3,8192
  80d43c:	30801915 	stw	r2,100(r6)
  80d440:	080d2bc1 	jmpi	80d2bc <__fputwc>

0080d444 <fputwc>:
  80d444:	00802074 	movhi	r2,129
  80d448:	defffc04 	addi	sp,sp,-16
  80d44c:	109c3a04 	addi	r2,r2,28904
  80d450:	dc000115 	stw	r16,4(sp)
  80d454:	14000017 	ldw	r16,0(r2)
  80d458:	dc400215 	stw	r17,8(sp)
  80d45c:	dfc00315 	stw	ra,12(sp)
  80d460:	2023883a 	mov	r17,r4
  80d464:	80000226 	beq	r16,zero,80d470 <fputwc+0x2c>
  80d468:	80800e17 	ldw	r2,56(r16)
  80d46c:	10001026 	beq	r2,zero,80d4b0 <fputwc+0x6c>
  80d470:	2880030b 	ldhu	r2,12(r5)
  80d474:	10c8000c 	andi	r3,r2,8192
  80d478:	1800051e 	bne	r3,zero,80d490 <fputwc+0x4c>
  80d47c:	28c01917 	ldw	r3,100(r5)
  80d480:	10880014 	ori	r2,r2,8192
  80d484:	2880030d 	sth	r2,12(r5)
  80d488:	18880014 	ori	r2,r3,8192
  80d48c:	28801915 	stw	r2,100(r5)
  80d490:	280d883a 	mov	r6,r5
  80d494:	8009883a 	mov	r4,r16
  80d498:	880b883a 	mov	r5,r17
  80d49c:	dfc00317 	ldw	ra,12(sp)
  80d4a0:	dc400217 	ldw	r17,8(sp)
  80d4a4:	dc000117 	ldw	r16,4(sp)
  80d4a8:	dec00404 	addi	sp,sp,16
  80d4ac:	080d2bc1 	jmpi	80d2bc <__fputwc>
  80d4b0:	8009883a 	mov	r4,r16
  80d4b4:	d9400015 	stw	r5,0(sp)
  80d4b8:	08093100 	call	809310 <__sinit>
  80d4bc:	d9400017 	ldw	r5,0(sp)
  80d4c0:	003feb06 	br	80d470 <__alt_mem_onchip_mem+0xff78d470>

0080d4c4 <__swbuf_r>:
  80d4c4:	defffb04 	addi	sp,sp,-20
  80d4c8:	dcc00315 	stw	r19,12(sp)
  80d4cc:	dc800215 	stw	r18,8(sp)
  80d4d0:	dc000015 	stw	r16,0(sp)
  80d4d4:	dfc00415 	stw	ra,16(sp)
  80d4d8:	dc400115 	stw	r17,4(sp)
  80d4dc:	2025883a 	mov	r18,r4
  80d4e0:	2827883a 	mov	r19,r5
  80d4e4:	3021883a 	mov	r16,r6
  80d4e8:	20000226 	beq	r4,zero,80d4f4 <__swbuf_r+0x30>
  80d4ec:	20800e17 	ldw	r2,56(r4)
  80d4f0:	10004226 	beq	r2,zero,80d5fc <__swbuf_r+0x138>
  80d4f4:	80800617 	ldw	r2,24(r16)
  80d4f8:	8100030b 	ldhu	r4,12(r16)
  80d4fc:	80800215 	stw	r2,8(r16)
  80d500:	2080020c 	andi	r2,r4,8
  80d504:	10003626 	beq	r2,zero,80d5e0 <__swbuf_r+0x11c>
  80d508:	80c00417 	ldw	r3,16(r16)
  80d50c:	18003426 	beq	r3,zero,80d5e0 <__swbuf_r+0x11c>
  80d510:	2088000c 	andi	r2,r4,8192
  80d514:	9c403fcc 	andi	r17,r19,255
  80d518:	10001a26 	beq	r2,zero,80d584 <__swbuf_r+0xc0>
  80d51c:	80800017 	ldw	r2,0(r16)
  80d520:	81000517 	ldw	r4,20(r16)
  80d524:	10c7c83a 	sub	r3,r2,r3
  80d528:	1900200e 	bge	r3,r4,80d5ac <__swbuf_r+0xe8>
  80d52c:	18c00044 	addi	r3,r3,1
  80d530:	81000217 	ldw	r4,8(r16)
  80d534:	11400044 	addi	r5,r2,1
  80d538:	81400015 	stw	r5,0(r16)
  80d53c:	213fffc4 	addi	r4,r4,-1
  80d540:	81000215 	stw	r4,8(r16)
  80d544:	14c00005 	stb	r19,0(r2)
  80d548:	80800517 	ldw	r2,20(r16)
  80d54c:	10c01e26 	beq	r2,r3,80d5c8 <__swbuf_r+0x104>
  80d550:	8080030b 	ldhu	r2,12(r16)
  80d554:	1080004c 	andi	r2,r2,1
  80d558:	10000226 	beq	r2,zero,80d564 <__swbuf_r+0xa0>
  80d55c:	00800284 	movi	r2,10
  80d560:	88801926 	beq	r17,r2,80d5c8 <__swbuf_r+0x104>
  80d564:	8805883a 	mov	r2,r17
  80d568:	dfc00417 	ldw	ra,16(sp)
  80d56c:	dcc00317 	ldw	r19,12(sp)
  80d570:	dc800217 	ldw	r18,8(sp)
  80d574:	dc400117 	ldw	r17,4(sp)
  80d578:	dc000017 	ldw	r16,0(sp)
  80d57c:	dec00504 	addi	sp,sp,20
  80d580:	f800283a 	ret
  80d584:	81401917 	ldw	r5,100(r16)
  80d588:	00b7ffc4 	movi	r2,-8193
  80d58c:	21080014 	ori	r4,r4,8192
  80d590:	2884703a 	and	r2,r5,r2
  80d594:	80801915 	stw	r2,100(r16)
  80d598:	80800017 	ldw	r2,0(r16)
  80d59c:	8100030d 	sth	r4,12(r16)
  80d5a0:	81000517 	ldw	r4,20(r16)
  80d5a4:	10c7c83a 	sub	r3,r2,r3
  80d5a8:	193fe016 	blt	r3,r4,80d52c <__alt_mem_onchip_mem+0xff78d52c>
  80d5ac:	800b883a 	mov	r5,r16
  80d5b0:	9009883a 	mov	r4,r18
  80d5b4:	0808f340 	call	808f34 <_fflush_r>
  80d5b8:	1000071e 	bne	r2,zero,80d5d8 <__swbuf_r+0x114>
  80d5bc:	80800017 	ldw	r2,0(r16)
  80d5c0:	00c00044 	movi	r3,1
  80d5c4:	003fda06 	br	80d530 <__alt_mem_onchip_mem+0xff78d530>
  80d5c8:	800b883a 	mov	r5,r16
  80d5cc:	9009883a 	mov	r4,r18
  80d5d0:	0808f340 	call	808f34 <_fflush_r>
  80d5d4:	103fe326 	beq	r2,zero,80d564 <__alt_mem_onchip_mem+0xff78d564>
  80d5d8:	00bfffc4 	movi	r2,-1
  80d5dc:	003fe206 	br	80d568 <__alt_mem_onchip_mem+0xff78d568>
  80d5e0:	800b883a 	mov	r5,r16
  80d5e4:	9009883a 	mov	r4,r18
  80d5e8:	08072e80 	call	8072e8 <__swsetup_r>
  80d5ec:	103ffa1e 	bne	r2,zero,80d5d8 <__alt_mem_onchip_mem+0xff78d5d8>
  80d5f0:	8100030b 	ldhu	r4,12(r16)
  80d5f4:	80c00417 	ldw	r3,16(r16)
  80d5f8:	003fc506 	br	80d510 <__alt_mem_onchip_mem+0xff78d510>
  80d5fc:	08093100 	call	809310 <__sinit>
  80d600:	003fbc06 	br	80d4f4 <__alt_mem_onchip_mem+0xff78d4f4>

0080d604 <__swbuf>:
  80d604:	00802074 	movhi	r2,129
  80d608:	109c3a04 	addi	r2,r2,28904
  80d60c:	280d883a 	mov	r6,r5
  80d610:	200b883a 	mov	r5,r4
  80d614:	11000017 	ldw	r4,0(r2)
  80d618:	080d4c41 	jmpi	80d4c4 <__swbuf_r>

0080d61c <_wcrtomb_r>:
  80d61c:	defff604 	addi	sp,sp,-40
  80d620:	00802074 	movhi	r2,129
  80d624:	dc800815 	stw	r18,32(sp)
  80d628:	dc400715 	stw	r17,28(sp)
  80d62c:	dc000615 	stw	r16,24(sp)
  80d630:	109c3e04 	addi	r2,r2,28920
  80d634:	dfc00915 	stw	ra,36(sp)
  80d638:	2021883a 	mov	r16,r4
  80d63c:	3823883a 	mov	r17,r7
  80d640:	14800017 	ldw	r18,0(r2)
  80d644:	28001426 	beq	r5,zero,80d698 <_wcrtomb_r+0x7c>
  80d648:	d9400415 	stw	r5,16(sp)
  80d64c:	d9800515 	stw	r6,20(sp)
  80d650:	0809f540 	call	809f54 <__locale_charset>
  80d654:	d9800517 	ldw	r6,20(sp)
  80d658:	d9400417 	ldw	r5,16(sp)
  80d65c:	100f883a 	mov	r7,r2
  80d660:	dc400015 	stw	r17,0(sp)
  80d664:	8009883a 	mov	r4,r16
  80d668:	903ee83a 	callr	r18
  80d66c:	00ffffc4 	movi	r3,-1
  80d670:	10c0031e 	bne	r2,r3,80d680 <_wcrtomb_r+0x64>
  80d674:	88000015 	stw	zero,0(r17)
  80d678:	00c02284 	movi	r3,138
  80d67c:	80c00015 	stw	r3,0(r16)
  80d680:	dfc00917 	ldw	ra,36(sp)
  80d684:	dc800817 	ldw	r18,32(sp)
  80d688:	dc400717 	ldw	r17,28(sp)
  80d68c:	dc000617 	ldw	r16,24(sp)
  80d690:	dec00a04 	addi	sp,sp,40
  80d694:	f800283a 	ret
  80d698:	0809f540 	call	809f54 <__locale_charset>
  80d69c:	100f883a 	mov	r7,r2
  80d6a0:	dc400015 	stw	r17,0(sp)
  80d6a4:	000d883a 	mov	r6,zero
  80d6a8:	d9400104 	addi	r5,sp,4
  80d6ac:	8009883a 	mov	r4,r16
  80d6b0:	903ee83a 	callr	r18
  80d6b4:	003fed06 	br	80d66c <__alt_mem_onchip_mem+0xff78d66c>

0080d6b8 <wcrtomb>:
  80d6b8:	defff604 	addi	sp,sp,-40
  80d6bc:	00802074 	movhi	r2,129
  80d6c0:	dc800615 	stw	r18,24(sp)
  80d6c4:	dc400515 	stw	r17,20(sp)
  80d6c8:	109c3a04 	addi	r2,r2,28904
  80d6cc:	dfc00915 	stw	ra,36(sp)
  80d6d0:	dd000815 	stw	r20,32(sp)
  80d6d4:	dcc00715 	stw	r19,28(sp)
  80d6d8:	dc000415 	stw	r16,16(sp)
  80d6dc:	3025883a 	mov	r18,r6
  80d6e0:	14400017 	ldw	r17,0(r2)
  80d6e4:	20001926 	beq	r4,zero,80d74c <wcrtomb+0x94>
  80d6e8:	00802074 	movhi	r2,129
  80d6ec:	109c3e04 	addi	r2,r2,28920
  80d6f0:	15000017 	ldw	r20,0(r2)
  80d6f4:	2021883a 	mov	r16,r4
  80d6f8:	2827883a 	mov	r19,r5
  80d6fc:	0809f540 	call	809f54 <__locale_charset>
  80d700:	100f883a 	mov	r7,r2
  80d704:	dc800015 	stw	r18,0(sp)
  80d708:	980d883a 	mov	r6,r19
  80d70c:	800b883a 	mov	r5,r16
  80d710:	8809883a 	mov	r4,r17
  80d714:	a03ee83a 	callr	r20
  80d718:	00ffffc4 	movi	r3,-1
  80d71c:	10c0031e 	bne	r2,r3,80d72c <wcrtomb+0x74>
  80d720:	90000015 	stw	zero,0(r18)
  80d724:	00c02284 	movi	r3,138
  80d728:	88c00015 	stw	r3,0(r17)
  80d72c:	dfc00917 	ldw	ra,36(sp)
  80d730:	dd000817 	ldw	r20,32(sp)
  80d734:	dcc00717 	ldw	r19,28(sp)
  80d738:	dc800617 	ldw	r18,24(sp)
  80d73c:	dc400517 	ldw	r17,20(sp)
  80d740:	dc000417 	ldw	r16,16(sp)
  80d744:	dec00a04 	addi	sp,sp,40
  80d748:	f800283a 	ret
  80d74c:	00802074 	movhi	r2,129
  80d750:	109c3e04 	addi	r2,r2,28920
  80d754:	14000017 	ldw	r16,0(r2)
  80d758:	0809f540 	call	809f54 <__locale_charset>
  80d75c:	100f883a 	mov	r7,r2
  80d760:	dc800015 	stw	r18,0(sp)
  80d764:	000d883a 	mov	r6,zero
  80d768:	d9400104 	addi	r5,sp,4
  80d76c:	8809883a 	mov	r4,r17
  80d770:	803ee83a 	callr	r16
  80d774:	003fe806 	br	80d718 <__alt_mem_onchip_mem+0xff78d718>

0080d778 <__ascii_wctomb>:
  80d778:	28000526 	beq	r5,zero,80d790 <__ascii_wctomb+0x18>
  80d77c:	00803fc4 	movi	r2,255
  80d780:	11800536 	bltu	r2,r6,80d798 <__ascii_wctomb+0x20>
  80d784:	29800005 	stb	r6,0(r5)
  80d788:	00800044 	movi	r2,1
  80d78c:	f800283a 	ret
  80d790:	0005883a 	mov	r2,zero
  80d794:	f800283a 	ret
  80d798:	00802284 	movi	r2,138
  80d79c:	20800015 	stw	r2,0(r4)
  80d7a0:	00bfffc4 	movi	r2,-1
  80d7a4:	f800283a 	ret

0080d7a8 <_wctomb_r>:
  80d7a8:	00802074 	movhi	r2,129
  80d7ac:	defff904 	addi	sp,sp,-28
  80d7b0:	109c3e04 	addi	r2,r2,28920
  80d7b4:	dfc00615 	stw	ra,24(sp)
  80d7b8:	dc400515 	stw	r17,20(sp)
  80d7bc:	dc000415 	stw	r16,16(sp)
  80d7c0:	3823883a 	mov	r17,r7
  80d7c4:	14000017 	ldw	r16,0(r2)
  80d7c8:	d9000115 	stw	r4,4(sp)
  80d7cc:	d9400215 	stw	r5,8(sp)
  80d7d0:	d9800315 	stw	r6,12(sp)
  80d7d4:	0809f540 	call	809f54 <__locale_charset>
  80d7d8:	d9800317 	ldw	r6,12(sp)
  80d7dc:	d9400217 	ldw	r5,8(sp)
  80d7e0:	d9000117 	ldw	r4,4(sp)
  80d7e4:	100f883a 	mov	r7,r2
  80d7e8:	dc400015 	stw	r17,0(sp)
  80d7ec:	803ee83a 	callr	r16
  80d7f0:	dfc00617 	ldw	ra,24(sp)
  80d7f4:	dc400517 	ldw	r17,20(sp)
  80d7f8:	dc000417 	ldw	r16,16(sp)
  80d7fc:	dec00704 	addi	sp,sp,28
  80d800:	f800283a 	ret

0080d804 <__udivdi3>:
  80d804:	defff504 	addi	sp,sp,-44
  80d808:	dcc00415 	stw	r19,16(sp)
  80d80c:	dc000115 	stw	r16,4(sp)
  80d810:	dfc00a15 	stw	ra,40(sp)
  80d814:	df000915 	stw	fp,36(sp)
  80d818:	ddc00815 	stw	r23,32(sp)
  80d81c:	dd800715 	stw	r22,28(sp)
  80d820:	dd400615 	stw	r21,24(sp)
  80d824:	dd000515 	stw	r20,20(sp)
  80d828:	dc800315 	stw	r18,12(sp)
  80d82c:	dc400215 	stw	r17,8(sp)
  80d830:	2027883a 	mov	r19,r4
  80d834:	2821883a 	mov	r16,r5
  80d838:	3800411e 	bne	r7,zero,80d940 <__udivdi3+0x13c>
  80d83c:	3023883a 	mov	r17,r6
  80d840:	2025883a 	mov	r18,r4
  80d844:	2980522e 	bgeu	r5,r6,80d990 <__udivdi3+0x18c>
  80d848:	00bfffd4 	movui	r2,65535
  80d84c:	282d883a 	mov	r22,r5
  80d850:	1180a836 	bltu	r2,r6,80daf4 <__udivdi3+0x2f0>
  80d854:	00803fc4 	movi	r2,255
  80d858:	1185803a 	cmpltu	r2,r2,r6
  80d85c:	100490fa 	slli	r2,r2,3
  80d860:	3086d83a 	srl	r3,r6,r2
  80d864:	01002074 	movhi	r4,129
  80d868:	21141e04 	addi	r4,r4,20600
  80d86c:	20c7883a 	add	r3,r4,r3
  80d870:	18c00003 	ldbu	r3,0(r3)
  80d874:	1885883a 	add	r2,r3,r2
  80d878:	00c00804 	movi	r3,32
  80d87c:	1887c83a 	sub	r3,r3,r2
  80d880:	18000526 	beq	r3,zero,80d898 <__udivdi3+0x94>
  80d884:	80e0983a 	sll	r16,r16,r3
  80d888:	9884d83a 	srl	r2,r19,r2
  80d88c:	30e2983a 	sll	r17,r6,r3
  80d890:	98e4983a 	sll	r18,r19,r3
  80d894:	142cb03a 	or	r22,r2,r16
  80d898:	882ad43a 	srli	r21,r17,16
  80d89c:	b009883a 	mov	r4,r22
  80d8a0:	8d3fffcc 	andi	r20,r17,65535
  80d8a4:	a80b883a 	mov	r5,r21
  80d8a8:	080e4100 	call	80e410 <__umodsi3>
  80d8ac:	b009883a 	mov	r4,r22
  80d8b0:	a80b883a 	mov	r5,r21
  80d8b4:	1027883a 	mov	r19,r2
  80d8b8:	080e3ac0 	call	80e3ac <__udivsi3>
  80d8bc:	102d883a 	mov	r22,r2
  80d8c0:	9826943a 	slli	r19,r19,16
  80d8c4:	9004d43a 	srli	r2,r18,16
  80d8c8:	a5a1383a 	mul	r16,r20,r22
  80d8cc:	14c4b03a 	or	r2,r2,r19
  80d8d0:	1400052e 	bgeu	r2,r16,80d8e8 <__udivdi3+0xe4>
  80d8d4:	1445883a 	add	r2,r2,r17
  80d8d8:	b0ffffc4 	addi	r3,r22,-1
  80d8dc:	14400136 	bltu	r2,r17,80d8e4 <__udivdi3+0xe0>
  80d8e0:	14012336 	bltu	r2,r16,80dd70 <__udivdi3+0x56c>
  80d8e4:	182d883a 	mov	r22,r3
  80d8e8:	1421c83a 	sub	r16,r2,r16
  80d8ec:	a80b883a 	mov	r5,r21
  80d8f0:	8009883a 	mov	r4,r16
  80d8f4:	080e4100 	call	80e410 <__umodsi3>
  80d8f8:	1027883a 	mov	r19,r2
  80d8fc:	a80b883a 	mov	r5,r21
  80d900:	8009883a 	mov	r4,r16
  80d904:	080e3ac0 	call	80e3ac <__udivsi3>
  80d908:	9826943a 	slli	r19,r19,16
  80d90c:	a0a9383a 	mul	r20,r20,r2
  80d910:	94bfffcc 	andi	r18,r18,65535
  80d914:	94e4b03a 	or	r18,r18,r19
  80d918:	9500052e 	bgeu	r18,r20,80d930 <__udivdi3+0x12c>
  80d91c:	8ca5883a 	add	r18,r17,r18
  80d920:	10ffffc4 	addi	r3,r2,-1
  80d924:	9440f136 	bltu	r18,r17,80dcec <__udivdi3+0x4e8>
  80d928:	9500f02e 	bgeu	r18,r20,80dcec <__udivdi3+0x4e8>
  80d92c:	10bfff84 	addi	r2,r2,-2
  80d930:	b00c943a 	slli	r6,r22,16
  80d934:	0007883a 	mov	r3,zero
  80d938:	3084b03a 	or	r2,r6,r2
  80d93c:	00005906 	br	80daa4 <__udivdi3+0x2a0>
  80d940:	29c05636 	bltu	r5,r7,80da9c <__udivdi3+0x298>
  80d944:	00bfffd4 	movui	r2,65535
  80d948:	11c0622e 	bgeu	r2,r7,80dad4 <__udivdi3+0x2d0>
  80d94c:	00804034 	movhi	r2,256
  80d950:	10bfffc4 	addi	r2,r2,-1
  80d954:	11c0ee36 	bltu	r2,r7,80dd10 <__udivdi3+0x50c>
  80d958:	00800404 	movi	r2,16
  80d95c:	3886d83a 	srl	r3,r7,r2
  80d960:	01002074 	movhi	r4,129
  80d964:	21141e04 	addi	r4,r4,20600
  80d968:	20c7883a 	add	r3,r4,r3
  80d96c:	18c00003 	ldbu	r3,0(r3)
  80d970:	05400804 	movi	r21,32
  80d974:	1885883a 	add	r2,r3,r2
  80d978:	a8abc83a 	sub	r21,r21,r2
  80d97c:	a800621e 	bne	r21,zero,80db08 <__udivdi3+0x304>
  80d980:	3c00e936 	bltu	r7,r16,80dd28 <__udivdi3+0x524>
  80d984:	9985403a 	cmpgeu	r2,r19,r6
  80d988:	0007883a 	mov	r3,zero
  80d98c:	00004506 	br	80daa4 <__udivdi3+0x2a0>
  80d990:	3000041e 	bne	r6,zero,80d9a4 <__udivdi3+0x1a0>
  80d994:	000b883a 	mov	r5,zero
  80d998:	01000044 	movi	r4,1
  80d99c:	080e3ac0 	call	80e3ac <__udivsi3>
  80d9a0:	1023883a 	mov	r17,r2
  80d9a4:	00bfffd4 	movui	r2,65535
  80d9a8:	14404e2e 	bgeu	r2,r17,80dae4 <__udivdi3+0x2e0>
  80d9ac:	00804034 	movhi	r2,256
  80d9b0:	10bfffc4 	addi	r2,r2,-1
  80d9b4:	1440d836 	bltu	r2,r17,80dd18 <__udivdi3+0x514>
  80d9b8:	00800404 	movi	r2,16
  80d9bc:	8886d83a 	srl	r3,r17,r2
  80d9c0:	01002074 	movhi	r4,129
  80d9c4:	21141e04 	addi	r4,r4,20600
  80d9c8:	20c7883a 	add	r3,r4,r3
  80d9cc:	18c00003 	ldbu	r3,0(r3)
  80d9d0:	1885883a 	add	r2,r3,r2
  80d9d4:	00c00804 	movi	r3,32
  80d9d8:	1887c83a 	sub	r3,r3,r2
  80d9dc:	18008f1e 	bne	r3,zero,80dc1c <__udivdi3+0x418>
  80d9e0:	882ad43a 	srli	r21,r17,16
  80d9e4:	8461c83a 	sub	r16,r16,r17
  80d9e8:	8d3fffcc 	andi	r20,r17,65535
  80d9ec:	00c00044 	movi	r3,1
  80d9f0:	8009883a 	mov	r4,r16
  80d9f4:	a80b883a 	mov	r5,r21
  80d9f8:	d8c00015 	stw	r3,0(sp)
  80d9fc:	080e4100 	call	80e410 <__umodsi3>
  80da00:	8009883a 	mov	r4,r16
  80da04:	a80b883a 	mov	r5,r21
  80da08:	1027883a 	mov	r19,r2
  80da0c:	080e3ac0 	call	80e3ac <__udivsi3>
  80da10:	9826943a 	slli	r19,r19,16
  80da14:	9008d43a 	srli	r4,r18,16
  80da18:	1521383a 	mul	r16,r2,r20
  80da1c:	102d883a 	mov	r22,r2
  80da20:	24c8b03a 	or	r4,r4,r19
  80da24:	d8c00017 	ldw	r3,0(sp)
  80da28:	2400052e 	bgeu	r4,r16,80da40 <__udivdi3+0x23c>
  80da2c:	2449883a 	add	r4,r4,r17
  80da30:	b0bfffc4 	addi	r2,r22,-1
  80da34:	24400136 	bltu	r4,r17,80da3c <__udivdi3+0x238>
  80da38:	2400ca36 	bltu	r4,r16,80dd64 <__udivdi3+0x560>
  80da3c:	102d883a 	mov	r22,r2
  80da40:	2421c83a 	sub	r16,r4,r16
  80da44:	a80b883a 	mov	r5,r21
  80da48:	8009883a 	mov	r4,r16
  80da4c:	d8c00015 	stw	r3,0(sp)
  80da50:	080e4100 	call	80e410 <__umodsi3>
  80da54:	1027883a 	mov	r19,r2
  80da58:	a80b883a 	mov	r5,r21
  80da5c:	8009883a 	mov	r4,r16
  80da60:	080e3ac0 	call	80e3ac <__udivsi3>
  80da64:	9826943a 	slli	r19,r19,16
  80da68:	1529383a 	mul	r20,r2,r20
  80da6c:	94bfffcc 	andi	r18,r18,65535
  80da70:	94e4b03a 	or	r18,r18,r19
  80da74:	d8c00017 	ldw	r3,0(sp)
  80da78:	9500052e 	bgeu	r18,r20,80da90 <__udivdi3+0x28c>
  80da7c:	8ca5883a 	add	r18,r17,r18
  80da80:	113fffc4 	addi	r4,r2,-1
  80da84:	94409736 	bltu	r18,r17,80dce4 <__udivdi3+0x4e0>
  80da88:	9500962e 	bgeu	r18,r20,80dce4 <__udivdi3+0x4e0>
  80da8c:	10bfff84 	addi	r2,r2,-2
  80da90:	b00c943a 	slli	r6,r22,16
  80da94:	3084b03a 	or	r2,r6,r2
  80da98:	00000206 	br	80daa4 <__udivdi3+0x2a0>
  80da9c:	0007883a 	mov	r3,zero
  80daa0:	0005883a 	mov	r2,zero
  80daa4:	dfc00a17 	ldw	ra,40(sp)
  80daa8:	df000917 	ldw	fp,36(sp)
  80daac:	ddc00817 	ldw	r23,32(sp)
  80dab0:	dd800717 	ldw	r22,28(sp)
  80dab4:	dd400617 	ldw	r21,24(sp)
  80dab8:	dd000517 	ldw	r20,20(sp)
  80dabc:	dcc00417 	ldw	r19,16(sp)
  80dac0:	dc800317 	ldw	r18,12(sp)
  80dac4:	dc400217 	ldw	r17,8(sp)
  80dac8:	dc000117 	ldw	r16,4(sp)
  80dacc:	dec00b04 	addi	sp,sp,44
  80dad0:	f800283a 	ret
  80dad4:	00803fc4 	movi	r2,255
  80dad8:	11c5803a 	cmpltu	r2,r2,r7
  80dadc:	100490fa 	slli	r2,r2,3
  80dae0:	003f9e06 	br	80d95c <__alt_mem_onchip_mem+0xff78d95c>
  80dae4:	00803fc4 	movi	r2,255
  80dae8:	1445803a 	cmpltu	r2,r2,r17
  80daec:	100490fa 	slli	r2,r2,3
  80daf0:	003fb206 	br	80d9bc <__alt_mem_onchip_mem+0xff78d9bc>
  80daf4:	00804034 	movhi	r2,256
  80daf8:	10bfffc4 	addi	r2,r2,-1
  80dafc:	11808836 	bltu	r2,r6,80dd20 <__udivdi3+0x51c>
  80db00:	00800404 	movi	r2,16
  80db04:	003f5606 	br	80d860 <__alt_mem_onchip_mem+0xff78d860>
  80db08:	30aed83a 	srl	r23,r6,r2
  80db0c:	3d4e983a 	sll	r7,r7,r21
  80db10:	80acd83a 	srl	r22,r16,r2
  80db14:	9884d83a 	srl	r2,r19,r2
  80db18:	3deeb03a 	or	r23,r7,r23
  80db1c:	b824d43a 	srli	r18,r23,16
  80db20:	8560983a 	sll	r16,r16,r21
  80db24:	b009883a 	mov	r4,r22
  80db28:	900b883a 	mov	r5,r18
  80db2c:	3568983a 	sll	r20,r6,r21
  80db30:	1420b03a 	or	r16,r2,r16
  80db34:	080e4100 	call	80e410 <__umodsi3>
  80db38:	b009883a 	mov	r4,r22
  80db3c:	900b883a 	mov	r5,r18
  80db40:	1023883a 	mov	r17,r2
  80db44:	080e3ac0 	call	80e3ac <__udivsi3>
  80db48:	8808943a 	slli	r4,r17,16
  80db4c:	bf3fffcc 	andi	fp,r23,65535
  80db50:	8006d43a 	srli	r3,r16,16
  80db54:	e0a3383a 	mul	r17,fp,r2
  80db58:	100d883a 	mov	r6,r2
  80db5c:	1906b03a 	or	r3,r3,r4
  80db60:	1c40042e 	bgeu	r3,r17,80db74 <__udivdi3+0x370>
  80db64:	1dc7883a 	add	r3,r3,r23
  80db68:	10bfffc4 	addi	r2,r2,-1
  80db6c:	1dc0752e 	bgeu	r3,r23,80dd44 <__udivdi3+0x540>
  80db70:	100d883a 	mov	r6,r2
  80db74:	1c63c83a 	sub	r17,r3,r17
  80db78:	900b883a 	mov	r5,r18
  80db7c:	8809883a 	mov	r4,r17
  80db80:	d9800015 	stw	r6,0(sp)
  80db84:	080e4100 	call	80e410 <__umodsi3>
  80db88:	102d883a 	mov	r22,r2
  80db8c:	8809883a 	mov	r4,r17
  80db90:	900b883a 	mov	r5,r18
  80db94:	080e3ac0 	call	80e3ac <__udivsi3>
  80db98:	b02c943a 	slli	r22,r22,16
  80db9c:	e089383a 	mul	r4,fp,r2
  80dba0:	843fffcc 	andi	r16,r16,65535
  80dba4:	85a0b03a 	or	r16,r16,r22
  80dba8:	d9800017 	ldw	r6,0(sp)
  80dbac:	8100042e 	bgeu	r16,r4,80dbc0 <__udivdi3+0x3bc>
  80dbb0:	85e1883a 	add	r16,r16,r23
  80dbb4:	10ffffc4 	addi	r3,r2,-1
  80dbb8:	85c05e2e 	bgeu	r16,r23,80dd34 <__udivdi3+0x530>
  80dbbc:	1805883a 	mov	r2,r3
  80dbc0:	300c943a 	slli	r6,r6,16
  80dbc4:	a17fffcc 	andi	r5,r20,65535
  80dbc8:	a028d43a 	srli	r20,r20,16
  80dbcc:	3084b03a 	or	r2,r6,r2
  80dbd0:	10ffffcc 	andi	r3,r2,65535
  80dbd4:	100cd43a 	srli	r6,r2,16
  80dbd8:	194f383a 	mul	r7,r3,r5
  80dbdc:	1d07383a 	mul	r3,r3,r20
  80dbe0:	314b383a 	mul	r5,r6,r5
  80dbe4:	3810d43a 	srli	r8,r7,16
  80dbe8:	8121c83a 	sub	r16,r16,r4
  80dbec:	1947883a 	add	r3,r3,r5
  80dbf0:	40c7883a 	add	r3,r8,r3
  80dbf4:	350d383a 	mul	r6,r6,r20
  80dbf8:	1940022e 	bgeu	r3,r5,80dc04 <__udivdi3+0x400>
  80dbfc:	01000074 	movhi	r4,1
  80dc00:	310d883a 	add	r6,r6,r4
  80dc04:	1828d43a 	srli	r20,r3,16
  80dc08:	a18d883a 	add	r6,r20,r6
  80dc0c:	81803e36 	bltu	r16,r6,80dd08 <__udivdi3+0x504>
  80dc10:	81803826 	beq	r16,r6,80dcf4 <__udivdi3+0x4f0>
  80dc14:	0007883a 	mov	r3,zero
  80dc18:	003fa206 	br	80daa4 <__alt_mem_onchip_mem+0xff78daa4>
  80dc1c:	88e2983a 	sll	r17,r17,r3
  80dc20:	80a8d83a 	srl	r20,r16,r2
  80dc24:	80e0983a 	sll	r16,r16,r3
  80dc28:	882ad43a 	srli	r21,r17,16
  80dc2c:	9884d83a 	srl	r2,r19,r2
  80dc30:	a009883a 	mov	r4,r20
  80dc34:	a80b883a 	mov	r5,r21
  80dc38:	142eb03a 	or	r23,r2,r16
  80dc3c:	98e4983a 	sll	r18,r19,r3
  80dc40:	080e4100 	call	80e410 <__umodsi3>
  80dc44:	a009883a 	mov	r4,r20
  80dc48:	a80b883a 	mov	r5,r21
  80dc4c:	1021883a 	mov	r16,r2
  80dc50:	080e3ac0 	call	80e3ac <__udivsi3>
  80dc54:	1039883a 	mov	fp,r2
  80dc58:	8d3fffcc 	andi	r20,r17,65535
  80dc5c:	8020943a 	slli	r16,r16,16
  80dc60:	b804d43a 	srli	r2,r23,16
  80dc64:	a72d383a 	mul	r22,r20,fp
  80dc68:	1404b03a 	or	r2,r2,r16
  80dc6c:	1580062e 	bgeu	r2,r22,80dc88 <__udivdi3+0x484>
  80dc70:	1445883a 	add	r2,r2,r17
  80dc74:	e0ffffc4 	addi	r3,fp,-1
  80dc78:	14403836 	bltu	r2,r17,80dd5c <__udivdi3+0x558>
  80dc7c:	1580372e 	bgeu	r2,r22,80dd5c <__udivdi3+0x558>
  80dc80:	e73fff84 	addi	fp,fp,-2
  80dc84:	1445883a 	add	r2,r2,r17
  80dc88:	15adc83a 	sub	r22,r2,r22
  80dc8c:	a80b883a 	mov	r5,r21
  80dc90:	b009883a 	mov	r4,r22
  80dc94:	080e4100 	call	80e410 <__umodsi3>
  80dc98:	1027883a 	mov	r19,r2
  80dc9c:	b009883a 	mov	r4,r22
  80dca0:	a80b883a 	mov	r5,r21
  80dca4:	080e3ac0 	call	80e3ac <__udivsi3>
  80dca8:	9826943a 	slli	r19,r19,16
  80dcac:	a0a1383a 	mul	r16,r20,r2
  80dcb0:	b93fffcc 	andi	r4,r23,65535
  80dcb4:	24c8b03a 	or	r4,r4,r19
  80dcb8:	2400062e 	bgeu	r4,r16,80dcd4 <__udivdi3+0x4d0>
  80dcbc:	2449883a 	add	r4,r4,r17
  80dcc0:	10ffffc4 	addi	r3,r2,-1
  80dcc4:	24402336 	bltu	r4,r17,80dd54 <__udivdi3+0x550>
  80dcc8:	2400222e 	bgeu	r4,r16,80dd54 <__udivdi3+0x550>
  80dccc:	10bfff84 	addi	r2,r2,-2
  80dcd0:	2449883a 	add	r4,r4,r17
  80dcd4:	e038943a 	slli	fp,fp,16
  80dcd8:	2421c83a 	sub	r16,r4,r16
  80dcdc:	e086b03a 	or	r3,fp,r2
  80dce0:	003f4306 	br	80d9f0 <__alt_mem_onchip_mem+0xff78d9f0>
  80dce4:	2005883a 	mov	r2,r4
  80dce8:	003f6906 	br	80da90 <__alt_mem_onchip_mem+0xff78da90>
  80dcec:	1805883a 	mov	r2,r3
  80dcf0:	003f0f06 	br	80d930 <__alt_mem_onchip_mem+0xff78d930>
  80dcf4:	1806943a 	slli	r3,r3,16
  80dcf8:	9d66983a 	sll	r19,r19,r21
  80dcfc:	39ffffcc 	andi	r7,r7,65535
  80dd00:	19c7883a 	add	r3,r3,r7
  80dd04:	98ffc32e 	bgeu	r19,r3,80dc14 <__alt_mem_onchip_mem+0xff78dc14>
  80dd08:	10bfffc4 	addi	r2,r2,-1
  80dd0c:	003fc106 	br	80dc14 <__alt_mem_onchip_mem+0xff78dc14>
  80dd10:	00800604 	movi	r2,24
  80dd14:	003f1106 	br	80d95c <__alt_mem_onchip_mem+0xff78d95c>
  80dd18:	00800604 	movi	r2,24
  80dd1c:	003f2706 	br	80d9bc <__alt_mem_onchip_mem+0xff78d9bc>
  80dd20:	00800604 	movi	r2,24
  80dd24:	003ece06 	br	80d860 <__alt_mem_onchip_mem+0xff78d860>
  80dd28:	0007883a 	mov	r3,zero
  80dd2c:	00800044 	movi	r2,1
  80dd30:	003f5c06 	br	80daa4 <__alt_mem_onchip_mem+0xff78daa4>
  80dd34:	813fa12e 	bgeu	r16,r4,80dbbc <__alt_mem_onchip_mem+0xff78dbbc>
  80dd38:	10bfff84 	addi	r2,r2,-2
  80dd3c:	85e1883a 	add	r16,r16,r23
  80dd40:	003f9f06 	br	80dbc0 <__alt_mem_onchip_mem+0xff78dbc0>
  80dd44:	1c7f8a2e 	bgeu	r3,r17,80db70 <__alt_mem_onchip_mem+0xff78db70>
  80dd48:	31bfff84 	addi	r6,r6,-2
  80dd4c:	1dc7883a 	add	r3,r3,r23
  80dd50:	003f8806 	br	80db74 <__alt_mem_onchip_mem+0xff78db74>
  80dd54:	1805883a 	mov	r2,r3
  80dd58:	003fde06 	br	80dcd4 <__alt_mem_onchip_mem+0xff78dcd4>
  80dd5c:	1839883a 	mov	fp,r3
  80dd60:	003fc906 	br	80dc88 <__alt_mem_onchip_mem+0xff78dc88>
  80dd64:	b5bfff84 	addi	r22,r22,-2
  80dd68:	2449883a 	add	r4,r4,r17
  80dd6c:	003f3406 	br	80da40 <__alt_mem_onchip_mem+0xff78da40>
  80dd70:	b5bfff84 	addi	r22,r22,-2
  80dd74:	1445883a 	add	r2,r2,r17
  80dd78:	003edb06 	br	80d8e8 <__alt_mem_onchip_mem+0xff78d8e8>

0080dd7c <__umoddi3>:
  80dd7c:	defff404 	addi	sp,sp,-48
  80dd80:	df000a15 	stw	fp,40(sp)
  80dd84:	dc400315 	stw	r17,12(sp)
  80dd88:	dc000215 	stw	r16,8(sp)
  80dd8c:	dfc00b15 	stw	ra,44(sp)
  80dd90:	ddc00915 	stw	r23,36(sp)
  80dd94:	dd800815 	stw	r22,32(sp)
  80dd98:	dd400715 	stw	r21,28(sp)
  80dd9c:	dd000615 	stw	r20,24(sp)
  80dda0:	dcc00515 	stw	r19,20(sp)
  80dda4:	dc800415 	stw	r18,16(sp)
  80dda8:	2021883a 	mov	r16,r4
  80ddac:	2823883a 	mov	r17,r5
  80ddb0:	2839883a 	mov	fp,r5
  80ddb4:	38003c1e 	bne	r7,zero,80dea8 <__umoddi3+0x12c>
  80ddb8:	3027883a 	mov	r19,r6
  80ddbc:	2029883a 	mov	r20,r4
  80ddc0:	2980512e 	bgeu	r5,r6,80df08 <__umoddi3+0x18c>
  80ddc4:	00bfffd4 	movui	r2,65535
  80ddc8:	11809a36 	bltu	r2,r6,80e034 <__umoddi3+0x2b8>
  80ddcc:	01003fc4 	movi	r4,255
  80ddd0:	2189803a 	cmpltu	r4,r4,r6
  80ddd4:	200890fa 	slli	r4,r4,3
  80ddd8:	3104d83a 	srl	r2,r6,r4
  80dddc:	00c02074 	movhi	r3,129
  80dde0:	18d41e04 	addi	r3,r3,20600
  80dde4:	1885883a 	add	r2,r3,r2
  80dde8:	10c00003 	ldbu	r3,0(r2)
  80ddec:	00800804 	movi	r2,32
  80ddf0:	1909883a 	add	r4,r3,r4
  80ddf4:	1125c83a 	sub	r18,r2,r4
  80ddf8:	90000526 	beq	r18,zero,80de10 <__umoddi3+0x94>
  80ddfc:	8ca2983a 	sll	r17,r17,r18
  80de00:	8108d83a 	srl	r4,r16,r4
  80de04:	34a6983a 	sll	r19,r6,r18
  80de08:	84a8983a 	sll	r20,r16,r18
  80de0c:	2478b03a 	or	fp,r4,r17
  80de10:	982ed43a 	srli	r23,r19,16
  80de14:	e009883a 	mov	r4,fp
  80de18:	9dbfffcc 	andi	r22,r19,65535
  80de1c:	b80b883a 	mov	r5,r23
  80de20:	080e4100 	call	80e410 <__umodsi3>
  80de24:	e009883a 	mov	r4,fp
  80de28:	b80b883a 	mov	r5,r23
  80de2c:	102b883a 	mov	r21,r2
  80de30:	080e3ac0 	call	80e3ac <__udivsi3>
  80de34:	a806943a 	slli	r3,r21,16
  80de38:	a008d43a 	srli	r4,r20,16
  80de3c:	b085383a 	mul	r2,r22,r2
  80de40:	20c8b03a 	or	r4,r4,r3
  80de44:	2080032e 	bgeu	r4,r2,80de54 <__umoddi3+0xd8>
  80de48:	24c9883a 	add	r4,r4,r19
  80de4c:	24c00136 	bltu	r4,r19,80de54 <__umoddi3+0xd8>
  80de50:	20811036 	bltu	r4,r2,80e294 <__umoddi3+0x518>
  80de54:	20abc83a 	sub	r21,r4,r2
  80de58:	b80b883a 	mov	r5,r23
  80de5c:	a809883a 	mov	r4,r21
  80de60:	080e4100 	call	80e410 <__umodsi3>
  80de64:	1023883a 	mov	r17,r2
  80de68:	b80b883a 	mov	r5,r23
  80de6c:	a809883a 	mov	r4,r21
  80de70:	080e3ac0 	call	80e3ac <__udivsi3>
  80de74:	8822943a 	slli	r17,r17,16
  80de78:	b085383a 	mul	r2,r22,r2
  80de7c:	a0ffffcc 	andi	r3,r20,65535
  80de80:	1c46b03a 	or	r3,r3,r17
  80de84:	1880042e 	bgeu	r3,r2,80de98 <__umoddi3+0x11c>
  80de88:	1cc7883a 	add	r3,r3,r19
  80de8c:	1cc00236 	bltu	r3,r19,80de98 <__umoddi3+0x11c>
  80de90:	1880012e 	bgeu	r3,r2,80de98 <__umoddi3+0x11c>
  80de94:	1cc7883a 	add	r3,r3,r19
  80de98:	1885c83a 	sub	r2,r3,r2
  80de9c:	1484d83a 	srl	r2,r2,r18
  80dea0:	0007883a 	mov	r3,zero
  80dea4:	00004f06 	br	80dfe4 <__umoddi3+0x268>
  80dea8:	29c04c36 	bltu	r5,r7,80dfdc <__umoddi3+0x260>
  80deac:	00bfffd4 	movui	r2,65535
  80deb0:	11c0582e 	bgeu	r2,r7,80e014 <__umoddi3+0x298>
  80deb4:	00804034 	movhi	r2,256
  80deb8:	10bfffc4 	addi	r2,r2,-1
  80debc:	11c0e736 	bltu	r2,r7,80e25c <__umoddi3+0x4e0>
  80dec0:	01000404 	movi	r4,16
  80dec4:	3904d83a 	srl	r2,r7,r4
  80dec8:	00c02074 	movhi	r3,129
  80decc:	18d41e04 	addi	r3,r3,20600
  80ded0:	1885883a 	add	r2,r3,r2
  80ded4:	14c00003 	ldbu	r19,0(r2)
  80ded8:	00c00804 	movi	r3,32
  80dedc:	9927883a 	add	r19,r19,r4
  80dee0:	1ce9c83a 	sub	r20,r3,r19
  80dee4:	a000581e 	bne	r20,zero,80e048 <__umoddi3+0x2cc>
  80dee8:	3c400136 	bltu	r7,r17,80def0 <__umoddi3+0x174>
  80deec:	8180eb36 	bltu	r16,r6,80e29c <__umoddi3+0x520>
  80def0:	8185c83a 	sub	r2,r16,r6
  80def4:	89e3c83a 	sub	r17,r17,r7
  80def8:	8089803a 	cmpltu	r4,r16,r2
  80defc:	8939c83a 	sub	fp,r17,r4
  80df00:	e007883a 	mov	r3,fp
  80df04:	00003706 	br	80dfe4 <__umoddi3+0x268>
  80df08:	3000041e 	bne	r6,zero,80df1c <__umoddi3+0x1a0>
  80df0c:	000b883a 	mov	r5,zero
  80df10:	01000044 	movi	r4,1
  80df14:	080e3ac0 	call	80e3ac <__udivsi3>
  80df18:	1027883a 	mov	r19,r2
  80df1c:	00bfffd4 	movui	r2,65535
  80df20:	14c0402e 	bgeu	r2,r19,80e024 <__umoddi3+0x2a8>
  80df24:	00804034 	movhi	r2,256
  80df28:	10bfffc4 	addi	r2,r2,-1
  80df2c:	14c0cd36 	bltu	r2,r19,80e264 <__umoddi3+0x4e8>
  80df30:	00800404 	movi	r2,16
  80df34:	9886d83a 	srl	r3,r19,r2
  80df38:	01002074 	movhi	r4,129
  80df3c:	21141e04 	addi	r4,r4,20600
  80df40:	20c7883a 	add	r3,r4,r3
  80df44:	18c00003 	ldbu	r3,0(r3)
  80df48:	1887883a 	add	r3,r3,r2
  80df4c:	00800804 	movi	r2,32
  80df50:	10e5c83a 	sub	r18,r2,r3
  80df54:	9000901e 	bne	r18,zero,80e198 <__umoddi3+0x41c>
  80df58:	982cd43a 	srli	r22,r19,16
  80df5c:	8ce3c83a 	sub	r17,r17,r19
  80df60:	9d7fffcc 	andi	r21,r19,65535
  80df64:	b00b883a 	mov	r5,r22
  80df68:	8809883a 	mov	r4,r17
  80df6c:	080e4100 	call	80e410 <__umodsi3>
  80df70:	8809883a 	mov	r4,r17
  80df74:	b00b883a 	mov	r5,r22
  80df78:	1021883a 	mov	r16,r2
  80df7c:	080e3ac0 	call	80e3ac <__udivsi3>
  80df80:	8006943a 	slli	r3,r16,16
  80df84:	a008d43a 	srli	r4,r20,16
  80df88:	1545383a 	mul	r2,r2,r21
  80df8c:	20c8b03a 	or	r4,r4,r3
  80df90:	2080042e 	bgeu	r4,r2,80dfa4 <__umoddi3+0x228>
  80df94:	24c9883a 	add	r4,r4,r19
  80df98:	24c00236 	bltu	r4,r19,80dfa4 <__umoddi3+0x228>
  80df9c:	2080012e 	bgeu	r4,r2,80dfa4 <__umoddi3+0x228>
  80dfa0:	24c9883a 	add	r4,r4,r19
  80dfa4:	20a1c83a 	sub	r16,r4,r2
  80dfa8:	b00b883a 	mov	r5,r22
  80dfac:	8009883a 	mov	r4,r16
  80dfb0:	080e4100 	call	80e410 <__umodsi3>
  80dfb4:	1023883a 	mov	r17,r2
  80dfb8:	b00b883a 	mov	r5,r22
  80dfbc:	8009883a 	mov	r4,r16
  80dfc0:	080e3ac0 	call	80e3ac <__udivsi3>
  80dfc4:	8822943a 	slli	r17,r17,16
  80dfc8:	1545383a 	mul	r2,r2,r21
  80dfcc:	a53fffcc 	andi	r20,r20,65535
  80dfd0:	a446b03a 	or	r3,r20,r17
  80dfd4:	18bfb02e 	bgeu	r3,r2,80de98 <__alt_mem_onchip_mem+0xff78de98>
  80dfd8:	003fab06 	br	80de88 <__alt_mem_onchip_mem+0xff78de88>
  80dfdc:	2005883a 	mov	r2,r4
  80dfe0:	2807883a 	mov	r3,r5
  80dfe4:	dfc00b17 	ldw	ra,44(sp)
  80dfe8:	df000a17 	ldw	fp,40(sp)
  80dfec:	ddc00917 	ldw	r23,36(sp)
  80dff0:	dd800817 	ldw	r22,32(sp)
  80dff4:	dd400717 	ldw	r21,28(sp)
  80dff8:	dd000617 	ldw	r20,24(sp)
  80dffc:	dcc00517 	ldw	r19,20(sp)
  80e000:	dc800417 	ldw	r18,16(sp)
  80e004:	dc400317 	ldw	r17,12(sp)
  80e008:	dc000217 	ldw	r16,8(sp)
  80e00c:	dec00c04 	addi	sp,sp,48
  80e010:	f800283a 	ret
  80e014:	04c03fc4 	movi	r19,255
  80e018:	99c9803a 	cmpltu	r4,r19,r7
  80e01c:	200890fa 	slli	r4,r4,3
  80e020:	003fa806 	br	80dec4 <__alt_mem_onchip_mem+0xff78dec4>
  80e024:	00803fc4 	movi	r2,255
  80e028:	14c5803a 	cmpltu	r2,r2,r19
  80e02c:	100490fa 	slli	r2,r2,3
  80e030:	003fc006 	br	80df34 <__alt_mem_onchip_mem+0xff78df34>
  80e034:	00804034 	movhi	r2,256
  80e038:	10bfffc4 	addi	r2,r2,-1
  80e03c:	11808b36 	bltu	r2,r6,80e26c <__umoddi3+0x4f0>
  80e040:	01000404 	movi	r4,16
  80e044:	003f6406 	br	80ddd8 <__alt_mem_onchip_mem+0xff78ddd8>
  80e048:	34c4d83a 	srl	r2,r6,r19
  80e04c:	3d0e983a 	sll	r7,r7,r20
  80e050:	8cf8d83a 	srl	fp,r17,r19
  80e054:	8d10983a 	sll	r8,r17,r20
  80e058:	38aab03a 	or	r21,r7,r2
  80e05c:	a82cd43a 	srli	r22,r21,16
  80e060:	84e2d83a 	srl	r17,r16,r19
  80e064:	e009883a 	mov	r4,fp
  80e068:	b00b883a 	mov	r5,r22
  80e06c:	8a22b03a 	or	r17,r17,r8
  80e070:	3524983a 	sll	r18,r6,r20
  80e074:	080e4100 	call	80e410 <__umodsi3>
  80e078:	e009883a 	mov	r4,fp
  80e07c:	b00b883a 	mov	r5,r22
  80e080:	102f883a 	mov	r23,r2
  80e084:	080e3ac0 	call	80e3ac <__udivsi3>
  80e088:	100d883a 	mov	r6,r2
  80e08c:	b808943a 	slli	r4,r23,16
  80e090:	aa3fffcc 	andi	r8,r21,65535
  80e094:	8804d43a 	srli	r2,r17,16
  80e098:	41af383a 	mul	r23,r8,r6
  80e09c:	8520983a 	sll	r16,r16,r20
  80e0a0:	1104b03a 	or	r2,r2,r4
  80e0a4:	15c0042e 	bgeu	r2,r23,80e0b8 <__umoddi3+0x33c>
  80e0a8:	1545883a 	add	r2,r2,r21
  80e0ac:	30ffffc4 	addi	r3,r6,-1
  80e0b0:	1540742e 	bgeu	r2,r21,80e284 <__umoddi3+0x508>
  80e0b4:	180d883a 	mov	r6,r3
  80e0b8:	15efc83a 	sub	r23,r2,r23
  80e0bc:	b00b883a 	mov	r5,r22
  80e0c0:	b809883a 	mov	r4,r23
  80e0c4:	d9800115 	stw	r6,4(sp)
  80e0c8:	da000015 	stw	r8,0(sp)
  80e0cc:	080e4100 	call	80e410 <__umodsi3>
  80e0d0:	b00b883a 	mov	r5,r22
  80e0d4:	b809883a 	mov	r4,r23
  80e0d8:	1039883a 	mov	fp,r2
  80e0dc:	080e3ac0 	call	80e3ac <__udivsi3>
  80e0e0:	da000017 	ldw	r8,0(sp)
  80e0e4:	e038943a 	slli	fp,fp,16
  80e0e8:	100b883a 	mov	r5,r2
  80e0ec:	4089383a 	mul	r4,r8,r2
  80e0f0:	8a3fffcc 	andi	r8,r17,65535
  80e0f4:	4710b03a 	or	r8,r8,fp
  80e0f8:	d9800117 	ldw	r6,4(sp)
  80e0fc:	4100042e 	bgeu	r8,r4,80e110 <__umoddi3+0x394>
  80e100:	4551883a 	add	r8,r8,r21
  80e104:	10bfffc4 	addi	r2,r2,-1
  80e108:	45405a2e 	bgeu	r8,r21,80e274 <__umoddi3+0x4f8>
  80e10c:	100b883a 	mov	r5,r2
  80e110:	300c943a 	slli	r6,r6,16
  80e114:	91ffffcc 	andi	r7,r18,65535
  80e118:	9004d43a 	srli	r2,r18,16
  80e11c:	314cb03a 	or	r6,r6,r5
  80e120:	317fffcc 	andi	r5,r6,65535
  80e124:	300cd43a 	srli	r6,r6,16
  80e128:	29d3383a 	mul	r9,r5,r7
  80e12c:	288b383a 	mul	r5,r5,r2
  80e130:	31cf383a 	mul	r7,r6,r7
  80e134:	4806d43a 	srli	r3,r9,16
  80e138:	4111c83a 	sub	r8,r8,r4
  80e13c:	29cb883a 	add	r5,r5,r7
  80e140:	194b883a 	add	r5,r3,r5
  80e144:	3085383a 	mul	r2,r6,r2
  80e148:	29c0022e 	bgeu	r5,r7,80e154 <__umoddi3+0x3d8>
  80e14c:	00c00074 	movhi	r3,1
  80e150:	10c5883a 	add	r2,r2,r3
  80e154:	2808d43a 	srli	r4,r5,16
  80e158:	280a943a 	slli	r5,r5,16
  80e15c:	4a7fffcc 	andi	r9,r9,65535
  80e160:	2085883a 	add	r2,r4,r2
  80e164:	2a4b883a 	add	r5,r5,r9
  80e168:	40803636 	bltu	r8,r2,80e244 <__umoddi3+0x4c8>
  80e16c:	40804d26 	beq	r8,r2,80e2a4 <__umoddi3+0x528>
  80e170:	4089c83a 	sub	r4,r8,r2
  80e174:	280f883a 	mov	r7,r5
  80e178:	81cfc83a 	sub	r7,r16,r7
  80e17c:	81c7803a 	cmpltu	r3,r16,r7
  80e180:	20c7c83a 	sub	r3,r4,r3
  80e184:	1cc4983a 	sll	r2,r3,r19
  80e188:	3d0ed83a 	srl	r7,r7,r20
  80e18c:	1d06d83a 	srl	r3,r3,r20
  80e190:	11c4b03a 	or	r2,r2,r7
  80e194:	003f9306 	br	80dfe4 <__alt_mem_onchip_mem+0xff78dfe4>
  80e198:	9ca6983a 	sll	r19,r19,r18
  80e19c:	88e8d83a 	srl	r20,r17,r3
  80e1a0:	80c4d83a 	srl	r2,r16,r3
  80e1a4:	982cd43a 	srli	r22,r19,16
  80e1a8:	8ca2983a 	sll	r17,r17,r18
  80e1ac:	a009883a 	mov	r4,r20
  80e1b0:	b00b883a 	mov	r5,r22
  80e1b4:	1478b03a 	or	fp,r2,r17
  80e1b8:	080e4100 	call	80e410 <__umodsi3>
  80e1bc:	a009883a 	mov	r4,r20
  80e1c0:	b00b883a 	mov	r5,r22
  80e1c4:	1023883a 	mov	r17,r2
  80e1c8:	080e3ac0 	call	80e3ac <__udivsi3>
  80e1cc:	9d7fffcc 	andi	r21,r19,65535
  80e1d0:	880a943a 	slli	r5,r17,16
  80e1d4:	e008d43a 	srli	r4,fp,16
  80e1d8:	a885383a 	mul	r2,r21,r2
  80e1dc:	84a8983a 	sll	r20,r16,r18
  80e1e0:	2148b03a 	or	r4,r4,r5
  80e1e4:	2080042e 	bgeu	r4,r2,80e1f8 <__umoddi3+0x47c>
  80e1e8:	24c9883a 	add	r4,r4,r19
  80e1ec:	24c00236 	bltu	r4,r19,80e1f8 <__umoddi3+0x47c>
  80e1f0:	2080012e 	bgeu	r4,r2,80e1f8 <__umoddi3+0x47c>
  80e1f4:	24c9883a 	add	r4,r4,r19
  80e1f8:	20a3c83a 	sub	r17,r4,r2
  80e1fc:	b00b883a 	mov	r5,r22
  80e200:	8809883a 	mov	r4,r17
  80e204:	080e4100 	call	80e410 <__umodsi3>
  80e208:	102f883a 	mov	r23,r2
  80e20c:	8809883a 	mov	r4,r17
  80e210:	b00b883a 	mov	r5,r22
  80e214:	080e3ac0 	call	80e3ac <__udivsi3>
  80e218:	b82e943a 	slli	r23,r23,16
  80e21c:	a885383a 	mul	r2,r21,r2
  80e220:	e13fffcc 	andi	r4,fp,65535
  80e224:	25c8b03a 	or	r4,r4,r23
  80e228:	2080042e 	bgeu	r4,r2,80e23c <__umoddi3+0x4c0>
  80e22c:	24c9883a 	add	r4,r4,r19
  80e230:	24c00236 	bltu	r4,r19,80e23c <__umoddi3+0x4c0>
  80e234:	2080012e 	bgeu	r4,r2,80e23c <__umoddi3+0x4c0>
  80e238:	24c9883a 	add	r4,r4,r19
  80e23c:	20a3c83a 	sub	r17,r4,r2
  80e240:	003f4806 	br	80df64 <__alt_mem_onchip_mem+0xff78df64>
  80e244:	2c8fc83a 	sub	r7,r5,r18
  80e248:	1545c83a 	sub	r2,r2,r21
  80e24c:	29cb803a 	cmpltu	r5,r5,r7
  80e250:	1145c83a 	sub	r2,r2,r5
  80e254:	4089c83a 	sub	r4,r8,r2
  80e258:	003fc706 	br	80e178 <__alt_mem_onchip_mem+0xff78e178>
  80e25c:	01000604 	movi	r4,24
  80e260:	003f1806 	br	80dec4 <__alt_mem_onchip_mem+0xff78dec4>
  80e264:	00800604 	movi	r2,24
  80e268:	003f3206 	br	80df34 <__alt_mem_onchip_mem+0xff78df34>
  80e26c:	01000604 	movi	r4,24
  80e270:	003ed906 	br	80ddd8 <__alt_mem_onchip_mem+0xff78ddd8>
  80e274:	413fa52e 	bgeu	r8,r4,80e10c <__alt_mem_onchip_mem+0xff78e10c>
  80e278:	297fff84 	addi	r5,r5,-2
  80e27c:	4551883a 	add	r8,r8,r21
  80e280:	003fa306 	br	80e110 <__alt_mem_onchip_mem+0xff78e110>
  80e284:	15ff8b2e 	bgeu	r2,r23,80e0b4 <__alt_mem_onchip_mem+0xff78e0b4>
  80e288:	31bfff84 	addi	r6,r6,-2
  80e28c:	1545883a 	add	r2,r2,r21
  80e290:	003f8906 	br	80e0b8 <__alt_mem_onchip_mem+0xff78e0b8>
  80e294:	24c9883a 	add	r4,r4,r19
  80e298:	003eee06 	br	80de54 <__alt_mem_onchip_mem+0xff78de54>
  80e29c:	8005883a 	mov	r2,r16
  80e2a0:	003f1706 	br	80df00 <__alt_mem_onchip_mem+0xff78df00>
  80e2a4:	817fe736 	bltu	r16,r5,80e244 <__alt_mem_onchip_mem+0xff78e244>
  80e2a8:	280f883a 	mov	r7,r5
  80e2ac:	0009883a 	mov	r4,zero
  80e2b0:	003fb106 	br	80e178 <__alt_mem_onchip_mem+0xff78e178>

0080e2b4 <__divsi3>:
  80e2b4:	20001b16 	blt	r4,zero,80e324 <__divsi3+0x70>
  80e2b8:	000f883a 	mov	r7,zero
  80e2bc:	28001616 	blt	r5,zero,80e318 <__divsi3+0x64>
  80e2c0:	200d883a 	mov	r6,r4
  80e2c4:	29001a2e 	bgeu	r5,r4,80e330 <__divsi3+0x7c>
  80e2c8:	00800804 	movi	r2,32
  80e2cc:	00c00044 	movi	r3,1
  80e2d0:	00000106 	br	80e2d8 <__divsi3+0x24>
  80e2d4:	10000d26 	beq	r2,zero,80e30c <__divsi3+0x58>
  80e2d8:	294b883a 	add	r5,r5,r5
  80e2dc:	10bfffc4 	addi	r2,r2,-1
  80e2e0:	18c7883a 	add	r3,r3,r3
  80e2e4:	293ffb36 	bltu	r5,r4,80e2d4 <__alt_mem_onchip_mem+0xff78e2d4>
  80e2e8:	0005883a 	mov	r2,zero
  80e2ec:	18000726 	beq	r3,zero,80e30c <__divsi3+0x58>
  80e2f0:	0005883a 	mov	r2,zero
  80e2f4:	31400236 	bltu	r6,r5,80e300 <__divsi3+0x4c>
  80e2f8:	314dc83a 	sub	r6,r6,r5
  80e2fc:	10c4b03a 	or	r2,r2,r3
  80e300:	1806d07a 	srli	r3,r3,1
  80e304:	280ad07a 	srli	r5,r5,1
  80e308:	183ffa1e 	bne	r3,zero,80e2f4 <__alt_mem_onchip_mem+0xff78e2f4>
  80e30c:	38000126 	beq	r7,zero,80e314 <__divsi3+0x60>
  80e310:	0085c83a 	sub	r2,zero,r2
  80e314:	f800283a 	ret
  80e318:	014bc83a 	sub	r5,zero,r5
  80e31c:	39c0005c 	xori	r7,r7,1
  80e320:	003fe706 	br	80e2c0 <__alt_mem_onchip_mem+0xff78e2c0>
  80e324:	0109c83a 	sub	r4,zero,r4
  80e328:	01c00044 	movi	r7,1
  80e32c:	003fe306 	br	80e2bc <__alt_mem_onchip_mem+0xff78e2bc>
  80e330:	00c00044 	movi	r3,1
  80e334:	003fee06 	br	80e2f0 <__alt_mem_onchip_mem+0xff78e2f0>

0080e338 <__modsi3>:
  80e338:	20001716 	blt	r4,zero,80e398 <__modsi3+0x60>
  80e33c:	000f883a 	mov	r7,zero
  80e340:	2005883a 	mov	r2,r4
  80e344:	28001216 	blt	r5,zero,80e390 <__modsi3+0x58>
  80e348:	2900162e 	bgeu	r5,r4,80e3a4 <__modsi3+0x6c>
  80e34c:	01800804 	movi	r6,32
  80e350:	00c00044 	movi	r3,1
  80e354:	00000106 	br	80e35c <__modsi3+0x24>
  80e358:	30000a26 	beq	r6,zero,80e384 <__modsi3+0x4c>
  80e35c:	294b883a 	add	r5,r5,r5
  80e360:	31bfffc4 	addi	r6,r6,-1
  80e364:	18c7883a 	add	r3,r3,r3
  80e368:	293ffb36 	bltu	r5,r4,80e358 <__alt_mem_onchip_mem+0xff78e358>
  80e36c:	18000526 	beq	r3,zero,80e384 <__modsi3+0x4c>
  80e370:	1806d07a 	srli	r3,r3,1
  80e374:	11400136 	bltu	r2,r5,80e37c <__modsi3+0x44>
  80e378:	1145c83a 	sub	r2,r2,r5
  80e37c:	280ad07a 	srli	r5,r5,1
  80e380:	183ffb1e 	bne	r3,zero,80e370 <__alt_mem_onchip_mem+0xff78e370>
  80e384:	38000126 	beq	r7,zero,80e38c <__modsi3+0x54>
  80e388:	0085c83a 	sub	r2,zero,r2
  80e38c:	f800283a 	ret
  80e390:	014bc83a 	sub	r5,zero,r5
  80e394:	003fec06 	br	80e348 <__alt_mem_onchip_mem+0xff78e348>
  80e398:	0109c83a 	sub	r4,zero,r4
  80e39c:	01c00044 	movi	r7,1
  80e3a0:	003fe706 	br	80e340 <__alt_mem_onchip_mem+0xff78e340>
  80e3a4:	00c00044 	movi	r3,1
  80e3a8:	003ff106 	br	80e370 <__alt_mem_onchip_mem+0xff78e370>

0080e3ac <__udivsi3>:
  80e3ac:	200d883a 	mov	r6,r4
  80e3b0:	2900152e 	bgeu	r5,r4,80e408 <__udivsi3+0x5c>
  80e3b4:	28001416 	blt	r5,zero,80e408 <__udivsi3+0x5c>
  80e3b8:	00800804 	movi	r2,32
  80e3bc:	00c00044 	movi	r3,1
  80e3c0:	00000206 	br	80e3cc <__udivsi3+0x20>
  80e3c4:	10000e26 	beq	r2,zero,80e400 <__udivsi3+0x54>
  80e3c8:	28000516 	blt	r5,zero,80e3e0 <__udivsi3+0x34>
  80e3cc:	294b883a 	add	r5,r5,r5
  80e3d0:	10bfffc4 	addi	r2,r2,-1
  80e3d4:	18c7883a 	add	r3,r3,r3
  80e3d8:	293ffa36 	bltu	r5,r4,80e3c4 <__alt_mem_onchip_mem+0xff78e3c4>
  80e3dc:	18000826 	beq	r3,zero,80e400 <__udivsi3+0x54>
  80e3e0:	0005883a 	mov	r2,zero
  80e3e4:	31400236 	bltu	r6,r5,80e3f0 <__udivsi3+0x44>
  80e3e8:	314dc83a 	sub	r6,r6,r5
  80e3ec:	10c4b03a 	or	r2,r2,r3
  80e3f0:	1806d07a 	srli	r3,r3,1
  80e3f4:	280ad07a 	srli	r5,r5,1
  80e3f8:	183ffa1e 	bne	r3,zero,80e3e4 <__alt_mem_onchip_mem+0xff78e3e4>
  80e3fc:	f800283a 	ret
  80e400:	0005883a 	mov	r2,zero
  80e404:	f800283a 	ret
  80e408:	00c00044 	movi	r3,1
  80e40c:	003ff406 	br	80e3e0 <__alt_mem_onchip_mem+0xff78e3e0>

0080e410 <__umodsi3>:
  80e410:	2005883a 	mov	r2,r4
  80e414:	2900122e 	bgeu	r5,r4,80e460 <__umodsi3+0x50>
  80e418:	28001116 	blt	r5,zero,80e460 <__umodsi3+0x50>
  80e41c:	01800804 	movi	r6,32
  80e420:	00c00044 	movi	r3,1
  80e424:	00000206 	br	80e430 <__umodsi3+0x20>
  80e428:	30000c26 	beq	r6,zero,80e45c <__umodsi3+0x4c>
  80e42c:	28000516 	blt	r5,zero,80e444 <__umodsi3+0x34>
  80e430:	294b883a 	add	r5,r5,r5
  80e434:	31bfffc4 	addi	r6,r6,-1
  80e438:	18c7883a 	add	r3,r3,r3
  80e43c:	293ffa36 	bltu	r5,r4,80e428 <__alt_mem_onchip_mem+0xff78e428>
  80e440:	18000626 	beq	r3,zero,80e45c <__umodsi3+0x4c>
  80e444:	1806d07a 	srli	r3,r3,1
  80e448:	11400136 	bltu	r2,r5,80e450 <__umodsi3+0x40>
  80e44c:	1145c83a 	sub	r2,r2,r5
  80e450:	280ad07a 	srli	r5,r5,1
  80e454:	183ffb1e 	bne	r3,zero,80e444 <__alt_mem_onchip_mem+0xff78e444>
  80e458:	f800283a 	ret
  80e45c:	f800283a 	ret
  80e460:	00c00044 	movi	r3,1
  80e464:	003ff706 	br	80e444 <__alt_mem_onchip_mem+0xff78e444>

0080e468 <__adddf3>:
  80e468:	02c00434 	movhi	r11,16
  80e46c:	5affffc4 	addi	r11,r11,-1
  80e470:	2806d7fa 	srli	r3,r5,31
  80e474:	2ad4703a 	and	r10,r5,r11
  80e478:	3ad2703a 	and	r9,r7,r11
  80e47c:	3804d53a 	srli	r2,r7,20
  80e480:	3018d77a 	srli	r12,r6,29
  80e484:	280ad53a 	srli	r5,r5,20
  80e488:	501490fa 	slli	r10,r10,3
  80e48c:	2010d77a 	srli	r8,r4,29
  80e490:	481290fa 	slli	r9,r9,3
  80e494:	380ed7fa 	srli	r7,r7,31
  80e498:	defffb04 	addi	sp,sp,-20
  80e49c:	dc800215 	stw	r18,8(sp)
  80e4a0:	dc400115 	stw	r17,4(sp)
  80e4a4:	dc000015 	stw	r16,0(sp)
  80e4a8:	dfc00415 	stw	ra,16(sp)
  80e4ac:	dcc00315 	stw	r19,12(sp)
  80e4b0:	1c803fcc 	andi	r18,r3,255
  80e4b4:	2c01ffcc 	andi	r16,r5,2047
  80e4b8:	5210b03a 	or	r8,r10,r8
  80e4bc:	202290fa 	slli	r17,r4,3
  80e4c0:	1081ffcc 	andi	r2,r2,2047
  80e4c4:	4b12b03a 	or	r9,r9,r12
  80e4c8:	300c90fa 	slli	r6,r6,3
  80e4cc:	91c07526 	beq	r18,r7,80e6a4 <__adddf3+0x23c>
  80e4d0:	8087c83a 	sub	r3,r16,r2
  80e4d4:	00c0ab0e 	bge	zero,r3,80e784 <__adddf3+0x31c>
  80e4d8:	10002a1e 	bne	r2,zero,80e584 <__adddf3+0x11c>
  80e4dc:	4984b03a 	or	r2,r9,r6
  80e4e0:	1000961e 	bne	r2,zero,80e73c <__adddf3+0x2d4>
  80e4e4:	888001cc 	andi	r2,r17,7
  80e4e8:	10000726 	beq	r2,zero,80e508 <__adddf3+0xa0>
  80e4ec:	888003cc 	andi	r2,r17,15
  80e4f0:	00c00104 	movi	r3,4
  80e4f4:	10c00426 	beq	r2,r3,80e508 <__adddf3+0xa0>
  80e4f8:	88c7883a 	add	r3,r17,r3
  80e4fc:	1c63803a 	cmpltu	r17,r3,r17
  80e500:	4451883a 	add	r8,r8,r17
  80e504:	1823883a 	mov	r17,r3
  80e508:	4080202c 	andhi	r2,r8,128
  80e50c:	10005926 	beq	r2,zero,80e674 <__adddf3+0x20c>
  80e510:	84000044 	addi	r16,r16,1
  80e514:	0081ffc4 	movi	r2,2047
  80e518:	8080ba26 	beq	r16,r2,80e804 <__adddf3+0x39c>
  80e51c:	00bfe034 	movhi	r2,65408
  80e520:	10bfffc4 	addi	r2,r2,-1
  80e524:	4090703a 	and	r8,r8,r2
  80e528:	4004977a 	slli	r2,r8,29
  80e52c:	4010927a 	slli	r8,r8,9
  80e530:	8822d0fa 	srli	r17,r17,3
  80e534:	8401ffcc 	andi	r16,r16,2047
  80e538:	4010d33a 	srli	r8,r8,12
  80e53c:	9007883a 	mov	r3,r18
  80e540:	1444b03a 	or	r2,r2,r17
  80e544:	8401ffcc 	andi	r16,r16,2047
  80e548:	8020953a 	slli	r16,r16,20
  80e54c:	18c03fcc 	andi	r3,r3,255
  80e550:	01000434 	movhi	r4,16
  80e554:	213fffc4 	addi	r4,r4,-1
  80e558:	180697fa 	slli	r3,r3,31
  80e55c:	4110703a 	and	r8,r8,r4
  80e560:	4410b03a 	or	r8,r8,r16
  80e564:	40c6b03a 	or	r3,r8,r3
  80e568:	dfc00417 	ldw	ra,16(sp)
  80e56c:	dcc00317 	ldw	r19,12(sp)
  80e570:	dc800217 	ldw	r18,8(sp)
  80e574:	dc400117 	ldw	r17,4(sp)
  80e578:	dc000017 	ldw	r16,0(sp)
  80e57c:	dec00504 	addi	sp,sp,20
  80e580:	f800283a 	ret
  80e584:	0081ffc4 	movi	r2,2047
  80e588:	80bfd626 	beq	r16,r2,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e58c:	4a402034 	orhi	r9,r9,128
  80e590:	00800e04 	movi	r2,56
  80e594:	10c09f16 	blt	r2,r3,80e814 <__adddf3+0x3ac>
  80e598:	008007c4 	movi	r2,31
  80e59c:	10c0c216 	blt	r2,r3,80e8a8 <__adddf3+0x440>
  80e5a0:	00800804 	movi	r2,32
  80e5a4:	10c5c83a 	sub	r2,r2,r3
  80e5a8:	488a983a 	sll	r5,r9,r2
  80e5ac:	30c8d83a 	srl	r4,r6,r3
  80e5b0:	3084983a 	sll	r2,r6,r2
  80e5b4:	48c6d83a 	srl	r3,r9,r3
  80e5b8:	290cb03a 	or	r6,r5,r4
  80e5bc:	1004c03a 	cmpne	r2,r2,zero
  80e5c0:	308cb03a 	or	r6,r6,r2
  80e5c4:	898dc83a 	sub	r6,r17,r6
  80e5c8:	89a3803a 	cmpltu	r17,r17,r6
  80e5cc:	40d1c83a 	sub	r8,r8,r3
  80e5d0:	4451c83a 	sub	r8,r8,r17
  80e5d4:	3023883a 	mov	r17,r6
  80e5d8:	4080202c 	andhi	r2,r8,128
  80e5dc:	10002326 	beq	r2,zero,80e66c <__adddf3+0x204>
  80e5e0:	04c02034 	movhi	r19,128
  80e5e4:	9cffffc4 	addi	r19,r19,-1
  80e5e8:	44e6703a 	and	r19,r8,r19
  80e5ec:	98007626 	beq	r19,zero,80e7c8 <__adddf3+0x360>
  80e5f0:	9809883a 	mov	r4,r19
  80e5f4:	0810a6c0 	call	810a6c <__clzsi2>
  80e5f8:	10fffe04 	addi	r3,r2,-8
  80e5fc:	010007c4 	movi	r4,31
  80e600:	20c07716 	blt	r4,r3,80e7e0 <__adddf3+0x378>
  80e604:	00800804 	movi	r2,32
  80e608:	10c5c83a 	sub	r2,r2,r3
  80e60c:	8884d83a 	srl	r2,r17,r2
  80e610:	98d0983a 	sll	r8,r19,r3
  80e614:	88e2983a 	sll	r17,r17,r3
  80e618:	1204b03a 	or	r2,r2,r8
  80e61c:	1c007416 	blt	r3,r16,80e7f0 <__adddf3+0x388>
  80e620:	1c21c83a 	sub	r16,r3,r16
  80e624:	82000044 	addi	r8,r16,1
  80e628:	00c007c4 	movi	r3,31
  80e62c:	1a009116 	blt	r3,r8,80e874 <__adddf3+0x40c>
  80e630:	00c00804 	movi	r3,32
  80e634:	1a07c83a 	sub	r3,r3,r8
  80e638:	8a08d83a 	srl	r4,r17,r8
  80e63c:	88e2983a 	sll	r17,r17,r3
  80e640:	10c6983a 	sll	r3,r2,r3
  80e644:	1210d83a 	srl	r8,r2,r8
  80e648:	8804c03a 	cmpne	r2,r17,zero
  80e64c:	1906b03a 	or	r3,r3,r4
  80e650:	18a2b03a 	or	r17,r3,r2
  80e654:	0021883a 	mov	r16,zero
  80e658:	003fa206 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e65c:	1890b03a 	or	r8,r3,r2
  80e660:	40017d26 	beq	r8,zero,80ec58 <__adddf3+0x7f0>
  80e664:	1011883a 	mov	r8,r2
  80e668:	1823883a 	mov	r17,r3
  80e66c:	888001cc 	andi	r2,r17,7
  80e670:	103f9e1e 	bne	r2,zero,80e4ec <__alt_mem_onchip_mem+0xff78e4ec>
  80e674:	4004977a 	slli	r2,r8,29
  80e678:	8822d0fa 	srli	r17,r17,3
  80e67c:	4010d0fa 	srli	r8,r8,3
  80e680:	9007883a 	mov	r3,r18
  80e684:	1444b03a 	or	r2,r2,r17
  80e688:	0101ffc4 	movi	r4,2047
  80e68c:	81002426 	beq	r16,r4,80e720 <__adddf3+0x2b8>
  80e690:	8120703a 	and	r16,r16,r4
  80e694:	01000434 	movhi	r4,16
  80e698:	213fffc4 	addi	r4,r4,-1
  80e69c:	4110703a 	and	r8,r8,r4
  80e6a0:	003fa806 	br	80e544 <__alt_mem_onchip_mem+0xff78e544>
  80e6a4:	8089c83a 	sub	r4,r16,r2
  80e6a8:	01005e0e 	bge	zero,r4,80e824 <__adddf3+0x3bc>
  80e6ac:	10002b26 	beq	r2,zero,80e75c <__adddf3+0x2f4>
  80e6b0:	0081ffc4 	movi	r2,2047
  80e6b4:	80bf8b26 	beq	r16,r2,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e6b8:	4a402034 	orhi	r9,r9,128
  80e6bc:	00800e04 	movi	r2,56
  80e6c0:	1100a40e 	bge	r2,r4,80e954 <__adddf3+0x4ec>
  80e6c4:	498cb03a 	or	r6,r9,r6
  80e6c8:	300ac03a 	cmpne	r5,r6,zero
  80e6cc:	0013883a 	mov	r9,zero
  80e6d0:	2c4b883a 	add	r5,r5,r17
  80e6d4:	2c63803a 	cmpltu	r17,r5,r17
  80e6d8:	4a11883a 	add	r8,r9,r8
  80e6dc:	8a11883a 	add	r8,r17,r8
  80e6e0:	2823883a 	mov	r17,r5
  80e6e4:	4080202c 	andhi	r2,r8,128
  80e6e8:	103fe026 	beq	r2,zero,80e66c <__alt_mem_onchip_mem+0xff78e66c>
  80e6ec:	84000044 	addi	r16,r16,1
  80e6f0:	0081ffc4 	movi	r2,2047
  80e6f4:	8080d226 	beq	r16,r2,80ea40 <__adddf3+0x5d8>
  80e6f8:	00bfe034 	movhi	r2,65408
  80e6fc:	10bfffc4 	addi	r2,r2,-1
  80e700:	4090703a 	and	r8,r8,r2
  80e704:	880ad07a 	srli	r5,r17,1
  80e708:	400897fa 	slli	r4,r8,31
  80e70c:	88c0004c 	andi	r3,r17,1
  80e710:	28e2b03a 	or	r17,r5,r3
  80e714:	4010d07a 	srli	r8,r8,1
  80e718:	2462b03a 	or	r17,r4,r17
  80e71c:	003f7106 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e720:	4088b03a 	or	r4,r8,r2
  80e724:	20014526 	beq	r4,zero,80ec3c <__adddf3+0x7d4>
  80e728:	01000434 	movhi	r4,16
  80e72c:	42000234 	orhi	r8,r8,8
  80e730:	213fffc4 	addi	r4,r4,-1
  80e734:	4110703a 	and	r8,r8,r4
  80e738:	003f8206 	br	80e544 <__alt_mem_onchip_mem+0xff78e544>
  80e73c:	18ffffc4 	addi	r3,r3,-1
  80e740:	1800491e 	bne	r3,zero,80e868 <__adddf3+0x400>
  80e744:	898bc83a 	sub	r5,r17,r6
  80e748:	8963803a 	cmpltu	r17,r17,r5
  80e74c:	4251c83a 	sub	r8,r8,r9
  80e750:	4451c83a 	sub	r8,r8,r17
  80e754:	2823883a 	mov	r17,r5
  80e758:	003f9f06 	br	80e5d8 <__alt_mem_onchip_mem+0xff78e5d8>
  80e75c:	4984b03a 	or	r2,r9,r6
  80e760:	103f6026 	beq	r2,zero,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e764:	213fffc4 	addi	r4,r4,-1
  80e768:	2000931e 	bne	r4,zero,80e9b8 <__adddf3+0x550>
  80e76c:	898d883a 	add	r6,r17,r6
  80e770:	3463803a 	cmpltu	r17,r6,r17
  80e774:	4251883a 	add	r8,r8,r9
  80e778:	8a11883a 	add	r8,r17,r8
  80e77c:	3023883a 	mov	r17,r6
  80e780:	003fd806 	br	80e6e4 <__alt_mem_onchip_mem+0xff78e6e4>
  80e784:	1800541e 	bne	r3,zero,80e8d8 <__adddf3+0x470>
  80e788:	80800044 	addi	r2,r16,1
  80e78c:	1081ffcc 	andi	r2,r2,2047
  80e790:	00c00044 	movi	r3,1
  80e794:	1880a00e 	bge	r3,r2,80ea18 <__adddf3+0x5b0>
  80e798:	8989c83a 	sub	r4,r17,r6
  80e79c:	8905803a 	cmpltu	r2,r17,r4
  80e7a0:	4267c83a 	sub	r19,r8,r9
  80e7a4:	98a7c83a 	sub	r19,r19,r2
  80e7a8:	9880202c 	andhi	r2,r19,128
  80e7ac:	10006326 	beq	r2,zero,80e93c <__adddf3+0x4d4>
  80e7b0:	3463c83a 	sub	r17,r6,r17
  80e7b4:	4a07c83a 	sub	r3,r9,r8
  80e7b8:	344d803a 	cmpltu	r6,r6,r17
  80e7bc:	19a7c83a 	sub	r19,r3,r6
  80e7c0:	3825883a 	mov	r18,r7
  80e7c4:	983f8a1e 	bne	r19,zero,80e5f0 <__alt_mem_onchip_mem+0xff78e5f0>
  80e7c8:	8809883a 	mov	r4,r17
  80e7cc:	0810a6c0 	call	810a6c <__clzsi2>
  80e7d0:	10800804 	addi	r2,r2,32
  80e7d4:	10fffe04 	addi	r3,r2,-8
  80e7d8:	010007c4 	movi	r4,31
  80e7dc:	20ff890e 	bge	r4,r3,80e604 <__alt_mem_onchip_mem+0xff78e604>
  80e7e0:	10bff604 	addi	r2,r2,-40
  80e7e4:	8884983a 	sll	r2,r17,r2
  80e7e8:	0023883a 	mov	r17,zero
  80e7ec:	1c3f8c0e 	bge	r3,r16,80e620 <__alt_mem_onchip_mem+0xff78e620>
  80e7f0:	023fe034 	movhi	r8,65408
  80e7f4:	423fffc4 	addi	r8,r8,-1
  80e7f8:	80e1c83a 	sub	r16,r16,r3
  80e7fc:	1210703a 	and	r8,r2,r8
  80e800:	003f3806 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e804:	9007883a 	mov	r3,r18
  80e808:	0011883a 	mov	r8,zero
  80e80c:	0005883a 	mov	r2,zero
  80e810:	003f4c06 	br	80e544 <__alt_mem_onchip_mem+0xff78e544>
  80e814:	498cb03a 	or	r6,r9,r6
  80e818:	300cc03a 	cmpne	r6,r6,zero
  80e81c:	0007883a 	mov	r3,zero
  80e820:	003f6806 	br	80e5c4 <__alt_mem_onchip_mem+0xff78e5c4>
  80e824:	20009c1e 	bne	r4,zero,80ea98 <__adddf3+0x630>
  80e828:	80800044 	addi	r2,r16,1
  80e82c:	1141ffcc 	andi	r5,r2,2047
  80e830:	01000044 	movi	r4,1
  80e834:	2140670e 	bge	r4,r5,80e9d4 <__adddf3+0x56c>
  80e838:	0101ffc4 	movi	r4,2047
  80e83c:	11007f26 	beq	r2,r4,80ea3c <__adddf3+0x5d4>
  80e840:	898d883a 	add	r6,r17,r6
  80e844:	4247883a 	add	r3,r8,r9
  80e848:	3451803a 	cmpltu	r8,r6,r17
  80e84c:	40d1883a 	add	r8,r8,r3
  80e850:	402297fa 	slli	r17,r8,31
  80e854:	300cd07a 	srli	r6,r6,1
  80e858:	4010d07a 	srli	r8,r8,1
  80e85c:	1021883a 	mov	r16,r2
  80e860:	89a2b03a 	or	r17,r17,r6
  80e864:	003f1f06 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e868:	0081ffc4 	movi	r2,2047
  80e86c:	80bf481e 	bne	r16,r2,80e590 <__alt_mem_onchip_mem+0xff78e590>
  80e870:	003f1c06 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e874:	843ff844 	addi	r16,r16,-31
  80e878:	01000804 	movi	r4,32
  80e87c:	1406d83a 	srl	r3,r2,r16
  80e880:	41005026 	beq	r8,r4,80e9c4 <__adddf3+0x55c>
  80e884:	01001004 	movi	r4,64
  80e888:	2211c83a 	sub	r8,r4,r8
  80e88c:	1204983a 	sll	r2,r2,r8
  80e890:	88a2b03a 	or	r17,r17,r2
  80e894:	8822c03a 	cmpne	r17,r17,zero
  80e898:	1c62b03a 	or	r17,r3,r17
  80e89c:	0011883a 	mov	r8,zero
  80e8a0:	0021883a 	mov	r16,zero
  80e8a4:	003f7106 	br	80e66c <__alt_mem_onchip_mem+0xff78e66c>
  80e8a8:	193ff804 	addi	r4,r3,-32
  80e8ac:	00800804 	movi	r2,32
  80e8b0:	4908d83a 	srl	r4,r9,r4
  80e8b4:	18804526 	beq	r3,r2,80e9cc <__adddf3+0x564>
  80e8b8:	00801004 	movi	r2,64
  80e8bc:	10c5c83a 	sub	r2,r2,r3
  80e8c0:	4886983a 	sll	r3,r9,r2
  80e8c4:	198cb03a 	or	r6,r3,r6
  80e8c8:	300cc03a 	cmpne	r6,r6,zero
  80e8cc:	218cb03a 	or	r6,r4,r6
  80e8d0:	0007883a 	mov	r3,zero
  80e8d4:	003f3b06 	br	80e5c4 <__alt_mem_onchip_mem+0xff78e5c4>
  80e8d8:	80002a26 	beq	r16,zero,80e984 <__adddf3+0x51c>
  80e8dc:	0101ffc4 	movi	r4,2047
  80e8e0:	11006826 	beq	r2,r4,80ea84 <__adddf3+0x61c>
  80e8e4:	00c7c83a 	sub	r3,zero,r3
  80e8e8:	42002034 	orhi	r8,r8,128
  80e8ec:	01000e04 	movi	r4,56
  80e8f0:	20c07c16 	blt	r4,r3,80eae4 <__adddf3+0x67c>
  80e8f4:	010007c4 	movi	r4,31
  80e8f8:	20c0da16 	blt	r4,r3,80ec64 <__adddf3+0x7fc>
  80e8fc:	01000804 	movi	r4,32
  80e900:	20c9c83a 	sub	r4,r4,r3
  80e904:	4114983a 	sll	r10,r8,r4
  80e908:	88cad83a 	srl	r5,r17,r3
  80e90c:	8908983a 	sll	r4,r17,r4
  80e910:	40c6d83a 	srl	r3,r8,r3
  80e914:	5162b03a 	or	r17,r10,r5
  80e918:	2008c03a 	cmpne	r4,r4,zero
  80e91c:	8922b03a 	or	r17,r17,r4
  80e920:	3463c83a 	sub	r17,r6,r17
  80e924:	48c7c83a 	sub	r3,r9,r3
  80e928:	344d803a 	cmpltu	r6,r6,r17
  80e92c:	1991c83a 	sub	r8,r3,r6
  80e930:	1021883a 	mov	r16,r2
  80e934:	3825883a 	mov	r18,r7
  80e938:	003f2706 	br	80e5d8 <__alt_mem_onchip_mem+0xff78e5d8>
  80e93c:	24d0b03a 	or	r8,r4,r19
  80e940:	40001b1e 	bne	r8,zero,80e9b0 <__adddf3+0x548>
  80e944:	0005883a 	mov	r2,zero
  80e948:	0007883a 	mov	r3,zero
  80e94c:	0021883a 	mov	r16,zero
  80e950:	003f4d06 	br	80e688 <__alt_mem_onchip_mem+0xff78e688>
  80e954:	008007c4 	movi	r2,31
  80e958:	11003c16 	blt	r2,r4,80ea4c <__adddf3+0x5e4>
  80e95c:	00800804 	movi	r2,32
  80e960:	1105c83a 	sub	r2,r2,r4
  80e964:	488e983a 	sll	r7,r9,r2
  80e968:	310ad83a 	srl	r5,r6,r4
  80e96c:	3084983a 	sll	r2,r6,r2
  80e970:	4912d83a 	srl	r9,r9,r4
  80e974:	394ab03a 	or	r5,r7,r5
  80e978:	1004c03a 	cmpne	r2,r2,zero
  80e97c:	288ab03a 	or	r5,r5,r2
  80e980:	003f5306 	br	80e6d0 <__alt_mem_onchip_mem+0xff78e6d0>
  80e984:	4448b03a 	or	r4,r8,r17
  80e988:	20003e26 	beq	r4,zero,80ea84 <__adddf3+0x61c>
  80e98c:	00c6303a 	nor	r3,zero,r3
  80e990:	18003a1e 	bne	r3,zero,80ea7c <__adddf3+0x614>
  80e994:	3463c83a 	sub	r17,r6,r17
  80e998:	4a07c83a 	sub	r3,r9,r8
  80e99c:	344d803a 	cmpltu	r6,r6,r17
  80e9a0:	1991c83a 	sub	r8,r3,r6
  80e9a4:	1021883a 	mov	r16,r2
  80e9a8:	3825883a 	mov	r18,r7
  80e9ac:	003f0a06 	br	80e5d8 <__alt_mem_onchip_mem+0xff78e5d8>
  80e9b0:	2023883a 	mov	r17,r4
  80e9b4:	003f0d06 	br	80e5ec <__alt_mem_onchip_mem+0xff78e5ec>
  80e9b8:	0081ffc4 	movi	r2,2047
  80e9bc:	80bf3f1e 	bne	r16,r2,80e6bc <__alt_mem_onchip_mem+0xff78e6bc>
  80e9c0:	003ec806 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e9c4:	0005883a 	mov	r2,zero
  80e9c8:	003fb106 	br	80e890 <__alt_mem_onchip_mem+0xff78e890>
  80e9cc:	0007883a 	mov	r3,zero
  80e9d0:	003fbc06 	br	80e8c4 <__alt_mem_onchip_mem+0xff78e8c4>
  80e9d4:	4444b03a 	or	r2,r8,r17
  80e9d8:	8000871e 	bne	r16,zero,80ebf8 <__adddf3+0x790>
  80e9dc:	1000ba26 	beq	r2,zero,80ecc8 <__adddf3+0x860>
  80e9e0:	4984b03a 	or	r2,r9,r6
  80e9e4:	103ebf26 	beq	r2,zero,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80e9e8:	8985883a 	add	r2,r17,r6
  80e9ec:	4247883a 	add	r3,r8,r9
  80e9f0:	1451803a 	cmpltu	r8,r2,r17
  80e9f4:	40d1883a 	add	r8,r8,r3
  80e9f8:	40c0202c 	andhi	r3,r8,128
  80e9fc:	1023883a 	mov	r17,r2
  80ea00:	183f1a26 	beq	r3,zero,80e66c <__alt_mem_onchip_mem+0xff78e66c>
  80ea04:	00bfe034 	movhi	r2,65408
  80ea08:	10bfffc4 	addi	r2,r2,-1
  80ea0c:	2021883a 	mov	r16,r4
  80ea10:	4090703a 	and	r8,r8,r2
  80ea14:	003eb306 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ea18:	4444b03a 	or	r2,r8,r17
  80ea1c:	8000291e 	bne	r16,zero,80eac4 <__adddf3+0x65c>
  80ea20:	10004b1e 	bne	r2,zero,80eb50 <__adddf3+0x6e8>
  80ea24:	4990b03a 	or	r8,r9,r6
  80ea28:	40008b26 	beq	r8,zero,80ec58 <__adddf3+0x7f0>
  80ea2c:	4811883a 	mov	r8,r9
  80ea30:	3023883a 	mov	r17,r6
  80ea34:	3825883a 	mov	r18,r7
  80ea38:	003eaa06 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ea3c:	1021883a 	mov	r16,r2
  80ea40:	0011883a 	mov	r8,zero
  80ea44:	0005883a 	mov	r2,zero
  80ea48:	003f0f06 	br	80e688 <__alt_mem_onchip_mem+0xff78e688>
  80ea4c:	217ff804 	addi	r5,r4,-32
  80ea50:	00800804 	movi	r2,32
  80ea54:	494ad83a 	srl	r5,r9,r5
  80ea58:	20807d26 	beq	r4,r2,80ec50 <__adddf3+0x7e8>
  80ea5c:	00801004 	movi	r2,64
  80ea60:	1109c83a 	sub	r4,r2,r4
  80ea64:	4912983a 	sll	r9,r9,r4
  80ea68:	498cb03a 	or	r6,r9,r6
  80ea6c:	300cc03a 	cmpne	r6,r6,zero
  80ea70:	298ab03a 	or	r5,r5,r6
  80ea74:	0013883a 	mov	r9,zero
  80ea78:	003f1506 	br	80e6d0 <__alt_mem_onchip_mem+0xff78e6d0>
  80ea7c:	0101ffc4 	movi	r4,2047
  80ea80:	113f9a1e 	bne	r2,r4,80e8ec <__alt_mem_onchip_mem+0xff78e8ec>
  80ea84:	4811883a 	mov	r8,r9
  80ea88:	3023883a 	mov	r17,r6
  80ea8c:	1021883a 	mov	r16,r2
  80ea90:	3825883a 	mov	r18,r7
  80ea94:	003e9306 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ea98:	8000161e 	bne	r16,zero,80eaf4 <__adddf3+0x68c>
  80ea9c:	444ab03a 	or	r5,r8,r17
  80eaa0:	28005126 	beq	r5,zero,80ebe8 <__adddf3+0x780>
  80eaa4:	0108303a 	nor	r4,zero,r4
  80eaa8:	20004d1e 	bne	r4,zero,80ebe0 <__adddf3+0x778>
  80eaac:	89a3883a 	add	r17,r17,r6
  80eab0:	4253883a 	add	r9,r8,r9
  80eab4:	898d803a 	cmpltu	r6,r17,r6
  80eab8:	3251883a 	add	r8,r6,r9
  80eabc:	1021883a 	mov	r16,r2
  80eac0:	003f0806 	br	80e6e4 <__alt_mem_onchip_mem+0xff78e6e4>
  80eac4:	1000301e 	bne	r2,zero,80eb88 <__adddf3+0x720>
  80eac8:	4984b03a 	or	r2,r9,r6
  80eacc:	10007126 	beq	r2,zero,80ec94 <__adddf3+0x82c>
  80ead0:	4811883a 	mov	r8,r9
  80ead4:	3023883a 	mov	r17,r6
  80ead8:	3825883a 	mov	r18,r7
  80eadc:	0401ffc4 	movi	r16,2047
  80eae0:	003e8006 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80eae4:	4462b03a 	or	r17,r8,r17
  80eae8:	8822c03a 	cmpne	r17,r17,zero
  80eaec:	0007883a 	mov	r3,zero
  80eaf0:	003f8b06 	br	80e920 <__alt_mem_onchip_mem+0xff78e920>
  80eaf4:	0141ffc4 	movi	r5,2047
  80eaf8:	11403b26 	beq	r2,r5,80ebe8 <__adddf3+0x780>
  80eafc:	0109c83a 	sub	r4,zero,r4
  80eb00:	42002034 	orhi	r8,r8,128
  80eb04:	01400e04 	movi	r5,56
  80eb08:	29006716 	blt	r5,r4,80eca8 <__adddf3+0x840>
  80eb0c:	014007c4 	movi	r5,31
  80eb10:	29007016 	blt	r5,r4,80ecd4 <__adddf3+0x86c>
  80eb14:	01400804 	movi	r5,32
  80eb18:	290bc83a 	sub	r5,r5,r4
  80eb1c:	4154983a 	sll	r10,r8,r5
  80eb20:	890ed83a 	srl	r7,r17,r4
  80eb24:	894a983a 	sll	r5,r17,r5
  80eb28:	4108d83a 	srl	r4,r8,r4
  80eb2c:	51e2b03a 	or	r17,r10,r7
  80eb30:	280ac03a 	cmpne	r5,r5,zero
  80eb34:	8962b03a 	or	r17,r17,r5
  80eb38:	89a3883a 	add	r17,r17,r6
  80eb3c:	2253883a 	add	r9,r4,r9
  80eb40:	898d803a 	cmpltu	r6,r17,r6
  80eb44:	3251883a 	add	r8,r6,r9
  80eb48:	1021883a 	mov	r16,r2
  80eb4c:	003ee506 	br	80e6e4 <__alt_mem_onchip_mem+0xff78e6e4>
  80eb50:	4984b03a 	or	r2,r9,r6
  80eb54:	103e6326 	beq	r2,zero,80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80eb58:	8987c83a 	sub	r3,r17,r6
  80eb5c:	88c9803a 	cmpltu	r4,r17,r3
  80eb60:	4245c83a 	sub	r2,r8,r9
  80eb64:	1105c83a 	sub	r2,r2,r4
  80eb68:	1100202c 	andhi	r4,r2,128
  80eb6c:	203ebb26 	beq	r4,zero,80e65c <__alt_mem_onchip_mem+0xff78e65c>
  80eb70:	3463c83a 	sub	r17,r6,r17
  80eb74:	4a07c83a 	sub	r3,r9,r8
  80eb78:	344d803a 	cmpltu	r6,r6,r17
  80eb7c:	1991c83a 	sub	r8,r3,r6
  80eb80:	3825883a 	mov	r18,r7
  80eb84:	003e5706 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80eb88:	4984b03a 	or	r2,r9,r6
  80eb8c:	10002e26 	beq	r2,zero,80ec48 <__adddf3+0x7e0>
  80eb90:	4004d0fa 	srli	r2,r8,3
  80eb94:	8822d0fa 	srli	r17,r17,3
  80eb98:	4010977a 	slli	r8,r8,29
  80eb9c:	10c0022c 	andhi	r3,r2,8
  80eba0:	4462b03a 	or	r17,r8,r17
  80eba4:	18000826 	beq	r3,zero,80ebc8 <__adddf3+0x760>
  80eba8:	4808d0fa 	srli	r4,r9,3
  80ebac:	20c0022c 	andhi	r3,r4,8
  80ebb0:	1800051e 	bne	r3,zero,80ebc8 <__adddf3+0x760>
  80ebb4:	300cd0fa 	srli	r6,r6,3
  80ebb8:	4806977a 	slli	r3,r9,29
  80ebbc:	2005883a 	mov	r2,r4
  80ebc0:	3825883a 	mov	r18,r7
  80ebc4:	19a2b03a 	or	r17,r3,r6
  80ebc8:	8810d77a 	srli	r8,r17,29
  80ebcc:	100490fa 	slli	r2,r2,3
  80ebd0:	882290fa 	slli	r17,r17,3
  80ebd4:	0401ffc4 	movi	r16,2047
  80ebd8:	4090b03a 	or	r8,r8,r2
  80ebdc:	003e4106 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ebe0:	0141ffc4 	movi	r5,2047
  80ebe4:	117fc71e 	bne	r2,r5,80eb04 <__alt_mem_onchip_mem+0xff78eb04>
  80ebe8:	4811883a 	mov	r8,r9
  80ebec:	3023883a 	mov	r17,r6
  80ebf0:	1021883a 	mov	r16,r2
  80ebf4:	003e3b06 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ebf8:	10002f26 	beq	r2,zero,80ecb8 <__adddf3+0x850>
  80ebfc:	4984b03a 	or	r2,r9,r6
  80ec00:	10001126 	beq	r2,zero,80ec48 <__adddf3+0x7e0>
  80ec04:	4004d0fa 	srli	r2,r8,3
  80ec08:	8822d0fa 	srli	r17,r17,3
  80ec0c:	4010977a 	slli	r8,r8,29
  80ec10:	10c0022c 	andhi	r3,r2,8
  80ec14:	4462b03a 	or	r17,r8,r17
  80ec18:	183feb26 	beq	r3,zero,80ebc8 <__alt_mem_onchip_mem+0xff78ebc8>
  80ec1c:	4808d0fa 	srli	r4,r9,3
  80ec20:	20c0022c 	andhi	r3,r4,8
  80ec24:	183fe81e 	bne	r3,zero,80ebc8 <__alt_mem_onchip_mem+0xff78ebc8>
  80ec28:	300cd0fa 	srli	r6,r6,3
  80ec2c:	4806977a 	slli	r3,r9,29
  80ec30:	2005883a 	mov	r2,r4
  80ec34:	19a2b03a 	or	r17,r3,r6
  80ec38:	003fe306 	br	80ebc8 <__alt_mem_onchip_mem+0xff78ebc8>
  80ec3c:	0011883a 	mov	r8,zero
  80ec40:	0005883a 	mov	r2,zero
  80ec44:	003e3f06 	br	80e544 <__alt_mem_onchip_mem+0xff78e544>
  80ec48:	0401ffc4 	movi	r16,2047
  80ec4c:	003e2506 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ec50:	0013883a 	mov	r9,zero
  80ec54:	003f8406 	br	80ea68 <__alt_mem_onchip_mem+0xff78ea68>
  80ec58:	0005883a 	mov	r2,zero
  80ec5c:	0007883a 	mov	r3,zero
  80ec60:	003e8906 	br	80e688 <__alt_mem_onchip_mem+0xff78e688>
  80ec64:	197ff804 	addi	r5,r3,-32
  80ec68:	01000804 	movi	r4,32
  80ec6c:	414ad83a 	srl	r5,r8,r5
  80ec70:	19002426 	beq	r3,r4,80ed04 <__adddf3+0x89c>
  80ec74:	01001004 	movi	r4,64
  80ec78:	20c7c83a 	sub	r3,r4,r3
  80ec7c:	40c6983a 	sll	r3,r8,r3
  80ec80:	1c46b03a 	or	r3,r3,r17
  80ec84:	1806c03a 	cmpne	r3,r3,zero
  80ec88:	28e2b03a 	or	r17,r5,r3
  80ec8c:	0007883a 	mov	r3,zero
  80ec90:	003f2306 	br	80e920 <__alt_mem_onchip_mem+0xff78e920>
  80ec94:	0007883a 	mov	r3,zero
  80ec98:	5811883a 	mov	r8,r11
  80ec9c:	00bfffc4 	movi	r2,-1
  80eca0:	0401ffc4 	movi	r16,2047
  80eca4:	003e7806 	br	80e688 <__alt_mem_onchip_mem+0xff78e688>
  80eca8:	4462b03a 	or	r17,r8,r17
  80ecac:	8822c03a 	cmpne	r17,r17,zero
  80ecb0:	0009883a 	mov	r4,zero
  80ecb4:	003fa006 	br	80eb38 <__alt_mem_onchip_mem+0xff78eb38>
  80ecb8:	4811883a 	mov	r8,r9
  80ecbc:	3023883a 	mov	r17,r6
  80ecc0:	0401ffc4 	movi	r16,2047
  80ecc4:	003e0706 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ecc8:	4811883a 	mov	r8,r9
  80eccc:	3023883a 	mov	r17,r6
  80ecd0:	003e0406 	br	80e4e4 <__alt_mem_onchip_mem+0xff78e4e4>
  80ecd4:	21fff804 	addi	r7,r4,-32
  80ecd8:	01400804 	movi	r5,32
  80ecdc:	41ced83a 	srl	r7,r8,r7
  80ece0:	21400a26 	beq	r4,r5,80ed0c <__adddf3+0x8a4>
  80ece4:	01401004 	movi	r5,64
  80ece8:	2909c83a 	sub	r4,r5,r4
  80ecec:	4108983a 	sll	r4,r8,r4
  80ecf0:	2448b03a 	or	r4,r4,r17
  80ecf4:	2008c03a 	cmpne	r4,r4,zero
  80ecf8:	3922b03a 	or	r17,r7,r4
  80ecfc:	0009883a 	mov	r4,zero
  80ed00:	003f8d06 	br	80eb38 <__alt_mem_onchip_mem+0xff78eb38>
  80ed04:	0007883a 	mov	r3,zero
  80ed08:	003fdd06 	br	80ec80 <__alt_mem_onchip_mem+0xff78ec80>
  80ed0c:	0009883a 	mov	r4,zero
  80ed10:	003ff706 	br	80ecf0 <__alt_mem_onchip_mem+0xff78ecf0>

0080ed14 <__divdf3>:
  80ed14:	defff204 	addi	sp,sp,-56
  80ed18:	dd400915 	stw	r21,36(sp)
  80ed1c:	282ad53a 	srli	r21,r5,20
  80ed20:	dd000815 	stw	r20,32(sp)
  80ed24:	2828d7fa 	srli	r20,r5,31
  80ed28:	dc000415 	stw	r16,16(sp)
  80ed2c:	04000434 	movhi	r16,16
  80ed30:	df000c15 	stw	fp,48(sp)
  80ed34:	843fffc4 	addi	r16,r16,-1
  80ed38:	dfc00d15 	stw	ra,52(sp)
  80ed3c:	ddc00b15 	stw	r23,44(sp)
  80ed40:	dd800a15 	stw	r22,40(sp)
  80ed44:	dcc00715 	stw	r19,28(sp)
  80ed48:	dc800615 	stw	r18,24(sp)
  80ed4c:	dc400515 	stw	r17,20(sp)
  80ed50:	ad41ffcc 	andi	r21,r21,2047
  80ed54:	2c20703a 	and	r16,r5,r16
  80ed58:	a7003fcc 	andi	fp,r20,255
  80ed5c:	a8006126 	beq	r21,zero,80eee4 <__divdf3+0x1d0>
  80ed60:	0081ffc4 	movi	r2,2047
  80ed64:	2025883a 	mov	r18,r4
  80ed68:	a8803726 	beq	r21,r2,80ee48 <__divdf3+0x134>
  80ed6c:	80800434 	orhi	r2,r16,16
  80ed70:	100490fa 	slli	r2,r2,3
  80ed74:	2020d77a 	srli	r16,r4,29
  80ed78:	202490fa 	slli	r18,r4,3
  80ed7c:	ad7f0044 	addi	r21,r21,-1023
  80ed80:	80a0b03a 	or	r16,r16,r2
  80ed84:	0027883a 	mov	r19,zero
  80ed88:	0013883a 	mov	r9,zero
  80ed8c:	3804d53a 	srli	r2,r7,20
  80ed90:	382cd7fa 	srli	r22,r7,31
  80ed94:	04400434 	movhi	r17,16
  80ed98:	8c7fffc4 	addi	r17,r17,-1
  80ed9c:	1081ffcc 	andi	r2,r2,2047
  80eda0:	3011883a 	mov	r8,r6
  80eda4:	3c62703a 	and	r17,r7,r17
  80eda8:	b5c03fcc 	andi	r23,r22,255
  80edac:	10006c26 	beq	r2,zero,80ef60 <__divdf3+0x24c>
  80edb0:	00c1ffc4 	movi	r3,2047
  80edb4:	10c06426 	beq	r2,r3,80ef48 <__divdf3+0x234>
  80edb8:	88c00434 	orhi	r3,r17,16
  80edbc:	180690fa 	slli	r3,r3,3
  80edc0:	3022d77a 	srli	r17,r6,29
  80edc4:	301090fa 	slli	r8,r6,3
  80edc8:	10bf0044 	addi	r2,r2,-1023
  80edcc:	88e2b03a 	or	r17,r17,r3
  80edd0:	000f883a 	mov	r7,zero
  80edd4:	a58cf03a 	xor	r6,r20,r22
  80edd8:	3cc8b03a 	or	r4,r7,r19
  80eddc:	a8abc83a 	sub	r21,r21,r2
  80ede0:	008003c4 	movi	r2,15
  80ede4:	3007883a 	mov	r3,r6
  80ede8:	34c03fcc 	andi	r19,r6,255
  80edec:	11009036 	bltu	r2,r4,80f030 <__divdf3+0x31c>
  80edf0:	200890ba 	slli	r4,r4,2
  80edf4:	00802074 	movhi	r2,129
  80edf8:	10bb8204 	addi	r2,r2,-4600
  80edfc:	2089883a 	add	r4,r4,r2
  80ee00:	20800017 	ldw	r2,0(r4)
  80ee04:	1000683a 	jmp	r2
  80ee08:	0080f030 	cmpltui	r2,zero,960
  80ee0c:	0080ee80 	call	80ee8 <__alt_mem_sdram-0x77f118>
  80ee10:	0080f020 	cmpeqi	r2,zero,960
  80ee14:	0080ee74 	movhi	r2,953
  80ee18:	0080f020 	cmpeqi	r2,zero,960
  80ee1c:	0080eff4 	movhi	r2,959
  80ee20:	0080f020 	cmpeqi	r2,zero,960
  80ee24:	0080ee74 	movhi	r2,953
  80ee28:	0080ee80 	call	80ee8 <__alt_mem_sdram-0x77f118>
  80ee2c:	0080ee80 	call	80ee8 <__alt_mem_sdram-0x77f118>
  80ee30:	0080eff4 	movhi	r2,959
  80ee34:	0080ee74 	movhi	r2,953
  80ee38:	0080ee64 	muli	r2,zero,953
  80ee3c:	0080ee64 	muli	r2,zero,953
  80ee40:	0080ee64 	muli	r2,zero,953
  80ee44:	0080f314 	movui	r2,972
  80ee48:	2404b03a 	or	r2,r4,r16
  80ee4c:	1000661e 	bne	r2,zero,80efe8 <__divdf3+0x2d4>
  80ee50:	04c00204 	movi	r19,8
  80ee54:	0021883a 	mov	r16,zero
  80ee58:	0025883a 	mov	r18,zero
  80ee5c:	02400084 	movi	r9,2
  80ee60:	003fca06 	br	80ed8c <__alt_mem_onchip_mem+0xff78ed8c>
  80ee64:	8023883a 	mov	r17,r16
  80ee68:	9011883a 	mov	r8,r18
  80ee6c:	e02f883a 	mov	r23,fp
  80ee70:	480f883a 	mov	r7,r9
  80ee74:	00800084 	movi	r2,2
  80ee78:	3881311e 	bne	r7,r2,80f340 <__divdf3+0x62c>
  80ee7c:	b827883a 	mov	r19,r23
  80ee80:	98c0004c 	andi	r3,r19,1
  80ee84:	0081ffc4 	movi	r2,2047
  80ee88:	000b883a 	mov	r5,zero
  80ee8c:	0025883a 	mov	r18,zero
  80ee90:	1004953a 	slli	r2,r2,20
  80ee94:	18c03fcc 	andi	r3,r3,255
  80ee98:	04400434 	movhi	r17,16
  80ee9c:	8c7fffc4 	addi	r17,r17,-1
  80eea0:	180697fa 	slli	r3,r3,31
  80eea4:	2c4a703a 	and	r5,r5,r17
  80eea8:	288ab03a 	or	r5,r5,r2
  80eeac:	28c6b03a 	or	r3,r5,r3
  80eeb0:	9005883a 	mov	r2,r18
  80eeb4:	dfc00d17 	ldw	ra,52(sp)
  80eeb8:	df000c17 	ldw	fp,48(sp)
  80eebc:	ddc00b17 	ldw	r23,44(sp)
  80eec0:	dd800a17 	ldw	r22,40(sp)
  80eec4:	dd400917 	ldw	r21,36(sp)
  80eec8:	dd000817 	ldw	r20,32(sp)
  80eecc:	dcc00717 	ldw	r19,28(sp)
  80eed0:	dc800617 	ldw	r18,24(sp)
  80eed4:	dc400517 	ldw	r17,20(sp)
  80eed8:	dc000417 	ldw	r16,16(sp)
  80eedc:	dec00e04 	addi	sp,sp,56
  80eee0:	f800283a 	ret
  80eee4:	2404b03a 	or	r2,r4,r16
  80eee8:	2027883a 	mov	r19,r4
  80eeec:	10003926 	beq	r2,zero,80efd4 <__divdf3+0x2c0>
  80eef0:	80012e26 	beq	r16,zero,80f3ac <__divdf3+0x698>
  80eef4:	8009883a 	mov	r4,r16
  80eef8:	d9800315 	stw	r6,12(sp)
  80eefc:	d9c00215 	stw	r7,8(sp)
  80ef00:	0810a6c0 	call	810a6c <__clzsi2>
  80ef04:	d9800317 	ldw	r6,12(sp)
  80ef08:	d9c00217 	ldw	r7,8(sp)
  80ef0c:	113ffd44 	addi	r4,r2,-11
  80ef10:	00c00704 	movi	r3,28
  80ef14:	19012116 	blt	r3,r4,80f39c <__divdf3+0x688>
  80ef18:	00c00744 	movi	r3,29
  80ef1c:	147ffe04 	addi	r17,r2,-8
  80ef20:	1907c83a 	sub	r3,r3,r4
  80ef24:	8460983a 	sll	r16,r16,r17
  80ef28:	98c6d83a 	srl	r3,r19,r3
  80ef2c:	9c64983a 	sll	r18,r19,r17
  80ef30:	1c20b03a 	or	r16,r3,r16
  80ef34:	1080fcc4 	addi	r2,r2,1011
  80ef38:	00abc83a 	sub	r21,zero,r2
  80ef3c:	0027883a 	mov	r19,zero
  80ef40:	0013883a 	mov	r9,zero
  80ef44:	003f9106 	br	80ed8c <__alt_mem_onchip_mem+0xff78ed8c>
  80ef48:	3446b03a 	or	r3,r6,r17
  80ef4c:	18001f1e 	bne	r3,zero,80efcc <__divdf3+0x2b8>
  80ef50:	0023883a 	mov	r17,zero
  80ef54:	0011883a 	mov	r8,zero
  80ef58:	01c00084 	movi	r7,2
  80ef5c:	003f9d06 	br	80edd4 <__alt_mem_onchip_mem+0xff78edd4>
  80ef60:	3446b03a 	or	r3,r6,r17
  80ef64:	18001526 	beq	r3,zero,80efbc <__divdf3+0x2a8>
  80ef68:	88011b26 	beq	r17,zero,80f3d8 <__divdf3+0x6c4>
  80ef6c:	8809883a 	mov	r4,r17
  80ef70:	d9800315 	stw	r6,12(sp)
  80ef74:	da400115 	stw	r9,4(sp)
  80ef78:	0810a6c0 	call	810a6c <__clzsi2>
  80ef7c:	d9800317 	ldw	r6,12(sp)
  80ef80:	da400117 	ldw	r9,4(sp)
  80ef84:	113ffd44 	addi	r4,r2,-11
  80ef88:	00c00704 	movi	r3,28
  80ef8c:	19010e16 	blt	r3,r4,80f3c8 <__divdf3+0x6b4>
  80ef90:	00c00744 	movi	r3,29
  80ef94:	123ffe04 	addi	r8,r2,-8
  80ef98:	1907c83a 	sub	r3,r3,r4
  80ef9c:	8a22983a 	sll	r17,r17,r8
  80efa0:	30c6d83a 	srl	r3,r6,r3
  80efa4:	3210983a 	sll	r8,r6,r8
  80efa8:	1c62b03a 	or	r17,r3,r17
  80efac:	1080fcc4 	addi	r2,r2,1011
  80efb0:	0085c83a 	sub	r2,zero,r2
  80efb4:	000f883a 	mov	r7,zero
  80efb8:	003f8606 	br	80edd4 <__alt_mem_onchip_mem+0xff78edd4>
  80efbc:	0023883a 	mov	r17,zero
  80efc0:	0011883a 	mov	r8,zero
  80efc4:	01c00044 	movi	r7,1
  80efc8:	003f8206 	br	80edd4 <__alt_mem_onchip_mem+0xff78edd4>
  80efcc:	01c000c4 	movi	r7,3
  80efd0:	003f8006 	br	80edd4 <__alt_mem_onchip_mem+0xff78edd4>
  80efd4:	04c00104 	movi	r19,4
  80efd8:	0021883a 	mov	r16,zero
  80efdc:	0025883a 	mov	r18,zero
  80efe0:	02400044 	movi	r9,1
  80efe4:	003f6906 	br	80ed8c <__alt_mem_onchip_mem+0xff78ed8c>
  80efe8:	04c00304 	movi	r19,12
  80efec:	024000c4 	movi	r9,3
  80eff0:	003f6606 	br	80ed8c <__alt_mem_onchip_mem+0xff78ed8c>
  80eff4:	01400434 	movhi	r5,16
  80eff8:	0007883a 	mov	r3,zero
  80effc:	297fffc4 	addi	r5,r5,-1
  80f000:	04bfffc4 	movi	r18,-1
  80f004:	0081ffc4 	movi	r2,2047
  80f008:	003fa106 	br	80ee90 <__alt_mem_onchip_mem+0xff78ee90>
  80f00c:	00c00044 	movi	r3,1
  80f010:	1887c83a 	sub	r3,r3,r2
  80f014:	01000e04 	movi	r4,56
  80f018:	20c1210e 	bge	r4,r3,80f4a0 <__divdf3+0x78c>
  80f01c:	98c0004c 	andi	r3,r19,1
  80f020:	0005883a 	mov	r2,zero
  80f024:	000b883a 	mov	r5,zero
  80f028:	0025883a 	mov	r18,zero
  80f02c:	003f9806 	br	80ee90 <__alt_mem_onchip_mem+0xff78ee90>
  80f030:	8c00fd36 	bltu	r17,r16,80f428 <__divdf3+0x714>
  80f034:	8440fb26 	beq	r16,r17,80f424 <__divdf3+0x710>
  80f038:	8007883a 	mov	r3,r16
  80f03c:	ad7fffc4 	addi	r21,r21,-1
  80f040:	0021883a 	mov	r16,zero
  80f044:	4004d63a 	srli	r2,r8,24
  80f048:	8822923a 	slli	r17,r17,8
  80f04c:	1809883a 	mov	r4,r3
  80f050:	402c923a 	slli	r22,r8,8
  80f054:	88b8b03a 	or	fp,r17,r2
  80f058:	e028d43a 	srli	r20,fp,16
  80f05c:	d8c00015 	stw	r3,0(sp)
  80f060:	e5ffffcc 	andi	r23,fp,65535
  80f064:	a00b883a 	mov	r5,r20
  80f068:	080e3ac0 	call	80e3ac <__udivsi3>
  80f06c:	d8c00017 	ldw	r3,0(sp)
  80f070:	a00b883a 	mov	r5,r20
  80f074:	d8800315 	stw	r2,12(sp)
  80f078:	1809883a 	mov	r4,r3
  80f07c:	080e4100 	call	80e410 <__umodsi3>
  80f080:	d9800317 	ldw	r6,12(sp)
  80f084:	1006943a 	slli	r3,r2,16
  80f088:	9004d43a 	srli	r2,r18,16
  80f08c:	b9a3383a 	mul	r17,r23,r6
  80f090:	10c4b03a 	or	r2,r2,r3
  80f094:	1440062e 	bgeu	r2,r17,80f0b0 <__divdf3+0x39c>
  80f098:	1705883a 	add	r2,r2,fp
  80f09c:	30ffffc4 	addi	r3,r6,-1
  80f0a0:	1700ee36 	bltu	r2,fp,80f45c <__divdf3+0x748>
  80f0a4:	1440ed2e 	bgeu	r2,r17,80f45c <__divdf3+0x748>
  80f0a8:	31bfff84 	addi	r6,r6,-2
  80f0ac:	1705883a 	add	r2,r2,fp
  80f0b0:	1463c83a 	sub	r17,r2,r17
  80f0b4:	a00b883a 	mov	r5,r20
  80f0b8:	8809883a 	mov	r4,r17
  80f0bc:	d9800315 	stw	r6,12(sp)
  80f0c0:	080e3ac0 	call	80e3ac <__udivsi3>
  80f0c4:	a00b883a 	mov	r5,r20
  80f0c8:	8809883a 	mov	r4,r17
  80f0cc:	d8800215 	stw	r2,8(sp)
  80f0d0:	080e4100 	call	80e410 <__umodsi3>
  80f0d4:	d9c00217 	ldw	r7,8(sp)
  80f0d8:	1004943a 	slli	r2,r2,16
  80f0dc:	94bfffcc 	andi	r18,r18,65535
  80f0e0:	b9d1383a 	mul	r8,r23,r7
  80f0e4:	90a4b03a 	or	r18,r18,r2
  80f0e8:	d9800317 	ldw	r6,12(sp)
  80f0ec:	9200062e 	bgeu	r18,r8,80f108 <__divdf3+0x3f4>
  80f0f0:	9725883a 	add	r18,r18,fp
  80f0f4:	38bfffc4 	addi	r2,r7,-1
  80f0f8:	9700d636 	bltu	r18,fp,80f454 <__divdf3+0x740>
  80f0fc:	9200d52e 	bgeu	r18,r8,80f454 <__divdf3+0x740>
  80f100:	39ffff84 	addi	r7,r7,-2
  80f104:	9725883a 	add	r18,r18,fp
  80f108:	3004943a 	slli	r2,r6,16
  80f10c:	b012d43a 	srli	r9,r22,16
  80f110:	b1bfffcc 	andi	r6,r22,65535
  80f114:	11e2b03a 	or	r17,r2,r7
  80f118:	8806d43a 	srli	r3,r17,16
  80f11c:	893fffcc 	andi	r4,r17,65535
  80f120:	218b383a 	mul	r5,r4,r6
  80f124:	30c5383a 	mul	r2,r6,r3
  80f128:	2249383a 	mul	r4,r4,r9
  80f12c:	280ed43a 	srli	r7,r5,16
  80f130:	9225c83a 	sub	r18,r18,r8
  80f134:	2089883a 	add	r4,r4,r2
  80f138:	3909883a 	add	r4,r7,r4
  80f13c:	1a47383a 	mul	r3,r3,r9
  80f140:	2080022e 	bgeu	r4,r2,80f14c <__divdf3+0x438>
  80f144:	00800074 	movhi	r2,1
  80f148:	1887883a 	add	r3,r3,r2
  80f14c:	2004d43a 	srli	r2,r4,16
  80f150:	2008943a 	slli	r4,r4,16
  80f154:	297fffcc 	andi	r5,r5,65535
  80f158:	10c7883a 	add	r3,r2,r3
  80f15c:	2149883a 	add	r4,r4,r5
  80f160:	90c0a536 	bltu	r18,r3,80f3f8 <__divdf3+0x6e4>
  80f164:	90c0bf26 	beq	r18,r3,80f464 <__divdf3+0x750>
  80f168:	90c7c83a 	sub	r3,r18,r3
  80f16c:	810fc83a 	sub	r7,r16,r4
  80f170:	81e5803a 	cmpltu	r18,r16,r7
  80f174:	1ca5c83a 	sub	r18,r3,r18
  80f178:	e480c126 	beq	fp,r18,80f480 <__divdf3+0x76c>
  80f17c:	a00b883a 	mov	r5,r20
  80f180:	9009883a 	mov	r4,r18
  80f184:	d9800315 	stw	r6,12(sp)
  80f188:	d9c00215 	stw	r7,8(sp)
  80f18c:	da400115 	stw	r9,4(sp)
  80f190:	080e3ac0 	call	80e3ac <__udivsi3>
  80f194:	a00b883a 	mov	r5,r20
  80f198:	9009883a 	mov	r4,r18
  80f19c:	d8800015 	stw	r2,0(sp)
  80f1a0:	080e4100 	call	80e410 <__umodsi3>
  80f1a4:	d9c00217 	ldw	r7,8(sp)
  80f1a8:	da000017 	ldw	r8,0(sp)
  80f1ac:	1006943a 	slli	r3,r2,16
  80f1b0:	3804d43a 	srli	r2,r7,16
  80f1b4:	ba21383a 	mul	r16,r23,r8
  80f1b8:	d9800317 	ldw	r6,12(sp)
  80f1bc:	10c4b03a 	or	r2,r2,r3
  80f1c0:	da400117 	ldw	r9,4(sp)
  80f1c4:	1400062e 	bgeu	r2,r16,80f1e0 <__divdf3+0x4cc>
  80f1c8:	1705883a 	add	r2,r2,fp
  80f1cc:	40ffffc4 	addi	r3,r8,-1
  80f1d0:	1700ad36 	bltu	r2,fp,80f488 <__divdf3+0x774>
  80f1d4:	1400ac2e 	bgeu	r2,r16,80f488 <__divdf3+0x774>
  80f1d8:	423fff84 	addi	r8,r8,-2
  80f1dc:	1705883a 	add	r2,r2,fp
  80f1e0:	1421c83a 	sub	r16,r2,r16
  80f1e4:	a00b883a 	mov	r5,r20
  80f1e8:	8009883a 	mov	r4,r16
  80f1ec:	d9800315 	stw	r6,12(sp)
  80f1f0:	d9c00215 	stw	r7,8(sp)
  80f1f4:	da000015 	stw	r8,0(sp)
  80f1f8:	da400115 	stw	r9,4(sp)
  80f1fc:	080e3ac0 	call	80e3ac <__udivsi3>
  80f200:	8009883a 	mov	r4,r16
  80f204:	a00b883a 	mov	r5,r20
  80f208:	1025883a 	mov	r18,r2
  80f20c:	080e4100 	call	80e410 <__umodsi3>
  80f210:	d9c00217 	ldw	r7,8(sp)
  80f214:	1004943a 	slli	r2,r2,16
  80f218:	bcaf383a 	mul	r23,r23,r18
  80f21c:	393fffcc 	andi	r4,r7,65535
  80f220:	2088b03a 	or	r4,r4,r2
  80f224:	d9800317 	ldw	r6,12(sp)
  80f228:	da000017 	ldw	r8,0(sp)
  80f22c:	da400117 	ldw	r9,4(sp)
  80f230:	25c0062e 	bgeu	r4,r23,80f24c <__divdf3+0x538>
  80f234:	2709883a 	add	r4,r4,fp
  80f238:	90bfffc4 	addi	r2,r18,-1
  80f23c:	27009436 	bltu	r4,fp,80f490 <__divdf3+0x77c>
  80f240:	25c0932e 	bgeu	r4,r23,80f490 <__divdf3+0x77c>
  80f244:	94bfff84 	addi	r18,r18,-2
  80f248:	2709883a 	add	r4,r4,fp
  80f24c:	4004943a 	slli	r2,r8,16
  80f250:	25efc83a 	sub	r23,r4,r23
  80f254:	1490b03a 	or	r8,r2,r18
  80f258:	4008d43a 	srli	r4,r8,16
  80f25c:	40ffffcc 	andi	r3,r8,65535
  80f260:	30c5383a 	mul	r2,r6,r3
  80f264:	1a47383a 	mul	r3,r3,r9
  80f268:	310d383a 	mul	r6,r6,r4
  80f26c:	100ad43a 	srli	r5,r2,16
  80f270:	4913383a 	mul	r9,r9,r4
  80f274:	1987883a 	add	r3,r3,r6
  80f278:	28c7883a 	add	r3,r5,r3
  80f27c:	1980022e 	bgeu	r3,r6,80f288 <__divdf3+0x574>
  80f280:	01000074 	movhi	r4,1
  80f284:	4913883a 	add	r9,r9,r4
  80f288:	1808d43a 	srli	r4,r3,16
  80f28c:	1806943a 	slli	r3,r3,16
  80f290:	10bfffcc 	andi	r2,r2,65535
  80f294:	2253883a 	add	r9,r4,r9
  80f298:	1887883a 	add	r3,r3,r2
  80f29c:	ba403836 	bltu	r23,r9,80f380 <__divdf3+0x66c>
  80f2a0:	ba403626 	beq	r23,r9,80f37c <__divdf3+0x668>
  80f2a4:	42000054 	ori	r8,r8,1
  80f2a8:	a880ffc4 	addi	r2,r21,1023
  80f2ac:	00bf570e 	bge	zero,r2,80f00c <__alt_mem_onchip_mem+0xff78f00c>
  80f2b0:	40c001cc 	andi	r3,r8,7
  80f2b4:	18000726 	beq	r3,zero,80f2d4 <__divdf3+0x5c0>
  80f2b8:	40c003cc 	andi	r3,r8,15
  80f2bc:	01000104 	movi	r4,4
  80f2c0:	19000426 	beq	r3,r4,80f2d4 <__divdf3+0x5c0>
  80f2c4:	4107883a 	add	r3,r8,r4
  80f2c8:	1a11803a 	cmpltu	r8,r3,r8
  80f2cc:	8a23883a 	add	r17,r17,r8
  80f2d0:	1811883a 	mov	r8,r3
  80f2d4:	88c0402c 	andhi	r3,r17,256
  80f2d8:	18000426 	beq	r3,zero,80f2ec <__divdf3+0x5d8>
  80f2dc:	00ffc034 	movhi	r3,65280
  80f2e0:	18ffffc4 	addi	r3,r3,-1
  80f2e4:	a8810004 	addi	r2,r21,1024
  80f2e8:	88e2703a 	and	r17,r17,r3
  80f2ec:	00c1ff84 	movi	r3,2046
  80f2f0:	18bee316 	blt	r3,r2,80ee80 <__alt_mem_onchip_mem+0xff78ee80>
  80f2f4:	8824977a 	slli	r18,r17,29
  80f2f8:	4010d0fa 	srli	r8,r8,3
  80f2fc:	8822927a 	slli	r17,r17,9
  80f300:	1081ffcc 	andi	r2,r2,2047
  80f304:	9224b03a 	or	r18,r18,r8
  80f308:	880ad33a 	srli	r5,r17,12
  80f30c:	98c0004c 	andi	r3,r19,1
  80f310:	003edf06 	br	80ee90 <__alt_mem_onchip_mem+0xff78ee90>
  80f314:	8080022c 	andhi	r2,r16,8
  80f318:	10001226 	beq	r2,zero,80f364 <__divdf3+0x650>
  80f31c:	8880022c 	andhi	r2,r17,8
  80f320:	1000101e 	bne	r2,zero,80f364 <__divdf3+0x650>
  80f324:	00800434 	movhi	r2,16
  80f328:	89400234 	orhi	r5,r17,8
  80f32c:	10bfffc4 	addi	r2,r2,-1
  80f330:	b007883a 	mov	r3,r22
  80f334:	288a703a 	and	r5,r5,r2
  80f338:	4025883a 	mov	r18,r8
  80f33c:	003f3106 	br	80f004 <__alt_mem_onchip_mem+0xff78f004>
  80f340:	008000c4 	movi	r2,3
  80f344:	3880a626 	beq	r7,r2,80f5e0 <__divdf3+0x8cc>
  80f348:	00800044 	movi	r2,1
  80f34c:	3880521e 	bne	r7,r2,80f498 <__divdf3+0x784>
  80f350:	b807883a 	mov	r3,r23
  80f354:	0005883a 	mov	r2,zero
  80f358:	000b883a 	mov	r5,zero
  80f35c:	0025883a 	mov	r18,zero
  80f360:	003ecb06 	br	80ee90 <__alt_mem_onchip_mem+0xff78ee90>
  80f364:	00800434 	movhi	r2,16
  80f368:	81400234 	orhi	r5,r16,8
  80f36c:	10bfffc4 	addi	r2,r2,-1
  80f370:	a007883a 	mov	r3,r20
  80f374:	288a703a 	and	r5,r5,r2
  80f378:	003f2206 	br	80f004 <__alt_mem_onchip_mem+0xff78f004>
  80f37c:	183fca26 	beq	r3,zero,80f2a8 <__alt_mem_onchip_mem+0xff78f2a8>
  80f380:	e5ef883a 	add	r23,fp,r23
  80f384:	40bfffc4 	addi	r2,r8,-1
  80f388:	bf00392e 	bgeu	r23,fp,80f470 <__divdf3+0x75c>
  80f38c:	1011883a 	mov	r8,r2
  80f390:	ba7fc41e 	bne	r23,r9,80f2a4 <__alt_mem_onchip_mem+0xff78f2a4>
  80f394:	b0ffc31e 	bne	r22,r3,80f2a4 <__alt_mem_onchip_mem+0xff78f2a4>
  80f398:	003fc306 	br	80f2a8 <__alt_mem_onchip_mem+0xff78f2a8>
  80f39c:	143ff604 	addi	r16,r2,-40
  80f3a0:	9c20983a 	sll	r16,r19,r16
  80f3a4:	0025883a 	mov	r18,zero
  80f3a8:	003ee206 	br	80ef34 <__alt_mem_onchip_mem+0xff78ef34>
  80f3ac:	d9800315 	stw	r6,12(sp)
  80f3b0:	d9c00215 	stw	r7,8(sp)
  80f3b4:	0810a6c0 	call	810a6c <__clzsi2>
  80f3b8:	10800804 	addi	r2,r2,32
  80f3bc:	d9c00217 	ldw	r7,8(sp)
  80f3c0:	d9800317 	ldw	r6,12(sp)
  80f3c4:	003ed106 	br	80ef0c <__alt_mem_onchip_mem+0xff78ef0c>
  80f3c8:	147ff604 	addi	r17,r2,-40
  80f3cc:	3462983a 	sll	r17,r6,r17
  80f3d0:	0011883a 	mov	r8,zero
  80f3d4:	003ef506 	br	80efac <__alt_mem_onchip_mem+0xff78efac>
  80f3d8:	3009883a 	mov	r4,r6
  80f3dc:	d9800315 	stw	r6,12(sp)
  80f3e0:	da400115 	stw	r9,4(sp)
  80f3e4:	0810a6c0 	call	810a6c <__clzsi2>
  80f3e8:	10800804 	addi	r2,r2,32
  80f3ec:	da400117 	ldw	r9,4(sp)
  80f3f0:	d9800317 	ldw	r6,12(sp)
  80f3f4:	003ee306 	br	80ef84 <__alt_mem_onchip_mem+0xff78ef84>
  80f3f8:	85a1883a 	add	r16,r16,r22
  80f3fc:	8585803a 	cmpltu	r2,r16,r22
  80f400:	1705883a 	add	r2,r2,fp
  80f404:	14a5883a 	add	r18,r2,r18
  80f408:	88bfffc4 	addi	r2,r17,-1
  80f40c:	e4800c2e 	bgeu	fp,r18,80f440 <__divdf3+0x72c>
  80f410:	90c03e36 	bltu	r18,r3,80f50c <__divdf3+0x7f8>
  80f414:	1c806926 	beq	r3,r18,80f5bc <__divdf3+0x8a8>
  80f418:	90c7c83a 	sub	r3,r18,r3
  80f41c:	1023883a 	mov	r17,r2
  80f420:	003f5206 	br	80f16c <__alt_mem_onchip_mem+0xff78f16c>
  80f424:	923f0436 	bltu	r18,r8,80f038 <__alt_mem_onchip_mem+0xff78f038>
  80f428:	800897fa 	slli	r4,r16,31
  80f42c:	9004d07a 	srli	r2,r18,1
  80f430:	8006d07a 	srli	r3,r16,1
  80f434:	902097fa 	slli	r16,r18,31
  80f438:	20a4b03a 	or	r18,r4,r2
  80f43c:	003f0106 	br	80f044 <__alt_mem_onchip_mem+0xff78f044>
  80f440:	e4bff51e 	bne	fp,r18,80f418 <__alt_mem_onchip_mem+0xff78f418>
  80f444:	85bff22e 	bgeu	r16,r22,80f410 <__alt_mem_onchip_mem+0xff78f410>
  80f448:	e0c7c83a 	sub	r3,fp,r3
  80f44c:	1023883a 	mov	r17,r2
  80f450:	003f4606 	br	80f16c <__alt_mem_onchip_mem+0xff78f16c>
  80f454:	100f883a 	mov	r7,r2
  80f458:	003f2b06 	br	80f108 <__alt_mem_onchip_mem+0xff78f108>
  80f45c:	180d883a 	mov	r6,r3
  80f460:	003f1306 	br	80f0b0 <__alt_mem_onchip_mem+0xff78f0b0>
  80f464:	813fe436 	bltu	r16,r4,80f3f8 <__alt_mem_onchip_mem+0xff78f3f8>
  80f468:	0007883a 	mov	r3,zero
  80f46c:	003f3f06 	br	80f16c <__alt_mem_onchip_mem+0xff78f16c>
  80f470:	ba402c36 	bltu	r23,r9,80f524 <__divdf3+0x810>
  80f474:	4dc05426 	beq	r9,r23,80f5c8 <__divdf3+0x8b4>
  80f478:	1011883a 	mov	r8,r2
  80f47c:	003f8906 	br	80f2a4 <__alt_mem_onchip_mem+0xff78f2a4>
  80f480:	023fffc4 	movi	r8,-1
  80f484:	003f8806 	br	80f2a8 <__alt_mem_onchip_mem+0xff78f2a8>
  80f488:	1811883a 	mov	r8,r3
  80f48c:	003f5406 	br	80f1e0 <__alt_mem_onchip_mem+0xff78f1e0>
  80f490:	1025883a 	mov	r18,r2
  80f494:	003f6d06 	br	80f24c <__alt_mem_onchip_mem+0xff78f24c>
  80f498:	b827883a 	mov	r19,r23
  80f49c:	003f8206 	br	80f2a8 <__alt_mem_onchip_mem+0xff78f2a8>
  80f4a0:	010007c4 	movi	r4,31
  80f4a4:	20c02616 	blt	r4,r3,80f540 <__divdf3+0x82c>
  80f4a8:	00800804 	movi	r2,32
  80f4ac:	10c5c83a 	sub	r2,r2,r3
  80f4b0:	888a983a 	sll	r5,r17,r2
  80f4b4:	40c8d83a 	srl	r4,r8,r3
  80f4b8:	4084983a 	sll	r2,r8,r2
  80f4bc:	88e2d83a 	srl	r17,r17,r3
  80f4c0:	2906b03a 	or	r3,r5,r4
  80f4c4:	1004c03a 	cmpne	r2,r2,zero
  80f4c8:	1886b03a 	or	r3,r3,r2
  80f4cc:	188001cc 	andi	r2,r3,7
  80f4d0:	10000726 	beq	r2,zero,80f4f0 <__divdf3+0x7dc>
  80f4d4:	188003cc 	andi	r2,r3,15
  80f4d8:	01000104 	movi	r4,4
  80f4dc:	11000426 	beq	r2,r4,80f4f0 <__divdf3+0x7dc>
  80f4e0:	1805883a 	mov	r2,r3
  80f4e4:	10c00104 	addi	r3,r2,4
  80f4e8:	1885803a 	cmpltu	r2,r3,r2
  80f4ec:	88a3883a 	add	r17,r17,r2
  80f4f0:	8880202c 	andhi	r2,r17,128
  80f4f4:	10002726 	beq	r2,zero,80f594 <__divdf3+0x880>
  80f4f8:	98c0004c 	andi	r3,r19,1
  80f4fc:	00800044 	movi	r2,1
  80f500:	000b883a 	mov	r5,zero
  80f504:	0025883a 	mov	r18,zero
  80f508:	003e6106 	br	80ee90 <__alt_mem_onchip_mem+0xff78ee90>
  80f50c:	85a1883a 	add	r16,r16,r22
  80f510:	8585803a 	cmpltu	r2,r16,r22
  80f514:	1705883a 	add	r2,r2,fp
  80f518:	14a5883a 	add	r18,r2,r18
  80f51c:	8c7fff84 	addi	r17,r17,-2
  80f520:	003f1106 	br	80f168 <__alt_mem_onchip_mem+0xff78f168>
  80f524:	b589883a 	add	r4,r22,r22
  80f528:	25ad803a 	cmpltu	r22,r4,r22
  80f52c:	b739883a 	add	fp,r22,fp
  80f530:	40bfff84 	addi	r2,r8,-2
  80f534:	bf2f883a 	add	r23,r23,fp
  80f538:	202d883a 	mov	r22,r4
  80f53c:	003f9306 	br	80f38c <__alt_mem_onchip_mem+0xff78f38c>
  80f540:	013ff844 	movi	r4,-31
  80f544:	2085c83a 	sub	r2,r4,r2
  80f548:	8888d83a 	srl	r4,r17,r2
  80f54c:	00800804 	movi	r2,32
  80f550:	18802126 	beq	r3,r2,80f5d8 <__divdf3+0x8c4>
  80f554:	00801004 	movi	r2,64
  80f558:	10c5c83a 	sub	r2,r2,r3
  80f55c:	8884983a 	sll	r2,r17,r2
  80f560:	1204b03a 	or	r2,r2,r8
  80f564:	1004c03a 	cmpne	r2,r2,zero
  80f568:	2084b03a 	or	r2,r4,r2
  80f56c:	144001cc 	andi	r17,r2,7
  80f570:	88000d1e 	bne	r17,zero,80f5a8 <__divdf3+0x894>
  80f574:	000b883a 	mov	r5,zero
  80f578:	1024d0fa 	srli	r18,r2,3
  80f57c:	98c0004c 	andi	r3,r19,1
  80f580:	0005883a 	mov	r2,zero
  80f584:	9464b03a 	or	r18,r18,r17
  80f588:	003e4106 	br	80ee90 <__alt_mem_onchip_mem+0xff78ee90>
  80f58c:	1007883a 	mov	r3,r2
  80f590:	0023883a 	mov	r17,zero
  80f594:	880a927a 	slli	r5,r17,9
  80f598:	1805883a 	mov	r2,r3
  80f59c:	8822977a 	slli	r17,r17,29
  80f5a0:	280ad33a 	srli	r5,r5,12
  80f5a4:	003ff406 	br	80f578 <__alt_mem_onchip_mem+0xff78f578>
  80f5a8:	10c003cc 	andi	r3,r2,15
  80f5ac:	01000104 	movi	r4,4
  80f5b0:	193ff626 	beq	r3,r4,80f58c <__alt_mem_onchip_mem+0xff78f58c>
  80f5b4:	0023883a 	mov	r17,zero
  80f5b8:	003fca06 	br	80f4e4 <__alt_mem_onchip_mem+0xff78f4e4>
  80f5bc:	813fd336 	bltu	r16,r4,80f50c <__alt_mem_onchip_mem+0xff78f50c>
  80f5c0:	1023883a 	mov	r17,r2
  80f5c4:	003fa806 	br	80f468 <__alt_mem_onchip_mem+0xff78f468>
  80f5c8:	b0ffd636 	bltu	r22,r3,80f524 <__alt_mem_onchip_mem+0xff78f524>
  80f5cc:	1011883a 	mov	r8,r2
  80f5d0:	b0ff341e 	bne	r22,r3,80f2a4 <__alt_mem_onchip_mem+0xff78f2a4>
  80f5d4:	003f3406 	br	80f2a8 <__alt_mem_onchip_mem+0xff78f2a8>
  80f5d8:	0005883a 	mov	r2,zero
  80f5dc:	003fe006 	br	80f560 <__alt_mem_onchip_mem+0xff78f560>
  80f5e0:	00800434 	movhi	r2,16
  80f5e4:	89400234 	orhi	r5,r17,8
  80f5e8:	10bfffc4 	addi	r2,r2,-1
  80f5ec:	b807883a 	mov	r3,r23
  80f5f0:	288a703a 	and	r5,r5,r2
  80f5f4:	4025883a 	mov	r18,r8
  80f5f8:	003e8206 	br	80f004 <__alt_mem_onchip_mem+0xff78f004>

0080f5fc <__eqdf2>:
  80f5fc:	2804d53a 	srli	r2,r5,20
  80f600:	3806d53a 	srli	r3,r7,20
  80f604:	02000434 	movhi	r8,16
  80f608:	423fffc4 	addi	r8,r8,-1
  80f60c:	1081ffcc 	andi	r2,r2,2047
  80f610:	0281ffc4 	movi	r10,2047
  80f614:	2a12703a 	and	r9,r5,r8
  80f618:	18c1ffcc 	andi	r3,r3,2047
  80f61c:	3a10703a 	and	r8,r7,r8
  80f620:	280ad7fa 	srli	r5,r5,31
  80f624:	380ed7fa 	srli	r7,r7,31
  80f628:	12801026 	beq	r2,r10,80f66c <__eqdf2+0x70>
  80f62c:	0281ffc4 	movi	r10,2047
  80f630:	1a800a26 	beq	r3,r10,80f65c <__eqdf2+0x60>
  80f634:	10c00226 	beq	r2,r3,80f640 <__eqdf2+0x44>
  80f638:	00800044 	movi	r2,1
  80f63c:	f800283a 	ret
  80f640:	4a3ffd1e 	bne	r9,r8,80f638 <__alt_mem_onchip_mem+0xff78f638>
  80f644:	21bffc1e 	bne	r4,r6,80f638 <__alt_mem_onchip_mem+0xff78f638>
  80f648:	29c00c26 	beq	r5,r7,80f67c <__eqdf2+0x80>
  80f64c:	103ffa1e 	bne	r2,zero,80f638 <__alt_mem_onchip_mem+0xff78f638>
  80f650:	2244b03a 	or	r2,r4,r9
  80f654:	1004c03a 	cmpne	r2,r2,zero
  80f658:	f800283a 	ret
  80f65c:	3214b03a 	or	r10,r6,r8
  80f660:	503ff426 	beq	r10,zero,80f634 <__alt_mem_onchip_mem+0xff78f634>
  80f664:	00800044 	movi	r2,1
  80f668:	f800283a 	ret
  80f66c:	2254b03a 	or	r10,r4,r9
  80f670:	503fee26 	beq	r10,zero,80f62c <__alt_mem_onchip_mem+0xff78f62c>
  80f674:	00800044 	movi	r2,1
  80f678:	f800283a 	ret
  80f67c:	0005883a 	mov	r2,zero
  80f680:	f800283a 	ret

0080f684 <__gedf2>:
  80f684:	2804d53a 	srli	r2,r5,20
  80f688:	3806d53a 	srli	r3,r7,20
  80f68c:	02000434 	movhi	r8,16
  80f690:	423fffc4 	addi	r8,r8,-1
  80f694:	1081ffcc 	andi	r2,r2,2047
  80f698:	0241ffc4 	movi	r9,2047
  80f69c:	2a14703a 	and	r10,r5,r8
  80f6a0:	18c1ffcc 	andi	r3,r3,2047
  80f6a4:	3a10703a 	and	r8,r7,r8
  80f6a8:	280ad7fa 	srli	r5,r5,31
  80f6ac:	380ed7fa 	srli	r7,r7,31
  80f6b0:	12401d26 	beq	r2,r9,80f728 <__gedf2+0xa4>
  80f6b4:	0241ffc4 	movi	r9,2047
  80f6b8:	1a401226 	beq	r3,r9,80f704 <__gedf2+0x80>
  80f6bc:	1000081e 	bne	r2,zero,80f6e0 <__gedf2+0x5c>
  80f6c0:	2296b03a 	or	r11,r4,r10
  80f6c4:	5813003a 	cmpeq	r9,r11,zero
  80f6c8:	1800091e 	bne	r3,zero,80f6f0 <__gedf2+0x6c>
  80f6cc:	3218b03a 	or	r12,r6,r8
  80f6d0:	6000071e 	bne	r12,zero,80f6f0 <__gedf2+0x6c>
  80f6d4:	0005883a 	mov	r2,zero
  80f6d8:	5800101e 	bne	r11,zero,80f71c <__gedf2+0x98>
  80f6dc:	f800283a 	ret
  80f6e0:	18000c1e 	bne	r3,zero,80f714 <__gedf2+0x90>
  80f6e4:	3212b03a 	or	r9,r6,r8
  80f6e8:	48000c26 	beq	r9,zero,80f71c <__gedf2+0x98>
  80f6ec:	0013883a 	mov	r9,zero
  80f6f0:	39c03fcc 	andi	r7,r7,255
  80f6f4:	48000826 	beq	r9,zero,80f718 <__gedf2+0x94>
  80f6f8:	38000926 	beq	r7,zero,80f720 <__gedf2+0x9c>
  80f6fc:	00800044 	movi	r2,1
  80f700:	f800283a 	ret
  80f704:	3212b03a 	or	r9,r6,r8
  80f708:	483fec26 	beq	r9,zero,80f6bc <__alt_mem_onchip_mem+0xff78f6bc>
  80f70c:	00bfff84 	movi	r2,-2
  80f710:	f800283a 	ret
  80f714:	39c03fcc 	andi	r7,r7,255
  80f718:	29c00626 	beq	r5,r7,80f734 <__gedf2+0xb0>
  80f71c:	283ff726 	beq	r5,zero,80f6fc <__alt_mem_onchip_mem+0xff78f6fc>
  80f720:	00bfffc4 	movi	r2,-1
  80f724:	f800283a 	ret
  80f728:	2292b03a 	or	r9,r4,r10
  80f72c:	483fe126 	beq	r9,zero,80f6b4 <__alt_mem_onchip_mem+0xff78f6b4>
  80f730:	003ff606 	br	80f70c <__alt_mem_onchip_mem+0xff78f70c>
  80f734:	18bff916 	blt	r3,r2,80f71c <__alt_mem_onchip_mem+0xff78f71c>
  80f738:	10c00316 	blt	r2,r3,80f748 <__gedf2+0xc4>
  80f73c:	42bff736 	bltu	r8,r10,80f71c <__alt_mem_onchip_mem+0xff78f71c>
  80f740:	52000326 	beq	r10,r8,80f750 <__gedf2+0xcc>
  80f744:	5200042e 	bgeu	r10,r8,80f758 <__gedf2+0xd4>
  80f748:	283fec1e 	bne	r5,zero,80f6fc <__alt_mem_onchip_mem+0xff78f6fc>
  80f74c:	003ff406 	br	80f720 <__alt_mem_onchip_mem+0xff78f720>
  80f750:	313ff236 	bltu	r6,r4,80f71c <__alt_mem_onchip_mem+0xff78f71c>
  80f754:	21bffc36 	bltu	r4,r6,80f748 <__alt_mem_onchip_mem+0xff78f748>
  80f758:	0005883a 	mov	r2,zero
  80f75c:	f800283a 	ret

0080f760 <__ledf2>:
  80f760:	2804d53a 	srli	r2,r5,20
  80f764:	3810d53a 	srli	r8,r7,20
  80f768:	00c00434 	movhi	r3,16
  80f76c:	18ffffc4 	addi	r3,r3,-1
  80f770:	1081ffcc 	andi	r2,r2,2047
  80f774:	0241ffc4 	movi	r9,2047
  80f778:	28d4703a 	and	r10,r5,r3
  80f77c:	4201ffcc 	andi	r8,r8,2047
  80f780:	38c6703a 	and	r3,r7,r3
  80f784:	280ad7fa 	srli	r5,r5,31
  80f788:	380ed7fa 	srli	r7,r7,31
  80f78c:	12401f26 	beq	r2,r9,80f80c <__ledf2+0xac>
  80f790:	0241ffc4 	movi	r9,2047
  80f794:	42401426 	beq	r8,r9,80f7e8 <__ledf2+0x88>
  80f798:	1000091e 	bne	r2,zero,80f7c0 <__ledf2+0x60>
  80f79c:	2296b03a 	or	r11,r4,r10
  80f7a0:	5813003a 	cmpeq	r9,r11,zero
  80f7a4:	29403fcc 	andi	r5,r5,255
  80f7a8:	40000a1e 	bne	r8,zero,80f7d4 <__ledf2+0x74>
  80f7ac:	30d8b03a 	or	r12,r6,r3
  80f7b0:	6000081e 	bne	r12,zero,80f7d4 <__ledf2+0x74>
  80f7b4:	0005883a 	mov	r2,zero
  80f7b8:	5800111e 	bne	r11,zero,80f800 <__ledf2+0xa0>
  80f7bc:	f800283a 	ret
  80f7c0:	29403fcc 	andi	r5,r5,255
  80f7c4:	40000c1e 	bne	r8,zero,80f7f8 <__ledf2+0x98>
  80f7c8:	30d2b03a 	or	r9,r6,r3
  80f7cc:	48000c26 	beq	r9,zero,80f800 <__ledf2+0xa0>
  80f7d0:	0013883a 	mov	r9,zero
  80f7d4:	39c03fcc 	andi	r7,r7,255
  80f7d8:	48000826 	beq	r9,zero,80f7fc <__ledf2+0x9c>
  80f7dc:	38001126 	beq	r7,zero,80f824 <__ledf2+0xc4>
  80f7e0:	00800044 	movi	r2,1
  80f7e4:	f800283a 	ret
  80f7e8:	30d2b03a 	or	r9,r6,r3
  80f7ec:	483fea26 	beq	r9,zero,80f798 <__alt_mem_onchip_mem+0xff78f798>
  80f7f0:	00800084 	movi	r2,2
  80f7f4:	f800283a 	ret
  80f7f8:	39c03fcc 	andi	r7,r7,255
  80f7fc:	39400726 	beq	r7,r5,80f81c <__ledf2+0xbc>
  80f800:	2800081e 	bne	r5,zero,80f824 <__ledf2+0xc4>
  80f804:	00800044 	movi	r2,1
  80f808:	f800283a 	ret
  80f80c:	2292b03a 	or	r9,r4,r10
  80f810:	483fdf26 	beq	r9,zero,80f790 <__alt_mem_onchip_mem+0xff78f790>
  80f814:	00800084 	movi	r2,2
  80f818:	f800283a 	ret
  80f81c:	4080030e 	bge	r8,r2,80f82c <__ledf2+0xcc>
  80f820:	383fef26 	beq	r7,zero,80f7e0 <__alt_mem_onchip_mem+0xff78f7e0>
  80f824:	00bfffc4 	movi	r2,-1
  80f828:	f800283a 	ret
  80f82c:	123feb16 	blt	r2,r8,80f7dc <__alt_mem_onchip_mem+0xff78f7dc>
  80f830:	1abff336 	bltu	r3,r10,80f800 <__alt_mem_onchip_mem+0xff78f800>
  80f834:	50c00326 	beq	r10,r3,80f844 <__ledf2+0xe4>
  80f838:	50c0042e 	bgeu	r10,r3,80f84c <__ledf2+0xec>
  80f83c:	283fe81e 	bne	r5,zero,80f7e0 <__alt_mem_onchip_mem+0xff78f7e0>
  80f840:	003ff806 	br	80f824 <__alt_mem_onchip_mem+0xff78f824>
  80f844:	313fee36 	bltu	r6,r4,80f800 <__alt_mem_onchip_mem+0xff78f800>
  80f848:	21bffc36 	bltu	r4,r6,80f83c <__alt_mem_onchip_mem+0xff78f83c>
  80f84c:	0005883a 	mov	r2,zero
  80f850:	f800283a 	ret

0080f854 <__muldf3>:
  80f854:	defff304 	addi	sp,sp,-52
  80f858:	2804d53a 	srli	r2,r5,20
  80f85c:	dd800915 	stw	r22,36(sp)
  80f860:	282cd7fa 	srli	r22,r5,31
  80f864:	dc000315 	stw	r16,12(sp)
  80f868:	04000434 	movhi	r16,16
  80f86c:	dd400815 	stw	r21,32(sp)
  80f870:	dc800515 	stw	r18,20(sp)
  80f874:	843fffc4 	addi	r16,r16,-1
  80f878:	dfc00c15 	stw	ra,48(sp)
  80f87c:	df000b15 	stw	fp,44(sp)
  80f880:	ddc00a15 	stw	r23,40(sp)
  80f884:	dd000715 	stw	r20,28(sp)
  80f888:	dcc00615 	stw	r19,24(sp)
  80f88c:	dc400415 	stw	r17,16(sp)
  80f890:	1481ffcc 	andi	r18,r2,2047
  80f894:	2c20703a 	and	r16,r5,r16
  80f898:	b02b883a 	mov	r21,r22
  80f89c:	b2403fcc 	andi	r9,r22,255
  80f8a0:	90006026 	beq	r18,zero,80fa24 <__muldf3+0x1d0>
  80f8a4:	0081ffc4 	movi	r2,2047
  80f8a8:	2029883a 	mov	r20,r4
  80f8ac:	90803626 	beq	r18,r2,80f988 <__muldf3+0x134>
  80f8b0:	80800434 	orhi	r2,r16,16
  80f8b4:	100490fa 	slli	r2,r2,3
  80f8b8:	2020d77a 	srli	r16,r4,29
  80f8bc:	202890fa 	slli	r20,r4,3
  80f8c0:	94bf0044 	addi	r18,r18,-1023
  80f8c4:	80a0b03a 	or	r16,r16,r2
  80f8c8:	0027883a 	mov	r19,zero
  80f8cc:	0039883a 	mov	fp,zero
  80f8d0:	3804d53a 	srli	r2,r7,20
  80f8d4:	382ed7fa 	srli	r23,r7,31
  80f8d8:	04400434 	movhi	r17,16
  80f8dc:	8c7fffc4 	addi	r17,r17,-1
  80f8e0:	1081ffcc 	andi	r2,r2,2047
  80f8e4:	3011883a 	mov	r8,r6
  80f8e8:	3c62703a 	and	r17,r7,r17
  80f8ec:	ba803fcc 	andi	r10,r23,255
  80f8f0:	10006d26 	beq	r2,zero,80faa8 <__muldf3+0x254>
  80f8f4:	00c1ffc4 	movi	r3,2047
  80f8f8:	10c06526 	beq	r2,r3,80fa90 <__muldf3+0x23c>
  80f8fc:	88c00434 	orhi	r3,r17,16
  80f900:	180690fa 	slli	r3,r3,3
  80f904:	3022d77a 	srli	r17,r6,29
  80f908:	301090fa 	slli	r8,r6,3
  80f90c:	10bf0044 	addi	r2,r2,-1023
  80f910:	88e2b03a 	or	r17,r17,r3
  80f914:	000b883a 	mov	r5,zero
  80f918:	9085883a 	add	r2,r18,r2
  80f91c:	2cc8b03a 	or	r4,r5,r19
  80f920:	00c003c4 	movi	r3,15
  80f924:	bdacf03a 	xor	r22,r23,r22
  80f928:	12c00044 	addi	r11,r2,1
  80f92c:	19009936 	bltu	r3,r4,80fb94 <__muldf3+0x340>
  80f930:	200890ba 	slli	r4,r4,2
  80f934:	00c02074 	movhi	r3,129
  80f938:	18fe5204 	addi	r3,r3,-1720
  80f93c:	20c9883a 	add	r4,r4,r3
  80f940:	20c00017 	ldw	r3,0(r4)
  80f944:	1800683a 	jmp	r3
  80f948:	0080fb94 	movui	r2,1006
  80f94c:	0080f9a8 	cmpgeui	r2,zero,998
  80f950:	0080f9a8 	cmpgeui	r2,zero,998
  80f954:	0080f9a4 	muli	r2,zero,998
  80f958:	0080fb70 	cmpltui	r2,zero,1005
  80f95c:	0080fb70 	cmpltui	r2,zero,1005
  80f960:	0080fb58 	cmpnei	r2,zero,1005
  80f964:	0080f9a4 	muli	r2,zero,998
  80f968:	0080fb70 	cmpltui	r2,zero,1005
  80f96c:	0080fb58 	cmpnei	r2,zero,1005
  80f970:	0080fb70 	cmpltui	r2,zero,1005
  80f974:	0080f9a4 	muli	r2,zero,998
  80f978:	0080fb80 	call	80fb8 <__alt_mem_sdram-0x77f048>
  80f97c:	0080fb80 	call	80fb8 <__alt_mem_sdram-0x77f048>
  80f980:	0080fb80 	call	80fb8 <__alt_mem_sdram-0x77f048>
  80f984:	0080fd9c 	xori	r2,zero,1014
  80f988:	2404b03a 	or	r2,r4,r16
  80f98c:	10006f1e 	bne	r2,zero,80fb4c <__muldf3+0x2f8>
  80f990:	04c00204 	movi	r19,8
  80f994:	0021883a 	mov	r16,zero
  80f998:	0029883a 	mov	r20,zero
  80f99c:	07000084 	movi	fp,2
  80f9a0:	003fcb06 	br	80f8d0 <__alt_mem_onchip_mem+0xff78f8d0>
  80f9a4:	502d883a 	mov	r22,r10
  80f9a8:	00800084 	movi	r2,2
  80f9ac:	28805726 	beq	r5,r2,80fb0c <__muldf3+0x2b8>
  80f9b0:	008000c4 	movi	r2,3
  80f9b4:	28816626 	beq	r5,r2,80ff50 <__muldf3+0x6fc>
  80f9b8:	00800044 	movi	r2,1
  80f9bc:	2881411e 	bne	r5,r2,80fec4 <__muldf3+0x670>
  80f9c0:	b02b883a 	mov	r21,r22
  80f9c4:	0005883a 	mov	r2,zero
  80f9c8:	000b883a 	mov	r5,zero
  80f9cc:	0029883a 	mov	r20,zero
  80f9d0:	1004953a 	slli	r2,r2,20
  80f9d4:	a8c03fcc 	andi	r3,r21,255
  80f9d8:	04400434 	movhi	r17,16
  80f9dc:	8c7fffc4 	addi	r17,r17,-1
  80f9e0:	180697fa 	slli	r3,r3,31
  80f9e4:	2c4a703a 	and	r5,r5,r17
  80f9e8:	288ab03a 	or	r5,r5,r2
  80f9ec:	28c6b03a 	or	r3,r5,r3
  80f9f0:	a005883a 	mov	r2,r20
  80f9f4:	dfc00c17 	ldw	ra,48(sp)
  80f9f8:	df000b17 	ldw	fp,44(sp)
  80f9fc:	ddc00a17 	ldw	r23,40(sp)
  80fa00:	dd800917 	ldw	r22,36(sp)
  80fa04:	dd400817 	ldw	r21,32(sp)
  80fa08:	dd000717 	ldw	r20,28(sp)
  80fa0c:	dcc00617 	ldw	r19,24(sp)
  80fa10:	dc800517 	ldw	r18,20(sp)
  80fa14:	dc400417 	ldw	r17,16(sp)
  80fa18:	dc000317 	ldw	r16,12(sp)
  80fa1c:	dec00d04 	addi	sp,sp,52
  80fa20:	f800283a 	ret
  80fa24:	2404b03a 	or	r2,r4,r16
  80fa28:	2027883a 	mov	r19,r4
  80fa2c:	10004226 	beq	r2,zero,80fb38 <__muldf3+0x2e4>
  80fa30:	8000fc26 	beq	r16,zero,80fe24 <__muldf3+0x5d0>
  80fa34:	8009883a 	mov	r4,r16
  80fa38:	d9800215 	stw	r6,8(sp)
  80fa3c:	d9c00015 	stw	r7,0(sp)
  80fa40:	da400115 	stw	r9,4(sp)
  80fa44:	0810a6c0 	call	810a6c <__clzsi2>
  80fa48:	d9800217 	ldw	r6,8(sp)
  80fa4c:	d9c00017 	ldw	r7,0(sp)
  80fa50:	da400117 	ldw	r9,4(sp)
  80fa54:	113ffd44 	addi	r4,r2,-11
  80fa58:	00c00704 	movi	r3,28
  80fa5c:	1900ed16 	blt	r3,r4,80fe14 <__muldf3+0x5c0>
  80fa60:	00c00744 	movi	r3,29
  80fa64:	147ffe04 	addi	r17,r2,-8
  80fa68:	1907c83a 	sub	r3,r3,r4
  80fa6c:	8460983a 	sll	r16,r16,r17
  80fa70:	98c6d83a 	srl	r3,r19,r3
  80fa74:	9c68983a 	sll	r20,r19,r17
  80fa78:	1c20b03a 	or	r16,r3,r16
  80fa7c:	1080fcc4 	addi	r2,r2,1011
  80fa80:	00a5c83a 	sub	r18,zero,r2
  80fa84:	0027883a 	mov	r19,zero
  80fa88:	0039883a 	mov	fp,zero
  80fa8c:	003f9006 	br	80f8d0 <__alt_mem_onchip_mem+0xff78f8d0>
  80fa90:	3446b03a 	or	r3,r6,r17
  80fa94:	1800261e 	bne	r3,zero,80fb30 <__muldf3+0x2dc>
  80fa98:	0023883a 	mov	r17,zero
  80fa9c:	0011883a 	mov	r8,zero
  80faa0:	01400084 	movi	r5,2
  80faa4:	003f9c06 	br	80f918 <__alt_mem_onchip_mem+0xff78f918>
  80faa8:	3446b03a 	or	r3,r6,r17
  80faac:	18001c26 	beq	r3,zero,80fb20 <__muldf3+0x2cc>
  80fab0:	8800ce26 	beq	r17,zero,80fdec <__muldf3+0x598>
  80fab4:	8809883a 	mov	r4,r17
  80fab8:	d9800215 	stw	r6,8(sp)
  80fabc:	da400115 	stw	r9,4(sp)
  80fac0:	da800015 	stw	r10,0(sp)
  80fac4:	0810a6c0 	call	810a6c <__clzsi2>
  80fac8:	d9800217 	ldw	r6,8(sp)
  80facc:	da400117 	ldw	r9,4(sp)
  80fad0:	da800017 	ldw	r10,0(sp)
  80fad4:	113ffd44 	addi	r4,r2,-11
  80fad8:	00c00704 	movi	r3,28
  80fadc:	1900bf16 	blt	r3,r4,80fddc <__muldf3+0x588>
  80fae0:	00c00744 	movi	r3,29
  80fae4:	123ffe04 	addi	r8,r2,-8
  80fae8:	1907c83a 	sub	r3,r3,r4
  80faec:	8a22983a 	sll	r17,r17,r8
  80faf0:	30c6d83a 	srl	r3,r6,r3
  80faf4:	3210983a 	sll	r8,r6,r8
  80faf8:	1c62b03a 	or	r17,r3,r17
  80fafc:	1080fcc4 	addi	r2,r2,1011
  80fb00:	0085c83a 	sub	r2,zero,r2
  80fb04:	000b883a 	mov	r5,zero
  80fb08:	003f8306 	br	80f918 <__alt_mem_onchip_mem+0xff78f918>
  80fb0c:	b02b883a 	mov	r21,r22
  80fb10:	0081ffc4 	movi	r2,2047
  80fb14:	000b883a 	mov	r5,zero
  80fb18:	0029883a 	mov	r20,zero
  80fb1c:	003fac06 	br	80f9d0 <__alt_mem_onchip_mem+0xff78f9d0>
  80fb20:	0023883a 	mov	r17,zero
  80fb24:	0011883a 	mov	r8,zero
  80fb28:	01400044 	movi	r5,1
  80fb2c:	003f7a06 	br	80f918 <__alt_mem_onchip_mem+0xff78f918>
  80fb30:	014000c4 	movi	r5,3
  80fb34:	003f7806 	br	80f918 <__alt_mem_onchip_mem+0xff78f918>
  80fb38:	04c00104 	movi	r19,4
  80fb3c:	0021883a 	mov	r16,zero
  80fb40:	0029883a 	mov	r20,zero
  80fb44:	07000044 	movi	fp,1
  80fb48:	003f6106 	br	80f8d0 <__alt_mem_onchip_mem+0xff78f8d0>
  80fb4c:	04c00304 	movi	r19,12
  80fb50:	070000c4 	movi	fp,3
  80fb54:	003f5e06 	br	80f8d0 <__alt_mem_onchip_mem+0xff78f8d0>
  80fb58:	01400434 	movhi	r5,16
  80fb5c:	002b883a 	mov	r21,zero
  80fb60:	297fffc4 	addi	r5,r5,-1
  80fb64:	053fffc4 	movi	r20,-1
  80fb68:	0081ffc4 	movi	r2,2047
  80fb6c:	003f9806 	br	80f9d0 <__alt_mem_onchip_mem+0xff78f9d0>
  80fb70:	8023883a 	mov	r17,r16
  80fb74:	a011883a 	mov	r8,r20
  80fb78:	e00b883a 	mov	r5,fp
  80fb7c:	003f8a06 	br	80f9a8 <__alt_mem_onchip_mem+0xff78f9a8>
  80fb80:	8023883a 	mov	r17,r16
  80fb84:	a011883a 	mov	r8,r20
  80fb88:	482d883a 	mov	r22,r9
  80fb8c:	e00b883a 	mov	r5,fp
  80fb90:	003f8506 	br	80f9a8 <__alt_mem_onchip_mem+0xff78f9a8>
  80fb94:	a00ad43a 	srli	r5,r20,16
  80fb98:	401ad43a 	srli	r13,r8,16
  80fb9c:	a53fffcc 	andi	r20,r20,65535
  80fba0:	423fffcc 	andi	r8,r8,65535
  80fba4:	4519383a 	mul	r12,r8,r20
  80fba8:	4147383a 	mul	r3,r8,r5
  80fbac:	6d09383a 	mul	r4,r13,r20
  80fbb0:	600cd43a 	srli	r6,r12,16
  80fbb4:	2b5d383a 	mul	r14,r5,r13
  80fbb8:	20c9883a 	add	r4,r4,r3
  80fbbc:	310d883a 	add	r6,r6,r4
  80fbc0:	30c0022e 	bgeu	r6,r3,80fbcc <__muldf3+0x378>
  80fbc4:	00c00074 	movhi	r3,1
  80fbc8:	70dd883a 	add	r14,r14,r3
  80fbcc:	8826d43a 	srli	r19,r17,16
  80fbd0:	8bffffcc 	andi	r15,r17,65535
  80fbd4:	7d23383a 	mul	r17,r15,r20
  80fbd8:	7949383a 	mul	r4,r15,r5
  80fbdc:	9d29383a 	mul	r20,r19,r20
  80fbe0:	8814d43a 	srli	r10,r17,16
  80fbe4:	3012943a 	slli	r9,r6,16
  80fbe8:	a129883a 	add	r20,r20,r4
  80fbec:	633fffcc 	andi	r12,r12,65535
  80fbf0:	5515883a 	add	r10,r10,r20
  80fbf4:	3006d43a 	srli	r3,r6,16
  80fbf8:	4b13883a 	add	r9,r9,r12
  80fbfc:	2ccb383a 	mul	r5,r5,r19
  80fc00:	5100022e 	bgeu	r10,r4,80fc0c <__muldf3+0x3b8>
  80fc04:	01000074 	movhi	r4,1
  80fc08:	290b883a 	add	r5,r5,r4
  80fc0c:	802ad43a 	srli	r21,r16,16
  80fc10:	843fffcc 	andi	r16,r16,65535
  80fc14:	440d383a 	mul	r6,r8,r16
  80fc18:	4565383a 	mul	r18,r8,r21
  80fc1c:	8349383a 	mul	r4,r16,r13
  80fc20:	500e943a 	slli	r7,r10,16
  80fc24:	3010d43a 	srli	r8,r6,16
  80fc28:	5028d43a 	srli	r20,r10,16
  80fc2c:	2489883a 	add	r4,r4,r18
  80fc30:	8abfffcc 	andi	r10,r17,65535
  80fc34:	3a95883a 	add	r10,r7,r10
  80fc38:	4119883a 	add	r12,r8,r4
  80fc3c:	a169883a 	add	r20,r20,r5
  80fc40:	1a87883a 	add	r3,r3,r10
  80fc44:	6d5b383a 	mul	r13,r13,r21
  80fc48:	6480022e 	bgeu	r12,r18,80fc54 <__muldf3+0x400>
  80fc4c:	01000074 	movhi	r4,1
  80fc50:	691b883a 	add	r13,r13,r4
  80fc54:	7c25383a 	mul	r18,r15,r16
  80fc58:	7d4b383a 	mul	r5,r15,r21
  80fc5c:	84cf383a 	mul	r7,r16,r19
  80fc60:	901ed43a 	srli	r15,r18,16
  80fc64:	6008d43a 	srli	r4,r12,16
  80fc68:	6010943a 	slli	r8,r12,16
  80fc6c:	394f883a 	add	r7,r7,r5
  80fc70:	333fffcc 	andi	r12,r6,65535
  80fc74:	79df883a 	add	r15,r15,r7
  80fc78:	235b883a 	add	r13,r4,r13
  80fc7c:	9d63383a 	mul	r17,r19,r21
  80fc80:	4309883a 	add	r4,r8,r12
  80fc84:	7940022e 	bgeu	r15,r5,80fc90 <__muldf3+0x43c>
  80fc88:	01400074 	movhi	r5,1
  80fc8c:	8963883a 	add	r17,r17,r5
  80fc90:	780a943a 	slli	r5,r15,16
  80fc94:	91bfffcc 	andi	r6,r18,65535
  80fc98:	70c7883a 	add	r3,r14,r3
  80fc9c:	298d883a 	add	r6,r5,r6
  80fca0:	1a8f803a 	cmpltu	r7,r3,r10
  80fca4:	350b883a 	add	r5,r6,r20
  80fca8:	20c7883a 	add	r3,r4,r3
  80fcac:	3955883a 	add	r10,r7,r5
  80fcb0:	1909803a 	cmpltu	r4,r3,r4
  80fcb4:	6a91883a 	add	r8,r13,r10
  80fcb8:	780cd43a 	srli	r6,r15,16
  80fcbc:	2219883a 	add	r12,r4,r8
  80fcc0:	2d0b803a 	cmpltu	r5,r5,r20
  80fcc4:	51cf803a 	cmpltu	r7,r10,r7
  80fcc8:	29ceb03a 	or	r7,r5,r7
  80fccc:	4351803a 	cmpltu	r8,r8,r13
  80fcd0:	610b803a 	cmpltu	r5,r12,r4
  80fcd4:	4148b03a 	or	r4,r8,r5
  80fcd8:	398f883a 	add	r7,r7,r6
  80fcdc:	3909883a 	add	r4,r7,r4
  80fce0:	1810927a 	slli	r8,r3,9
  80fce4:	2449883a 	add	r4,r4,r17
  80fce8:	2008927a 	slli	r4,r4,9
  80fcec:	6022d5fa 	srli	r17,r12,23
  80fcf0:	1806d5fa 	srli	r3,r3,23
  80fcf4:	4252b03a 	or	r9,r8,r9
  80fcf8:	600a927a 	slli	r5,r12,9
  80fcfc:	4810c03a 	cmpne	r8,r9,zero
  80fd00:	2462b03a 	or	r17,r4,r17
  80fd04:	40c6b03a 	or	r3,r8,r3
  80fd08:	8900402c 	andhi	r4,r17,256
  80fd0c:	1950b03a 	or	r8,r3,r5
  80fd10:	20000726 	beq	r4,zero,80fd30 <__muldf3+0x4dc>
  80fd14:	4006d07a 	srli	r3,r8,1
  80fd18:	880497fa 	slli	r2,r17,31
  80fd1c:	4200004c 	andi	r8,r8,1
  80fd20:	8822d07a 	srli	r17,r17,1
  80fd24:	1a10b03a 	or	r8,r3,r8
  80fd28:	1210b03a 	or	r8,r2,r8
  80fd2c:	5805883a 	mov	r2,r11
  80fd30:	1140ffc4 	addi	r5,r2,1023
  80fd34:	0140440e 	bge	zero,r5,80fe48 <__muldf3+0x5f4>
  80fd38:	40c001cc 	andi	r3,r8,7
  80fd3c:	18000726 	beq	r3,zero,80fd5c <__muldf3+0x508>
  80fd40:	40c003cc 	andi	r3,r8,15
  80fd44:	01000104 	movi	r4,4
  80fd48:	19000426 	beq	r3,r4,80fd5c <__muldf3+0x508>
  80fd4c:	4107883a 	add	r3,r8,r4
  80fd50:	1a11803a 	cmpltu	r8,r3,r8
  80fd54:	8a23883a 	add	r17,r17,r8
  80fd58:	1811883a 	mov	r8,r3
  80fd5c:	88c0402c 	andhi	r3,r17,256
  80fd60:	18000426 	beq	r3,zero,80fd74 <__muldf3+0x520>
  80fd64:	11410004 	addi	r5,r2,1024
  80fd68:	00bfc034 	movhi	r2,65280
  80fd6c:	10bfffc4 	addi	r2,r2,-1
  80fd70:	88a2703a 	and	r17,r17,r2
  80fd74:	0081ff84 	movi	r2,2046
  80fd78:	117f6416 	blt	r2,r5,80fb0c <__alt_mem_onchip_mem+0xff78fb0c>
  80fd7c:	8828977a 	slli	r20,r17,29
  80fd80:	4010d0fa 	srli	r8,r8,3
  80fd84:	8822927a 	slli	r17,r17,9
  80fd88:	2881ffcc 	andi	r2,r5,2047
  80fd8c:	a228b03a 	or	r20,r20,r8
  80fd90:	880ad33a 	srli	r5,r17,12
  80fd94:	b02b883a 	mov	r21,r22
  80fd98:	003f0d06 	br	80f9d0 <__alt_mem_onchip_mem+0xff78f9d0>
  80fd9c:	8080022c 	andhi	r2,r16,8
  80fda0:	10000926 	beq	r2,zero,80fdc8 <__muldf3+0x574>
  80fda4:	8880022c 	andhi	r2,r17,8
  80fda8:	1000071e 	bne	r2,zero,80fdc8 <__muldf3+0x574>
  80fdac:	00800434 	movhi	r2,16
  80fdb0:	89400234 	orhi	r5,r17,8
  80fdb4:	10bfffc4 	addi	r2,r2,-1
  80fdb8:	b82b883a 	mov	r21,r23
  80fdbc:	288a703a 	and	r5,r5,r2
  80fdc0:	4029883a 	mov	r20,r8
  80fdc4:	003f6806 	br	80fb68 <__alt_mem_onchip_mem+0xff78fb68>
  80fdc8:	00800434 	movhi	r2,16
  80fdcc:	81400234 	orhi	r5,r16,8
  80fdd0:	10bfffc4 	addi	r2,r2,-1
  80fdd4:	288a703a 	and	r5,r5,r2
  80fdd8:	003f6306 	br	80fb68 <__alt_mem_onchip_mem+0xff78fb68>
  80fddc:	147ff604 	addi	r17,r2,-40
  80fde0:	3462983a 	sll	r17,r6,r17
  80fde4:	0011883a 	mov	r8,zero
  80fde8:	003f4406 	br	80fafc <__alt_mem_onchip_mem+0xff78fafc>
  80fdec:	3009883a 	mov	r4,r6
  80fdf0:	d9800215 	stw	r6,8(sp)
  80fdf4:	da400115 	stw	r9,4(sp)
  80fdf8:	da800015 	stw	r10,0(sp)
  80fdfc:	0810a6c0 	call	810a6c <__clzsi2>
  80fe00:	10800804 	addi	r2,r2,32
  80fe04:	da800017 	ldw	r10,0(sp)
  80fe08:	da400117 	ldw	r9,4(sp)
  80fe0c:	d9800217 	ldw	r6,8(sp)
  80fe10:	003f3006 	br	80fad4 <__alt_mem_onchip_mem+0xff78fad4>
  80fe14:	143ff604 	addi	r16,r2,-40
  80fe18:	9c20983a 	sll	r16,r19,r16
  80fe1c:	0029883a 	mov	r20,zero
  80fe20:	003f1606 	br	80fa7c <__alt_mem_onchip_mem+0xff78fa7c>
  80fe24:	d9800215 	stw	r6,8(sp)
  80fe28:	d9c00015 	stw	r7,0(sp)
  80fe2c:	da400115 	stw	r9,4(sp)
  80fe30:	0810a6c0 	call	810a6c <__clzsi2>
  80fe34:	10800804 	addi	r2,r2,32
  80fe38:	da400117 	ldw	r9,4(sp)
  80fe3c:	d9c00017 	ldw	r7,0(sp)
  80fe40:	d9800217 	ldw	r6,8(sp)
  80fe44:	003f0306 	br	80fa54 <__alt_mem_onchip_mem+0xff78fa54>
  80fe48:	00c00044 	movi	r3,1
  80fe4c:	1947c83a 	sub	r3,r3,r5
  80fe50:	00800e04 	movi	r2,56
  80fe54:	10feda16 	blt	r2,r3,80f9c0 <__alt_mem_onchip_mem+0xff78f9c0>
  80fe58:	008007c4 	movi	r2,31
  80fe5c:	10c01b16 	blt	r2,r3,80fecc <__muldf3+0x678>
  80fe60:	00800804 	movi	r2,32
  80fe64:	10c5c83a 	sub	r2,r2,r3
  80fe68:	888a983a 	sll	r5,r17,r2
  80fe6c:	40c8d83a 	srl	r4,r8,r3
  80fe70:	4084983a 	sll	r2,r8,r2
  80fe74:	88e2d83a 	srl	r17,r17,r3
  80fe78:	2906b03a 	or	r3,r5,r4
  80fe7c:	1004c03a 	cmpne	r2,r2,zero
  80fe80:	1886b03a 	or	r3,r3,r2
  80fe84:	188001cc 	andi	r2,r3,7
  80fe88:	10000726 	beq	r2,zero,80fea8 <__muldf3+0x654>
  80fe8c:	188003cc 	andi	r2,r3,15
  80fe90:	01000104 	movi	r4,4
  80fe94:	11000426 	beq	r2,r4,80fea8 <__muldf3+0x654>
  80fe98:	1805883a 	mov	r2,r3
  80fe9c:	10c00104 	addi	r3,r2,4
  80fea0:	1885803a 	cmpltu	r2,r3,r2
  80fea4:	88a3883a 	add	r17,r17,r2
  80fea8:	8880202c 	andhi	r2,r17,128
  80feac:	10001c26 	beq	r2,zero,80ff20 <__muldf3+0x6cc>
  80feb0:	b02b883a 	mov	r21,r22
  80feb4:	00800044 	movi	r2,1
  80feb8:	000b883a 	mov	r5,zero
  80febc:	0029883a 	mov	r20,zero
  80fec0:	003ec306 	br	80f9d0 <__alt_mem_onchip_mem+0xff78f9d0>
  80fec4:	5805883a 	mov	r2,r11
  80fec8:	003f9906 	br	80fd30 <__alt_mem_onchip_mem+0xff78fd30>
  80fecc:	00bff844 	movi	r2,-31
  80fed0:	1145c83a 	sub	r2,r2,r5
  80fed4:	8888d83a 	srl	r4,r17,r2
  80fed8:	00800804 	movi	r2,32
  80fedc:	18801a26 	beq	r3,r2,80ff48 <__muldf3+0x6f4>
  80fee0:	00801004 	movi	r2,64
  80fee4:	10c5c83a 	sub	r2,r2,r3
  80fee8:	8884983a 	sll	r2,r17,r2
  80feec:	1204b03a 	or	r2,r2,r8
  80fef0:	1004c03a 	cmpne	r2,r2,zero
  80fef4:	2084b03a 	or	r2,r4,r2
  80fef8:	144001cc 	andi	r17,r2,7
  80fefc:	88000d1e 	bne	r17,zero,80ff34 <__muldf3+0x6e0>
  80ff00:	000b883a 	mov	r5,zero
  80ff04:	1028d0fa 	srli	r20,r2,3
  80ff08:	b02b883a 	mov	r21,r22
  80ff0c:	0005883a 	mov	r2,zero
  80ff10:	a468b03a 	or	r20,r20,r17
  80ff14:	003eae06 	br	80f9d0 <__alt_mem_onchip_mem+0xff78f9d0>
  80ff18:	1007883a 	mov	r3,r2
  80ff1c:	0023883a 	mov	r17,zero
  80ff20:	880a927a 	slli	r5,r17,9
  80ff24:	1805883a 	mov	r2,r3
  80ff28:	8822977a 	slli	r17,r17,29
  80ff2c:	280ad33a 	srli	r5,r5,12
  80ff30:	003ff406 	br	80ff04 <__alt_mem_onchip_mem+0xff78ff04>
  80ff34:	10c003cc 	andi	r3,r2,15
  80ff38:	01000104 	movi	r4,4
  80ff3c:	193ff626 	beq	r3,r4,80ff18 <__alt_mem_onchip_mem+0xff78ff18>
  80ff40:	0023883a 	mov	r17,zero
  80ff44:	003fd506 	br	80fe9c <__alt_mem_onchip_mem+0xff78fe9c>
  80ff48:	0005883a 	mov	r2,zero
  80ff4c:	003fe706 	br	80feec <__alt_mem_onchip_mem+0xff78feec>
  80ff50:	00800434 	movhi	r2,16
  80ff54:	89400234 	orhi	r5,r17,8
  80ff58:	10bfffc4 	addi	r2,r2,-1
  80ff5c:	b02b883a 	mov	r21,r22
  80ff60:	288a703a 	and	r5,r5,r2
  80ff64:	4029883a 	mov	r20,r8
  80ff68:	003eff06 	br	80fb68 <__alt_mem_onchip_mem+0xff78fb68>

0080ff6c <__subdf3>:
  80ff6c:	02000434 	movhi	r8,16
  80ff70:	423fffc4 	addi	r8,r8,-1
  80ff74:	defffb04 	addi	sp,sp,-20
  80ff78:	2a14703a 	and	r10,r5,r8
  80ff7c:	3812d53a 	srli	r9,r7,20
  80ff80:	3a10703a 	and	r8,r7,r8
  80ff84:	2006d77a 	srli	r3,r4,29
  80ff88:	3004d77a 	srli	r2,r6,29
  80ff8c:	dc000015 	stw	r16,0(sp)
  80ff90:	501490fa 	slli	r10,r10,3
  80ff94:	2820d53a 	srli	r16,r5,20
  80ff98:	401090fa 	slli	r8,r8,3
  80ff9c:	dc800215 	stw	r18,8(sp)
  80ffa0:	dc400115 	stw	r17,4(sp)
  80ffa4:	dfc00415 	stw	ra,16(sp)
  80ffa8:	202290fa 	slli	r17,r4,3
  80ffac:	dcc00315 	stw	r19,12(sp)
  80ffb0:	4a41ffcc 	andi	r9,r9,2047
  80ffb4:	0101ffc4 	movi	r4,2047
  80ffb8:	2824d7fa 	srli	r18,r5,31
  80ffbc:	8401ffcc 	andi	r16,r16,2047
  80ffc0:	50c6b03a 	or	r3,r10,r3
  80ffc4:	380ed7fa 	srli	r7,r7,31
  80ffc8:	408ab03a 	or	r5,r8,r2
  80ffcc:	300c90fa 	slli	r6,r6,3
  80ffd0:	49009626 	beq	r9,r4,81022c <__subdf3+0x2c0>
  80ffd4:	39c0005c 	xori	r7,r7,1
  80ffd8:	8245c83a 	sub	r2,r16,r9
  80ffdc:	3c807426 	beq	r7,r18,8101b0 <__subdf3+0x244>
  80ffe0:	0080af0e 	bge	zero,r2,8102a0 <__subdf3+0x334>
  80ffe4:	48002a1e 	bne	r9,zero,810090 <__subdf3+0x124>
  80ffe8:	2988b03a 	or	r4,r5,r6
  80ffec:	20009a1e 	bne	r4,zero,810258 <__subdf3+0x2ec>
  80fff0:	888001cc 	andi	r2,r17,7
  80fff4:	10000726 	beq	r2,zero,810014 <__subdf3+0xa8>
  80fff8:	888003cc 	andi	r2,r17,15
  80fffc:	01000104 	movi	r4,4
  810000:	11000426 	beq	r2,r4,810014 <__subdf3+0xa8>
  810004:	890b883a 	add	r5,r17,r4
  810008:	2c63803a 	cmpltu	r17,r5,r17
  81000c:	1c47883a 	add	r3,r3,r17
  810010:	2823883a 	mov	r17,r5
  810014:	1880202c 	andhi	r2,r3,128
  810018:	10005926 	beq	r2,zero,810180 <__subdf3+0x214>
  81001c:	84000044 	addi	r16,r16,1
  810020:	0081ffc4 	movi	r2,2047
  810024:	8080be26 	beq	r16,r2,810320 <__subdf3+0x3b4>
  810028:	017fe034 	movhi	r5,65408
  81002c:	297fffc4 	addi	r5,r5,-1
  810030:	1946703a 	and	r3,r3,r5
  810034:	1804977a 	slli	r2,r3,29
  810038:	1806927a 	slli	r3,r3,9
  81003c:	8822d0fa 	srli	r17,r17,3
  810040:	8401ffcc 	andi	r16,r16,2047
  810044:	180ad33a 	srli	r5,r3,12
  810048:	9100004c 	andi	r4,r18,1
  81004c:	1444b03a 	or	r2,r2,r17
  810050:	80c1ffcc 	andi	r3,r16,2047
  810054:	1820953a 	slli	r16,r3,20
  810058:	20c03fcc 	andi	r3,r4,255
  81005c:	180897fa 	slli	r4,r3,31
  810060:	00c00434 	movhi	r3,16
  810064:	18ffffc4 	addi	r3,r3,-1
  810068:	28c6703a 	and	r3,r5,r3
  81006c:	1c06b03a 	or	r3,r3,r16
  810070:	1906b03a 	or	r3,r3,r4
  810074:	dfc00417 	ldw	ra,16(sp)
  810078:	dcc00317 	ldw	r19,12(sp)
  81007c:	dc800217 	ldw	r18,8(sp)
  810080:	dc400117 	ldw	r17,4(sp)
  810084:	dc000017 	ldw	r16,0(sp)
  810088:	dec00504 	addi	sp,sp,20
  81008c:	f800283a 	ret
  810090:	0101ffc4 	movi	r4,2047
  810094:	813fd626 	beq	r16,r4,80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810098:	29402034 	orhi	r5,r5,128
  81009c:	01000e04 	movi	r4,56
  8100a0:	2080a316 	blt	r4,r2,810330 <__subdf3+0x3c4>
  8100a4:	010007c4 	movi	r4,31
  8100a8:	2080c616 	blt	r4,r2,8103c4 <__subdf3+0x458>
  8100ac:	01000804 	movi	r4,32
  8100b0:	2089c83a 	sub	r4,r4,r2
  8100b4:	2910983a 	sll	r8,r5,r4
  8100b8:	308ed83a 	srl	r7,r6,r2
  8100bc:	3108983a 	sll	r4,r6,r4
  8100c0:	2884d83a 	srl	r2,r5,r2
  8100c4:	41ccb03a 	or	r6,r8,r7
  8100c8:	2008c03a 	cmpne	r4,r4,zero
  8100cc:	310cb03a 	or	r6,r6,r4
  8100d0:	898dc83a 	sub	r6,r17,r6
  8100d4:	89a3803a 	cmpltu	r17,r17,r6
  8100d8:	1887c83a 	sub	r3,r3,r2
  8100dc:	1c47c83a 	sub	r3,r3,r17
  8100e0:	3023883a 	mov	r17,r6
  8100e4:	1880202c 	andhi	r2,r3,128
  8100e8:	10002326 	beq	r2,zero,810178 <__subdf3+0x20c>
  8100ec:	04c02034 	movhi	r19,128
  8100f0:	9cffffc4 	addi	r19,r19,-1
  8100f4:	1ce6703a 	and	r19,r3,r19
  8100f8:	98007a26 	beq	r19,zero,8102e4 <__subdf3+0x378>
  8100fc:	9809883a 	mov	r4,r19
  810100:	0810a6c0 	call	810a6c <__clzsi2>
  810104:	113ffe04 	addi	r4,r2,-8
  810108:	00c007c4 	movi	r3,31
  81010c:	19007b16 	blt	r3,r4,8102fc <__subdf3+0x390>
  810110:	00800804 	movi	r2,32
  810114:	1105c83a 	sub	r2,r2,r4
  810118:	8884d83a 	srl	r2,r17,r2
  81011c:	9906983a 	sll	r3,r19,r4
  810120:	8922983a 	sll	r17,r17,r4
  810124:	10c4b03a 	or	r2,r2,r3
  810128:	24007816 	blt	r4,r16,81030c <__subdf3+0x3a0>
  81012c:	2421c83a 	sub	r16,r4,r16
  810130:	80c00044 	addi	r3,r16,1
  810134:	010007c4 	movi	r4,31
  810138:	20c09516 	blt	r4,r3,810390 <__subdf3+0x424>
  81013c:	01400804 	movi	r5,32
  810140:	28cbc83a 	sub	r5,r5,r3
  810144:	88c8d83a 	srl	r4,r17,r3
  810148:	8962983a 	sll	r17,r17,r5
  81014c:	114a983a 	sll	r5,r2,r5
  810150:	10c6d83a 	srl	r3,r2,r3
  810154:	8804c03a 	cmpne	r2,r17,zero
  810158:	290ab03a 	or	r5,r5,r4
  81015c:	28a2b03a 	or	r17,r5,r2
  810160:	0021883a 	mov	r16,zero
  810164:	003fa206 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810168:	2090b03a 	or	r8,r4,r2
  81016c:	40018e26 	beq	r8,zero,8107a8 <__subdf3+0x83c>
  810170:	1007883a 	mov	r3,r2
  810174:	2023883a 	mov	r17,r4
  810178:	888001cc 	andi	r2,r17,7
  81017c:	103f9e1e 	bne	r2,zero,80fff8 <__alt_mem_onchip_mem+0xff78fff8>
  810180:	1804977a 	slli	r2,r3,29
  810184:	8822d0fa 	srli	r17,r17,3
  810188:	1810d0fa 	srli	r8,r3,3
  81018c:	9100004c 	andi	r4,r18,1
  810190:	1444b03a 	or	r2,r2,r17
  810194:	00c1ffc4 	movi	r3,2047
  810198:	80c02826 	beq	r16,r3,81023c <__subdf3+0x2d0>
  81019c:	01400434 	movhi	r5,16
  8101a0:	297fffc4 	addi	r5,r5,-1
  8101a4:	80e0703a 	and	r16,r16,r3
  8101a8:	414a703a 	and	r5,r8,r5
  8101ac:	003fa806 	br	810050 <__alt_mem_onchip_mem+0xff790050>
  8101b0:	0080630e 	bge	zero,r2,810340 <__subdf3+0x3d4>
  8101b4:	48003026 	beq	r9,zero,810278 <__subdf3+0x30c>
  8101b8:	0101ffc4 	movi	r4,2047
  8101bc:	813f8c26 	beq	r16,r4,80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  8101c0:	29402034 	orhi	r5,r5,128
  8101c4:	01000e04 	movi	r4,56
  8101c8:	2080a90e 	bge	r4,r2,810470 <__subdf3+0x504>
  8101cc:	298cb03a 	or	r6,r5,r6
  8101d0:	3012c03a 	cmpne	r9,r6,zero
  8101d4:	0005883a 	mov	r2,zero
  8101d8:	4c53883a 	add	r9,r9,r17
  8101dc:	4c63803a 	cmpltu	r17,r9,r17
  8101e0:	10c7883a 	add	r3,r2,r3
  8101e4:	88c7883a 	add	r3,r17,r3
  8101e8:	4823883a 	mov	r17,r9
  8101ec:	1880202c 	andhi	r2,r3,128
  8101f0:	1000d026 	beq	r2,zero,810534 <__subdf3+0x5c8>
  8101f4:	84000044 	addi	r16,r16,1
  8101f8:	0081ffc4 	movi	r2,2047
  8101fc:	8080fe26 	beq	r16,r2,8105f8 <__subdf3+0x68c>
  810200:	00bfe034 	movhi	r2,65408
  810204:	10bfffc4 	addi	r2,r2,-1
  810208:	1886703a 	and	r3,r3,r2
  81020c:	880ad07a 	srli	r5,r17,1
  810210:	180497fa 	slli	r2,r3,31
  810214:	8900004c 	andi	r4,r17,1
  810218:	2922b03a 	or	r17,r5,r4
  81021c:	1806d07a 	srli	r3,r3,1
  810220:	1462b03a 	or	r17,r2,r17
  810224:	3825883a 	mov	r18,r7
  810228:	003f7106 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  81022c:	2984b03a 	or	r2,r5,r6
  810230:	103f6826 	beq	r2,zero,80ffd4 <__alt_mem_onchip_mem+0xff78ffd4>
  810234:	39c03fcc 	andi	r7,r7,255
  810238:	003f6706 	br	80ffd8 <__alt_mem_onchip_mem+0xff78ffd8>
  81023c:	4086b03a 	or	r3,r8,r2
  810240:	18015226 	beq	r3,zero,81078c <__subdf3+0x820>
  810244:	00c00434 	movhi	r3,16
  810248:	41400234 	orhi	r5,r8,8
  81024c:	18ffffc4 	addi	r3,r3,-1
  810250:	28ca703a 	and	r5,r5,r3
  810254:	003f7e06 	br	810050 <__alt_mem_onchip_mem+0xff790050>
  810258:	10bfffc4 	addi	r2,r2,-1
  81025c:	1000491e 	bne	r2,zero,810384 <__subdf3+0x418>
  810260:	898fc83a 	sub	r7,r17,r6
  810264:	89e3803a 	cmpltu	r17,r17,r7
  810268:	1947c83a 	sub	r3,r3,r5
  81026c:	1c47c83a 	sub	r3,r3,r17
  810270:	3823883a 	mov	r17,r7
  810274:	003f9b06 	br	8100e4 <__alt_mem_onchip_mem+0xff7900e4>
  810278:	2988b03a 	or	r4,r5,r6
  81027c:	203f5c26 	beq	r4,zero,80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810280:	10bfffc4 	addi	r2,r2,-1
  810284:	1000931e 	bne	r2,zero,8104d4 <__subdf3+0x568>
  810288:	898d883a 	add	r6,r17,r6
  81028c:	3463803a 	cmpltu	r17,r6,r17
  810290:	1947883a 	add	r3,r3,r5
  810294:	88c7883a 	add	r3,r17,r3
  810298:	3023883a 	mov	r17,r6
  81029c:	003fd306 	br	8101ec <__alt_mem_onchip_mem+0xff7901ec>
  8102a0:	1000541e 	bne	r2,zero,8103f4 <__subdf3+0x488>
  8102a4:	80800044 	addi	r2,r16,1
  8102a8:	1081ffcc 	andi	r2,r2,2047
  8102ac:	01000044 	movi	r4,1
  8102b0:	2080a20e 	bge	r4,r2,81053c <__subdf3+0x5d0>
  8102b4:	8989c83a 	sub	r4,r17,r6
  8102b8:	8905803a 	cmpltu	r2,r17,r4
  8102bc:	1967c83a 	sub	r19,r3,r5
  8102c0:	98a7c83a 	sub	r19,r19,r2
  8102c4:	9880202c 	andhi	r2,r19,128
  8102c8:	10006326 	beq	r2,zero,810458 <__subdf3+0x4ec>
  8102cc:	3463c83a 	sub	r17,r6,r17
  8102d0:	28c7c83a 	sub	r3,r5,r3
  8102d4:	344d803a 	cmpltu	r6,r6,r17
  8102d8:	19a7c83a 	sub	r19,r3,r6
  8102dc:	3825883a 	mov	r18,r7
  8102e0:	983f861e 	bne	r19,zero,8100fc <__alt_mem_onchip_mem+0xff7900fc>
  8102e4:	8809883a 	mov	r4,r17
  8102e8:	0810a6c0 	call	810a6c <__clzsi2>
  8102ec:	10800804 	addi	r2,r2,32
  8102f0:	113ffe04 	addi	r4,r2,-8
  8102f4:	00c007c4 	movi	r3,31
  8102f8:	193f850e 	bge	r3,r4,810110 <__alt_mem_onchip_mem+0xff790110>
  8102fc:	10bff604 	addi	r2,r2,-40
  810300:	8884983a 	sll	r2,r17,r2
  810304:	0023883a 	mov	r17,zero
  810308:	243f880e 	bge	r4,r16,81012c <__alt_mem_onchip_mem+0xff79012c>
  81030c:	00ffe034 	movhi	r3,65408
  810310:	18ffffc4 	addi	r3,r3,-1
  810314:	8121c83a 	sub	r16,r16,r4
  810318:	10c6703a 	and	r3,r2,r3
  81031c:	003f3406 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810320:	9100004c 	andi	r4,r18,1
  810324:	000b883a 	mov	r5,zero
  810328:	0005883a 	mov	r2,zero
  81032c:	003f4806 	br	810050 <__alt_mem_onchip_mem+0xff790050>
  810330:	298cb03a 	or	r6,r5,r6
  810334:	300cc03a 	cmpne	r6,r6,zero
  810338:	0005883a 	mov	r2,zero
  81033c:	003f6406 	br	8100d0 <__alt_mem_onchip_mem+0xff7900d0>
  810340:	10009a1e 	bne	r2,zero,8105ac <__subdf3+0x640>
  810344:	82400044 	addi	r9,r16,1
  810348:	4881ffcc 	andi	r2,r9,2047
  81034c:	02800044 	movi	r10,1
  810350:	5080670e 	bge	r10,r2,8104f0 <__subdf3+0x584>
  810354:	0081ffc4 	movi	r2,2047
  810358:	4880af26 	beq	r9,r2,810618 <__subdf3+0x6ac>
  81035c:	898d883a 	add	r6,r17,r6
  810360:	1945883a 	add	r2,r3,r5
  810364:	3447803a 	cmpltu	r3,r6,r17
  810368:	1887883a 	add	r3,r3,r2
  81036c:	182297fa 	slli	r17,r3,31
  810370:	300cd07a 	srli	r6,r6,1
  810374:	1806d07a 	srli	r3,r3,1
  810378:	4821883a 	mov	r16,r9
  81037c:	89a2b03a 	or	r17,r17,r6
  810380:	003f1b06 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810384:	0101ffc4 	movi	r4,2047
  810388:	813f441e 	bne	r16,r4,81009c <__alt_mem_onchip_mem+0xff79009c>
  81038c:	003f1806 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810390:	843ff844 	addi	r16,r16,-31
  810394:	01400804 	movi	r5,32
  810398:	1408d83a 	srl	r4,r2,r16
  81039c:	19405026 	beq	r3,r5,8104e0 <__subdf3+0x574>
  8103a0:	01401004 	movi	r5,64
  8103a4:	28c7c83a 	sub	r3,r5,r3
  8103a8:	10c4983a 	sll	r2,r2,r3
  8103ac:	88a2b03a 	or	r17,r17,r2
  8103b0:	8822c03a 	cmpne	r17,r17,zero
  8103b4:	2462b03a 	or	r17,r4,r17
  8103b8:	0007883a 	mov	r3,zero
  8103bc:	0021883a 	mov	r16,zero
  8103c0:	003f6d06 	br	810178 <__alt_mem_onchip_mem+0xff790178>
  8103c4:	11fff804 	addi	r7,r2,-32
  8103c8:	01000804 	movi	r4,32
  8103cc:	29ced83a 	srl	r7,r5,r7
  8103d0:	11004526 	beq	r2,r4,8104e8 <__subdf3+0x57c>
  8103d4:	01001004 	movi	r4,64
  8103d8:	2089c83a 	sub	r4,r4,r2
  8103dc:	2904983a 	sll	r2,r5,r4
  8103e0:	118cb03a 	or	r6,r2,r6
  8103e4:	300cc03a 	cmpne	r6,r6,zero
  8103e8:	398cb03a 	or	r6,r7,r6
  8103ec:	0005883a 	mov	r2,zero
  8103f0:	003f3706 	br	8100d0 <__alt_mem_onchip_mem+0xff7900d0>
  8103f4:	80002a26 	beq	r16,zero,8104a0 <__subdf3+0x534>
  8103f8:	0101ffc4 	movi	r4,2047
  8103fc:	49006626 	beq	r9,r4,810598 <__subdf3+0x62c>
  810400:	0085c83a 	sub	r2,zero,r2
  810404:	18c02034 	orhi	r3,r3,128
  810408:	01000e04 	movi	r4,56
  81040c:	20807e16 	blt	r4,r2,810608 <__subdf3+0x69c>
  810410:	010007c4 	movi	r4,31
  810414:	2080e716 	blt	r4,r2,8107b4 <__subdf3+0x848>
  810418:	01000804 	movi	r4,32
  81041c:	2089c83a 	sub	r4,r4,r2
  810420:	1914983a 	sll	r10,r3,r4
  810424:	8890d83a 	srl	r8,r17,r2
  810428:	8908983a 	sll	r4,r17,r4
  81042c:	1884d83a 	srl	r2,r3,r2
  810430:	5222b03a 	or	r17,r10,r8
  810434:	2006c03a 	cmpne	r3,r4,zero
  810438:	88e2b03a 	or	r17,r17,r3
  81043c:	3463c83a 	sub	r17,r6,r17
  810440:	2885c83a 	sub	r2,r5,r2
  810444:	344d803a 	cmpltu	r6,r6,r17
  810448:	1187c83a 	sub	r3,r2,r6
  81044c:	4821883a 	mov	r16,r9
  810450:	3825883a 	mov	r18,r7
  810454:	003f2306 	br	8100e4 <__alt_mem_onchip_mem+0xff7900e4>
  810458:	24d0b03a 	or	r8,r4,r19
  81045c:	40001b1e 	bne	r8,zero,8104cc <__subdf3+0x560>
  810460:	0005883a 	mov	r2,zero
  810464:	0009883a 	mov	r4,zero
  810468:	0021883a 	mov	r16,zero
  81046c:	003f4906 	br	810194 <__alt_mem_onchip_mem+0xff790194>
  810470:	010007c4 	movi	r4,31
  810474:	20803a16 	blt	r4,r2,810560 <__subdf3+0x5f4>
  810478:	01000804 	movi	r4,32
  81047c:	2089c83a 	sub	r4,r4,r2
  810480:	2912983a 	sll	r9,r5,r4
  810484:	3090d83a 	srl	r8,r6,r2
  810488:	3108983a 	sll	r4,r6,r4
  81048c:	2884d83a 	srl	r2,r5,r2
  810490:	4a12b03a 	or	r9,r9,r8
  810494:	2008c03a 	cmpne	r4,r4,zero
  810498:	4912b03a 	or	r9,r9,r4
  81049c:	003f4e06 	br	8101d8 <__alt_mem_onchip_mem+0xff7901d8>
  8104a0:	1c48b03a 	or	r4,r3,r17
  8104a4:	20003c26 	beq	r4,zero,810598 <__subdf3+0x62c>
  8104a8:	0084303a 	nor	r2,zero,r2
  8104ac:	1000381e 	bne	r2,zero,810590 <__subdf3+0x624>
  8104b0:	3463c83a 	sub	r17,r6,r17
  8104b4:	28c5c83a 	sub	r2,r5,r3
  8104b8:	344d803a 	cmpltu	r6,r6,r17
  8104bc:	1187c83a 	sub	r3,r2,r6
  8104c0:	4821883a 	mov	r16,r9
  8104c4:	3825883a 	mov	r18,r7
  8104c8:	003f0606 	br	8100e4 <__alt_mem_onchip_mem+0xff7900e4>
  8104cc:	2023883a 	mov	r17,r4
  8104d0:	003f0906 	br	8100f8 <__alt_mem_onchip_mem+0xff7900f8>
  8104d4:	0101ffc4 	movi	r4,2047
  8104d8:	813f3a1e 	bne	r16,r4,8101c4 <__alt_mem_onchip_mem+0xff7901c4>
  8104dc:	003ec406 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  8104e0:	0005883a 	mov	r2,zero
  8104e4:	003fb106 	br	8103ac <__alt_mem_onchip_mem+0xff7903ac>
  8104e8:	0005883a 	mov	r2,zero
  8104ec:	003fbc06 	br	8103e0 <__alt_mem_onchip_mem+0xff7903e0>
  8104f0:	1c44b03a 	or	r2,r3,r17
  8104f4:	80008e1e 	bne	r16,zero,810730 <__subdf3+0x7c4>
  8104f8:	1000c826 	beq	r2,zero,81081c <__subdf3+0x8b0>
  8104fc:	2984b03a 	or	r2,r5,r6
  810500:	103ebb26 	beq	r2,zero,80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810504:	8989883a 	add	r4,r17,r6
  810508:	1945883a 	add	r2,r3,r5
  81050c:	2447803a 	cmpltu	r3,r4,r17
  810510:	1887883a 	add	r3,r3,r2
  810514:	1880202c 	andhi	r2,r3,128
  810518:	2023883a 	mov	r17,r4
  81051c:	103f1626 	beq	r2,zero,810178 <__alt_mem_onchip_mem+0xff790178>
  810520:	00bfe034 	movhi	r2,65408
  810524:	10bfffc4 	addi	r2,r2,-1
  810528:	5021883a 	mov	r16,r10
  81052c:	1886703a 	and	r3,r3,r2
  810530:	003eaf06 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810534:	3825883a 	mov	r18,r7
  810538:	003f0f06 	br	810178 <__alt_mem_onchip_mem+0xff790178>
  81053c:	1c44b03a 	or	r2,r3,r17
  810540:	8000251e 	bne	r16,zero,8105d8 <__subdf3+0x66c>
  810544:	1000661e 	bne	r2,zero,8106e0 <__subdf3+0x774>
  810548:	2990b03a 	or	r8,r5,r6
  81054c:	40009626 	beq	r8,zero,8107a8 <__subdf3+0x83c>
  810550:	2807883a 	mov	r3,r5
  810554:	3023883a 	mov	r17,r6
  810558:	3825883a 	mov	r18,r7
  81055c:	003ea406 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810560:	127ff804 	addi	r9,r2,-32
  810564:	01000804 	movi	r4,32
  810568:	2a52d83a 	srl	r9,r5,r9
  81056c:	11008c26 	beq	r2,r4,8107a0 <__subdf3+0x834>
  810570:	01001004 	movi	r4,64
  810574:	2085c83a 	sub	r2,r4,r2
  810578:	2884983a 	sll	r2,r5,r2
  81057c:	118cb03a 	or	r6,r2,r6
  810580:	300cc03a 	cmpne	r6,r6,zero
  810584:	4992b03a 	or	r9,r9,r6
  810588:	0005883a 	mov	r2,zero
  81058c:	003f1206 	br	8101d8 <__alt_mem_onchip_mem+0xff7901d8>
  810590:	0101ffc4 	movi	r4,2047
  810594:	493f9c1e 	bne	r9,r4,810408 <__alt_mem_onchip_mem+0xff790408>
  810598:	2807883a 	mov	r3,r5
  81059c:	3023883a 	mov	r17,r6
  8105a0:	4821883a 	mov	r16,r9
  8105a4:	3825883a 	mov	r18,r7
  8105a8:	003e9106 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  8105ac:	80001f1e 	bne	r16,zero,81062c <__subdf3+0x6c0>
  8105b0:	1c48b03a 	or	r4,r3,r17
  8105b4:	20005a26 	beq	r4,zero,810720 <__subdf3+0x7b4>
  8105b8:	0084303a 	nor	r2,zero,r2
  8105bc:	1000561e 	bne	r2,zero,810718 <__subdf3+0x7ac>
  8105c0:	89a3883a 	add	r17,r17,r6
  8105c4:	1945883a 	add	r2,r3,r5
  8105c8:	898d803a 	cmpltu	r6,r17,r6
  8105cc:	3087883a 	add	r3,r6,r2
  8105d0:	4821883a 	mov	r16,r9
  8105d4:	003f0506 	br	8101ec <__alt_mem_onchip_mem+0xff7901ec>
  8105d8:	10002b1e 	bne	r2,zero,810688 <__subdf3+0x71c>
  8105dc:	2984b03a 	or	r2,r5,r6
  8105e0:	10008026 	beq	r2,zero,8107e4 <__subdf3+0x878>
  8105e4:	2807883a 	mov	r3,r5
  8105e8:	3023883a 	mov	r17,r6
  8105ec:	3825883a 	mov	r18,r7
  8105f0:	0401ffc4 	movi	r16,2047
  8105f4:	003e7e06 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  8105f8:	3809883a 	mov	r4,r7
  8105fc:	0011883a 	mov	r8,zero
  810600:	0005883a 	mov	r2,zero
  810604:	003ee306 	br	810194 <__alt_mem_onchip_mem+0xff790194>
  810608:	1c62b03a 	or	r17,r3,r17
  81060c:	8822c03a 	cmpne	r17,r17,zero
  810610:	0005883a 	mov	r2,zero
  810614:	003f8906 	br	81043c <__alt_mem_onchip_mem+0xff79043c>
  810618:	3809883a 	mov	r4,r7
  81061c:	4821883a 	mov	r16,r9
  810620:	0011883a 	mov	r8,zero
  810624:	0005883a 	mov	r2,zero
  810628:	003eda06 	br	810194 <__alt_mem_onchip_mem+0xff790194>
  81062c:	0101ffc4 	movi	r4,2047
  810630:	49003b26 	beq	r9,r4,810720 <__subdf3+0x7b4>
  810634:	0085c83a 	sub	r2,zero,r2
  810638:	18c02034 	orhi	r3,r3,128
  81063c:	01000e04 	movi	r4,56
  810640:	20806e16 	blt	r4,r2,8107fc <__subdf3+0x890>
  810644:	010007c4 	movi	r4,31
  810648:	20807716 	blt	r4,r2,810828 <__subdf3+0x8bc>
  81064c:	01000804 	movi	r4,32
  810650:	2089c83a 	sub	r4,r4,r2
  810654:	1914983a 	sll	r10,r3,r4
  810658:	8890d83a 	srl	r8,r17,r2
  81065c:	8908983a 	sll	r4,r17,r4
  810660:	1884d83a 	srl	r2,r3,r2
  810664:	5222b03a 	or	r17,r10,r8
  810668:	2006c03a 	cmpne	r3,r4,zero
  81066c:	88e2b03a 	or	r17,r17,r3
  810670:	89a3883a 	add	r17,r17,r6
  810674:	1145883a 	add	r2,r2,r5
  810678:	898d803a 	cmpltu	r6,r17,r6
  81067c:	3087883a 	add	r3,r6,r2
  810680:	4821883a 	mov	r16,r9
  810684:	003ed906 	br	8101ec <__alt_mem_onchip_mem+0xff7901ec>
  810688:	2984b03a 	or	r2,r5,r6
  81068c:	10004226 	beq	r2,zero,810798 <__subdf3+0x82c>
  810690:	1808d0fa 	srli	r4,r3,3
  810694:	8822d0fa 	srli	r17,r17,3
  810698:	1806977a 	slli	r3,r3,29
  81069c:	2080022c 	andhi	r2,r4,8
  8106a0:	1c62b03a 	or	r17,r3,r17
  8106a4:	10000826 	beq	r2,zero,8106c8 <__subdf3+0x75c>
  8106a8:	2812d0fa 	srli	r9,r5,3
  8106ac:	4880022c 	andhi	r2,r9,8
  8106b0:	1000051e 	bne	r2,zero,8106c8 <__subdf3+0x75c>
  8106b4:	300cd0fa 	srli	r6,r6,3
  8106b8:	2804977a 	slli	r2,r5,29
  8106bc:	4809883a 	mov	r4,r9
  8106c0:	3825883a 	mov	r18,r7
  8106c4:	11a2b03a 	or	r17,r2,r6
  8106c8:	8806d77a 	srli	r3,r17,29
  8106cc:	200890fa 	slli	r4,r4,3
  8106d0:	882290fa 	slli	r17,r17,3
  8106d4:	0401ffc4 	movi	r16,2047
  8106d8:	1906b03a 	or	r3,r3,r4
  8106dc:	003e4406 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  8106e0:	2984b03a 	or	r2,r5,r6
  8106e4:	103e4226 	beq	r2,zero,80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  8106e8:	8989c83a 	sub	r4,r17,r6
  8106ec:	8911803a 	cmpltu	r8,r17,r4
  8106f0:	1945c83a 	sub	r2,r3,r5
  8106f4:	1205c83a 	sub	r2,r2,r8
  8106f8:	1200202c 	andhi	r8,r2,128
  8106fc:	403e9a26 	beq	r8,zero,810168 <__alt_mem_onchip_mem+0xff790168>
  810700:	3463c83a 	sub	r17,r6,r17
  810704:	28c5c83a 	sub	r2,r5,r3
  810708:	344d803a 	cmpltu	r6,r6,r17
  81070c:	1187c83a 	sub	r3,r2,r6
  810710:	3825883a 	mov	r18,r7
  810714:	003e3606 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810718:	0101ffc4 	movi	r4,2047
  81071c:	493fc71e 	bne	r9,r4,81063c <__alt_mem_onchip_mem+0xff79063c>
  810720:	2807883a 	mov	r3,r5
  810724:	3023883a 	mov	r17,r6
  810728:	4821883a 	mov	r16,r9
  81072c:	003e3006 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810730:	10003626 	beq	r2,zero,81080c <__subdf3+0x8a0>
  810734:	2984b03a 	or	r2,r5,r6
  810738:	10001726 	beq	r2,zero,810798 <__subdf3+0x82c>
  81073c:	1808d0fa 	srli	r4,r3,3
  810740:	8822d0fa 	srli	r17,r17,3
  810744:	1806977a 	slli	r3,r3,29
  810748:	2080022c 	andhi	r2,r4,8
  81074c:	1c62b03a 	or	r17,r3,r17
  810750:	10000726 	beq	r2,zero,810770 <__subdf3+0x804>
  810754:	2812d0fa 	srli	r9,r5,3
  810758:	4880022c 	andhi	r2,r9,8
  81075c:	1000041e 	bne	r2,zero,810770 <__subdf3+0x804>
  810760:	300cd0fa 	srli	r6,r6,3
  810764:	2804977a 	slli	r2,r5,29
  810768:	4809883a 	mov	r4,r9
  81076c:	11a2b03a 	or	r17,r2,r6
  810770:	8806d77a 	srli	r3,r17,29
  810774:	200890fa 	slli	r4,r4,3
  810778:	882290fa 	slli	r17,r17,3
  81077c:	3825883a 	mov	r18,r7
  810780:	1906b03a 	or	r3,r3,r4
  810784:	0401ffc4 	movi	r16,2047
  810788:	003e1906 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  81078c:	000b883a 	mov	r5,zero
  810790:	0005883a 	mov	r2,zero
  810794:	003e2e06 	br	810050 <__alt_mem_onchip_mem+0xff790050>
  810798:	0401ffc4 	movi	r16,2047
  81079c:	003e1406 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  8107a0:	0005883a 	mov	r2,zero
  8107a4:	003f7506 	br	81057c <__alt_mem_onchip_mem+0xff79057c>
  8107a8:	0005883a 	mov	r2,zero
  8107ac:	0009883a 	mov	r4,zero
  8107b0:	003e7806 	br	810194 <__alt_mem_onchip_mem+0xff790194>
  8107b4:	123ff804 	addi	r8,r2,-32
  8107b8:	01000804 	movi	r4,32
  8107bc:	1a10d83a 	srl	r8,r3,r8
  8107c0:	11002526 	beq	r2,r4,810858 <__subdf3+0x8ec>
  8107c4:	01001004 	movi	r4,64
  8107c8:	2085c83a 	sub	r2,r4,r2
  8107cc:	1884983a 	sll	r2,r3,r2
  8107d0:	1444b03a 	or	r2,r2,r17
  8107d4:	1004c03a 	cmpne	r2,r2,zero
  8107d8:	40a2b03a 	or	r17,r8,r2
  8107dc:	0005883a 	mov	r2,zero
  8107e0:	003f1606 	br	81043c <__alt_mem_onchip_mem+0xff79043c>
  8107e4:	02000434 	movhi	r8,16
  8107e8:	0009883a 	mov	r4,zero
  8107ec:	423fffc4 	addi	r8,r8,-1
  8107f0:	00bfffc4 	movi	r2,-1
  8107f4:	0401ffc4 	movi	r16,2047
  8107f8:	003e6606 	br	810194 <__alt_mem_onchip_mem+0xff790194>
  8107fc:	1c62b03a 	or	r17,r3,r17
  810800:	8822c03a 	cmpne	r17,r17,zero
  810804:	0005883a 	mov	r2,zero
  810808:	003f9906 	br	810670 <__alt_mem_onchip_mem+0xff790670>
  81080c:	2807883a 	mov	r3,r5
  810810:	3023883a 	mov	r17,r6
  810814:	0401ffc4 	movi	r16,2047
  810818:	003df506 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  81081c:	2807883a 	mov	r3,r5
  810820:	3023883a 	mov	r17,r6
  810824:	003df206 	br	80fff0 <__alt_mem_onchip_mem+0xff78fff0>
  810828:	123ff804 	addi	r8,r2,-32
  81082c:	01000804 	movi	r4,32
  810830:	1a10d83a 	srl	r8,r3,r8
  810834:	11000a26 	beq	r2,r4,810860 <__subdf3+0x8f4>
  810838:	01001004 	movi	r4,64
  81083c:	2085c83a 	sub	r2,r4,r2
  810840:	1884983a 	sll	r2,r3,r2
  810844:	1444b03a 	or	r2,r2,r17
  810848:	1004c03a 	cmpne	r2,r2,zero
  81084c:	40a2b03a 	or	r17,r8,r2
  810850:	0005883a 	mov	r2,zero
  810854:	003f8606 	br	810670 <__alt_mem_onchip_mem+0xff790670>
  810858:	0005883a 	mov	r2,zero
  81085c:	003fdc06 	br	8107d0 <__alt_mem_onchip_mem+0xff7907d0>
  810860:	0005883a 	mov	r2,zero
  810864:	003ff706 	br	810844 <__alt_mem_onchip_mem+0xff790844>

00810868 <__fixdfsi>:
  810868:	280cd53a 	srli	r6,r5,20
  81086c:	00c00434 	movhi	r3,16
  810870:	18ffffc4 	addi	r3,r3,-1
  810874:	3181ffcc 	andi	r6,r6,2047
  810878:	01c0ff84 	movi	r7,1022
  81087c:	28c6703a 	and	r3,r5,r3
  810880:	280ad7fa 	srli	r5,r5,31
  810884:	3980120e 	bge	r7,r6,8108d0 <__fixdfsi+0x68>
  810888:	00810744 	movi	r2,1053
  81088c:	11800c16 	blt	r2,r6,8108c0 <__fixdfsi+0x58>
  810890:	00810cc4 	movi	r2,1075
  810894:	1185c83a 	sub	r2,r2,r6
  810898:	01c007c4 	movi	r7,31
  81089c:	18c00434 	orhi	r3,r3,16
  8108a0:	38800d16 	blt	r7,r2,8108d8 <__fixdfsi+0x70>
  8108a4:	31befb44 	addi	r6,r6,-1043
  8108a8:	2084d83a 	srl	r2,r4,r2
  8108ac:	1986983a 	sll	r3,r3,r6
  8108b0:	1884b03a 	or	r2,r3,r2
  8108b4:	28000726 	beq	r5,zero,8108d4 <__fixdfsi+0x6c>
  8108b8:	0085c83a 	sub	r2,zero,r2
  8108bc:	f800283a 	ret
  8108c0:	00a00034 	movhi	r2,32768
  8108c4:	10bfffc4 	addi	r2,r2,-1
  8108c8:	2885883a 	add	r2,r5,r2
  8108cc:	f800283a 	ret
  8108d0:	0005883a 	mov	r2,zero
  8108d4:	f800283a 	ret
  8108d8:	008104c4 	movi	r2,1043
  8108dc:	1185c83a 	sub	r2,r2,r6
  8108e0:	1884d83a 	srl	r2,r3,r2
  8108e4:	003ff306 	br	8108b4 <__alt_mem_onchip_mem+0xff7908b4>

008108e8 <__floatsidf>:
  8108e8:	defffd04 	addi	sp,sp,-12
  8108ec:	dfc00215 	stw	ra,8(sp)
  8108f0:	dc400115 	stw	r17,4(sp)
  8108f4:	dc000015 	stw	r16,0(sp)
  8108f8:	20002b26 	beq	r4,zero,8109a8 <__floatsidf+0xc0>
  8108fc:	2023883a 	mov	r17,r4
  810900:	2020d7fa 	srli	r16,r4,31
  810904:	20002d16 	blt	r4,zero,8109bc <__floatsidf+0xd4>
  810908:	8809883a 	mov	r4,r17
  81090c:	0810a6c0 	call	810a6c <__clzsi2>
  810910:	01410784 	movi	r5,1054
  810914:	288bc83a 	sub	r5,r5,r2
  810918:	01010cc4 	movi	r4,1075
  81091c:	2149c83a 	sub	r4,r4,r5
  810920:	00c007c4 	movi	r3,31
  810924:	1900160e 	bge	r3,r4,810980 <__floatsidf+0x98>
  810928:	00c104c4 	movi	r3,1043
  81092c:	1947c83a 	sub	r3,r3,r5
  810930:	88c6983a 	sll	r3,r17,r3
  810934:	00800434 	movhi	r2,16
  810938:	10bfffc4 	addi	r2,r2,-1
  81093c:	1886703a 	and	r3,r3,r2
  810940:	2941ffcc 	andi	r5,r5,2047
  810944:	800d883a 	mov	r6,r16
  810948:	0005883a 	mov	r2,zero
  81094c:	280a953a 	slli	r5,r5,20
  810950:	31803fcc 	andi	r6,r6,255
  810954:	01000434 	movhi	r4,16
  810958:	300c97fa 	slli	r6,r6,31
  81095c:	213fffc4 	addi	r4,r4,-1
  810960:	1906703a 	and	r3,r3,r4
  810964:	1946b03a 	or	r3,r3,r5
  810968:	1986b03a 	or	r3,r3,r6
  81096c:	dfc00217 	ldw	ra,8(sp)
  810970:	dc400117 	ldw	r17,4(sp)
  810974:	dc000017 	ldw	r16,0(sp)
  810978:	dec00304 	addi	sp,sp,12
  81097c:	f800283a 	ret
  810980:	00c002c4 	movi	r3,11
  810984:	1887c83a 	sub	r3,r3,r2
  810988:	88c6d83a 	srl	r3,r17,r3
  81098c:	8904983a 	sll	r2,r17,r4
  810990:	01000434 	movhi	r4,16
  810994:	213fffc4 	addi	r4,r4,-1
  810998:	2941ffcc 	andi	r5,r5,2047
  81099c:	1906703a 	and	r3,r3,r4
  8109a0:	800d883a 	mov	r6,r16
  8109a4:	003fe906 	br	81094c <__alt_mem_onchip_mem+0xff79094c>
  8109a8:	000d883a 	mov	r6,zero
  8109ac:	000b883a 	mov	r5,zero
  8109b0:	0007883a 	mov	r3,zero
  8109b4:	0005883a 	mov	r2,zero
  8109b8:	003fe406 	br	81094c <__alt_mem_onchip_mem+0xff79094c>
  8109bc:	0123c83a 	sub	r17,zero,r4
  8109c0:	003fd106 	br	810908 <__alt_mem_onchip_mem+0xff790908>

008109c4 <__floatunsidf>:
  8109c4:	defffe04 	addi	sp,sp,-8
  8109c8:	dc000015 	stw	r16,0(sp)
  8109cc:	dfc00115 	stw	ra,4(sp)
  8109d0:	2021883a 	mov	r16,r4
  8109d4:	20002226 	beq	r4,zero,810a60 <__floatunsidf+0x9c>
  8109d8:	0810a6c0 	call	810a6c <__clzsi2>
  8109dc:	01010784 	movi	r4,1054
  8109e0:	2089c83a 	sub	r4,r4,r2
  8109e4:	01810cc4 	movi	r6,1075
  8109e8:	310dc83a 	sub	r6,r6,r4
  8109ec:	00c007c4 	movi	r3,31
  8109f0:	1980120e 	bge	r3,r6,810a3c <__floatunsidf+0x78>
  8109f4:	00c104c4 	movi	r3,1043
  8109f8:	1907c83a 	sub	r3,r3,r4
  8109fc:	80ca983a 	sll	r5,r16,r3
  810a00:	00800434 	movhi	r2,16
  810a04:	10bfffc4 	addi	r2,r2,-1
  810a08:	2101ffcc 	andi	r4,r4,2047
  810a0c:	0021883a 	mov	r16,zero
  810a10:	288a703a 	and	r5,r5,r2
  810a14:	2008953a 	slli	r4,r4,20
  810a18:	00c00434 	movhi	r3,16
  810a1c:	18ffffc4 	addi	r3,r3,-1
  810a20:	28c6703a 	and	r3,r5,r3
  810a24:	8005883a 	mov	r2,r16
  810a28:	1906b03a 	or	r3,r3,r4
  810a2c:	dfc00117 	ldw	ra,4(sp)
  810a30:	dc000017 	ldw	r16,0(sp)
  810a34:	dec00204 	addi	sp,sp,8
  810a38:	f800283a 	ret
  810a3c:	00c002c4 	movi	r3,11
  810a40:	188bc83a 	sub	r5,r3,r2
  810a44:	814ad83a 	srl	r5,r16,r5
  810a48:	00c00434 	movhi	r3,16
  810a4c:	18ffffc4 	addi	r3,r3,-1
  810a50:	81a0983a 	sll	r16,r16,r6
  810a54:	2101ffcc 	andi	r4,r4,2047
  810a58:	28ca703a 	and	r5,r5,r3
  810a5c:	003fed06 	br	810a14 <__alt_mem_onchip_mem+0xff790a14>
  810a60:	0009883a 	mov	r4,zero
  810a64:	000b883a 	mov	r5,zero
  810a68:	003fea06 	br	810a14 <__alt_mem_onchip_mem+0xff790a14>

00810a6c <__clzsi2>:
  810a6c:	00bfffd4 	movui	r2,65535
  810a70:	11000536 	bltu	r2,r4,810a88 <__clzsi2+0x1c>
  810a74:	00803fc4 	movi	r2,255
  810a78:	11000f36 	bltu	r2,r4,810ab8 <__clzsi2+0x4c>
  810a7c:	00800804 	movi	r2,32
  810a80:	0007883a 	mov	r3,zero
  810a84:	00000506 	br	810a9c <__clzsi2+0x30>
  810a88:	00804034 	movhi	r2,256
  810a8c:	10bfffc4 	addi	r2,r2,-1
  810a90:	11000c2e 	bgeu	r2,r4,810ac4 <__clzsi2+0x58>
  810a94:	00800204 	movi	r2,8
  810a98:	00c00604 	movi	r3,24
  810a9c:	20c8d83a 	srl	r4,r4,r3
  810aa0:	00c02074 	movhi	r3,129
  810aa4:	18d41e04 	addi	r3,r3,20600
  810aa8:	1909883a 	add	r4,r3,r4
  810aac:	20c00003 	ldbu	r3,0(r4)
  810ab0:	10c5c83a 	sub	r2,r2,r3
  810ab4:	f800283a 	ret
  810ab8:	00800604 	movi	r2,24
  810abc:	00c00204 	movi	r3,8
  810ac0:	003ff606 	br	810a9c <__alt_mem_onchip_mem+0xff790a9c>
  810ac4:	00800404 	movi	r2,16
  810ac8:	1007883a 	mov	r3,r2
  810acc:	003ff306 	br	810a9c <__alt_mem_onchip_mem+0xff790a9c>

00810ad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810ad0:	defffe04 	addi	sp,sp,-8
  810ad4:	dfc00115 	stw	ra,4(sp)
  810ad8:	df000015 	stw	fp,0(sp)
  810adc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810ae0:	d0a00b17 	ldw	r2,-32724(gp)
  810ae4:	10000326 	beq	r2,zero,810af4 <alt_get_errno+0x24>
  810ae8:	d0a00b17 	ldw	r2,-32724(gp)
  810aec:	103ee83a 	callr	r2
  810af0:	00000106 	br	810af8 <alt_get_errno+0x28>
  810af4:	d0a7a404 	addi	r2,gp,-24944
}
  810af8:	e037883a 	mov	sp,fp
  810afc:	dfc00117 	ldw	ra,4(sp)
  810b00:	df000017 	ldw	fp,0(sp)
  810b04:	dec00204 	addi	sp,sp,8
  810b08:	f800283a 	ret

00810b0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  810b0c:	defffb04 	addi	sp,sp,-20
  810b10:	dfc00415 	stw	ra,16(sp)
  810b14:	df000315 	stw	fp,12(sp)
  810b18:	df000304 	addi	fp,sp,12
  810b1c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  810b20:	e0bfff17 	ldw	r2,-4(fp)
  810b24:	10000616 	blt	r2,zero,810b40 <close+0x34>
  810b28:	e0bfff17 	ldw	r2,-4(fp)
  810b2c:	10c00324 	muli	r3,r2,12
  810b30:	00802074 	movhi	r2,129
  810b34:	10974804 	addi	r2,r2,23840
  810b38:	1885883a 	add	r2,r3,r2
  810b3c:	00000106 	br	810b44 <close+0x38>
  810b40:	0005883a 	mov	r2,zero
  810b44:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  810b48:	e0bffd17 	ldw	r2,-12(fp)
  810b4c:	10001926 	beq	r2,zero,810bb4 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  810b50:	e0bffd17 	ldw	r2,-12(fp)
  810b54:	10800017 	ldw	r2,0(r2)
  810b58:	10800417 	ldw	r2,16(r2)
  810b5c:	10000626 	beq	r2,zero,810b78 <close+0x6c>
  810b60:	e0bffd17 	ldw	r2,-12(fp)
  810b64:	10800017 	ldw	r2,0(r2)
  810b68:	10800417 	ldw	r2,16(r2)
  810b6c:	e13ffd17 	ldw	r4,-12(fp)
  810b70:	103ee83a 	callr	r2
  810b74:	00000106 	br	810b7c <close+0x70>
  810b78:	0005883a 	mov	r2,zero
  810b7c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  810b80:	e13fff17 	ldw	r4,-4(fp)
  810b84:	08115a00 	call	8115a0 <alt_release_fd>
    if (rval < 0)
  810b88:	e0bffe17 	ldw	r2,-8(fp)
  810b8c:	1000070e 	bge	r2,zero,810bac <close+0xa0>
    {
      ALT_ERRNO = -rval;
  810b90:	0810ad00 	call	810ad0 <alt_get_errno>
  810b94:	1007883a 	mov	r3,r2
  810b98:	e0bffe17 	ldw	r2,-8(fp)
  810b9c:	0085c83a 	sub	r2,zero,r2
  810ba0:	18800015 	stw	r2,0(r3)
      return -1;
  810ba4:	00bfffc4 	movi	r2,-1
  810ba8:	00000706 	br	810bc8 <close+0xbc>
    }
    return 0;
  810bac:	0005883a 	mov	r2,zero
  810bb0:	00000506 	br	810bc8 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810bb4:	0810ad00 	call	810ad0 <alt_get_errno>
  810bb8:	1007883a 	mov	r3,r2
  810bbc:	00801444 	movi	r2,81
  810bc0:	18800015 	stw	r2,0(r3)
    return -1;
  810bc4:	00bfffc4 	movi	r2,-1
  }
}
  810bc8:	e037883a 	mov	sp,fp
  810bcc:	dfc00117 	ldw	ra,4(sp)
  810bd0:	df000017 	ldw	fp,0(sp)
  810bd4:	dec00204 	addi	sp,sp,8
  810bd8:	f800283a 	ret

00810bdc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  810bdc:	defffc04 	addi	sp,sp,-16
  810be0:	df000315 	stw	fp,12(sp)
  810be4:	df000304 	addi	fp,sp,12
  810be8:	e13ffd15 	stw	r4,-12(fp)
  810bec:	e17ffe15 	stw	r5,-8(fp)
  810bf0:	e1bfff15 	stw	r6,-4(fp)
  return len;
  810bf4:	e0bfff17 	ldw	r2,-4(fp)
}
  810bf8:	e037883a 	mov	sp,fp
  810bfc:	df000017 	ldw	fp,0(sp)
  810c00:	dec00104 	addi	sp,sp,4
  810c04:	f800283a 	ret

00810c08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810c08:	defffe04 	addi	sp,sp,-8
  810c0c:	dfc00115 	stw	ra,4(sp)
  810c10:	df000015 	stw	fp,0(sp)
  810c14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810c18:	d0a00b17 	ldw	r2,-32724(gp)
  810c1c:	10000326 	beq	r2,zero,810c2c <alt_get_errno+0x24>
  810c20:	d0a00b17 	ldw	r2,-32724(gp)
  810c24:	103ee83a 	callr	r2
  810c28:	00000106 	br	810c30 <alt_get_errno+0x28>
  810c2c:	d0a7a404 	addi	r2,gp,-24944
}
  810c30:	e037883a 	mov	sp,fp
  810c34:	dfc00117 	ldw	ra,4(sp)
  810c38:	df000017 	ldw	fp,0(sp)
  810c3c:	dec00204 	addi	sp,sp,8
  810c40:	f800283a 	ret

00810c44 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  810c44:	defffb04 	addi	sp,sp,-20
  810c48:	dfc00415 	stw	ra,16(sp)
  810c4c:	df000315 	stw	fp,12(sp)
  810c50:	df000304 	addi	fp,sp,12
  810c54:	e13ffe15 	stw	r4,-8(fp)
  810c58:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810c5c:	e0bffe17 	ldw	r2,-8(fp)
  810c60:	10000616 	blt	r2,zero,810c7c <fstat+0x38>
  810c64:	e0bffe17 	ldw	r2,-8(fp)
  810c68:	10c00324 	muli	r3,r2,12
  810c6c:	00802074 	movhi	r2,129
  810c70:	10974804 	addi	r2,r2,23840
  810c74:	1885883a 	add	r2,r3,r2
  810c78:	00000106 	br	810c80 <fstat+0x3c>
  810c7c:	0005883a 	mov	r2,zero
  810c80:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  810c84:	e0bffd17 	ldw	r2,-12(fp)
  810c88:	10001026 	beq	r2,zero,810ccc <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  810c8c:	e0bffd17 	ldw	r2,-12(fp)
  810c90:	10800017 	ldw	r2,0(r2)
  810c94:	10800817 	ldw	r2,32(r2)
  810c98:	10000726 	beq	r2,zero,810cb8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  810c9c:	e0bffd17 	ldw	r2,-12(fp)
  810ca0:	10800017 	ldw	r2,0(r2)
  810ca4:	10800817 	ldw	r2,32(r2)
  810ca8:	e17fff17 	ldw	r5,-4(fp)
  810cac:	e13ffd17 	ldw	r4,-12(fp)
  810cb0:	103ee83a 	callr	r2
  810cb4:	00000a06 	br	810ce0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  810cb8:	e0bfff17 	ldw	r2,-4(fp)
  810cbc:	00c80004 	movi	r3,8192
  810cc0:	10c00115 	stw	r3,4(r2)
      return 0;
  810cc4:	0005883a 	mov	r2,zero
  810cc8:	00000506 	br	810ce0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810ccc:	0810c080 	call	810c08 <alt_get_errno>
  810cd0:	1007883a 	mov	r3,r2
  810cd4:	00801444 	movi	r2,81
  810cd8:	18800015 	stw	r2,0(r3)
    return -1;
  810cdc:	00bfffc4 	movi	r2,-1
  }
}
  810ce0:	e037883a 	mov	sp,fp
  810ce4:	dfc00117 	ldw	ra,4(sp)
  810ce8:	df000017 	ldw	fp,0(sp)
  810cec:	dec00204 	addi	sp,sp,8
  810cf0:	f800283a 	ret

00810cf4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  810cf4:	defff004 	addi	sp,sp,-64
  810cf8:	df000f15 	stw	fp,60(sp)
  810cfc:	df000f04 	addi	fp,sp,60
  810d00:	e13ffd15 	stw	r4,-12(fp)
  810d04:	e17ffe15 	stw	r5,-8(fp)
  810d08:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  810d0c:	00bffa84 	movi	r2,-22
  810d10:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  810d14:	e0bffd17 	ldw	r2,-12(fp)
  810d18:	10800828 	cmpgeui	r2,r2,32
  810d1c:	1000501e 	bne	r2,zero,810e60 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810d20:	0005303a 	rdctl	r2,status
  810d24:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810d28:	e0fff617 	ldw	r3,-40(fp)
  810d2c:	00bfff84 	movi	r2,-2
  810d30:	1884703a 	and	r2,r3,r2
  810d34:	1001703a 	wrctl	status,r2
  
  return context;
  810d38:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  810d3c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  810d40:	008020b4 	movhi	r2,130
  810d44:	10a40d04 	addi	r2,r2,-28620
  810d48:	e0fffd17 	ldw	r3,-12(fp)
  810d4c:	180690fa 	slli	r3,r3,3
  810d50:	10c5883a 	add	r2,r2,r3
  810d54:	e0ffff17 	ldw	r3,-4(fp)
  810d58:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  810d5c:	008020b4 	movhi	r2,130
  810d60:	10a40d04 	addi	r2,r2,-28620
  810d64:	e0fffd17 	ldw	r3,-12(fp)
  810d68:	180690fa 	slli	r3,r3,3
  810d6c:	10c5883a 	add	r2,r2,r3
  810d70:	10800104 	addi	r2,r2,4
  810d74:	e0fffe17 	ldw	r3,-8(fp)
  810d78:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  810d7c:	e0bfff17 	ldw	r2,-4(fp)
  810d80:	10001926 	beq	r2,zero,810de8 <alt_irq_register+0xf4>
  810d84:	e0bffd17 	ldw	r2,-12(fp)
  810d88:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810d8c:	0005303a 	rdctl	r2,status
  810d90:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810d94:	e0fff717 	ldw	r3,-36(fp)
  810d98:	00bfff84 	movi	r2,-2
  810d9c:	1884703a 	and	r2,r3,r2
  810da0:	1001703a 	wrctl	status,r2
  
  return context;
  810da4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810da8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  810dac:	00c00044 	movi	r3,1
  810db0:	e0bff217 	ldw	r2,-56(fp)
  810db4:	1884983a 	sll	r2,r3,r2
  810db8:	1007883a 	mov	r3,r2
  810dbc:	d0a7ab17 	ldw	r2,-24916(gp)
  810dc0:	1884b03a 	or	r2,r3,r2
  810dc4:	d0a7ab15 	stw	r2,-24916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810dc8:	d0a7ab17 	ldw	r2,-24916(gp)
  810dcc:	100170fa 	wrctl	ienable,r2
  810dd0:	e0bff817 	ldw	r2,-32(fp)
  810dd4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810dd8:	e0bff917 	ldw	r2,-28(fp)
  810ddc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810de0:	0005883a 	mov	r2,zero
  810de4:	00001906 	br	810e4c <alt_irq_register+0x158>
  810de8:	e0bffd17 	ldw	r2,-12(fp)
  810dec:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810df0:	0005303a 	rdctl	r2,status
  810df4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810df8:	e0fffa17 	ldw	r3,-24(fp)
  810dfc:	00bfff84 	movi	r2,-2
  810e00:	1884703a 	and	r2,r3,r2
  810e04:	1001703a 	wrctl	status,r2
  
  return context;
  810e08:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  810e0c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  810e10:	00c00044 	movi	r3,1
  810e14:	e0bff417 	ldw	r2,-48(fp)
  810e18:	1884983a 	sll	r2,r3,r2
  810e1c:	0084303a 	nor	r2,zero,r2
  810e20:	1007883a 	mov	r3,r2
  810e24:	d0a7ab17 	ldw	r2,-24916(gp)
  810e28:	1884703a 	and	r2,r3,r2
  810e2c:	d0a7ab15 	stw	r2,-24916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  810e30:	d0a7ab17 	ldw	r2,-24916(gp)
  810e34:	100170fa 	wrctl	ienable,r2
  810e38:	e0bffb17 	ldw	r2,-20(fp)
  810e3c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810e40:	e0bffc17 	ldw	r2,-16(fp)
  810e44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  810e48:	0005883a 	mov	r2,zero
  810e4c:	e0bff115 	stw	r2,-60(fp)
  810e50:	e0bff317 	ldw	r2,-52(fp)
  810e54:	e0bff515 	stw	r2,-44(fp)
  810e58:	e0bff517 	ldw	r2,-44(fp)
  810e5c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  810e60:	e0bff117 	ldw	r2,-60(fp)
}
  810e64:	e037883a 	mov	sp,fp
  810e68:	df000017 	ldw	fp,0(sp)
  810e6c:	dec00104 	addi	sp,sp,4
  810e70:	f800283a 	ret

00810e74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  810e74:	defffe04 	addi	sp,sp,-8
  810e78:	dfc00115 	stw	ra,4(sp)
  810e7c:	df000015 	stw	fp,0(sp)
  810e80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  810e84:	d0a00b17 	ldw	r2,-32724(gp)
  810e88:	10000326 	beq	r2,zero,810e98 <alt_get_errno+0x24>
  810e8c:	d0a00b17 	ldw	r2,-32724(gp)
  810e90:	103ee83a 	callr	r2
  810e94:	00000106 	br	810e9c <alt_get_errno+0x28>
  810e98:	d0a7a404 	addi	r2,gp,-24944
}
  810e9c:	e037883a 	mov	sp,fp
  810ea0:	dfc00117 	ldw	ra,4(sp)
  810ea4:	df000017 	ldw	fp,0(sp)
  810ea8:	dec00204 	addi	sp,sp,8
  810eac:	f800283a 	ret

00810eb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  810eb0:	deffed04 	addi	sp,sp,-76
  810eb4:	dfc01215 	stw	ra,72(sp)
  810eb8:	df001115 	stw	fp,68(sp)
  810ebc:	df001104 	addi	fp,sp,68
  810ec0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  810ec4:	e0bfff17 	ldw	r2,-4(fp)
  810ec8:	10000616 	blt	r2,zero,810ee4 <isatty+0x34>
  810ecc:	e0bfff17 	ldw	r2,-4(fp)
  810ed0:	10c00324 	muli	r3,r2,12
  810ed4:	00802074 	movhi	r2,129
  810ed8:	10974804 	addi	r2,r2,23840
  810edc:	1885883a 	add	r2,r3,r2
  810ee0:	00000106 	br	810ee8 <isatty+0x38>
  810ee4:	0005883a 	mov	r2,zero
  810ee8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  810eec:	e0bfef17 	ldw	r2,-68(fp)
  810ef0:	10000e26 	beq	r2,zero,810f2c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  810ef4:	e0bfef17 	ldw	r2,-68(fp)
  810ef8:	10800017 	ldw	r2,0(r2)
  810efc:	10800817 	ldw	r2,32(r2)
  810f00:	1000021e 	bne	r2,zero,810f0c <isatty+0x5c>
    {
      return 1;
  810f04:	00800044 	movi	r2,1
  810f08:	00000d06 	br	810f40 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  810f0c:	e0bff004 	addi	r2,fp,-64
  810f10:	100b883a 	mov	r5,r2
  810f14:	e13fff17 	ldw	r4,-4(fp)
  810f18:	0810c440 	call	810c44 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  810f1c:	e0bff117 	ldw	r2,-60(fp)
  810f20:	10880020 	cmpeqi	r2,r2,8192
  810f24:	10803fcc 	andi	r2,r2,255
  810f28:	00000506 	br	810f40 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  810f2c:	0810e740 	call	810e74 <alt_get_errno>
  810f30:	1007883a 	mov	r3,r2
  810f34:	00801444 	movi	r2,81
  810f38:	18800015 	stw	r2,0(r3)
    return 0;
  810f3c:	0005883a 	mov	r2,zero
  }
}
  810f40:	e037883a 	mov	sp,fp
  810f44:	dfc00117 	ldw	ra,4(sp)
  810f48:	df000017 	ldw	fp,0(sp)
  810f4c:	dec00204 	addi	sp,sp,8
  810f50:	f800283a 	ret

00810f54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  810f54:	defffc04 	addi	sp,sp,-16
  810f58:	df000315 	stw	fp,12(sp)
  810f5c:	df000304 	addi	fp,sp,12
  810f60:	e13ffd15 	stw	r4,-12(fp)
  810f64:	e17ffe15 	stw	r5,-8(fp)
  810f68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  810f6c:	e0fffe17 	ldw	r3,-8(fp)
  810f70:	e0bffd17 	ldw	r2,-12(fp)
  810f74:	18800c26 	beq	r3,r2,810fa8 <alt_load_section+0x54>
  {
    while( to != end )
  810f78:	00000806 	br	810f9c <alt_load_section+0x48>
    {
      *to++ = *from++;
  810f7c:	e0bffe17 	ldw	r2,-8(fp)
  810f80:	10c00104 	addi	r3,r2,4
  810f84:	e0fffe15 	stw	r3,-8(fp)
  810f88:	e0fffd17 	ldw	r3,-12(fp)
  810f8c:	19000104 	addi	r4,r3,4
  810f90:	e13ffd15 	stw	r4,-12(fp)
  810f94:	18c00017 	ldw	r3,0(r3)
  810f98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  810f9c:	e0fffe17 	ldw	r3,-8(fp)
  810fa0:	e0bfff17 	ldw	r2,-4(fp)
  810fa4:	18bff51e 	bne	r3,r2,810f7c <__alt_mem_onchip_mem+0xff790f7c>
    {
      *to++ = *from++;
    }
  }
}
  810fa8:	0001883a 	nop
  810fac:	e037883a 	mov	sp,fp
  810fb0:	df000017 	ldw	fp,0(sp)
  810fb4:	dec00104 	addi	sp,sp,4
  810fb8:	f800283a 	ret

00810fbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  810fbc:	defffe04 	addi	sp,sp,-8
  810fc0:	dfc00115 	stw	ra,4(sp)
  810fc4:	df000015 	stw	fp,0(sp)
  810fc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  810fcc:	01802074 	movhi	r6,129
  810fd0:	319c4b04 	addi	r6,r6,28972
  810fd4:	01402074 	movhi	r5,129
  810fd8:	29550f04 	addi	r5,r5,21564
  810fdc:	01002074 	movhi	r4,129
  810fe0:	211c4b04 	addi	r4,r4,28972
  810fe4:	0810f540 	call	810f54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  810fe8:	01802034 	movhi	r6,128
  810fec:	31809104 	addi	r6,r6,580
  810ff0:	01402034 	movhi	r5,128
  810ff4:	29400804 	addi	r5,r5,32
  810ff8:	01002034 	movhi	r4,128
  810ffc:	21000804 	addi	r4,r4,32
  811000:	0810f540 	call	810f54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  811004:	01802074 	movhi	r6,129
  811008:	31950f04 	addi	r6,r6,21564
  81100c:	01402074 	movhi	r5,129
  811010:	29535d04 	addi	r5,r5,19828
  811014:	01002074 	movhi	r4,129
  811018:	21135d04 	addi	r4,r4,19828
  81101c:	0810f540 	call	810f54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  811020:	0813ed00 	call	813ed0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  811024:	08142f40 	call	8142f4 <alt_icache_flush_all>
}
  811028:	0001883a 	nop
  81102c:	e037883a 	mov	sp,fp
  811030:	dfc00117 	ldw	ra,4(sp)
  811034:	df000017 	ldw	fp,0(sp)
  811038:	dec00204 	addi	sp,sp,8
  81103c:	f800283a 	ret

00811040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811040:	defffe04 	addi	sp,sp,-8
  811044:	dfc00115 	stw	ra,4(sp)
  811048:	df000015 	stw	fp,0(sp)
  81104c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811050:	d0a00b17 	ldw	r2,-32724(gp)
  811054:	10000326 	beq	r2,zero,811064 <alt_get_errno+0x24>
  811058:	d0a00b17 	ldw	r2,-32724(gp)
  81105c:	103ee83a 	callr	r2
  811060:	00000106 	br	811068 <alt_get_errno+0x28>
  811064:	d0a7a404 	addi	r2,gp,-24944
}
  811068:	e037883a 	mov	sp,fp
  81106c:	dfc00117 	ldw	ra,4(sp)
  811070:	df000017 	ldw	fp,0(sp)
  811074:	dec00204 	addi	sp,sp,8
  811078:	f800283a 	ret

0081107c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  81107c:	defff904 	addi	sp,sp,-28
  811080:	dfc00615 	stw	ra,24(sp)
  811084:	df000515 	stw	fp,20(sp)
  811088:	df000504 	addi	fp,sp,20
  81108c:	e13ffd15 	stw	r4,-12(fp)
  811090:	e17ffe15 	stw	r5,-8(fp)
  811094:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  811098:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  81109c:	e0bffd17 	ldw	r2,-12(fp)
  8110a0:	10000616 	blt	r2,zero,8110bc <lseek+0x40>
  8110a4:	e0bffd17 	ldw	r2,-12(fp)
  8110a8:	10c00324 	muli	r3,r2,12
  8110ac:	00802074 	movhi	r2,129
  8110b0:	10974804 	addi	r2,r2,23840
  8110b4:	1885883a 	add	r2,r3,r2
  8110b8:	00000106 	br	8110c0 <lseek+0x44>
  8110bc:	0005883a 	mov	r2,zero
  8110c0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  8110c4:	e0bffc17 	ldw	r2,-16(fp)
  8110c8:	10001026 	beq	r2,zero,81110c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  8110cc:	e0bffc17 	ldw	r2,-16(fp)
  8110d0:	10800017 	ldw	r2,0(r2)
  8110d4:	10800717 	ldw	r2,28(r2)
  8110d8:	10000926 	beq	r2,zero,811100 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  8110dc:	e0bffc17 	ldw	r2,-16(fp)
  8110e0:	10800017 	ldw	r2,0(r2)
  8110e4:	10800717 	ldw	r2,28(r2)
  8110e8:	e1bfff17 	ldw	r6,-4(fp)
  8110ec:	e17ffe17 	ldw	r5,-8(fp)
  8110f0:	e13ffc17 	ldw	r4,-16(fp)
  8110f4:	103ee83a 	callr	r2
  8110f8:	e0bffb15 	stw	r2,-20(fp)
  8110fc:	00000506 	br	811114 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  811100:	00bfde84 	movi	r2,-134
  811104:	e0bffb15 	stw	r2,-20(fp)
  811108:	00000206 	br	811114 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  81110c:	00bfebc4 	movi	r2,-81
  811110:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  811114:	e0bffb17 	ldw	r2,-20(fp)
  811118:	1000070e 	bge	r2,zero,811138 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  81111c:	08110400 	call	811040 <alt_get_errno>
  811120:	1007883a 	mov	r3,r2
  811124:	e0bffb17 	ldw	r2,-20(fp)
  811128:	0085c83a 	sub	r2,zero,r2
  81112c:	18800015 	stw	r2,0(r3)
    rc = -1;
  811130:	00bfffc4 	movi	r2,-1
  811134:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  811138:	e0bffb17 	ldw	r2,-20(fp)
}
  81113c:	e037883a 	mov	sp,fp
  811140:	dfc00117 	ldw	ra,4(sp)
  811144:	df000017 	ldw	fp,0(sp)
  811148:	dec00204 	addi	sp,sp,8
  81114c:	f800283a 	ret

00811150 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  811150:	defffd04 	addi	sp,sp,-12
  811154:	dfc00215 	stw	ra,8(sp)
  811158:	df000115 	stw	fp,4(sp)
  81115c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  811160:	0009883a 	mov	r4,zero
  811164:	08119c00 	call	8119c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  811168:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  81116c:	08119f80 	call	8119f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  811170:	01802074 	movhi	r6,129
  811174:	31946104 	addi	r6,r6,20868
  811178:	01402074 	movhi	r5,129
  81117c:	29546104 	addi	r5,r5,20868
  811180:	01002074 	movhi	r4,129
  811184:	21146104 	addi	r4,r4,20868
  811188:	081468c0 	call	81468c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  81118c:	0813ff80 	call	813ff8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  811190:	01002074 	movhi	r4,129
  811194:	21101604 	addi	r4,r4,16472
  811198:	08149e00 	call	8149e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  81119c:	d0a7ac17 	ldw	r2,-24912(gp)
  8111a0:	d0e7ad17 	ldw	r3,-24908(gp)
  8111a4:	d127ae17 	ldw	r4,-24904(gp)
  8111a8:	200d883a 	mov	r6,r4
  8111ac:	180b883a 	mov	r5,r3
  8111b0:	1009883a 	mov	r4,r2
  8111b4:	080052c0 	call	80052c <main>
  8111b8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  8111bc:	01000044 	movi	r4,1
  8111c0:	0810b0c0 	call	810b0c <close>
  exit (result);
  8111c4:	e13fff17 	ldw	r4,-4(fp)
  8111c8:	08149f40 	call	8149f4 <exit>

008111cc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  8111cc:	defffe04 	addi	sp,sp,-8
  8111d0:	df000115 	stw	fp,4(sp)
  8111d4:	df000104 	addi	fp,sp,4
  8111d8:	e13fff15 	stw	r4,-4(fp)
}
  8111dc:	0001883a 	nop
  8111e0:	e037883a 	mov	sp,fp
  8111e4:	df000017 	ldw	fp,0(sp)
  8111e8:	dec00104 	addi	sp,sp,4
  8111ec:	f800283a 	ret

008111f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  8111f0:	defffe04 	addi	sp,sp,-8
  8111f4:	df000115 	stw	fp,4(sp)
  8111f8:	df000104 	addi	fp,sp,4
  8111fc:	e13fff15 	stw	r4,-4(fp)
}
  811200:	0001883a 	nop
  811204:	e037883a 	mov	sp,fp
  811208:	df000017 	ldw	fp,0(sp)
  81120c:	dec00104 	addi	sp,sp,4
  811210:	f800283a 	ret

00811214 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811214:	defffe04 	addi	sp,sp,-8
  811218:	dfc00115 	stw	ra,4(sp)
  81121c:	df000015 	stw	fp,0(sp)
  811220:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811224:	d0a00b17 	ldw	r2,-32724(gp)
  811228:	10000326 	beq	r2,zero,811238 <alt_get_errno+0x24>
  81122c:	d0a00b17 	ldw	r2,-32724(gp)
  811230:	103ee83a 	callr	r2
  811234:	00000106 	br	81123c <alt_get_errno+0x28>
  811238:	d0a7a404 	addi	r2,gp,-24944
}
  81123c:	e037883a 	mov	sp,fp
  811240:	dfc00117 	ldw	ra,4(sp)
  811244:	df000017 	ldw	fp,0(sp)
  811248:	dec00204 	addi	sp,sp,8
  81124c:	f800283a 	ret

00811250 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  811250:	defffd04 	addi	sp,sp,-12
  811254:	df000215 	stw	fp,8(sp)
  811258:	df000204 	addi	fp,sp,8
  81125c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  811260:	e0bfff17 	ldw	r2,-4(fp)
  811264:	10800217 	ldw	r2,8(r2)
  811268:	10d00034 	orhi	r3,r2,16384
  81126c:	e0bfff17 	ldw	r2,-4(fp)
  811270:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  811274:	e03ffe15 	stw	zero,-8(fp)
  811278:	00001d06 	br	8112f0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81127c:	00802074 	movhi	r2,129
  811280:	10974804 	addi	r2,r2,23840
  811284:	e0fffe17 	ldw	r3,-8(fp)
  811288:	18c00324 	muli	r3,r3,12
  81128c:	10c5883a 	add	r2,r2,r3
  811290:	10c00017 	ldw	r3,0(r2)
  811294:	e0bfff17 	ldw	r2,-4(fp)
  811298:	10800017 	ldw	r2,0(r2)
  81129c:	1880111e 	bne	r3,r2,8112e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8112a0:	00802074 	movhi	r2,129
  8112a4:	10974804 	addi	r2,r2,23840
  8112a8:	e0fffe17 	ldw	r3,-8(fp)
  8112ac:	18c00324 	muli	r3,r3,12
  8112b0:	10c5883a 	add	r2,r2,r3
  8112b4:	10800204 	addi	r2,r2,8
  8112b8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8112bc:	1000090e 	bge	r2,zero,8112e4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  8112c0:	e0bffe17 	ldw	r2,-8(fp)
  8112c4:	10c00324 	muli	r3,r2,12
  8112c8:	00802074 	movhi	r2,129
  8112cc:	10974804 	addi	r2,r2,23840
  8112d0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  8112d4:	e0bfff17 	ldw	r2,-4(fp)
  8112d8:	18800226 	beq	r3,r2,8112e4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8112dc:	00bffcc4 	movi	r2,-13
  8112e0:	00000806 	br	811304 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8112e4:	e0bffe17 	ldw	r2,-8(fp)
  8112e8:	10800044 	addi	r2,r2,1
  8112ec:	e0bffe15 	stw	r2,-8(fp)
  8112f0:	d0a00a17 	ldw	r2,-32728(gp)
  8112f4:	1007883a 	mov	r3,r2
  8112f8:	e0bffe17 	ldw	r2,-8(fp)
  8112fc:	18bfdf2e 	bgeu	r3,r2,81127c <__alt_mem_onchip_mem+0xff79127c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  811300:	0005883a 	mov	r2,zero
}
  811304:	e037883a 	mov	sp,fp
  811308:	df000017 	ldw	fp,0(sp)
  81130c:	dec00104 	addi	sp,sp,4
  811310:	f800283a 	ret

00811314 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  811314:	defff604 	addi	sp,sp,-40
  811318:	dfc00915 	stw	ra,36(sp)
  81131c:	df000815 	stw	fp,32(sp)
  811320:	df000804 	addi	fp,sp,32
  811324:	e13ffd15 	stw	r4,-12(fp)
  811328:	e17ffe15 	stw	r5,-8(fp)
  81132c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  811330:	00bfffc4 	movi	r2,-1
  811334:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  811338:	00bffb44 	movi	r2,-19
  81133c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  811340:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  811344:	d1600804 	addi	r5,gp,-32736
  811348:	e13ffd17 	ldw	r4,-12(fp)
  81134c:	08140b80 	call	8140b8 <alt_find_dev>
  811350:	e0bff815 	stw	r2,-32(fp)
  811354:	e0bff817 	ldw	r2,-32(fp)
  811358:	1000051e 	bne	r2,zero,811370 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  81135c:	e13ffd17 	ldw	r4,-12(fp)
  811360:	08141480 	call	814148 <alt_find_file>
  811364:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  811368:	00800044 	movi	r2,1
  81136c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  811370:	e0bff817 	ldw	r2,-32(fp)
  811374:	10002926 	beq	r2,zero,81141c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  811378:	e13ff817 	ldw	r4,-32(fp)
  81137c:	08142500 	call	814250 <alt_get_fd>
  811380:	e0bff915 	stw	r2,-28(fp)
  811384:	e0bff917 	ldw	r2,-28(fp)
  811388:	1000030e 	bge	r2,zero,811398 <open+0x84>
    {
      status = index;
  81138c:	e0bff917 	ldw	r2,-28(fp)
  811390:	e0bffa15 	stw	r2,-24(fp)
  811394:	00002306 	br	811424 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  811398:	e0bff917 	ldw	r2,-28(fp)
  81139c:	10c00324 	muli	r3,r2,12
  8113a0:	00802074 	movhi	r2,129
  8113a4:	10974804 	addi	r2,r2,23840
  8113a8:	1885883a 	add	r2,r3,r2
  8113ac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  8113b0:	e0fffe17 	ldw	r3,-8(fp)
  8113b4:	00900034 	movhi	r2,16384
  8113b8:	10bfffc4 	addi	r2,r2,-1
  8113bc:	1886703a 	and	r3,r3,r2
  8113c0:	e0bffc17 	ldw	r2,-16(fp)
  8113c4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  8113c8:	e0bffb17 	ldw	r2,-20(fp)
  8113cc:	1000051e 	bne	r2,zero,8113e4 <open+0xd0>
  8113d0:	e13ffc17 	ldw	r4,-16(fp)
  8113d4:	08112500 	call	811250 <alt_file_locked>
  8113d8:	e0bffa15 	stw	r2,-24(fp)
  8113dc:	e0bffa17 	ldw	r2,-24(fp)
  8113e0:	10001016 	blt	r2,zero,811424 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  8113e4:	e0bff817 	ldw	r2,-32(fp)
  8113e8:	10800317 	ldw	r2,12(r2)
  8113ec:	10000826 	beq	r2,zero,811410 <open+0xfc>
  8113f0:	e0bff817 	ldw	r2,-32(fp)
  8113f4:	10800317 	ldw	r2,12(r2)
  8113f8:	e1ffff17 	ldw	r7,-4(fp)
  8113fc:	e1bffe17 	ldw	r6,-8(fp)
  811400:	e17ffd17 	ldw	r5,-12(fp)
  811404:	e13ffc17 	ldw	r4,-16(fp)
  811408:	103ee83a 	callr	r2
  81140c:	00000106 	br	811414 <open+0x100>
  811410:	0005883a 	mov	r2,zero
  811414:	e0bffa15 	stw	r2,-24(fp)
  811418:	00000206 	br	811424 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81141c:	00bffb44 	movi	r2,-19
  811420:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  811424:	e0bffa17 	ldw	r2,-24(fp)
  811428:	1000090e 	bge	r2,zero,811450 <open+0x13c>
  {
    alt_release_fd (index);  
  81142c:	e13ff917 	ldw	r4,-28(fp)
  811430:	08115a00 	call	8115a0 <alt_release_fd>
    ALT_ERRNO = -status;
  811434:	08112140 	call	811214 <alt_get_errno>
  811438:	1007883a 	mov	r3,r2
  81143c:	e0bffa17 	ldw	r2,-24(fp)
  811440:	0085c83a 	sub	r2,zero,r2
  811444:	18800015 	stw	r2,0(r3)
    return -1;
  811448:	00bfffc4 	movi	r2,-1
  81144c:	00000106 	br	811454 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  811450:	e0bff917 	ldw	r2,-28(fp)
}
  811454:	e037883a 	mov	sp,fp
  811458:	dfc00117 	ldw	ra,4(sp)
  81145c:	df000017 	ldw	fp,0(sp)
  811460:	dec00204 	addi	sp,sp,8
  811464:	f800283a 	ret

00811468 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811468:	defffe04 	addi	sp,sp,-8
  81146c:	dfc00115 	stw	ra,4(sp)
  811470:	df000015 	stw	fp,0(sp)
  811474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811478:	d0a00b17 	ldw	r2,-32724(gp)
  81147c:	10000326 	beq	r2,zero,81148c <alt_get_errno+0x24>
  811480:	d0a00b17 	ldw	r2,-32724(gp)
  811484:	103ee83a 	callr	r2
  811488:	00000106 	br	811490 <alt_get_errno+0x28>
  81148c:	d0a7a404 	addi	r2,gp,-24944
}
  811490:	e037883a 	mov	sp,fp
  811494:	dfc00117 	ldw	ra,4(sp)
  811498:	df000017 	ldw	fp,0(sp)
  81149c:	dec00204 	addi	sp,sp,8
  8114a0:	f800283a 	ret

008114a4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  8114a4:	defff904 	addi	sp,sp,-28
  8114a8:	dfc00615 	stw	ra,24(sp)
  8114ac:	df000515 	stw	fp,20(sp)
  8114b0:	df000504 	addi	fp,sp,20
  8114b4:	e13ffd15 	stw	r4,-12(fp)
  8114b8:	e17ffe15 	stw	r5,-8(fp)
  8114bc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8114c0:	e0bffd17 	ldw	r2,-12(fp)
  8114c4:	10000616 	blt	r2,zero,8114e0 <read+0x3c>
  8114c8:	e0bffd17 	ldw	r2,-12(fp)
  8114cc:	10c00324 	muli	r3,r2,12
  8114d0:	00802074 	movhi	r2,129
  8114d4:	10974804 	addi	r2,r2,23840
  8114d8:	1885883a 	add	r2,r3,r2
  8114dc:	00000106 	br	8114e4 <read+0x40>
  8114e0:	0005883a 	mov	r2,zero
  8114e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8114e8:	e0bffb17 	ldw	r2,-20(fp)
  8114ec:	10002226 	beq	r2,zero,811578 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  8114f0:	e0bffb17 	ldw	r2,-20(fp)
  8114f4:	10800217 	ldw	r2,8(r2)
  8114f8:	108000cc 	andi	r2,r2,3
  8114fc:	10800060 	cmpeqi	r2,r2,1
  811500:	1000181e 	bne	r2,zero,811564 <read+0xc0>
        (fd->dev->read))
  811504:	e0bffb17 	ldw	r2,-20(fp)
  811508:	10800017 	ldw	r2,0(r2)
  81150c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  811510:	10001426 	beq	r2,zero,811564 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  811514:	e0bffb17 	ldw	r2,-20(fp)
  811518:	10800017 	ldw	r2,0(r2)
  81151c:	10800517 	ldw	r2,20(r2)
  811520:	e0ffff17 	ldw	r3,-4(fp)
  811524:	180d883a 	mov	r6,r3
  811528:	e17ffe17 	ldw	r5,-8(fp)
  81152c:	e13ffb17 	ldw	r4,-20(fp)
  811530:	103ee83a 	callr	r2
  811534:	e0bffc15 	stw	r2,-16(fp)
  811538:	e0bffc17 	ldw	r2,-16(fp)
  81153c:	1000070e 	bge	r2,zero,81155c <read+0xb8>
        {
          ALT_ERRNO = -rval;
  811540:	08114680 	call	811468 <alt_get_errno>
  811544:	1007883a 	mov	r3,r2
  811548:	e0bffc17 	ldw	r2,-16(fp)
  81154c:	0085c83a 	sub	r2,zero,r2
  811550:	18800015 	stw	r2,0(r3)
          return -1;
  811554:	00bfffc4 	movi	r2,-1
  811558:	00000c06 	br	81158c <read+0xe8>
        }
        return rval;
  81155c:	e0bffc17 	ldw	r2,-16(fp)
  811560:	00000a06 	br	81158c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  811564:	08114680 	call	811468 <alt_get_errno>
  811568:	1007883a 	mov	r3,r2
  81156c:	00800344 	movi	r2,13
  811570:	18800015 	stw	r2,0(r3)
  811574:	00000406 	br	811588 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  811578:	08114680 	call	811468 <alt_get_errno>
  81157c:	1007883a 	mov	r3,r2
  811580:	00801444 	movi	r2,81
  811584:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811588:	00bfffc4 	movi	r2,-1
}
  81158c:	e037883a 	mov	sp,fp
  811590:	dfc00117 	ldw	ra,4(sp)
  811594:	df000017 	ldw	fp,0(sp)
  811598:	dec00204 	addi	sp,sp,8
  81159c:	f800283a 	ret

008115a0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  8115a0:	defffe04 	addi	sp,sp,-8
  8115a4:	df000115 	stw	fp,4(sp)
  8115a8:	df000104 	addi	fp,sp,4
  8115ac:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  8115b0:	e0bfff17 	ldw	r2,-4(fp)
  8115b4:	108000d0 	cmplti	r2,r2,3
  8115b8:	10000d1e 	bne	r2,zero,8115f0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  8115bc:	00802074 	movhi	r2,129
  8115c0:	10974804 	addi	r2,r2,23840
  8115c4:	e0ffff17 	ldw	r3,-4(fp)
  8115c8:	18c00324 	muli	r3,r3,12
  8115cc:	10c5883a 	add	r2,r2,r3
  8115d0:	10800204 	addi	r2,r2,8
  8115d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  8115d8:	00802074 	movhi	r2,129
  8115dc:	10974804 	addi	r2,r2,23840
  8115e0:	e0ffff17 	ldw	r3,-4(fp)
  8115e4:	18c00324 	muli	r3,r3,12
  8115e8:	10c5883a 	add	r2,r2,r3
  8115ec:	10000015 	stw	zero,0(r2)
  }
}
  8115f0:	0001883a 	nop
  8115f4:	e037883a 	mov	sp,fp
  8115f8:	df000017 	ldw	fp,0(sp)
  8115fc:	dec00104 	addi	sp,sp,4
  811600:	f800283a 	ret

00811604 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  811604:	defff904 	addi	sp,sp,-28
  811608:	df000615 	stw	fp,24(sp)
  81160c:	df000604 	addi	fp,sp,24
  811610:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811614:	0005303a 	rdctl	r2,status
  811618:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81161c:	e0fffe17 	ldw	r3,-8(fp)
  811620:	00bfff84 	movi	r2,-2
  811624:	1884703a 	and	r2,r3,r2
  811628:	1001703a 	wrctl	status,r2
  
  return context;
  81162c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  811630:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  811634:	d0a00d17 	ldw	r2,-32716(gp)
  811638:	10c000c4 	addi	r3,r2,3
  81163c:	00bfff04 	movi	r2,-4
  811640:	1884703a 	and	r2,r3,r2
  811644:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  811648:	d0e00d17 	ldw	r3,-32716(gp)
  81164c:	e0bfff17 	ldw	r2,-4(fp)
  811650:	1887883a 	add	r3,r3,r2
  811654:	00804034 	movhi	r2,256
  811658:	10800004 	addi	r2,r2,0
  81165c:	10c0062e 	bgeu	r2,r3,811678 <sbrk+0x74>
  811660:	e0bffb17 	ldw	r2,-20(fp)
  811664:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811668:	e0bffa17 	ldw	r2,-24(fp)
  81166c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  811670:	00bfffc4 	movi	r2,-1
  811674:	00000b06 	br	8116a4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  811678:	d0a00d17 	ldw	r2,-32716(gp)
  81167c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  811680:	d0e00d17 	ldw	r3,-32716(gp)
  811684:	e0bfff17 	ldw	r2,-4(fp)
  811688:	1885883a 	add	r2,r3,r2
  81168c:	d0a00d15 	stw	r2,-32716(gp)
  811690:	e0bffb17 	ldw	r2,-20(fp)
  811694:	e0bffc15 	stw	r2,-16(fp)
  811698:	e0bffc17 	ldw	r2,-16(fp)
  81169c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  8116a0:	e0bffd17 	ldw	r2,-12(fp)
} 
  8116a4:	e037883a 	mov	sp,fp
  8116a8:	df000017 	ldw	fp,0(sp)
  8116ac:	dec00104 	addi	sp,sp,4
  8116b0:	f800283a 	ret

008116b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  8116b4:	defffa04 	addi	sp,sp,-24
  8116b8:	df000515 	stw	fp,20(sp)
  8116bc:	df000504 	addi	fp,sp,20
  8116c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8116c4:	0005303a 	rdctl	r2,status
  8116c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8116cc:	e0fffc17 	ldw	r3,-16(fp)
  8116d0:	00bfff84 	movi	r2,-2
  8116d4:	1884703a 	and	r2,r3,r2
  8116d8:	1001703a 	wrctl	status,r2
  
  return context;
  8116dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8116e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  8116e4:	e0bfff17 	ldw	r2,-4(fp)
  8116e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8116ec:	e0bffd17 	ldw	r2,-12(fp)
  8116f0:	10800017 	ldw	r2,0(r2)
  8116f4:	e0fffd17 	ldw	r3,-12(fp)
  8116f8:	18c00117 	ldw	r3,4(r3)
  8116fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  811700:	e0bffd17 	ldw	r2,-12(fp)
  811704:	10800117 	ldw	r2,4(r2)
  811708:	e0fffd17 	ldw	r3,-12(fp)
  81170c:	18c00017 	ldw	r3,0(r3)
  811710:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  811714:	e0bffd17 	ldw	r2,-12(fp)
  811718:	e0fffd17 	ldw	r3,-12(fp)
  81171c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  811720:	e0bffd17 	ldw	r2,-12(fp)
  811724:	e0fffd17 	ldw	r3,-12(fp)
  811728:	10c00015 	stw	r3,0(r2)
  81172c:	e0bffb17 	ldw	r2,-20(fp)
  811730:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811734:	e0bffe17 	ldw	r2,-8(fp)
  811738:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  81173c:	0001883a 	nop
  811740:	e037883a 	mov	sp,fp
  811744:	df000017 	ldw	fp,0(sp)
  811748:	dec00104 	addi	sp,sp,4
  81174c:	f800283a 	ret

00811750 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  811750:	defffb04 	addi	sp,sp,-20
  811754:	dfc00415 	stw	ra,16(sp)
  811758:	df000315 	stw	fp,12(sp)
  81175c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  811760:	d0a00e17 	ldw	r2,-32712(gp)
  811764:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  811768:	d0a7b017 	ldw	r2,-24896(gp)
  81176c:	10800044 	addi	r2,r2,1
  811770:	d0a7b015 	stw	r2,-24896(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811774:	00002e06 	br	811830 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  811778:	e0bffd17 	ldw	r2,-12(fp)
  81177c:	10800017 	ldw	r2,0(r2)
  811780:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  811784:	e0bffd17 	ldw	r2,-12(fp)
  811788:	10800403 	ldbu	r2,16(r2)
  81178c:	10803fcc 	andi	r2,r2,255
  811790:	10000426 	beq	r2,zero,8117a4 <alt_tick+0x54>
  811794:	d0a7b017 	ldw	r2,-24896(gp)
  811798:	1000021e 	bne	r2,zero,8117a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  81179c:	e0bffd17 	ldw	r2,-12(fp)
  8117a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  8117a4:	e0bffd17 	ldw	r2,-12(fp)
  8117a8:	10800217 	ldw	r2,8(r2)
  8117ac:	d0e7b017 	ldw	r3,-24896(gp)
  8117b0:	18801d36 	bltu	r3,r2,811828 <alt_tick+0xd8>
  8117b4:	e0bffd17 	ldw	r2,-12(fp)
  8117b8:	10800403 	ldbu	r2,16(r2)
  8117bc:	10803fcc 	andi	r2,r2,255
  8117c0:	1000191e 	bne	r2,zero,811828 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  8117c4:	e0bffd17 	ldw	r2,-12(fp)
  8117c8:	10800317 	ldw	r2,12(r2)
  8117cc:	e0fffd17 	ldw	r3,-12(fp)
  8117d0:	18c00517 	ldw	r3,20(r3)
  8117d4:	1809883a 	mov	r4,r3
  8117d8:	103ee83a 	callr	r2
  8117dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8117e0:	e0bfff17 	ldw	r2,-4(fp)
  8117e4:	1000031e 	bne	r2,zero,8117f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  8117e8:	e13ffd17 	ldw	r4,-12(fp)
  8117ec:	08116b40 	call	8116b4 <alt_alarm_stop>
  8117f0:	00000d06 	br	811828 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  8117f4:	e0bffd17 	ldw	r2,-12(fp)
  8117f8:	10c00217 	ldw	r3,8(r2)
  8117fc:	e0bfff17 	ldw	r2,-4(fp)
  811800:	1887883a 	add	r3,r3,r2
  811804:	e0bffd17 	ldw	r2,-12(fp)
  811808:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  81180c:	e0bffd17 	ldw	r2,-12(fp)
  811810:	10c00217 	ldw	r3,8(r2)
  811814:	d0a7b017 	ldw	r2,-24896(gp)
  811818:	1880032e 	bgeu	r3,r2,811828 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  81181c:	e0bffd17 	ldw	r2,-12(fp)
  811820:	00c00044 	movi	r3,1
  811824:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  811828:	e0bffe17 	ldw	r2,-8(fp)
  81182c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  811830:	e0fffd17 	ldw	r3,-12(fp)
  811834:	d0a00e04 	addi	r2,gp,-32712
  811838:	18bfcf1e 	bne	r3,r2,811778 <__alt_mem_onchip_mem+0xff791778>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81183c:	0001883a 	nop
}
  811840:	0001883a 	nop
  811844:	e037883a 	mov	sp,fp
  811848:	dfc00117 	ldw	ra,4(sp)
  81184c:	df000017 	ldw	fp,0(sp)
  811850:	dec00204 	addi	sp,sp,8
  811854:	f800283a 	ret

00811858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  811858:	defffe04 	addi	sp,sp,-8
  81185c:	dfc00115 	stw	ra,4(sp)
  811860:	df000015 	stw	fp,0(sp)
  811864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  811868:	d0a00b17 	ldw	r2,-32724(gp)
  81186c:	10000326 	beq	r2,zero,81187c <alt_get_errno+0x24>
  811870:	d0a00b17 	ldw	r2,-32724(gp)
  811874:	103ee83a 	callr	r2
  811878:	00000106 	br	811880 <alt_get_errno+0x28>
  81187c:	d0a7a404 	addi	r2,gp,-24944
}
  811880:	e037883a 	mov	sp,fp
  811884:	dfc00117 	ldw	ra,4(sp)
  811888:	df000017 	ldw	fp,0(sp)
  81188c:	dec00204 	addi	sp,sp,8
  811890:	f800283a 	ret

00811894 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  811894:	defff904 	addi	sp,sp,-28
  811898:	dfc00615 	stw	ra,24(sp)
  81189c:	df000515 	stw	fp,20(sp)
  8118a0:	df000504 	addi	fp,sp,20
  8118a4:	e13ffd15 	stw	r4,-12(fp)
  8118a8:	e17ffe15 	stw	r5,-8(fp)
  8118ac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  8118b0:	e0bffd17 	ldw	r2,-12(fp)
  8118b4:	10000616 	blt	r2,zero,8118d0 <write+0x3c>
  8118b8:	e0bffd17 	ldw	r2,-12(fp)
  8118bc:	10c00324 	muli	r3,r2,12
  8118c0:	00802074 	movhi	r2,129
  8118c4:	10974804 	addi	r2,r2,23840
  8118c8:	1885883a 	add	r2,r3,r2
  8118cc:	00000106 	br	8118d4 <write+0x40>
  8118d0:	0005883a 	mov	r2,zero
  8118d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  8118d8:	e0bffb17 	ldw	r2,-20(fp)
  8118dc:	10002126 	beq	r2,zero,811964 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  8118e0:	e0bffb17 	ldw	r2,-20(fp)
  8118e4:	10800217 	ldw	r2,8(r2)
  8118e8:	108000cc 	andi	r2,r2,3
  8118ec:	10001826 	beq	r2,zero,811950 <write+0xbc>
  8118f0:	e0bffb17 	ldw	r2,-20(fp)
  8118f4:	10800017 	ldw	r2,0(r2)
  8118f8:	10800617 	ldw	r2,24(r2)
  8118fc:	10001426 	beq	r2,zero,811950 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  811900:	e0bffb17 	ldw	r2,-20(fp)
  811904:	10800017 	ldw	r2,0(r2)
  811908:	10800617 	ldw	r2,24(r2)
  81190c:	e0ffff17 	ldw	r3,-4(fp)
  811910:	180d883a 	mov	r6,r3
  811914:	e17ffe17 	ldw	r5,-8(fp)
  811918:	e13ffb17 	ldw	r4,-20(fp)
  81191c:	103ee83a 	callr	r2
  811920:	e0bffc15 	stw	r2,-16(fp)
  811924:	e0bffc17 	ldw	r2,-16(fp)
  811928:	1000070e 	bge	r2,zero,811948 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  81192c:	08118580 	call	811858 <alt_get_errno>
  811930:	1007883a 	mov	r3,r2
  811934:	e0bffc17 	ldw	r2,-16(fp)
  811938:	0085c83a 	sub	r2,zero,r2
  81193c:	18800015 	stw	r2,0(r3)
        return -1;
  811940:	00bfffc4 	movi	r2,-1
  811944:	00000c06 	br	811978 <write+0xe4>
      }
      return rval;
  811948:	e0bffc17 	ldw	r2,-16(fp)
  81194c:	00000a06 	br	811978 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  811950:	08118580 	call	811858 <alt_get_errno>
  811954:	1007883a 	mov	r3,r2
  811958:	00800344 	movi	r2,13
  81195c:	18800015 	stw	r2,0(r3)
  811960:	00000406 	br	811974 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  811964:	08118580 	call	811858 <alt_get_errno>
  811968:	1007883a 	mov	r3,r2
  81196c:	00801444 	movi	r2,81
  811970:	18800015 	stw	r2,0(r3)
  }
  return -1;
  811974:	00bfffc4 	movi	r2,-1
}
  811978:	e037883a 	mov	sp,fp
  81197c:	dfc00117 	ldw	ra,4(sp)
  811980:	df000017 	ldw	fp,0(sp)
  811984:	dec00204 	addi	sp,sp,8
  811988:	f800283a 	ret

0081198c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  81198c:	defffd04 	addi	sp,sp,-12
  811990:	dfc00215 	stw	ra,8(sp)
  811994:	df000115 	stw	fp,4(sp)
  811998:	df000104 	addi	fp,sp,4
  81199c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  8119a0:	d1600804 	addi	r5,gp,-32736
  8119a4:	e13fff17 	ldw	r4,-4(fp)
  8119a8:	0813f540 	call	813f54 <alt_dev_llist_insert>
}
  8119ac:	e037883a 	mov	sp,fp
  8119b0:	dfc00117 	ldw	ra,4(sp)
  8119b4:	df000017 	ldw	fp,0(sp)
  8119b8:	dec00204 	addi	sp,sp,8
  8119bc:	f800283a 	ret

008119c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8119c0:	defffd04 	addi	sp,sp,-12
  8119c4:	dfc00215 	stw	ra,8(sp)
  8119c8:	df000115 	stw	fp,4(sp)
  8119cc:	df000104 	addi	fp,sp,4
  8119d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
  8119d4:	08147380 	call	814738 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8119d8:	00800044 	movi	r2,1
  8119dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8119e0:	0001883a 	nop
  8119e4:	e037883a 	mov	sp,fp
  8119e8:	dfc00117 	ldw	ra,4(sp)
  8119ec:	df000017 	ldw	fp,0(sp)
  8119f0:	dec00204 	addi	sp,sp,8
  8119f4:	f800283a 	ret

008119f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8119f8:	defffe04 	addi	sp,sp,-8
  8119fc:	dfc00115 	stw	ra,4(sp)
  811a00:	df000015 	stw	fp,0(sp)
  811a04:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER1, timer1);
  811a08:	01c0fa04 	movi	r7,1000
  811a0c:	01800084 	movi	r6,2
  811a10:	000b883a 	mov	r5,zero
  811a14:	01004434 	movhi	r4,272
  811a18:	21040804 	addi	r4,r4,4128
  811a1c:	08134500 	call	813450 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER2, timer2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  811a20:	01800044 	movi	r6,1
  811a24:	000b883a 	mov	r5,zero
  811a28:	01002074 	movhi	r4,129
  811a2c:	2117b204 	addi	r4,r4,24264
  811a30:	0811bf80 	call	811bf8 <altera_avalon_jtag_uart_init>
  811a34:	01002074 	movhi	r4,129
  811a38:	2117a804 	addi	r4,r4,24224
  811a3c:	081198c0 	call	81198c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD, lcd);
  811a40:	01002074 	movhi	r4,129
  811a44:	211bca04 	addi	r4,r4,28456
  811a48:	08132440 	call	813244 <altera_avalon_lcd_16207_init>
  811a4c:	01002074 	movhi	r4,129
  811a50:	211bc004 	addi	r4,r4,28416
  811a54:	081198c0 	call	81198c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( CPU_SYSID, cpu_sysid);
  811a58:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  811a5c:	000d883a 	mov	r6,zero
  811a60:	000b883a 	mov	r5,zero
  811a64:	01002074 	movhi	r4,129
  811a68:	211c1204 	addi	r4,r4,28744
  811a6c:	08135dc0 	call	8135dc <altera_avalon_uart_init>
  811a70:	01002074 	movhi	r4,129
  811a74:	211c0804 	addi	r4,r4,28704
  811a78:	081198c0 	call	81198c <alt_dev_reg>
}
  811a7c:	0001883a 	nop
  811a80:	e037883a 	mov	sp,fp
  811a84:	dfc00117 	ldw	ra,4(sp)
  811a88:	df000017 	ldw	fp,0(sp)
  811a8c:	dec00204 	addi	sp,sp,8
  811a90:	f800283a 	ret

00811a94 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  811a94:	defffa04 	addi	sp,sp,-24
  811a98:	dfc00515 	stw	ra,20(sp)
  811a9c:	df000415 	stw	fp,16(sp)
  811aa0:	df000404 	addi	fp,sp,16
  811aa4:	e13ffd15 	stw	r4,-12(fp)
  811aa8:	e17ffe15 	stw	r5,-8(fp)
  811aac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811ab0:	e0bffd17 	ldw	r2,-12(fp)
  811ab4:	10800017 	ldw	r2,0(r2)
  811ab8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  811abc:	e0bffc17 	ldw	r2,-16(fp)
  811ac0:	10c00a04 	addi	r3,r2,40
  811ac4:	e0bffd17 	ldw	r2,-12(fp)
  811ac8:	10800217 	ldw	r2,8(r2)
  811acc:	100f883a 	mov	r7,r2
  811ad0:	e1bfff17 	ldw	r6,-4(fp)
  811ad4:	e17ffe17 	ldw	r5,-8(fp)
  811ad8:	1809883a 	mov	r4,r3
  811adc:	08120bc0 	call	8120bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  811ae0:	e037883a 	mov	sp,fp
  811ae4:	dfc00117 	ldw	ra,4(sp)
  811ae8:	df000017 	ldw	fp,0(sp)
  811aec:	dec00204 	addi	sp,sp,8
  811af0:	f800283a 	ret

00811af4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  811af4:	defffa04 	addi	sp,sp,-24
  811af8:	dfc00515 	stw	ra,20(sp)
  811afc:	df000415 	stw	fp,16(sp)
  811b00:	df000404 	addi	fp,sp,16
  811b04:	e13ffd15 	stw	r4,-12(fp)
  811b08:	e17ffe15 	stw	r5,-8(fp)
  811b0c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811b10:	e0bffd17 	ldw	r2,-12(fp)
  811b14:	10800017 	ldw	r2,0(r2)
  811b18:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  811b1c:	e0bffc17 	ldw	r2,-16(fp)
  811b20:	10c00a04 	addi	r3,r2,40
  811b24:	e0bffd17 	ldw	r2,-12(fp)
  811b28:	10800217 	ldw	r2,8(r2)
  811b2c:	100f883a 	mov	r7,r2
  811b30:	e1bfff17 	ldw	r6,-4(fp)
  811b34:	e17ffe17 	ldw	r5,-8(fp)
  811b38:	1809883a 	mov	r4,r3
  811b3c:	08122d80 	call	8122d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  811b40:	e037883a 	mov	sp,fp
  811b44:	dfc00117 	ldw	ra,4(sp)
  811b48:	df000017 	ldw	fp,0(sp)
  811b4c:	dec00204 	addi	sp,sp,8
  811b50:	f800283a 	ret

00811b54 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  811b54:	defffc04 	addi	sp,sp,-16
  811b58:	dfc00315 	stw	ra,12(sp)
  811b5c:	df000215 	stw	fp,8(sp)
  811b60:	df000204 	addi	fp,sp,8
  811b64:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  811b68:	e0bfff17 	ldw	r2,-4(fp)
  811b6c:	10800017 	ldw	r2,0(r2)
  811b70:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  811b74:	e0bffe17 	ldw	r2,-8(fp)
  811b78:	10c00a04 	addi	r3,r2,40
  811b7c:	e0bfff17 	ldw	r2,-4(fp)
  811b80:	10800217 	ldw	r2,8(r2)
  811b84:	100b883a 	mov	r5,r2
  811b88:	1809883a 	mov	r4,r3
  811b8c:	0811f640 	call	811f64 <altera_avalon_jtag_uart_close>
}
  811b90:	e037883a 	mov	sp,fp
  811b94:	dfc00117 	ldw	ra,4(sp)
  811b98:	df000017 	ldw	fp,0(sp)
  811b9c:	dec00204 	addi	sp,sp,8
  811ba0:	f800283a 	ret

00811ba4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  811ba4:	defffa04 	addi	sp,sp,-24
  811ba8:	dfc00515 	stw	ra,20(sp)
  811bac:	df000415 	stw	fp,16(sp)
  811bb0:	df000404 	addi	fp,sp,16
  811bb4:	e13ffd15 	stw	r4,-12(fp)
  811bb8:	e17ffe15 	stw	r5,-8(fp)
  811bbc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  811bc0:	e0bffd17 	ldw	r2,-12(fp)
  811bc4:	10800017 	ldw	r2,0(r2)
  811bc8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  811bcc:	e0bffc17 	ldw	r2,-16(fp)
  811bd0:	10800a04 	addi	r2,r2,40
  811bd4:	e1bfff17 	ldw	r6,-4(fp)
  811bd8:	e17ffe17 	ldw	r5,-8(fp)
  811bdc:	1009883a 	mov	r4,r2
  811be0:	0811fcc0 	call	811fcc <altera_avalon_jtag_uart_ioctl>
}
  811be4:	e037883a 	mov	sp,fp
  811be8:	dfc00117 	ldw	ra,4(sp)
  811bec:	df000017 	ldw	fp,0(sp)
  811bf0:	dec00204 	addi	sp,sp,8
  811bf4:	f800283a 	ret

00811bf8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  811bf8:	defffa04 	addi	sp,sp,-24
  811bfc:	dfc00515 	stw	ra,20(sp)
  811c00:	df000415 	stw	fp,16(sp)
  811c04:	df000404 	addi	fp,sp,16
  811c08:	e13ffd15 	stw	r4,-12(fp)
  811c0c:	e17ffe15 	stw	r5,-8(fp)
  811c10:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811c14:	e0bffd17 	ldw	r2,-12(fp)
  811c18:	00c00044 	movi	r3,1
  811c1c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  811c20:	e0bffd17 	ldw	r2,-12(fp)
  811c24:	10800017 	ldw	r2,0(r2)
  811c28:	10800104 	addi	r2,r2,4
  811c2c:	1007883a 	mov	r3,r2
  811c30:	e0bffd17 	ldw	r2,-12(fp)
  811c34:	10800817 	ldw	r2,32(r2)
  811c38:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  811c3c:	e0bffe17 	ldw	r2,-8(fp)
  811c40:	e0ffff17 	ldw	r3,-4(fp)
  811c44:	d8000015 	stw	zero,0(sp)
  811c48:	e1fffd17 	ldw	r7,-12(fp)
  811c4c:	01802074 	movhi	r6,129
  811c50:	31872e04 	addi	r6,r6,7352
  811c54:	180b883a 	mov	r5,r3
  811c58:	1009883a 	mov	r4,r2
  811c5c:	08143280 	call	814328 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  811c60:	e0bffd17 	ldw	r2,-12(fp)
  811c64:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  811c68:	e0bffd17 	ldw	r2,-12(fp)
  811c6c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  811c70:	d0e7af17 	ldw	r3,-24900(gp)
  811c74:	e1fffd17 	ldw	r7,-12(fp)
  811c78:	01802074 	movhi	r6,129
  811c7c:	3187b104 	addi	r6,r6,7876
  811c80:	180b883a 	mov	r5,r3
  811c84:	1009883a 	mov	r4,r2
  811c88:	0813da40 	call	813da4 <alt_alarm_start>
  811c8c:	1000040e 	bge	r2,zero,811ca0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  811c90:	e0fffd17 	ldw	r3,-12(fp)
  811c94:	00a00034 	movhi	r2,32768
  811c98:	10bfffc4 	addi	r2,r2,-1
  811c9c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  811ca0:	0001883a 	nop
  811ca4:	e037883a 	mov	sp,fp
  811ca8:	dfc00117 	ldw	ra,4(sp)
  811cac:	df000017 	ldw	fp,0(sp)
  811cb0:	dec00204 	addi	sp,sp,8
  811cb4:	f800283a 	ret

00811cb8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  811cb8:	defff804 	addi	sp,sp,-32
  811cbc:	df000715 	stw	fp,28(sp)
  811cc0:	df000704 	addi	fp,sp,28
  811cc4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  811cc8:	e0bfff17 	ldw	r2,-4(fp)
  811ccc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  811cd0:	e0bffb17 	ldw	r2,-20(fp)
  811cd4:	10800017 	ldw	r2,0(r2)
  811cd8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811cdc:	e0bffc17 	ldw	r2,-16(fp)
  811ce0:	10800104 	addi	r2,r2,4
  811ce4:	10800037 	ldwio	r2,0(r2)
  811ce8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  811cec:	e0bffd17 	ldw	r2,-12(fp)
  811cf0:	1080c00c 	andi	r2,r2,768
  811cf4:	10006d26 	beq	r2,zero,811eac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  811cf8:	e0bffd17 	ldw	r2,-12(fp)
  811cfc:	1080400c 	andi	r2,r2,256
  811d00:	10003526 	beq	r2,zero,811dd8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  811d04:	00800074 	movhi	r2,1
  811d08:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811d0c:	e0bffb17 	ldw	r2,-20(fp)
  811d10:	10800a17 	ldw	r2,40(r2)
  811d14:	10800044 	addi	r2,r2,1
  811d18:	1081ffcc 	andi	r2,r2,2047
  811d1c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  811d20:	e0bffb17 	ldw	r2,-20(fp)
  811d24:	10c00b17 	ldw	r3,44(r2)
  811d28:	e0bffe17 	ldw	r2,-8(fp)
  811d2c:	18801526 	beq	r3,r2,811d84 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  811d30:	e0bffc17 	ldw	r2,-16(fp)
  811d34:	10800037 	ldwio	r2,0(r2)
  811d38:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  811d3c:	e0bff917 	ldw	r2,-28(fp)
  811d40:	10a0000c 	andi	r2,r2,32768
  811d44:	10001126 	beq	r2,zero,811d8c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  811d48:	e0bffb17 	ldw	r2,-20(fp)
  811d4c:	10800a17 	ldw	r2,40(r2)
  811d50:	e0fff917 	ldw	r3,-28(fp)
  811d54:	1809883a 	mov	r4,r3
  811d58:	e0fffb17 	ldw	r3,-20(fp)
  811d5c:	1885883a 	add	r2,r3,r2
  811d60:	10800e04 	addi	r2,r2,56
  811d64:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811d68:	e0bffb17 	ldw	r2,-20(fp)
  811d6c:	10800a17 	ldw	r2,40(r2)
  811d70:	10800044 	addi	r2,r2,1
  811d74:	10c1ffcc 	andi	r3,r2,2047
  811d78:	e0bffb17 	ldw	r2,-20(fp)
  811d7c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  811d80:	003fe206 	br	811d0c <__alt_mem_onchip_mem+0xff791d0c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  811d84:	0001883a 	nop
  811d88:	00000106 	br	811d90 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  811d8c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  811d90:	e0bff917 	ldw	r2,-28(fp)
  811d94:	10bfffec 	andhi	r2,r2,65535
  811d98:	10000f26 	beq	r2,zero,811dd8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  811d9c:	e0bffb17 	ldw	r2,-20(fp)
  811da0:	10c00817 	ldw	r3,32(r2)
  811da4:	00bfff84 	movi	r2,-2
  811da8:	1886703a 	and	r3,r3,r2
  811dac:	e0bffb17 	ldw	r2,-20(fp)
  811db0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  811db4:	e0bffc17 	ldw	r2,-16(fp)
  811db8:	10800104 	addi	r2,r2,4
  811dbc:	1007883a 	mov	r3,r2
  811dc0:	e0bffb17 	ldw	r2,-20(fp)
  811dc4:	10800817 	ldw	r2,32(r2)
  811dc8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811dcc:	e0bffc17 	ldw	r2,-16(fp)
  811dd0:	10800104 	addi	r2,r2,4
  811dd4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  811dd8:	e0bffd17 	ldw	r2,-12(fp)
  811ddc:	1080800c 	andi	r2,r2,512
  811de0:	103fbe26 	beq	r2,zero,811cdc <__alt_mem_onchip_mem+0xff791cdc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  811de4:	e0bffd17 	ldw	r2,-12(fp)
  811de8:	1004d43a 	srli	r2,r2,16
  811dec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  811df0:	00001406 	br	811e44 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  811df4:	e0bffc17 	ldw	r2,-16(fp)
  811df8:	e0fffb17 	ldw	r3,-20(fp)
  811dfc:	18c00d17 	ldw	r3,52(r3)
  811e00:	e13ffb17 	ldw	r4,-20(fp)
  811e04:	20c7883a 	add	r3,r4,r3
  811e08:	18c20e04 	addi	r3,r3,2104
  811e0c:	18c00003 	ldbu	r3,0(r3)
  811e10:	18c03fcc 	andi	r3,r3,255
  811e14:	18c0201c 	xori	r3,r3,128
  811e18:	18ffe004 	addi	r3,r3,-128
  811e1c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  811e20:	e0bffb17 	ldw	r2,-20(fp)
  811e24:	10800d17 	ldw	r2,52(r2)
  811e28:	10800044 	addi	r2,r2,1
  811e2c:	10c1ffcc 	andi	r3,r2,2047
  811e30:	e0bffb17 	ldw	r2,-20(fp)
  811e34:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  811e38:	e0bffa17 	ldw	r2,-24(fp)
  811e3c:	10bfffc4 	addi	r2,r2,-1
  811e40:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  811e44:	e0bffa17 	ldw	r2,-24(fp)
  811e48:	10000526 	beq	r2,zero,811e60 <altera_avalon_jtag_uart_irq+0x1a8>
  811e4c:	e0bffb17 	ldw	r2,-20(fp)
  811e50:	10c00d17 	ldw	r3,52(r2)
  811e54:	e0bffb17 	ldw	r2,-20(fp)
  811e58:	10800c17 	ldw	r2,48(r2)
  811e5c:	18bfe51e 	bne	r3,r2,811df4 <__alt_mem_onchip_mem+0xff791df4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  811e60:	e0bffa17 	ldw	r2,-24(fp)
  811e64:	103f9d26 	beq	r2,zero,811cdc <__alt_mem_onchip_mem+0xff791cdc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  811e68:	e0bffb17 	ldw	r2,-20(fp)
  811e6c:	10c00817 	ldw	r3,32(r2)
  811e70:	00bfff44 	movi	r2,-3
  811e74:	1886703a 	and	r3,r3,r2
  811e78:	e0bffb17 	ldw	r2,-20(fp)
  811e7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  811e80:	e0bffb17 	ldw	r2,-20(fp)
  811e84:	10800017 	ldw	r2,0(r2)
  811e88:	10800104 	addi	r2,r2,4
  811e8c:	1007883a 	mov	r3,r2
  811e90:	e0bffb17 	ldw	r2,-20(fp)
  811e94:	10800817 	ldw	r2,32(r2)
  811e98:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  811e9c:	e0bffc17 	ldw	r2,-16(fp)
  811ea0:	10800104 	addi	r2,r2,4
  811ea4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  811ea8:	003f8c06 	br	811cdc <__alt_mem_onchip_mem+0xff791cdc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  811eac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  811eb0:	0001883a 	nop
  811eb4:	e037883a 	mov	sp,fp
  811eb8:	df000017 	ldw	fp,0(sp)
  811ebc:	dec00104 	addi	sp,sp,4
  811ec0:	f800283a 	ret

00811ec4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  811ec4:	defff804 	addi	sp,sp,-32
  811ec8:	df000715 	stw	fp,28(sp)
  811ecc:	df000704 	addi	fp,sp,28
  811ed0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  811ed4:	e0bffb17 	ldw	r2,-20(fp)
  811ed8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  811edc:	e0bff917 	ldw	r2,-28(fp)
  811ee0:	10800017 	ldw	r2,0(r2)
  811ee4:	10800104 	addi	r2,r2,4
  811ee8:	10800037 	ldwio	r2,0(r2)
  811eec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  811ef0:	e0bffa17 	ldw	r2,-24(fp)
  811ef4:	1081000c 	andi	r2,r2,1024
  811ef8:	10000b26 	beq	r2,zero,811f28 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  811efc:	e0bff917 	ldw	r2,-28(fp)
  811f00:	10800017 	ldw	r2,0(r2)
  811f04:	10800104 	addi	r2,r2,4
  811f08:	1007883a 	mov	r3,r2
  811f0c:	e0bff917 	ldw	r2,-28(fp)
  811f10:	10800817 	ldw	r2,32(r2)
  811f14:	10810014 	ori	r2,r2,1024
  811f18:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  811f1c:	e0bff917 	ldw	r2,-28(fp)
  811f20:	10000915 	stw	zero,36(r2)
  811f24:	00000a06 	br	811f50 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  811f28:	e0bff917 	ldw	r2,-28(fp)
  811f2c:	10c00917 	ldw	r3,36(r2)
  811f30:	00a00034 	movhi	r2,32768
  811f34:	10bfff04 	addi	r2,r2,-4
  811f38:	10c00536 	bltu	r2,r3,811f50 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  811f3c:	e0bff917 	ldw	r2,-28(fp)
  811f40:	10800917 	ldw	r2,36(r2)
  811f44:	10c00044 	addi	r3,r2,1
  811f48:	e0bff917 	ldw	r2,-28(fp)
  811f4c:	10c00915 	stw	r3,36(r2)
  811f50:	d0a7af17 	ldw	r2,-24900(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  811f54:	e037883a 	mov	sp,fp
  811f58:	df000017 	ldw	fp,0(sp)
  811f5c:	dec00104 	addi	sp,sp,4
  811f60:	f800283a 	ret

00811f64 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  811f64:	defffd04 	addi	sp,sp,-12
  811f68:	df000215 	stw	fp,8(sp)
  811f6c:	df000204 	addi	fp,sp,8
  811f70:	e13ffe15 	stw	r4,-8(fp)
  811f74:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811f78:	00000506 	br	811f90 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  811f7c:	e0bfff17 	ldw	r2,-4(fp)
  811f80:	1090000c 	andi	r2,r2,16384
  811f84:	10000226 	beq	r2,zero,811f90 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  811f88:	00bffd44 	movi	r2,-11
  811f8c:	00000b06 	br	811fbc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  811f90:	e0bffe17 	ldw	r2,-8(fp)
  811f94:	10c00d17 	ldw	r3,52(r2)
  811f98:	e0bffe17 	ldw	r2,-8(fp)
  811f9c:	10800c17 	ldw	r2,48(r2)
  811fa0:	18800526 	beq	r3,r2,811fb8 <altera_avalon_jtag_uart_close+0x54>
  811fa4:	e0bffe17 	ldw	r2,-8(fp)
  811fa8:	10c00917 	ldw	r3,36(r2)
  811fac:	e0bffe17 	ldw	r2,-8(fp)
  811fb0:	10800117 	ldw	r2,4(r2)
  811fb4:	18bff136 	bltu	r3,r2,811f7c <__alt_mem_onchip_mem+0xff791f7c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  811fb8:	0005883a 	mov	r2,zero
}
  811fbc:	e037883a 	mov	sp,fp
  811fc0:	df000017 	ldw	fp,0(sp)
  811fc4:	dec00104 	addi	sp,sp,4
  811fc8:	f800283a 	ret

00811fcc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  811fcc:	defffa04 	addi	sp,sp,-24
  811fd0:	df000515 	stw	fp,20(sp)
  811fd4:	df000504 	addi	fp,sp,20
  811fd8:	e13ffd15 	stw	r4,-12(fp)
  811fdc:	e17ffe15 	stw	r5,-8(fp)
  811fe0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  811fe4:	00bff9c4 	movi	r2,-25
  811fe8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  811fec:	e0bffe17 	ldw	r2,-8(fp)
  811ff0:	10da8060 	cmpeqi	r3,r2,27137
  811ff4:	1800031e 	bne	r3,zero,812004 <altera_avalon_jtag_uart_ioctl+0x38>
  811ff8:	109a80a0 	cmpeqi	r2,r2,27138
  811ffc:	1000181e 	bne	r2,zero,812060 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  812000:	00002906 	br	8120a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  812004:	e0bffd17 	ldw	r2,-12(fp)
  812008:	10c00117 	ldw	r3,4(r2)
  81200c:	00a00034 	movhi	r2,32768
  812010:	10bfffc4 	addi	r2,r2,-1
  812014:	18802126 	beq	r3,r2,81209c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  812018:	e0bfff17 	ldw	r2,-4(fp)
  81201c:	10800017 	ldw	r2,0(r2)
  812020:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  812024:	e0bffc17 	ldw	r2,-16(fp)
  812028:	10800090 	cmplti	r2,r2,2
  81202c:	1000061e 	bne	r2,zero,812048 <altera_avalon_jtag_uart_ioctl+0x7c>
  812030:	e0fffc17 	ldw	r3,-16(fp)
  812034:	00a00034 	movhi	r2,32768
  812038:	10bfffc4 	addi	r2,r2,-1
  81203c:	18800226 	beq	r3,r2,812048 <altera_avalon_jtag_uart_ioctl+0x7c>
  812040:	e0bffc17 	ldw	r2,-16(fp)
  812044:	00000206 	br	812050 <altera_avalon_jtag_uart_ioctl+0x84>
  812048:	00a00034 	movhi	r2,32768
  81204c:	10bfff84 	addi	r2,r2,-2
  812050:	e0fffd17 	ldw	r3,-12(fp)
  812054:	18800115 	stw	r2,4(r3)
      rc = 0;
  812058:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  81205c:	00000f06 	br	81209c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  812060:	e0bffd17 	ldw	r2,-12(fp)
  812064:	10c00117 	ldw	r3,4(r2)
  812068:	00a00034 	movhi	r2,32768
  81206c:	10bfffc4 	addi	r2,r2,-1
  812070:	18800c26 	beq	r3,r2,8120a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  812074:	e0bffd17 	ldw	r2,-12(fp)
  812078:	10c00917 	ldw	r3,36(r2)
  81207c:	e0bffd17 	ldw	r2,-12(fp)
  812080:	10800117 	ldw	r2,4(r2)
  812084:	1885803a 	cmpltu	r2,r3,r2
  812088:	10c03fcc 	andi	r3,r2,255
  81208c:	e0bfff17 	ldw	r2,-4(fp)
  812090:	10c00015 	stw	r3,0(r2)
      rc = 0;
  812094:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  812098:	00000206 	br	8120a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  81209c:	0001883a 	nop
  8120a0:	00000106 	br	8120a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  8120a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
  8120a8:	e0bffb17 	ldw	r2,-20(fp)
}
  8120ac:	e037883a 	mov	sp,fp
  8120b0:	df000017 	ldw	fp,0(sp)
  8120b4:	dec00104 	addi	sp,sp,4
  8120b8:	f800283a 	ret

008120bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  8120bc:	defff304 	addi	sp,sp,-52
  8120c0:	dfc00c15 	stw	ra,48(sp)
  8120c4:	df000b15 	stw	fp,44(sp)
  8120c8:	df000b04 	addi	fp,sp,44
  8120cc:	e13ffc15 	stw	r4,-16(fp)
  8120d0:	e17ffd15 	stw	r5,-12(fp)
  8120d4:	e1bffe15 	stw	r6,-8(fp)
  8120d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  8120dc:	e0bffd17 	ldw	r2,-12(fp)
  8120e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  8120e4:	00004706 	br	812204 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  8120e8:	e0bffc17 	ldw	r2,-16(fp)
  8120ec:	10800a17 	ldw	r2,40(r2)
  8120f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  8120f4:	e0bffc17 	ldw	r2,-16(fp)
  8120f8:	10800b17 	ldw	r2,44(r2)
  8120fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  812100:	e0fff717 	ldw	r3,-36(fp)
  812104:	e0bff817 	ldw	r2,-32(fp)
  812108:	18800536 	bltu	r3,r2,812120 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  81210c:	e0fff717 	ldw	r3,-36(fp)
  812110:	e0bff817 	ldw	r2,-32(fp)
  812114:	1885c83a 	sub	r2,r3,r2
  812118:	e0bff615 	stw	r2,-40(fp)
  81211c:	00000406 	br	812130 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  812120:	00c20004 	movi	r3,2048
  812124:	e0bff817 	ldw	r2,-32(fp)
  812128:	1885c83a 	sub	r2,r3,r2
  81212c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  812130:	e0bff617 	ldw	r2,-40(fp)
  812134:	10001e26 	beq	r2,zero,8121b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  812138:	e0fffe17 	ldw	r3,-8(fp)
  81213c:	e0bff617 	ldw	r2,-40(fp)
  812140:	1880022e 	bgeu	r3,r2,81214c <altera_avalon_jtag_uart_read+0x90>
        n = space;
  812144:	e0bffe17 	ldw	r2,-8(fp)
  812148:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  81214c:	e0bffc17 	ldw	r2,-16(fp)
  812150:	10c00e04 	addi	r3,r2,56
  812154:	e0bff817 	ldw	r2,-32(fp)
  812158:	1885883a 	add	r2,r3,r2
  81215c:	e1bff617 	ldw	r6,-40(fp)
  812160:	100b883a 	mov	r5,r2
  812164:	e13ff517 	ldw	r4,-44(fp)
  812168:	080a0f80 	call	80a0f8 <memcpy>
      ptr   += n;
  81216c:	e0fff517 	ldw	r3,-44(fp)
  812170:	e0bff617 	ldw	r2,-40(fp)
  812174:	1885883a 	add	r2,r3,r2
  812178:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  81217c:	e0fffe17 	ldw	r3,-8(fp)
  812180:	e0bff617 	ldw	r2,-40(fp)
  812184:	1885c83a 	sub	r2,r3,r2
  812188:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81218c:	e0fff817 	ldw	r3,-32(fp)
  812190:	e0bff617 	ldw	r2,-40(fp)
  812194:	1885883a 	add	r2,r3,r2
  812198:	10c1ffcc 	andi	r3,r2,2047
  81219c:	e0bffc17 	ldw	r2,-16(fp)
  8121a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  8121a4:	e0bffe17 	ldw	r2,-8(fp)
  8121a8:	00bfcf16 	blt	zero,r2,8120e8 <__alt_mem_onchip_mem+0xff7920e8>
  8121ac:	00000106 	br	8121b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  8121b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  8121b4:	e0fff517 	ldw	r3,-44(fp)
  8121b8:	e0bffd17 	ldw	r2,-12(fp)
  8121bc:	1880141e 	bne	r3,r2,812210 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  8121c0:	e0bfff17 	ldw	r2,-4(fp)
  8121c4:	1090000c 	andi	r2,r2,16384
  8121c8:	1000131e 	bne	r2,zero,812218 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8121cc:	0001883a 	nop
  8121d0:	e0bffc17 	ldw	r2,-16(fp)
  8121d4:	10c00a17 	ldw	r3,40(r2)
  8121d8:	e0bff717 	ldw	r2,-36(fp)
  8121dc:	1880051e 	bne	r3,r2,8121f4 <altera_avalon_jtag_uart_read+0x138>
  8121e0:	e0bffc17 	ldw	r2,-16(fp)
  8121e4:	10c00917 	ldw	r3,36(r2)
  8121e8:	e0bffc17 	ldw	r2,-16(fp)
  8121ec:	10800117 	ldw	r2,4(r2)
  8121f0:	18bff736 	bltu	r3,r2,8121d0 <__alt_mem_onchip_mem+0xff7921d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  8121f4:	e0bffc17 	ldw	r2,-16(fp)
  8121f8:	10c00a17 	ldw	r3,40(r2)
  8121fc:	e0bff717 	ldw	r2,-36(fp)
  812200:	18800726 	beq	r3,r2,812220 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  812204:	e0bffe17 	ldw	r2,-8(fp)
  812208:	00bfb716 	blt	zero,r2,8120e8 <__alt_mem_onchip_mem+0xff7920e8>
  81220c:	00000506 	br	812224 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  812210:	0001883a 	nop
  812214:	00000306 	br	812224 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  812218:	0001883a 	nop
  81221c:	00000106 	br	812224 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  812220:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  812224:	e0fff517 	ldw	r3,-44(fp)
  812228:	e0bffd17 	ldw	r2,-12(fp)
  81222c:	18801826 	beq	r3,r2,812290 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812230:	0005303a 	rdctl	r2,status
  812234:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812238:	e0fffb17 	ldw	r3,-20(fp)
  81223c:	00bfff84 	movi	r2,-2
  812240:	1884703a 	and	r2,r3,r2
  812244:	1001703a 	wrctl	status,r2
  
  return context;
  812248:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  81224c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812250:	e0bffc17 	ldw	r2,-16(fp)
  812254:	10800817 	ldw	r2,32(r2)
  812258:	10c00054 	ori	r3,r2,1
  81225c:	e0bffc17 	ldw	r2,-16(fp)
  812260:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812264:	e0bffc17 	ldw	r2,-16(fp)
  812268:	10800017 	ldw	r2,0(r2)
  81226c:	10800104 	addi	r2,r2,4
  812270:	1007883a 	mov	r3,r2
  812274:	e0bffc17 	ldw	r2,-16(fp)
  812278:	10800817 	ldw	r2,32(r2)
  81227c:	18800035 	stwio	r2,0(r3)
  812280:	e0bffa17 	ldw	r2,-24(fp)
  812284:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812288:	e0bff917 	ldw	r2,-28(fp)
  81228c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  812290:	e0fff517 	ldw	r3,-44(fp)
  812294:	e0bffd17 	ldw	r2,-12(fp)
  812298:	18800426 	beq	r3,r2,8122ac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  81229c:	e0fff517 	ldw	r3,-44(fp)
  8122a0:	e0bffd17 	ldw	r2,-12(fp)
  8122a4:	1885c83a 	sub	r2,r3,r2
  8122a8:	00000606 	br	8122c4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  8122ac:	e0bfff17 	ldw	r2,-4(fp)
  8122b0:	1090000c 	andi	r2,r2,16384
  8122b4:	10000226 	beq	r2,zero,8122c0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  8122b8:	00bffd44 	movi	r2,-11
  8122bc:	00000106 	br	8122c4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  8122c0:	00bffec4 	movi	r2,-5
}
  8122c4:	e037883a 	mov	sp,fp
  8122c8:	dfc00117 	ldw	ra,4(sp)
  8122cc:	df000017 	ldw	fp,0(sp)
  8122d0:	dec00204 	addi	sp,sp,8
  8122d4:	f800283a 	ret

008122d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8122d8:	defff304 	addi	sp,sp,-52
  8122dc:	dfc00c15 	stw	ra,48(sp)
  8122e0:	df000b15 	stw	fp,44(sp)
  8122e4:	df000b04 	addi	fp,sp,44
  8122e8:	e13ffc15 	stw	r4,-16(fp)
  8122ec:	e17ffd15 	stw	r5,-12(fp)
  8122f0:	e1bffe15 	stw	r6,-8(fp)
  8122f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  8122f8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  8122fc:	e0bffd17 	ldw	r2,-12(fp)
  812300:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  812304:	00003706 	br	8123e4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  812308:	e0bffc17 	ldw	r2,-16(fp)
  81230c:	10800c17 	ldw	r2,48(r2)
  812310:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  812314:	e0bffc17 	ldw	r2,-16(fp)
  812318:	10800d17 	ldw	r2,52(r2)
  81231c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  812320:	e0fff917 	ldw	r3,-28(fp)
  812324:	e0bff517 	ldw	r2,-44(fp)
  812328:	1880062e 	bgeu	r3,r2,812344 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  81232c:	e0fff517 	ldw	r3,-44(fp)
  812330:	e0bff917 	ldw	r2,-28(fp)
  812334:	1885c83a 	sub	r2,r3,r2
  812338:	10bfffc4 	addi	r2,r2,-1
  81233c:	e0bff615 	stw	r2,-40(fp)
  812340:	00000b06 	br	812370 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  812344:	e0bff517 	ldw	r2,-44(fp)
  812348:	10000526 	beq	r2,zero,812360 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  81234c:	00c20004 	movi	r3,2048
  812350:	e0bff917 	ldw	r2,-28(fp)
  812354:	1885c83a 	sub	r2,r3,r2
  812358:	e0bff615 	stw	r2,-40(fp)
  81235c:	00000406 	br	812370 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  812360:	00c1ffc4 	movi	r3,2047
  812364:	e0bff917 	ldw	r2,-28(fp)
  812368:	1885c83a 	sub	r2,r3,r2
  81236c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  812370:	e0bff617 	ldw	r2,-40(fp)
  812374:	10001e26 	beq	r2,zero,8123f0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  812378:	e0fffe17 	ldw	r3,-8(fp)
  81237c:	e0bff617 	ldw	r2,-40(fp)
  812380:	1880022e 	bgeu	r3,r2,81238c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  812384:	e0bffe17 	ldw	r2,-8(fp)
  812388:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  81238c:	e0bffc17 	ldw	r2,-16(fp)
  812390:	10c20e04 	addi	r3,r2,2104
  812394:	e0bff917 	ldw	r2,-28(fp)
  812398:	1885883a 	add	r2,r3,r2
  81239c:	e1bff617 	ldw	r6,-40(fp)
  8123a0:	e17ffd17 	ldw	r5,-12(fp)
  8123a4:	1009883a 	mov	r4,r2
  8123a8:	080a0f80 	call	80a0f8 <memcpy>
      ptr   += n;
  8123ac:	e0fffd17 	ldw	r3,-12(fp)
  8123b0:	e0bff617 	ldw	r2,-40(fp)
  8123b4:	1885883a 	add	r2,r3,r2
  8123b8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  8123bc:	e0fffe17 	ldw	r3,-8(fp)
  8123c0:	e0bff617 	ldw	r2,-40(fp)
  8123c4:	1885c83a 	sub	r2,r3,r2
  8123c8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8123cc:	e0fff917 	ldw	r3,-28(fp)
  8123d0:	e0bff617 	ldw	r2,-40(fp)
  8123d4:	1885883a 	add	r2,r3,r2
  8123d8:	10c1ffcc 	andi	r3,r2,2047
  8123dc:	e0bffc17 	ldw	r2,-16(fp)
  8123e0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  8123e4:	e0bffe17 	ldw	r2,-8(fp)
  8123e8:	00bfc716 	blt	zero,r2,812308 <__alt_mem_onchip_mem+0xff792308>
  8123ec:	00000106 	br	8123f4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  8123f0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8123f4:	0005303a 	rdctl	r2,status
  8123f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8123fc:	e0fffb17 	ldw	r3,-20(fp)
  812400:	00bfff84 	movi	r2,-2
  812404:	1884703a 	and	r2,r3,r2
  812408:	1001703a 	wrctl	status,r2
  
  return context;
  81240c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  812410:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  812414:	e0bffc17 	ldw	r2,-16(fp)
  812418:	10800817 	ldw	r2,32(r2)
  81241c:	10c00094 	ori	r3,r2,2
  812420:	e0bffc17 	ldw	r2,-16(fp)
  812424:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  812428:	e0bffc17 	ldw	r2,-16(fp)
  81242c:	10800017 	ldw	r2,0(r2)
  812430:	10800104 	addi	r2,r2,4
  812434:	1007883a 	mov	r3,r2
  812438:	e0bffc17 	ldw	r2,-16(fp)
  81243c:	10800817 	ldw	r2,32(r2)
  812440:	18800035 	stwio	r2,0(r3)
  812444:	e0bffa17 	ldw	r2,-24(fp)
  812448:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81244c:	e0bff817 	ldw	r2,-32(fp)
  812450:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  812454:	e0bffe17 	ldw	r2,-8(fp)
  812458:	0080100e 	bge	zero,r2,81249c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  81245c:	e0bfff17 	ldw	r2,-4(fp)
  812460:	1090000c 	andi	r2,r2,16384
  812464:	1000101e 	bne	r2,zero,8124a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  812468:	0001883a 	nop
  81246c:	e0bffc17 	ldw	r2,-16(fp)
  812470:	10c00d17 	ldw	r3,52(r2)
  812474:	e0bff517 	ldw	r2,-44(fp)
  812478:	1880051e 	bne	r3,r2,812490 <altera_avalon_jtag_uart_write+0x1b8>
  81247c:	e0bffc17 	ldw	r2,-16(fp)
  812480:	10c00917 	ldw	r3,36(r2)
  812484:	e0bffc17 	ldw	r2,-16(fp)
  812488:	10800117 	ldw	r2,4(r2)
  81248c:	18bff736 	bltu	r3,r2,81246c <__alt_mem_onchip_mem+0xff79246c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  812490:	e0bffc17 	ldw	r2,-16(fp)
  812494:	10800917 	ldw	r2,36(r2)
  812498:	1000051e 	bne	r2,zero,8124b0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  81249c:	e0bffe17 	ldw	r2,-8(fp)
  8124a0:	00bfd016 	blt	zero,r2,8123e4 <__alt_mem_onchip_mem+0xff7923e4>
  8124a4:	00000306 	br	8124b4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  8124a8:	0001883a 	nop
  8124ac:	00000106 	br	8124b4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  8124b0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  8124b4:	e0fffd17 	ldw	r3,-12(fp)
  8124b8:	e0bff717 	ldw	r2,-36(fp)
  8124bc:	18800426 	beq	r3,r2,8124d0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  8124c0:	e0fffd17 	ldw	r3,-12(fp)
  8124c4:	e0bff717 	ldw	r2,-36(fp)
  8124c8:	1885c83a 	sub	r2,r3,r2
  8124cc:	00000606 	br	8124e8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  8124d0:	e0bfff17 	ldw	r2,-4(fp)
  8124d4:	1090000c 	andi	r2,r2,16384
  8124d8:	10000226 	beq	r2,zero,8124e4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  8124dc:	00bffd44 	movi	r2,-11
  8124e0:	00000106 	br	8124e8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  8124e4:	00bffec4 	movi	r2,-5
}
  8124e8:	e037883a 	mov	sp,fp
  8124ec:	dfc00117 	ldw	ra,4(sp)
  8124f0:	df000017 	ldw	fp,0(sp)
  8124f4:	dec00204 	addi	sp,sp,8
  8124f8:	f800283a 	ret

008124fc <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  8124fc:	defffa04 	addi	sp,sp,-24
  812500:	dfc00515 	stw	ra,20(sp)
  812504:	df000415 	stw	fp,16(sp)
  812508:	df000404 	addi	fp,sp,16
  81250c:	e13ffe15 	stw	r4,-8(fp)
  812510:	2805883a 	mov	r2,r5
  812514:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  812518:	e0bffe17 	ldw	r2,-8(fp)
  81251c:	10800017 	ldw	r2,0(r2)
  812520:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  812524:	008003f4 	movhi	r2,15
  812528:	10909004 	addi	r2,r2,16960
  81252c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  812530:	e0bffe17 	ldw	r2,-8(fp)
  812534:	10800803 	ldbu	r2,32(r2)
  812538:	10803fcc 	andi	r2,r2,255
  81253c:	1080201c 	xori	r2,r2,128
  812540:	10bfe004 	addi	r2,r2,-128
  812544:	1000151e 	bne	r2,zero,81259c <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812548:	00000906 	br	812570 <lcd_write_command+0x74>
    if (--i == 0)
  81254c:	e0bffc17 	ldw	r2,-16(fp)
  812550:	10bfffc4 	addi	r2,r2,-1
  812554:	e0bffc15 	stw	r2,-16(fp)
  812558:	e0bffc17 	ldw	r2,-16(fp)
  81255c:	1000041e 	bne	r2,zero,812570 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  812560:	e0bffe17 	ldw	r2,-8(fp)
  812564:	00c00044 	movi	r3,1
  812568:	10c00805 	stb	r3,32(r2)
      return;
  81256c:	00000c06 	br	8125a0 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812570:	e0bffd17 	ldw	r2,-12(fp)
  812574:	10800104 	addi	r2,r2,4
  812578:	10800037 	ldwio	r2,0(r2)
  81257c:	1080200c 	andi	r2,r2,128
  812580:	103ff21e 	bne	r2,zero,81254c <__alt_mem_onchip_mem+0xff79254c>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  812584:	01001904 	movi	r4,100
  812588:	08147080 	call	814708 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  81258c:	e0bffd17 	ldw	r2,-12(fp)
  812590:	e0ffff03 	ldbu	r3,-4(fp)
  812594:	10c00035 	stwio	r3,0(r2)
  812598:	00000106 	br	8125a0 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  81259c:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  8125a0:	e037883a 	mov	sp,fp
  8125a4:	dfc00117 	ldw	ra,4(sp)
  8125a8:	df000017 	ldw	fp,0(sp)
  8125ac:	dec00204 	addi	sp,sp,8
  8125b0:	f800283a 	ret

008125b4 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  8125b4:	defffa04 	addi	sp,sp,-24
  8125b8:	dfc00515 	stw	ra,20(sp)
  8125bc:	df000415 	stw	fp,16(sp)
  8125c0:	df000404 	addi	fp,sp,16
  8125c4:	e13ffe15 	stw	r4,-8(fp)
  8125c8:	2805883a 	mov	r2,r5
  8125cc:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  8125d0:	e0bffe17 	ldw	r2,-8(fp)
  8125d4:	10800017 	ldw	r2,0(r2)
  8125d8:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  8125dc:	008003f4 	movhi	r2,15
  8125e0:	10909004 	addi	r2,r2,16960
  8125e4:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  8125e8:	e0bffe17 	ldw	r2,-8(fp)
  8125ec:	10800803 	ldbu	r2,32(r2)
  8125f0:	10803fcc 	andi	r2,r2,255
  8125f4:	1080201c 	xori	r2,r2,128
  8125f8:	10bfe004 	addi	r2,r2,-128
  8125fc:	10001d1e 	bne	r2,zero,812674 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812600:	00000906 	br	812628 <lcd_write_data+0x74>
    if (--i == 0)
  812604:	e0bffc17 	ldw	r2,-16(fp)
  812608:	10bfffc4 	addi	r2,r2,-1
  81260c:	e0bffc15 	stw	r2,-16(fp)
  812610:	e0bffc17 	ldw	r2,-16(fp)
  812614:	1000041e 	bne	r2,zero,812628 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  812618:	e0bffe17 	ldw	r2,-8(fp)
  81261c:	00c00044 	movi	r3,1
  812620:	10c00805 	stb	r3,32(r2)
      return;
  812624:	00001406 	br	812678 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  812628:	e0bffd17 	ldw	r2,-12(fp)
  81262c:	10800104 	addi	r2,r2,4
  812630:	10800037 	ldwio	r2,0(r2)
  812634:	1080200c 	andi	r2,r2,128
  812638:	103ff21e 	bne	r2,zero,812604 <__alt_mem_onchip_mem+0xff792604>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  81263c:	01001904 	movi	r4,100
  812640:	08147080 	call	814708 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  812644:	e0bffd17 	ldw	r2,-12(fp)
  812648:	10800204 	addi	r2,r2,8
  81264c:	1007883a 	mov	r3,r2
  812650:	e0bfff03 	ldbu	r2,-4(fp)
  812654:	18800035 	stwio	r2,0(r3)

  sp->address++;
  812658:	e0bffe17 	ldw	r2,-8(fp)
  81265c:	108008c3 	ldbu	r2,35(r2)
  812660:	10800044 	addi	r2,r2,1
  812664:	1007883a 	mov	r3,r2
  812668:	e0bffe17 	ldw	r2,-8(fp)
  81266c:	10c008c5 	stb	r3,35(r2)
  812670:	00000106 	br	812678 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  812674:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  812678:	e037883a 	mov	sp,fp
  81267c:	dfc00117 	ldw	ra,4(sp)
  812680:	df000017 	ldw	fp,0(sp)
  812684:	dec00204 	addi	sp,sp,8
  812688:	f800283a 	ret

0081268c <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  81268c:	defffc04 	addi	sp,sp,-16
  812690:	dfc00315 	stw	ra,12(sp)
  812694:	df000215 	stw	fp,8(sp)
  812698:	df000204 	addi	fp,sp,8
  81269c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  8126a0:	01400044 	movi	r5,1
  8126a4:	e13fff17 	ldw	r4,-4(fp)
  8126a8:	08124fc0 	call	8124fc <lcd_write_command>

  sp->x = 0;
  8126ac:	e0bfff17 	ldw	r2,-4(fp)
  8126b0:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  8126b4:	e0bfff17 	ldw	r2,-4(fp)
  8126b8:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  8126bc:	e0bfff17 	ldw	r2,-4(fp)
  8126c0:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8126c4:	e03ffe15 	stw	zero,-8(fp)
  8126c8:	00001b06 	br	812738 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  8126cc:	e0bffe17 	ldw	r2,-8(fp)
  8126d0:	108018e4 	muli	r2,r2,99
  8126d4:	10801004 	addi	r2,r2,64
  8126d8:	e0ffff17 	ldw	r3,-4(fp)
  8126dc:	1885883a 	add	r2,r3,r2
  8126e0:	01801444 	movi	r6,81
  8126e4:	01400804 	movi	r5,32
  8126e8:	1009883a 	mov	r4,r2
  8126ec:	08048d80 	call	8048d8 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  8126f0:	e0bffe17 	ldw	r2,-8(fp)
  8126f4:	108018e4 	muli	r2,r2,99
  8126f8:	10800c04 	addi	r2,r2,48
  8126fc:	e0ffff17 	ldw	r3,-4(fp)
  812700:	1885883a 	add	r2,r3,r2
  812704:	01800404 	movi	r6,16
  812708:	01400804 	movi	r5,32
  81270c:	1009883a 	mov	r4,r2
  812710:	08048d80 	call	8048d8 <memset>
    sp->line[y].width = 0;
  812714:	e0ffff17 	ldw	r3,-4(fp)
  812718:	e0bffe17 	ldw	r2,-8(fp)
  81271c:	108018e4 	muli	r2,r2,99
  812720:	1885883a 	add	r2,r3,r2
  812724:	10802444 	addi	r2,r2,145
  812728:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81272c:	e0bffe17 	ldw	r2,-8(fp)
  812730:	10800044 	addi	r2,r2,1
  812734:	e0bffe15 	stw	r2,-8(fp)
  812738:	e0bffe17 	ldw	r2,-8(fp)
  81273c:	10800090 	cmplti	r2,r2,2
  812740:	103fe21e 	bne	r2,zero,8126cc <__alt_mem_onchip_mem+0xff7926cc>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  812744:	0001883a 	nop
  812748:	e037883a 	mov	sp,fp
  81274c:	dfc00117 	ldw	ra,4(sp)
  812750:	df000017 	ldw	fp,0(sp)
  812754:	dec00204 	addi	sp,sp,8
  812758:	f800283a 	ret

0081275c <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  81275c:	defff704 	addi	sp,sp,-36
  812760:	dfc00815 	stw	ra,32(sp)
  812764:	df000715 	stw	fp,28(sp)
  812768:	df000704 	addi	fp,sp,28
  81276c:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  812770:	e0bfff17 	ldw	r2,-4(fp)
  812774:	10800943 	ldbu	r2,37(r2)
  812778:	10803fcc 	andi	r2,r2,255
  81277c:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812780:	e03ff915 	stw	zero,-28(fp)
  812784:	00006706 	br	812924 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  812788:	e0ffff17 	ldw	r3,-4(fp)
  81278c:	e0bff917 	ldw	r2,-28(fp)
  812790:	108018e4 	muli	r2,r2,99
  812794:	1885883a 	add	r2,r3,r2
  812798:	10802444 	addi	r2,r2,145
  81279c:	10800003 	ldbu	r2,0(r2)
  8127a0:	10803fcc 	andi	r2,r2,255
  8127a4:	1080201c 	xori	r2,r2,128
  8127a8:	10bfe004 	addi	r2,r2,-128
  8127ac:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  8127b0:	e0ffff17 	ldw	r3,-4(fp)
  8127b4:	e0bff917 	ldw	r2,-28(fp)
  8127b8:	108018e4 	muli	r2,r2,99
  8127bc:	1885883a 	add	r2,r3,r2
  8127c0:	10802484 	addi	r2,r2,146
  8127c4:	10800003 	ldbu	r2,0(r2)
  8127c8:	10c03fcc 	andi	r3,r2,255
  8127cc:	e0bffc17 	ldw	r2,-16(fp)
  8127d0:	1885383a 	mul	r2,r3,r2
  8127d4:	1005d23a 	srai	r2,r2,8
  8127d8:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  8127dc:	e0fffb17 	ldw	r3,-20(fp)
  8127e0:	e0bffd17 	ldw	r2,-12(fp)
  8127e4:	18800116 	blt	r3,r2,8127ec <lcd_repaint_screen+0x90>
      offset = 0;
  8127e8:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  8127ec:	e03ffa15 	stw	zero,-24(fp)
  8127f0:	00004606 	br	81290c <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  8127f4:	e0fffa17 	ldw	r3,-24(fp)
  8127f8:	e0bffb17 	ldw	r2,-20(fp)
  8127fc:	1885883a 	add	r2,r3,r2
  812800:	e17ffd17 	ldw	r5,-12(fp)
  812804:	1009883a 	mov	r4,r2
  812808:	080e3380 	call	80e338 <__modsi3>
  81280c:	1009883a 	mov	r4,r2
  812810:	e0ffff17 	ldw	r3,-4(fp)
  812814:	e0bff917 	ldw	r2,-28(fp)
  812818:	108018e4 	muli	r2,r2,99
  81281c:	1885883a 	add	r2,r3,r2
  812820:	1105883a 	add	r2,r2,r4
  812824:	10801004 	addi	r2,r2,64
  812828:	10800003 	ldbu	r2,0(r2)
  81282c:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  812830:	e0ffff17 	ldw	r3,-4(fp)
  812834:	e0bff917 	ldw	r2,-28(fp)
  812838:	108018e4 	muli	r2,r2,99
  81283c:	1887883a 	add	r3,r3,r2
  812840:	e0bffa17 	ldw	r2,-24(fp)
  812844:	1885883a 	add	r2,r3,r2
  812848:	10800c04 	addi	r2,r2,48
  81284c:	10800003 	ldbu	r2,0(r2)
  812850:	10c03fcc 	andi	r3,r2,255
  812854:	18c0201c 	xori	r3,r3,128
  812858:	18ffe004 	addi	r3,r3,-128
  81285c:	e0bffe07 	ldb	r2,-8(fp)
  812860:	18802726 	beq	r3,r2,812900 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  812864:	e0fff917 	ldw	r3,-28(fp)
  812868:	d0a01004 	addi	r2,gp,-32704
  81286c:	1885883a 	add	r2,r3,r2
  812870:	10800003 	ldbu	r2,0(r2)
  812874:	1007883a 	mov	r3,r2
  812878:	e0bffa17 	ldw	r2,-24(fp)
  81287c:	1885883a 	add	r2,r3,r2
  812880:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  812884:	e0fffe43 	ldbu	r3,-7(fp)
  812888:	e0bfff17 	ldw	r2,-4(fp)
  81288c:	108008c3 	ldbu	r2,35(r2)
  812890:	10803fcc 	andi	r2,r2,255
  812894:	1080201c 	xori	r2,r2,128
  812898:	10bfe004 	addi	r2,r2,-128
  81289c:	18800a26 	beq	r3,r2,8128c8 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  8128a0:	e0fffe43 	ldbu	r3,-7(fp)
  8128a4:	00bfe004 	movi	r2,-128
  8128a8:	1884b03a 	or	r2,r3,r2
  8128ac:	10803fcc 	andi	r2,r2,255
  8128b0:	100b883a 	mov	r5,r2
  8128b4:	e13fff17 	ldw	r4,-4(fp)
  8128b8:	08124fc0 	call	8124fc <lcd_write_command>
          sp->address = address;
  8128bc:	e0fffe43 	ldbu	r3,-7(fp)
  8128c0:	e0bfff17 	ldw	r2,-4(fp)
  8128c4:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  8128c8:	e0bffe03 	ldbu	r2,-8(fp)
  8128cc:	10803fcc 	andi	r2,r2,255
  8128d0:	100b883a 	mov	r5,r2
  8128d4:	e13fff17 	ldw	r4,-4(fp)
  8128d8:	08125b40 	call	8125b4 <lcd_write_data>
        sp->line[y].visible[x] = c;
  8128dc:	e0ffff17 	ldw	r3,-4(fp)
  8128e0:	e0bff917 	ldw	r2,-28(fp)
  8128e4:	108018e4 	muli	r2,r2,99
  8128e8:	1887883a 	add	r3,r3,r2
  8128ec:	e0bffa17 	ldw	r2,-24(fp)
  8128f0:	1885883a 	add	r2,r3,r2
  8128f4:	10800c04 	addi	r2,r2,48
  8128f8:	e0fffe03 	ldbu	r3,-8(fp)
  8128fc:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  812900:	e0bffa17 	ldw	r2,-24(fp)
  812904:	10800044 	addi	r2,r2,1
  812908:	e0bffa15 	stw	r2,-24(fp)
  81290c:	e0bffa17 	ldw	r2,-24(fp)
  812910:	10800410 	cmplti	r2,r2,16
  812914:	103fb71e 	bne	r2,zero,8127f4 <__alt_mem_onchip_mem+0xff7927f4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812918:	e0bff917 	ldw	r2,-28(fp)
  81291c:	10800044 	addi	r2,r2,1
  812920:	e0bff915 	stw	r2,-28(fp)
  812924:	e0bff917 	ldw	r2,-28(fp)
  812928:	10800090 	cmplti	r2,r2,2
  81292c:	103f961e 	bne	r2,zero,812788 <__alt_mem_onchip_mem+0xff792788>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  812930:	0001883a 	nop
  812934:	e037883a 	mov	sp,fp
  812938:	dfc00117 	ldw	ra,4(sp)
  81293c:	df000017 	ldw	fp,0(sp)
  812940:	dec00204 	addi	sp,sp,8
  812944:	f800283a 	ret

00812948 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  812948:	defffc04 	addi	sp,sp,-16
  81294c:	dfc00315 	stw	ra,12(sp)
  812950:	df000215 	stw	fp,8(sp)
  812954:	df000204 	addi	fp,sp,8
  812958:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81295c:	e03ffe15 	stw	zero,-8(fp)
  812960:	00001d06 	br	8129d8 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  812964:	e0bffe17 	ldw	r2,-8(fp)
  812968:	00800f16 	blt	zero,r2,8129a8 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  81296c:	e0bffe17 	ldw	r2,-8(fp)
  812970:	108018e4 	muli	r2,r2,99
  812974:	10801004 	addi	r2,r2,64
  812978:	e0ffff17 	ldw	r3,-4(fp)
  81297c:	1889883a 	add	r4,r3,r2
  812980:	e0bffe17 	ldw	r2,-8(fp)
  812984:	10800044 	addi	r2,r2,1
  812988:	108018e4 	muli	r2,r2,99
  81298c:	10801004 	addi	r2,r2,64
  812990:	e0ffff17 	ldw	r3,-4(fp)
  812994:	1885883a 	add	r2,r3,r2
  812998:	01801404 	movi	r6,80
  81299c:	100b883a 	mov	r5,r2
  8129a0:	080a0f80 	call	80a0f8 <memcpy>
  8129a4:	00000906 	br	8129cc <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  8129a8:	e0bffe17 	ldw	r2,-8(fp)
  8129ac:	108018e4 	muli	r2,r2,99
  8129b0:	10801004 	addi	r2,r2,64
  8129b4:	e0ffff17 	ldw	r3,-4(fp)
  8129b8:	1885883a 	add	r2,r3,r2
  8129bc:	01801404 	movi	r6,80
  8129c0:	01400804 	movi	r5,32
  8129c4:	1009883a 	mov	r4,r2
  8129c8:	08048d80 	call	8048d8 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  8129cc:	e0bffe17 	ldw	r2,-8(fp)
  8129d0:	10800044 	addi	r2,r2,1
  8129d4:	e0bffe15 	stw	r2,-8(fp)
  8129d8:	e0bffe17 	ldw	r2,-8(fp)
  8129dc:	10800090 	cmplti	r2,r2,2
  8129e0:	103fe01e 	bne	r2,zero,812964 <__alt_mem_onchip_mem+0xff792964>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  8129e4:	e0bfff17 	ldw	r2,-4(fp)
  8129e8:	10800883 	ldbu	r2,34(r2)
  8129ec:	10bfffc4 	addi	r2,r2,-1
  8129f0:	1007883a 	mov	r3,r2
  8129f4:	e0bfff17 	ldw	r2,-4(fp)
  8129f8:	10c00885 	stb	r3,34(r2)
}
  8129fc:	0001883a 	nop
  812a00:	e037883a 	mov	sp,fp
  812a04:	dfc00117 	ldw	ra,4(sp)
  812a08:	df000017 	ldw	fp,0(sp)
  812a0c:	dec00204 	addi	sp,sp,8
  812a10:	f800283a 	ret

00812a14 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  812a14:	defff904 	addi	sp,sp,-28
  812a18:	dfc00615 	stw	ra,24(sp)
  812a1c:	df000515 	stw	fp,20(sp)
  812a20:	df000504 	addi	fp,sp,20
  812a24:	e13ffe15 	stw	r4,-8(fp)
  812a28:	2805883a 	mov	r2,r5
  812a2c:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  812a30:	e03ffb15 	stw	zero,-20(fp)
  812a34:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  812a38:	e0bffe17 	ldw	r2,-8(fp)
  812a3c:	10800a03 	ldbu	r2,40(r2)
  812a40:	10803fcc 	andi	r2,r2,255
  812a44:	1080201c 	xori	r2,r2,128
  812a48:	10bfe004 	addi	r2,r2,-128
  812a4c:	108016d8 	cmpnei	r2,r2,91
  812a50:	1000411e 	bne	r2,zero,812b58 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  812a54:	e0bffe17 	ldw	r2,-8(fp)
  812a58:	10800a04 	addi	r2,r2,40
  812a5c:	10800044 	addi	r2,r2,1
  812a60:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  812a64:	00000c06 	br	812a98 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  812a68:	e0bffb17 	ldw	r2,-20(fp)
  812a6c:	10c002a4 	muli	r3,r2,10
  812a70:	e0bffd17 	ldw	r2,-12(fp)
  812a74:	11000044 	addi	r4,r2,1
  812a78:	e13ffd15 	stw	r4,-12(fp)
  812a7c:	10800003 	ldbu	r2,0(r2)
  812a80:	10803fcc 	andi	r2,r2,255
  812a84:	1080201c 	xori	r2,r2,128
  812a88:	10bfe004 	addi	r2,r2,-128
  812a8c:	10bff404 	addi	r2,r2,-48
  812a90:	1885883a 	add	r2,r3,r2
  812a94:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  812a98:	d0e01117 	ldw	r3,-32700(gp)
  812a9c:	e0bffd17 	ldw	r2,-12(fp)
  812aa0:	10800003 	ldbu	r2,0(r2)
  812aa4:	10803fcc 	andi	r2,r2,255
  812aa8:	1080201c 	xori	r2,r2,128
  812aac:	10bfe004 	addi	r2,r2,-128
  812ab0:	10800044 	addi	r2,r2,1
  812ab4:	1885883a 	add	r2,r3,r2
  812ab8:	10800003 	ldbu	r2,0(r2)
  812abc:	10803fcc 	andi	r2,r2,255
  812ac0:	1080010c 	andi	r2,r2,4
  812ac4:	103fe81e 	bne	r2,zero,812a68 <__alt_mem_onchip_mem+0xff792a68>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  812ac8:	e0bffd17 	ldw	r2,-12(fp)
  812acc:	10800003 	ldbu	r2,0(r2)
  812ad0:	10803fcc 	andi	r2,r2,255
  812ad4:	1080201c 	xori	r2,r2,128
  812ad8:	10bfe004 	addi	r2,r2,-128
  812adc:	10800ed8 	cmpnei	r2,r2,59
  812ae0:	10001f1e 	bne	r2,zero,812b60 <lcd_handle_escape+0x14c>
    {
      ptr++;
  812ae4:	e0bffd17 	ldw	r2,-12(fp)
  812ae8:	10800044 	addi	r2,r2,1
  812aec:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  812af0:	00000c06 	br	812b24 <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  812af4:	e0bffc17 	ldw	r2,-16(fp)
  812af8:	10c002a4 	muli	r3,r2,10
  812afc:	e0bffd17 	ldw	r2,-12(fp)
  812b00:	11000044 	addi	r4,r2,1
  812b04:	e13ffd15 	stw	r4,-12(fp)
  812b08:	10800003 	ldbu	r2,0(r2)
  812b0c:	10803fcc 	andi	r2,r2,255
  812b10:	1080201c 	xori	r2,r2,128
  812b14:	10bfe004 	addi	r2,r2,-128
  812b18:	10bff404 	addi	r2,r2,-48
  812b1c:	1885883a 	add	r2,r3,r2
  812b20:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  812b24:	d0e01117 	ldw	r3,-32700(gp)
  812b28:	e0bffd17 	ldw	r2,-12(fp)
  812b2c:	10800003 	ldbu	r2,0(r2)
  812b30:	10803fcc 	andi	r2,r2,255
  812b34:	1080201c 	xori	r2,r2,128
  812b38:	10bfe004 	addi	r2,r2,-128
  812b3c:	10800044 	addi	r2,r2,1
  812b40:	1885883a 	add	r2,r3,r2
  812b44:	10800003 	ldbu	r2,0(r2)
  812b48:	10803fcc 	andi	r2,r2,255
  812b4c:	1080010c 	andi	r2,r2,4
  812b50:	103fe81e 	bne	r2,zero,812af4 <__alt_mem_onchip_mem+0xff792af4>
  812b54:	00000206 	br	812b60 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  812b58:	00bfffc4 	movi	r2,-1
  812b5c:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  812b60:	e0bfff07 	ldb	r2,-4(fp)
  812b64:	10c012a0 	cmpeqi	r3,r2,74
  812b68:	1800291e 	bne	r3,zero,812c10 <lcd_handle_escape+0x1fc>
  812b6c:	10c012c8 	cmpgei	r3,r2,75
  812b70:	1800031e 	bne	r3,zero,812b80 <lcd_handle_escape+0x16c>
  812b74:	10801220 	cmpeqi	r2,r2,72
  812b78:	1000061e 	bne	r2,zero,812b94 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  812b7c:	00004a06 	br	812ca8 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  812b80:	10c012e0 	cmpeqi	r3,r2,75
  812b84:	1800281e 	bne	r3,zero,812c28 <lcd_handle_escape+0x214>
  812b88:	108019a0 	cmpeqi	r2,r2,102
  812b8c:	1000011e 	bne	r2,zero,812b94 <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  812b90:	00004506 	br	812ca8 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  812b94:	e0bffc17 	ldw	r2,-16(fp)
  812b98:	0080050e 	bge	zero,r2,812bb0 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  812b9c:	e0bffc17 	ldw	r2,-16(fp)
  812ba0:	10bfffc4 	addi	r2,r2,-1
  812ba4:	1007883a 	mov	r3,r2
  812ba8:	e0bffe17 	ldw	r2,-8(fp)
  812bac:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  812bb0:	e0bffb17 	ldw	r2,-20(fp)
  812bb4:	0080370e 	bge	zero,r2,812c94 <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  812bb8:	e0bffb17 	ldw	r2,-20(fp)
  812bbc:	10bfffc4 	addi	r2,r2,-1
  812bc0:	1007883a 	mov	r3,r2
  812bc4:	e0bffe17 	ldw	r2,-8(fp)
  812bc8:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  812bcc:	e0bffe17 	ldw	r2,-8(fp)
  812bd0:	10800883 	ldbu	r2,34(r2)
  812bd4:	10803fcc 	andi	r2,r2,255
  812bd8:	10800170 	cmpltui	r2,r2,5
  812bdc:	1000061e 	bne	r2,zero,812bf8 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  812be0:	e0bffe17 	ldw	r2,-8(fp)
  812be4:	00c00104 	movi	r3,4
  812be8:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  812bec:	00000206 	br	812bf8 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  812bf0:	e13ffe17 	ldw	r4,-8(fp)
  812bf4:	08129480 	call	812948 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  812bf8:	e0bffe17 	ldw	r2,-8(fp)
  812bfc:	10800883 	ldbu	r2,34(r2)
  812c00:	10803fcc 	andi	r2,r2,255
  812c04:	108000e8 	cmpgeui	r2,r2,3
  812c08:	103ff91e 	bne	r2,zero,812bf0 <__alt_mem_onchip_mem+0xff792bf0>
        lcd_scroll_up(sp);
    }
    break;
  812c0c:	00002106 	br	812c94 <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  812c10:	e0bffb17 	ldw	r2,-20(fp)
  812c14:	10800098 	cmpnei	r2,r2,2
  812c18:	1000201e 	bne	r2,zero,812c9c <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  812c1c:	e13ffe17 	ldw	r4,-8(fp)
  812c20:	081268c0 	call	81268c <lcd_clear_screen>
    break;
  812c24:	00001d06 	br	812c9c <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  812c28:	e0bffb17 	ldw	r2,-20(fp)
  812c2c:	00801d16 	blt	zero,r2,812ca4 <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812c30:	e0bffe17 	ldw	r2,-8(fp)
  812c34:	10800843 	ldbu	r2,33(r2)
  812c38:	10803fcc 	andi	r2,r2,255
  812c3c:	10801428 	cmpgeui	r2,r2,80
  812c40:	1000181e 	bne	r2,zero,812ca4 <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  812c44:	e0bffe17 	ldw	r2,-8(fp)
  812c48:	10800883 	ldbu	r2,34(r2)
  812c4c:	10803fcc 	andi	r2,r2,255
  812c50:	108018e4 	muli	r2,r2,99
  812c54:	10801004 	addi	r2,r2,64
  812c58:	e0fffe17 	ldw	r3,-8(fp)
  812c5c:	1887883a 	add	r3,r3,r2
  812c60:	e0bffe17 	ldw	r2,-8(fp)
  812c64:	10800843 	ldbu	r2,33(r2)
  812c68:	10803fcc 	andi	r2,r2,255
  812c6c:	1889883a 	add	r4,r3,r2
  812c70:	e0bffe17 	ldw	r2,-8(fp)
  812c74:	10800843 	ldbu	r2,33(r2)
  812c78:	10803fcc 	andi	r2,r2,255
  812c7c:	00c01404 	movi	r3,80
  812c80:	1885c83a 	sub	r2,r3,r2
  812c84:	100d883a 	mov	r6,r2
  812c88:	01400804 	movi	r5,32
  812c8c:	08048d80 	call	8048d8 <memset>
    }
    break;
  812c90:	00000406 	br	812ca4 <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  812c94:	0001883a 	nop
  812c98:	00000306 	br	812ca8 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  812c9c:	0001883a 	nop
  812ca0:	00000106 	br	812ca8 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  812ca4:	0001883a 	nop
  }
}
  812ca8:	0001883a 	nop
  812cac:	e037883a 	mov	sp,fp
  812cb0:	dfc00117 	ldw	ra,4(sp)
  812cb4:	df000017 	ldw	fp,0(sp)
  812cb8:	dec00204 	addi	sp,sp,8
  812cbc:	f800283a 	ret

00812cc0 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  812cc0:	defff304 	addi	sp,sp,-52
  812cc4:	dfc00c15 	stw	ra,48(sp)
  812cc8:	df000b15 	stw	fp,44(sp)
  812ccc:	df000b04 	addi	fp,sp,44
  812cd0:	e13ffc15 	stw	r4,-16(fp)
  812cd4:	e17ffd15 	stw	r5,-12(fp)
  812cd8:	e1bffe15 	stw	r6,-8(fp)
  812cdc:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  812ce0:	e0bffe17 	ldw	r2,-8(fp)
  812ce4:	e0fffd17 	ldw	r3,-12(fp)
  812ce8:	1885883a 	add	r2,r3,r2
  812cec:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  812cf0:	e0bffc17 	ldw	r2,-16(fp)
  812cf4:	00c00044 	movi	r3,1
  812cf8:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  812cfc:	00009906 	br	812f64 <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  812d00:	e0bffd17 	ldw	r2,-12(fp)
  812d04:	10800003 	ldbu	r2,0(r2)
  812d08:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  812d0c:	e0bffc17 	ldw	r2,-16(fp)
  812d10:	10800903 	ldbu	r2,36(r2)
  812d14:	10803fcc 	andi	r2,r2,255
  812d18:	1080201c 	xori	r2,r2,128
  812d1c:	10bfe004 	addi	r2,r2,-128
  812d20:	10003716 	blt	r2,zero,812e00 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  812d24:	e0bffc17 	ldw	r2,-16(fp)
  812d28:	10800903 	ldbu	r2,36(r2)
  812d2c:	10803fcc 	andi	r2,r2,255
  812d30:	1080201c 	xori	r2,r2,128
  812d34:	10bfe004 	addi	r2,r2,-128
  812d38:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  812d3c:	e0bffa17 	ldw	r2,-24(fp)
  812d40:	1000031e 	bne	r2,zero,812d50 <altera_avalon_lcd_16207_write+0x90>
  812d44:	e0bff907 	ldb	r2,-28(fp)
  812d48:	108016d8 	cmpnei	r2,r2,91
  812d4c:	10000d1e 	bne	r2,zero,812d84 <altera_avalon_lcd_16207_write+0xc4>
  812d50:	e0bffa17 	ldw	r2,-24(fp)
  812d54:	10001826 	beq	r2,zero,812db8 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  812d58:	d0e01117 	ldw	r3,-32700(gp)
  812d5c:	e0bff907 	ldb	r2,-28(fp)
  812d60:	10800044 	addi	r2,r2,1
  812d64:	1885883a 	add	r2,r3,r2
  812d68:	10800003 	ldbu	r2,0(r2)
  812d6c:	10803fcc 	andi	r2,r2,255
  812d70:	1080010c 	andi	r2,r2,4
  812d74:	1000101e 	bne	r2,zero,812db8 <altera_avalon_lcd_16207_write+0xf8>
  812d78:	e0bff907 	ldb	r2,-28(fp)
  812d7c:	10800ee0 	cmpeqi	r2,r2,59
  812d80:	10000d1e 	bne	r2,zero,812db8 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  812d84:	e0fffc17 	ldw	r3,-16(fp)
  812d88:	e0bffa17 	ldw	r2,-24(fp)
  812d8c:	1885883a 	add	r2,r3,r2
  812d90:	10800a04 	addi	r2,r2,40
  812d94:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  812d98:	e0bff907 	ldb	r2,-28(fp)
  812d9c:	100b883a 	mov	r5,r2
  812da0:	e13ffc17 	ldw	r4,-16(fp)
  812da4:	0812a140 	call	812a14 <lcd_handle_escape>

        sp->esccount = -1;
  812da8:	e0bffc17 	ldw	r2,-16(fp)
  812dac:	00ffffc4 	movi	r3,-1
  812db0:	10c00905 	stb	r3,36(r2)
  812db4:	00006806 	br	812f58 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  812db8:	e0bffc17 	ldw	r2,-16(fp)
  812dbc:	10800903 	ldbu	r2,36(r2)
  812dc0:	10803fcc 	andi	r2,r2,255
  812dc4:	108001e8 	cmpgeui	r2,r2,7
  812dc8:	1000631e 	bne	r2,zero,812f58 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  812dcc:	e0fffc17 	ldw	r3,-16(fp)
  812dd0:	e0bffa17 	ldw	r2,-24(fp)
  812dd4:	1885883a 	add	r2,r3,r2
  812dd8:	10800a04 	addi	r2,r2,40
  812ddc:	e0fff903 	ldbu	r3,-28(fp)
  812de0:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  812de4:	e0bffc17 	ldw	r2,-16(fp)
  812de8:	10800903 	ldbu	r2,36(r2)
  812dec:	10800044 	addi	r2,r2,1
  812df0:	1007883a 	mov	r3,r2
  812df4:	e0bffc17 	ldw	r2,-16(fp)
  812df8:	10c00905 	stb	r3,36(r2)
  812dfc:	00005606 	br	812f58 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  812e00:	e0bff907 	ldb	r2,-28(fp)
  812e04:	108006d8 	cmpnei	r2,r2,27
  812e08:	1000031e 	bne	r2,zero,812e18 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  812e0c:	e0bffc17 	ldw	r2,-16(fp)
  812e10:	10000905 	stb	zero,36(r2)
  812e14:	00005006 	br	812f58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  812e18:	e0bff907 	ldb	r2,-28(fp)
  812e1c:	10800358 	cmpnei	r2,r2,13
  812e20:	1000031e 	bne	r2,zero,812e30 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  812e24:	e0bffc17 	ldw	r2,-16(fp)
  812e28:	10000845 	stb	zero,33(r2)
  812e2c:	00004a06 	br	812f58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  812e30:	e0bff907 	ldb	r2,-28(fp)
  812e34:	10800298 	cmpnei	r2,r2,10
  812e38:	1000101e 	bne	r2,zero,812e7c <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  812e3c:	e0bffc17 	ldw	r2,-16(fp)
  812e40:	10000845 	stb	zero,33(r2)
      sp->y++;
  812e44:	e0bffc17 	ldw	r2,-16(fp)
  812e48:	10800883 	ldbu	r2,34(r2)
  812e4c:	10800044 	addi	r2,r2,1
  812e50:	1007883a 	mov	r3,r2
  812e54:	e0bffc17 	ldw	r2,-16(fp)
  812e58:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  812e5c:	e0bffc17 	ldw	r2,-16(fp)
  812e60:	10800883 	ldbu	r2,34(r2)
  812e64:	10803fcc 	andi	r2,r2,255
  812e68:	108000f0 	cmpltui	r2,r2,3
  812e6c:	10003a1e 	bne	r2,zero,812f58 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  812e70:	e13ffc17 	ldw	r4,-16(fp)
  812e74:	08129480 	call	812948 <lcd_scroll_up>
  812e78:	00003706 	br	812f58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  812e7c:	e0bff907 	ldb	r2,-28(fp)
  812e80:	10800218 	cmpnei	r2,r2,8
  812e84:	10000b1e 	bne	r2,zero,812eb4 <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  812e88:	e0bffc17 	ldw	r2,-16(fp)
  812e8c:	10800843 	ldbu	r2,33(r2)
  812e90:	10803fcc 	andi	r2,r2,255
  812e94:	10003026 	beq	r2,zero,812f58 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  812e98:	e0bffc17 	ldw	r2,-16(fp)
  812e9c:	10800843 	ldbu	r2,33(r2)
  812ea0:	10bfffc4 	addi	r2,r2,-1
  812ea4:	1007883a 	mov	r3,r2
  812ea8:	e0bffc17 	ldw	r2,-16(fp)
  812eac:	10c00845 	stb	r3,33(r2)
  812eb0:	00002906 	br	812f58 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  812eb4:	d0e01117 	ldw	r3,-32700(gp)
  812eb8:	e0bff907 	ldb	r2,-28(fp)
  812ebc:	10800044 	addi	r2,r2,1
  812ec0:	1885883a 	add	r2,r3,r2
  812ec4:	10800003 	ldbu	r2,0(r2)
  812ec8:	10803fcc 	andi	r2,r2,255
  812ecc:	1080201c 	xori	r2,r2,128
  812ed0:	10bfe004 	addi	r2,r2,-128
  812ed4:	108025cc 	andi	r2,r2,151
  812ed8:	10001f26 	beq	r2,zero,812f58 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  812edc:	e0bffc17 	ldw	r2,-16(fp)
  812ee0:	10800883 	ldbu	r2,34(r2)
  812ee4:	10803fcc 	andi	r2,r2,255
  812ee8:	108000b0 	cmpltui	r2,r2,2
  812eec:	1000021e 	bne	r2,zero,812ef8 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  812ef0:	e13ffc17 	ldw	r4,-16(fp)
  812ef4:	08129480 	call	812948 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  812ef8:	e0bffc17 	ldw	r2,-16(fp)
  812efc:	10800843 	ldbu	r2,33(r2)
  812f00:	10803fcc 	andi	r2,r2,255
  812f04:	10801428 	cmpgeui	r2,r2,80
  812f08:	10000d1e 	bne	r2,zero,812f40 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  812f0c:	e0bffc17 	ldw	r2,-16(fp)
  812f10:	10800883 	ldbu	r2,34(r2)
  812f14:	10c03fcc 	andi	r3,r2,255
  812f18:	e0bffc17 	ldw	r2,-16(fp)
  812f1c:	10800843 	ldbu	r2,33(r2)
  812f20:	10803fcc 	andi	r2,r2,255
  812f24:	e13ffc17 	ldw	r4,-16(fp)
  812f28:	18c018e4 	muli	r3,r3,99
  812f2c:	20c7883a 	add	r3,r4,r3
  812f30:	1885883a 	add	r2,r3,r2
  812f34:	10801004 	addi	r2,r2,64
  812f38:	e0fff903 	ldbu	r3,-28(fp)
  812f3c:	10c00005 	stb	r3,0(r2)

      sp->x++;
  812f40:	e0bffc17 	ldw	r2,-16(fp)
  812f44:	10800843 	ldbu	r2,33(r2)
  812f48:	10800044 	addi	r2,r2,1
  812f4c:	1007883a 	mov	r3,r2
  812f50:	e0bffc17 	ldw	r2,-16(fp)
  812f54:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  812f58:	e0bffd17 	ldw	r2,-12(fp)
  812f5c:	10800044 	addi	r2,r2,1
  812f60:	e0bffd15 	stw	r2,-12(fp)
  812f64:	e0fffd17 	ldw	r3,-12(fp)
  812f68:	e0bff817 	ldw	r2,-32(fp)
  812f6c:	18bf6436 	bltu	r3,r2,812d00 <__alt_mem_onchip_mem+0xff792d00>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  812f70:	00800404 	movi	r2,16
  812f74:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  812f78:	e03ff515 	stw	zero,-44(fp)
  812f7c:	00003706 	br	81305c <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812f80:	00801404 	movi	r2,80
  812f84:	e0bff715 	stw	r2,-36(fp)
  812f88:	00001106 	br	812fd0 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  812f8c:	e0bff717 	ldw	r2,-36(fp)
  812f90:	10bfffc4 	addi	r2,r2,-1
  812f94:	e13ffc17 	ldw	r4,-16(fp)
  812f98:	e0fff517 	ldw	r3,-44(fp)
  812f9c:	18c018e4 	muli	r3,r3,99
  812fa0:	20c7883a 	add	r3,r4,r3
  812fa4:	1885883a 	add	r2,r3,r2
  812fa8:	10801004 	addi	r2,r2,64
  812fac:	10800003 	ldbu	r2,0(r2)
  812fb0:	10803fcc 	andi	r2,r2,255
  812fb4:	1080201c 	xori	r2,r2,128
  812fb8:	10bfe004 	addi	r2,r2,-128
  812fbc:	10800820 	cmpeqi	r2,r2,32
  812fc0:	10000626 	beq	r2,zero,812fdc <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  812fc4:	e0bff717 	ldw	r2,-36(fp)
  812fc8:	10bfffc4 	addi	r2,r2,-1
  812fcc:	e0bff715 	stw	r2,-36(fp)
  812fd0:	e0bff717 	ldw	r2,-36(fp)
  812fd4:	00bfed16 	blt	zero,r2,812f8c <__alt_mem_onchip_mem+0xff792f8c>
  812fd8:	00000106 	br	812fe0 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  812fdc:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  812fe0:	e0bff717 	ldw	r2,-36(fp)
  812fe4:	10800448 	cmpgei	r2,r2,17
  812fe8:	1000031e 	bne	r2,zero,812ff8 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  812fec:	00800404 	movi	r2,16
  812ff0:	e0bff715 	stw	r2,-36(fp)
  812ff4:	00000306 	br	813004 <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  812ff8:	e0bff717 	ldw	r2,-36(fp)
  812ffc:	10800044 	addi	r2,r2,1
  813000:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  813004:	e0bff717 	ldw	r2,-36(fp)
  813008:	1009883a 	mov	r4,r2
  81300c:	e0fffc17 	ldw	r3,-16(fp)
  813010:	e0bff517 	ldw	r2,-44(fp)
  813014:	108018e4 	muli	r2,r2,99
  813018:	1885883a 	add	r2,r3,r2
  81301c:	10802444 	addi	r2,r2,145
  813020:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  813024:	e0fff617 	ldw	r3,-40(fp)
  813028:	e0bff717 	ldw	r2,-36(fp)
  81302c:	1880020e 	bge	r3,r2,813038 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  813030:	e0bff717 	ldw	r2,-36(fp)
  813034:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  813038:	e0fffc17 	ldw	r3,-16(fp)
  81303c:	e0bff517 	ldw	r2,-44(fp)
  813040:	108018e4 	muli	r2,r2,99
  813044:	1885883a 	add	r2,r3,r2
  813048:	10802484 	addi	r2,r2,146
  81304c:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813050:	e0bff517 	ldw	r2,-44(fp)
  813054:	10800044 	addi	r2,r2,1
  813058:	e0bff515 	stw	r2,-44(fp)
  81305c:	e0bff517 	ldw	r2,-44(fp)
  813060:	10800090 	cmplti	r2,r2,2
  813064:	103fc61e 	bne	r2,zero,812f80 <__alt_mem_onchip_mem+0xff792f80>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  813068:	e0bff617 	ldw	r2,-40(fp)
  81306c:	10800448 	cmpgei	r2,r2,17
  813070:	1000031e 	bne	r2,zero,813080 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  813074:	e0bffc17 	ldw	r2,-16(fp)
  813078:	10000985 	stb	zero,38(r2)
  81307c:	00002e06 	br	813138 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  813080:	e0bff617 	ldw	r2,-40(fp)
  813084:	1085883a 	add	r2,r2,r2
  813088:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  81308c:	e0bff617 	ldw	r2,-40(fp)
  813090:	1007883a 	mov	r3,r2
  813094:	e0bffc17 	ldw	r2,-16(fp)
  813098:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  81309c:	e03ff515 	stw	zero,-44(fp)
  8130a0:	00002206 	br	81312c <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  8130a4:	e0fffc17 	ldw	r3,-16(fp)
  8130a8:	e0bff517 	ldw	r2,-44(fp)
  8130ac:	108018e4 	muli	r2,r2,99
  8130b0:	1885883a 	add	r2,r3,r2
  8130b4:	10802444 	addi	r2,r2,145
  8130b8:	10800003 	ldbu	r2,0(r2)
  8130bc:	10803fcc 	andi	r2,r2,255
  8130c0:	1080201c 	xori	r2,r2,128
  8130c4:	10bfe004 	addi	r2,r2,-128
  8130c8:	10800450 	cmplti	r2,r2,17
  8130cc:	1000141e 	bne	r2,zero,813120 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  8130d0:	e0fffc17 	ldw	r3,-16(fp)
  8130d4:	e0bff517 	ldw	r2,-44(fp)
  8130d8:	108018e4 	muli	r2,r2,99
  8130dc:	1885883a 	add	r2,r3,r2
  8130e0:	10802444 	addi	r2,r2,145
  8130e4:	10800003 	ldbu	r2,0(r2)
  8130e8:	10803fcc 	andi	r2,r2,255
  8130ec:	1080201c 	xori	r2,r2,128
  8130f0:	10bfe004 	addi	r2,r2,-128
  8130f4:	1004923a 	slli	r2,r2,8
  8130f8:	e17ff617 	ldw	r5,-40(fp)
  8130fc:	1009883a 	mov	r4,r2
  813100:	080e2b40 	call	80e2b4 <__divsi3>
  813104:	1009883a 	mov	r4,r2
  813108:	e0fffc17 	ldw	r3,-16(fp)
  81310c:	e0bff517 	ldw	r2,-44(fp)
  813110:	108018e4 	muli	r2,r2,99
  813114:	1885883a 	add	r2,r3,r2
  813118:	10802484 	addi	r2,r2,146
  81311c:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  813120:	e0bff517 	ldw	r2,-44(fp)
  813124:	10800044 	addi	r2,r2,1
  813128:	e0bff515 	stw	r2,-44(fp)
  81312c:	e0bff517 	ldw	r2,-44(fp)
  813130:	10800090 	cmplti	r2,r2,2
  813134:	103fdb1e 	bne	r2,zero,8130a4 <__alt_mem_onchip_mem+0xff7930a4>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  813138:	e0bffc17 	ldw	r2,-16(fp)
  81313c:	10800943 	ldbu	r2,37(r2)
  813140:	10803fcc 	andi	r2,r2,255
  813144:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  813148:	e13ffc17 	ldw	r4,-16(fp)
  81314c:	081275c0 	call	81275c <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  813150:	e0bffc17 	ldw	r2,-16(fp)
  813154:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  813158:	e0bffc17 	ldw	r2,-16(fp)
  81315c:	10800943 	ldbu	r2,37(r2)
  813160:	10c03fcc 	andi	r3,r2,255
  813164:	e0bffb17 	ldw	r2,-20(fp)
  813168:	18800426 	beq	r3,r2,81317c <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  81316c:	e0bffc17 	ldw	r2,-16(fp)
  813170:	00c00044 	movi	r3,1
  813174:	10c009c5 	stb	r3,39(r2)
  }
  813178:	003fef06 	br	813138 <__alt_mem_onchip_mem+0xff793138>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  81317c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  813180:	e0bffe17 	ldw	r2,-8(fp)
}
  813184:	e037883a 	mov	sp,fp
  813188:	dfc00117 	ldw	ra,4(sp)
  81318c:	df000017 	ldw	fp,0(sp)
  813190:	dec00204 	addi	sp,sp,8
  813194:	f800283a 	ret

00813198 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  813198:	defffc04 	addi	sp,sp,-16
  81319c:	dfc00315 	stw	ra,12(sp)
  8131a0:	df000215 	stw	fp,8(sp)
  8131a4:	df000204 	addi	fp,sp,8
  8131a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  8131ac:	e0bfff17 	ldw	r2,-4(fp)
  8131b0:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  8131b4:	e0bffe17 	ldw	r2,-8(fp)
  8131b8:	10800943 	ldbu	r2,37(r2)
  8131bc:	10803fcc 	andi	r2,r2,255
  8131c0:	10c00044 	addi	r3,r2,1
  8131c4:	e0bffe17 	ldw	r2,-8(fp)
  8131c8:	10800983 	ldbu	r2,38(r2)
  8131cc:	10803fcc 	andi	r2,r2,255
  8131d0:	18800316 	blt	r3,r2,8131e0 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  8131d4:	e0bffe17 	ldw	r2,-8(fp)
  8131d8:	10000945 	stb	zero,37(r2)
  8131dc:	00000606 	br	8131f8 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  8131e0:	e0bffe17 	ldw	r2,-8(fp)
  8131e4:	10800943 	ldbu	r2,37(r2)
  8131e8:	10800044 	addi	r2,r2,1
  8131ec:	1007883a 	mov	r3,r2
  8131f0:	e0bffe17 	ldw	r2,-8(fp)
  8131f4:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  8131f8:	e0bffe17 	ldw	r2,-8(fp)
  8131fc:	10800983 	ldbu	r2,38(r2)
  813200:	10803fcc 	andi	r2,r2,255
  813204:	10000826 	beq	r2,zero,813228 <alt_lcd_16207_timeout+0x90>
  813208:	e0bffe17 	ldw	r2,-8(fp)
  81320c:	108009c3 	ldbu	r2,39(r2)
  813210:	10803fcc 	andi	r2,r2,255
  813214:	1080201c 	xori	r2,r2,128
  813218:	10bfe004 	addi	r2,r2,-128
  81321c:	1000021e 	bne	r2,zero,813228 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  813220:	e13ffe17 	ldw	r4,-8(fp)
  813224:	081275c0 	call	81275c <lcd_repaint_screen>

  return sp->period;
  813228:	e0bffe17 	ldw	r2,-8(fp)
  81322c:	10800717 	ldw	r2,28(r2)
}
  813230:	e037883a 	mov	sp,fp
  813234:	dfc00117 	ldw	ra,4(sp)
  813238:	df000017 	ldw	fp,0(sp)
  81323c:	dec00204 	addi	sp,sp,8
  813240:	f800283a 	ret

00813244 <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  813244:	defffc04 	addi	sp,sp,-16
  813248:	dfc00315 	stw	ra,12(sp)
  81324c:	df000215 	stw	fp,8(sp)
  813250:	df000204 	addi	fp,sp,8
  813254:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  813258:	e0bfff17 	ldw	r2,-4(fp)
  81325c:	10800017 	ldw	r2,0(r2)
  813260:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  813264:	e0bfff17 	ldw	r2,-4(fp)
  813268:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  81326c:	010ea604 	movi	r4,15000
  813270:	08147080 	call	814708 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813274:	e0bffe17 	ldw	r2,-8(fp)
  813278:	00c00c04 	movi	r3,48
  81327c:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  813280:	01040104 	movi	r4,4100
  813284:	08147080 	call	814708 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  813288:	e0bffe17 	ldw	r2,-8(fp)
  81328c:	00c00c04 	movi	r3,48
  813290:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  813294:	0100fa04 	movi	r4,1000
  813298:	08147080 	call	814708 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  81329c:	e0bffe17 	ldw	r2,-8(fp)
  8132a0:	00c00c04 	movi	r3,48
  8132a4:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  8132a8:	01400e04 	movi	r5,56
  8132ac:	e13fff17 	ldw	r4,-4(fp)
  8132b0:	08124fc0 	call	8124fc <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  8132b4:	01400204 	movi	r5,8
  8132b8:	e13fff17 	ldw	r4,-4(fp)
  8132bc:	08124fc0 	call	8124fc <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  8132c0:	e13fff17 	ldw	r4,-4(fp)
  8132c4:	081268c0 	call	81268c <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  8132c8:	01400184 	movi	r5,6
  8132cc:	e13fff17 	ldw	r4,-4(fp)
  8132d0:	08124fc0 	call	8124fc <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  8132d4:	01400304 	movi	r5,12
  8132d8:	e13fff17 	ldw	r4,-4(fp)
  8132dc:	08124fc0 	call	8124fc <lcd_write_command>

  sp->esccount = -1;
  8132e0:	e0bfff17 	ldw	r2,-4(fp)
  8132e4:	00ffffc4 	movi	r3,-1
  8132e8:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  8132ec:	e0bfff17 	ldw	r2,-4(fp)
  8132f0:	10800a04 	addi	r2,r2,40
  8132f4:	01800204 	movi	r6,8
  8132f8:	000b883a 	mov	r5,zero
  8132fc:	1009883a 	mov	r4,r2
  813300:	08048d80 	call	8048d8 <memset>

  sp->scrollpos = 0;
  813304:	e0bfff17 	ldw	r2,-4(fp)
  813308:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  81330c:	e0bfff17 	ldw	r2,-4(fp)
  813310:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  813314:	e0bfff17 	ldw	r2,-4(fp)
  813318:	100009c5 	stb	zero,39(r2)
  81331c:	d0a7af17 	ldw	r2,-24900(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  813320:	01400284 	movi	r5,10
  813324:	1009883a 	mov	r4,r2
  813328:	080e3ac0 	call	80e3ac <__udivsi3>
  81332c:	1007883a 	mov	r3,r2
  813330:	e0bfff17 	ldw	r2,-4(fp)
  813334:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  813338:	e0bfff17 	ldw	r2,-4(fp)
  81333c:	10c00104 	addi	r3,r2,4
  813340:	e0bfff17 	ldw	r2,-4(fp)
  813344:	10800717 	ldw	r2,28(r2)
  813348:	e1ffff17 	ldw	r7,-4(fp)
  81334c:	01802074 	movhi	r6,129
  813350:	318c6604 	addi	r6,r6,12696
  813354:	100b883a 	mov	r5,r2
  813358:	1809883a 	mov	r4,r3
  81335c:	0813da40 	call	813da4 <alt_alarm_start>
}
  813360:	0001883a 	nop
  813364:	e037883a 	mov	sp,fp
  813368:	dfc00117 	ldw	ra,4(sp)
  81336c:	df000017 	ldw	fp,0(sp)
  813370:	dec00204 	addi	sp,sp,8
  813374:	f800283a 	ret

00813378 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  813378:	defffa04 	addi	sp,sp,-24
  81337c:	dfc00515 	stw	ra,20(sp)
  813380:	df000415 	stw	fp,16(sp)
  813384:	df000404 	addi	fp,sp,16
  813388:	e13ffd15 	stw	r4,-12(fp)
  81338c:	e17ffe15 	stw	r5,-8(fp)
  813390:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  813394:	e0bffd17 	ldw	r2,-12(fp)
  813398:	10800017 	ldw	r2,0(r2)
  81339c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  8133a0:	e0bffc17 	ldw	r2,-16(fp)
  8133a4:	10c00a04 	addi	r3,r2,40
  8133a8:	e0bffd17 	ldw	r2,-12(fp)
  8133ac:	10800217 	ldw	r2,8(r2)
  8133b0:	100f883a 	mov	r7,r2
  8133b4:	e1bfff17 	ldw	r6,-4(fp)
  8133b8:	e17ffe17 	ldw	r5,-8(fp)
  8133bc:	1809883a 	mov	r4,r3
  8133c0:	0812cc00 	call	812cc0 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  8133c4:	e037883a 	mov	sp,fp
  8133c8:	dfc00117 	ldw	ra,4(sp)
  8133cc:	df000017 	ldw	fp,0(sp)
  8133d0:	dec00204 	addi	sp,sp,8
  8133d4:	f800283a 	ret

008133d8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  8133d8:	defffa04 	addi	sp,sp,-24
  8133dc:	dfc00515 	stw	ra,20(sp)
  8133e0:	df000415 	stw	fp,16(sp)
  8133e4:	df000404 	addi	fp,sp,16
  8133e8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  8133ec:	0007883a 	mov	r3,zero
  8133f0:	e0bfff17 	ldw	r2,-4(fp)
  8133f4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  8133f8:	e0bfff17 	ldw	r2,-4(fp)
  8133fc:	10800104 	addi	r2,r2,4
  813400:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813404:	0005303a 	rdctl	r2,status
  813408:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81340c:	e0fffd17 	ldw	r3,-12(fp)
  813410:	00bfff84 	movi	r2,-2
  813414:	1884703a 	and	r2,r3,r2
  813418:	1001703a 	wrctl	status,r2
  
  return context;
  81341c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813420:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  813424:	08117500 	call	811750 <alt_tick>
  813428:	e0bffc17 	ldw	r2,-16(fp)
  81342c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813430:	e0bffe17 	ldw	r2,-8(fp)
  813434:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813438:	0001883a 	nop
  81343c:	e037883a 	mov	sp,fp
  813440:	dfc00117 	ldw	ra,4(sp)
  813444:	df000017 	ldw	fp,0(sp)
  813448:	dec00204 	addi	sp,sp,8
  81344c:	f800283a 	ret

00813450 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813450:	defff804 	addi	sp,sp,-32
  813454:	dfc00715 	stw	ra,28(sp)
  813458:	df000615 	stw	fp,24(sp)
  81345c:	df000604 	addi	fp,sp,24
  813460:	e13ffc15 	stw	r4,-16(fp)
  813464:	e17ffd15 	stw	r5,-12(fp)
  813468:	e1bffe15 	stw	r6,-8(fp)
  81346c:	e1ffff15 	stw	r7,-4(fp)
  813470:	e0bfff17 	ldw	r2,-4(fp)
  813474:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813478:	d0a7af17 	ldw	r2,-24900(gp)
  81347c:	1000021e 	bne	r2,zero,813488 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  813480:	e0bffb17 	ldw	r2,-20(fp)
  813484:	d0a7af15 	stw	r2,-24900(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813488:	e0bffc17 	ldw	r2,-16(fp)
  81348c:	10800104 	addi	r2,r2,4
  813490:	00c001c4 	movi	r3,7
  813494:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  813498:	d8000015 	stw	zero,0(sp)
  81349c:	e1fffc17 	ldw	r7,-16(fp)
  8134a0:	01802074 	movhi	r6,129
  8134a4:	318cf604 	addi	r6,r6,13272
  8134a8:	e17ffe17 	ldw	r5,-8(fp)
  8134ac:	e13ffd17 	ldw	r4,-12(fp)
  8134b0:	08143280 	call	814328 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8134b4:	0001883a 	nop
  8134b8:	e037883a 	mov	sp,fp
  8134bc:	dfc00117 	ldw	ra,4(sp)
  8134c0:	df000017 	ldw	fp,0(sp)
  8134c4:	dec00204 	addi	sp,sp,8
  8134c8:	f800283a 	ret

008134cc <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8134cc:	defffa04 	addi	sp,sp,-24
  8134d0:	dfc00515 	stw	ra,20(sp)
  8134d4:	df000415 	stw	fp,16(sp)
  8134d8:	df000404 	addi	fp,sp,16
  8134dc:	e13ffd15 	stw	r4,-12(fp)
  8134e0:	e17ffe15 	stw	r5,-8(fp)
  8134e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8134e8:	e0bffd17 	ldw	r2,-12(fp)
  8134ec:	10800017 	ldw	r2,0(r2)
  8134f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  8134f4:	e0bffc17 	ldw	r2,-16(fp)
  8134f8:	10c00a04 	addi	r3,r2,40
  8134fc:	e0bffd17 	ldw	r2,-12(fp)
  813500:	10800217 	ldw	r2,8(r2)
  813504:	100f883a 	mov	r7,r2
  813508:	e1bfff17 	ldw	r6,-4(fp)
  81350c:	e17ffe17 	ldw	r5,-8(fp)
  813510:	1809883a 	mov	r4,r3
  813514:	08139e00 	call	8139e0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  813518:	e037883a 	mov	sp,fp
  81351c:	dfc00117 	ldw	ra,4(sp)
  813520:	df000017 	ldw	fp,0(sp)
  813524:	dec00204 	addi	sp,sp,8
  813528:	f800283a 	ret

0081352c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  81352c:	defffa04 	addi	sp,sp,-24
  813530:	dfc00515 	stw	ra,20(sp)
  813534:	df000415 	stw	fp,16(sp)
  813538:	df000404 	addi	fp,sp,16
  81353c:	e13ffd15 	stw	r4,-12(fp)
  813540:	e17ffe15 	stw	r5,-8(fp)
  813544:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  813548:	e0bffd17 	ldw	r2,-12(fp)
  81354c:	10800017 	ldw	r2,0(r2)
  813550:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  813554:	e0bffc17 	ldw	r2,-16(fp)
  813558:	10c00a04 	addi	r3,r2,40
  81355c:	e0bffd17 	ldw	r2,-12(fp)
  813560:	10800217 	ldw	r2,8(r2)
  813564:	100f883a 	mov	r7,r2
  813568:	e1bfff17 	ldw	r6,-4(fp)
  81356c:	e17ffe17 	ldw	r5,-8(fp)
  813570:	1809883a 	mov	r4,r3
  813574:	0813bf80 	call	813bf8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  813578:	e037883a 	mov	sp,fp
  81357c:	dfc00117 	ldw	ra,4(sp)
  813580:	df000017 	ldw	fp,0(sp)
  813584:	dec00204 	addi	sp,sp,8
  813588:	f800283a 	ret

0081358c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  81358c:	defffc04 	addi	sp,sp,-16
  813590:	dfc00315 	stw	ra,12(sp)
  813594:	df000215 	stw	fp,8(sp)
  813598:	df000204 	addi	fp,sp,8
  81359c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  8135a0:	e0bfff17 	ldw	r2,-4(fp)
  8135a4:	10800017 	ldw	r2,0(r2)
  8135a8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  8135ac:	e0bffe17 	ldw	r2,-8(fp)
  8135b0:	10c00a04 	addi	r3,r2,40
  8135b4:	e0bfff17 	ldw	r2,-4(fp)
  8135b8:	10800217 	ldw	r2,8(r2)
  8135bc:	100b883a 	mov	r5,r2
  8135c0:	1809883a 	mov	r4,r3
  8135c4:	08139500 	call	813950 <altera_avalon_uart_close>
}
  8135c8:	e037883a 	mov	sp,fp
  8135cc:	dfc00117 	ldw	ra,4(sp)
  8135d0:	df000017 	ldw	fp,0(sp)
  8135d4:	dec00204 	addi	sp,sp,8
  8135d8:	f800283a 	ret

008135dc <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  8135dc:	defff804 	addi	sp,sp,-32
  8135e0:	dfc00715 	stw	ra,28(sp)
  8135e4:	df000615 	stw	fp,24(sp)
  8135e8:	df000604 	addi	fp,sp,24
  8135ec:	e13ffd15 	stw	r4,-12(fp)
  8135f0:	e17ffe15 	stw	r5,-8(fp)
  8135f4:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  8135f8:	e0bffd17 	ldw	r2,-12(fp)
  8135fc:	10800017 	ldw	r2,0(r2)
  813600:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  813604:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  813608:	1000041e 	bne	r2,zero,81361c <altera_avalon_uart_init+0x40>
  81360c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  813610:	1000021e 	bne	r2,zero,81361c <altera_avalon_uart_init+0x40>
  813614:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  813618:	10000226 	beq	r2,zero,813624 <altera_avalon_uart_init+0x48>
  81361c:	00800044 	movi	r2,1
  813620:	00000106 	br	813628 <altera_avalon_uart_init+0x4c>
  813624:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  813628:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  81362c:	e0bffc17 	ldw	r2,-16(fp)
  813630:	10000f1e 	bne	r2,zero,813670 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  813634:	e0bffd17 	ldw	r2,-12(fp)
  813638:	00c32004 	movi	r3,3200
  81363c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  813640:	e0bffb17 	ldw	r2,-20(fp)
  813644:	10800304 	addi	r2,r2,12
  813648:	e0fffd17 	ldw	r3,-12(fp)
  81364c:	18c00117 	ldw	r3,4(r3)
  813650:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  813654:	d8000015 	stw	zero,0(sp)
  813658:	e1fffd17 	ldw	r7,-12(fp)
  81365c:	01802074 	movhi	r6,129
  813660:	318da204 	addi	r6,r6,13960
  813664:	e17fff17 	ldw	r5,-4(fp)
  813668:	e13ffe17 	ldw	r4,-8(fp)
  81366c:	08143280 	call	814328 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  813670:	0001883a 	nop
  813674:	e037883a 	mov	sp,fp
  813678:	dfc00117 	ldw	ra,4(sp)
  81367c:	df000017 	ldw	fp,0(sp)
  813680:	dec00204 	addi	sp,sp,8
  813684:	f800283a 	ret

00813688 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  813688:	defffa04 	addi	sp,sp,-24
  81368c:	dfc00515 	stw	ra,20(sp)
  813690:	df000415 	stw	fp,16(sp)
  813694:	df000404 	addi	fp,sp,16
  813698:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  81369c:	e0bfff17 	ldw	r2,-4(fp)
  8136a0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  8136a4:	e0bffc17 	ldw	r2,-16(fp)
  8136a8:	10800017 	ldw	r2,0(r2)
  8136ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  8136b0:	e0bffd17 	ldw	r2,-12(fp)
  8136b4:	10800204 	addi	r2,r2,8
  8136b8:	10800037 	ldwio	r2,0(r2)
  8136bc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  8136c0:	e0bffd17 	ldw	r2,-12(fp)
  8136c4:	10800204 	addi	r2,r2,8
  8136c8:	0007883a 	mov	r3,zero
  8136cc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  8136d0:	e0bffd17 	ldw	r2,-12(fp)
  8136d4:	10800204 	addi	r2,r2,8
  8136d8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  8136dc:	e0bffe17 	ldw	r2,-8(fp)
  8136e0:	1080200c 	andi	r2,r2,128
  8136e4:	10000326 	beq	r2,zero,8136f4 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  8136e8:	e17ffe17 	ldw	r5,-8(fp)
  8136ec:	e13ffc17 	ldw	r4,-16(fp)
  8136f0:	08137240 	call	813724 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  8136f4:	e0bffe17 	ldw	r2,-8(fp)
  8136f8:	1081100c 	andi	r2,r2,1088
  8136fc:	10000326 	beq	r2,zero,81370c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  813700:	e17ffe17 	ldw	r5,-8(fp)
  813704:	e13ffc17 	ldw	r4,-16(fp)
  813708:	08138080 	call	813808 <altera_avalon_uart_txirq>
  }
  

}
  81370c:	0001883a 	nop
  813710:	e037883a 	mov	sp,fp
  813714:	dfc00117 	ldw	ra,4(sp)
  813718:	df000017 	ldw	fp,0(sp)
  81371c:	dec00204 	addi	sp,sp,8
  813720:	f800283a 	ret

00813724 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813724:	defffc04 	addi	sp,sp,-16
  813728:	df000315 	stw	fp,12(sp)
  81372c:	df000304 	addi	fp,sp,12
  813730:	e13ffe15 	stw	r4,-8(fp)
  813734:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  813738:	e0bfff17 	ldw	r2,-4(fp)
  81373c:	108000cc 	andi	r2,r2,3
  813740:	10002c1e 	bne	r2,zero,8137f4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  813744:	e0bffe17 	ldw	r2,-8(fp)
  813748:	10800317 	ldw	r2,12(r2)
  81374c:	e0bffe17 	ldw	r2,-8(fp)
  813750:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813754:	e0bffe17 	ldw	r2,-8(fp)
  813758:	10800317 	ldw	r2,12(r2)
  81375c:	10800044 	addi	r2,r2,1
  813760:	10800fcc 	andi	r2,r2,63
  813764:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  813768:	e0bffe17 	ldw	r2,-8(fp)
  81376c:	10800317 	ldw	r2,12(r2)
  813770:	e0fffe17 	ldw	r3,-8(fp)
  813774:	18c00017 	ldw	r3,0(r3)
  813778:	18c00037 	ldwio	r3,0(r3)
  81377c:	1809883a 	mov	r4,r3
  813780:	e0fffe17 	ldw	r3,-8(fp)
  813784:	1885883a 	add	r2,r3,r2
  813788:	10800704 	addi	r2,r2,28
  81378c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  813790:	e0bffe17 	ldw	r2,-8(fp)
  813794:	e0fffd17 	ldw	r3,-12(fp)
  813798:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  81379c:	e0bffe17 	ldw	r2,-8(fp)
  8137a0:	10800317 	ldw	r2,12(r2)
  8137a4:	10800044 	addi	r2,r2,1
  8137a8:	10800fcc 	andi	r2,r2,63
  8137ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  8137b0:	e0bffe17 	ldw	r2,-8(fp)
  8137b4:	10c00217 	ldw	r3,8(r2)
  8137b8:	e0bffd17 	ldw	r2,-12(fp)
  8137bc:	18800e1e 	bne	r3,r2,8137f8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  8137c0:	e0bffe17 	ldw	r2,-8(fp)
  8137c4:	10c00117 	ldw	r3,4(r2)
  8137c8:	00bfdfc4 	movi	r2,-129
  8137cc:	1886703a 	and	r3,r3,r2
  8137d0:	e0bffe17 	ldw	r2,-8(fp)
  8137d4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  8137d8:	e0bffe17 	ldw	r2,-8(fp)
  8137dc:	10800017 	ldw	r2,0(r2)
  8137e0:	10800304 	addi	r2,r2,12
  8137e4:	e0fffe17 	ldw	r3,-8(fp)
  8137e8:	18c00117 	ldw	r3,4(r3)
  8137ec:	10c00035 	stwio	r3,0(r2)
  8137f0:	00000106 	br	8137f8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  8137f4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  8137f8:	e037883a 	mov	sp,fp
  8137fc:	df000017 	ldw	fp,0(sp)
  813800:	dec00104 	addi	sp,sp,4
  813804:	f800283a 	ret

00813808 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  813808:	defffb04 	addi	sp,sp,-20
  81380c:	df000415 	stw	fp,16(sp)
  813810:	df000404 	addi	fp,sp,16
  813814:	e13ffc15 	stw	r4,-16(fp)
  813818:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  81381c:	e0bffc17 	ldw	r2,-16(fp)
  813820:	10c00417 	ldw	r3,16(r2)
  813824:	e0bffc17 	ldw	r2,-16(fp)
  813828:	10800517 	ldw	r2,20(r2)
  81382c:	18803226 	beq	r3,r2,8138f8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813830:	e0bffc17 	ldw	r2,-16(fp)
  813834:	10800617 	ldw	r2,24(r2)
  813838:	1080008c 	andi	r2,r2,2
  81383c:	10000326 	beq	r2,zero,81384c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  813840:	e0bffd17 	ldw	r2,-12(fp)
  813844:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  813848:	10001d26 	beq	r2,zero,8138c0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  81384c:	e0bffc17 	ldw	r2,-16(fp)
  813850:	10800417 	ldw	r2,16(r2)
  813854:	e0bffc17 	ldw	r2,-16(fp)
  813858:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  81385c:	e0bffc17 	ldw	r2,-16(fp)
  813860:	10800017 	ldw	r2,0(r2)
  813864:	10800104 	addi	r2,r2,4
  813868:	e0fffc17 	ldw	r3,-16(fp)
  81386c:	18c00417 	ldw	r3,16(r3)
  813870:	e13ffc17 	ldw	r4,-16(fp)
  813874:	20c7883a 	add	r3,r4,r3
  813878:	18c01704 	addi	r3,r3,92
  81387c:	18c00003 	ldbu	r3,0(r3)
  813880:	18c03fcc 	andi	r3,r3,255
  813884:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  813888:	e0bffc17 	ldw	r2,-16(fp)
  81388c:	10800417 	ldw	r2,16(r2)
  813890:	10800044 	addi	r2,r2,1
  813894:	e0fffc17 	ldw	r3,-16(fp)
  813898:	18800415 	stw	r2,16(r3)
  81389c:	10c00fcc 	andi	r3,r2,63
  8138a0:	e0bffc17 	ldw	r2,-16(fp)
  8138a4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8138a8:	e0bffc17 	ldw	r2,-16(fp)
  8138ac:	10800117 	ldw	r2,4(r2)
  8138b0:	10c01014 	ori	r3,r2,64
  8138b4:	e0bffc17 	ldw	r2,-16(fp)
  8138b8:	10c00115 	stw	r3,4(r2)
  8138bc:	00000e06 	br	8138f8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  8138c0:	e0bffc17 	ldw	r2,-16(fp)
  8138c4:	10800017 	ldw	r2,0(r2)
  8138c8:	10800204 	addi	r2,r2,8
  8138cc:	10800037 	ldwio	r2,0(r2)
  8138d0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  8138d4:	e0bffd17 	ldw	r2,-12(fp)
  8138d8:	1082000c 	andi	r2,r2,2048
  8138dc:	1000061e 	bne	r2,zero,8138f8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  8138e0:	e0bffc17 	ldw	r2,-16(fp)
  8138e4:	10c00117 	ldw	r3,4(r2)
  8138e8:	00bfefc4 	movi	r2,-65
  8138ec:	1886703a 	and	r3,r3,r2
  8138f0:	e0bffc17 	ldw	r2,-16(fp)
  8138f4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  8138f8:	e0bffc17 	ldw	r2,-16(fp)
  8138fc:	10c00417 	ldw	r3,16(r2)
  813900:	e0bffc17 	ldw	r2,-16(fp)
  813904:	10800517 	ldw	r2,20(r2)
  813908:	1880061e 	bne	r3,r2,813924 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  81390c:	e0bffc17 	ldw	r2,-16(fp)
  813910:	10c00117 	ldw	r3,4(r2)
  813914:	00beefc4 	movi	r2,-1089
  813918:	1886703a 	and	r3,r3,r2
  81391c:	e0bffc17 	ldw	r2,-16(fp)
  813920:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813924:	e0bffc17 	ldw	r2,-16(fp)
  813928:	10800017 	ldw	r2,0(r2)
  81392c:	10800304 	addi	r2,r2,12
  813930:	e0fffc17 	ldw	r3,-16(fp)
  813934:	18c00117 	ldw	r3,4(r3)
  813938:	10c00035 	stwio	r3,0(r2)
}
  81393c:	0001883a 	nop
  813940:	e037883a 	mov	sp,fp
  813944:	df000017 	ldw	fp,0(sp)
  813948:	dec00104 	addi	sp,sp,4
  81394c:	f800283a 	ret

00813950 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  813950:	defffd04 	addi	sp,sp,-12
  813954:	df000215 	stw	fp,8(sp)
  813958:	df000204 	addi	fp,sp,8
  81395c:	e13ffe15 	stw	r4,-8(fp)
  813960:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  813964:	00000506 	br	81397c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  813968:	e0bfff17 	ldw	r2,-4(fp)
  81396c:	1090000c 	andi	r2,r2,16384
  813970:	10000226 	beq	r2,zero,81397c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  813974:	00bffd44 	movi	r2,-11
  813978:	00000606 	br	813994 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  81397c:	e0bffe17 	ldw	r2,-8(fp)
  813980:	10c00417 	ldw	r3,16(r2)
  813984:	e0bffe17 	ldw	r2,-8(fp)
  813988:	10800517 	ldw	r2,20(r2)
  81398c:	18bff61e 	bne	r3,r2,813968 <__alt_mem_onchip_mem+0xff793968>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  813990:	0005883a 	mov	r2,zero
}
  813994:	e037883a 	mov	sp,fp
  813998:	df000017 	ldw	fp,0(sp)
  81399c:	dec00104 	addi	sp,sp,4
  8139a0:	f800283a 	ret

008139a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8139a4:	defffe04 	addi	sp,sp,-8
  8139a8:	dfc00115 	stw	ra,4(sp)
  8139ac:	df000015 	stw	fp,0(sp)
  8139b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8139b4:	d0a00b17 	ldw	r2,-32724(gp)
  8139b8:	10000326 	beq	r2,zero,8139c8 <alt_get_errno+0x24>
  8139bc:	d0a00b17 	ldw	r2,-32724(gp)
  8139c0:	103ee83a 	callr	r2
  8139c4:	00000106 	br	8139cc <alt_get_errno+0x28>
  8139c8:	d0a7a404 	addi	r2,gp,-24944
}
  8139cc:	e037883a 	mov	sp,fp
  8139d0:	dfc00117 	ldw	ra,4(sp)
  8139d4:	df000017 	ldw	fp,0(sp)
  8139d8:	dec00204 	addi	sp,sp,8
  8139dc:	f800283a 	ret

008139e0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  8139e0:	defff204 	addi	sp,sp,-56
  8139e4:	dfc00d15 	stw	ra,52(sp)
  8139e8:	df000c15 	stw	fp,48(sp)
  8139ec:	df000c04 	addi	fp,sp,48
  8139f0:	e13ffc15 	stw	r4,-16(fp)
  8139f4:	e17ffd15 	stw	r5,-12(fp)
  8139f8:	e1bffe15 	stw	r6,-8(fp)
  8139fc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  813a00:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  813a04:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  813a08:	e0bfff17 	ldw	r2,-4(fp)
  813a0c:	1090000c 	andi	r2,r2,16384
  813a10:	1005003a 	cmpeq	r2,r2,zero
  813a14:	10803fcc 	andi	r2,r2,255
  813a18:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813a1c:	00001306 	br	813a6c <altera_avalon_uart_read+0x8c>
    {
      count++;
  813a20:	e0bff517 	ldw	r2,-44(fp)
  813a24:	10800044 	addi	r2,r2,1
  813a28:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  813a2c:	e0bffd17 	ldw	r2,-12(fp)
  813a30:	10c00044 	addi	r3,r2,1
  813a34:	e0fffd15 	stw	r3,-12(fp)
  813a38:	e0fffc17 	ldw	r3,-16(fp)
  813a3c:	18c00217 	ldw	r3,8(r3)
  813a40:	e13ffc17 	ldw	r4,-16(fp)
  813a44:	20c7883a 	add	r3,r4,r3
  813a48:	18c00704 	addi	r3,r3,28
  813a4c:	18c00003 	ldbu	r3,0(r3)
  813a50:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  813a54:	e0bffc17 	ldw	r2,-16(fp)
  813a58:	10800217 	ldw	r2,8(r2)
  813a5c:	10800044 	addi	r2,r2,1
  813a60:	10c00fcc 	andi	r3,r2,63
  813a64:	e0bffc17 	ldw	r2,-16(fp)
  813a68:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  813a6c:	e0fff517 	ldw	r3,-44(fp)
  813a70:	e0bffe17 	ldw	r2,-8(fp)
  813a74:	1880050e 	bge	r3,r2,813a8c <altera_avalon_uart_read+0xac>
  813a78:	e0bffc17 	ldw	r2,-16(fp)
  813a7c:	10c00217 	ldw	r3,8(r2)
  813a80:	e0bffc17 	ldw	r2,-16(fp)
  813a84:	10800317 	ldw	r2,12(r2)
  813a88:	18bfe51e 	bne	r3,r2,813a20 <__alt_mem_onchip_mem+0xff793a20>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  813a8c:	e0bff517 	ldw	r2,-44(fp)
  813a90:	1000251e 	bne	r2,zero,813b28 <altera_avalon_uart_read+0x148>
  813a94:	e0bffc17 	ldw	r2,-16(fp)
  813a98:	10c00217 	ldw	r3,8(r2)
  813a9c:	e0bffc17 	ldw	r2,-16(fp)
  813aa0:	10800317 	ldw	r2,12(r2)
  813aa4:	1880201e 	bne	r3,r2,813b28 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  813aa8:	e0bff617 	ldw	r2,-40(fp)
  813aac:	1000071e 	bne	r2,zero,813acc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  813ab0:	08139a40 	call	8139a4 <alt_get_errno>
  813ab4:	1007883a 	mov	r3,r2
  813ab8:	008002c4 	movi	r2,11
  813abc:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  813ac0:	00800044 	movi	r2,1
  813ac4:	e0bff405 	stb	r2,-48(fp)
        break;
  813ac8:	00001b06 	br	813b38 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813acc:	0005303a 	rdctl	r2,status
  813ad0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813ad4:	e0fff917 	ldw	r3,-28(fp)
  813ad8:	00bfff84 	movi	r2,-2
  813adc:	1884703a 	and	r2,r3,r2
  813ae0:	1001703a 	wrctl	status,r2
  
  return context;
  813ae4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  813ae8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813aec:	e0bffc17 	ldw	r2,-16(fp)
  813af0:	10800117 	ldw	r2,4(r2)
  813af4:	10c02014 	ori	r3,r2,128
  813af8:	e0bffc17 	ldw	r2,-16(fp)
  813afc:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b00:	e0bffc17 	ldw	r2,-16(fp)
  813b04:	10800017 	ldw	r2,0(r2)
  813b08:	10800304 	addi	r2,r2,12
  813b0c:	e0fffc17 	ldw	r3,-16(fp)
  813b10:	18c00117 	ldw	r3,4(r3)
  813b14:	10c00035 	stwio	r3,0(r2)
  813b18:	e0bff817 	ldw	r2,-32(fp)
  813b1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b20:	e0bffa17 	ldw	r2,-24(fp)
  813b24:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  813b28:	e0bff517 	ldw	r2,-44(fp)
  813b2c:	1000021e 	bne	r2,zero,813b38 <altera_avalon_uart_read+0x158>
  813b30:	e0bffe17 	ldw	r2,-8(fp)
  813b34:	103fcd1e 	bne	r2,zero,813a6c <__alt_mem_onchip_mem+0xff793a6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813b38:	0005303a 	rdctl	r2,status
  813b3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b40:	e0fffb17 	ldw	r3,-20(fp)
  813b44:	00bfff84 	movi	r2,-2
  813b48:	1884703a 	and	r2,r3,r2
  813b4c:	1001703a 	wrctl	status,r2
  
  return context;
  813b50:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  813b54:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  813b58:	e0bffc17 	ldw	r2,-16(fp)
  813b5c:	10800117 	ldw	r2,4(r2)
  813b60:	10c02014 	ori	r3,r2,128
  813b64:	e0bffc17 	ldw	r2,-16(fp)
  813b68:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813b6c:	e0bffc17 	ldw	r2,-16(fp)
  813b70:	10800017 	ldw	r2,0(r2)
  813b74:	10800304 	addi	r2,r2,12
  813b78:	e0fffc17 	ldw	r3,-16(fp)
  813b7c:	18c00117 	ldw	r3,4(r3)
  813b80:	10c00035 	stwio	r3,0(r2)
  813b84:	e0bff817 	ldw	r2,-32(fp)
  813b88:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b8c:	e0bff717 	ldw	r2,-36(fp)
  813b90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  813b94:	e0bff403 	ldbu	r2,-48(fp)
  813b98:	10000226 	beq	r2,zero,813ba4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  813b9c:	00bffd44 	movi	r2,-11
  813ba0:	00000106 	br	813ba8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  813ba4:	e0bff517 	ldw	r2,-44(fp)
  }
}
  813ba8:	e037883a 	mov	sp,fp
  813bac:	dfc00117 	ldw	ra,4(sp)
  813bb0:	df000017 	ldw	fp,0(sp)
  813bb4:	dec00204 	addi	sp,sp,8
  813bb8:	f800283a 	ret

00813bbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813bbc:	defffe04 	addi	sp,sp,-8
  813bc0:	dfc00115 	stw	ra,4(sp)
  813bc4:	df000015 	stw	fp,0(sp)
  813bc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813bcc:	d0a00b17 	ldw	r2,-32724(gp)
  813bd0:	10000326 	beq	r2,zero,813be0 <alt_get_errno+0x24>
  813bd4:	d0a00b17 	ldw	r2,-32724(gp)
  813bd8:	103ee83a 	callr	r2
  813bdc:	00000106 	br	813be4 <alt_get_errno+0x28>
  813be0:	d0a7a404 	addi	r2,gp,-24944
}
  813be4:	e037883a 	mov	sp,fp
  813be8:	dfc00117 	ldw	ra,4(sp)
  813bec:	df000017 	ldw	fp,0(sp)
  813bf0:	dec00204 	addi	sp,sp,8
  813bf4:	f800283a 	ret

00813bf8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  813bf8:	defff204 	addi	sp,sp,-56
  813bfc:	dfc00d15 	stw	ra,52(sp)
  813c00:	df000c15 	stw	fp,48(sp)
  813c04:	df000c04 	addi	fp,sp,48
  813c08:	e13ffc15 	stw	r4,-16(fp)
  813c0c:	e17ffd15 	stw	r5,-12(fp)
  813c10:	e1bffe15 	stw	r6,-8(fp)
  813c14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  813c18:	e0bffe17 	ldw	r2,-8(fp)
  813c1c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  813c20:	e0bfff17 	ldw	r2,-4(fp)
  813c24:	1090000c 	andi	r2,r2,16384
  813c28:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813c2c:	00003c06 	br	813d20 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  813c30:	e0bffc17 	ldw	r2,-16(fp)
  813c34:	10800517 	ldw	r2,20(r2)
  813c38:	10800044 	addi	r2,r2,1
  813c3c:	10800fcc 	andi	r2,r2,63
  813c40:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  813c44:	e0bffc17 	ldw	r2,-16(fp)
  813c48:	10c00417 	ldw	r3,16(r2)
  813c4c:	e0bff717 	ldw	r2,-36(fp)
  813c50:	1880221e 	bne	r3,r2,813cdc <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  813c54:	e0bff517 	ldw	r2,-44(fp)
  813c58:	10000526 	beq	r2,zero,813c70 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  813c5c:	0813bbc0 	call	813bbc <alt_get_errno>
  813c60:	1007883a 	mov	r3,r2
  813c64:	008002c4 	movi	r2,11
  813c68:	18800015 	stw	r2,0(r3)
        break;
  813c6c:	00002e06 	br	813d28 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c70:	0005303a 	rdctl	r2,status
  813c74:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c78:	e0fff917 	ldw	r3,-28(fp)
  813c7c:	00bfff84 	movi	r2,-2
  813c80:	1884703a 	and	r2,r3,r2
  813c84:	1001703a 	wrctl	status,r2
  
  return context;
  813c88:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  813c8c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813c90:	e0bffc17 	ldw	r2,-16(fp)
  813c94:	10800117 	ldw	r2,4(r2)
  813c98:	10c11014 	ori	r3,r2,1088
  813c9c:	e0bffc17 	ldw	r2,-16(fp)
  813ca0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813ca4:	e0bffc17 	ldw	r2,-16(fp)
  813ca8:	10800017 	ldw	r2,0(r2)
  813cac:	10800304 	addi	r2,r2,12
  813cb0:	e0fffc17 	ldw	r3,-16(fp)
  813cb4:	18c00117 	ldw	r3,4(r3)
  813cb8:	10c00035 	stwio	r3,0(r2)
  813cbc:	e0bff817 	ldw	r2,-32(fp)
  813cc0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813cc4:	e0bff617 	ldw	r2,-40(fp)
  813cc8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  813ccc:	e0bffc17 	ldw	r2,-16(fp)
  813cd0:	10c00417 	ldw	r3,16(r2)
  813cd4:	e0bff717 	ldw	r2,-36(fp)
  813cd8:	18bffc26 	beq	r3,r2,813ccc <__alt_mem_onchip_mem+0xff793ccc>
      }
    }

    count--;
  813cdc:	e0bff417 	ldw	r2,-48(fp)
  813ce0:	10bfffc4 	addi	r2,r2,-1
  813ce4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  813ce8:	e0bffc17 	ldw	r2,-16(fp)
  813cec:	10c00517 	ldw	r3,20(r2)
  813cf0:	e0bffd17 	ldw	r2,-12(fp)
  813cf4:	11000044 	addi	r4,r2,1
  813cf8:	e13ffd15 	stw	r4,-12(fp)
  813cfc:	10800003 	ldbu	r2,0(r2)
  813d00:	1009883a 	mov	r4,r2
  813d04:	e0bffc17 	ldw	r2,-16(fp)
  813d08:	10c5883a 	add	r2,r2,r3
  813d0c:	10801704 	addi	r2,r2,92
  813d10:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  813d14:	e0bffc17 	ldw	r2,-16(fp)
  813d18:	e0fff717 	ldw	r3,-36(fp)
  813d1c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  813d20:	e0bff417 	ldw	r2,-48(fp)
  813d24:	103fc21e 	bne	r2,zero,813c30 <__alt_mem_onchip_mem+0xff793c30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d28:	0005303a 	rdctl	r2,status
  813d2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d30:	e0fffb17 	ldw	r3,-20(fp)
  813d34:	00bfff84 	movi	r2,-2
  813d38:	1884703a 	and	r2,r3,r2
  813d3c:	1001703a 	wrctl	status,r2
  
  return context;
  813d40:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  813d44:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  813d48:	e0bffc17 	ldw	r2,-16(fp)
  813d4c:	10800117 	ldw	r2,4(r2)
  813d50:	10c11014 	ori	r3,r2,1088
  813d54:	e0bffc17 	ldw	r2,-16(fp)
  813d58:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  813d5c:	e0bffc17 	ldw	r2,-16(fp)
  813d60:	10800017 	ldw	r2,0(r2)
  813d64:	10800304 	addi	r2,r2,12
  813d68:	e0fffc17 	ldw	r3,-16(fp)
  813d6c:	18c00117 	ldw	r3,4(r3)
  813d70:	10c00035 	stwio	r3,0(r2)
  813d74:	e0bff817 	ldw	r2,-32(fp)
  813d78:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813d7c:	e0bffa17 	ldw	r2,-24(fp)
  813d80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  813d84:	e0fffe17 	ldw	r3,-8(fp)
  813d88:	e0bff417 	ldw	r2,-48(fp)
  813d8c:	1885c83a 	sub	r2,r3,r2
}
  813d90:	e037883a 	mov	sp,fp
  813d94:	dfc00117 	ldw	ra,4(sp)
  813d98:	df000017 	ldw	fp,0(sp)
  813d9c:	dec00204 	addi	sp,sp,8
  813da0:	f800283a 	ret

00813da4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  813da4:	defff504 	addi	sp,sp,-44
  813da8:	df000a15 	stw	fp,40(sp)
  813dac:	df000a04 	addi	fp,sp,40
  813db0:	e13ffc15 	stw	r4,-16(fp)
  813db4:	e17ffd15 	stw	r5,-12(fp)
  813db8:	e1bffe15 	stw	r6,-8(fp)
  813dbc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  813dc0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  813dc4:	d0a7af17 	ldw	r2,-24900(gp)
  
  if (alt_ticks_per_second ())
  813dc8:	10003c26 	beq	r2,zero,813ebc <alt_alarm_start+0x118>
  {
    if (alarm)
  813dcc:	e0bffc17 	ldw	r2,-16(fp)
  813dd0:	10003826 	beq	r2,zero,813eb4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  813dd4:	e0bffc17 	ldw	r2,-16(fp)
  813dd8:	e0fffe17 	ldw	r3,-8(fp)
  813ddc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  813de0:	e0bffc17 	ldw	r2,-16(fp)
  813de4:	e0ffff17 	ldw	r3,-4(fp)
  813de8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813dec:	0005303a 	rdctl	r2,status
  813df0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813df4:	e0fff917 	ldw	r3,-28(fp)
  813df8:	00bfff84 	movi	r2,-2
  813dfc:	1884703a 	and	r2,r3,r2
  813e00:	1001703a 	wrctl	status,r2
  
  return context;
  813e04:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  813e08:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  813e0c:	d0a7b017 	ldw	r2,-24896(gp)
      
      current_nticks = alt_nticks();
  813e10:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  813e14:	e0fffd17 	ldw	r3,-12(fp)
  813e18:	e0bff617 	ldw	r2,-40(fp)
  813e1c:	1885883a 	add	r2,r3,r2
  813e20:	10c00044 	addi	r3,r2,1
  813e24:	e0bffc17 	ldw	r2,-16(fp)
  813e28:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  813e2c:	e0bffc17 	ldw	r2,-16(fp)
  813e30:	10c00217 	ldw	r3,8(r2)
  813e34:	e0bff617 	ldw	r2,-40(fp)
  813e38:	1880042e 	bgeu	r3,r2,813e4c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  813e3c:	e0bffc17 	ldw	r2,-16(fp)
  813e40:	00c00044 	movi	r3,1
  813e44:	10c00405 	stb	r3,16(r2)
  813e48:	00000206 	br	813e54 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  813e4c:	e0bffc17 	ldw	r2,-16(fp)
  813e50:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  813e54:	e0bffc17 	ldw	r2,-16(fp)
  813e58:	d0e00e04 	addi	r3,gp,-32712
  813e5c:	e0fffa15 	stw	r3,-24(fp)
  813e60:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813e64:	e0bffb17 	ldw	r2,-20(fp)
  813e68:	e0fffa17 	ldw	r3,-24(fp)
  813e6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  813e70:	e0bffa17 	ldw	r2,-24(fp)
  813e74:	10c00017 	ldw	r3,0(r2)
  813e78:	e0bffb17 	ldw	r2,-20(fp)
  813e7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813e80:	e0bffa17 	ldw	r2,-24(fp)
  813e84:	10800017 	ldw	r2,0(r2)
  813e88:	e0fffb17 	ldw	r3,-20(fp)
  813e8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  813e90:	e0bffa17 	ldw	r2,-24(fp)
  813e94:	e0fffb17 	ldw	r3,-20(fp)
  813e98:	10c00015 	stw	r3,0(r2)
  813e9c:	e0bff817 	ldw	r2,-32(fp)
  813ea0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ea4:	e0bff717 	ldw	r2,-36(fp)
  813ea8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  813eac:	0005883a 	mov	r2,zero
  813eb0:	00000306 	br	813ec0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  813eb4:	00bffa84 	movi	r2,-22
  813eb8:	00000106 	br	813ec0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  813ebc:	00bfde84 	movi	r2,-134
  }
}
  813ec0:	e037883a 	mov	sp,fp
  813ec4:	df000017 	ldw	fp,0(sp)
  813ec8:	dec00104 	addi	sp,sp,4
  813ecc:	f800283a 	ret

00813ed0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  813ed0:	defffe04 	addi	sp,sp,-8
  813ed4:	df000115 	stw	fp,4(sp)
  813ed8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813edc:	e03fff15 	stw	zero,-4(fp)
  813ee0:	00000506 	br	813ef8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  813ee4:	e0bfff17 	ldw	r2,-4(fp)
  813ee8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  813eec:	e0bfff17 	ldw	r2,-4(fp)
  813ef0:	10800804 	addi	r2,r2,32
  813ef4:	e0bfff15 	stw	r2,-4(fp)
  813ef8:	e0bfff17 	ldw	r2,-4(fp)
  813efc:	10820030 	cmpltui	r2,r2,2048
  813f00:	103ff81e 	bne	r2,zero,813ee4 <__alt_mem_onchip_mem+0xff793ee4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  813f04:	0001883a 	nop
  813f08:	e037883a 	mov	sp,fp
  813f0c:	df000017 	ldw	fp,0(sp)
  813f10:	dec00104 	addi	sp,sp,4
  813f14:	f800283a 	ret

00813f18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813f18:	defffe04 	addi	sp,sp,-8
  813f1c:	dfc00115 	stw	ra,4(sp)
  813f20:	df000015 	stw	fp,0(sp)
  813f24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  813f28:	d0a00b17 	ldw	r2,-32724(gp)
  813f2c:	10000326 	beq	r2,zero,813f3c <alt_get_errno+0x24>
  813f30:	d0a00b17 	ldw	r2,-32724(gp)
  813f34:	103ee83a 	callr	r2
  813f38:	00000106 	br	813f40 <alt_get_errno+0x28>
  813f3c:	d0a7a404 	addi	r2,gp,-24944
}
  813f40:	e037883a 	mov	sp,fp
  813f44:	dfc00117 	ldw	ra,4(sp)
  813f48:	df000017 	ldw	fp,0(sp)
  813f4c:	dec00204 	addi	sp,sp,8
  813f50:	f800283a 	ret

00813f54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  813f54:	defffa04 	addi	sp,sp,-24
  813f58:	dfc00515 	stw	ra,20(sp)
  813f5c:	df000415 	stw	fp,16(sp)
  813f60:	df000404 	addi	fp,sp,16
  813f64:	e13ffe15 	stw	r4,-8(fp)
  813f68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  813f6c:	e0bffe17 	ldw	r2,-8(fp)
  813f70:	10000326 	beq	r2,zero,813f80 <alt_dev_llist_insert+0x2c>
  813f74:	e0bffe17 	ldw	r2,-8(fp)
  813f78:	10800217 	ldw	r2,8(r2)
  813f7c:	1000061e 	bne	r2,zero,813f98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  813f80:	0813f180 	call	813f18 <alt_get_errno>
  813f84:	1007883a 	mov	r3,r2
  813f88:	00800584 	movi	r2,22
  813f8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  813f90:	00bffa84 	movi	r2,-22
  813f94:	00001306 	br	813fe4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  813f98:	e0bffe17 	ldw	r2,-8(fp)
  813f9c:	e0ffff17 	ldw	r3,-4(fp)
  813fa0:	e0fffc15 	stw	r3,-16(fp)
  813fa4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  813fa8:	e0bffd17 	ldw	r2,-12(fp)
  813fac:	e0fffc17 	ldw	r3,-16(fp)
  813fb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  813fb4:	e0bffc17 	ldw	r2,-16(fp)
  813fb8:	10c00017 	ldw	r3,0(r2)
  813fbc:	e0bffd17 	ldw	r2,-12(fp)
  813fc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  813fc4:	e0bffc17 	ldw	r2,-16(fp)
  813fc8:	10800017 	ldw	r2,0(r2)
  813fcc:	e0fffd17 	ldw	r3,-12(fp)
  813fd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  813fd4:	e0bffc17 	ldw	r2,-16(fp)
  813fd8:	e0fffd17 	ldw	r3,-12(fp)
  813fdc:	10c00015 	stw	r3,0(r2)

  return 0;  
  813fe0:	0005883a 	mov	r2,zero
}
  813fe4:	e037883a 	mov	sp,fp
  813fe8:	dfc00117 	ldw	ra,4(sp)
  813fec:	df000017 	ldw	fp,0(sp)
  813ff0:	dec00204 	addi	sp,sp,8
  813ff4:	f800283a 	ret

00813ff8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  813ff8:	defffd04 	addi	sp,sp,-12
  813ffc:	dfc00215 	stw	ra,8(sp)
  814000:	df000115 	stw	fp,4(sp)
  814004:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  814008:	00802074 	movhi	r2,129
  81400c:	10935c04 	addi	r2,r2,19824
  814010:	e0bfff15 	stw	r2,-4(fp)
  814014:	00000606 	br	814030 <_do_ctors+0x38>
        (*ctor) (); 
  814018:	e0bfff17 	ldw	r2,-4(fp)
  81401c:	10800017 	ldw	r2,0(r2)
  814020:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  814024:	e0bfff17 	ldw	r2,-4(fp)
  814028:	10bfff04 	addi	r2,r2,-4
  81402c:	e0bfff15 	stw	r2,-4(fp)
  814030:	e0ffff17 	ldw	r3,-4(fp)
  814034:	00802074 	movhi	r2,129
  814038:	10935d04 	addi	r2,r2,19828
  81403c:	18bff62e 	bgeu	r3,r2,814018 <__alt_mem_onchip_mem+0xff794018>
        (*ctor) (); 
}
  814040:	0001883a 	nop
  814044:	e037883a 	mov	sp,fp
  814048:	dfc00117 	ldw	ra,4(sp)
  81404c:	df000017 	ldw	fp,0(sp)
  814050:	dec00204 	addi	sp,sp,8
  814054:	f800283a 	ret

00814058 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  814058:	defffd04 	addi	sp,sp,-12
  81405c:	dfc00215 	stw	ra,8(sp)
  814060:	df000115 	stw	fp,4(sp)
  814064:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814068:	00802074 	movhi	r2,129
  81406c:	10935c04 	addi	r2,r2,19824
  814070:	e0bfff15 	stw	r2,-4(fp)
  814074:	00000606 	br	814090 <_do_dtors+0x38>
        (*dtor) (); 
  814078:	e0bfff17 	ldw	r2,-4(fp)
  81407c:	10800017 	ldw	r2,0(r2)
  814080:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814084:	e0bfff17 	ldw	r2,-4(fp)
  814088:	10bfff04 	addi	r2,r2,-4
  81408c:	e0bfff15 	stw	r2,-4(fp)
  814090:	e0ffff17 	ldw	r3,-4(fp)
  814094:	00802074 	movhi	r2,129
  814098:	10935d04 	addi	r2,r2,19828
  81409c:	18bff62e 	bgeu	r3,r2,814078 <__alt_mem_onchip_mem+0xff794078>
        (*dtor) (); 
}
  8140a0:	0001883a 	nop
  8140a4:	e037883a 	mov	sp,fp
  8140a8:	dfc00117 	ldw	ra,4(sp)
  8140ac:	df000017 	ldw	fp,0(sp)
  8140b0:	dec00204 	addi	sp,sp,8
  8140b4:	f800283a 	ret

008140b8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  8140b8:	defffa04 	addi	sp,sp,-24
  8140bc:	dfc00515 	stw	ra,20(sp)
  8140c0:	df000415 	stw	fp,16(sp)
  8140c4:	df000404 	addi	fp,sp,16
  8140c8:	e13ffe15 	stw	r4,-8(fp)
  8140cc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  8140d0:	e0bfff17 	ldw	r2,-4(fp)
  8140d4:	10800017 	ldw	r2,0(r2)
  8140d8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  8140dc:	e13ffe17 	ldw	r4,-8(fp)
  8140e0:	0804f200 	call	804f20 <strlen>
  8140e4:	10800044 	addi	r2,r2,1
  8140e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8140ec:	00000d06 	br	814124 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8140f0:	e0bffc17 	ldw	r2,-16(fp)
  8140f4:	10800217 	ldw	r2,8(r2)
  8140f8:	e0fffd17 	ldw	r3,-12(fp)
  8140fc:	180d883a 	mov	r6,r3
  814100:	e17ffe17 	ldw	r5,-8(fp)
  814104:	1009883a 	mov	r4,r2
  814108:	0814a2c0 	call	814a2c <memcmp>
  81410c:	1000021e 	bne	r2,zero,814118 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  814110:	e0bffc17 	ldw	r2,-16(fp)
  814114:	00000706 	br	814134 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  814118:	e0bffc17 	ldw	r2,-16(fp)
  81411c:	10800017 	ldw	r2,0(r2)
  814120:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  814124:	e0fffc17 	ldw	r3,-16(fp)
  814128:	e0bfff17 	ldw	r2,-4(fp)
  81412c:	18bff01e 	bne	r3,r2,8140f0 <__alt_mem_onchip_mem+0xff7940f0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  814130:	0005883a 	mov	r2,zero
}
  814134:	e037883a 	mov	sp,fp
  814138:	dfc00117 	ldw	ra,4(sp)
  81413c:	df000017 	ldw	fp,0(sp)
  814140:	dec00204 	addi	sp,sp,8
  814144:	f800283a 	ret

00814148 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  814148:	defffb04 	addi	sp,sp,-20
  81414c:	dfc00415 	stw	ra,16(sp)
  814150:	df000315 	stw	fp,12(sp)
  814154:	df000304 	addi	fp,sp,12
  814158:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81415c:	d0a00617 	ldw	r2,-32744(gp)
  814160:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  814164:	00003106 	br	81422c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  814168:	e0bffd17 	ldw	r2,-12(fp)
  81416c:	10800217 	ldw	r2,8(r2)
  814170:	1009883a 	mov	r4,r2
  814174:	0804f200 	call	804f20 <strlen>
  814178:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81417c:	e0bffd17 	ldw	r2,-12(fp)
  814180:	10c00217 	ldw	r3,8(r2)
  814184:	e0bffe17 	ldw	r2,-8(fp)
  814188:	10bfffc4 	addi	r2,r2,-1
  81418c:	1885883a 	add	r2,r3,r2
  814190:	10800003 	ldbu	r2,0(r2)
  814194:	10803fcc 	andi	r2,r2,255
  814198:	1080201c 	xori	r2,r2,128
  81419c:	10bfe004 	addi	r2,r2,-128
  8141a0:	10800bd8 	cmpnei	r2,r2,47
  8141a4:	1000031e 	bne	r2,zero,8141b4 <alt_find_file+0x6c>
    {
      len -= 1;
  8141a8:	e0bffe17 	ldw	r2,-8(fp)
  8141ac:	10bfffc4 	addi	r2,r2,-1
  8141b0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8141b4:	e0bffe17 	ldw	r2,-8(fp)
  8141b8:	e0ffff17 	ldw	r3,-4(fp)
  8141bc:	1885883a 	add	r2,r3,r2
  8141c0:	10800003 	ldbu	r2,0(r2)
  8141c4:	10803fcc 	andi	r2,r2,255
  8141c8:	1080201c 	xori	r2,r2,128
  8141cc:	10bfe004 	addi	r2,r2,-128
  8141d0:	10800be0 	cmpeqi	r2,r2,47
  8141d4:	1000081e 	bne	r2,zero,8141f8 <alt_find_file+0xb0>
  8141d8:	e0bffe17 	ldw	r2,-8(fp)
  8141dc:	e0ffff17 	ldw	r3,-4(fp)
  8141e0:	1885883a 	add	r2,r3,r2
  8141e4:	10800003 	ldbu	r2,0(r2)
  8141e8:	10803fcc 	andi	r2,r2,255
  8141ec:	1080201c 	xori	r2,r2,128
  8141f0:	10bfe004 	addi	r2,r2,-128
  8141f4:	10000a1e 	bne	r2,zero,814220 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8141f8:	e0bffd17 	ldw	r2,-12(fp)
  8141fc:	10800217 	ldw	r2,8(r2)
  814200:	e0fffe17 	ldw	r3,-8(fp)
  814204:	180d883a 	mov	r6,r3
  814208:	e17fff17 	ldw	r5,-4(fp)
  81420c:	1009883a 	mov	r4,r2
  814210:	0814a2c0 	call	814a2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  814214:	1000021e 	bne	r2,zero,814220 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  814218:	e0bffd17 	ldw	r2,-12(fp)
  81421c:	00000706 	br	81423c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  814220:	e0bffd17 	ldw	r2,-12(fp)
  814224:	10800017 	ldw	r2,0(r2)
  814228:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  81422c:	e0fffd17 	ldw	r3,-12(fp)
  814230:	d0a00604 	addi	r2,gp,-32744
  814234:	18bfcc1e 	bne	r3,r2,814168 <__alt_mem_onchip_mem+0xff794168>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  814238:	0005883a 	mov	r2,zero
}
  81423c:	e037883a 	mov	sp,fp
  814240:	dfc00117 	ldw	ra,4(sp)
  814244:	df000017 	ldw	fp,0(sp)
  814248:	dec00204 	addi	sp,sp,8
  81424c:	f800283a 	ret

00814250 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  814250:	defffc04 	addi	sp,sp,-16
  814254:	df000315 	stw	fp,12(sp)
  814258:	df000304 	addi	fp,sp,12
  81425c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  814260:	00bffa04 	movi	r2,-24
  814264:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  814268:	e03ffd15 	stw	zero,-12(fp)
  81426c:	00001906 	br	8142d4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  814270:	00802074 	movhi	r2,129
  814274:	10974804 	addi	r2,r2,23840
  814278:	e0fffd17 	ldw	r3,-12(fp)
  81427c:	18c00324 	muli	r3,r3,12
  814280:	10c5883a 	add	r2,r2,r3
  814284:	10800017 	ldw	r2,0(r2)
  814288:	10000f1e 	bne	r2,zero,8142c8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81428c:	00802074 	movhi	r2,129
  814290:	10974804 	addi	r2,r2,23840
  814294:	e0fffd17 	ldw	r3,-12(fp)
  814298:	18c00324 	muli	r3,r3,12
  81429c:	10c5883a 	add	r2,r2,r3
  8142a0:	e0ffff17 	ldw	r3,-4(fp)
  8142a4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  8142a8:	d0e00a17 	ldw	r3,-32728(gp)
  8142ac:	e0bffd17 	ldw	r2,-12(fp)
  8142b0:	1880020e 	bge	r3,r2,8142bc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  8142b4:	e0bffd17 	ldw	r2,-12(fp)
  8142b8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
  8142bc:	e0bffd17 	ldw	r2,-12(fp)
  8142c0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  8142c4:	00000606 	br	8142e0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  8142c8:	e0bffd17 	ldw	r2,-12(fp)
  8142cc:	10800044 	addi	r2,r2,1
  8142d0:	e0bffd15 	stw	r2,-12(fp)
  8142d4:	e0bffd17 	ldw	r2,-12(fp)
  8142d8:	10800810 	cmplti	r2,r2,32
  8142dc:	103fe41e 	bne	r2,zero,814270 <__alt_mem_onchip_mem+0xff794270>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8142e0:	e0bffe17 	ldw	r2,-8(fp)
}
  8142e4:	e037883a 	mov	sp,fp
  8142e8:	df000017 	ldw	fp,0(sp)
  8142ec:	dec00104 	addi	sp,sp,4
  8142f0:	f800283a 	ret

008142f4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  8142f4:	defffe04 	addi	sp,sp,-8
  8142f8:	dfc00115 	stw	ra,4(sp)
  8142fc:	df000015 	stw	fp,0(sp)
  814300:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  814304:	01440004 	movi	r5,4096
  814308:	0009883a 	mov	r4,zero
  81430c:	08148b40 	call	8148b4 <alt_icache_flush>
#endif
}
  814310:	0001883a 	nop
  814314:	e037883a 	mov	sp,fp
  814318:	dfc00117 	ldw	ra,4(sp)
  81431c:	df000017 	ldw	fp,0(sp)
  814320:	dec00204 	addi	sp,sp,8
  814324:	f800283a 	ret

00814328 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814328:	defff904 	addi	sp,sp,-28
  81432c:	dfc00615 	stw	ra,24(sp)
  814330:	df000515 	stw	fp,20(sp)
  814334:	df000504 	addi	fp,sp,20
  814338:	e13ffc15 	stw	r4,-16(fp)
  81433c:	e17ffd15 	stw	r5,-12(fp)
  814340:	e1bffe15 	stw	r6,-8(fp)
  814344:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  814348:	e0800217 	ldw	r2,8(fp)
  81434c:	d8800015 	stw	r2,0(sp)
  814350:	e1ffff17 	ldw	r7,-4(fp)
  814354:	e1bffe17 	ldw	r6,-8(fp)
  814358:	e17ffd17 	ldw	r5,-12(fp)
  81435c:	e13ffc17 	ldw	r4,-16(fp)
  814360:	08144d80 	call	8144d8 <alt_iic_isr_register>
}  
  814364:	e037883a 	mov	sp,fp
  814368:	dfc00117 	ldw	ra,4(sp)
  81436c:	df000017 	ldw	fp,0(sp)
  814370:	dec00204 	addi	sp,sp,8
  814374:	f800283a 	ret

00814378 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  814378:	defff904 	addi	sp,sp,-28
  81437c:	df000615 	stw	fp,24(sp)
  814380:	df000604 	addi	fp,sp,24
  814384:	e13ffe15 	stw	r4,-8(fp)
  814388:	e17fff15 	stw	r5,-4(fp)
  81438c:	e0bfff17 	ldw	r2,-4(fp)
  814390:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814394:	0005303a 	rdctl	r2,status
  814398:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81439c:	e0fffb17 	ldw	r3,-20(fp)
  8143a0:	00bfff84 	movi	r2,-2
  8143a4:	1884703a 	and	r2,r3,r2
  8143a8:	1001703a 	wrctl	status,r2
  
  return context;
  8143ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8143b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  8143b4:	00c00044 	movi	r3,1
  8143b8:	e0bffa17 	ldw	r2,-24(fp)
  8143bc:	1884983a 	sll	r2,r3,r2
  8143c0:	1007883a 	mov	r3,r2
  8143c4:	d0a7ab17 	ldw	r2,-24916(gp)
  8143c8:	1884b03a 	or	r2,r3,r2
  8143cc:	d0a7ab15 	stw	r2,-24916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8143d0:	d0a7ab17 	ldw	r2,-24916(gp)
  8143d4:	100170fa 	wrctl	ienable,r2
  8143d8:	e0bffc17 	ldw	r2,-16(fp)
  8143dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143e0:	e0bffd17 	ldw	r2,-12(fp)
  8143e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8143e8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  8143ec:	0001883a 	nop
}
  8143f0:	e037883a 	mov	sp,fp
  8143f4:	df000017 	ldw	fp,0(sp)
  8143f8:	dec00104 	addi	sp,sp,4
  8143fc:	f800283a 	ret

00814400 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814400:	defff904 	addi	sp,sp,-28
  814404:	df000615 	stw	fp,24(sp)
  814408:	df000604 	addi	fp,sp,24
  81440c:	e13ffe15 	stw	r4,-8(fp)
  814410:	e17fff15 	stw	r5,-4(fp)
  814414:	e0bfff17 	ldw	r2,-4(fp)
  814418:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81441c:	0005303a 	rdctl	r2,status
  814420:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814424:	e0fffb17 	ldw	r3,-20(fp)
  814428:	00bfff84 	movi	r2,-2
  81442c:	1884703a 	and	r2,r3,r2
  814430:	1001703a 	wrctl	status,r2
  
  return context;
  814434:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814438:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  81443c:	00c00044 	movi	r3,1
  814440:	e0bffa17 	ldw	r2,-24(fp)
  814444:	1884983a 	sll	r2,r3,r2
  814448:	0084303a 	nor	r2,zero,r2
  81444c:	1007883a 	mov	r3,r2
  814450:	d0a7ab17 	ldw	r2,-24916(gp)
  814454:	1884703a 	and	r2,r3,r2
  814458:	d0a7ab15 	stw	r2,-24916(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  81445c:	d0a7ab17 	ldw	r2,-24916(gp)
  814460:	100170fa 	wrctl	ienable,r2
  814464:	e0bffc17 	ldw	r2,-16(fp)
  814468:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81446c:	e0bffd17 	ldw	r2,-12(fp)
  814470:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814474:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  814478:	0001883a 	nop
}
  81447c:	e037883a 	mov	sp,fp
  814480:	df000017 	ldw	fp,0(sp)
  814484:	dec00104 	addi	sp,sp,4
  814488:	f800283a 	ret

0081448c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  81448c:	defffc04 	addi	sp,sp,-16
  814490:	df000315 	stw	fp,12(sp)
  814494:	df000304 	addi	fp,sp,12
  814498:	e13ffe15 	stw	r4,-8(fp)
  81449c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8144a0:	000530fa 	rdctl	r2,ienable
  8144a4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8144a8:	00c00044 	movi	r3,1
  8144ac:	e0bfff17 	ldw	r2,-4(fp)
  8144b0:	1884983a 	sll	r2,r3,r2
  8144b4:	1007883a 	mov	r3,r2
  8144b8:	e0bffd17 	ldw	r2,-12(fp)
  8144bc:	1884703a 	and	r2,r3,r2
  8144c0:	1004c03a 	cmpne	r2,r2,zero
  8144c4:	10803fcc 	andi	r2,r2,255
}
  8144c8:	e037883a 	mov	sp,fp
  8144cc:	df000017 	ldw	fp,0(sp)
  8144d0:	dec00104 	addi	sp,sp,4
  8144d4:	f800283a 	ret

008144d8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  8144d8:	defff504 	addi	sp,sp,-44
  8144dc:	dfc00a15 	stw	ra,40(sp)
  8144e0:	df000915 	stw	fp,36(sp)
  8144e4:	df000904 	addi	fp,sp,36
  8144e8:	e13ffc15 	stw	r4,-16(fp)
  8144ec:	e17ffd15 	stw	r5,-12(fp)
  8144f0:	e1bffe15 	stw	r6,-8(fp)
  8144f4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  8144f8:	00bffa84 	movi	r2,-22
  8144fc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814500:	e0bffd17 	ldw	r2,-12(fp)
  814504:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814508:	e0bff817 	ldw	r2,-32(fp)
  81450c:	10800808 	cmpgei	r2,r2,32
  814510:	1000271e 	bne	r2,zero,8145b0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814514:	0005303a 	rdctl	r2,status
  814518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81451c:	e0fffb17 	ldw	r3,-20(fp)
  814520:	00bfff84 	movi	r2,-2
  814524:	1884703a 	and	r2,r3,r2
  814528:	1001703a 	wrctl	status,r2
  
  return context;
  81452c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814530:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  814534:	008020b4 	movhi	r2,130
  814538:	10a40d04 	addi	r2,r2,-28620
  81453c:	e0fff817 	ldw	r3,-32(fp)
  814540:	180690fa 	slli	r3,r3,3
  814544:	10c5883a 	add	r2,r2,r3
  814548:	e0fffe17 	ldw	r3,-8(fp)
  81454c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  814550:	008020b4 	movhi	r2,130
  814554:	10a40d04 	addi	r2,r2,-28620
  814558:	e0fff817 	ldw	r3,-32(fp)
  81455c:	180690fa 	slli	r3,r3,3
  814560:	10c5883a 	add	r2,r2,r3
  814564:	10800104 	addi	r2,r2,4
  814568:	e0ffff17 	ldw	r3,-4(fp)
  81456c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  814570:	e0bffe17 	ldw	r2,-8(fp)
  814574:	10000526 	beq	r2,zero,81458c <alt_iic_isr_register+0xb4>
  814578:	e0bff817 	ldw	r2,-32(fp)
  81457c:	100b883a 	mov	r5,r2
  814580:	e13ffc17 	ldw	r4,-16(fp)
  814584:	08143780 	call	814378 <alt_ic_irq_enable>
  814588:	00000406 	br	81459c <alt_iic_isr_register+0xc4>
  81458c:	e0bff817 	ldw	r2,-32(fp)
  814590:	100b883a 	mov	r5,r2
  814594:	e13ffc17 	ldw	r4,-16(fp)
  814598:	08144000 	call	814400 <alt_ic_irq_disable>
  81459c:	e0bff715 	stw	r2,-36(fp)
  8145a0:	e0bffa17 	ldw	r2,-24(fp)
  8145a4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8145a8:	e0bff917 	ldw	r2,-28(fp)
  8145ac:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8145b0:	e0bff717 	ldw	r2,-36(fp)
}
  8145b4:	e037883a 	mov	sp,fp
  8145b8:	dfc00117 	ldw	ra,4(sp)
  8145bc:	df000017 	ldw	fp,0(sp)
  8145c0:	dec00204 	addi	sp,sp,8
  8145c4:	f800283a 	ret

008145c8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  8145c8:	defff904 	addi	sp,sp,-28
  8145cc:	dfc00615 	stw	ra,24(sp)
  8145d0:	df000515 	stw	fp,20(sp)
  8145d4:	df000504 	addi	fp,sp,20
  8145d8:	e13ffc15 	stw	r4,-16(fp)
  8145dc:	e17ffd15 	stw	r5,-12(fp)
  8145e0:	e1bffe15 	stw	r6,-8(fp)
  8145e4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  8145e8:	e1bfff17 	ldw	r6,-4(fp)
  8145ec:	e17ffe17 	ldw	r5,-8(fp)
  8145f0:	e13ffd17 	ldw	r4,-12(fp)
  8145f4:	08113140 	call	811314 <open>
  8145f8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  8145fc:	e0bffb17 	ldw	r2,-20(fp)
  814600:	10001c16 	blt	r2,zero,814674 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  814604:	00802074 	movhi	r2,129
  814608:	10974804 	addi	r2,r2,23840
  81460c:	e0fffb17 	ldw	r3,-20(fp)
  814610:	18c00324 	muli	r3,r3,12
  814614:	10c5883a 	add	r2,r2,r3
  814618:	10c00017 	ldw	r3,0(r2)
  81461c:	e0bffc17 	ldw	r2,-16(fp)
  814620:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814624:	00802074 	movhi	r2,129
  814628:	10974804 	addi	r2,r2,23840
  81462c:	e0fffb17 	ldw	r3,-20(fp)
  814630:	18c00324 	muli	r3,r3,12
  814634:	10c5883a 	add	r2,r2,r3
  814638:	10800104 	addi	r2,r2,4
  81463c:	10c00017 	ldw	r3,0(r2)
  814640:	e0bffc17 	ldw	r2,-16(fp)
  814644:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  814648:	00802074 	movhi	r2,129
  81464c:	10974804 	addi	r2,r2,23840
  814650:	e0fffb17 	ldw	r3,-20(fp)
  814654:	18c00324 	muli	r3,r3,12
  814658:	10c5883a 	add	r2,r2,r3
  81465c:	10800204 	addi	r2,r2,8
  814660:	10c00017 	ldw	r3,0(r2)
  814664:	e0bffc17 	ldw	r2,-16(fp)
  814668:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  81466c:	e13ffb17 	ldw	r4,-20(fp)
  814670:	08115a00 	call	8115a0 <alt_release_fd>
  }
} 
  814674:	0001883a 	nop
  814678:	e037883a 	mov	sp,fp
  81467c:	dfc00117 	ldw	ra,4(sp)
  814680:	df000017 	ldw	fp,0(sp)
  814684:	dec00204 	addi	sp,sp,8
  814688:	f800283a 	ret

0081468c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  81468c:	defffb04 	addi	sp,sp,-20
  814690:	dfc00415 	stw	ra,16(sp)
  814694:	df000315 	stw	fp,12(sp)
  814698:	df000304 	addi	fp,sp,12
  81469c:	e13ffd15 	stw	r4,-12(fp)
  8146a0:	e17ffe15 	stw	r5,-8(fp)
  8146a4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8146a8:	01c07fc4 	movi	r7,511
  8146ac:	01800044 	movi	r6,1
  8146b0:	e17ffd17 	ldw	r5,-12(fp)
  8146b4:	01002074 	movhi	r4,129
  8146b8:	21174b04 	addi	r4,r4,23852
  8146bc:	08145c80 	call	8145c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  8146c0:	01c07fc4 	movi	r7,511
  8146c4:	000d883a 	mov	r6,zero
  8146c8:	e17ffe17 	ldw	r5,-8(fp)
  8146cc:	01002074 	movhi	r4,129
  8146d0:	21174804 	addi	r4,r4,23840
  8146d4:	08145c80 	call	8145c8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  8146d8:	01c07fc4 	movi	r7,511
  8146dc:	01800044 	movi	r6,1
  8146e0:	e17fff17 	ldw	r5,-4(fp)
  8146e4:	01002074 	movhi	r4,129
  8146e8:	21174e04 	addi	r4,r4,23864
  8146ec:	08145c80 	call	8145c8 <alt_open_fd>
}  
  8146f0:	0001883a 	nop
  8146f4:	e037883a 	mov	sp,fp
  8146f8:	dfc00117 	ldw	ra,4(sp)
  8146fc:	df000017 	ldw	fp,0(sp)
  814700:	dec00204 	addi	sp,sp,8
  814704:	f800283a 	ret

00814708 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  814708:	defffd04 	addi	sp,sp,-12
  81470c:	dfc00215 	stw	ra,8(sp)
  814710:	df000115 	stw	fp,4(sp)
  814714:	df000104 	addi	fp,sp,4
  814718:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  81471c:	e13fff17 	ldw	r4,-4(fp)
  814720:	081475c0 	call	81475c <alt_busy_sleep>
}
  814724:	e037883a 	mov	sp,fp
  814728:	dfc00117 	ldw	ra,4(sp)
  81472c:	df000017 	ldw	fp,0(sp)
  814730:	dec00204 	addi	sp,sp,8
  814734:	f800283a 	ret

00814738 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  814738:	deffff04 	addi	sp,sp,-4
  81473c:	df000015 	stw	fp,0(sp)
  814740:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814744:	000170fa 	wrctl	ienable,zero
}
  814748:	0001883a 	nop
  81474c:	e037883a 	mov	sp,fp
  814750:	df000017 	ldw	fp,0(sp)
  814754:	dec00104 	addi	sp,sp,4
  814758:	f800283a 	ret

0081475c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  81475c:	defffa04 	addi	sp,sp,-24
  814760:	dfc00515 	stw	ra,20(sp)
  814764:	df000415 	stw	fp,16(sp)
  814768:	df000404 	addi	fp,sp,16
  81476c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  814770:	008000c4 	movi	r2,3
  814774:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  814778:	e0fffd17 	ldw	r3,-12(fp)
  81477c:	008003f4 	movhi	r2,15
  814780:	10909004 	addi	r2,r2,16960
  814784:	1885383a 	mul	r2,r3,r2
  814788:	100b883a 	mov	r5,r2
  81478c:	0100bef4 	movhi	r4,763
  814790:	213c2004 	addi	r4,r4,-3968
  814794:	080e3ac0 	call	80e3ac <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  814798:	100b883a 	mov	r5,r2
  81479c:	01200034 	movhi	r4,32768
  8147a0:	213fffc4 	addi	r4,r4,-1
  8147a4:	080e3ac0 	call	80e3ac <__udivsi3>
  8147a8:	100b883a 	mov	r5,r2
  8147ac:	e13fff17 	ldw	r4,-4(fp)
  8147b0:	080e3ac0 	call	80e3ac <__udivsi3>
  8147b4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  8147b8:	e0bffe17 	ldw	r2,-8(fp)
  8147bc:	10002a26 	beq	r2,zero,814868 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  8147c0:	e03ffc15 	stw	zero,-16(fp)
  8147c4:	00001706 	br	814824 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  8147c8:	00a00034 	movhi	r2,32768
  8147cc:	10bfffc4 	addi	r2,r2,-1
  8147d0:	10bfffc4 	addi	r2,r2,-1
  8147d4:	103ffe1e 	bne	r2,zero,8147d0 <__alt_mem_onchip_mem+0xff7947d0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  8147d8:	e0fffd17 	ldw	r3,-12(fp)
  8147dc:	008003f4 	movhi	r2,15
  8147e0:	10909004 	addi	r2,r2,16960
  8147e4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  8147e8:	100b883a 	mov	r5,r2
  8147ec:	0100bef4 	movhi	r4,763
  8147f0:	213c2004 	addi	r4,r4,-3968
  8147f4:	080e3ac0 	call	80e3ac <__udivsi3>
  8147f8:	100b883a 	mov	r5,r2
  8147fc:	01200034 	movhi	r4,32768
  814800:	213fffc4 	addi	r4,r4,-1
  814804:	080e3ac0 	call	80e3ac <__udivsi3>
  814808:	1007883a 	mov	r3,r2
  81480c:	e0bfff17 	ldw	r2,-4(fp)
  814810:	10c5c83a 	sub	r2,r2,r3
  814814:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  814818:	e0bffc17 	ldw	r2,-16(fp)
  81481c:	10800044 	addi	r2,r2,1
  814820:	e0bffc15 	stw	r2,-16(fp)
  814824:	e0fffc17 	ldw	r3,-16(fp)
  814828:	e0bffe17 	ldw	r2,-8(fp)
  81482c:	18bfe616 	blt	r3,r2,8147c8 <__alt_mem_onchip_mem+0xff7947c8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  814830:	e0fffd17 	ldw	r3,-12(fp)
  814834:	008003f4 	movhi	r2,15
  814838:	10909004 	addi	r2,r2,16960
  81483c:	1885383a 	mul	r2,r3,r2
  814840:	100b883a 	mov	r5,r2
  814844:	0100bef4 	movhi	r4,763
  814848:	213c2004 	addi	r4,r4,-3968
  81484c:	080e3ac0 	call	80e3ac <__udivsi3>
  814850:	1007883a 	mov	r3,r2
  814854:	e0bfff17 	ldw	r2,-4(fp)
  814858:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  81485c:	10bfffc4 	addi	r2,r2,-1
  814860:	103ffe1e 	bne	r2,zero,81485c <__alt_mem_onchip_mem+0xff79485c>
  814864:	00000d06 	br	81489c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  814868:	e0fffd17 	ldw	r3,-12(fp)
  81486c:	008003f4 	movhi	r2,15
  814870:	10909004 	addi	r2,r2,16960
  814874:	1885383a 	mul	r2,r3,r2
  814878:	100b883a 	mov	r5,r2
  81487c:	0100bef4 	movhi	r4,763
  814880:	213c2004 	addi	r4,r4,-3968
  814884:	080e3ac0 	call	80e3ac <__udivsi3>
  814888:	1007883a 	mov	r3,r2
  81488c:	e0bfff17 	ldw	r2,-4(fp)
  814890:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  814894:	10bfffc4 	addi	r2,r2,-1
  814898:	00bffe16 	blt	zero,r2,814894 <__alt_mem_onchip_mem+0xff794894>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  81489c:	0005883a 	mov	r2,zero
}
  8148a0:	e037883a 	mov	sp,fp
  8148a4:	dfc00117 	ldw	ra,4(sp)
  8148a8:	df000017 	ldw	fp,0(sp)
  8148ac:	dec00204 	addi	sp,sp,8
  8148b0:	f800283a 	ret

008148b4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8148b4:	defffb04 	addi	sp,sp,-20
  8148b8:	df000415 	stw	fp,16(sp)
  8148bc:	df000404 	addi	fp,sp,16
  8148c0:	e13ffe15 	stw	r4,-8(fp)
  8148c4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8148c8:	e0bfff17 	ldw	r2,-4(fp)
  8148cc:	10840070 	cmpltui	r2,r2,4097
  8148d0:	1000021e 	bne	r2,zero,8148dc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8148d4:	00840004 	movi	r2,4096
  8148d8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8148dc:	e0fffe17 	ldw	r3,-8(fp)
  8148e0:	e0bfff17 	ldw	r2,-4(fp)
  8148e4:	1885883a 	add	r2,r3,r2
  8148e8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  8148ec:	e0bffe17 	ldw	r2,-8(fp)
  8148f0:	e0bffc15 	stw	r2,-16(fp)
  8148f4:	00000506 	br	81490c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  8148f8:	e0bffc17 	ldw	r2,-16(fp)
  8148fc:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  814900:	e0bffc17 	ldw	r2,-16(fp)
  814904:	10800804 	addi	r2,r2,32
  814908:	e0bffc15 	stw	r2,-16(fp)
  81490c:	e0fffc17 	ldw	r3,-16(fp)
  814910:	e0bffd17 	ldw	r2,-12(fp)
  814914:	18bff836 	bltu	r3,r2,8148f8 <__alt_mem_onchip_mem+0xff7948f8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  814918:	e0bffe17 	ldw	r2,-8(fp)
  81491c:	108007cc 	andi	r2,r2,31
  814920:	10000226 	beq	r2,zero,81492c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  814924:	e0bffc17 	ldw	r2,-16(fp)
  814928:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  81492c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  814930:	0001883a 	nop
  814934:	e037883a 	mov	sp,fp
  814938:	df000017 	ldw	fp,0(sp)
  81493c:	dec00104 	addi	sp,sp,4
  814940:	f800283a 	ret

00814944 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  814944:	defffe04 	addi	sp,sp,-8
  814948:	df000115 	stw	fp,4(sp)
  81494c:	df000104 	addi	fp,sp,4
  814950:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  814954:	e0bfff17 	ldw	r2,-4(fp)
  814958:	10bffe84 	addi	r2,r2,-6
  81495c:	10c00428 	cmpgeui	r3,r2,16
  814960:	18001a1e 	bne	r3,zero,8149cc <alt_exception_cause_generated_bad_addr+0x88>
  814964:	100690ba 	slli	r3,r2,2
  814968:	00802074 	movhi	r2,129
  81496c:	10925f04 	addi	r2,r2,18812
  814970:	1885883a 	add	r2,r3,r2
  814974:	10800017 	ldw	r2,0(r2)
  814978:	1000683a 	jmp	r2
  81497c:	008149bc 	xorhi	r2,zero,1318
  814980:	008149bc 	xorhi	r2,zero,1318
  814984:	008149cc 	andi	r2,zero,1319
  814988:	008149cc 	andi	r2,zero,1319
  81498c:	008149cc 	andi	r2,zero,1319
  814990:	008149bc 	xorhi	r2,zero,1318
  814994:	008149c4 	movi	r2,1319
  814998:	008149cc 	andi	r2,zero,1319
  81499c:	008149bc 	xorhi	r2,zero,1318
  8149a0:	008149bc 	xorhi	r2,zero,1318
  8149a4:	008149cc 	andi	r2,zero,1319
  8149a8:	008149bc 	xorhi	r2,zero,1318
  8149ac:	008149c4 	movi	r2,1319
  8149b0:	008149cc 	andi	r2,zero,1319
  8149b4:	008149cc 	andi	r2,zero,1319
  8149b8:	008149bc 	xorhi	r2,zero,1318
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  8149bc:	00800044 	movi	r2,1
  8149c0:	00000306 	br	8149d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  8149c4:	0005883a 	mov	r2,zero
  8149c8:	00000106 	br	8149d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  8149cc:	0005883a 	mov	r2,zero
  }
}
  8149d0:	e037883a 	mov	sp,fp
  8149d4:	df000017 	ldw	fp,0(sp)
  8149d8:	dec00104 	addi	sp,sp,4
  8149dc:	f800283a 	ret

008149e0 <atexit>:
  8149e0:	200b883a 	mov	r5,r4
  8149e4:	000f883a 	mov	r7,zero
  8149e8:	000d883a 	mov	r6,zero
  8149ec:	0009883a 	mov	r4,zero
  8149f0:	0814aa81 	jmpi	814aa8 <__register_exitproc>

008149f4 <exit>:
  8149f4:	defffe04 	addi	sp,sp,-8
  8149f8:	000b883a 	mov	r5,zero
  8149fc:	dc000015 	stw	r16,0(sp)
  814a00:	dfc00115 	stw	ra,4(sp)
  814a04:	2021883a 	mov	r16,r4
  814a08:	0814bc00 	call	814bc0 <__call_exitprocs>
  814a0c:	00802074 	movhi	r2,129
  814a10:	109c3904 	addi	r2,r2,28900
  814a14:	11000017 	ldw	r4,0(r2)
  814a18:	20800f17 	ldw	r2,60(r4)
  814a1c:	10000126 	beq	r2,zero,814a24 <exit+0x30>
  814a20:	103ee83a 	callr	r2
  814a24:	8009883a 	mov	r4,r16
  814a28:	0814d400 	call	814d40 <_exit>

00814a2c <memcmp>:
  814a2c:	01c000c4 	movi	r7,3
  814a30:	3980192e 	bgeu	r7,r6,814a98 <memcmp+0x6c>
  814a34:	2144b03a 	or	r2,r4,r5
  814a38:	11c4703a 	and	r2,r2,r7
  814a3c:	10000f26 	beq	r2,zero,814a7c <memcmp+0x50>
  814a40:	20800003 	ldbu	r2,0(r4)
  814a44:	28c00003 	ldbu	r3,0(r5)
  814a48:	10c0151e 	bne	r2,r3,814aa0 <memcmp+0x74>
  814a4c:	31bfff84 	addi	r6,r6,-2
  814a50:	01ffffc4 	movi	r7,-1
  814a54:	00000406 	br	814a68 <memcmp+0x3c>
  814a58:	20800003 	ldbu	r2,0(r4)
  814a5c:	28c00003 	ldbu	r3,0(r5)
  814a60:	31bfffc4 	addi	r6,r6,-1
  814a64:	10c00e1e 	bne	r2,r3,814aa0 <memcmp+0x74>
  814a68:	21000044 	addi	r4,r4,1
  814a6c:	29400044 	addi	r5,r5,1
  814a70:	31fff91e 	bne	r6,r7,814a58 <__alt_mem_onchip_mem+0xff794a58>
  814a74:	0005883a 	mov	r2,zero
  814a78:	f800283a 	ret
  814a7c:	20c00017 	ldw	r3,0(r4)
  814a80:	28800017 	ldw	r2,0(r5)
  814a84:	18bfee1e 	bne	r3,r2,814a40 <__alt_mem_onchip_mem+0xff794a40>
  814a88:	31bfff04 	addi	r6,r6,-4
  814a8c:	21000104 	addi	r4,r4,4
  814a90:	29400104 	addi	r5,r5,4
  814a94:	39bff936 	bltu	r7,r6,814a7c <__alt_mem_onchip_mem+0xff794a7c>
  814a98:	303fe91e 	bne	r6,zero,814a40 <__alt_mem_onchip_mem+0xff794a40>
  814a9c:	003ff506 	br	814a74 <__alt_mem_onchip_mem+0xff794a74>
  814aa0:	10c5c83a 	sub	r2,r2,r3
  814aa4:	f800283a 	ret

00814aa8 <__register_exitproc>:
  814aa8:	defffa04 	addi	sp,sp,-24
  814aac:	dc000315 	stw	r16,12(sp)
  814ab0:	04002074 	movhi	r16,129
  814ab4:	841c3904 	addi	r16,r16,28900
  814ab8:	80c00017 	ldw	r3,0(r16)
  814abc:	dc400415 	stw	r17,16(sp)
  814ac0:	dfc00515 	stw	ra,20(sp)
  814ac4:	18805217 	ldw	r2,328(r3)
  814ac8:	2023883a 	mov	r17,r4
  814acc:	10003726 	beq	r2,zero,814bac <__register_exitproc+0x104>
  814ad0:	10c00117 	ldw	r3,4(r2)
  814ad4:	010007c4 	movi	r4,31
  814ad8:	20c00e16 	blt	r4,r3,814b14 <__register_exitproc+0x6c>
  814adc:	1a000044 	addi	r8,r3,1
  814ae0:	8800221e 	bne	r17,zero,814b6c <__register_exitproc+0xc4>
  814ae4:	18c00084 	addi	r3,r3,2
  814ae8:	18c7883a 	add	r3,r3,r3
  814aec:	18c7883a 	add	r3,r3,r3
  814af0:	12000115 	stw	r8,4(r2)
  814af4:	10c7883a 	add	r3,r2,r3
  814af8:	19400015 	stw	r5,0(r3)
  814afc:	0005883a 	mov	r2,zero
  814b00:	dfc00517 	ldw	ra,20(sp)
  814b04:	dc400417 	ldw	r17,16(sp)
  814b08:	dc000317 	ldw	r16,12(sp)
  814b0c:	dec00604 	addi	sp,sp,24
  814b10:	f800283a 	ret
  814b14:	00800034 	movhi	r2,0
  814b18:	10800004 	addi	r2,r2,0
  814b1c:	10002626 	beq	r2,zero,814bb8 <__register_exitproc+0x110>
  814b20:	01006404 	movi	r4,400
  814b24:	d9400015 	stw	r5,0(sp)
  814b28:	d9800115 	stw	r6,4(sp)
  814b2c:	d9c00215 	stw	r7,8(sp)
  814b30:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  814b34:	d9400017 	ldw	r5,0(sp)
  814b38:	d9800117 	ldw	r6,4(sp)
  814b3c:	d9c00217 	ldw	r7,8(sp)
  814b40:	10001d26 	beq	r2,zero,814bb8 <__register_exitproc+0x110>
  814b44:	81000017 	ldw	r4,0(r16)
  814b48:	10000115 	stw	zero,4(r2)
  814b4c:	02000044 	movi	r8,1
  814b50:	22405217 	ldw	r9,328(r4)
  814b54:	0007883a 	mov	r3,zero
  814b58:	12400015 	stw	r9,0(r2)
  814b5c:	20805215 	stw	r2,328(r4)
  814b60:	10006215 	stw	zero,392(r2)
  814b64:	10006315 	stw	zero,396(r2)
  814b68:	883fde26 	beq	r17,zero,814ae4 <__alt_mem_onchip_mem+0xff794ae4>
  814b6c:	18c9883a 	add	r4,r3,r3
  814b70:	2109883a 	add	r4,r4,r4
  814b74:	1109883a 	add	r4,r2,r4
  814b78:	21802215 	stw	r6,136(r4)
  814b7c:	01800044 	movi	r6,1
  814b80:	12406217 	ldw	r9,392(r2)
  814b84:	30cc983a 	sll	r6,r6,r3
  814b88:	4992b03a 	or	r9,r9,r6
  814b8c:	12406215 	stw	r9,392(r2)
  814b90:	21c04215 	stw	r7,264(r4)
  814b94:	01000084 	movi	r4,2
  814b98:	893fd21e 	bne	r17,r4,814ae4 <__alt_mem_onchip_mem+0xff794ae4>
  814b9c:	11006317 	ldw	r4,396(r2)
  814ba0:	218cb03a 	or	r6,r4,r6
  814ba4:	11806315 	stw	r6,396(r2)
  814ba8:	003fce06 	br	814ae4 <__alt_mem_onchip_mem+0xff794ae4>
  814bac:	18805304 	addi	r2,r3,332
  814bb0:	18805215 	stw	r2,328(r3)
  814bb4:	003fc606 	br	814ad0 <__alt_mem_onchip_mem+0xff794ad0>
  814bb8:	00bfffc4 	movi	r2,-1
  814bbc:	003fd006 	br	814b00 <__alt_mem_onchip_mem+0xff794b00>

00814bc0 <__call_exitprocs>:
  814bc0:	defff504 	addi	sp,sp,-44
  814bc4:	df000915 	stw	fp,36(sp)
  814bc8:	dd400615 	stw	r21,24(sp)
  814bcc:	dc800315 	stw	r18,12(sp)
  814bd0:	dfc00a15 	stw	ra,40(sp)
  814bd4:	ddc00815 	stw	r23,32(sp)
  814bd8:	dd800715 	stw	r22,28(sp)
  814bdc:	dd000515 	stw	r20,20(sp)
  814be0:	dcc00415 	stw	r19,16(sp)
  814be4:	dc400215 	stw	r17,8(sp)
  814be8:	dc000115 	stw	r16,4(sp)
  814bec:	d9000015 	stw	r4,0(sp)
  814bf0:	2839883a 	mov	fp,r5
  814bf4:	04800044 	movi	r18,1
  814bf8:	057fffc4 	movi	r21,-1
  814bfc:	00802074 	movhi	r2,129
  814c00:	109c3904 	addi	r2,r2,28900
  814c04:	12000017 	ldw	r8,0(r2)
  814c08:	45005217 	ldw	r20,328(r8)
  814c0c:	44c05204 	addi	r19,r8,328
  814c10:	a0001c26 	beq	r20,zero,814c84 <__call_exitprocs+0xc4>
  814c14:	a0800117 	ldw	r2,4(r20)
  814c18:	15ffffc4 	addi	r23,r2,-1
  814c1c:	b8000d16 	blt	r23,zero,814c54 <__call_exitprocs+0x94>
  814c20:	14000044 	addi	r16,r2,1
  814c24:	8421883a 	add	r16,r16,r16
  814c28:	8421883a 	add	r16,r16,r16
  814c2c:	84402004 	addi	r17,r16,128
  814c30:	a463883a 	add	r17,r20,r17
  814c34:	a421883a 	add	r16,r20,r16
  814c38:	e0001e26 	beq	fp,zero,814cb4 <__call_exitprocs+0xf4>
  814c3c:	80804017 	ldw	r2,256(r16)
  814c40:	e0801c26 	beq	fp,r2,814cb4 <__call_exitprocs+0xf4>
  814c44:	bdffffc4 	addi	r23,r23,-1
  814c48:	843fff04 	addi	r16,r16,-4
  814c4c:	8c7fff04 	addi	r17,r17,-4
  814c50:	bd7ff91e 	bne	r23,r21,814c38 <__alt_mem_onchip_mem+0xff794c38>
  814c54:	00800034 	movhi	r2,0
  814c58:	10800004 	addi	r2,r2,0
  814c5c:	10000926 	beq	r2,zero,814c84 <__call_exitprocs+0xc4>
  814c60:	a0800117 	ldw	r2,4(r20)
  814c64:	1000301e 	bne	r2,zero,814d28 <__call_exitprocs+0x168>
  814c68:	a0800017 	ldw	r2,0(r20)
  814c6c:	10003226 	beq	r2,zero,814d38 <__call_exitprocs+0x178>
  814c70:	a009883a 	mov	r4,r20
  814c74:	98800015 	stw	r2,0(r19)
  814c78:	00000000 	call	0 <__alt_mem_sdram-0x800000>
  814c7c:	9d000017 	ldw	r20,0(r19)
  814c80:	a03fe41e 	bne	r20,zero,814c14 <__alt_mem_onchip_mem+0xff794c14>
  814c84:	dfc00a17 	ldw	ra,40(sp)
  814c88:	df000917 	ldw	fp,36(sp)
  814c8c:	ddc00817 	ldw	r23,32(sp)
  814c90:	dd800717 	ldw	r22,28(sp)
  814c94:	dd400617 	ldw	r21,24(sp)
  814c98:	dd000517 	ldw	r20,20(sp)
  814c9c:	dcc00417 	ldw	r19,16(sp)
  814ca0:	dc800317 	ldw	r18,12(sp)
  814ca4:	dc400217 	ldw	r17,8(sp)
  814ca8:	dc000117 	ldw	r16,4(sp)
  814cac:	dec00b04 	addi	sp,sp,44
  814cb0:	f800283a 	ret
  814cb4:	a0800117 	ldw	r2,4(r20)
  814cb8:	80c00017 	ldw	r3,0(r16)
  814cbc:	10bfffc4 	addi	r2,r2,-1
  814cc0:	15c01426 	beq	r2,r23,814d14 <__call_exitprocs+0x154>
  814cc4:	80000015 	stw	zero,0(r16)
  814cc8:	183fde26 	beq	r3,zero,814c44 <__alt_mem_onchip_mem+0xff794c44>
  814ccc:	95c8983a 	sll	r4,r18,r23
  814cd0:	a0806217 	ldw	r2,392(r20)
  814cd4:	a5800117 	ldw	r22,4(r20)
  814cd8:	2084703a 	and	r2,r4,r2
  814cdc:	10000b26 	beq	r2,zero,814d0c <__call_exitprocs+0x14c>
  814ce0:	a0806317 	ldw	r2,396(r20)
  814ce4:	2088703a 	and	r4,r4,r2
  814ce8:	20000c1e 	bne	r4,zero,814d1c <__call_exitprocs+0x15c>
  814cec:	89400017 	ldw	r5,0(r17)
  814cf0:	d9000017 	ldw	r4,0(sp)
  814cf4:	183ee83a 	callr	r3
  814cf8:	a0800117 	ldw	r2,4(r20)
  814cfc:	15bfbf1e 	bne	r2,r22,814bfc <__alt_mem_onchip_mem+0xff794bfc>
  814d00:	98800017 	ldw	r2,0(r19)
  814d04:	153fcf26 	beq	r2,r20,814c44 <__alt_mem_onchip_mem+0xff794c44>
  814d08:	003fbc06 	br	814bfc <__alt_mem_onchip_mem+0xff794bfc>
  814d0c:	183ee83a 	callr	r3
  814d10:	003ff906 	br	814cf8 <__alt_mem_onchip_mem+0xff794cf8>
  814d14:	a5c00115 	stw	r23,4(r20)
  814d18:	003feb06 	br	814cc8 <__alt_mem_onchip_mem+0xff794cc8>
  814d1c:	89000017 	ldw	r4,0(r17)
  814d20:	183ee83a 	callr	r3
  814d24:	003ff406 	br	814cf8 <__alt_mem_onchip_mem+0xff794cf8>
  814d28:	a0800017 	ldw	r2,0(r20)
  814d2c:	a027883a 	mov	r19,r20
  814d30:	1029883a 	mov	r20,r2
  814d34:	003fb606 	br	814c10 <__alt_mem_onchip_mem+0xff794c10>
  814d38:	0005883a 	mov	r2,zero
  814d3c:	003ffb06 	br	814d2c <__alt_mem_onchip_mem+0xff794d2c>

00814d40 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  814d40:	defffd04 	addi	sp,sp,-12
  814d44:	df000215 	stw	fp,8(sp)
  814d48:	df000204 	addi	fp,sp,8
  814d4c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  814d50:	0001883a 	nop
  814d54:	e0bfff17 	ldw	r2,-4(fp)
  814d58:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  814d5c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  814d60:	10000226 	beq	r2,zero,814d6c <_exit+0x2c>
    ALT_SIM_FAIL();
  814d64:	002af070 	cmpltui	zero,zero,43969
  814d68:	00000106 	br	814d70 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  814d6c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  814d70:	003fff06 	br	814d70 <__alt_mem_onchip_mem+0xff794d70>
