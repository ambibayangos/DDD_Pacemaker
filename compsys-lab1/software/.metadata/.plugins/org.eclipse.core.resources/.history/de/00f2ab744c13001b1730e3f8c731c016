/*Project: DDD mode pacemaker on Nios II interfaced with DE-115 board
 *
 * This project is an embedded traffic light controller programme for Altera DE-115 board.
 * The traffic light controller has 4 modes.
 *
 * This project is an embedded DDD mode pacemaker on NIOS II interfaced wth Altera DE-115 board.
 * the main FSM for this project is done using sscharts(model based) approach and this fsm is interfaced
 * using emmbedder C with HAL api from Altera. This project has two modes.
 *
 * Mode 1 - The heart signals are emulated using KEY0 (Ventricular sense from heart)
 * 			and KEY1 (Atrial sense from heart).
 *
 * Mode 2 - The heart signals come from UART send by CS303-Heart.exe (a heart emulator)
 * 			where the character "V" means ventrical signals from the heart and the character "A"
 * 			means means atrial signals.
 *
 *
 * Read the README.md file or README.txt file for more details.
 * REAME files are in the root folder of this project.
 *
 * 	Authors: Arturo Bayangos Jr.
 * 			 Tommy Hou
 *
 * 	Last Edited date: 21/10/2020
 */


#include <stdio.h>
#include <altera_avalon_pio_regs.h>
#include <altera_avalon_uart_regs.h>
#include "sys/alt_alarm.h"
#include "sys/alt_irq.h"


#include"system.h"
#include "pacemaker_fsm.h"

// Timeout value for the timers
# define AVI_VALUE 300
# define AEI_VALUE 800
# define PVARP_VALUE 50
# define VRP_VALUE 150
# define LRI_VALUE 950
# define URI_VALUE 600

#define _Asense  65 // ascii for character "A"
#define _Vsense  86 // ascii for character "V"


char *timer_start_flags[6]; // stores the flags to start a timer
char *timer_state_flags[6]; // stores the flags to tell if timer is couting or not
char *timer_expired_flags[6]; // stores the flags to tell is timer has exprired
int timer_fist_timeStamp_Value[6] = {0,0,0,0,0,0}; // stores the initial timestamp when a timer is started
int timer_timeout_values[6] = { // stores the timer timeout values
			AVI_VALUE,
			PVARP_VALUE,
			VRP_VALUE,
			AEI_VALUE,
			LRI_VALUE,
			URI_VALUE
	};
int vsense_flag = 0; // if this flag set then Vsense occured in mode 1
int asense_flag = 0; // if this flag set then Asense occured in mode 1
int vsense_flag_mode_2 = 0; // if this flag set then Vsense occured in mode 2
int asense_flag_mode_2 = 0; // if this flag set then Asense occured in mode 2
int occupied = 0; // represents a critical section ( "0" section is free , "1" is not free)
FILE* uart;
FILE* lcd;


/* get_heart_signals (void* context, alt_u32 ID):
 *
 * This method sets a flag to set initiate setting the
 * Vsense or Asense variable if KEY0 and KEY1 are is pressed
 * respectively.
 */
void get_heart_signals(void* context, alt_u32 ID)
{
	// critical section "ticket" variable
	int code;

	// Read buttons value
	int buttonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);

	// ensure mutual exclusion
	//test_and_set(&code);
	//while(code)test_and_set(&code);

	if(buttonsValue == 0b110) // Vsense occurred
	{
		vsense_flag = 1;
	}
	else if(buttonsValue == 0b101) // Asense occured
	{
		asense_flag = 1;
	}
	else if(buttonsValue == 0b100) // Asense and Vsense occured
	{
		vsense_flag = 1;
		asense_flag = 1;
	}

	// free the critical section
	//occupied = 0;

	// clear the edge capture register to enable next interrupt
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
}

/* get_uart_contents(void *context ,alt_u32 interrupt):
 *
 * This method is the ISR routine runned when a character is ready to
 * be read from uart buffer.
 *
 * This method also sets the flag "asense_flag_mode_2"
 * to set variable "Vsense" and sets the flag "vsense_flag_mode_2"
 * to set the variable "Asense"
 */
void get_uart_contents(void *context ,alt_u32 interrupt)
{
	unsigned short int data,status,code;
	// wait till a char is ready to read from uart
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
	while (!(status & ALTERA_AVALON_UART_STATUS_RRDY_MSK))
	status = IORD_ALTERA_AVALON_UART_STATUS(UART_BASE);
	// read the buffer content
	data =IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);

	// ensure mutual exclusion
	//test_and_set(&code);
	//while(code)test_and_set(&code);
	if(data == _Asense)
	{
		asense_flag_mode_2 = 1;
		printf("Asense received from heart emulator\n");
	}
	else if(data == _Vsense)
	{
		vsense_flag_mode_2 = 1;
		printf("Vsense received from heart emulator\n");
	}

	//free the critical section
	//occupied = 0;

}

/* timeout_checker(int first_timeStamp , int timeout ,char *output):
 *
 * This function determines if a timer has timeout out.
 * it returns "1" for timer has timed out and "0" if timer
 * is still counting.
 *
 * inputs
 *
 * 	fist_tiimeStamp - the value of alt_n_ticks when the timer is started.
 * 	timer_state - "0" for timer done counting and "1" for timer still counting.
 * 	timeout - the amount of time (ms) the timer has to count.
 * 	timer_expired_flag - the address of the timer variable that represent an input on the sccharts
 * 			 will modify the value of the passed outputput to "1" for timer timeout
 * 			 and "0" for timer still counting.
 */
void timeout_checker(int first_timeStamp , int timeout ,char *timer_expired_flag)
{

	//calculates the elapsed time
	int time_diff = alt_nticks() - first_timeStamp;

	if(time_diff >= timeout)
	{
		 printf("timeoutvalue %d \n",time_diff);
		(*timer_expired_flag) = 1; // timer expired
	}
}

/* transmit_string(char* txString):
 *
 * This method transmits a character to uart
 */
void transmit_string(char* txString){
	//Set RTS to true (logic 0 as inverted)
	IOWR(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG ,IORD(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG) & ~(0x0800));
	//Ensure that CTS is true (logic 0 as inverted)
	while((IORD(UART_BASE,ALTERA_AVALON_UART_STATUS_REG) & 0x0800) != 0){};
	//Ensure that previous character sent
	while((IORD(UART_BASE,ALTERA_AVALON_UART_STATUS_REG) & 0x0040) == 0){};
	//Write next character into txData register
	IOWR(UART_BASE,ALTERA_AVALON_UART_TXDATA_REG ,txString[0]);

//Finished sending string so set RTS to false (logic 1 as inverted)
IOWR(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG ,IORD(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG) | 0x0800);
}

/* get_inputs(int *mode)
 *
 *  This function sets or clears the Vpace and Apace
 *  variables before being inputted to the pacemeker
 *  fsm tick "tick()".
 *
 *  It take in the mode to decide if the heart signals
 *  comes from uart or the buttons on DE-115 board
 */
void get_inputs(int *mode)
{
	if(*mode) // Read Vsense and Asense inputs from the heart emulator ( SW0 = 1)
		  {
			  // ensure mutual exclusion
			  //test_and_set(&code);
			  //while(code) test_and_set(&code);
			  if(asense_flag_mode_2)
			  {
				  Asense = 1; // Asense occured
				  asense_flag_mode_2 = 0;
			  }
			  else
			  {
				  Asense = 0; // no Asense occured
			  }

			  if(vsense_flag_mode_2)
			  {
				  Vsense = 1; // Vsense occured
				  vsense_flag_mode_2 = 0;

			  }
			  else
			  {
				  Vsense = 0; // no Vsense occured
			  }

			  //occupied = 0; // free critical section

		  }
		  else // Read Vsense and Asense inputs from KEY0 and KEY1 ( SW0 = 0)
		  {
			  // ensure mutual exclusion
			  //test_and_set(&code);
			  //while(code) test_and_set(&code);

			  //Get Vsense or Asense inputs
			  if(vsense_flag)
			  {
				  Vsense = 1; // Vsense occured
				  vsense_flag = 0; // reset vsense occured flag
			  }
			  else
			  {
				  Vsense = 0; // no Vsense occured
			  }

			  if(asense_flag)
			  {
				  Asense = 1; // Asense occured
				  asense_flag = 0; // reset Asense occured flag
			  }
			  else
			  {
				  Asense = 0; // no Asense occured
			  }

			  //occupied = 0; // free critical section
		  }
}

/* get_timer_expired_inputs():
 *
 * This method sets the timer expired variables (see "timer_expired_flags" variable)
 * to indicate a timer expiring in sscharts
 */
void get_timer_expired_inputs(void)
{
	  // Get inputs (TIMER_ex inputs) e.g. "AVI_ex = 1" timer AVI expired
	  for(int i = 0; i < 6 ; i++)
	  {
		  // check if a timer is started
		  if((*timer_start_flags[i]))
		  {
			  // get the time stamp when start timer flag is set
			  timer_fist_timeStamp_Value[i] = alt_nticks();
		  }

		  // check if a timer is still counting
		  if((*timer_state_flags[i]))
		  {
			  /* check if a timer has timed out
			   * and outputs a timer expire flag to
			   * intput into sccharts
			   */
			  timeout_checker(timer_fist_timeStamp_Value[i],
			                  timer_timeout_values[i],
			                  timer_expired_flags[i]);
		  }
		  else
		  {
			  *timer_expired_flags[i] = 0; // timer is idle or counting
		  }

	   }
}

/* emit_outputs(int *led_counter_vp , int* led_counter_ap , int *mode):
 *
 *  this method "emits" the output of the pacemaker sscharts logic
 *  Vpace = 1 (set LEDG0 and LEDG1) or Apace = 1 (set LEDG6 and LEDG7)
 *  or Vpace = 0 (clear LEDG0 and LEDG1) or Apace = 0 (clear LEDG6 and LEDG7)
 */
void emit_outputs(int *led_counter_vp , int* led_counter_ap , int *mode)
{
	  // emit FSM outputs
	  if(Apace)
	  {

		  // set all green LED (high green led means atrium is paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE)| 192);
		  printf("Apace\n");


		  if(*mode) // if mode is mode 2
		  {
			  char AP[1] = "A";
			  transmit_string(&AP); // make a Vpace on the heart emulator
		 	 printf("---> send A\n");
		  }
	  }
	  else
	  {
		  if(*led_counter_ap == 50)
		  {
			  // clear all red LED (heart is not artificially paced)
			  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0);
			  led_counter_vp = 0;
		  }

		  (*led_counter_ap)++;
	  }

	  if(Vpace)
	  {
		  // set all red LED (high red led means ventricle is paced)
		  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE)| 3);
		  printf("Vpace\n");

		  if(*mode) // if mode is mode 2
		  {
			  char VP[1] = "V";
			  transmit_string(&VP); // make a Vpace on the heart emulator // make a Vpace on the heart emulator
			  printf("---> send V\n");
		  }
	  }
	  else
	  {
		  if(*led_counter_vp == 50)
		  {
			  // clear all green LED (heart is not artificially paced)
			  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, 0);
			  *led_counter_vp = 0;
		  }

		  (*led_counter_vp)++;
	  }

}

/* test_and_set(int* code):
 *
 * This method ensures that only one process (main or ISR) has access
 * to variables "vsense_flag" or "asense_flag" at a time
 */
void test_and_set(int* code)
{
	(*code) = occupied;
	occupied = 1;
}

/* main()
 *
 * This the programme entry point
 */
int main()
{
	// Initialize the FSM
	reset();

	// Store the timers "timer start" flags
	timer_start_flags[0] = &start_AVI;
	timer_start_flags[1] = &start_PVARP;
	timer_start_flags[2] = &start_VRP;
	timer_start_flags[3] = &start_AEI;
	timer_start_flags[4] = &start_LRI;
	timer_start_flags[5] = &start_URI;

	// Store the timer state (counting = 1 idle = 0)
	timer_state_flags[0] = &AVI_counting;
	timer_state_flags[1] = &PVARP_counting;
	timer_state_flags[2] = &VRP_counting;
	timer_state_flags[3] = &AEI_counting;
	timer_state_flags[4] = &LRI_counting;
	timer_state_flags[5] = &URI_counting;

	// Store the SCCHARTS OUTPUT variables
	timer_expired_flags[0] = &AVI_ex;
	timer_expired_flags[1] = &PVARP_ex;
	timer_expired_flags[2] = &VRP_ex;
	timer_expired_flags[3] = &AEI_ex;
	timer_expired_flags[4] = &LRI_ex;
	timer_expired_flags[5] = &URI_ex;

	//  stores the switch values on the switch on DE-115 board
	int swicthValue = 0;
	// stores the previous value of variable "swicthValue"
	int prevSwitchValue = -1;
	// critical section "ticket" variable
	int code;
	// led delay counter for vpace
	int led_counter_vp = 0;
	// led delay counter for apace
	int led_counter_ap = 0;

	//Open uart with read and write
	uart = fopen(UART_NAME , "w+");
	//uart = open(UART_NAME,O_NONBLOCK | O_RDWR);
	if(uart == NULL)
	{
		printf("error ---------------------->could not start uart\n");
	}

	//Open lcd module on the DE-115 board
	lcd = fopen(LCD_NAME, "w");
	if(lcd == NULL)
	{
		printf("error ---------------------->could not start lcd\n");
	}

	// initialize button isr - clear the buttons edge capture register
	 IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
	// enable interrupt on button press (KEY0 or KEY1 only)
	 IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b011);
	// initialize button isr - register button ISR
	 alt_irq_register (BUTTONS_IRQ, NULL , get_heart_signals);
	 // enable ISR routine when uart has a char in buffer
	 IOWR(UART_BASE,ALTERA_AVALON_UART_CONTROL_REG,ALTERA_AVALON_UART_CONTROL_RRDY_MSK);
	 // register uart ISR routine
	  alt_irq_register(UART_IRQ, NULL, get_uart_contents);

  while(1)
  {

	  /********************** Read inputs *********************
	   **********************              *********************
	   **********************              *********************
	   */
	  /* read Vsense or Asense inputs and clear them in the next tick
	   * if the are set                                            */
	  get_inputs(&swicthValue);

	  /* read if timers are started and check if they are expired.
	   * set timer expired inputs if they are expired otherwise clear them */
	   get_timer_expired_inputs();

	  /**********************  FSM tick *********************
	   **********************           *********************
	   **********************           *********************
	   */
	   // do one FSM tick
	  tick();

	  /********************* emits output  *********************
	   *********************               *********************
	   *********************               *********************
	   *
	   * if Vpace = 1 (set LEDG0 and LEDG1)
	   * if Apace = 1 (set LEDG6 and LEDG7)
	   *
	   * otherwise (clear LEDG0 and LEDG1)
	   *           (clear LEDG6 and LEDG7)
	   */
	  emit_outputs(&led_counter_vp,&led_counter_ap, &swicthValue);


	  /********************** Determine mode  *********************
	   **********************                 *********************
	   **********************                 *********************
	   */
	  // get current value of SW0 from DE-115 board
	  swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE)&1;
	  if(prevSwitchValue != swicthValue)
	  {
		  if(swicthValue)
		  {
			  fprintf(lcd,"Mode 2 \n");
			  fprintf(lcd,"Uart\n");
		  }
		  else
		  {
			  fprintf(lcd,"Mode 1 \n");
			  fprintf(lcd,"Buttons\n");
		  }

		  prevSwitchValue = swicthValue;
		  asense_flag = 0; // reset Vsense occured flag
		  vsense_flag = 0; // reset Asense occured flag
		  asense_flag_mode_2 = 0; // reset Asense occured flag
		  vsense_flag_mode_2 = 0; // reset Vsense occured flag
	  }

  }

  fclose(uart); // close uart
  fclose(lcd);  // close lcd
  return 0;

}

