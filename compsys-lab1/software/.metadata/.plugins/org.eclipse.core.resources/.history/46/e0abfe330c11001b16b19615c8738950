/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <altera_avalon_pio_regs.h>
#include "sys/alt_alarm.h"

#include"system.h"
#include "FSM.h"

# define AVI_VALUE 250
# define AEI_VALUE 800
# define PVARP_VALUE 300
# define VRP_VALUE 150
# define LRI_VALUE 950
# define URI_VALUE 900

char timer_start_flags[] = {start_AVI,start_PVARP,start_VRP,start_AEI,start_LRI,start_URI};

int main()
{

// Initialize the pacemaker FSM
reset();

// Force Vsense to occur TODO: REMOVE THIS LATER!
 Vsense = 1;


  while(1)
  {

	  for(int i = 0; i < 10 ; i++)
	  {

	  }
	  // run the FSM
	  tick();

  }

  return 0;

}

/*
 * This function determines if a timer has timeout out.
 * it returns "1" for timer has timed out and "0" if timer
 * is still counting.
 *
 * inputs
 *
 * 	fist_tiimeStamp - the value of alt_n_ticks when the timer is started.
 * 	timer_state - "0" for timer done counting and "1" for timer still counting.
 * 	timeout - the amount of time (ms) the timer has to count.
 * 	output - the address of the timer variable that represent an input on the sccharts
 * 			 will modify the value of the passed outputput to "1" for timer timeout
 * 			 and "0" for timer still counting.
 */
int timeout_checker(int first_timeStamp , int timer_state , int timeout ,int* output)
{
	// calculates the elapsed time
	int time_diff = alt_n_ticks() - first_timeStamp;

	if(time_diff >= timeout)
	{
		output = 1; // timer expired
	}
	else
	{
		output = 0; // timer still counting
	}
}

