/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <altera_avalon_pio_regs.h>
#include "sys/alt_alarm.h"

#include"system.h"
#include "FSM.h"

# define AVI_VALUE 250
# define AEI_VALUE 800
# define PVARP_VALUE 300
# define VRP_VALUE 150
# define LRI_VALUE 950
# define URI_VALUE 900

char timer_start_flags[6];
char timer_state_flags[6];
char *timer_expired_flags[6];
int timer_fist_timeStamp_Value[6] = {0,0,0,0,0,0};
int timer_timeout_values[6] = {AVI_VALUE,PVARP_VALUE,VRP_VALUE,AEI_VALUE,LRI_VALUE,URI_VALUE};

/*
 * This function determines if a timer has timeout out.
 * it returns "1" for timer has timed out and "0" if timer
 * is still counting.
 *
 * inputs
 *
 * 	fist_tiimeStamp - the value of alt_n_ticks when the timer is started.
 * 	timer_state - "0" for timer done counting and "1" for timer still counting.
 * 	timeout - the amount of time (ms) the timer has to count.
 * 	output - the address of the timer variable that represent an input on the sccharts
 * 			 will modify the value of the passed outputput to "1" for timer timeout
 * 			 and "0" for timer still counting.
 */
void timeout_checker(int first_timeStamp , int timeout ,char *output)
{
	// calculates the elapsed time
	int time_diff = alt_nticks() - first_timeStamp;

	if(time_diff >= timeout)
	{
		printf("timeoutvalue %d \n",time_diff);
		*output = 1; // timer expired
	}
	else
	{
		*output = 0; // timer still counting
	}
}



int main()
{
	// Store the timers "timer start" flags
	timer_start_flags[0] = start_AVI;
	timer_start_flags[1] = start_PVARP;
	timer_start_flags[2] = start_VRP;
	timer_start_flags[3] = start_AEI;
	timer_start_flags[4] = start_LRI;
	timer_start_flags[5] = start_URI;

	// Store the timer state (counting = 1 idle = 0)
	timer_state_flags[0] = AVI_counting;
	timer_state_flags[1] = PVARP_counting;
	timer_state_flags[2] = VRP_counting;
	timer_state_flags[3] = AEI_counting;
	timer_state_flags[4] = LRI_counting;
	timer_state_flags[5] = URI_counting;

	// Store the SCCHARTS OUTPUT variables
	timer_expired_flags[0] = &AVI_ex;
	timer_expired_flags[1] = &PVARP_ex;
	timer_expired_flags[2] = &VRP_ex;
	timer_expired_flags[3] = &AEI_ex;
	timer_expired_flags[4] = &LRI_ex;
	timer_expired_flags[5] = &URI_ex;

	// Initialize states in thee pacemaker FSM
	reset();
	printf("%c",&AVI_ex);
  while(1)
  {

	  for(int i = 0; i < 6 ; i++)
	  {
		  if(timer_start_flags[i]) // check if a timer is started
		  {
			  // start this timer
			  timer_fist_timeStamp_Value[i] = alt_nticks();
		  }

		  if(timer_state_flags[i]) // check if a timer is still counting
		  {
			  /* check if a timer has timed out
			   * and outputs a timer expire flag to
			   * intput into sccharts
			   */
			  timeout_checker(timer_fist_timeStamp_Value[i],
			                  timer_timeout_values[i],
			                  timer_expired_flags[i]
			                  );
		  }

	  }


	  // run the FSM
	  tick();

  }

  return 0;

}

