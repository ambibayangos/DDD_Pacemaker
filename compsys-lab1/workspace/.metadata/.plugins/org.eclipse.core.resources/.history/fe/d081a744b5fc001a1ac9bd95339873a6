/*Project:Traffic light controller on Nios 2
 *
 * This project is an embedded traffic light controller programme for Altera DE-115 board.
 * The traffic light controller has 4 modes.
 *
 * Mode 1 - simple East-West, North-South traffic light controller with fixed timeout time between green,
 * 			yellow and red lights which are 6, 2 and 0.5 seconds consecutively.
 * Mode 2 - Mode 1 with pedestrian functionality.
 * Mode 3 - Mode 2 that can set new timeout values for traffic lights.
 * Mode 4 - Mode 3 that emulates a camera on an intersection that takes a photo of a
 * 			car if it enters on a red light or stays too long on the intersection.
 *
 *
 * Read the README.md file or README.txt file for more details.
 *
 * 	Author: Arturo Bayangos Jr.
 * 			Tommy Hou
 *
 * 	Date: 22/09/2020
 */

#include <stdio.h>
#include "sys/alt_alarm.h"
#include "system.h"
#include <altera_avalon_pio_regs.h>

//GREEN LED SETTINGS
#define RR 0b00100100
#define GR 0b00100001
#define YR 0b00100010
#define RG 0b00001100
#define RY 0b00010100
#define NSPED_GREEN 0b01100001
#define EWPED_GREEN 0b10001100

// Global variables
int currentIndex = 0;
int nextIndex = 0;
int timerExpiresAt[6] = {500, 6000, 2000, 500, 6000, 2000};
int trafficLight[] = {RR, GR, YR, RR, RG, RY, RR};

int mode = 0;
int swicthValue = 0;
int state = 1;
int pedNS = 0;
int pedEW = 0;
int buffer[30];
int carEntered = 1;
FILE* uart;
FILE* lcd;
alt_alarm timer_camera;
alt_alarm timer_traffic_light;

/*
 * this timer isr trigger after 2 second when a car enters the intersection on yellow light.
 */
alt_u32 tlc_camera_timer_isr(void* context)
{
	fprintf(uart,"Shot taken\n\r");
	return 0;
}

/*
 * this timer isr cycles though the fsm states of the traffic light
 */
alt_u32 tlc_timer_isr(void* context)
{
	//------------------------------- Mode 1 starts
	currentIndex = nextIndex;
	nextIndex = (++nextIndex)%7; // cycles through the traffic light fsm states
	//sets and clears green leds for correct EW & NS traffic lights
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, trafficLight[currentIndex]);
	//------------------------------- Mode 1 end

	//******************************** Mode 2 starts
	// enable mode 2 capabilities when the mode is 2,3 or 4
	if((mode == 0b0010) || (mode == 0b0100) || (mode == 0b1000))
	{

		if(currentIndex == 1 && pedNS == 1) // handles the NS pedestrian lights
		{
			// disable pedestrian button interrupt
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b00);
			pedNS = 0;
			// enable pedestrian button interrupt
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);

			int redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
			//clears red led - pedestrian handled
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, redLEDs & 0b10);
			//set green led - NS pedestrian green lights and NS green and EW red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, NSPED_GREEN);
		}
		else if(currentIndex == 4 && pedEW == 1)// handles the NS pedestrian lights
		{
			// disable pedestrian button interrupt
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b00);
			pedEW = 0;
			// enable pedestrian button interrupt
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);

			int redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE);
			//clears red led - pedestrian handled
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, redLEDs & 0b01);
			//set green led - EW pedestrian green lights and EW green and NS red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, EWPED_GREEN);
		}
	}
	//********************************** Mode 2 end

	//---------------------------------- Mode 4 starts
	if(carEntered == 2 && (currentIndex == 2 || currentIndex == 5))
	{
		// start a 2 sec timer before taking a shot
		alt_alarm_start(&timer_camera, 2000, tlc_camera_timer_isr, NULL);
		fprintf(uart,"Camera activated\n\r");
	}
	//---------------------------------- Mode 4 ends
	return timerExpiresAt[currentIndex];
}


int tick1 = 0;
int tick2 = 0;
int tick3 = 0;
/*
 * handles pedestrian buttons(i.e buttons 0 and 1) pressed.
 * also handles car entering and leaving functionality(i.e button 2 being pressed)for mode 4.
 */
void NSEW_ped_isr (void* context, alt_u32 ID)
{
	int buttonsValue = IORD_ALTERA_AVALON_PIO_DATA(BUTTONS_BASE);

	if(buttonsValue == 0b110)// NS ped pressed
	{
		if(currentIndex == 1)// if NS is green
		{
			//set green led - NS pedestrian green lights and NS green and EW red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, NSPED_GREEN);
		}
		else
		{
			pedNS = 1;
			// set led to acknowledged NS ped pressed
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b01);
		}

	}
	else if(buttonsValue == 0b101)// EW ped pressed
	{
		if(currentIndex == 4)// If EW is green
		{
			//set green led - EW pedestrian green lights and EW green and NS red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, EWPED_GREEN);
		}
		else
		{
			pedEW = 1;
			// set led to acknowledged EW ped pressed
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b10);
		}

	}
	else if(buttonsValue == 0b100)// NS & EW peds pressed
	{
		if(currentIndex == 1) // if NS is green
		{
			pedEW = 1;
			// set led to acknowledged EW ped pressed
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b10);
			//set green led - NS pedestrian green lights and NS green and EW red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, NSPED_GREEN);

		}
		else if(currentIndex == 4) // if EW is green
		{
			pedNS = 1;
			// set led to acknowledged NS ped pressed
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b01);
			//set green led - EW pedestrian green lights and EW green and NS red
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE, EWPED_GREEN);
		}
		else
		{
			pedNS = 1;
			pedEW = 1;
			// set led to acknowledged NS & EW ped pressed
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b11);
		}

	}
	// button 2 pressed - car entering or leaving
	else if((buttonsValue == 0b011 || buttonsValue == 0b001 || buttonsValue == 0b000) && mode == 0b1000)
	{
		if(carEntered == 1) // handles car entering
		{
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) | 0b100);
			if(currentIndex == 2 || currentIndex == 5) // handles car entering on Yellow light
			{
				// start a 2 sec timer before taking a shot
				alt_alarm_start(&timer_camera, 2000, tlc_camera_timer_isr, NULL);
				fprintf(uart,"Camera activated\n\r");
				tick1 = alt_nticks(); // records time when the car enters
				carEntered = 2;
			}
			else if(currentIndex == 1 || currentIndex == 4) // handles car entering on Green light
			{
				tick1 = alt_nticks(); // records time when the car enters
				carEntered = 2;
			}
			else if(currentIndex == 0 || currentIndex == 3)// handles car entering on Red light
			{
				fprintf(uart,"Shot taken\n\r");
				tick1 = alt_nticks(); // records time when the car enters
				carEntered = 2;
			}

		}
		else if(carEntered == 2) // handles car leaving
		{
			//clears red led - pedestrian handled
			//IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, IORD_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE) & (1<<2));
			alt_alarm_stop(&timer_camera); // stop timer as car leaves
			tick2 = alt_nticks(); // records when the car leaves
			tick3 = tick2 - tick1;
			carEntered = 1;
			fprintf(uart,"Vehicle left | Time in the intersection:%.4f\n\r",(tick3*1.0)/1000);
		}
	}

	// clear the edge capture register
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
}

/*
 * Parses input buffer array values from ascii to numeric values.
 */
void parse_input(int indx, int buffer[])
{
	int multiple = 1;
	int value = 0;
	int newTimeoutIndx = 5;
	for(int i = indx-2; i >= 0 ; i--) // start at the last value of input buffer
	{

		if(buffer[i] == 44) // if buffer value is "," then total set value of "value" to a new timeout
		{
			  timerExpiresAt[newTimeoutIndx] = value;
			  newTimeoutIndx--;
			  multiple = 1;
			  value = 0;
		}
	    else
	    {
	    	  // get the numerical value of the buffer at index "i" and multiplies the place value
		      value =  value + multiple*(buffer[i] - 48);
		      // moves through place values (ones , tens ....)
			  multiple = multiple*10;

				  if(i == 0)
				  {
				    timerExpiresAt[newTimeoutIndx] = value;
				  }
	    }

	}

}

/*
 * 	takes the new timeout values from uart inputs
 *  returns the last index of the input buffer array
 */
int get_timeout_values(void)
{
	fprintf(uart,"Enter new Timeout values: ");
	int input;
	int prevInput = -1;
	int indx = 0;
	int sepCount = 0;
	int digitCount = 0;
	do {
			input =  fgetc (uart); // read the typed value on uart file

			// validates the input - only takes 0-9 and characters "," and "/n"(i.e enter)
			if(!((input >= 48 && input <= 57) || input == 44 || input == 13)
				||(indx == 0 && input == 44) ||(prevInput == input && input == 44)
				|| (digitCount == 5 && input != 44 && input != 13)|| (sepCount == 5 && prevInput == 44 && input == 13)
				|| (input == 13 && sepCount < 5) || (sepCount == 5 && input == 44))
			{
				fprintf(uart ,"Error ---------------->Invalid Input\n\r");
				sepCount = 0;
				digitCount = 0;
				indx = 0;
				prevInput = -1;
				fprintf(uart,"Enter new Timeout values: ");
			}
		    else
		    {

				if(input == 44) // if input is ","
				{
				  sepCount++;
				  digitCount = 0;
				}

				digitCount++;
				prevInput = input;
				buffer[indx] = input;
				indx++;

		    }
		// end input scanning when enter is pressed and 5 "," characters are in the buffer.
		// input validation above ensures that atleast 1 digit is in between the 5th "," and "\n"(i.e enter)
		} while (!(input == 13 && sepCount == 5));

	return indx;

}

/*
 * Prints the currrent mode on lcd
 * And resets the timeout values as mode chages
 * from mode 3 to mode 1.
 * It also disables button interupts depending on the mode
 */
void change_mode_routine(void)
{
	mode = swicthValue;
	switch(mode)
	{
		case 0b0001: // if mode 1
			fprintf(lcd , "Mode 1\n");
			fprintf(lcd , "\n");
			//reset to hardcoded timeout values
			timerExpiresAt[0] = 500;timerExpiresAt[1] = 6000; timerExpiresAt[2] = 2000;
			timerExpiresAt[3] = 500; timerExpiresAt[4] = 6000; timerExpiresAt[5] = 2000;
			//disable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b000);
			//turn off red ped ligths and make sure ped shared variables are reset
			IOWR_ALTERA_AVALON_PIO_DATA(LEDS_RED_BASE, 0b00);pedNS = 0;pedEW = 0;
			break;
		case 0b0010:// if mode 2
			fprintf(lcd , "Mode 2\n");
			fprintf(lcd , "\n");
			//disable buttons interupt for mode 3(button 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b011);
			break;
		case 0b0100:// if mode 3
			fprintf(lcd , "Mode 3\n");
			fprintf(lcd , "\n");
			//enable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);
			break;
		case 0b1000:// if mode 4
			fprintf(lcd , "Mode 4\n");
			fprintf(lcd , "\n");
			//enable buttons interupt (buttons 0,1 and 2)
			IOWR_ALTERA_AVALON_PIO_IRQ_MASK(BUTTONS_BASE, 0b111);
			break;
	}

}

/*
 * Program 1st entry
 */
int main()
{
   uart = fopen(UART_NAME , "r+");
   lcd = fopen(LCD_NAME, "w");
   if(uart == NULL || lcd == NULL)
   {
	   printf("Error ---------> uart or lcd can't be opened\n\r");
	   printf("Attemting to re-open...\n\r");
	   while(uart == NULL || lcd == NULL)
	   {
		   uart = fopen(UART_NAME , "r+");
		   lcd = fopen(LCD_NAME, "w");
	   }
	   printf("uart and lcd both opened...resuming programme\n\r");
   }

   // start the timer isr
   alt_alarm_start(&timer_traffic_light, 0, tlc_timer_isr, NULL);

   // initialize button isr - clear the buttons edge capture register
   IOWR_ALTERA_AVALON_PIO_EDGE_CAP(BUTTONS_BASE, 0);
   // initialize button isr - register button ISR
   alt_irq_register (BUTTONS_IRQ, NULL , NSEW_ped_isr);


  while(1)
  {
	  swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
	  if((mode != swicthValue) && (currentIndex == 0 || currentIndex == 3)) // only switch mode if in RR state
	  {
		  printf("Changing mode\n");
		  change_mode_routine();
		  //if switch 17 is high and system mode is 3 then start getting new timeout values
		  if((mode & (1 << 17)) && ((mode & (1 << 2))|| (mode & (1 << 3))))
		  {
			   int redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
			   while(!(redLEDs == 0b100100))
			   {
				   redLEDs = IORD_ALTERA_AVALON_PIO_DATA(LEDS_GREEN_BASE);
			   }
			   alt_alarm_stop(&timer_traffic_light); // stop traffic light isr while setting new timeout values
			   int indx = get_timeout_values();
			   fprintf(uart,"\n\r");
			   parse_input(indx,buffer);
			   //resume traffic light timer isr when switch 17 becomes low
			   while(swicthValue & (1 << 17))
			   {
			      swicthValue = IORD_ALTERA_AVALON_PIO_DATA(SWITCHES_BASE);
			   }
			   alt_alarm_start(&timer_traffic_light, 0 , tlc_timer_isr, NULL);
		  }
	  }
  }

  fclose(uart);
  fclose(lcd);
  return 0;
}
