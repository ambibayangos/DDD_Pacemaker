scchart DDD_pacemaker {
	
	/*input signals */
	input signal 
	Vsense,
	Asense,
	AVI_ex,
	PVARP_ex,
	AEI_ex,
	VRP_ex,
	LRI_ex,
	URI_ex;
	
	/*output signals */
	output signal 
	stop_URI,
	stop_VRP,
	stop_PVARP,
	stop_AVI,
	start_AVI,
	stop_LRI,
	stop_AEI,
	Vpace,
	start_PVARP,
	start_AEI,
	Apace,
	start_VRP,
	start_LRI,
	start_URI,
	AVI_counting,
	PVARP_counting,
	VRP_counting,
	AEI_counting,
	LRI_counting,
	URI_counting;
	
	initial state TOP
	{		
	    	
	  		region AVI:
	  		
  	
	  		  		initial state init

	  		  		-->connect with Asense
	  		  		-->connect with Apace;
	  		  	
	  		  		connector state connect
	  		  		-->waitAVI immediate with /start_AVI;
	  		  	
	  		  		state waitAVI
	  		  		-->waitURI with AVI_ex
	  		  		--> init with !PVARP_counting;
	  		  		
	  		  		state waitURI
	  		  		--> init immediate with !URI_counting/Vpace
	  		  		--> connect1 immediate with !VRP_counting;
	  		  		
	  		  		connector state connect1;
	  		  	
	

	  		
	  		region AEI:
	  		
	  			initial state idle
	  			--> connect with Vpace
	  			--> connect with Vsense;
	  			
	  			connector state connect
	  			--> waitPVARP immediate with /start_AEI;
	  			
	  			state waitPVARP
	  			--> waitAEI with PVARP_ex;
	  			
	  			state waitAEI
	  			--> idle with Asense/stop_AEI
	  			--> idle with AEI_ex/Apace;
	  		
	  		region PVARP:
	  		
	  			initial state idle
	  			--> connect with Vsense
	  			--> connect with Vpace;
	  			
	  			connector state connect
	  			--> waitVRP immediate with /start_PVARP;
	  			
	  			state waitVRP
	  			--> waitPVARP with VRP_ex;
	  			
	  			state waitPVARP
	  			--> connect1 with Vsense
	  			--> connect1 with Vpace
	  			--> idle with PVARP_ex;
	  			
	  			connector state connect1
	  			--> connect immediate with /stop_PVARP;
	  			
	  		region VRP:
	  			
	  			initial state idle
	  			--> connect with Vsense
	  			--> connect with Vpace;
	  			
	  			connector state connect
	  			--> waitVRP immediate with /start_VRP;
	  			
	  			state waitVRP
	  			--> idle with VRP_ex;
	  		
	  		region LRI:
	  			
	  			initial state idle
	  			--> waitVRP with Vsense/start_LRI;
	  				
	  			state waitVRP
	  			--> waitLRI with VRP_ex;
	  			
	  			state waitLRI
	  			-->reinit with LRI_ex/Vpace
	  			-->reinit with Vsense/stop_LRI
	  			-->reinit with Vpace/stop_LRI;
	  			
	  			state reinit
	  			-->waitVRP with /start_LRI;
	  						
	  			
	  		region URI:
	  			
	  			initial state idle
	  			--> connect with Vsense
	  			--> connect with Vpace;
	  			
	  			connector state connect
	  			--> waitVRP immediate with /start_URI;
	  			
	  			state waitVRP
	  			--> waitURI with VRP_ex;
	  		
	  			
	  			state waitURI
	  			--> connect with Vsense/stop_URI
	  			--> reinit immediate with URI_ex;
	  			
	  			state reinit
	  			-->connect immediate with Vpace/start_URI;
	  	

			/*
			 * Timer timers
			 * 
			 * 
			 * 
			 * 
			 * 
			 * 
			 */
	  		region AVI_timer:
	  		
	  			initial state idle
	  			-->counting with start_AVI;
	  			
	  			state counting
	  			-->idle with AVI_ex
	  			-->counting with /AVI_counting
	  			-->idle with stop_AVI;
	  		
	  		region PVARP_timer:
	  		
	  			initial state idle
	  			-->counting with start_PVARP;
	  			
	  			state counting
	  			-->idle with PVARP_ex
	  			-->counting with /PVARP_counting
	  			-->idle with stop_PVARP;

	  		  			
	  		region AEI_timer:
	  		
	  			initial state idle
	  			-->counting with start_AEI;
	  			
	  			state counting
	  			-->idle with AEI_ex
	  			-->counting with /AEI_counting
	  			-->idle with stop_AEI;
	  		
	  		region LRI_timer:
	  		
	  			initial state idle
	  			-->counting with start_LRI;
	  			
	  			state counting
	  			-->idle with LRI_ex
	  			-->counting with /LRI_counting
	  			-->idle with stop_LRI;
	  		 	  			
	  		region URI_timer:
	  		
	  			initial state idle
	  			-->counting with start_URI;
	  			
	  			state counting
	  			-->idle with URI_ex
	  			-->counting with /URI_counting
	  			-->idle with stop_URI;
	  			
	  	 	region VRP_timer:
	  		
	  			initial state idle
	  			-->counting with start_VRP;
	  			
	  			state counting
	  			-->idle with VRP_ex
	  			-->counting with /VRP_counting
	  			-->idle with stop_VRP;

	};

}
